
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	2001dc70 	.word	0x2001dc70
   4:	00004699 	.word	0x00004699
   8:	0001488b 	.word	0x0001488b
   c:	00004651 	.word	0x00004651
  10:	00004651 	.word	0x00004651
  14:	00004651 	.word	0x00004651
  18:	00004651 	.word	0x00004651
  1c:	00004651 	.word	0x00004651
	...
  2c:	00004351 	.word	0x00004351
  30:	00004651 	.word	0x00004651
  34:	00000000 	.word	0x00000000
  38:	000042f5 	.word	0x000042f5
  3c:	000150fb 	.word	0x000150fb

00000040 <_irq_vector_table>:
  40:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  50:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  60:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  70:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  80:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  90:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  a0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  b0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  c0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  d0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  e0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
  f0:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 100:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 110:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 120:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 130:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 140:	000043dd 000043dd 000043dd 000043dd     .C...C...C...C..
 150:	000043dd                                .C..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <__data_size+0xb5>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <__adddf3+0x70>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <__adddf3+0x84>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <__data_size+0xa1>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x16>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x34>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x4a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0x70>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <__data_size+0x107>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0x70>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <__data_size+0x35>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <__data_size+0x31>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <__data_size+0x4b>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <__data_size+0x99>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <__data_size+0x81>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <__adddf3+0x8c>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <__data_size+0x115>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <__data_size+0xd9>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <__data_size+0xf7>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x4a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x4a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    14e8:	b530      	push	{r4, r5, lr}
    14ea:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14ec:	f7fe fff0 	bl	4d0 <__aeabi_dmul>
    14f0:	4604      	mov	r4, r0
    14f2:	460d      	mov	r5, r1
    14f4:	9b08      	ldr	r3, [sp, #32]
    14f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    14fa:	40d8      	lsrs	r0, r3
    14fc:	f7fe ff7e 	bl	3fc <__aeabi_i2d>
    1500:	4622      	mov	r2, r4
    1502:	462b      	mov	r3, r5
    1504:	f7fe ffe4 	bl	4d0 <__aeabi_dmul>
    1508:	4602      	mov	r2, r0
    150a:	460b      	mov	r3, r1
    150c:	e9cd 2300 	strd	r2, r3, [sp]
    1510:	a309      	add	r3, pc, #36	; (adr r3, 1538 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1512:	e9d3 2300 	ldrd	r2, r3, [r3]
    1516:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    151a:	f7ff fa69 	bl	9f0 <__aeabi_dcmpgt>
    151e:	b940      	cbnz	r0, 1532 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1520:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1524:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1526:	e9d1 0100 	ldrd	r0, r1, [r1]
    152a:	f007 ffd3 	bl	94d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    152e:	b005      	add	sp, #20
    1530:	bd30      	pop	{r4, r5, pc}
	return __b;
    1532:	a902      	add	r1, sp, #8
    1534:	e7f5      	b.n	1522 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1536:	bf00      	nop
    1538:	ffc00000 	.word	0xffc00000
    153c:	41dfffff 	.word	0x41dfffff

00001540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1544:	b082      	sub	sp, #8
    1546:	4607      	mov	r7, r0
    1548:	460d      	mov	r5, r1
    154a:	4616      	mov	r6, r2
    154c:	461c      	mov	r4, r3
    154e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1552:	68c8      	ldr	r0, [r1, #12]
    1554:	f7fe ff64 	bl	420 <__aeabi_f2d>
    1558:	4680      	mov	r8, r0
    155a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    155c:	68f0      	ldr	r0, [r6, #12]
    155e:	f7fe ff5f 	bl	420 <__aeabi_f2d>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1566:	4640      	mov	r0, r8
    1568:	4649      	mov	r1, r9
    156a:	f7fe ffb1 	bl	4d0 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    156e:	b1ec      	cbz	r4, 15ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1570:	4680      	mov	r8, r0
    1572:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1574:	68e0      	ldr	r0, [r4, #12]
    1576:	f7fe ff53 	bl	420 <__aeabi_f2d>
    157a:	4602      	mov	r2, r0
    157c:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    157e:	4640      	mov	r0, r8
    1580:	4649      	mov	r1, r9
    1582:	f7fe fded 	bl	160 <__aeabi_dsub>
    1586:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1588:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    158c:	f8da 000c 	ldr.w	r0, [sl, #12]
    1590:	f7fe ff46 	bl	420 <__aeabi_f2d>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1598:	4640      	mov	r0, r8
    159a:	4621      	mov	r1, r4
    159c:	f7ff f8c2 	bl	724 <__aeabi_ddiv>
    15a0:	a30d      	add	r3, pc, #52	; (adr r3, 15d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15a6:	f7ff fa0f 	bl	9c8 <__aeabi_dcmple>
    15aa:	b150      	cbz	r0, 15c2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	4653      	mov	r3, sl
    15b2:	4632      	mov	r2, r6
    15b4:	4629      	mov	r1, r5
    15b6:	4638      	mov	r0, r7
    15b8:	f008 f8f6 	bl	97a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15bc:	b002      	add	sp, #8
    15be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15c2:	697c      	ldr	r4, [r7, #20]
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15cc:	4a05      	ldr	r2, [pc, #20]	; (15e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    15ce:	4906      	ldr	r1, [pc, #24]	; (15e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15d0:	4638      	mov	r0, r7
    15d2:	47a0      	blx	r4
    15d4:	2001      	movs	r0, #1
    15d6:	e7f1      	b.n	15bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    15d8:	47ae147b 	.word	0x47ae147b
    15dc:	3f947ae1 	.word	0x3f947ae1
    15e0:	000341a8 	.word	0x000341a8
    15e4:	00034118 	.word	0x00034118
    15e8:	00033f14 	.word	0x00033f14
    15ec:	00000000 	.word	0x00000000

000015f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    15f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f4:	b088      	sub	sp, #32
    15f6:	4605      	mov	r5, r0
    15f8:	460e      	mov	r6, r1
    15fa:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15fc:	780c      	ldrb	r4, [r1, #0]
    15fe:	2c09      	cmp	r4, #9
    1600:	d013      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1602:	2c07      	cmp	r4, #7
    1604:	d011      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1606:	2c01      	cmp	r4, #1
    1608:	f040 8133 	bne.w	1872 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    160c:	7810      	ldrb	r0, [r2, #0]
    160e:	2801      	cmp	r0, #1
    1610:	f040 8144 	bne.w	189c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1614:	6818      	ldr	r0, [r3, #0]
    1616:	f7fe ff03 	bl	420 <__aeabi_f2d>
    161a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    161c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1620:	2400      	movs	r4, #0
}
    1622:	4620      	mov	r0, r4
    1624:	b008      	add	sp, #32
    1626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    162a:	2c07      	cmp	r4, #7
    162c:	d01e      	beq.n	166c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    162e:	2c09      	cmp	r4, #9
    1630:	f040 8086 	bne.w	1740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1634:	7810      	ldrb	r0, [r2, #0]
    1636:	2807      	cmp	r0, #7
    1638:	f000 8097 	beq.w	176a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    163c:	2809      	cmp	r0, #9
    163e:	f040 80d5 	bne.w	17ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1642:	6913      	ldr	r3, [r2, #16]
    1644:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1648:	f000 80e4 	beq.w	1814 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    164c:	696c      	ldr	r4, [r5, #20]
    164e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1652:	9203      	str	r2, [sp, #12]
    1654:	9302      	str	r3, [sp, #8]
    1656:	4b9e      	ldr	r3, [pc, #632]	; (18d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1658:	9301      	str	r3, [sp, #4]
    165a:	4b9e      	ldr	r3, [pc, #632]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    165c:	9300      	str	r3, [sp, #0]
    165e:	2330      	movs	r3, #48	; 0x30
    1660:	4a9d      	ldr	r2, [pc, #628]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1662:	499e      	ldr	r1, [pc, #632]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1664:	4628      	mov	r0, r5
    1666:	47a0      	blx	r4
    1668:	2401      	movs	r4, #1
    166a:	e7da      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    166c:	6913      	ldr	r3, [r2, #16]
    166e:	2b00      	cmp	r3, #0
    1670:	d13b      	bne.n	16ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1672:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1676:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    167a:	4640      	mov	r0, r8
    167c:	f7ff fd04 	bl	1088 <__aeabi_fcmpgt>
    1680:	2800      	cmp	r0, #0
    1682:	d041      	beq.n	1708 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    1684:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    1688:	4640      	mov	r0, r8
    168a:	f7ff fa37 	bl	afc <__aeabi_fsub>
    168e:	4994      	ldr	r1, [pc, #592]	; (18e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    1690:	f7ff fcfa 	bl	1088 <__aeabi_fcmpgt>
    1694:	2800      	cmp	r0, #0
    1696:	d13d      	bne.n	1714 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    1698:	2c07      	cmp	r4, #7
    169a:	f000 80cd 	beq.w	1838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    169e:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16a0:	68f0      	ldr	r0, [r6, #12]
    16a2:	f7fe febd 	bl	420 <__aeabi_f2d>
    16a6:	4604      	mov	r4, r0
    16a8:	460d      	mov	r5, r1
    16aa:	4638      	mov	r0, r7
    16ac:	f7fe feb8 	bl	420 <__aeabi_f2d>
    16b0:	ab07      	add	r3, sp, #28
    16b2:	9302      	str	r3, [sp, #8]
    16b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16b6:	3308      	adds	r3, #8
    16b8:	9301      	str	r3, [sp, #4]
    16ba:	2605      	movs	r6, #5
    16bc:	9600      	str	r6, [sp, #0]
    16be:	4622      	mov	r2, r4
    16c0:	462b      	mov	r3, r5
    16c2:	f7ff ff11 	bl	14e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    16c6:	9907      	ldr	r1, [sp, #28]
    16c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16ca:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    16cc:	221f      	movs	r2, #31
    16ce:	4630      	mov	r0, r6
    16d0:	f014 fb46 	bl	15d60 <_ZN6tflite20CalculateInputRadiusEiii>
    16d4:	f7fe fe92 	bl	3fc <__aeabi_i2d>
      op_data->diff_min =
    16d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    16dc:	4619      	mov	r1, r3
    16de:	f7ff f991 	bl	a04 <__aeabi_d2iz>
    16e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16e4:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    16e6:	2400      	movs	r4, #0
    16e8:	e79b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ea:	696c      	ldr	r4, [r5, #20]
    16ec:	2200      	movs	r2, #0
    16ee:	9203      	str	r2, [sp, #12]
    16f0:	9302      	str	r3, [sp, #8]
    16f2:	4b7c      	ldr	r3, [pc, #496]	; (18e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    16f4:	9301      	str	r3, [sp, #4]
    16f6:	4b77      	ldr	r3, [pc, #476]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    16f8:	9300      	str	r3, [sp, #0]
    16fa:	2325      	movs	r3, #37	; 0x25
    16fc:	4a76      	ldr	r2, [pc, #472]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16fe:	4977      	ldr	r1, [pc, #476]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1700:	4628      	mov	r0, r5
    1702:	47a0      	blx	r4
    1704:	2401      	movs	r4, #1
    1706:	e78c      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1708:	4641      	mov	r1, r8
    170a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    170e:	f7ff f9f5 	bl	afc <__aeabi_fsub>
    1712:	e7bc      	b.n	168e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1714:	696c      	ldr	r4, [r5, #20]
    1716:	2200      	movs	r2, #0
    1718:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    171c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1720:	4640      	mov	r0, r8
    1722:	f7fe fe7d 	bl	420 <__aeabi_f2d>
    1726:	e9cd 0102 	strd	r0, r1, [sp, #8]
    172a:	4b6f      	ldr	r3, [pc, #444]	; (18e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    172c:	9301      	str	r3, [sp, #4]
    172e:	4b6f      	ldr	r3, [pc, #444]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1730:	9300      	str	r3, [sp, #0]
    1732:	2326      	movs	r3, #38	; 0x26
    1734:	4a68      	ldr	r2, [pc, #416]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1736:	496e      	ldr	r1, [pc, #440]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1738:	4628      	mov	r0, r5
    173a:	47a0      	blx	r4
    173c:	2401      	movs	r4, #1
    173e:	e770      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1740:	696e      	ldr	r6, [r5, #20]
    1742:	4620      	mov	r0, r4
    1744:	f007 fe22 	bl	938c <TfLiteTypeGetName>
    1748:	4604      	mov	r4, r0
    174a:	2009      	movs	r0, #9
    174c:	f007 fe1e 	bl	938c <TfLiteTypeGetName>
    1750:	9003      	str	r0, [sp, #12]
    1752:	9402      	str	r4, [sp, #8]
    1754:	4b67      	ldr	r3, [pc, #412]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1756:	9301      	str	r3, [sp, #4]
    1758:	4b67      	ldr	r3, [pc, #412]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    175a:	9300      	str	r3, [sp, #0]
    175c:	2329      	movs	r3, #41	; 0x29
    175e:	4a5e      	ldr	r2, [pc, #376]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1760:	4966      	ldr	r1, [pc, #408]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1762:	4628      	mov	r0, r5
    1764:	47b0      	blx	r6
    1766:	2401      	movs	r4, #1
    1768:	e75b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    176a:	6913      	ldr	r3, [r2, #16]
    176c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1770:	d00e      	beq.n	1790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    1772:	696c      	ldr	r4, [r5, #20]
    1774:	4a62      	ldr	r2, [pc, #392]	; (1900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    1776:	9203      	str	r2, [sp, #12]
    1778:	9302      	str	r3, [sp, #8]
    177a:	4b62      	ldr	r3, [pc, #392]	; (1904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    177c:	9301      	str	r3, [sp, #4]
    177e:	4b55      	ldr	r3, [pc, #340]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1780:	9300      	str	r3, [sp, #0]
    1782:	232b      	movs	r3, #43	; 0x2b
    1784:	4a54      	ldr	r2, [pc, #336]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1786:	4955      	ldr	r1, [pc, #340]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1788:	4628      	mov	r0, r5
    178a:	47a0      	blx	r4
    178c:	2401      	movs	r4, #1
    178e:	e748      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1790:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1794:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1798:	4640      	mov	r0, r8
    179a:	f7ff fc75 	bl	1088 <__aeabi_fcmpgt>
    179e:	b1f8      	cbz	r0, 17e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17a0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17a4:	4640      	mov	r0, r8
    17a6:	f7ff f9a9 	bl	afc <__aeabi_fsub>
    17aa:	4957      	ldr	r1, [pc, #348]	; (1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ac:	f7ff fc6c 	bl	1088 <__aeabi_fcmpgt>
    17b0:	2800      	cmp	r0, #0
    17b2:	f43f af71 	beq.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17b6:	696c      	ldr	r4, [r5, #20]
    17b8:	2200      	movs	r2, #0
    17ba:	4b54      	ldr	r3, [pc, #336]	; (190c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17c0:	4640      	mov	r0, r8
    17c2:	f7fe fe2d 	bl	420 <__aeabi_f2d>
    17c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    17ca:	4b51      	ldr	r3, [pc, #324]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	4b47      	ldr	r3, [pc, #284]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	232c      	movs	r3, #44	; 0x2c
    17d4:	4a40      	ldr	r2, [pc, #256]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17d6:	4946      	ldr	r1, [pc, #280]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    17d8:	4628      	mov	r0, r5
    17da:	47a0      	blx	r4
    17dc:	2401      	movs	r4, #1
    17de:	e720      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    17e0:	4641      	mov	r1, r8
    17e2:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    17e6:	f7ff f989 	bl	afc <__aeabi_fsub>
    17ea:	e7de      	b.n	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    17ec:	696e      	ldr	r6, [r5, #20]
    17ee:	f007 fdcd 	bl	938c <TfLiteTypeGetName>
    17f2:	4604      	mov	r4, r0
    17f4:	2009      	movs	r0, #9
    17f6:	f007 fdc9 	bl	938c <TfLiteTypeGetName>
    17fa:	9003      	str	r0, [sp, #12]
    17fc:	9402      	str	r4, [sp, #8]
    17fe:	4b3d      	ldr	r3, [pc, #244]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1800:	9301      	str	r3, [sp, #4]
    1802:	4b44      	ldr	r3, [pc, #272]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1804:	9300      	str	r3, [sp, #0]
    1806:	232f      	movs	r3, #47	; 0x2f
    1808:	4a33      	ldr	r2, [pc, #204]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    180a:	493c      	ldr	r1, [pc, #240]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    180c:	4628      	mov	r0, r5
    180e:	47b0      	blx	r6
    1810:	2401      	movs	r4, #1
    1812:	e706      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1814:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1818:	68d0      	ldr	r0, [r2, #12]
    181a:	f7ff fc0d 	bl	1038 <__aeabi_fcmpeq>
    181e:	2800      	cmp	r0, #0
    1820:	f47f af3a 	bne.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1824:	696c      	ldr	r4, [r5, #20]
    1826:	4b3c      	ldr	r3, [pc, #240]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1828:	9300      	str	r3, [sp, #0]
    182a:	2331      	movs	r3, #49	; 0x31
    182c:	4a2a      	ldr	r2, [pc, #168]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    182e:	493b      	ldr	r1, [pc, #236]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1830:	4628      	mov	r0, r5
    1832:	47a0      	blx	r4
    1834:	2401      	movs	r4, #1
    1836:	e6f4      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1838:	68f0      	ldr	r0, [r6, #12]
    183a:	f7fe fdf1 	bl	420 <__aeabi_f2d>
    183e:	4604      	mov	r4, r0
    1840:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1842:	6838      	ldr	r0, [r7, #0]
    1844:	f7fe fdec 	bl	420 <__aeabi_f2d>
    1848:	4602      	mov	r2, r0
    184a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    184c:	4620      	mov	r0, r4
    184e:	4629      	mov	r1, r5
    1850:	f7fe fe3e 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1854:	a31c      	add	r3, pc, #112	; (adr r3, 18c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7fe ff63 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    185e:	ab07      	add	r3, sp, #28
    1860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1862:	3208      	adds	r2, #8
    1864:	f007 fde8 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    1868:	9b07      	ldr	r3, [sp, #28]
    186a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    186c:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    186e:	2400      	movs	r4, #0
    1870:	e6d7      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1872:	6946      	ldr	r6, [r0, #20]
    1874:	4620      	mov	r0, r4
    1876:	f007 fd89 	bl	938c <TfLiteTypeGetName>
    187a:	4604      	mov	r4, r0
    187c:	2001      	movs	r0, #1
    187e:	f007 fd85 	bl	938c <TfLiteTypeGetName>
    1882:	9003      	str	r0, [sp, #12]
    1884:	9402      	str	r4, [sp, #8]
    1886:	4b26      	ldr	r3, [pc, #152]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    1888:	9301      	str	r3, [sp, #4]
    188a:	4b1b      	ldr	r3, [pc, #108]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    188c:	9300      	str	r3, [sp, #0]
    188e:	234e      	movs	r3, #78	; 0x4e
    1890:	4a11      	ldr	r2, [pc, #68]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1892:	491a      	ldr	r1, [pc, #104]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1894:	4628      	mov	r0, r5
    1896:	47b0      	blx	r6
    1898:	2401      	movs	r4, #1
    189a:	e6c2      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    189c:	696f      	ldr	r7, [r5, #20]
    189e:	f007 fd75 	bl	938c <TfLiteTypeGetName>
    18a2:	4606      	mov	r6, r0
    18a4:	2001      	movs	r0, #1
    18a6:	f007 fd71 	bl	938c <TfLiteTypeGetName>
    18aa:	9003      	str	r0, [sp, #12]
    18ac:	9602      	str	r6, [sp, #8]
    18ae:	4b1c      	ldr	r3, [pc, #112]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	234f      	movs	r3, #79	; 0x4f
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18ba:	4910      	ldr	r1, [pc, #64]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18bc:	4628      	mov	r0, r5
    18be:	47b8      	blx	r7
    18c0:	e6af      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    18c2:	bf00      	nop
    18c4:	f3af 8000 	nop.w
    18c8:	00140014 	.word	0x00140014
    18cc:	3f240014 	.word	0x3f240014
    18d0:	00034f6c 	.word	0x00034f6c
    18d4:	00034ef8 	.word	0x00034ef8
    18d8:	00034ea0 	.word	0x00034ea0
    18dc:	000341d4 	.word	0x000341d4
    18e0:	3303126f 	.word	0x3303126f
    18e4:	00034738 	.word	0x00034738
    18e8:	00034f34 	.word	0x00034f34
    18ec:	00034f40 	.word	0x00034f40
    18f0:	00034f14 	.word	0x00034f14
    18f4:	000342b0 	.word	0x000342b0
    18f8:	0003489c 	.word	0x0003489c
    18fc:	00034bd4 	.word	0x00034bd4
    1900:	ffff8000 	.word	0xffff8000
    1904:	00034f58 	.word	0x00034f58
    1908:	3283126f 	.word	0x3283126f
    190c:	3ef00000 	.word	0x3ef00000
    1910:	00034f60 	.word	0x00034f60
    1914:	0003488c 	.word	0x0003488c
    1918:	00034f74 	.word	0x00034f74
    191c:	00033f14 	.word	0x00033f14
    1920:	00034f98 	.word	0x00034f98
    1924:	00000000 	.word	0x00000000

00001928 <floor>:
    1928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    192e:	460b      	mov	r3, r1
    1930:	4602      	mov	r2, r0
    1932:	460c      	mov	r4, r1
    1934:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1938:	4606      	mov	r6, r0
    193a:	2d13      	cmp	r5, #19
    193c:	dc20      	bgt.n	1980 <floor+0x58>
    193e:	2d00      	cmp	r5, #0
    1940:	db40      	blt.n	19c4 <floor+0x9c>
    1942:	4f35      	ldr	r7, [pc, #212]	; (1a18 <floor+0xf0>)
    1944:	412f      	asrs	r7, r5
    1946:	ea01 0c07 	and.w	ip, r1, r7
    194a:	ea5c 0c00 	orrs.w	ip, ip, r0
    194e:	d014      	beq.n	197a <floor+0x52>
    1950:	a32f      	add	r3, pc, #188	; (adr r3, 1a10 <floor+0xe8>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	f7fe fc05 	bl	164 <__adddf3>
    195a:	2200      	movs	r2, #0
    195c:	2300      	movs	r3, #0
    195e:	f7ff f847 	bl	9f0 <__aeabi_dcmpgt>
    1962:	b140      	cbz	r0, 1976 <floor+0x4e>
    1964:	2c00      	cmp	r4, #0
    1966:	da03      	bge.n	1970 <floor+0x48>
    1968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    196c:	412b      	asrs	r3, r5
    196e:	441c      	add	r4, r3
    1970:	ea24 0407 	bic.w	r4, r4, r7
    1974:	2600      	movs	r6, #0
    1976:	4632      	mov	r2, r6
    1978:	4623      	mov	r3, r4
    197a:	4610      	mov	r0, r2
    197c:	4619      	mov	r1, r3
    197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1980:	2d33      	cmp	r5, #51	; 0x33
    1982:	dd07      	ble.n	1994 <floor+0x6c>
    1984:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1988:	d1f7      	bne.n	197a <floor+0x52>
    198a:	f7fe fbeb 	bl	164 <__adddf3>
    198e:	4602      	mov	r2, r0
    1990:	460b      	mov	r3, r1
    1992:	e7f2      	b.n	197a <floor+0x52>
    1994:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    1998:	f04f 3cff 	mov.w	ip, #4294967295
    199c:	fa2c f707 	lsr.w	r7, ip, r7
    19a0:	4207      	tst	r7, r0
    19a2:	d0ea      	beq.n	197a <floor+0x52>
    19a4:	a31a      	add	r3, pc, #104	; (adr r3, 1a10 <floor+0xe8>)
    19a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19aa:	f7fe fbdb 	bl	164 <__adddf3>
    19ae:	2200      	movs	r2, #0
    19b0:	2300      	movs	r3, #0
    19b2:	f7ff f81d 	bl	9f0 <__aeabi_dcmpgt>
    19b6:	2800      	cmp	r0, #0
    19b8:	d0dd      	beq.n	1976 <floor+0x4e>
    19ba:	2c00      	cmp	r4, #0
    19bc:	db1b      	blt.n	19f6 <floor+0xce>
    19be:	ea26 0607 	bic.w	r6, r6, r7
    19c2:	e7d8      	b.n	1976 <floor+0x4e>
    19c4:	a312      	add	r3, pc, #72	; (adr r3, 1a10 <floor+0xe8>)
    19c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ca:	f7fe fbcb 	bl	164 <__adddf3>
    19ce:	2200      	movs	r2, #0
    19d0:	2300      	movs	r3, #0
    19d2:	f7ff f80d 	bl	9f0 <__aeabi_dcmpgt>
    19d6:	2800      	cmp	r0, #0
    19d8:	d0cd      	beq.n	1976 <floor+0x4e>
    19da:	2c00      	cmp	r4, #0
    19dc:	db02      	blt.n	19e4 <floor+0xbc>
    19de:	2600      	movs	r6, #0
    19e0:	4634      	mov	r4, r6
    19e2:	e7c8      	b.n	1976 <floor+0x4e>
    19e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    19e8:	4a0c      	ldr	r2, [pc, #48]	; (1a1c <floor+0xf4>)
    19ea:	4333      	orrs	r3, r6
    19ec:	2600      	movs	r6, #0
    19ee:	42b3      	cmp	r3, r6
    19f0:	bf18      	it	ne
    19f2:	4614      	movne	r4, r2
    19f4:	e7bf      	b.n	1976 <floor+0x4e>
    19f6:	2d14      	cmp	r5, #20
    19f8:	d008      	beq.n	1a0c <floor+0xe4>
    19fa:	2201      	movs	r2, #1
    19fc:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a00:	fa02 f303 	lsl.w	r3, r2, r3
    1a04:	199e      	adds	r6, r3, r6
    1a06:	bf28      	it	cs
    1a08:	18a4      	addcs	r4, r4, r2
    1a0a:	e7d8      	b.n	19be <floor+0x96>
    1a0c:	3401      	adds	r4, #1
    1a0e:	e7d6      	b.n	19be <floor+0x96>
    1a10:	8800759c 	.word	0x8800759c
    1a14:	7e37e43c 	.word	0x7e37e43c
    1a18:	000fffff 	.word	0x000fffff
    1a1c:	bff00000 	.word	0xbff00000

00001a20 <_dtoa_r>:
    1a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a24:	4616      	mov	r6, r2
    1a26:	b099      	sub	sp, #100	; 0x64
    1a28:	461f      	mov	r7, r3
    1a2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a2c:	4605      	mov	r5, r0
    1a2e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a32:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a36:	b93c      	cbnz	r4, 1a48 <_dtoa_r+0x28>
    1a38:	2010      	movs	r0, #16
    1a3a:	f011 f85f 	bl	12afc <malloc>
    1a3e:	6268      	str	r0, [r5, #36]	; 0x24
    1a40:	6004      	str	r4, [r0, #0]
    1a42:	60c4      	str	r4, [r0, #12]
    1a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a4a:	6819      	ldr	r1, [r3, #0]
    1a4c:	b151      	cbz	r1, 1a64 <_dtoa_r+0x44>
    1a4e:	685a      	ldr	r2, [r3, #4]
    1a50:	2301      	movs	r3, #1
    1a52:	4628      	mov	r0, r5
    1a54:	4093      	lsls	r3, r2
    1a56:	604a      	str	r2, [r1, #4]
    1a58:	608b      	str	r3, [r1, #8]
    1a5a:	f017 fb2c 	bl	190b6 <_Bfree>
    1a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a60:	2200      	movs	r2, #0
    1a62:	601a      	str	r2, [r3, #0]
    1a64:	1e3b      	subs	r3, r7, #0
    1a66:	bfb7      	itett	lt
    1a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1a6c:	2300      	movge	r3, #0
    1a6e:	2201      	movlt	r2, #1
    1a70:	9305      	strlt	r3, [sp, #20]
    1a72:	bfa8      	it	ge
    1a74:	f8c8 3000 	strge.w	r3, [r8]
    1a78:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1a7c:	4bac      	ldr	r3, [pc, #688]	; (1d30 <_dtoa_r+0x310>)
    1a7e:	bfb8      	it	lt
    1a80:	f8c8 2000 	strlt.w	r2, [r8]
    1a84:	ea33 0309 	bics.w	r3, r3, r9
    1a88:	d119      	bne.n	1abe <_dtoa_r+0x9e>
    1a8a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1a90:	6013      	str	r3, [r2, #0]
    1a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1a96:	4333      	orrs	r3, r6
    1a98:	f000 856a 	beq.w	2570 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x570>
    1a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1a9e:	b953      	cbnz	r3, 1ab6 <_dtoa_r+0x96>
    1aa0:	4ba4      	ldr	r3, [pc, #656]	; (1d34 <_dtoa_r+0x314>)
    1aa2:	e023      	b.n	1aec <_dtoa_r+0xcc>
    1aa4:	4ba4      	ldr	r3, [pc, #656]	; (1d38 <_dtoa_r+0x318>)
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	3308      	adds	r3, #8
    1aaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aac:	6013      	str	r3, [r2, #0]
    1aae:	9803      	ldr	r0, [sp, #12]
    1ab0:	b019      	add	sp, #100	; 0x64
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	4b9f      	ldr	r3, [pc, #636]	; (1d34 <_dtoa_r+0x314>)
    1ab8:	9303      	str	r3, [sp, #12]
    1aba:	3303      	adds	r3, #3
    1abc:	e7f5      	b.n	1aaa <_dtoa_r+0x8a>
    1abe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1ac2:	2200      	movs	r2, #0
    1ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1acc:	2300      	movs	r3, #0
    1ace:	f7fe ff67 	bl	9a0 <__aeabi_dcmpeq>
    1ad2:	4680      	mov	r8, r0
    1ad4:	b160      	cbz	r0, 1af0 <_dtoa_r+0xd0>
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1ada:	6013      	str	r3, [r2, #0]
    1adc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f000 8543 	beq.w	256a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56a>
    1ae4:	4b95      	ldr	r3, [pc, #596]	; (1d3c <_dtoa_r+0x31c>)
    1ae6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ae8:	6013      	str	r3, [r2, #0]
    1aea:	3b01      	subs	r3, #1
    1aec:	9303      	str	r3, [sp, #12]
    1aee:	e7de      	b.n	1aae <_dtoa_r+0x8e>
    1af0:	ab16      	add	r3, sp, #88	; 0x58
    1af2:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1af6:	4628      	mov	r0, r5
    1af8:	9301      	str	r3, [sp, #4]
    1afa:	ab17      	add	r3, sp, #92	; 0x5c
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b02:	f017 fd17 	bl	19534 <__d2b>
    1b06:	4683      	mov	fp, r0
    1b08:	2c00      	cmp	r4, #0
    1b0a:	d07c      	beq.n	1c06 <_dtoa_r+0x1e6>
    1b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b12:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b26:	2200      	movs	r2, #0
    1b28:	4b85      	ldr	r3, [pc, #532]	; (1d40 <_dtoa_r+0x320>)
    1b2a:	f7fe fb19 	bl	160 <__aeabi_dsub>
    1b2e:	a37a      	add	r3, pc, #488	; (adr r3, 1d18 <_dtoa_r+0x2f8>)
    1b30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b34:	f7fe fccc 	bl	4d0 <__aeabi_dmul>
    1b38:	a379      	add	r3, pc, #484	; (adr r3, 1d20 <_dtoa_r+0x300>)
    1b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b3e:	f7fe fb11 	bl	164 <__adddf3>
    1b42:	4606      	mov	r6, r0
    1b44:	460f      	mov	r7, r1
    1b46:	4620      	mov	r0, r4
    1b48:	f7fe fc58 	bl	3fc <__aeabi_i2d>
    1b4c:	a376      	add	r3, pc, #472	; (adr r3, 1d28 <_dtoa_r+0x308>)
    1b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b52:	f7fe fcbd 	bl	4d0 <__aeabi_dmul>
    1b56:	4602      	mov	r2, r0
    1b58:	460b      	mov	r3, r1
    1b5a:	4630      	mov	r0, r6
    1b5c:	4639      	mov	r1, r7
    1b5e:	f7fe fb01 	bl	164 <__adddf3>
    1b62:	4606      	mov	r6, r0
    1b64:	460f      	mov	r7, r1
    1b66:	f7fe ff4d 	bl	a04 <__aeabi_d2iz>
    1b6a:	2200      	movs	r2, #0
    1b6c:	4682      	mov	sl, r0
    1b6e:	2300      	movs	r3, #0
    1b70:	4630      	mov	r0, r6
    1b72:	4639      	mov	r1, r7
    1b74:	f7fe ff1e 	bl	9b4 <__aeabi_dcmplt>
    1b78:	b148      	cbz	r0, 1b8e <_dtoa_r+0x16e>
    1b7a:	4650      	mov	r0, sl
    1b7c:	f7fe fc3e 	bl	3fc <__aeabi_i2d>
    1b80:	4632      	mov	r2, r6
    1b82:	463b      	mov	r3, r7
    1b84:	f7fe ff0c 	bl	9a0 <__aeabi_dcmpeq>
    1b88:	b908      	cbnz	r0, 1b8e <_dtoa_r+0x16e>
    1b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    1b8e:	f1ba 0f16 	cmp.w	sl, #22
    1b92:	d856      	bhi.n	1c42 <_dtoa_r+0x222>
    1b94:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <_dtoa_r+0x324>)
    1b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba2:	f7fe ff07 	bl	9b4 <__aeabi_dcmplt>
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d04d      	beq.n	1c46 <_dtoa_r+0x226>
    1baa:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bae:	2300      	movs	r3, #0
    1bb0:	930f      	str	r3, [sp, #60]	; 0x3c
    1bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bb4:	1b1c      	subs	r4, r3, r4
    1bb6:	1e63      	subs	r3, r4, #1
    1bb8:	9309      	str	r3, [sp, #36]	; 0x24
    1bba:	bf49      	itett	mi
    1bbc:	f1c4 0301 	rsbmi	r3, r4, #1
    1bc0:	2300      	movpl	r3, #0
    1bc2:	9306      	strmi	r3, [sp, #24]
    1bc4:	2300      	movmi	r3, #0
    1bc6:	bf54      	ite	pl
    1bc8:	9306      	strpl	r3, [sp, #24]
    1bca:	9309      	strmi	r3, [sp, #36]	; 0x24
    1bcc:	f1ba 0f00 	cmp.w	sl, #0
    1bd0:	db3b      	blt.n	1c4a <_dtoa_r+0x22a>
    1bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1bd8:	4453      	add	r3, sl
    1bda:	9309      	str	r3, [sp, #36]	; 0x24
    1bdc:	2300      	movs	r3, #0
    1bde:	930a      	str	r3, [sp, #40]	; 0x28
    1be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1be2:	2b09      	cmp	r3, #9
    1be4:	f200 80b4 	bhi.w	1d50 <_dtoa_r+0x330>
    1be8:	2b05      	cmp	r3, #5
    1bea:	bfc5      	ittet	gt
    1bec:	3b04      	subgt	r3, #4
    1bee:	2400      	movgt	r4, #0
    1bf0:	2401      	movle	r4, #1
    1bf2:	9322      	strgt	r3, [sp, #136]	; 0x88
    1bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bf6:	3b02      	subs	r3, #2
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	f200 80b5 	bhi.w	1d68 <_dtoa_r+0x348>
    1bfe:	e8df f003 	tbb	[pc, r3]
    1c02:	7d2e      	.short	0x7d2e
    1c04:	a57b      	.short	0xa57b
    1c06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c0a:	441c      	add	r4, r3
    1c0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c10:	2b20      	cmp	r3, #32
    1c12:	bfc6      	itte	gt
    1c14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c1c:	f1c3 0320 	rsble	r3, r3, #32
    1c20:	f104 34ff 	add.w	r4, r4, #4294967295
    1c24:	bfc5      	ittet	gt
    1c26:	fa09 f303 	lslgt.w	r3, r9, r3
    1c2a:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c2e:	fa06 f003 	lslle.w	r0, r6, r3
    1c32:	4318      	orrgt	r0, r3
    1c34:	f7fe fbd2 	bl	3dc <__aeabi_ui2d>
    1c38:	2301      	movs	r3, #1
    1c3a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c3e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c40:	e771      	b.n	1b26 <_dtoa_r+0x106>
    1c42:	2301      	movs	r3, #1
    1c44:	e7b4      	b.n	1bb0 <_dtoa_r+0x190>
    1c46:	900f      	str	r0, [sp, #60]	; 0x3c
    1c48:	e7b3      	b.n	1bb2 <_dtoa_r+0x192>
    1c4a:	9b06      	ldr	r3, [sp, #24]
    1c4c:	eba3 030a 	sub.w	r3, r3, sl
    1c50:	9306      	str	r3, [sp, #24]
    1c52:	f1ca 0300 	rsb	r3, sl, #0
    1c56:	930a      	str	r3, [sp, #40]	; 0x28
    1c58:	2300      	movs	r3, #0
    1c5a:	930e      	str	r3, [sp, #56]	; 0x38
    1c5c:	e7c0      	b.n	1be0 <_dtoa_r+0x1c0>
    1c5e:	2300      	movs	r3, #0
    1c60:	930b      	str	r3, [sp, #44]	; 0x2c
    1c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c64:	2b00      	cmp	r3, #0
    1c66:	f300 8082 	bgt.w	1d6e <_dtoa_r+0x34e>
    1c6a:	f04f 0901 	mov.w	r9, #1
    1c6e:	464b      	mov	r3, r9
    1c70:	f8cd 9020 	str.w	r9, [sp, #32]
    1c74:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1c78:	2200      	movs	r2, #0
    1c7a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1c7c:	6072      	str	r2, [r6, #4]
    1c7e:	2204      	movs	r2, #4
    1c80:	f102 0014 	add.w	r0, r2, #20
    1c84:	6871      	ldr	r1, [r6, #4]
    1c86:	4298      	cmp	r0, r3
    1c88:	d977      	bls.n	1d7a <_dtoa_r+0x35a>
    1c8a:	4628      	mov	r0, r5
    1c8c:	f017 f9df 	bl	1904e <_Balloc>
    1c90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c92:	6030      	str	r0, [r6, #0]
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	9303      	str	r3, [sp, #12]
    1c98:	9b08      	ldr	r3, [sp, #32]
    1c9a:	2b0e      	cmp	r3, #14
    1c9c:	f200 80ee 	bhi.w	1e7c <_dtoa_r+0x45c>
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	f000 80eb 	beq.w	1e7c <_dtoa_r+0x45c>
    1ca6:	f1ba 0f00 	cmp.w	sl, #0
    1caa:	dd7a      	ble.n	1da2 <_dtoa_r+0x382>
    1cac:	f00a 030f 	and.w	r3, sl, #15
    1cb0:	4a24      	ldr	r2, [pc, #144]	; (1d44 <_dtoa_r+0x324>)
    1cb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cba:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cbe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1cc2:	ea4f 142a 	mov.w	r4, sl, asr #4
    1cc6:	d05c      	beq.n	1d82 <_dtoa_r+0x362>
    1cc8:	4b1f      	ldr	r3, [pc, #124]	; (1d48 <_dtoa_r+0x328>)
    1cca:	f004 040f 	and.w	r4, r4, #15
    1cce:	2703      	movs	r7, #3
    1cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1cd8:	f7fe fd24 	bl	724 <__aeabi_ddiv>
    1cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1ce0:	4e19      	ldr	r6, [pc, #100]	; (1d48 <_dtoa_r+0x328>)
    1ce2:	2c00      	cmp	r4, #0
    1ce4:	d14f      	bne.n	1d86 <_dtoa_r+0x366>
    1ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1cee:	f7fe fd19 	bl	724 <__aeabi_ddiv>
    1cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1cf6:	e06e      	b.n	1dd6 <_dtoa_r+0x3b6>
    1cf8:	2301      	movs	r3, #1
    1cfa:	e7b1      	b.n	1c60 <_dtoa_r+0x240>
    1cfc:	2300      	movs	r3, #0
    1cfe:	930b      	str	r3, [sp, #44]	; 0x2c
    1d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d02:	eb0a 0903 	add.w	r9, sl, r3
    1d06:	f109 0301 	add.w	r3, r9, #1
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	9308      	str	r3, [sp, #32]
    1d0e:	bfb8      	it	lt
    1d10:	2301      	movlt	r3, #1
    1d12:	e7b1      	b.n	1c78 <_dtoa_r+0x258>
    1d14:	f3af 8000 	nop.w
    1d18:	636f4361 	.word	0x636f4361
    1d1c:	3fd287a7 	.word	0x3fd287a7
    1d20:	8b60c8b3 	.word	0x8b60c8b3
    1d24:	3fc68a28 	.word	0x3fc68a28
    1d28:	509f79fb 	.word	0x509f79fb
    1d2c:	3fd34413 	.word	0x3fd34413
    1d30:	7ff00000 	.word	0x7ff00000
    1d34:	00035343 	.word	0x00035343
    1d38:	0003533a 	.word	0x0003533a
    1d3c:	00035317 	.word	0x00035317
    1d40:	3ff80000 	.word	0x3ff80000
    1d44:	00031c20 	.word	0x00031c20
    1d48:	00031bf8 	.word	0x00031bf8
    1d4c:	2301      	movs	r3, #1
    1d4e:	e7d6      	b.n	1cfe <_dtoa_r+0x2de>
    1d50:	2401      	movs	r4, #1
    1d52:	2300      	movs	r3, #0
    1d54:	940b      	str	r4, [sp, #44]	; 0x2c
    1d56:	9322      	str	r3, [sp, #136]	; 0x88
    1d58:	f04f 39ff 	mov.w	r9, #4294967295
    1d5c:	2200      	movs	r2, #0
    1d5e:	2312      	movs	r3, #18
    1d60:	f8cd 9020 	str.w	r9, [sp, #32]
    1d64:	9223      	str	r2, [sp, #140]	; 0x8c
    1d66:	e787      	b.n	1c78 <_dtoa_r+0x258>
    1d68:	2301      	movs	r3, #1
    1d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    1d6c:	e7f4      	b.n	1d58 <_dtoa_r+0x338>
    1d6e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1d72:	464b      	mov	r3, r9
    1d74:	f8cd 9020 	str.w	r9, [sp, #32]
    1d78:	e77e      	b.n	1c78 <_dtoa_r+0x258>
    1d7a:	3101      	adds	r1, #1
    1d7c:	0052      	lsls	r2, r2, #1
    1d7e:	6071      	str	r1, [r6, #4]
    1d80:	e77e      	b.n	1c80 <_dtoa_r+0x260>
    1d82:	2702      	movs	r7, #2
    1d84:	e7ac      	b.n	1ce0 <_dtoa_r+0x2c0>
    1d86:	07e1      	lsls	r1, r4, #31
    1d88:	d508      	bpl.n	1d9c <_dtoa_r+0x37c>
    1d8a:	3701      	adds	r7, #1
    1d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1d90:	e9d6 2300 	ldrd	r2, r3, [r6]
    1d94:	f7fe fb9c 	bl	4d0 <__aeabi_dmul>
    1d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1d9c:	1064      	asrs	r4, r4, #1
    1d9e:	3608      	adds	r6, #8
    1da0:	e79f      	b.n	1ce2 <_dtoa_r+0x2c2>
    1da2:	f000 80a5 	beq.w	1ef0 <_dtoa_r+0x4d0>
    1da6:	f1ca 0400 	rsb	r4, sl, #0
    1daa:	4ba3      	ldr	r3, [pc, #652]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1dac:	4ea3      	ldr	r6, [pc, #652]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    1dae:	2702      	movs	r7, #2
    1db0:	f004 020f 	and.w	r2, r4, #15
    1db4:	1124      	asrs	r4, r4, #4
    1db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dc2:	f7fe fb85 	bl	4d0 <__aeabi_dmul>
    1dc6:	2300      	movs	r3, #0
    1dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1dcc:	2c00      	cmp	r4, #0
    1dce:	f040 8084 	bne.w	1eda <_dtoa_r+0x4ba>
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d18d      	bne.n	1cf2 <_dtoa_r+0x2d2>
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	2b00      	cmp	r3, #0
    1dda:	f000 808b 	beq.w	1ef4 <_dtoa_r+0x4d4>
    1dde:	2200      	movs	r2, #0
    1de0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dec:	4b94      	ldr	r3, [pc, #592]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1dee:	f7fe fde1 	bl	9b4 <__aeabi_dcmplt>
    1df2:	2800      	cmp	r0, #0
    1df4:	d07e      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1df6:	9b08      	ldr	r3, [sp, #32]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d07b      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1dfc:	f1b9 0f00 	cmp.w	r9, #0
    1e00:	dd38      	ble.n	1e74 <_dtoa_r+0x454>
    1e02:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e06:	3701      	adds	r7, #1
    1e08:	464c      	mov	r4, r9
    1e0a:	2200      	movs	r2, #0
    1e0c:	4b8d      	ldr	r3, [pc, #564]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e12:	f7fe fb5d 	bl	4d0 <__aeabi_dmul>
    1e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e1a:	4638      	mov	r0, r7
    1e1c:	f7fe faee 	bl	3fc <__aeabi_i2d>
    1e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e24:	f7fe fb54 	bl	4d0 <__aeabi_dmul>
    1e28:	2200      	movs	r2, #0
    1e2a:	4b87      	ldr	r3, [pc, #540]	; (2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>)
    1e2c:	f7fe f99a 	bl	164 <__adddf3>
    1e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e38:	9611      	str	r6, [sp, #68]	; 0x44
    1e3a:	2c00      	cmp	r4, #0
    1e3c:	d15d      	bne.n	1efa <_dtoa_r+0x4da>
    1e3e:	2200      	movs	r2, #0
    1e40:	4b82      	ldr	r3, [pc, #520]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e46:	f7fe f98b 	bl	160 <__aeabi_dsub>
    1e4a:	4602      	mov	r2, r0
    1e4c:	460b      	mov	r3, r1
    1e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e54:	4633      	mov	r3, r6
    1e56:	f7fe fdcb 	bl	9f0 <__aeabi_dcmpgt>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f040 8294 	bne.w	2388 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x388>
    1e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e6a:	f7fe fda3 	bl	9b4 <__aeabi_dcmplt>
    1e6e:	2800      	cmp	r0, #0
    1e70:	f040 8288 	bne.w	2384 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x384>
    1e74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1e7e:	2b00      	cmp	r3, #0
    1e80:	f2c0 814f 	blt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e84:	f1ba 0f0e 	cmp.w	sl, #14
    1e88:	f300 814b 	bgt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e8c:	4b6a      	ldr	r3, [pc, #424]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1e92:	e9d3 3400 	ldrd	r3, r4, [r3]
    1e96:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	f280 80d9 	bge.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1ea2:	9b08      	ldr	r3, [sp, #32]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f300 80d5 	bgt.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1eaa:	f040 826a 	bne.w	2382 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x382>
    1eae:	2200      	movs	r2, #0
    1eb0:	4b66      	ldr	r3, [pc, #408]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1eb6:	f7fe fb0b 	bl	4d0 <__aeabi_dmul>
    1eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ebe:	f7fe fd8d 	bl	9dc <__aeabi_dcmpge>
    1ec2:	9c08      	ldr	r4, [sp, #32]
    1ec4:	4626      	mov	r6, r4
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f040 8240 	bne.w	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    1ecc:	9f03      	ldr	r7, [sp, #12]
    1ece:	2331      	movs	r3, #49	; 0x31
    1ed0:	f10a 0a01 	add.w	sl, sl, #1
    1ed4:	f807 3b01 	strb.w	r3, [r7], #1
    1ed8:	e23c      	b.n	2354 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x354>
    1eda:	07e2      	lsls	r2, r4, #31
    1edc:	d505      	bpl.n	1eea <_dtoa_r+0x4ca>
    1ede:	3701      	adds	r7, #1
    1ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
    1ee4:	f7fe faf4 	bl	4d0 <__aeabi_dmul>
    1ee8:	2301      	movs	r3, #1
    1eea:	1064      	asrs	r4, r4, #1
    1eec:	3608      	adds	r6, #8
    1eee:	e76d      	b.n	1dcc <_dtoa_r+0x3ac>
    1ef0:	2702      	movs	r7, #2
    1ef2:	e770      	b.n	1dd6 <_dtoa_r+0x3b6>
    1ef4:	46d0      	mov	r8, sl
    1ef6:	9c08      	ldr	r4, [sp, #32]
    1ef8:	e78f      	b.n	1e1a <_dtoa_r+0x3fa>
    1efa:	9903      	ldr	r1, [sp, #12]
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1efe:	4421      	add	r1, r4
    1f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f04:	9112      	str	r1, [sp, #72]	; 0x48
    1f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f10:	2900      	cmp	r1, #0
    1f12:	d046      	beq.n	1fa2 <_dtoa_r+0x582>
    1f14:	2000      	movs	r0, #0
    1f16:	494e      	ldr	r1, [pc, #312]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1f18:	f7fe fc04 	bl	724 <__aeabi_ddiv>
    1f1c:	463b      	mov	r3, r7
    1f1e:	4632      	mov	r2, r6
    1f20:	f7fe f91e 	bl	160 <__aeabi_dsub>
    1f24:	9f03      	ldr	r7, [sp, #12]
    1f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f2e:	f7fe fd69 	bl	a04 <__aeabi_d2iz>
    1f32:	4604      	mov	r4, r0
    1f34:	f7fe fa62 	bl	3fc <__aeabi_i2d>
    1f38:	4602      	mov	r2, r0
    1f3a:	460b      	mov	r3, r1
    1f3c:	3430      	adds	r4, #48	; 0x30
    1f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f42:	f7fe f90d 	bl	160 <__aeabi_dsub>
    1f46:	4602      	mov	r2, r0
    1f48:	460b      	mov	r3, r1
    1f4a:	f807 4b01 	strb.w	r4, [r7], #1
    1f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f56:	f7fe fd2d 	bl	9b4 <__aeabi_dcmplt>
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d164      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    1f5e:	2000      	movs	r0, #0
    1f60:	4937      	ldr	r1, [pc, #220]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f66:	f7fe f8fb 	bl	160 <__aeabi_dsub>
    1f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f6e:	f7fe fd21 	bl	9b4 <__aeabi_dcmplt>
    1f72:	2800      	cmp	r0, #0
    1f74:	f040 80b4 	bne.w	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    1f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f7a:	429f      	cmp	r7, r3
    1f7c:	f43f af7a 	beq.w	1e74 <_dtoa_r+0x454>
    1f80:	2200      	movs	r2, #0
    1f82:	4b30      	ldr	r3, [pc, #192]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f88:	f7fe faa2 	bl	4d0 <__aeabi_dmul>
    1f8c:	2200      	movs	r2, #0
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f98:	f7fe fa9a 	bl	4d0 <__aeabi_dmul>
    1f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fa0:	e7c3      	b.n	1f2a <_dtoa_r+0x50a>
    1fa2:	4630      	mov	r0, r6
    1fa4:	4639      	mov	r1, r7
    1fa6:	f7fe fa93 	bl	4d0 <__aeabi_dmul>
    1faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fac:	9c03      	ldr	r4, [sp, #12]
    1fae:	9314      	str	r3, [sp, #80]	; 0x50
    1fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fb8:	f7fe fd24 	bl	a04 <__aeabi_d2iz>
    1fbc:	9015      	str	r0, [sp, #84]	; 0x54
    1fbe:	f7fe fa1d 	bl	3fc <__aeabi_i2d>
    1fc2:	4602      	mov	r2, r0
    1fc4:	460b      	mov	r3, r1
    1fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fca:	f7fe f8c9 	bl	160 <__aeabi_dsub>
    1fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1fd0:	4606      	mov	r6, r0
    1fd2:	460f      	mov	r7, r1
    1fd4:	3330      	adds	r3, #48	; 0x30
    1fd6:	2200      	movs	r2, #0
    1fd8:	f804 3b01 	strb.w	r3, [r4], #1
    1fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fde:	429c      	cmp	r4, r3
    1fe0:	d124      	bne.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fe8:	f7fe f8bc 	bl	164 <__adddf3>
    1fec:	4602      	mov	r2, r0
    1fee:	460b      	mov	r3, r1
    1ff0:	4630      	mov	r0, r6
    1ff2:	4639      	mov	r1, r7
    1ff4:	f7fe fcfc 	bl	9f0 <__aeabi_dcmpgt>
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d170      	bne.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
    1ffc:	2000      	movs	r0, #0
    1ffe:	4914      	ldr	r1, [pc, #80]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    2000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2004:	f7fe f8ac 	bl	160 <__aeabi_dsub>
    2008:	4602      	mov	r2, r0
    200a:	460b      	mov	r3, r1
    200c:	4630      	mov	r0, r6
    200e:	4639      	mov	r1, r7
    2010:	f7fe fcd0 	bl	9b4 <__aeabi_dcmplt>
    2014:	2800      	cmp	r0, #0
    2016:	f43f af2d 	beq.w	1e74 <_dtoa_r+0x454>
    201a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    201c:	1e7b      	subs	r3, r7, #1
    201e:	9314      	str	r3, [sp, #80]	; 0x50
    2020:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2024:	2b30      	cmp	r3, #48	; 0x30
    2026:	d0f8      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    2028:	46c2      	mov	sl, r8
    202a:	e048      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    202e:	f7fe fa4f 	bl	4d0 <__aeabi_dmul>
    2032:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2036:	e7bd      	b.n	1fb4 <_dtoa_r+0x594>
    2038:	00031c20 	.word	0x00031c20
    203c:	00031bf8 	.word	0x00031bf8
    2040:	3ff00000 	.word	0x3ff00000
    2044:	40240000 	.word	0x40240000
    2048:	401c0000 	.word	0x401c0000
    204c:	40140000 	.word	0x40140000
    2050:	3fe00000 	.word	0x3fe00000
    2054:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2058:	9f03      	ldr	r7, [sp, #12]
    205a:	4640      	mov	r0, r8
    205c:	4649      	mov	r1, r9
    205e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2062:	f7fe fb5f 	bl	724 <__aeabi_ddiv>
    2066:	f7fe fccd 	bl	a04 <__aeabi_d2iz>
    206a:	4604      	mov	r4, r0
    206c:	f7fe f9c6 	bl	3fc <__aeabi_i2d>
    2070:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2078:	f7fe fa2a 	bl	4d0 <__aeabi_dmul>
    207c:	460b      	mov	r3, r1
    207e:	4602      	mov	r2, r0
    2080:	4649      	mov	r1, r9
    2082:	4640      	mov	r0, r8
    2084:	f7fe f86c 	bl	160 <__aeabi_dsub>
    2088:	f807 6b01 	strb.w	r6, [r7], #1
    208c:	9e03      	ldr	r6, [sp, #12]
    208e:	9b08      	ldr	r3, [sp, #32]
    2090:	1bbe      	subs	r6, r7, r6
    2092:	42b3      	cmp	r3, r6
    2094:	d138      	bne.n	2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>
    2096:	4602      	mov	r2, r0
    2098:	460b      	mov	r3, r1
    209a:	f7fe f863 	bl	164 <__adddf3>
    209e:	4680      	mov	r8, r0
    20a0:	4689      	mov	r9, r1
    20a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a6:	f7fe fca3 	bl	9f0 <__aeabi_dcmpgt>
    20aa:	bb58      	cbnz	r0, 2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20ac:	4640      	mov	r0, r8
    20ae:	4649      	mov	r1, r9
    20b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b4:	f7fe fc74 	bl	9a0 <__aeabi_dcmpeq>
    20b8:	b108      	cbz	r0, 20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    20ba:	07e1      	lsls	r1, r4, #31
    20bc:	d422      	bmi.n	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20be:	4628      	mov	r0, r5
    20c0:	4659      	mov	r1, fp
    20c2:	f016 fff8 	bl	190b6 <_Bfree>
    20c6:	2300      	movs	r3, #0
    20c8:	f10a 0001 	add.w	r0, sl, #1
    20cc:	703b      	strb	r3, [r7, #0]
    20ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    20d0:	6018      	str	r0, [r3, #0]
    20d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20d4:	2b00      	cmp	r3, #0
    20d6:	f43f acea 	beq.w	1aae <_dtoa_r+0x8e>
    20da:	601f      	str	r7, [r3, #0]
    20dc:	e4e7      	b.n	1aae <_dtoa_r+0x8e>
    20de:	4627      	mov	r7, r4
    20e0:	463b      	mov	r3, r7
    20e2:	461f      	mov	r7, r3
    20e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20e8:	2a39      	cmp	r2, #57	; 0x39
    20ea:	d107      	bne.n	20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>
    20ec:	9a03      	ldr	r2, [sp, #12]
    20ee:	429a      	cmp	r2, r3
    20f0:	d1f7      	bne.n	20e2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe2>
    20f2:	2230      	movs	r2, #48	; 0x30
    20f4:	9903      	ldr	r1, [sp, #12]
    20f6:	f108 0801 	add.w	r8, r8, #1
    20fa:	700a      	strb	r2, [r1, #0]
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	3201      	adds	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
    2102:	e791      	b.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    2104:	46d0      	mov	r8, sl
    2106:	e7eb      	b.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    2108:	2200      	movs	r2, #0
    210a:	4ba1      	ldr	r3, [pc, #644]	; (2390 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x390>)
    210c:	f7fe f9e0 	bl	4d0 <__aeabi_dmul>
    2110:	2200      	movs	r2, #0
    2112:	2300      	movs	r3, #0
    2114:	4680      	mov	r8, r0
    2116:	4689      	mov	r9, r1
    2118:	f7fe fc42 	bl	9a0 <__aeabi_dcmpeq>
    211c:	2800      	cmp	r0, #0
    211e:	d09c      	beq.n	205a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5a>
    2120:	e7cd      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2124:	2a00      	cmp	r2, #0
    2126:	f000 80cc 	beq.w	22c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c2>
    212a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    212c:	2a01      	cmp	r2, #1
    212e:	f300 80af 	bgt.w	2290 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x290>
    2132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2134:	2a00      	cmp	r2, #0
    2136:	f000 80a7 	beq.w	2288 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x288>
    213a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    213e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2140:	9f06      	ldr	r7, [sp, #24]
    2142:	9a06      	ldr	r2, [sp, #24]
    2144:	2101      	movs	r1, #1
    2146:	4628      	mov	r0, r5
    2148:	441a      	add	r2, r3
    214a:	9206      	str	r2, [sp, #24]
    214c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    214e:	441a      	add	r2, r3
    2150:	9209      	str	r2, [sp, #36]	; 0x24
    2152:	f017 f854 	bl	191fe <__i2b>
    2156:	4606      	mov	r6, r0
    2158:	2f00      	cmp	r7, #0
    215a:	dd0c      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    215e:	2b00      	cmp	r3, #0
    2160:	dd09      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    2162:	42bb      	cmp	r3, r7
    2164:	9a06      	ldr	r2, [sp, #24]
    2166:	bfa8      	it	ge
    2168:	463b      	movge	r3, r7
    216a:	1ad2      	subs	r2, r2, r3
    216c:	1aff      	subs	r7, r7, r3
    216e:	9206      	str	r2, [sp, #24]
    2170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2172:	1ad3      	subs	r3, r2, r3
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2178:	b1f3      	cbz	r3, 21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    217a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    217c:	2b00      	cmp	r3, #0
    217e:	f000 80a4 	beq.w	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
    2182:	2c00      	cmp	r4, #0
    2184:	dd10      	ble.n	21a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a8>
    2186:	4631      	mov	r1, r6
    2188:	4622      	mov	r2, r4
    218a:	4628      	mov	r0, r5
    218c:	f011 fd6a 	bl	13c64 <__pow5mult>
    2190:	465a      	mov	r2, fp
    2192:	4601      	mov	r1, r0
    2194:	4606      	mov	r6, r0
    2196:	4628      	mov	r0, r5
    2198:	f017 f83a 	bl	19210 <__multiply>
    219c:	4680      	mov	r8, r0
    219e:	4659      	mov	r1, fp
    21a0:	4628      	mov	r0, r5
    21a2:	46c3      	mov	fp, r8
    21a4:	f016 ff87 	bl	190b6 <_Bfree>
    21a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21aa:	1b1a      	subs	r2, r3, r4
    21ac:	d004      	beq.n	21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    21ae:	4659      	mov	r1, fp
    21b0:	4628      	mov	r0, r5
    21b2:	f011 fd57 	bl	13c64 <__pow5mult>
    21b6:	4683      	mov	fp, r0
    21b8:	2101      	movs	r1, #1
    21ba:	4628      	mov	r0, r5
    21bc:	f017 f81f 	bl	191fe <__i2b>
    21c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21c2:	4604      	mov	r4, r0
    21c4:	2b00      	cmp	r3, #0
    21c6:	f340 8082 	ble.w	22ce <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ce>
    21ca:	461a      	mov	r2, r3
    21cc:	4601      	mov	r1, r0
    21ce:	4628      	mov	r0, r5
    21d0:	f011 fd48 	bl	13c64 <__pow5mult>
    21d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    21d6:	4604      	mov	r4, r0
    21d8:	2b01      	cmp	r3, #1
    21da:	dd7b      	ble.n	22d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d4>
    21dc:	f04f 0800 	mov.w	r8, #0
    21e0:	6923      	ldr	r3, [r4, #16]
    21e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    21e6:	6918      	ldr	r0, [r3, #16]
    21e8:	f016 ffbb 	bl	19162 <__hi0bits>
    21ec:	f1c0 0020 	rsb	r0, r0, #32
    21f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f2:	4418      	add	r0, r3
    21f4:	f010 001f 	ands.w	r0, r0, #31
    21f8:	f000 808d 	beq.w	2316 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x316>
    21fc:	f1c0 0320 	rsb	r3, r0, #32
    2200:	2b04      	cmp	r3, #4
    2202:	f340 8086 	ble.w	2312 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x312>
    2206:	f1c0 001c 	rsb	r0, r0, #28
    220a:	9b06      	ldr	r3, [sp, #24]
    220c:	4407      	add	r7, r0
    220e:	4403      	add	r3, r0
    2210:	9306      	str	r3, [sp, #24]
    2212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2214:	4403      	add	r3, r0
    2216:	9309      	str	r3, [sp, #36]	; 0x24
    2218:	9b06      	ldr	r3, [sp, #24]
    221a:	2b00      	cmp	r3, #0
    221c:	dd05      	ble.n	222a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22a>
    221e:	4659      	mov	r1, fp
    2220:	461a      	mov	r2, r3
    2222:	4628      	mov	r0, r5
    2224:	f017 f88f 	bl	19346 <__lshift>
    2228:	4683      	mov	fp, r0
    222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    222c:	2b00      	cmp	r3, #0
    222e:	dd05      	ble.n	223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    2230:	4621      	mov	r1, r4
    2232:	461a      	mov	r2, r3
    2234:	4628      	mov	r0, r5
    2236:	f017 f886 	bl	19346 <__lshift>
    223a:	4604      	mov	r4, r0
    223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    223e:	2b00      	cmp	r3, #0
    2240:	d06b      	beq.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    2242:	4621      	mov	r1, r4
    2244:	4658      	mov	r0, fp
    2246:	f017 f8dd 	bl	19404 <__mcmp>
    224a:	2800      	cmp	r0, #0
    224c:	da65      	bge.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    224e:	2300      	movs	r3, #0
    2250:	4659      	mov	r1, fp
    2252:	220a      	movs	r2, #10
    2254:	4628      	mov	r0, r5
    2256:	f016 ff45 	bl	190e4 <__multadd>
    225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    225c:	f10a 3aff 	add.w	sl, sl, #4294967295
    2260:	4683      	mov	fp, r0
    2262:	2b00      	cmp	r3, #0
    2264:	f000 818b 	beq.w	257e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x57e>
    2268:	4631      	mov	r1, r6
    226a:	2300      	movs	r3, #0
    226c:	220a      	movs	r2, #10
    226e:	4628      	mov	r0, r5
    2270:	f016 ff38 	bl	190e4 <__multadd>
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	4606      	mov	r6, r0
    227a:	f300 8091 	bgt.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    227e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2280:	2b02      	cmp	r3, #2
    2282:	f340 808d 	ble.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    2286:	e050      	b.n	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    2288:	9b16      	ldr	r3, [sp, #88]	; 0x58
    228a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    228e:	e756      	b.n	213e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13e>
    2290:	9b08      	ldr	r3, [sp, #32]
    2292:	1e5c      	subs	r4, r3, #1
    2294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2296:	42a3      	cmp	r3, r4
    2298:	bfb7      	itett	lt
    229a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    229c:	1b1c      	subge	r4, r3, r4
    229e:	940a      	strlt	r4, [sp, #40]	; 0x28
    22a0:	1ae2      	sublt	r2, r4, r3
    22a2:	bfbf      	itttt	lt
    22a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22a6:	2400      	movlt	r4, #0
    22a8:	189b      	addlt	r3, r3, r2
    22aa:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	2b00      	cmp	r3, #0
    22b0:	bfbb      	ittet	lt
    22b2:	9b06      	ldrlt	r3, [sp, #24]
    22b4:	9a08      	ldrlt	r2, [sp, #32]
    22b6:	9f06      	ldrge	r7, [sp, #24]
    22b8:	1a9f      	sublt	r7, r3, r2
    22ba:	bfac      	ite	ge
    22bc:	9b08      	ldrge	r3, [sp, #32]
    22be:	2300      	movlt	r3, #0
    22c0:	e73f      	b.n	2142 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x142>
    22c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    22c4:	9f06      	ldr	r7, [sp, #24]
    22c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    22c8:	e746      	b.n	2158 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x158>
    22ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    22cc:	e76f      	b.n	21ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ae>
    22ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22d0:	2b01      	cmp	r3, #1
    22d2:	dc19      	bgt.n	2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d4:	9b04      	ldr	r3, [sp, #16]
    22d6:	b9bb      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d8:	9b05      	ldr	r3, [sp, #20]
    22da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    22de:	b99b      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22e0:	9b05      	ldr	r3, [sp, #20]
    22e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    22e6:	0d1b      	lsrs	r3, r3, #20
    22e8:	051b      	lsls	r3, r3, #20
    22ea:	b183      	cbz	r3, 230e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30e>
    22ec:	9b06      	ldr	r3, [sp, #24]
    22ee:	f04f 0801 	mov.w	r8, #1
    22f2:	3301      	adds	r3, #1
    22f4:	9306      	str	r3, [sp, #24]
    22f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22f8:	3301      	adds	r3, #1
    22fa:	9309      	str	r3, [sp, #36]	; 0x24
    22fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22fe:	2b00      	cmp	r3, #0
    2300:	f47f af6e 	bne.w	21e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e0>
    2304:	2001      	movs	r0, #1
    2306:	e773      	b.n	21f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f0>
    2308:	f04f 0800 	mov.w	r8, #0
    230c:	e7f6      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    230e:	4698      	mov	r8, r3
    2310:	e7f4      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    2312:	d081      	beq.n	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    2314:	4618      	mov	r0, r3
    2316:	301c      	adds	r0, #28
    2318:	e777      	b.n	220a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20a>
    231a:	9b08      	ldr	r3, [sp, #32]
    231c:	2b00      	cmp	r3, #0
    231e:	dc39      	bgt.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2320:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2322:	2b02      	cmp	r3, #2
    2324:	dd36      	ble.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2326:	f8dd 9020 	ldr.w	r9, [sp, #32]
    232a:	f1b9 0f00 	cmp.w	r9, #0
    232e:	d10d      	bne.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2330:	4621      	mov	r1, r4
    2332:	464b      	mov	r3, r9
    2334:	2205      	movs	r2, #5
    2336:	4628      	mov	r0, r5
    2338:	f016 fed4 	bl	190e4 <__multadd>
    233c:	4601      	mov	r1, r0
    233e:	4604      	mov	r4, r0
    2340:	4658      	mov	r0, fp
    2342:	f017 f85f 	bl	19404 <__mcmp>
    2346:	2800      	cmp	r0, #0
    2348:	f73f adc0 	bgt.w	1ecc <_dtoa_r+0x4ac>
    234c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    234e:	9f03      	ldr	r7, [sp, #12]
    2350:	ea6f 0a03 	mvn.w	sl, r3
    2354:	f04f 0800 	mov.w	r8, #0
    2358:	4621      	mov	r1, r4
    235a:	4628      	mov	r0, r5
    235c:	f016 feab 	bl	190b6 <_Bfree>
    2360:	2e00      	cmp	r6, #0
    2362:	f43f aeac 	beq.w	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2366:	f1b8 0f00 	cmp.w	r8, #0
    236a:	d005      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    236c:	45b0      	cmp	r8, r6
    236e:	d003      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    2370:	4641      	mov	r1, r8
    2372:	4628      	mov	r0, r5
    2374:	f016 fe9f 	bl	190b6 <_Bfree>
    2378:	4631      	mov	r1, r6
    237a:	4628      	mov	r0, r5
    237c:	f016 fe9b 	bl	190b6 <_Bfree>
    2380:	e69d      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2382:	2400      	movs	r4, #0
    2384:	4626      	mov	r6, r4
    2386:	e7e1      	b.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2388:	46c2      	mov	sl, r8
    238a:	4626      	mov	r6, r4
    238c:	e59e      	b.n	1ecc <_dtoa_r+0x4ac>
    238e:	bf00      	nop
    2390:	40240000 	.word	0x40240000
    2394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2396:	f8dd 9020 	ldr.w	r9, [sp, #32]
    239a:	2b00      	cmp	r3, #0
    239c:	f000 80f6 	beq.w	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    23a0:	2f00      	cmp	r7, #0
    23a2:	dd05      	ble.n	23b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3b0>
    23a4:	4631      	mov	r1, r6
    23a6:	463a      	mov	r2, r7
    23a8:	4628      	mov	r0, r5
    23aa:	f016 ffcc 	bl	19346 <__lshift>
    23ae:	4606      	mov	r6, r0
    23b0:	f1b8 0f00 	cmp.w	r8, #0
    23b4:	d055      	beq.n	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    23b6:	6871      	ldr	r1, [r6, #4]
    23b8:	4628      	mov	r0, r5
    23ba:	f016 fe48 	bl	1904e <_Balloc>
    23be:	6932      	ldr	r2, [r6, #16]
    23c0:	4607      	mov	r7, r0
    23c2:	f106 010c 	add.w	r1, r6, #12
    23c6:	3202      	adds	r2, #2
    23c8:	300c      	adds	r0, #12
    23ca:	0092      	lsls	r2, r2, #2
    23cc:	f016 fb89 	bl	18ae2 <memcpy>
    23d0:	2201      	movs	r2, #1
    23d2:	4639      	mov	r1, r7
    23d4:	4628      	mov	r0, r5
    23d6:	f016 ffb6 	bl	19346 <__lshift>
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	46b0      	mov	r8, r6
    23de:	4606      	mov	r6, r0
    23e0:	3301      	adds	r3, #1
    23e2:	9308      	str	r3, [sp, #32]
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	444b      	add	r3, r9
    23e8:	930a      	str	r3, [sp, #40]	; 0x28
    23ea:	9b04      	ldr	r3, [sp, #16]
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	9309      	str	r3, [sp, #36]	; 0x24
    23f2:	9b08      	ldr	r3, [sp, #32]
    23f4:	4621      	mov	r1, r4
    23f6:	4658      	mov	r0, fp
    23f8:	3b01      	subs	r3, #1
    23fa:	9304      	str	r3, [sp, #16]
    23fc:	f016 fd3f 	bl	18e7e <quorem>
    2400:	4603      	mov	r3, r0
    2402:	4641      	mov	r1, r8
    2404:	9006      	str	r0, [sp, #24]
    2406:	4658      	mov	r0, fp
    2408:	3330      	adds	r3, #48	; 0x30
    240a:	930b      	str	r3, [sp, #44]	; 0x2c
    240c:	f016 fffa 	bl	19404 <__mcmp>
    2410:	4632      	mov	r2, r6
    2412:	4681      	mov	r9, r0
    2414:	4621      	mov	r1, r4
    2416:	4628      	mov	r0, r5
    2418:	f017 f80f 	bl	1943a <__mdiff>
    241c:	68c2      	ldr	r2, [r0, #12]
    241e:	4607      	mov	r7, r0
    2420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2422:	bb02      	cbnz	r2, 2466 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x466>
    2424:	4601      	mov	r1, r0
    2426:	4658      	mov	r0, fp
    2428:	f016 ffec 	bl	19404 <__mcmp>
    242c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    242e:	4602      	mov	r2, r0
    2430:	4639      	mov	r1, r7
    2432:	4628      	mov	r0, r5
    2434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2438:	f016 fe3d 	bl	190b6 <_Bfree>
    243c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    243e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2440:	9f08      	ldr	r7, [sp, #32]
    2442:	ea43 0102 	orr.w	r1, r3, r2
    2446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2448:	430b      	orrs	r3, r1
    244a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    244c:	d10d      	bne.n	246a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46a>
    244e:	2b39      	cmp	r3, #57	; 0x39
    2450:	d029      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    2452:	f1b9 0f00 	cmp.w	r9, #0
    2456:	dd01      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2458:	9b06      	ldr	r3, [sp, #24]
    245a:	3331      	adds	r3, #49	; 0x31
    245c:	9a04      	ldr	r2, [sp, #16]
    245e:	7013      	strb	r3, [r2, #0]
    2460:	e77a      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    2462:	4630      	mov	r0, r6
    2464:	e7b9      	b.n	23da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3da>
    2466:	2201      	movs	r2, #1
    2468:	e7e2      	b.n	2430 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x430>
    246a:	f1b9 0f00 	cmp.w	r9, #0
    246e:	db06      	blt.n	247e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x47e>
    2470:	9922      	ldr	r1, [sp, #136]	; 0x88
    2472:	ea41 0909 	orr.w	r9, r1, r9
    2476:	9909      	ldr	r1, [sp, #36]	; 0x24
    2478:	ea59 0101 	orrs.w	r1, r9, r1
    247c:	d120      	bne.n	24c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c0>
    247e:	2a00      	cmp	r2, #0
    2480:	ddec      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2482:	4659      	mov	r1, fp
    2484:	2201      	movs	r2, #1
    2486:	4628      	mov	r0, r5
    2488:	9308      	str	r3, [sp, #32]
    248a:	f016 ff5c 	bl	19346 <__lshift>
    248e:	4621      	mov	r1, r4
    2490:	4683      	mov	fp, r0
    2492:	f016 ffb7 	bl	19404 <__mcmp>
    2496:	2800      	cmp	r0, #0
    2498:	9b08      	ldr	r3, [sp, #32]
    249a:	dc02      	bgt.n	24a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a2>
    249c:	d1de      	bne.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    249e:	07da      	lsls	r2, r3, #31
    24a0:	d5dc      	bpl.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24a2:	2b39      	cmp	r3, #57	; 0x39
    24a4:	d1d8      	bne.n	2458 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x458>
    24a6:	2339      	movs	r3, #57	; 0x39
    24a8:	9a04      	ldr	r2, [sp, #16]
    24aa:	7013      	strb	r3, [r2, #0]
    24ac:	463b      	mov	r3, r7
    24ae:	461f      	mov	r7, r3
    24b0:	3b01      	subs	r3, #1
    24b2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24b6:	2a39      	cmp	r2, #57	; 0x39
    24b8:	d050      	beq.n	255c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x55c>
    24ba:	3201      	adds	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	e74b      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    24c0:	2a00      	cmp	r2, #0
    24c2:	dd03      	ble.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    24c4:	2b39      	cmp	r3, #57	; 0x39
    24c6:	d0ee      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    24c8:	3301      	adds	r3, #1
    24ca:	e7c7      	b.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24cc:	9a08      	ldr	r2, [sp, #32]
    24ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    24d0:	f802 3c01 	strb.w	r3, [r2, #-1]
    24d4:	428a      	cmp	r2, r1
    24d6:	d02a      	beq.n	252e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52e>
    24d8:	4659      	mov	r1, fp
    24da:	2300      	movs	r3, #0
    24dc:	220a      	movs	r2, #10
    24de:	4628      	mov	r0, r5
    24e0:	f016 fe00 	bl	190e4 <__multadd>
    24e4:	45b0      	cmp	r8, r6
    24e6:	4683      	mov	fp, r0
    24e8:	f04f 0300 	mov.w	r3, #0
    24ec:	f04f 020a 	mov.w	r2, #10
    24f0:	4641      	mov	r1, r8
    24f2:	4628      	mov	r0, r5
    24f4:	d107      	bne.n	2506 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x506>
    24f6:	f016 fdf5 	bl	190e4 <__multadd>
    24fa:	4680      	mov	r8, r0
    24fc:	4606      	mov	r6, r0
    24fe:	9b08      	ldr	r3, [sp, #32]
    2500:	3301      	adds	r3, #1
    2502:	9308      	str	r3, [sp, #32]
    2504:	e775      	b.n	23f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3f2>
    2506:	f016 fded 	bl	190e4 <__multadd>
    250a:	4631      	mov	r1, r6
    250c:	4680      	mov	r8, r0
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	4628      	mov	r0, r5
    2514:	f016 fde6 	bl	190e4 <__multadd>
    2518:	4606      	mov	r6, r0
    251a:	e7f0      	b.n	24fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4fe>
    251c:	f1b9 0f00 	cmp.w	r9, #0
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	f04f 0800 	mov.w	r8, #0
    2526:	bfcc      	ite	gt
    2528:	464f      	movgt	r7, r9
    252a:	2701      	movle	r7, #1
    252c:	4417      	add	r7, r2
    252e:	4659      	mov	r1, fp
    2530:	2201      	movs	r2, #1
    2532:	4628      	mov	r0, r5
    2534:	9308      	str	r3, [sp, #32]
    2536:	f016 ff06 	bl	19346 <__lshift>
    253a:	4621      	mov	r1, r4
    253c:	4683      	mov	fp, r0
    253e:	f016 ff61 	bl	19404 <__mcmp>
    2542:	2800      	cmp	r0, #0
    2544:	dcb2      	bgt.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    2546:	d102      	bne.n	254e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54e>
    2548:	9b08      	ldr	r3, [sp, #32]
    254a:	07db      	lsls	r3, r3, #31
    254c:	d4ae      	bmi.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    254e:	463b      	mov	r3, r7
    2550:	461f      	mov	r7, r3
    2552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2556:	2a30      	cmp	r2, #48	; 0x30
    2558:	d0fa      	beq.n	2550 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x550>
    255a:	e6fd      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d1a5      	bne.n	24ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ae>
    2562:	f10a 0a01 	add.w	sl, sl, #1
    2566:	2331      	movs	r3, #49	; 0x31
    2568:	e779      	b.n	245e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45e>
    256a:	4b13      	ldr	r3, [pc, #76]	; (25b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5b8>)
    256c:	f7ff babe 	b.w	1aec <_dtoa_r+0xcc>
    2570:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2572:	2b00      	cmp	r3, #0
    2574:	f47f aa96 	bne.w	1aa4 <_dtoa_r+0x84>
    2578:	4b10      	ldr	r3, [pc, #64]	; (25bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5bc>)
    257a:	f7ff bab7 	b.w	1aec <_dtoa_r+0xcc>
    257e:	f1b9 0f00 	cmp.w	r9, #0
    2582:	dc03      	bgt.n	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    2584:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2586:	2b02      	cmp	r3, #2
    2588:	f73f aecf 	bgt.w	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    258c:	9f03      	ldr	r7, [sp, #12]
    258e:	4621      	mov	r1, r4
    2590:	4658      	mov	r0, fp
    2592:	f016 fc74 	bl	18e7e <quorem>
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	f100 0330 	add.w	r3, r0, #48	; 0x30
    259c:	f807 3b01 	strb.w	r3, [r7], #1
    25a0:	1aba      	subs	r2, r7, r2
    25a2:	4591      	cmp	r9, r2
    25a4:	ddba      	ble.n	251c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x51c>
    25a6:	4659      	mov	r1, fp
    25a8:	2300      	movs	r3, #0
    25aa:	220a      	movs	r2, #10
    25ac:	4628      	mov	r0, r5
    25ae:	f016 fd99 	bl	190e4 <__multadd>
    25b2:	4683      	mov	fp, r0
    25b4:	e7eb      	b.n	258e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58e>
    25b6:	bf00      	nop
    25b8:	00035316 	.word	0x00035316
    25bc:	0003533a 	.word	0x0003533a

000025c0 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    25c0:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    25c2:	2825      	cmp	r0, #37	; 0x25
    25c4:	d00c      	beq.n	25e0 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    25c6:	4b0c      	ldr	r3, [pc, #48]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	490c      	ldr	r1, [pc, #48]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25cc:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	2b4f      	cmp	r3, #79	; 0x4f
    25d2:	d80e      	bhi.n	25f2 <_Z18ee_serial_callbackc+0x32>
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	3301      	adds	r3, #1
    25da:	4a07      	ldr	r2, [pc, #28]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25dc:	6013      	str	r3, [r2, #0]
  }
}
    25de:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    25e0:	4c05      	ldr	r4, [pc, #20]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25e2:	6823      	ldr	r3, [r4, #0]
    25e4:	4805      	ldr	r0, [pc, #20]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25e6:	2500      	movs	r5, #0
    25e8:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    25ea:	f011 fc7c 	bl	13ee6 <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    25ee:	6025      	str	r5, [r4, #0]
    25f0:	e7f5      	b.n	25de <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25f2:	2350      	movs	r3, #80	; 0x50
    25f4:	e7f1      	b.n	25da <_Z18ee_serial_callbackc+0x1a>
    25f6:	bf00      	nop
    25f8:	20000524 	.word	0x20000524
    25fc:	200004d0 	.word	0x200004d0

00002600 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2600:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2602:	f011 fc8a 	bl	13f1a <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    2606:	f000 fad1 	bl	2bac <_Z23th_timestamp_initializev>
  th_final_initialize();
    260a:	f000 fad9 	bl	2bc0 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    260e:	4805      	ldr	r0, [pc, #20]	; (2624 <_Z23ee_benchmark_initializev+0x24>)
    2610:	f011 fc75 	bl	13efe <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <_Z23ee_benchmark_initializev+0x28>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    261a:	4804      	ldr	r0, [pc, #16]	; (262c <_Z23ee_benchmark_initializev+0x2c>)
    261c:	f011 fc6f 	bl	13efe <_Z9th_printfPKcz>
}
    2620:	bd08      	pop	{r3, pc}
    2622:	bf00      	nop
    2624:	00031ce8 	.word	0x00031ce8
    2628:	20015aa8 	.word	0x20015aa8
    262c:	00031cf8 	.word	0x00031cf8

00002630 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	4604      	mov	r4, r0
    2634:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    2636:	f000 fa01 	bl	2a3c <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    263a:	4629      	mov	r1, r5
    263c:	4811      	ldr	r0, [pc, #68]	; (2684 <_Z8ee_inferjj+0x54>)
    263e:	f011 fc5e 	bl	13efe <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2642:	1e6e      	subs	r6, r5, #1
    2644:	b11d      	cbz	r5, 264e <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    2646:	f000 f9e7 	bl	2a18 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    264a:	4635      	mov	r5, r6
    264c:	e7f9      	b.n	2642 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    264e:	480e      	ldr	r0, [pc, #56]	; (2688 <_Z8ee_inferjj+0x58>)
    2650:	f011 fc55 	bl	13efe <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2654:	4621      	mov	r1, r4
    2656:	480d      	ldr	r0, [pc, #52]	; (268c <_Z8ee_inferjj+0x5c>)
    2658:	f011 fc51 	bl	13efe <_Z9th_printfPKcz>
  th_timestamp();
    265c:	f000 fa72 	bl	2b44 <_Z12th_timestampv>
  th_pre();
    2660:	f011 fc3f 	bl	13ee2 <_Z6th_prev>
  while (n-- > 0) {
    2664:	1e65      	subs	r5, r4, #1
    2666:	b11c      	cbz	r4, 2670 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    2668:	f000 f9d6 	bl	2a18 <_Z8th_inferv>
  while (n-- > 0) {
    266c:	462c      	mov	r4, r5
    266e:	e7f9      	b.n	2664 <_Z8ee_inferjj+0x34>
  }
  th_post();
    2670:	f011 fc38 	bl	13ee4 <_Z7th_postv>
  th_timestamp();
    2674:	f000 fa66 	bl	2b44 <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    2678:	4805      	ldr	r0, [pc, #20]	; (2690 <_Z8ee_inferjj+0x60>)
    267a:	f011 fc40 	bl	13efe <_Z9th_printfPKcz>
  th_results();
    267e:	f000 fa1f 	bl	2ac0 <_Z10th_resultsv>
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	00031d04 	.word	0x00031d04
    2688:	00031d18 	.word	0x00031d18
    268c:	00031d28 	.word	0x00031d28
    2690:	00031d3c 	.word	0x00031d3c

00002694 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2698:	2250      	movs	r2, #80	; 0x50
    269a:	4951      	ldr	r1, [pc, #324]	; (27e0 <_Z15ee_buffer_parsePc+0x14c>)
    269c:	f016 fb95 	bl	18dca <strncmp>
    26a0:	b110      	cbz	r0, 26a8 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26a2:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26a4:	b002      	add	sp, #8
    26a6:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26a8:	494e      	ldr	r1, [pc, #312]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26aa:	f010 ff89 	bl	135c0 <strtok>
  if (p_next == NULL) {
    26ae:	4605      	mov	r5, r0
    26b0:	b1d8      	cbz	r0, 26ea <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26b2:	2250      	movs	r2, #80	; 0x50
    26b4:	494c      	ldr	r1, [pc, #304]	; (27e8 <_Z15ee_buffer_parsePc+0x154>)
    26b6:	f016 fb88 	bl	18dca <strncmp>
    26ba:	bb50      	cbnz	r0, 2712 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    26bc:	4949      	ldr	r1, [pc, #292]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26be:	f010 ff7f 	bl	135c0 <strtok>
    if (p_next == NULL) {
    26c2:	b1b8      	cbz	r0, 26f4 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    26c4:	f016 f9ed 	bl	18aa2 <atoi>
    26c8:	4601      	mov	r1, r0
    26ca:	4b48      	ldr	r3, [pc, #288]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    26cc:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    26ce:	b1b0      	cbz	r0, 26fe <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    26d0:	4b47      	ldr	r3, [pc, #284]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    26d2:	2200      	movs	r2, #0
    26d4:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    26d6:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    26da:	d915      	bls.n	2708 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    26dc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    26e0:	4844      	ldr	r0, [pc, #272]	; (27f4 <_Z15ee_buffer_parsePc+0x160>)
    26e2:	f011 fc0c 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26e6:	2000      	movs	r0, #0
    26e8:	e7dc      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    26ea:	4843      	ldr	r0, [pc, #268]	; (27f8 <_Z15ee_buffer_parsePc+0x164>)
    26ec:	f011 fc07 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26f0:	2000      	movs	r0, #0
    26f2:	e7d7      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    26f4:	4841      	ldr	r0, [pc, #260]	; (27fc <_Z15ee_buffer_parsePc+0x168>)
    26f6:	f011 fc02 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26fa:	2000      	movs	r0, #0
    26fc:	e7d2      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    26fe:	4840      	ldr	r0, [pc, #256]	; (2800 <_Z15ee_buffer_parsePc+0x16c>)
    2700:	f011 fbfd 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2704:	2000      	movs	r0, #0
    2706:	e7cd      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    2708:	483e      	ldr	r0, [pc, #248]	; (2804 <_Z15ee_buffer_parsePc+0x170>)
    270a:	f011 fbf8 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    270e:	2000      	movs	r0, #0
    2710:	e7c8      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2712:	2250      	movs	r2, #80	; 0x50
    2714:	493c      	ldr	r1, [pc, #240]	; (2808 <_Z15ee_buffer_parsePc+0x174>)
    2716:	4628      	mov	r0, r5
    2718:	f016 fb57 	bl	18dca <strncmp>
    271c:	bb60      	cbnz	r0, 2778 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    271e:	2400      	movs	r4, #0
    2720:	e012      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2722:	483a      	ldr	r0, [pc, #232]	; (280c <_Z15ee_buffer_parsePc+0x178>)
    2724:	f011 fbeb 	bl	13efe <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    2728:	4b39      	ldr	r3, [pc, #228]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    272a:	5d19      	ldrb	r1, [r3, r4]
    272c:	4839      	ldr	r0, [pc, #228]	; (2814 <_Z15ee_buffer_parsePc+0x180>)
    272e:	f011 fbe6 	bl	13efe <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2732:	3401      	adds	r4, #1
    2734:	f014 0f07 	tst.w	r4, #7
    2738:	d003      	beq.n	2742 <_Z15ee_buffer_parsePc+0xae>
    273a:	4b2c      	ldr	r3, [pc, #176]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	429c      	cmp	r4, r3
    2740:	d10c      	bne.n	275c <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2742:	4835      	ldr	r0, [pc, #212]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2744:	f011 fbdb 	bl	13efe <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    2748:	4b28      	ldr	r3, [pc, #160]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	42a3      	cmp	r3, r4
    274e:	d909      	bls.n	2764 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2750:	f014 0f07 	tst.w	r4, #7
    2754:	d0e5      	beq.n	2722 <_Z15ee_buffer_parsePc+0x8e>
    2756:	2c00      	cmp	r4, #0
    2758:	d1e6      	bne.n	2728 <_Z15ee_buffer_parsePc+0x94>
    275a:	e7e2      	b.n	2722 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    275c:	482f      	ldr	r0, [pc, #188]	; (281c <_Z15ee_buffer_parsePc+0x188>)
    275e:	f011 fbce 	bl	13efe <_Z9th_printfPKcz>
    2762:	e7f1      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2764:	f014 0f07 	tst.w	r4, #7
    2768:	d101      	bne.n	276e <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    276a:	2000      	movs	r0, #0
    276c:	e79a      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    276e:	482a      	ldr	r0, [pc, #168]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2770:	f011 fbc5 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2774:	2000      	movs	r0, #0
    2776:	e795      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2778:	2150      	movs	r1, #80	; 0x50
    277a:	4628      	mov	r0, r5
    277c:	f011 fbb7 	bl	13eee <_Z10th_strnlenPKcj>
    2780:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    2782:	f010 0401 	ands.w	r4, r0, #1
    2786:	d11f      	bne.n	27c8 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2788:	2300      	movs	r3, #0
    278a:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    278e:	42b4      	cmp	r4, r6
    2790:	d224      	bcs.n	27dc <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    2792:	1c63      	adds	r3, r4, #1
    2794:	5d2a      	ldrb	r2, [r5, r4]
    2796:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    279a:	5ceb      	ldrb	r3, [r5, r3]
    279c:	3402      	adds	r4, #2
    279e:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27a2:	a801      	add	r0, sp, #4
    27a4:	f011 fb14 	bl	13dd0 <_Z9ee_hexdecPc>
      if (res < 0) {
    27a8:	2800      	cmp	r0, #0
    27aa:	db11      	blt.n	27d0 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27ac:	4a10      	ldr	r2, [pc, #64]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    27ae:	6813      	ldr	r3, [r2, #0]
    27b0:	4917      	ldr	r1, [pc, #92]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    27b2:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27b4:	3301      	adds	r3, #1
    27b6:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27b8:	4a0c      	ldr	r2, [pc, #48]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    27ba:	6812      	ldr	r2, [r2, #0]
    27bc:	4293      	cmp	r3, r2
    27be:	d1e6      	bne.n	278e <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    27c0:	4817      	ldr	r0, [pc, #92]	; (2820 <_Z15ee_buffer_parsePc+0x18c>)
    27c2:	f011 fb9c 	bl	13efe <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    27c6:	e007      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    27c8:	4816      	ldr	r0, [pc, #88]	; (2824 <_Z15ee_buffer_parsePc+0x190>)
    27ca:	f011 fb98 	bl	13efe <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27ce:	e003      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    27d0:	a901      	add	r1, sp, #4
    27d2:	4815      	ldr	r0, [pc, #84]	; (2828 <_Z15ee_buffer_parsePc+0x194>)
    27d4:	f011 fb93 	bl	13efe <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27d8:	2000      	movs	r0, #0
    27da:	e763      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    27dc:	2000      	movs	r0, #0
    27de:	e761      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    27e0:	00031d4c 	.word	0x00031d4c
    27e4:	00031d50 	.word	0x00031d50
    27e8:	00031d80 	.word	0x00031d80
    27ec:	200004cc 	.word	0x200004cc
    27f0:	200004c8 	.word	0x200004c8
    27f4:	00031de4 	.word	0x00031de4
    27f8:	00031d54 	.word	0x00031d54
    27fc:	00031d88 	.word	0x00031d88
    2800:	00031db8 	.word	0x00031db8
    2804:	00031e14 	.word	0x00031e14
    2808:	00031e30 	.word	0x00031e30
    280c:	00031e38 	.word	0x00031e38
    2810:	20000528 	.word	0x20000528
    2814:	00031e44 	.word	0x00031e44
    2818:	00035104 	.word	0x00035104
    281c:	00031e40 	.word	0x00031e40
    2820:	00031e94 	.word	0x00031e94
    2824:	00031e4c 	.word	0x00031e4c
    2828:	00031e74 	.word	0x00031e74

0000282c <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    282c:	b510      	push	{r4, lr}
    282e:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2830:	2250      	movs	r2, #80	; 0x50
    2832:	493b      	ldr	r1, [pc, #236]	; (2920 <_Z16ee_profile_parsePc+0xf4>)
    2834:	f016 fac9 	bl	18dca <strncmp>
    2838:	b948      	cbnz	r0, 284e <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    283a:	493a      	ldr	r1, [pc, #232]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    283c:	483a      	ldr	r0, [pc, #232]	; (2928 <_Z16ee_profile_parsePc+0xfc>)
    283e:	f011 fb5e 	bl	13efe <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2842:	493a      	ldr	r1, [pc, #232]	; (292c <_Z16ee_profile_parsePc+0x100>)
    2844:	483a      	ldr	r0, [pc, #232]	; (2930 <_Z16ee_profile_parsePc+0x104>)
    2846:	f011 fb5a 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    284a:	2000      	movs	r0, #0
}
    284c:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    284e:	2250      	movs	r2, #80	; 0x50
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <_Z16ee_profile_parsePc+0x108>)
    2852:	4620      	mov	r0, r4
    2854:	f016 fab9 	bl	18dca <strncmp>
    2858:	bb30      	cbnz	r0, 28a8 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    285a:	4932      	ldr	r1, [pc, #200]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    285c:	4836      	ldr	r0, [pc, #216]	; (2938 <_Z16ee_profile_parsePc+0x10c>)
    285e:	f011 fb4e 	bl	13efe <_Z9th_printfPKcz>
    th_printf("\r\n");
    2862:	4836      	ldr	r0, [pc, #216]	; (293c <_Z16ee_profile_parsePc+0x110>)
    2864:	f011 fb4b 	bl	13efe <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2868:	4835      	ldr	r0, [pc, #212]	; (2940 <_Z16ee_profile_parsePc+0x114>)
    286a:	f011 fb48 	bl	13efe <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    286e:	4835      	ldr	r0, [pc, #212]	; (2944 <_Z16ee_profile_parsePc+0x118>)
    2870:	f011 fb45 	bl	13efe <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2874:	4834      	ldr	r0, [pc, #208]	; (2948 <_Z16ee_profile_parsePc+0x11c>)
    2876:	f011 fb42 	bl	13efe <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    287a:	4834      	ldr	r0, [pc, #208]	; (294c <_Z16ee_profile_parsePc+0x120>)
    287c:	f011 fb3f 	bl	13efe <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    2880:	4833      	ldr	r0, [pc, #204]	; (2950 <_Z16ee_profile_parsePc+0x124>)
    2882:	f011 fb3c 	bl	13efe <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2886:	4833      	ldr	r0, [pc, #204]	; (2954 <_Z16ee_profile_parsePc+0x128>)
    2888:	f011 fb39 	bl	13efe <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    288c:	4832      	ldr	r0, [pc, #200]	; (2958 <_Z16ee_profile_parsePc+0x12c>)
    288e:	f011 fb36 	bl	13efe <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    2892:	4832      	ldr	r0, [pc, #200]	; (295c <_Z16ee_profile_parsePc+0x130>)
    2894:	f011 fb33 	bl	13efe <_Z9th_printfPKcz>
    th_printf(
    2898:	4831      	ldr	r0, [pc, #196]	; (2960 <_Z16ee_profile_parsePc+0x134>)
    289a:	f011 fb30 	bl	13efe <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    289e:	4831      	ldr	r0, [pc, #196]	; (2964 <_Z16ee_profile_parsePc+0x138>)
    28a0:	f011 fb2d 	bl	13efe <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28a4:	2000      	movs	r0, #0
    28a6:	e7d1      	b.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28a8:	4620      	mov	r0, r4
    28aa:	f7ff fef3 	bl	2694 <_Z15ee_buffer_parsePc>
    28ae:	2800      	cmp	r0, #0
    28b0:	d0cc      	beq.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28b2:	2250      	movs	r2, #80	; 0x50
    28b4:	492c      	ldr	r1, [pc, #176]	; (2968 <_Z16ee_profile_parsePc+0x13c>)
    28b6:	4620      	mov	r0, r4
    28b8:	f016 fa87 	bl	18dca <strncmp>
    28bc:	bb18      	cbnz	r0, 2906 <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    28be:	492b      	ldr	r1, [pc, #172]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28c0:	f010 fe7e 	bl	135c0 <strtok>
    if (p_next) {
    28c4:	b1b0      	cbz	r0, 28f4 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    28c6:	f016 f8ec 	bl	18aa2 <atoi>
      if (i <= 0) {
    28ca:	1e04      	subs	r4, r0, #0
    28cc:	dd0d      	ble.n	28ea <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    28ce:	4927      	ldr	r1, [pc, #156]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28d0:	2000      	movs	r0, #0
    28d2:	f010 fe75 	bl	135c0 <strtok>
      if (p_next) {
    28d6:	b1a0      	cbz	r0, 2902 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    28d8:	f016 f8e3 	bl	18aa2 <atoi>
        if (i < 0) {
    28dc:	1e01      	subs	r1, r0, #0
    28de:	da0b      	bge.n	28f8 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    28e0:	4823      	ldr	r0, [pc, #140]	; (2970 <_Z16ee_profile_parsePc+0x144>)
    28e2:	f011 fb0c 	bl	13efe <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    28e6:	2000      	movs	r0, #0
    28e8:	e7b0      	b.n	284c <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    28ea:	4822      	ldr	r0, [pc, #136]	; (2974 <_Z16ee_profile_parsePc+0x148>)
    28ec:	f011 fb07 	bl	13efe <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    28f0:	2000      	movs	r0, #0
    28f2:	e7ab      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    28f4:	210a      	movs	r1, #10
    size_t n = 1;
    28f6:	2401      	movs	r4, #1
    ee_infer(n, w);
    28f8:	4620      	mov	r0, r4
    28fa:	f7ff fe99 	bl	2630 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    28fe:	2000      	movs	r0, #0
    2900:	e7a4      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2902:	210a      	movs	r1, #10
    2904:	e7f8      	b.n	28f8 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    2906:	2250      	movs	r2, #80	; 0x50
    2908:	491b      	ldr	r1, [pc, #108]	; (2978 <_Z16ee_profile_parsePc+0x14c>)
    290a:	4620      	mov	r0, r4
    290c:	f016 fa5d 	bl	18dca <strncmp>
    2910:	b108      	cbz	r0, 2916 <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2912:	2001      	movs	r0, #1
    2914:	e79a      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    th_results();
    2916:	f000 f8d3 	bl	2ac0 <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    291a:	2000      	movs	r0, #0
    291c:	e796      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    291e:	bf00      	nop
    2920:	00031ea4 	.word	0x00031ea4
    2924:	00031eac 	.word	0x00031eac
    2928:	00031ed0 	.word	0x00031ed0
    292c:	00031ee4 	.word	0x00031ee4
    2930:	00031eec 	.word	0x00031eec
    2934:	00031efc 	.word	0x00031efc
    2938:	00031f04 	.word	0x00031f04
    293c:	00035104 	.word	0x00035104
    2940:	00031f0c 	.word	0x00031f0c
    2944:	00031f34 	.word	0x00031f34
    2948:	00031f64 	.word	0x00031f64
    294c:	00031f8c 	.word	0x00031f8c
    2950:	00031fc0 	.word	0x00031fc0
    2954:	00031ff8 	.word	0x00031ff8
    2958:	00032030 	.word	0x00032030
    295c:	0003204c 	.word	0x0003204c
    2960:	0003207c 	.word	0x0003207c
    2964:	000320c4 	.word	0x000320c4
    2968:	000320f4 	.word	0x000320f4
    296c:	00031d50 	.word	0x00031d50
    2970:	00032124 	.word	0x00032124
    2974:	000320fc 	.word	0x000320fc
    2978:	00032148 	.word	0x00032148

0000297c <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    297c:	4b14      	ldr	r3, [pc, #80]	; (29d0 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b903      	cbnz	r3, 2984 <_Z33ee_serial_command_parser_callbackPc+0x8>
    2982:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    2984:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2986:	4913      	ldr	r1, [pc, #76]	; (29d4 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2988:	f010 fe1a 	bl	135c0 <strtok>
    298c:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    298e:	2250      	movs	r2, #80	; 0x50
    2990:	4911      	ldr	r1, [pc, #68]	; (29d8 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    2992:	f016 fa1a 	bl	18dca <strncmp>
    2996:	b940      	cbnz	r0, 29aa <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2998:	4a10      	ldr	r2, [pc, #64]	; (29dc <_Z33ee_serial_command_parser_callbackPc+0x60>)
    299a:	4911      	ldr	r1, [pc, #68]	; (29e0 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    299c:	4811      	ldr	r0, [pc, #68]	; (29e4 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    299e:	f011 faae 	bl	13efe <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29a2:	4811      	ldr	r0, [pc, #68]	; (29e8 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29a4:	f011 faab 	bl	13efe <_Z9th_printfPKcz>
}
    29a8:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29aa:	2250      	movs	r2, #80	; 0x50
    29ac:	490f      	ldr	r1, [pc, #60]	; (29ec <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29ae:	4620      	mov	r0, r4
    29b0:	f016 fa0b 	bl	18dca <strncmp>
    29b4:	b910      	cbnz	r0, 29bc <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29b6:	f000 f8c5 	bl	2b44 <_Z12th_timestampv>
    29ba:	e7f2      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    29bc:	4620      	mov	r0, r4
    29be:	f7ff ff35 	bl	282c <_Z16ee_profile_parsePc>
    29c2:	2800      	cmp	r0, #0
    29c4:	d0ed      	beq.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    29c6:	4621      	mov	r1, r4
    29c8:	4809      	ldr	r0, [pc, #36]	; (29f0 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    29ca:	f011 fa98 	bl	13efe <_Z9th_printfPKcz>
    29ce:	e7e8      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    29d0:	20015aa8 	.word	0x20015aa8
    29d4:	00031d50 	.word	0x00031d50
    29d8:	00032150 	.word	0x00032150
    29dc:	00032158 	.word	0x00032158
    29e0:	00032164 	.word	0x00032164
    29e4:	00032168 	.word	0x00032168
    29e8:	00031cf8 	.word	0x00031cf8
    29ec:	0003217c 	.word	0x0003217c
    29f0:	00032188 	.word	0x00032188

000029f4 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    29f4:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <_Z13ee_get_bufferPhj+0x1c>)
    29f8:	681c      	ldr	r4, [r3, #0]
    29fa:	428c      	cmp	r4, r1
    29fc:	d900      	bls.n	2a00 <_Z13ee_get_bufferPhj+0xc>
    29fe:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a00:	b118      	cbz	r0, 2a0a <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a02:	4622      	mov	r2, r4
    2a04:	4903      	ldr	r1, [pc, #12]	; (2a14 <_Z13ee_get_bufferPhj+0x20>)
    2a06:	f016 f86c 	bl	18ae2 <memcpy>
  }
  return len;
}
    2a0a:	4620      	mov	r0, r4
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	bf00      	nop
    2a10:	200004c8 	.word	0x200004c8
    2a14:	20000528 	.word	0x20000528

00002a18 <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a18:	b510      	push	{r4, lr}
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <_Z8th_inferv+0x1c>)
    2a1c:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a1e:	f104 000c 	add.w	r0, r4, #12
    2a22:	f005 f983 	bl	7d2c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a26:	b900      	cbnz	r0, 2a2a <_Z8th_inferv+0x12>
    2a28:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a2a:	4903      	ldr	r1, [pc, #12]	; (2a38 <_Z8th_inferv+0x20>)
    2a2c:	68a0      	ldr	r0, [r4, #8]
    2a2e:	f013 fa41 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a32:	e7f9      	b.n	2a28 <_Z8th_inferv+0x10>
    2a34:	200012e8 	.word	0x200012e8
    2a38:	000321a4 	.word	0x000321a4

00002a3c <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a3c:	b500      	push	{lr}
    2a3e:	f5ad 5dc0 	sub.w	sp, sp, #6144	; 0x1800
    2a42:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input_quantized),
    2a44:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    2a48:	eb0d 0001 	add.w	r0, sp, r1
    2a4c:	f7ff ffd2 	bl	29f4 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(uint8_t) != kIcInputSize) {
    2a50:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
    2a54:	d101      	bne.n	2a5a <_Z14th_load_tensorv+0x1e>
  for(i=0; i<kIcInputSize;i++)
    2a56:	2300      	movs	r3, #0
    2a58:	e00f      	b.n	2a7a <_Z14th_load_tensorv+0x3e>
    th_printf("Input db has %d elemented, expected %d\n", bytes / sizeof(uint8_t),
    2a5a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    2a5e:	4601      	mov	r1, r0
    2a60:	4815      	ldr	r0, [pc, #84]	; (2ab8 <_Z14th_load_tensorv+0x7c>)
    2a62:	f011 fa4c 	bl	13efe <_Z9th_printfPKcz>
}
    2a66:	f50d 5dc0 	add.w	sp, sp, #6144	; 0x1800
    2a6a:	b001      	add	sp, #4
    2a6c:	f85d fb04 	ldr.w	pc, [sp], #4
	    input_asint[i] = (int8_t)(input_quantized[i] - 128);
    2a70:	3a80      	subs	r2, #128	; 0x80
    2a72:	f80d 2003 	strb.w	r2, [sp, r3]
  for(i=0; i<kIcInputSize;i++)
    2a76:	3301      	adds	r3, #1
    2a78:	b29b      	uxth	r3, r3
    2a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    2a7e:	d208      	bcs.n	2a92 <_Z14th_load_tensorv+0x56>
	  if(input_quantized[i]<=127)
    2a80:	f50d 6240 	add.w	r2, sp, #3072	; 0xc00
    2a84:	56d2      	ldrsb	r2, [r2, r3]
    2a86:	2a00      	cmp	r2, #0
    2a88:	dbf2      	blt.n	2a70 <_Z14th_load_tensorv+0x34>
	    input_asint[i] = ((int8_t)input_quantized[i]) - 128;
    2a8a:	3a80      	subs	r2, #128	; 0x80
    2a8c:	f80d 2003 	strb.w	r2, [sp, r3]
    2a90:	e7f1      	b.n	2a76 <_Z14th_load_tensorv+0x3a>
  runner->SetInput(input_asint);
    2a92:	4b0a      	ldr	r3, [pc, #40]	; (2abc <_Z14th_load_tensorv+0x80>)
    2a94:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2a96:	2100      	movs	r1, #0
    2a98:	300c      	adds	r0, #12
    2a9a:	f004 fbc5 	bl	7228 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2a9e:	4603      	mov	r3, r0
    2aa0:	b100      	cbz	r0, 2aa4 <_Z14th_load_tensorv+0x68>
    2aa2:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2aa4:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2aa6:	2300      	movs	r3, #0
    2aa8:	4299      	cmp	r1, r3
    2aaa:	dddc      	ble.n	2a66 <_Z14th_load_tensorv+0x2a>
      input_buffer[i] = custom_input[i];
    2aac:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2ab0:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2ab2:	3301      	adds	r3, #1
    2ab4:	e7f8      	b.n	2aa8 <_Z14th_load_tensorv+0x6c>
    2ab6:	bf00      	nop
    2ab8:	000321b4 	.word	0x000321b4
    2abc:	200012e8 	.word	0x200012e8

00002ac0 <_Z10th_resultsv>:
void th_results() {
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2ac2:	481b      	ldr	r0, [pc, #108]	; (2b30 <_Z10th_resultsv+0x70>)
    2ac4:	f011 fa1b 	bl	13efe <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2ac8:	2400      	movs	r4, #0
    2aca:	e020      	b.n	2b0e <_Z10th_resultsv+0x4e>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2acc:	571f      	ldrsb	r7, [r3, r4]
    2ace:	4d19      	ldr	r5, [pc, #100]	; (2b34 <_Z10th_resultsv+0x74>)
    2ad0:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2ad2:	2100      	movs	r1, #0
    2ad4:	300c      	adds	r0, #12
    2ad6:	f004 fb4b 	bl	7170 <_ZN6tflite16MicroInterpreter6outputEj>
    2ada:	68c6      	ldr	r6, [r0, #12]
    2adc:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2ade:	2100      	movs	r1, #0
    2ae0:	300c      	adds	r0, #12
    2ae2:	f004 fb45 	bl	7170 <_ZN6tflite16MicroInterpreter6outputEj>
    2ae6:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2ae8:	1a38      	subs	r0, r7, r0
    2aea:	f7fe f8bd 	bl	c68 <__aeabi_i2f>
    2aee:	4631      	mov	r1, r6
    2af0:	f7fe f90e 	bl	d10 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2af4:	f7fd fc94 	bl	420 <__aeabi_f2d>
    2af8:	4602      	mov	r2, r0
    2afa:	460b      	mov	r3, r1
    2afc:	480e      	ldr	r0, [pc, #56]	; (2b38 <_Z10th_resultsv+0x78>)
    2afe:	f011 f9fe 	bl	13efe <_Z9th_printfPKcz>
    if (i < (nresults - 1)) {
    2b02:	2c08      	cmp	r4, #8
    2b04:	d802      	bhi.n	2b0c <_Z10th_resultsv+0x4c>
      th_printf(",");
    2b06:	480d      	ldr	r0, [pc, #52]	; (2b3c <_Z10th_resultsv+0x7c>)
    2b08:	f011 f9f9 	bl	13efe <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2b0c:	3401      	adds	r4, #1
    2b0e:	2c09      	cmp	r4, #9
    2b10:	d80a      	bhi.n	2b28 <_Z10th_resultsv+0x68>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2b12:	4b08      	ldr	r3, [pc, #32]	; (2b34 <_Z10th_resultsv+0x74>)
    2b14:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2b16:	2100      	movs	r1, #0
    2b18:	300c      	adds	r0, #12
    2b1a:	f004 fb29 	bl	7170 <_ZN6tflite16MicroInterpreter6outputEj>
    2b1e:	4603      	mov	r3, r0
    2b20:	2800      	cmp	r0, #0
    2b22:	d0d3      	beq.n	2acc <_Z10th_resultsv+0xc>
    2b24:	6843      	ldr	r3, [r0, #4]
    2b26:	e7d1      	b.n	2acc <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b28:	4805      	ldr	r0, [pc, #20]	; (2b40 <_Z10th_resultsv+0x80>)
    2b2a:	f011 f9e8 	bl	13efe <_Z9th_printfPKcz>
}
    2b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b30:	000321dc 	.word	0x000321dc
    2b34:	200012e8 	.word	0x200012e8
    2b38:	000321e8 	.word	0x000321e8
    2b3c:	000321f0 	.word	0x000321f0
    2b40:	00032048 	.word	0x00032048

00002b44 <_Z12th_timestampv>:
void PIN_function() {
  nrf_gpio_cfg_output(PIN7(1,7));
  //nrf_gpio_pin_clear(PIN7);
}

void th_timestamp(void) {
    2b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b46:	f015 ff7b 	bl	18a40 <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
      nrf_gpio_pin_set(PIN7(1,7));
      //nrf_gpio_pin_clear(PIN7(1,7));
/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b4a:	014e      	lsls	r6, r1, #5
    2b4c:	0143      	lsls	r3, r0, #5
    2b4e:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    2b52:	1a1b      	subs	r3, r3, r0
    2b54:	eb62 0201 	sbc.w	r2, r2, r1
    2b58:	0256      	lsls	r6, r2, #9
    2b5a:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2b5e:	025f      	lsls	r7, r3, #9
    2b60:	4632      	mov	r2, r6
    2b62:	183b      	adds	r3, r7, r0
    2b64:	eb41 0202 	adc.w	r2, r1, r2
    2b68:	0197      	lsls	r7, r2, #6
    2b6a:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2b6e:	019e      	lsls	r6, r3, #6
    2b70:	1af3      	subs	r3, r6, r3
    2b72:	eb67 0202 	sbc.w	r2, r7, r2
    2b76:	181c      	adds	r4, r3, r0
    2b78:	eb42 0501 	adc.w	r5, r2, r1
    2b7c:	4623      	mov	r3, r4
    2b7e:	4629      	mov	r1, r5
    2b80:	2c00      	cmp	r4, #0
    2b82:	f175 0200 	sbcs.w	r2, r5, #0
    2b86:	db06      	blt.n	2b96 <_Z12th_timestampv+0x52>
    2b88:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2b8a:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2b8e:	4806      	ldr	r0, [pc, #24]	; (2ba8 <_Z12th_timestampv+0x64>)
    2b90:	f011 f9b5 	bl	13efe <_Z9th_printfPKcz>
#endif
}
    2b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b96:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2b9a:	18e3      	adds	r3, r4, r3
    2b9c:	f04f 0100 	mov.w	r1, #0
    2ba0:	eb45 0101 	adc.w	r1, r5, r1
    2ba4:	e7f0      	b.n	2b88 <_Z12th_timestampv+0x44>
    2ba6:	bf00      	nop
    2ba8:	000321f4 	.word	0x000321f4

00002bac <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2bac:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2bae:	4803      	ldr	r0, [pc, #12]	; (2bbc <_Z23th_timestamp_initializev+0x10>)
    2bb0:	f011 f9a5 	bl	13efe <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2bb4:	f7ff ffc6 	bl	2b44 <_Z12th_timestampv>
}
    2bb8:	bd08      	pop	{r3, pc}
    2bba:	bf00      	nop
    2bbc:	00032204 	.word	0x00032204

00002bc0 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc2:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<7> resolver;
    2bc4:	4bb0      	ldr	r3, [pc, #704]	; (2e88 <_Z19th_final_initializev+0x2c8>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	f013 0f01 	tst.w	r3, #1
    2bcc:	d012      	beq.n	2bf4 <_Z19th_final_initializev+0x34>
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
                      ParseAbs);
  }

  TfLiteStatus AddAdd() {
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
    2bce:	a804      	add	r0, sp, #16
    2bd0:	f007 fe1a 	bl	a808 <_ZN6tflite3ops5micro12Register_ADDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2bd4:	48ad      	ldr	r0, [pc, #692]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2bd6:	6803      	ldr	r3, [r0, #0]
    2bd8:	699b      	ldr	r3, [r3, #24]
    2bda:	2100      	movs	r1, #0
    2bdc:	4798      	blx	r3
    2bde:	b1d8      	cbz	r0, 2c18 <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2be0:	4baa      	ldr	r3, [pc, #680]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2be2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2be6:	2800      	cmp	r0, #0
    2be8:	d03a      	beq.n	2c60 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2bea:	2200      	movs	r2, #0
    2bec:	49a8      	ldr	r1, [pc, #672]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2bee:	f013 f961 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2bf2:	e035      	b.n	2c60 <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2bf4:	48a5      	ldr	r0, [pc, #660]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2bf6:	4ba7      	ldr	r3, [pc, #668]	; (2e94 <_Z19th_final_initializev+0x2d4>)
    2bf8:	6003      	str	r3, [r0, #0]
    2bfa:	2300      	movs	r3, #0
    2bfc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
    2c00:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
    2c04:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    2c08:	4b9f      	ldr	r3, [pc, #636]	; (2e88 <_Z19th_final_initializev+0x2c8>)
    2c0a:	2201      	movs	r2, #1
    2c0c:	601a      	str	r2, [r3, #0]
    2c0e:	4aa2      	ldr	r2, [pc, #648]	; (2e98 <_Z19th_final_initializev+0x2d8>)
    2c10:	49a2      	ldr	r1, [pc, #648]	; (2e9c <_Z19th_final_initializev+0x2dc>)
    2c12:	f011 fe45 	bl	148a0 <__aeabi_atexit>
    2c16:	e7da      	b.n	2bce <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2c18:	4b9c      	ldr	r3, [pc, #624]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2c1e:	2e06      	cmp	r6, #6
    2c20:	d830      	bhi.n	2c84 <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2c22:	4f9a      	ldr	r7, [pc, #616]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c28:	f10c 0404 	add.w	r4, ip, #4
    2c2c:	ad04      	add	r5, sp, #16
    2c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c3a:	2200      	movs	r2, #0
    2c3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c40:	3601      	adds	r6, #1
    2c42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4

    builtin_codes_[num_buitin_ops_] = op;
    2c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2c4a:	18f9      	adds	r1, r7, r3
    2c4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2c54:	4992      	ldr	r1, [pc, #584]	; (2ea0 <_Z19th_final_initializev+0x2e0>)
    2c56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c5a:	3301      	adds	r3, #1
    2c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddFullyConnected();
    2c60:	a804      	add	r0, sp, #16
    2c62:	f00b fdad 	bl	e7c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    if (FindOp(op) != nullptr) {
    2c66:	4889      	ldr	r0, [pc, #548]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c68:	6803      	ldr	r3, [r0, #0]
    2c6a:	699b      	ldr	r3, [r3, #24]
    2c6c:	2109      	movs	r1, #9
    2c6e:	4798      	blx	r3
    2c70:	b190      	cbz	r0, 2c98 <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2c72:	4b86      	ldr	r3, [pc, #536]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2c78:	b390      	cbz	r0, 2ce0 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c7a:	2209      	movs	r2, #9
    2c7c:	4984      	ldr	r1, [pc, #528]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2c7e:	f013 f919 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c82:	e02d      	b.n	2ce0 <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2c84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2c88:	2800      	cmp	r0, #0
    2c8a:	d0e9      	beq.n	2c60 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c8c:	2307      	movs	r3, #7
    2c8e:	2200      	movs	r2, #0
    2c90:	4984      	ldr	r1, [pc, #528]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2c92:	f013 f90f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c96:	e7e3      	b.n	2c60 <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2c98:	4b7c      	ldr	r3, [pc, #496]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2c9a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2c9e:	2e06      	cmp	r6, #6
    2ca0:	d830      	bhi.n	2d04 <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2ca2:	4f7a      	ldr	r7, [pc, #488]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2ca4:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2ca8:	f10c 0404 	add.w	r4, ip, #4
    2cac:	ad04      	add	r5, sp, #16
    2cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cb2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2cba:	2209      	movs	r2, #9
    2cbc:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2cc0:	3601      	adds	r6, #1
    2cc2:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2cca:	18f9      	adds	r1, r7, r3
    2ccc:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2cd0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2cd4:	4974      	ldr	r1, [pc, #464]	; (2ea8 <_Z19th_final_initializev+0x2e8>)
    2cd6:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2cda:	3301      	adds	r3, #1
    2cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddConv2D();
    2ce0:	a804      	add	r0, sp, #16
    2ce2:	f009 ffd9 	bl	cc98 <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2ce6:	4869      	ldr	r0, [pc, #420]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2ce8:	6803      	ldr	r3, [r0, #0]
    2cea:	699b      	ldr	r3, [r3, #24]
    2cec:	2103      	movs	r1, #3
    2cee:	4798      	blx	r3
    2cf0:	b190      	cbz	r0, 2d18 <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2cf2:	4b66      	ldr	r3, [pc, #408]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2cf4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2cf8:	b390      	cbz	r0, 2d60 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cfa:	2203      	movs	r2, #3
    2cfc:	4964      	ldr	r1, [pc, #400]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2cfe:	f013 f8d9 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d02:	e02d      	b.n	2d60 <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2d04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d08:	2800      	cmp	r0, #0
    2d0a:	d0e9      	beq.n	2ce0 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d0c:	2307      	movs	r3, #7
    2d0e:	2209      	movs	r2, #9
    2d10:	4964      	ldr	r1, [pc, #400]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2d12:	f013 f8cf 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d16:	e7e3      	b.n	2ce0 <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2d18:	4b5c      	ldr	r3, [pc, #368]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2d1e:	2e06      	cmp	r6, #6
    2d20:	d830      	bhi.n	2d84 <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2d22:	4f5a      	ldr	r7, [pc, #360]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d28:	f10c 0404 	add.w	r4, ip, #4
    2d2c:	ad04      	add	r5, sp, #16
    2d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d3a:	2203      	movs	r2, #3
    2d3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d40:	3601      	adds	r6, #1
    2d42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2d4a:	18f9      	adds	r1, r7, r3
    2d4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2d54:	4955      	ldr	r1, [pc, #340]	; (2eac <_Z19th_final_initializev+0x2ec>)
    2d56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d5a:	3301      	adds	r3, #1
    2d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2d60:	a804      	add	r0, sp, #16
    2d62:	f00a fe67 	bl	da34 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2d66:	4849      	ldr	r0, [pc, #292]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d68:	6803      	ldr	r3, [r0, #0]
    2d6a:	699b      	ldr	r3, [r3, #24]
    2d6c:	2104      	movs	r1, #4
    2d6e:	4798      	blx	r3
    2d70:	b190      	cbz	r0, 2d98 <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2d72:	4b46      	ldr	r3, [pc, #280]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d78:	b390      	cbz	r0, 2de0 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d7a:	2204      	movs	r2, #4
    2d7c:	4944      	ldr	r1, [pc, #272]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2d7e:	f013 f899 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d82:	e02d      	b.n	2de0 <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2d84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2d88:	2800      	cmp	r0, #0
    2d8a:	d0e9      	beq.n	2d60 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d8c:	2307      	movs	r3, #7
    2d8e:	2203      	movs	r2, #3
    2d90:	4944      	ldr	r1, [pc, #272]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2d92:	f013 f88f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d96:	e7e3      	b.n	2d60 <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2d98:	4b3c      	ldr	r3, [pc, #240]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2d9a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2d9e:	2e06      	cmp	r6, #6
    2da0:	d830      	bhi.n	2e04 <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2da2:	4f3a      	ldr	r7, [pc, #232]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2da4:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2da8:	f10c 0404 	add.w	r4, ip, #4
    2dac:	ad04      	add	r5, sp, #16
    2dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2db2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2dba:	2204      	movs	r2, #4
    2dbc:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2dc0:	3601      	adds	r6, #1
    2dc2:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2dca:	18f9      	adds	r1, r7, r3
    2dcc:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2dd0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2dd4:	4936      	ldr	r1, [pc, #216]	; (2eb0 <_Z19th_final_initializev+0x2f0>)
    2dd6:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2dda:	3301      	adds	r3, #1
    2ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2de0:	a804      	add	r0, sp, #16
    2de2:	f00c ff03 	bl	fbec <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2de6:	4829      	ldr	r0, [pc, #164]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2de8:	6803      	ldr	r3, [r0, #0]
    2dea:	699b      	ldr	r3, [r3, #24]
    2dec:	2116      	movs	r1, #22
    2dee:	4798      	blx	r3
    2df0:	b190      	cbz	r0, 2e18 <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2df2:	4b26      	ldr	r3, [pc, #152]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2df4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2df8:	b390      	cbz	r0, 2e60 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dfa:	2216      	movs	r2, #22
    2dfc:	4924      	ldr	r1, [pc, #144]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2dfe:	f013 f859 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e02:	e02d      	b.n	2e60 <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2e04:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e08:	2800      	cmp	r0, #0
    2e0a:	d0e9      	beq.n	2de0 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e0c:	2307      	movs	r3, #7
    2e0e:	2204      	movs	r2, #4
    2e10:	4924      	ldr	r1, [pc, #144]	; (2ea4 <_Z19th_final_initializev+0x2e4>)
    2e12:	f013 f84f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e16:	e7e3      	b.n	2de0 <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2e18:	4b1c      	ldr	r3, [pc, #112]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e1a:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2e1e:	2e06      	cmp	r6, #6
    2e20:	d84a      	bhi.n	2eb8 <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2e22:	4f1a      	ldr	r7, [pc, #104]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e24:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2e28:	f10c 0404 	add.w	r4, ip, #4
    2e2c:	ad04      	add	r5, sp, #16
    2e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e3a:	2216      	movs	r2, #22
    2e3c:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e40:	3601      	adds	r6, #1
    2e42:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2e4a:	18f9      	adds	r1, r7, r3
    2e4c:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e50:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2e54:	4917      	ldr	r1, [pc, #92]	; (2eb4 <_Z19th_final_initializev+0x2f4>)
    2e56:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e5a:	3301      	adds	r3, #1
    2e5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  resolver.AddSoftmax();
    2e60:	a804      	add	r0, sp, #16
    2e62:	f00c fed3 	bl	fc0c <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2e66:	4809      	ldr	r0, [pc, #36]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e68:	6803      	ldr	r3, [r0, #0]
    2e6a:	699b      	ldr	r3, [r3, #24]
    2e6c:	2119      	movs	r1, #25
    2e6e:	4798      	blx	r3
    2e70:	b360      	cbz	r0, 2ecc <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <_Z19th_final_initializev+0x2cc>)
    2e74:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2e78:	2800      	cmp	r0, #0
    2e7a:	d04b      	beq.n	2f14 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e7c:	2219      	movs	r2, #25
    2e7e:	4904      	ldr	r1, [pc, #16]	; (2e90 <_Z19th_final_initializev+0x2d0>)
    2e80:	f013 f818 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e84:	e046      	b.n	2f14 <_Z19th_final_initializev+0x354>
    2e86:	bf00      	nop
    2e88:	2000112c 	.word	0x2000112c
    2e8c:	200011d4 	.word	0x200011d4
    2e90:	00032224 	.word	0x00032224
    2e94:	000322c0 	.word	0x000322c0
    2e98:	20015350 	.word	0x20015350
    2e9c:	00013e61 	.word	0x00013e61
    2ea0:	00009d19 	.word	0x00009d19
    2ea4:	00032274 	.word	0x00032274
    2ea8:	0000a241 	.word	0x0000a241
    2eac:	0000a045 	.word	0x0000a045
    2eb0:	0000a3f1 	.word	0x0000a3f1
    2eb4:	00009bf1 	.word	0x00009bf1
      if (error_reporter_) {
    2eb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d0cf      	beq.n	2e60 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ec0:	2307      	movs	r3, #7
    2ec2:	2216      	movs	r2, #22
    2ec4:	494f      	ldr	r1, [pc, #316]	; (3004 <_Z19th_final_initializev+0x444>)
    2ec6:	f012 fff5 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2eca:	e7c9      	b.n	2e60 <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2ecc:	4b4e      	ldr	r3, [pc, #312]	; (3008 <_Z19th_final_initializev+0x448>)
    2ece:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2ed2:	2e06      	cmp	r6, #6
    2ed4:	d830      	bhi.n	2f38 <_Z19th_final_initializev+0x378>
    registrations_[registrations_len_] = registration;
    2ed6:	4f4c      	ldr	r7, [pc, #304]	; (3008 <_Z19th_final_initializev+0x448>)
    2ed8:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2edc:	f10c 0404 	add.w	r4, ip, #4
    2ee0:	ad04      	add	r5, sp, #16
    2ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2eea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2eee:	2219      	movs	r2, #25
    2ef0:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2ef4:	3601      	adds	r6, #1
    2ef6:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2efe:	18f9      	adds	r1, r7, r3
    2f00:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f04:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2f08:	4940      	ldr	r1, [pc, #256]	; (300c <_Z19th_final_initializev+0x44c>)
    2f0a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f0e:	3301      	adds	r3, #1
    2f10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2f14:	a804      	add	r0, sp, #16
    2f16:	f00c fced 	bl	f8f4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2f1a:	483b      	ldr	r0, [pc, #236]	; (3008 <_Z19th_final_initializev+0x448>)
    2f1c:	6803      	ldr	r3, [r0, #0]
    2f1e:	699b      	ldr	r3, [r3, #24]
    2f20:	2101      	movs	r1, #1
    2f22:	4798      	blx	r3
    2f24:	b190      	cbz	r0, 2f4c <_Z19th_final_initializev+0x38c>
      if (error_reporter_ != nullptr) {
    2f26:	4b38      	ldr	r3, [pc, #224]	; (3008 <_Z19th_final_initializev+0x448>)
    2f28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f2c:	b390      	cbz	r0, 2f94 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f2e:	2201      	movs	r2, #1
    2f30:	4937      	ldr	r1, [pc, #220]	; (3010 <_Z19th_final_initializev+0x450>)
    2f32:	f012 ffbf 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f36:	e02d      	b.n	2f94 <_Z19th_final_initializev+0x3d4>
      if (error_reporter_) {
    2f38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d0e9      	beq.n	2f14 <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f40:	2307      	movs	r3, #7
    2f42:	2219      	movs	r2, #25
    2f44:	492f      	ldr	r1, [pc, #188]	; (3004 <_Z19th_final_initializev+0x444>)
    2f46:	f012 ffb5 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f4a:	e7e3      	b.n	2f14 <_Z19th_final_initializev+0x354>
    if (registrations_len_ >= tOpCount) {
    2f4c:	4b2e      	ldr	r3, [pc, #184]	; (3008 <_Z19th_final_initializev+0x448>)
    2f4e:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
    2f52:	2e06      	cmp	r6, #6
    2f54:	d828      	bhi.n	2fa8 <_Z19th_final_initializev+0x3e8>
    registrations_[registrations_len_] = registration;
    2f56:	4f2c      	ldr	r7, [pc, #176]	; (3008 <_Z19th_final_initializev+0x448>)
    2f58:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2f5c:	f10c 0404 	add.w	r4, ip, #4
    2f60:	ad04      	add	r5, sp, #16
    2f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2f6e:	2201      	movs	r2, #1
    2f70:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2f74:	4416      	add	r6, r2
    2f76:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
    builtin_codes_[num_buitin_ops_] = op;
    2f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    2f7e:	18f9      	adds	r1, r7, r3
    2f80:	f881 20e8 	strb.w	r2, [r1, #232]	; 0xe8
    builtin_parsers_[num_buitin_ops_] = parser;
    2f84:	f103 023c 	add.w	r2, r3, #60	; 0x3c
    2f88:	4922      	ldr	r1, [pc, #136]	; (3014 <_Z19th_final_initializev+0x454>)
    2f8a:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2f8e:	3301      	adds	r3, #1
    2f90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    2f94:	4b20      	ldr	r3, [pc, #128]	; (3018 <_Z19th_final_initializev+0x458>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	f013 0f01 	tst.w	r3, #1
    2f9c:	d00e      	beq.n	2fbc <_Z19th_final_initializev+0x3fc>
  runner = &model_runner;
    2f9e:	4b1f      	ldr	r3, [pc, #124]	; (301c <_Z19th_final_initializev+0x45c>)
    2fa0:	4a1f      	ldr	r2, [pc, #124]	; (3020 <_Z19th_final_initializev+0x460>)
    2fa2:	601a      	str	r2, [r3, #0]
}
    2fa4:	b00d      	add	sp, #52	; 0x34
    2fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2fa8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    2fac:	2800      	cmp	r0, #0
    2fae:	d0f1      	beq.n	2f94 <_Z19th_final_initializev+0x3d4>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2fb0:	2307      	movs	r3, #7
    2fb2:	2201      	movs	r2, #1
    2fb4:	4913      	ldr	r1, [pc, #76]	; (3004 <_Z19th_final_initializev+0x444>)
    2fb6:	f012 ff7d 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2fba:	e7eb      	b.n	2f94 <_Z19th_final_initializev+0x3d4>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    2fbc:	4819      	ldr	r0, [pc, #100]	; (3024 <_Z19th_final_initializev+0x464>)
    2fbe:	f010 ffe2 	bl	13f86 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    2fc2:	4601      	mov	r1, r0
                     reporter_) {
    2fc4:	4c16      	ldr	r4, [pc, #88]	; (3020 <_Z19th_final_initializev+0x460>)
    2fc6:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2fc8:	4623      	mov	r3, r4
    2fca:	4a17      	ldr	r2, [pc, #92]	; (3028 <_Z19th_final_initializev+0x468>)
    2fcc:	f843 2f04 	str.w	r2, [r3, #4]!
    2fd0:	60a3      	str	r3, [r4, #8]
    2fd2:	f104 050c 	add.w	r5, r4, #12
    2fd6:	2200      	movs	r2, #0
    2fd8:	9202      	str	r2, [sp, #8]
    2fda:	9301      	str	r3, [sp, #4]
    2fdc:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2fe0:	9300      	str	r3, [sp, #0]
    2fe2:	4b12      	ldr	r3, [pc, #72]	; (302c <_Z19th_final_initializev+0x46c>)
    2fe4:	4a08      	ldr	r2, [pc, #32]	; (3008 <_Z19th_final_initializev+0x448>)
    2fe6:	4628      	mov	r0, r5
    2fe8:	f012 fb92 	bl	15710 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2fec:	4628      	mov	r0, r5
    2fee:	f004 fb85 	bl	76fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      pretrainedResnet_quant_tflite, resolver, tensor_arena, kTensorArenaSize);
    2ff2:	4b09      	ldr	r3, [pc, #36]	; (3018 <_Z19th_final_initializev+0x458>)
    2ff4:	2201      	movs	r2, #1
    2ff6:	601a      	str	r2, [r3, #0]
    2ff8:	4a0d      	ldr	r2, [pc, #52]	; (3030 <_Z19th_final_initializev+0x470>)
    2ffa:	490e      	ldr	r1, [pc, #56]	; (3034 <_Z19th_final_initializev+0x474>)
    2ffc:	4620      	mov	r0, r4
    2ffe:	f011 fc4f 	bl	148a0 <__aeabi_atexit>
    3002:	e7cc      	b.n	2f9e <_Z19th_final_initializev+0x3de>
    3004:	00032274 	.word	0x00032274
    3008:	200011d4 	.word	0x200011d4
    300c:	0000a625 	.word	0x0000a625
    3010:	00032224 	.word	0x00032224
    3014:	00009e4d 	.word	0x00009e4d
    3018:	20001128 	.word	0x20001128
    301c:	200012e8 	.word	0x200012e8
    3020:	20001130 	.word	0x20001130
    3024:	00019b38 	.word	0x00019b38
    3028:	00032658 	.word	0x00032658
    302c:	200012ec 	.word	0x200012ec
    3030:	20015350 	.word	0x20015350
    3034:	00013e63 	.word	0x00013e63

00003038 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    3038:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    303a:	680b      	ldr	r3, [r1, #0]
    303c:	3301      	adds	r3, #1
    303e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3040:	4b01      	ldr	r3, [pc, #4]	; (3048 <char_out+0x10>)
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	4798      	blx	r3
}
    3046:	bd08      	pop	{r3, pc}
    3048:	20000000 	.word	0x20000000

0000304c <__printk_hook_install>:
	_char_out = fn;
    304c:	4b01      	ldr	r3, [pc, #4]	; (3054 <__printk_hook_install+0x8>)
    304e:	6018      	str	r0, [r3, #0]
}
    3050:	4770      	bx	lr
    3052:	bf00      	nop
    3054:	20000000 	.word	0x20000000

00003058 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3058:	b500      	push	{lr}
    305a:	b083      	sub	sp, #12
    305c:	4602      	mov	r2, r0
    305e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3060:	2100      	movs	r1, #0
    3062:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    3064:	a901      	add	r1, sp, #4
    3066:	4803      	ldr	r0, [pc, #12]	; (3074 <vprintk+0x1c>)
    3068:	f000 f94e 	bl	3308 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    306c:	b003      	add	sp, #12
    306e:	f85d fb04 	ldr.w	pc, [sp], #4
    3072:	bf00      	nop
    3074:	00003039 	.word	0x00003039

00003078 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3078:	b510      	push	{r4, lr}
    307a:	b084      	sub	sp, #16
    307c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    307e:	9001      	str	r0, [sp, #4]
    3080:	9102      	str	r1, [sp, #8]
    3082:	2100      	movs	r1, #0
    3084:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    3086:	a901      	add	r1, sp, #4
    3088:	4805      	ldr	r0, [pc, #20]	; (30a0 <vsnprintk+0x28>)
    308a:	f000 f93d 	bl	3308 <cbvprintf>

	if (ctx.count < ctx.max) {
    308e:	9b03      	ldr	r3, [sp, #12]
    3090:	9a02      	ldr	r2, [sp, #8]
    3092:	4293      	cmp	r3, r2
    3094:	da01      	bge.n	309a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    3096:	2200      	movs	r2, #0
    3098:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    309a:	9803      	ldr	r0, [sp, #12]
    309c:	b004      	add	sp, #16
    309e:	bd10      	pop	{r4, pc}
    30a0:	00013fdb 	.word	0x00013fdb

000030a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    30a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30a8:	b083      	sub	sp, #12
    30aa:	4604      	mov	r4, r0
    30ac:	4608      	mov	r0, r1
    30ae:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    30b0:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    30b2:	f013 0f08 	tst.w	r3, #8
    30b6:	d105      	bne.n	30c4 <process_event+0x20>
    30b8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    30bc:	2300      	movs	r3, #0
    30be:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    30c0:	9301      	str	r3, [sp, #4]
}
    30c2:	e069      	b.n	3198 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    30c4:	2901      	cmp	r1, #1
    30c6:	d009      	beq.n	30dc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    30c8:	f043 0320 	orr.w	r3, r3, #32
    30cc:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    30ce:	f385 8811 	msr	BASEPRI, r5
    30d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    30d6:	b003      	add	sp, #12
    30d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    30dc:	f043 0310 	orr.w	r3, r3, #16
    30e0:	83a3      	strh	r3, [r4, #28]
    30e2:	e7f4      	b.n	30ce <process_event+0x2a>
			evt = process_recheck(mgr);
    30e4:	4620      	mov	r0, r4
    30e6:	f010 ffd3 	bl	14090 <process_recheck>
    30ea:	e057      	b.n	319c <process_event+0xf8>
			res = mgr->last_res;
    30ec:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    30f0:	464a      	mov	r2, r9
    30f2:	4669      	mov	r1, sp
    30f4:	4620      	mov	r0, r4
    30f6:	f010 ffe4 	bl	140c2 <process_complete>
		onoff_transition_fn transit = NULL;
    30fa:	2700      	movs	r7, #0
    30fc:	e05a      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->start;
    30fe:	6923      	ldr	r3, [r4, #16]
    3100:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3102:	2106      	movs	r1, #6
    3104:	4620      	mov	r0, r4
    3106:	f010 ff9c 	bl	14042 <set_state>
		res = 0;
    310a:	f04f 0900 	mov.w	r9, #0
    310e:	e051      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->stop;
    3110:	6923      	ldr	r3, [r4, #16]
    3112:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3114:	2104      	movs	r1, #4
    3116:	4620      	mov	r0, r4
    3118:	f010 ff93 	bl	14042 <set_state>
		res = 0;
    311c:	f04f 0900 	mov.w	r9, #0
    3120:	e048      	b.n	31b4 <process_event+0x110>
			transit = mgr->transitions->reset;
    3122:	6923      	ldr	r3, [r4, #16]
    3124:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    3126:	2105      	movs	r1, #5
    3128:	4620      	mov	r0, r4
    312a:	f010 ff8a 	bl	14042 <set_state>
		res = 0;
    312e:	f04f 0900 	mov.w	r9, #0
    3132:	e03f      	b.n	31b4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3134:	2200      	movs	r2, #0
    3136:	e046      	b.n	31c6 <process_event+0x122>
    3138:	2200      	movs	r2, #0
    313a:	e044      	b.n	31c6 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    313c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3140:	83a3      	strh	r3, [r4, #28]
    3142:	f385 8811 	msr	BASEPRI, r5
    3146:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    314a:	2900      	cmp	r1, #0
    314c:	d144      	bne.n	31d8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    314e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3150:	b12b      	cbz	r3, 315e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    3152:	464b      	mov	r3, r9
    3154:	4642      	mov	r2, r8
    3156:	4669      	mov	r1, sp
    3158:	4620      	mov	r0, r4
    315a:	f011 f828 	bl	141ae <notify_all>
			if (transit != NULL) {
    315e:	b117      	cbz	r7, 3166 <process_event+0xc2>
				transit(mgr, transition_complete);
    3160:	4925      	ldr	r1, [pc, #148]	; (31f8 <process_event+0x154>)
    3162:	4620      	mov	r0, r4
    3164:	47b8      	blx	r7
	__asm__ volatile(
    3166:	f04f 0320 	mov.w	r3, #32
    316a:	f3ef 8511 	mrs	r5, BASEPRI
    316e:	f383 8812 	msr	BASEPRI_MAX, r3
    3172:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3176:	8ba3      	ldrh	r3, [r4, #28]
    3178:	f023 0308 	bic.w	r3, r3, #8
    317c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    317e:	8ba3      	ldrh	r3, [r4, #28]
    3180:	f013 0f10 	tst.w	r3, #16
    3184:	d02e      	beq.n	31e4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3186:	f023 0310 	bic.w	r3, r3, #16
    318a:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    318c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    318e:	8ba6      	ldrh	r6, [r4, #28]
    3190:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    3194:	2800      	cmp	r0, #0
    3196:	d09a      	beq.n	30ce <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    3198:	2802      	cmp	r0, #2
    319a:	d0a3      	beq.n	30e4 <process_event+0x40>
		if (evt == EVT_NOP) {
    319c:	2800      	cmp	r0, #0
    319e:	d096      	beq.n	30ce <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    31a0:	2801      	cmp	r0, #1
    31a2:	d0a3      	beq.n	30ec <process_event+0x48>
		} else if (evt == EVT_START) {
    31a4:	2803      	cmp	r0, #3
    31a6:	d0aa      	beq.n	30fe <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    31a8:	2804      	cmp	r0, #4
    31aa:	d0b1      	beq.n	3110 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    31ac:	2805      	cmp	r0, #5
    31ae:	d0b8      	beq.n	3122 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    31b0:	2700      	movs	r7, #0
		res = 0;
    31b2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    31b4:	8ba3      	ldrh	r3, [r4, #28]
    31b6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    31ba:	45b0      	cmp	r8, r6
    31bc:	d0ba      	beq.n	3134 <process_event+0x90>
    31be:	68a2      	ldr	r2, [r4, #8]
    31c0:	2a00      	cmp	r2, #0
    31c2:	d0b9      	beq.n	3138 <process_event+0x94>
    31c4:	2201      	movs	r2, #1
		if (do_monitors
    31c6:	4611      	mov	r1, r2
    31c8:	2a00      	cmp	r2, #0
    31ca:	d1b7      	bne.n	313c <process_event+0x98>
    31cc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    31ce:	2a00      	cmp	r2, #0
    31d0:	d1b4      	bne.n	313c <process_event+0x98>
		    || (transit != NULL)) {
    31d2:	2f00      	cmp	r7, #0
    31d4:	d1b2      	bne.n	313c <process_event+0x98>
    31d6:	e7d2      	b.n	317e <process_event+0xda>
				notify_monitors(mgr, state, res);
    31d8:	464a      	mov	r2, r9
    31da:	4641      	mov	r1, r8
    31dc:	4620      	mov	r0, r4
    31de:	f010 ff38 	bl	14052 <notify_monitors>
    31e2:	e7b4      	b.n	314e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    31e4:	f013 0f20 	tst.w	r3, #32
    31e8:	d004      	beq.n	31f4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    31ea:	f023 0320 	bic.w	r3, r3, #32
    31ee:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    31f0:	2002      	movs	r0, #2
    31f2:	e7cc      	b.n	318e <process_event+0xea>
		evt = EVT_NOP;
    31f4:	2000      	movs	r0, #0
    31f6:	e7ca      	b.n	318e <process_event+0xea>
    31f8:	000141dd 	.word	0x000141dd

000031fc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    31fc:	b410      	push	{r4}
    31fe:	4604      	mov	r4, r0
	const char *sp = *str;
    3200:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3202:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3204:	7813      	ldrb	r3, [r2, #0]
    3206:	4907      	ldr	r1, [pc, #28]	; (3224 <extract_decimal+0x28>)
    3208:	5c59      	ldrb	r1, [r3, r1]
    320a:	f011 0f04 	tst.w	r1, #4
    320e:	d006      	beq.n	321e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    3210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3214:	3201      	adds	r2, #1
    3216:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    321a:	3830      	subs	r0, #48	; 0x30
    321c:	e7f2      	b.n	3204 <extract_decimal+0x8>
	}
	*str = sp;
    321e:	6022      	str	r2, [r4, #0]
	return val;
}
    3220:	bc10      	pop	{r4}
    3222:	4770      	bx	lr
    3224:	000351f5 	.word	0x000351f5

00003228 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    322c:	b083      	sub	sp, #12
    322e:	4604      	mov	r4, r0
    3230:	460d      	mov	r5, r1
    3232:	9201      	str	r2, [sp, #4]
    3234:	469a      	mov	sl, r3
    3236:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    323a:	78d3      	ldrb	r3, [r2, #3]
    323c:	4a31      	ldr	r2, [pc, #196]	; (3304 <encode_uint+0xdc>)
    323e:	f813 b002 	ldrb.w	fp, [r3, r2]
    3242:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3246:	2b6f      	cmp	r3, #111	; 0x6f
    3248:	d00f      	beq.n	326a <encode_uint+0x42>
    324a:	d906      	bls.n	325a <encode_uint+0x32>
    324c:	2b70      	cmp	r3, #112	; 0x70
    324e:	d00f      	beq.n	3270 <encode_uint+0x48>
    3250:	2b78      	cmp	r3, #120	; 0x78
    3252:	d110      	bne.n	3276 <encode_uint+0x4e>
		return 16;
    3254:	f04f 0910 	mov.w	r9, #16
    3258:	e023      	b.n	32a2 <encode_uint+0x7a>
	switch (specifier) {
    325a:	2b58      	cmp	r3, #88	; 0x58
    325c:	d002      	beq.n	3264 <encode_uint+0x3c>
    325e:	f04f 090a 	mov.w	r9, #10
    3262:	e01e      	b.n	32a2 <encode_uint+0x7a>
		return 16;
    3264:	f04f 0910 	mov.w	r9, #16
    3268:	e01b      	b.n	32a2 <encode_uint+0x7a>
		return 8;
    326a:	f04f 0908 	mov.w	r9, #8
    326e:	e018      	b.n	32a2 <encode_uint+0x7a>
		return 16;
    3270:	f04f 0910 	mov.w	r9, #16
    3274:	e015      	b.n	32a2 <encode_uint+0x7a>
	switch (specifier) {
    3276:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    327a:	e012      	b.n	32a2 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    327c:	b2d2      	uxtb	r2, r2
    327e:	3230      	adds	r2, #48	; 0x30
    3280:	b2d2      	uxtb	r2, r2
    3282:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    3286:	4632      	mov	r2, r6
    3288:	463b      	mov	r3, r7
    328a:	4620      	mov	r0, r4
    328c:	4629      	mov	r1, r5
    328e:	f7fd ff2b 	bl	10e8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    3292:	42bd      	cmp	r5, r7
    3294:	bf08      	it	eq
    3296:	42b4      	cmpeq	r4, r6
    3298:	d318      	bcc.n	32cc <encode_uint+0xa4>
    329a:	45d0      	cmp	r8, sl
    329c:	d916      	bls.n	32cc <encode_uint+0xa4>
		value /= radix;
    329e:	4604      	mov	r4, r0
    32a0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    32a2:	464e      	mov	r6, r9
    32a4:	2700      	movs	r7, #0
    32a6:	464a      	mov	r2, r9
    32a8:	463b      	mov	r3, r7
    32aa:	4620      	mov	r0, r4
    32ac:	4629      	mov	r1, r5
    32ae:	f7fd ff1b 	bl	10e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32b2:	2a09      	cmp	r2, #9
    32b4:	d9e2      	bls.n	327c <encode_uint+0x54>
    32b6:	f1bb 0f01 	cmp.w	fp, #1
    32ba:	d003      	beq.n	32c4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    32bc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32be:	3257      	adds	r2, #87	; 0x57
    32c0:	b2d2      	uxtb	r2, r2
    32c2:	e7de      	b.n	3282 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    32c4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    32c6:	3237      	adds	r2, #55	; 0x37
    32c8:	b2d2      	uxtb	r2, r2
    32ca:	e7da      	b.n	3282 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    32cc:	9b01      	ldr	r3, [sp, #4]
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	f013 0f20 	tst.w	r3, #32
    32d4:	d005      	beq.n	32e2 <encode_uint+0xba>
		if (radix == 8) {
    32d6:	f1b9 0f08 	cmp.w	r9, #8
    32da:	d006      	beq.n	32ea <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    32dc:	f1b9 0f10 	cmp.w	r9, #16
    32e0:	d009      	beq.n	32f6 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    32e2:	4640      	mov	r0, r8
    32e4:	b003      	add	sp, #12
    32e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    32ea:	9a01      	ldr	r2, [sp, #4]
    32ec:	7893      	ldrb	r3, [r2, #2]
    32ee:	f043 0308 	orr.w	r3, r3, #8
    32f2:	7093      	strb	r3, [r2, #2]
    32f4:	e7f5      	b.n	32e2 <encode_uint+0xba>
			conv->altform_0c = true;
    32f6:	9a01      	ldr	r2, [sp, #4]
    32f8:	7893      	ldrb	r3, [r2, #2]
    32fa:	f043 0310 	orr.w	r3, r3, #16
    32fe:	7093      	strb	r3, [r2, #2]
    3300:	e7ef      	b.n	32e2 <encode_uint+0xba>
    3302:	bf00      	nop
    3304:	000351f5 	.word	0x000351f5

00003308 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    330c:	b093      	sub	sp, #76	; 0x4c
    330e:	4606      	mov	r6, r0
    3310:	460d      	mov	r5, r1
    3312:	4692      	mov	sl, r2
    3314:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3316:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3318:	f89a 0000 	ldrb.w	r0, [sl]
    331c:	2800      	cmp	r0, #0
    331e:	f000 84d6 	beq.w	3cce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x236>
		if (*fp != '%') {
    3322:	2825      	cmp	r0, #37	; 0x25
    3324:	d008      	beq.n	3338 <cbvprintf+0x30>
			OUTC(*fp++);
    3326:	f10a 0a01 	add.w	sl, sl, #1
    332a:	4629      	mov	r1, r5
    332c:	47b0      	blx	r6
    332e:	2800      	cmp	r0, #0
    3330:	f2c0 84ce 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3334:	3401      	adds	r4, #1
			continue;
    3336:	e7ef      	b.n	3318 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    3338:	2300      	movs	r3, #0
    333a:	9306      	str	r3, [sp, #24]
    333c:	9307      	str	r3, [sp, #28]
    333e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    3340:	9308      	str	r3, [sp, #32]
    3342:	9309      	str	r3, [sp, #36]	; 0x24
    3344:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    3346:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    334a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    334e:	2b25      	cmp	r3, #37	; 0x25
    3350:	d001      	beq.n	3356 <cbvprintf+0x4e>
	bool loop = true;
    3352:	2701      	movs	r7, #1
    3354:	e02c      	b.n	33b0 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    3356:	f10a 0802 	add.w	r8, sl, #2
    335a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    335e:	e1a8      	b.n	36b2 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    3360:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3364:	f043 0304 	orr.w	r3, r3, #4
    3368:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    336c:	b1ff      	cbz	r7, 33ae <cbvprintf+0xa6>
			++sp;
    336e:	f108 0801 	add.w	r8, r8, #1
    3372:	e01c      	b.n	33ae <cbvprintf+0xa6>
			conv->flag_plus = true;
    3374:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3378:	f043 0308 	orr.w	r3, r3, #8
    337c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    3380:	e7f4      	b.n	336c <cbvprintf+0x64>
			conv->flag_space = true;
    3382:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3386:	f043 0310 	orr.w	r3, r3, #16
    338a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    338e:	e7ed      	b.n	336c <cbvprintf+0x64>
			conv->flag_hash = true;
    3390:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3394:	f043 0320 	orr.w	r3, r3, #32
    3398:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    339c:	e7e6      	b.n	336c <cbvprintf+0x64>
			conv->flag_zero = true;
    339e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33a6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    33aa:	e7df      	b.n	336c <cbvprintf+0x64>
		switch (*sp) {
    33ac:	2700      	movs	r7, #0
	} while (loop);
    33ae:	b34f      	cbz	r7, 3404 <cbvprintf+0xfc>
		switch (*sp) {
    33b0:	f898 3000 	ldrb.w	r3, [r8]
    33b4:	3b20      	subs	r3, #32
    33b6:	2b10      	cmp	r3, #16
    33b8:	d8f8      	bhi.n	33ac <cbvprintf+0xa4>
    33ba:	a201      	add	r2, pc, #4	; (adr r2, 33c0 <cbvprintf+0xb8>)
    33bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    33c0:	00003383 	.word	0x00003383
    33c4:	000033ad 	.word	0x000033ad
    33c8:	000033ad 	.word	0x000033ad
    33cc:	00003391 	.word	0x00003391
    33d0:	000033ad 	.word	0x000033ad
    33d4:	000033ad 	.word	0x000033ad
    33d8:	000033ad 	.word	0x000033ad
    33dc:	000033ad 	.word	0x000033ad
    33e0:	000033ad 	.word	0x000033ad
    33e4:	000033ad 	.word	0x000033ad
    33e8:	000033ad 	.word	0x000033ad
    33ec:	00003375 	.word	0x00003375
    33f0:	000033ad 	.word	0x000033ad
    33f4:	00003361 	.word	0x00003361
    33f8:	000033ad 	.word	0x000033ad
    33fc:	000033ad 	.word	0x000033ad
    3400:	0000339f 	.word	0x0000339f
	if (conv->flag_zero && conv->flag_dash) {
    3404:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3408:	f003 0344 	and.w	r3, r3, #68	; 0x44
    340c:	2b44      	cmp	r3, #68	; 0x44
    340e:	d06d      	beq.n	34ec <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    3410:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    3414:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    341c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    3420:	f898 3000 	ldrb.w	r3, [r8]
    3424:	2b2a      	cmp	r3, #42	; 0x2a
    3426:	d068      	beq.n	34fa <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    3428:	a805      	add	r0, sp, #20
    342a:	f7ff fee7 	bl	31fc <extract_decimal>
	if (sp != wp) {
    342e:	9b05      	ldr	r3, [sp, #20]
    3430:	4598      	cmp	r8, r3
    3432:	d012      	beq.n	345a <cbvprintf+0x152>
		conv->width_present = true;
    3434:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    343c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    3440:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    3442:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    3446:	2800      	cmp	r0, #0
    3448:	db60      	blt.n	350c <cbvprintf+0x204>
    344a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    344c:	4313      	orrs	r3, r2
    344e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3452:	f363 0241 	bfi	r2, r3, #1, #1
    3456:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    345a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    345c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    345e:	781b      	ldrb	r3, [r3, #0]
    3460:	2b2e      	cmp	r3, #46	; 0x2e
    3462:	bf14      	ite	ne
    3464:	2300      	movne	r3, #0
    3466:	2301      	moveq	r3, #1
    3468:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    346c:	f363 0241 	bfi	r2, r3, #1, #1
    3470:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    3474:	2b00      	cmp	r3, #0
    3476:	d04b      	beq.n	3510 <cbvprintf+0x208>
	++sp;
    3478:	9b05      	ldr	r3, [sp, #20]
    347a:	1c5a      	adds	r2, r3, #1
    347c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    347e:	785b      	ldrb	r3, [r3, #1]
    3480:	2b2a      	cmp	r3, #42	; 0x2a
    3482:	d048      	beq.n	3516 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    3484:	a805      	add	r0, sp, #20
    3486:	f7ff feb9 	bl	31fc <extract_decimal>
	conv->prec_value = prec;
    348a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    348c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3490:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    3494:	2800      	cmp	r0, #0
    3496:	db47      	blt.n	3528 <cbvprintf+0x220>
    3498:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    349a:	4313      	orrs	r3, r2
    349c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    34a0:	f363 0241 	bfi	r2, r3, #1, #1
    34a4:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    34a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    34ac:	f898 3000 	ldrb.w	r3, [r8]
    34b0:	3b4c      	subs	r3, #76	; 0x4c
    34b2:	2b2e      	cmp	r3, #46	; 0x2e
    34b4:	f200 80dc 	bhi.w	3670 <cbvprintf+0x368>
    34b8:	e8df f003 	tbb	[pc, r3]
    34bc:	dadadaca 	.word	0xdadadaca
    34c0:	dadadada 	.word	0xdadadada
    34c4:	dadadada 	.word	0xdadadada
    34c8:	dadadada 	.word	0xdadadada
    34cc:	dadadada 	.word	0xdadadada
    34d0:	dadadada 	.word	0xdadadada
    34d4:	dadadada 	.word	0xdadadada
    34d8:	da6ada38 	.word	0xda6ada38
    34dc:	dadada51 	.word	0xdadada51
    34e0:	dadadada 	.word	0xdadadada
    34e4:	dadadac0 	.word	0xdadadac0
    34e8:	dada      	.short	0xdada
    34ea:	b6          	.byte	0xb6
    34eb:	00          	.byte	0x00
		conv->flag_zero = false;
    34ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    34f0:	f36f 1386 	bfc	r3, #6, #1
    34f4:	f88d 3020 	strb.w	r3, [sp, #32]
    34f8:	e78a      	b.n	3410 <cbvprintf+0x108>
		conv->width_star = true;
    34fa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34fe:	f043 0301 	orr.w	r3, r3, #1
    3502:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3506:	4643      	mov	r3, r8
    3508:	3301      	adds	r3, #1
    350a:	e7a7      	b.n	345c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    350c:	2201      	movs	r2, #1
    350e:	e79d      	b.n	344c <cbvprintf+0x144>
		return sp;
    3510:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3514:	e7ca      	b.n	34ac <cbvprintf+0x1a4>
		conv->prec_star = true;
    3516:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    351a:	f043 0304 	orr.w	r3, r3, #4
    351e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3522:	f102 0801 	add.w	r8, r2, #1
    3526:	e7c1      	b.n	34ac <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    3528:	2201      	movs	r2, #1
    352a:	e7b6      	b.n	349a <cbvprintf+0x192>
		if (*++sp == 'h') {
    352c:	f108 0201 	add.w	r2, r8, #1
    3530:	f898 3001 	ldrb.w	r3, [r8, #1]
    3534:	2b68      	cmp	r3, #104	; 0x68
    3536:	d008      	beq.n	354a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    3538:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    353c:	2102      	movs	r1, #2
    353e:	f361 03c6 	bfi	r3, r1, #3, #4
    3542:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    3546:	4690      	mov	r8, r2
    3548:	e02b      	b.n	35a2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    354a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    354e:	2201      	movs	r2, #1
    3550:	f362 03c6 	bfi	r3, r2, #3, #4
    3554:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    3558:	f108 0802 	add.w	r8, r8, #2
    355c:	e021      	b.n	35a2 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    355e:	f108 0201 	add.w	r2, r8, #1
    3562:	f898 3001 	ldrb.w	r3, [r8, #1]
    3566:	2b6c      	cmp	r3, #108	; 0x6c
    3568:	d008      	beq.n	357c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    356a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    356e:	2103      	movs	r1, #3
    3570:	f361 03c6 	bfi	r3, r1, #3, #4
    3574:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    3578:	4690      	mov	r8, r2
    357a:	e012      	b.n	35a2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    357c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3580:	2204      	movs	r2, #4
    3582:	f362 03c6 	bfi	r3, r2, #3, #4
    3586:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    358a:	f108 0802 	add.w	r8, r8, #2
    358e:	e008      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    3590:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3594:	2205      	movs	r2, #5
    3596:	f362 03c6 	bfi	r3, r2, #3, #4
    359a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    359e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    35a2:	f818 3b01 	ldrb.w	r3, [r8], #1
    35a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    35aa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    35ae:	2a37      	cmp	r2, #55	; 0x37
    35b0:	f200 8150 	bhi.w	3854 <cbvprintf+0x54c>
    35b4:	e8df f012 	tbh	[pc, r2, lsl #1]
    35b8:	014e0126 	.word	0x014e0126
    35bc:	014e014e 	.word	0x014e014e
    35c0:	01260126 	.word	0x01260126
    35c4:	014e0126 	.word	0x014e0126
    35c8:	014e014e 	.word	0x014e014e
    35cc:	014e014e 	.word	0x014e014e
    35d0:	014e014e 	.word	0x014e014e
    35d4:	014e014e 	.word	0x014e014e
    35d8:	014e014e 	.word	0x014e014e
    35dc:	014e014e 	.word	0x014e014e
    35e0:	014e014e 	.word	0x014e014e
    35e4:	0113014e 	.word	0x0113014e
    35e8:	014e014e 	.word	0x014e014e
    35ec:	014e014e 	.word	0x014e014e
    35f0:	014e014e 	.word	0x014e014e
    35f4:	014e014e 	.word	0x014e014e
    35f8:	014e0126 	.word	0x014e0126
    35fc:	00630113 	.word	0x00630113
    3600:	01260126 	.word	0x01260126
    3604:	014e0126 	.word	0x014e0126
    3608:	014e0063 	.word	0x014e0063
    360c:	014e014e 	.word	0x014e014e
    3610:	012f014e 	.word	0x012f014e
    3614:	013f0113 	.word	0x013f0113
    3618:	014e014e 	.word	0x014e014e
    361c:	014e013f 	.word	0x014e013f
    3620:	014e0113 	.word	0x014e0113
    3624:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    3628:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    362c:	2206      	movs	r2, #6
    362e:	f362 03c6 	bfi	r3, r2, #3, #4
    3632:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3636:	f108 0801 	add.w	r8, r8, #1
		break;
    363a:	e7b2      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    363c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3640:	2207      	movs	r2, #7
    3642:	f362 03c6 	bfi	r3, r2, #3, #4
    3646:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    364a:	f108 0801 	add.w	r8, r8, #1
		break;
    364e:	e7a8      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    3650:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3654:	2208      	movs	r2, #8
    3656:	f362 03c6 	bfi	r3, r2, #3, #4
    365a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    365e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    3662:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3666:	f043 0302 	orr.w	r3, r3, #2
    366a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    366e:	e798      	b.n	35a2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    3670:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3674:	f36f 03c6 	bfc	r3, #3, #4
    3678:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    367c:	e791      	b.n	35a2 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    367e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3682:	2101      	movs	r1, #1
    3684:	f361 0202 	bfi	r2, r1, #0, #3
    3688:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    368c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    3690:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3694:	2a40      	cmp	r2, #64	; 0x40
    3696:	f000 80aa 	beq.w	37ee <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    369a:	2b63      	cmp	r3, #99	; 0x63
    369c:	f000 80ae 	beq.w	37fc <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    36a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    36a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    36a8:	4317      	orrs	r7, r2
    36aa:	f367 0341 	bfi	r3, r7, #1, #1
    36ae:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    36b2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36b6:	f013 0f01 	tst.w	r3, #1
    36ba:	f000 80da 	beq.w	3872 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	1d1a      	adds	r2, r3, #4
    36c2:	9203      	str	r2, [sp, #12]
    36c4:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    36c6:	2f00      	cmp	r7, #0
    36c8:	f2c0 80cb 	blt.w	3862 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    36cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36d0:	f013 0f04 	tst.w	r3, #4
    36d4:	f000 80df 	beq.w	3896 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    36d8:	9b03      	ldr	r3, [sp, #12]
    36da:	1d1a      	adds	r2, r3, #4
    36dc:	9203      	str	r2, [sp, #12]
    36de:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    36e2:	f1bb 0f00 	cmp.w	fp, #0
    36e6:	f2c0 80cd 	blt.w	3884 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    36ea:	2300      	movs	r3, #0
    36ec:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    36ee:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    36f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    36f4:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    36f8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    36fc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3700:	2b01      	cmp	r3, #1
    3702:	f000 80d1 	beq.w	38a8 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3706:	2b02      	cmp	r3, #2
    3708:	f000 8116 	beq.w	3938 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    370c:	2b04      	cmp	r3, #4
    370e:	f000 8167 	beq.w	39e0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3712:	2b03      	cmp	r3, #3
    3714:	f000 817e 	beq.w	3a14 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    3718:	f89d 9020 	ldrb.w	r9, [sp, #32]
    371c:	f019 0303 	ands.w	r3, r9, #3
    3720:	9302      	str	r3, [sp, #8]
    3722:	f040 817d 	bne.w	3a20 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3726:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    372a:	3b25      	subs	r3, #37	; 0x25
    372c:	2b53      	cmp	r3, #83	; 0x53
    372e:	f200 8233 	bhi.w	3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>
    3732:	e8df f013 	tbh	[pc, r3, lsl #1]
    3736:	0181      	.short	0x0181
    3738:	02310231 	.word	0x02310231
    373c:	02310231 	.word	0x02310231
    3740:	02310231 	.word	0x02310231
    3744:	02310231 	.word	0x02310231
    3748:	02310231 	.word	0x02310231
    374c:	02310231 	.word	0x02310231
    3750:	02310231 	.word	0x02310231
    3754:	02310231 	.word	0x02310231
    3758:	02310231 	.word	0x02310231
    375c:	02310231 	.word	0x02310231
    3760:	02310231 	.word	0x02310231
    3764:	02310231 	.word	0x02310231
    3768:	02310231 	.word	0x02310231
    376c:	02310231 	.word	0x02310231
    3770:	02310231 	.word	0x02310231
    3774:	02310231 	.word	0x02310231
    3778:	02310231 	.word	0x02310231
    377c:	02310231 	.word	0x02310231
    3780:	02310231 	.word	0x02310231
    3784:	02310231 	.word	0x02310231
    3788:	02310231 	.word	0x02310231
    378c:	02310231 	.word	0x02310231
    3790:	02310231 	.word	0x02310231
    3794:	02310231 	.word	0x02310231
    3798:	02310231 	.word	0x02310231
    379c:	023101c7 	.word	0x023101c7
    37a0:	02310231 	.word	0x02310231
    37a4:	02310231 	.word	0x02310231
    37a8:	02310231 	.word	0x02310231
    37ac:	02310231 	.word	0x02310231
    37b0:	01a10231 	.word	0x01a10231
    37b4:	023101ab 	.word	0x023101ab
    37b8:	02310231 	.word	0x02310231
    37bc:	01ab0231 	.word	0x01ab0231
    37c0:	02310231 	.word	0x02310231
    37c4:	02310231 	.word	0x02310231
    37c8:	01c70208 	.word	0x01c70208
    37cc:	023101ea 	.word	0x023101ea
    37d0:	018f0231 	.word	0x018f0231
    37d4:	01c70231 	.word	0x01c70231
    37d8:	02310231 	.word	0x02310231
    37dc:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    37de:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    37e2:	2102      	movs	r1, #2
    37e4:	f361 0202 	bfi	r2, r1, #0, #3
    37e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    37ec:	e74e      	b.n	368c <cbvprintf+0x384>
			conv->invalid = true;
    37ee:	f89d 1020 	ldrb.w	r1, [sp, #32]
    37f2:	f041 0101 	orr.w	r1, r1, #1
    37f6:	f88d 1020 	strb.w	r1, [sp, #32]
    37fa:	e74e      	b.n	369a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    37fc:	1e17      	subs	r7, r2, #0
    37fe:	bf18      	it	ne
    3800:	2701      	movne	r7, #1
    3802:	e74d      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    3804:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3808:	2204      	movs	r2, #4
    380a:	f362 0302 	bfi	r3, r2, #0, #3
    380e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    3812:	2701      	movs	r7, #1
			break;
    3814:	e744      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3816:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    381a:	2203      	movs	r2, #3
    381c:	f362 0302 	bfi	r3, r2, #0, #3
    3820:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3824:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3828:	f003 0378 	and.w	r3, r3, #120	; 0x78
    382c:	2b40      	cmp	r3, #64	; 0x40
    382e:	f47f af37 	bne.w	36a0 <cbvprintf+0x398>
			unsupported = true;
    3832:	2701      	movs	r7, #1
    3834:	e734      	b.n	36a0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3836:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    383a:	2203      	movs	r2, #3
    383c:	f362 0302 	bfi	r3, r2, #0, #3
    3840:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    3844:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3848:	f013 0f78 	tst.w	r3, #120	; 0x78
    384c:	f43f af28 	beq.w	36a0 <cbvprintf+0x398>
			unsupported = true;
    3850:	2701      	movs	r7, #1
    3852:	e725      	b.n	36a0 <cbvprintf+0x398>
		conv->invalid = true;
    3854:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3858:	f043 0301 	orr.w	r3, r3, #1
    385c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    3860:	e71e      	b.n	36a0 <cbvprintf+0x398>
				conv->flag_dash = true;
    3862:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3866:	f043 0304 	orr.w	r3, r3, #4
    386a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    386e:	427f      	negs	r7, r7
    3870:	e72c      	b.n	36cc <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    3872:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    3876:	2b00      	cmp	r3, #0
    3878:	db02      	blt.n	3880 <cbvprintf+0x578>
		int width = -1;
    387a:	f04f 37ff 	mov.w	r7, #4294967295
    387e:	e725      	b.n	36cc <cbvprintf+0x3c4>
			width = conv->width_value;
    3880:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3882:	e723      	b.n	36cc <cbvprintf+0x3c4>
				conv->prec_present = false;
    3884:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3888:	f36f 0341 	bfc	r3, #1, #1
    388c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    3890:	f04f 3bff 	mov.w	fp, #4294967295
    3894:	e729      	b.n	36ea <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    3896:	f013 0f02 	tst.w	r3, #2
    389a:	d002      	beq.n	38a2 <cbvprintf+0x59a>
			precision = conv->prec_value;
    389c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    38a0:	e723      	b.n	36ea <cbvprintf+0x3e2>
		int precision = -1;
    38a2:	f04f 3bff 	mov.w	fp, #4294967295
    38a6:	e720      	b.n	36ea <cbvprintf+0x3e2>
			switch (length_mod) {
    38a8:	1ecb      	subs	r3, r1, #3
    38aa:	2b04      	cmp	r3, #4
    38ac:	d804      	bhi.n	38b8 <cbvprintf+0x5b0>
    38ae:	e8df f003 	tbb	[pc, r3]
    38b2:	1d0b      	.short	0x1d0b
    38b4:	3529      	.short	0x3529
    38b6:	35          	.byte	0x35
    38b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    38b8:	9b03      	ldr	r3, [sp, #12]
    38ba:	1d1a      	adds	r2, r3, #4
    38bc:	9203      	str	r2, [sp, #12]
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	17d3      	asrs	r3, r2, #31
    38c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    38c6:	e006      	b.n	38d6 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    38c8:	9b03      	ldr	r3, [sp, #12]
    38ca:	1d1a      	adds	r2, r3, #4
    38cc:	9203      	str	r2, [sp, #12]
    38ce:	681a      	ldr	r2, [r3, #0]
    38d0:	17d3      	asrs	r3, r2, #31
    38d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    38d6:	2901      	cmp	r1, #1
    38d8:	d028      	beq.n	392c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    38da:	2902      	cmp	r1, #2
    38dc:	f47f af1c 	bne.w	3718 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    38e0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    38e4:	17d3      	asrs	r3, r2, #31
    38e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    38ea:	e715      	b.n	3718 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    38ec:	9b03      	ldr	r3, [sp, #12]
    38ee:	3307      	adds	r3, #7
    38f0:	f023 0307 	bic.w	r3, r3, #7
    38f4:	f103 0208 	add.w	r2, r3, #8
    38f8:	9203      	str	r2, [sp, #12]
    38fa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    38fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3902:	e7e8      	b.n	38d6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	3307      	adds	r3, #7
    3908:	f023 0307 	bic.w	r3, r3, #7
    390c:	f103 0208 	add.w	r2, r3, #8
    3910:	9203      	str	r2, [sp, #12]
    3912:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3916:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    391a:	e7dc      	b.n	38d6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    391c:	9b03      	ldr	r3, [sp, #12]
    391e:	1d1a      	adds	r2, r3, #4
    3920:	9203      	str	r2, [sp, #12]
    3922:	681a      	ldr	r2, [r3, #0]
    3924:	17d3      	asrs	r3, r2, #31
				value->sint =
    3926:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    392a:	e7d4      	b.n	38d6 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    392c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3930:	9306      	str	r3, [sp, #24]
    3932:	2300      	movs	r3, #0
    3934:	9307      	str	r3, [sp, #28]
    3936:	e6ef      	b.n	3718 <cbvprintf+0x410>
			switch (length_mod) {
    3938:	1ecb      	subs	r3, r1, #3
    393a:	2b04      	cmp	r3, #4
    393c:	d804      	bhi.n	3948 <cbvprintf+0x640>
    393e:	e8df f003 	tbb	[pc, r3]
    3942:	1f0b      	.short	0x1f0b
    3944:	4135      	.short	0x4135
    3946:	41          	.byte	0x41
    3947:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	1d1a      	adds	r2, r3, #4
    394c:	9203      	str	r2, [sp, #12]
    394e:	681b      	ldr	r3, [r3, #0]
    3950:	9306      	str	r3, [sp, #24]
    3952:	2300      	movs	r3, #0
    3954:	9307      	str	r3, [sp, #28]
				break;
    3956:	e01e      	b.n	3996 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    3958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    395c:	2b63      	cmp	r3, #99	; 0x63
    395e:	d007      	beq.n	3970 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    3960:	9b03      	ldr	r3, [sp, #12]
    3962:	1d1a      	adds	r2, r3, #4
    3964:	9203      	str	r2, [sp, #12]
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	9306      	str	r3, [sp, #24]
    396a:	2300      	movs	r3, #0
    396c:	9307      	str	r3, [sp, #28]
    396e:	e012      	b.n	3996 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    3970:	9b03      	ldr	r3, [sp, #12]
    3972:	1d1a      	adds	r2, r3, #4
    3974:	9203      	str	r2, [sp, #12]
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	9306      	str	r3, [sp, #24]
    397a:	2300      	movs	r3, #0
    397c:	9307      	str	r3, [sp, #28]
    397e:	e00a      	b.n	3996 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    3980:	9b03      	ldr	r3, [sp, #12]
    3982:	3307      	adds	r3, #7
    3984:	f023 0307 	bic.w	r3, r3, #7
    3988:	f103 0208 	add.w	r2, r3, #8
    398c:	9203      	str	r2, [sp, #12]
    398e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    3992:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3996:	2901      	cmp	r1, #1
    3998:	d01c      	beq.n	39d4 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    399a:	2902      	cmp	r1, #2
    399c:	f47f aebc 	bne.w	3718 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    39a0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    39a4:	9306      	str	r3, [sp, #24]
    39a6:	2300      	movs	r3, #0
    39a8:	9307      	str	r3, [sp, #28]
    39aa:	e6b5      	b.n	3718 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    39ac:	9b03      	ldr	r3, [sp, #12]
    39ae:	3307      	adds	r3, #7
    39b0:	f023 0307 	bic.w	r3, r3, #7
    39b4:	f103 0208 	add.w	r2, r3, #8
    39b8:	9203      	str	r2, [sp, #12]
    39ba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    39be:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    39c2:	e7e8      	b.n	3996 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    39c4:	9b03      	ldr	r3, [sp, #12]
    39c6:	1d1a      	adds	r2, r3, #4
    39c8:	9203      	str	r2, [sp, #12]
    39ca:	681b      	ldr	r3, [r3, #0]
				value->uint =
    39cc:	9306      	str	r3, [sp, #24]
    39ce:	2300      	movs	r3, #0
    39d0:	9307      	str	r3, [sp, #28]
				break;
    39d2:	e7e0      	b.n	3996 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    39d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    39d8:	9306      	str	r3, [sp, #24]
    39da:	2300      	movs	r3, #0
    39dc:	9307      	str	r3, [sp, #28]
    39de:	e69b      	b.n	3718 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    39e0:	2908      	cmp	r1, #8
    39e2:	d00b      	beq.n	39fc <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    39e4:	9b03      	ldr	r3, [sp, #12]
    39e6:	3307      	adds	r3, #7
    39e8:	f023 0307 	bic.w	r3, r3, #7
    39ec:	f103 0208 	add.w	r2, r3, #8
    39f0:	9203      	str	r2, [sp, #12]
    39f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    39fa:	e68d      	b.n	3718 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	3307      	adds	r3, #7
    3a00:	f023 0307 	bic.w	r3, r3, #7
    3a04:	f103 0208 	add.w	r2, r3, #8
    3a08:	9203      	str	r2, [sp, #12]
    3a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a12:	e681      	b.n	3718 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3a14:	9b03      	ldr	r3, [sp, #12]
    3a16:	1d1a      	adds	r2, r3, #4
    3a18:	9203      	str	r2, [sp, #12]
    3a1a:	681b      	ldr	r3, [r3, #0]
    3a1c:	9306      	str	r3, [sp, #24]
    3a1e:	e67b      	b.n	3718 <cbvprintf+0x410>
			OUTS(sp, fp);
    3a20:	4643      	mov	r3, r8
    3a22:	4652      	mov	r2, sl
    3a24:	4629      	mov	r1, r5
    3a26:	4630      	mov	r0, r6
    3a28:	f010 fd5e 	bl	144e8 <outs>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	f2c0 814f 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3a32:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3a34:	46c2      	mov	sl, r8
			continue;
    3a36:	e46f      	b.n	3318 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3a38:	4629      	mov	r1, r5
    3a3a:	2025      	movs	r0, #37	; 0x25
    3a3c:	47b0      	blx	r6
    3a3e:	2800      	cmp	r0, #0
    3a40:	f2c0 8146 	blt.w	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3a44:	3401      	adds	r4, #1
		char sign = 0;
    3a46:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3a4a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3a4e:	f04f 0a00 	mov.w	sl, #0
			break;
    3a52:	e0a7      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 's': {
			bps = (const char *)value->ptr;
    3a54:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    3a58:	f1bb 0f00 	cmp.w	fp, #0
    3a5c:	db08      	blt.n	3a70 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    3a5e:	4659      	mov	r1, fp
    3a60:	4650      	mov	r0, sl
    3a62:	f015 f9d7 	bl	18e14 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    3a66:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    3a6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    3a6e:	e099      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
				len = strlen(bps);
    3a70:	4650      	mov	r0, sl
    3a72:	f7fd fd2f 	bl	14d4 <strlen>
    3a76:	e7f6      	b.n	3a66 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3a78:	9b06      	ldr	r3, [sp, #24]
    3a7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    3a7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    3a82:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    3a86:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    3a8a:	e08b      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    3a8c:	f019 0f08 	tst.w	r9, #8
    3a90:	d105      	bne.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
				sign = '+';
			} else if (conv->flag_space) {
    3a92:	f019 0910 	ands.w	r9, r9, #16
    3a96:	d004      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
				sign = ' ';
    3a98:	f04f 0920 	mov.w	r9, #32
    3a9c:	e001      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
				sign = '+';
    3a9e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	f173 0100 	sbcs.w	r1, r3, #0
    3aac:	db02      	blt.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3aae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3ab2:	e009      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
				value->uint = (uint_value_type)-sint;
    3ab4:	4252      	negs	r2, r2
    3ab6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    3abe:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3ac2:	e001      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
		switch (conv->specifier) {
    3ac4:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3ac8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3acc:	9300      	str	r3, [sp, #0]
    3ace:	ab0c      	add	r3, sp, #48	; 0x30
    3ad0:	aa08      	add	r2, sp, #32
    3ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3ad6:	f7ff fba7 	bl	3228 <encode_uint>
    3ada:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3adc:	f1bb 0f00 	cmp.w	fp, #0
    3ae0:	f2c0 8090 	blt.w	3c04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16c>
				size_t len = bpe - bps;
    3ae4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3ae8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3aec:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3af0:	f36f 1286 	bfc	r2, #6, #1
    3af4:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3af8:	459b      	cmp	fp, r3
    3afa:	f240 8086 	bls.w	3c0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x172>
					conv->pad0_value = precision - (int)len;
    3afe:	ebab 0303 	sub.w	r3, fp, r3
    3b02:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3b04:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b08:	e04c      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3b0a:	9806      	ldr	r0, [sp, #24]
    3b0c:	b930      	cbnz	r0, 3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		char sign = 0;
    3b0e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3b12:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3cd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x240>
			bps = "(nil)";
    3b16:	f1ab 0a05 	sub.w	sl, fp, #5
    3b1a:	e043      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3b1c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3b20:	9300      	str	r3, [sp, #0]
    3b22:	ab0c      	add	r3, sp, #48	; 0x30
    3b24:	aa08      	add	r2, sp, #32
    3b26:	2100      	movs	r1, #0
    3b28:	f7ff fb7e 	bl	3228 <encode_uint>
    3b2c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3b2e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3b32:	f043 0310 	orr.w	r3, r3, #16
    3b36:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3b3a:	2378      	movs	r3, #120	; 0x78
    3b3c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3b40:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3b44:	e7ca      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3b46:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3b48:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3b4c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3b50:	2b07      	cmp	r3, #7
    3b52:	d806      	bhi.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3b54:	e8df f003 	tbb	[pc, r3]
    3b58:	100e0c04 	.word	0x100e0c04
    3b5c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3b60:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3b62:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3b66:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3b6a:	f04f 0a00 	mov.w	sl, #0
}
    3b6e:	e019      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		*(signed char *)dp = (signed char)count;
    3b70:	7014      	strb	r4, [r2, #0]
		break;
    3b72:	e7f6      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(short *)dp = (short)count;
    3b74:	8014      	strh	r4, [r2, #0]
		break;
    3b76:	e7f4      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(long *)dp = (long)count;
    3b78:	6014      	str	r4, [r2, #0]
		break;
    3b7a:	e7f2      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(long long *)dp = (long long)count;
    3b7c:	4620      	mov	r0, r4
    3b7e:	17e1      	asrs	r1, r4, #31
    3b80:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b84:	e7ed      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(intmax_t *)dp = (intmax_t)count;
    3b86:	4620      	mov	r0, r4
    3b88:	17e1      	asrs	r1, r4, #31
    3b8a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3b8e:	e7e8      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(size_t *)dp = (size_t)count;
    3b90:	6014      	str	r4, [r2, #0]
		break;
    3b92:	e7e6      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3b94:	6014      	str	r4, [r2, #0]
		break;
    3b96:	e7e4      	b.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
		switch (conv->specifier) {
    3b98:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3b9c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3ba0:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3ba4:	f1ba 0f00 	cmp.w	sl, #0
    3ba8:	f000 808e 	beq.w	3cc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x230>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3bac:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3bb0:	f1b9 0f00 	cmp.w	r9, #0
    3bb4:	d000      	beq.n	3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>
			nj_len += 1U;
    3bb6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3bb8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3bbc:	f011 0f10 	tst.w	r1, #16
    3bc0:	d026      	beq.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
			nj_len += 2U;
    3bc2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bc6:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3bc8:	f011 0f40 	tst.w	r1, #64	; 0x40
    3bcc:	d001      	beq.n	3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
			nj_len += conv->pad0_pre_exp;
    3bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bd0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3bd2:	2f00      	cmp	r7, #0
    3bd4:	dd32      	ble.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
			width -= (int)nj_len;
    3bd6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3bd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3bdc:	f013 0f04 	tst.w	r3, #4
    3be0:	d12c      	bne.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3be2:	f013 0f40 	tst.w	r3, #64	; 0x40
    3be6:	d018      	beq.n	3c1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x182>
					if (sign != 0) {
    3be8:	f1b9 0f00 	cmp.w	r9, #0
    3bec:	d018      	beq.n	3c20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x188>
						OUTC(sign);
    3bee:	4629      	mov	r1, r5
    3bf0:	4648      	mov	r0, r9
    3bf2:	47b0      	blx	r6
    3bf4:	2800      	cmp	r0, #0
    3bf6:	db6b      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3bf8:	3401      	adds	r4, #1
						sign = 0;
    3bfa:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3bfe:	2330      	movs	r3, #48	; 0x30
    3c00:	9302      	str	r3, [sp, #8]
    3c02:	e00f      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
		const char *bpe = buf + sizeof(buf);
    3c04:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c08:	e7cc      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
    3c0a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3c0e:	e7c9      	b.n	3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>
		} else if (conv->altform_0) {
    3c10:	f011 0f08 	tst.w	r1, #8
    3c14:	d0d6      	beq.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
			nj_len += 1U;
    3c16:	3201      	adds	r2, #1
    3c18:	e7d4      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
				char pad = ' ';
    3c1a:	2320      	movs	r3, #32
    3c1c:	9302      	str	r3, [sp, #8]
    3c1e:	e001      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
					pad = '0';
    3c20:	2330      	movs	r3, #48	; 0x30
    3c22:	9302      	str	r3, [sp, #8]
    3c24:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3c26:	1e5f      	subs	r7, r3, #1
    3c28:	2b00      	cmp	r3, #0
    3c2a:	dd07      	ble.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
					OUTC(pad);
    3c2c:	4629      	mov	r1, r5
    3c2e:	9802      	ldr	r0, [sp, #8]
    3c30:	47b0      	blx	r6
    3c32:	2800      	cmp	r0, #0
    3c34:	db4c      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c36:	3401      	adds	r4, #1
				while (width-- > 0) {
    3c38:	463b      	mov	r3, r7
    3c3a:	e7f4      	b.n	3c26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3c3c:	f1b9 0f00 	cmp.w	r9, #0
    3c40:	d005      	beq.n	3c4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b6>
			OUTC(sign);
    3c42:	4629      	mov	r1, r5
    3c44:	4648      	mov	r0, r9
    3c46:	47b0      	blx	r6
    3c48:	2800      	cmp	r0, #0
    3c4a:	db41      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c4c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3c4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c52:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3c56:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3c5a:	4313      	orrs	r3, r2
    3c5c:	d005      	beq.n	3c6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d2>
				OUTC('0');
    3c5e:	4629      	mov	r1, r5
    3c60:	2030      	movs	r0, #48	; 0x30
    3c62:	47b0      	blx	r6
    3c64:	2800      	cmp	r0, #0
    3c66:	db33      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c68:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3c6a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3c6e:	f013 0f10 	tst.w	r3, #16
    3c72:	d006      	beq.n	3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
				OUTC(conv->specifier);
    3c74:	4629      	mov	r1, r5
    3c76:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3c7a:	47b0      	blx	r6
    3c7c:	2800      	cmp	r0, #0
    3c7e:	db27      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c80:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3c84:	f103 39ff 	add.w	r9, r3, #4294967295
    3c88:	2b00      	cmp	r3, #0
    3c8a:	dd07      	ble.n	3c9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x204>
				OUTC('0');
    3c8c:	4629      	mov	r1, r5
    3c8e:	2030      	movs	r0, #48	; 0x30
    3c90:	47b0      	blx	r6
    3c92:	2800      	cmp	r0, #0
    3c94:	db1c      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3c96:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3c98:	464b      	mov	r3, r9
    3c9a:	e7f3      	b.n	3c84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ec>
			}

			OUTS(bps, bpe);
    3c9c:	465b      	mov	r3, fp
    3c9e:	4652      	mov	r2, sl
    3ca0:	4629      	mov	r1, r5
    3ca2:	4630      	mov	r0, r6
    3ca4:	f010 fc20 	bl	144e8 <outs>
    3ca8:	2800      	cmp	r0, #0
    3caa:	db11      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3cac:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3cae:	2f00      	cmp	r7, #0
    3cb0:	dd07      	ble.n	3cc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22a>
			OUTC(' ');
    3cb2:	4629      	mov	r1, r5
    3cb4:	2020      	movs	r0, #32
    3cb6:	47b0      	blx	r6
    3cb8:	2800      	cmp	r0, #0
    3cba:	db09      	blt.n	3cd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x238>
    3cbc:	3401      	adds	r4, #1
			--width;
    3cbe:	3f01      	subs	r7, #1
    3cc0:	e7f5      	b.n	3cae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x216>
		fp = extract_conversion(conv, sp);
    3cc2:	46c2      	mov	sl, r8
    3cc4:	f7ff bb28 	b.w	3318 <cbvprintf+0x10>
    3cc8:	46c2      	mov	sl, r8
    3cca:	f7ff bb25 	b.w	3318 <cbvprintf+0x10>
		}
	}

	return count;
    3cce:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3cd0:	b013      	add	sp, #76	; 0x4c
    3cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cd6:	bf00      	nop
    3cd8:	000322e9 	.word	0x000322e9

00003cdc <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3cdc:	b508      	push	{r3, lr}
    3cde:	4604      	mov	r4, r0
    3ce0:	f04f 0220 	mov.w	r2, #32
    3ce4:	f3ef 8311 	mrs	r3, BASEPRI
    3ce8:	f382 8812 	msr	BASEPRI_MAX, r2
    3cec:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3cf0:	f011 fa05 	bl	150fe <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3cf4:	4620      	mov	r0, r4
    3cf6:	f000 fcff 	bl	46f8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3cfa:	4803      	ldr	r0, [pc, #12]	; (3d08 <sys_reboot+0x2c>)
    3cfc:	f010 f985 	bl	1400a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3d00:	f000 fa70 	bl	41e4 <arch_cpu_idle>
    3d04:	e7fc      	b.n	3d00 <sys_reboot+0x24>
    3d06:	bf00      	nop
    3d08:	000322ec 	.word	0x000322ec

00003d0c <nordicsemi_nrf53_init>:
    3d0c:	f04f 0320 	mov.w	r3, #32
    3d10:	f3ef 8011 	mrs	r0, BASEPRI
    3d14:	f383 8812 	msr	BASEPRI_MAX, r3
    3d18:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    3d1c:	4a10      	ldr	r2, [pc, #64]	; (3d60 <nordicsemi_nrf53_init+0x54>)
    3d1e:	2302      	movs	r3, #2
    3d20:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3d24:	490f      	ldr	r1, [pc, #60]	; (3d64 <nordicsemi_nrf53_init+0x58>)
    3d26:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    3d2a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3d2e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3d32:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3d36:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
    3d3a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3d3e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3d42:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    3d46:	2301      	movs	r3, #1
    3d48:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    3d4c:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    3d50:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
	__asm__ volatile(
    3d54:	f380 8811 	msr	BASEPRI, r0
    3d58:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3d5c:	2000      	movs	r0, #0
    3d5e:	4770      	bx	lr
    3d60:	50004000 	.word	0x50004000
    3d64:	50842500 	.word	0x50842500

00003d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3d68:	b170      	cbz	r0, 3d88 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    3d6a:	b508      	push	{r3, lr}
    3d6c:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    3d6e:	4b07      	ldr	r3, [pc, #28]	; (3d8c <arch_busy_wait+0x24>)
    3d70:	681b      	ldr	r3, [r3, #0]
    3d72:	4807      	ldr	r0, [pc, #28]	; (3d90 <arch_busy_wait+0x28>)
    3d74:	fba0 1303 	umull	r1, r3, r0, r3
    3d78:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    3d7a:	fb03 f002 	mul.w	r0, r3, r2
    3d7e:	4b05      	ldr	r3, [pc, #20]	; (3d94 <arch_busy_wait+0x2c>)
    3d80:	f043 0301 	orr.w	r3, r3, #1
    3d84:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3d86:	bd08      	pop	{r3, pc}
    3d88:	4770      	bx	lr
    3d8a:	bf00      	nop
    3d8c:	20000060 	.word	0x20000060
    3d90:	431bde83 	.word	0x431bde83
    3d94:	00019b30 	.word	0x00019b30

00003d98 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3d98:	b084      	sub	sp, #16
    3d9a:	ab04      	add	r3, sp, #16
    3d9c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3da0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3da4:	2b06      	cmp	r3, #6
    3da6:	d001      	beq.n	3dac <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3da8:	b004      	add	sp, #16
    3daa:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    3dac:	4b03      	ldr	r3, [pc, #12]	; (3dbc <pm_power_state_set+0x24>)
    3dae:	2201      	movs	r2, #1
    3db0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3db4:	f3bf 8f4f 	dsb	sy
        __WFE();
    3db8:	bf20      	wfe
    while (true)
    3dba:	e7fd      	b.n	3db8 <pm_power_state_set+0x20>
    3dbc:	50004000 	.word	0x50004000

00003dc0 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3dc0:	b1c1      	cbz	r1, 3df4 <tty_init+0x34>
{
    3dc2:	b508      	push	{r3, lr}
    3dc4:	4602      	mov	r2, r0
    3dc6:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3dc8:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3dca:	2300      	movs	r3, #0
    3dcc:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3dce:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3dd0:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3dd2:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3dd4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3dd6:	8793      	strh	r3, [r2, #60]	; 0x3c
    3dd8:	83d3      	strh	r3, [r2, #30]
    3dda:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3ddc:	f04f 33ff 	mov.w	r3, #4294967295
    3de0:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3de2:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3de4:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3de6:	b143      	cbz	r3, 3dfa <tty_init+0x3a>
    3de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dea:	b143      	cbz	r3, 3dfe <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3dec:	4905      	ldr	r1, [pc, #20]	; (3e04 <tty_init+0x44>)
    3dee:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3df0:	2000      	movs	r0, #0
}
    3df2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3df4:	f06f 0012 	mvn.w	r0, #18
}
    3df8:	4770      	bx	lr
	return 0;
    3dfa:	2000      	movs	r0, #0
    3dfc:	e7f9      	b.n	3df2 <tty_init+0x32>
    3dfe:	2000      	movs	r0, #0
    3e00:	e7f7      	b.n	3df2 <tty_init+0x32>
    3e02:	bf00      	nop
    3e04:	00014713 	.word	0x00014713

00003e08 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3e08:	b500      	push	{lr}
    3e0a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3e0c:	2201      	movs	r2, #1
    3e0e:	f10d 0107 	add.w	r1, sp, #7
    3e12:	4805      	ldr	r0, [pc, #20]	; (3e28 <console_getchar+0x20>)
    3e14:	f010 fcc3 	bl	1479e <tty_read>
	if (res < 0) {
    3e18:	2800      	cmp	r0, #0
    3e1a:	db01      	blt.n	3e20 <console_getchar+0x18>
		return res;
	}

	return c;
    3e1c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3e20:	b003      	add	sp, #12
    3e22:	f85d fb04 	ldr.w	pc, [sp], #4
    3e26:	bf00      	nop
    3e28:	200152fc 	.word	0x200152fc

00003e2c <console_init>:

int console_init(void)
{
    3e2c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3e2e:	4810      	ldr	r0, [pc, #64]	; (3e70 <console_init+0x44>)
    3e30:	f014 fbbc 	bl	185ac <z_device_ready>
    3e34:	b1b0      	cbz	r0, 3e64 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3e36:	490e      	ldr	r1, [pc, #56]	; (3e70 <console_init+0x44>)
    3e38:	480e      	ldr	r0, [pc, #56]	; (3e74 <console_init+0x48>)
    3e3a:	f7ff ffc1 	bl	3dc0 <tty_init>

	if (ret) {
    3e3e:	4604      	mov	r4, r0
    3e40:	b970      	cbnz	r0, 3e60 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3e42:	4b0b      	ldr	r3, [pc, #44]	; (3e70 <console_init+0x44>)
    3e44:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e48:	b17b      	cbz	r3, 3e6a <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3e4a:	4d0a      	ldr	r5, [pc, #40]	; (3e74 <console_init+0x48>)
    3e4c:	2210      	movs	r2, #16
    3e4e:	490a      	ldr	r1, [pc, #40]	; (3e78 <console_init+0x4c>)
    3e50:	4628      	mov	r0, r5
    3e52:	f010 fce5 	bl	14820 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3e56:	2210      	movs	r2, #16
    3e58:	4908      	ldr	r1, [pc, #32]	; (3e7c <console_init+0x50>)
    3e5a:	4628      	mov	r0, r5
    3e5c:	f010 fcc5 	bl	147ea <tty_set_rx_buf>

	return 0;
}
    3e60:	4620      	mov	r0, r4
    3e62:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3e64:	f06f 0412 	mvn.w	r4, #18
    3e68:	e7fa      	b.n	3e60 <console_init+0x34>
			return -ENOTSUP;
    3e6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3e6e:	e7f7      	b.n	3e60 <console_init+0x34>
    3e70:	00019738 	.word	0x00019738
    3e74:	200152fc 	.word	0x200152fc
    3e78:	20015340 	.word	0x20015340
    3e7c:	200152ec 	.word	0x200152ec

00003e80 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3e80:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3e82:	4c04      	ldr	r4, [pc, #16]	; (3e94 <__do_init_array_aux+0x14>)
    3e84:	4b04      	ldr	r3, [pc, #16]	; (3e98 <__do_init_array_aux+0x18>)
    3e86:	429c      	cmp	r4, r3
    3e88:	d203      	bcs.n	3e92 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3e8a:	f854 3b04 	ldr.w	r3, [r4], #4
    3e8e:	4798      	blx	r3
		func++) {
    3e90:	e7f8      	b.n	3e84 <__do_init_array_aux+0x4>
	}
}
    3e92:	bd10      	pop	{r4, pc}
    3e94:	000199c8 	.word	0x000199c8
    3e98:	000199c8 	.word	0x000199c8

00003e9c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3e9c:	4b06      	ldr	r3, [pc, #24]	; (3eb8 <__do_global_ctors_aux+0x1c>)
    3e9e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3ea0:	b14b      	cbz	r3, 3eb6 <__do_global_ctors_aux+0x1a>
{
    3ea2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3ea4:	1e5c      	subs	r4, r3, #1
    3ea6:	4a04      	ldr	r2, [pc, #16]	; (3eb8 <__do_global_ctors_aux+0x1c>)
    3ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3eac:	4798      	blx	r3
    3eae:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3eb0:	2c00      	cmp	r4, #0
    3eb2:	d1f7      	bne.n	3ea4 <__do_global_ctors_aux+0x8>
	}
}
    3eb4:	bd10      	pop	{r4, pc}
    3eb6:	4770      	bx	lr
    3eb8:	000199c0 	.word	0x000199c0

00003ebc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3ebc:	4b1b      	ldr	r3, [pc, #108]	; (3f2c <pm_system_resume+0x70>)
    3ebe:	681b      	ldr	r3, [r3, #0]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d132      	bne.n	3f2a <pm_system_resume+0x6e>
{
    3ec4:	b530      	push	{r4, r5, lr}
    3ec6:	b085      	sub	sp, #20
		post_ops_done = 1;
    3ec8:	4b18      	ldr	r3, [pc, #96]	; (3f2c <pm_system_resume+0x70>)
    3eca:	2201      	movs	r2, #1
    3ecc:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3ece:	4b18      	ldr	r3, [pc, #96]	; (3f30 <pm_system_resume+0x74>)
    3ed0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ed4:	ab04      	add	r3, sp, #16
    3ed6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3eda:	4b16      	ldr	r3, [pc, #88]	; (3f34 <pm_system_resume+0x78>)
    3edc:	b163      	cbz	r3, 3ef8 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3ede:	f010 fb1e 	bl	1451e <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3ee2:	f04f 0320 	mov.w	r3, #32
    3ee6:	f3ef 8511 	mrs	r5, BASEPRI
    3eea:	f383 8812 	msr	BASEPRI_MAX, r3
    3eee:	f3bf 8f6f 	isb	sy
    3ef2:	4b11      	ldr	r3, [pc, #68]	; (3f38 <pm_system_resume+0x7c>)
    3ef4:	681c      	ldr	r4, [r3, #0]
    3ef6:	e00a      	b.n	3f0e <pm_system_resume+0x52>
	__asm__ volatile(
    3ef8:	2300      	movs	r3, #0
    3efa:	f383 8811 	msr	BASEPRI, r3
    3efe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3f02:	e7ee      	b.n	3ee2 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f04:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3f06:	b10c      	cbz	r4, 3f0c <pm_system_resume+0x50>
	return node->next;
    3f08:	6823      	ldr	r3, [r4, #0]
    3f0a:	b143      	cbz	r3, 3f1e <pm_system_resume+0x62>
{
    3f0c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f0e:	b134      	cbz	r4, 3f1e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3f10:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3f12:	2b00      	cmp	r3, #0
    3f14:	d0f6      	beq.n	3f04 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3f16:	4a06      	ldr	r2, [pc, #24]	; (3f30 <pm_system_resume+0x74>)
    3f18:	7810      	ldrb	r0, [r2, #0]
    3f1a:	4798      	blx	r3
    3f1c:	e7f2      	b.n	3f04 <pm_system_resume+0x48>
	__asm__ volatile(
    3f1e:	f385 8811 	msr	BASEPRI, r5
    3f22:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3f26:	b005      	add	sp, #20
    3f28:	bd30      	pop	{r4, r5, pc}
    3f2a:	4770      	bx	lr
    3f2c:	20000004 	.word	0x20000004
    3f30:	2001535c 	.word	0x2001535c
    3f34:	0001451f 	.word	0x0001451f
    3f38:	20015354 	.word	0x20015354

00003f3c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3f3c:	b570      	push	{r4, r5, r6, lr}
    3f3e:	b088      	sub	sp, #32
    3f40:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3f42:	4c2a      	ldr	r4, [pc, #168]	; (3fec <pm_system_suspend+0xb0>)
    3f44:	466d      	mov	r5, sp
    3f46:	4601      	mov	r1, r0
    3f48:	4628      	mov	r0, r5
    3f4a:	f010 fc85 	bl	14858 <pm_policy_next_state>
    3f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3f56:	7820      	ldrb	r0, [r4, #0]
    3f58:	2800      	cmp	r0, #0
    3f5a:	d045      	beq.n	3fe8 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3f5c:	4b24      	ldr	r3, [pc, #144]	; (3ff0 <pm_system_suspend+0xb4>)
    3f5e:	2200      	movs	r2, #0
    3f60:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3f62:	f1b6 3fff 	cmp.w	r6, #4294967295
    3f66:	d10c      	bne.n	3f82 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3f68:	f00d fcee 	bl	11948 <k_sched_lock>
	__asm__ volatile(
    3f6c:	f04f 0320 	mov.w	r3, #32
    3f70:	f3ef 8511 	mrs	r5, BASEPRI
    3f74:	f383 8812 	msr	BASEPRI_MAX, r3
    3f78:	f3bf 8f6f 	isb	sy
	return list->head;
    3f7c:	4b1d      	ldr	r3, [pc, #116]	; (3ff4 <pm_system_suspend+0xb8>)
    3f7e:	681c      	ldr	r4, [r3, #0]
    3f80:	e016      	b.n	3fb0 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3f82:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3f84:	0c59      	lsrs	r1, r3, #17
    3f86:	03d8      	lsls	r0, r3, #15
    3f88:	4c1b      	ldr	r4, [pc, #108]	; (3ff8 <pm_system_suspend+0xbc>)
    3f8a:	4a1c      	ldr	r2, [pc, #112]	; (3ffc <pm_system_suspend+0xc0>)
    3f8c:	2300      	movs	r3, #0
    3f8e:	1900      	adds	r0, r0, r4
    3f90:	f04f 0400 	mov.w	r4, #0
    3f94:	eb44 0101 	adc.w	r1, r4, r1
    3f98:	f7fd f8a6 	bl	10e8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3f9c:	2101      	movs	r1, #1
    3f9e:	1a30      	subs	r0, r6, r0
    3fa0:	f014 fd1f 	bl	189e2 <z_set_timeout_expiry>
    3fa4:	e7e0      	b.n	3f68 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fa6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3fa8:	b10c      	cbz	r4, 3fae <pm_system_suspend+0x72>
	return node->next;
    3faa:	6823      	ldr	r3, [r4, #0]
    3fac:	b143      	cbz	r3, 3fc0 <pm_system_suspend+0x84>
{
    3fae:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3fb0:	b134      	cbz	r4, 3fc0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3fb2:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d0f6      	beq.n	3fa6 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3fb8:	4a0c      	ldr	r2, [pc, #48]	; (3fec <pm_system_suspend+0xb0>)
    3fba:	7810      	ldrb	r0, [r2, #0]
    3fbc:	4798      	blx	r3
    3fbe:	e7f2      	b.n	3fa6 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3fc0:	f385 8811 	msr	BASEPRI, r5
    3fc4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3fc8:	4b08      	ldr	r3, [pc, #32]	; (3fec <pm_system_suspend+0xb0>)
    3fca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3fce:	ab08      	add	r3, sp, #32
    3fd0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3fd4:	4b0a      	ldr	r3, [pc, #40]	; (4000 <CONFIG_FPROTECT_BLOCK_SIZE>)
    3fd6:	b10b      	cbz	r3, 3fdc <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3fd8:	f7ff fede 	bl	3d98 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3fdc:	f7ff ff6e 	bl	3ebc <pm_system_resume>
	k_sched_unlock();
    3fe0:	f00d feb0 	bl	11d44 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3fe4:	4b01      	ldr	r3, [pc, #4]	; (3fec <pm_system_suspend+0xb0>)
    3fe6:	7818      	ldrb	r0, [r3, #0]
}
    3fe8:	b008      	add	sp, #32
    3fea:	bd70      	pop	{r4, r5, r6, pc}
    3fec:	2001535c 	.word	0x2001535c
    3ff0:	20000004 	.word	0x20000004
    3ff4:	20015354 	.word	0x20015354
    3ff8:	000f423f 	.word	0x000f423f
    3ffc:	000f4240 	.word	0x000f4240
    4000:	00003d99 	.word	0x00003d99

00004004 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4004:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4006:	4802      	ldr	r0, [pc, #8]	; (4010 <nrf_cc3xx_platform_abort_init+0xc>)
    4008:	f00e fa08 	bl	1241c <nrf_cc3xx_platform_set_abort>
}
    400c:	bd08      	pop	{r3, pc}
    400e:	bf00      	nop
    4010:	00032318 	.word	0x00032318

00004014 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4014:	b308      	cbz	r0, 405a <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4016:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4018:	6843      	ldr	r3, [r0, #4]
    401a:	2b04      	cmp	r3, #4
    401c:	d007      	beq.n	402e <mutex_unlock_platform+0x1a>
    401e:	2b08      	cmp	r3, #8
    4020:	d012      	beq.n	4048 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4022:	b1fb      	cbz	r3, 4064 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4024:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    4026:	f00d fb7f 	bl	11728 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    402a:	2000      	movs	r0, #0
    402c:	e014      	b.n	4058 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    402e:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4030:	2200      	movs	r2, #0
    4032:	e8d3 1fef 	ldaex	r1, [r3]
    4036:	2901      	cmp	r1, #1
    4038:	d103      	bne.n	4042 <mutex_unlock_platform+0x2e>
    403a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    403e:	2800      	cmp	r0, #0
    4040:	d1f7      	bne.n	4032 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4042:	d10d      	bne.n	4060 <mutex_unlock_platform+0x4c>
    4044:	4610      	mov	r0, r2
    4046:	e007      	b.n	4058 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    4048:	6803      	ldr	r3, [r0, #0]
    404a:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    404c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    4050:	2000      	movs	r0, #0
    4052:	4a05      	ldr	r2, [pc, #20]	; (4068 <mutex_unlock_platform+0x54>)
    4054:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    4058:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    405a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    405e:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4060:	4802      	ldr	r0, [pc, #8]	; (406c <mutex_unlock_platform+0x58>)
    4062:	e7f9      	b.n	4058 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4064:	4802      	ldr	r0, [pc, #8]	; (4070 <mutex_unlock_platform+0x5c>)
    4066:	e7f7      	b.n	4058 <mutex_unlock_platform+0x44>
    4068:	50030000 	.word	0x50030000
    406c:	ffff8fe9 	.word	0xffff8fe9
    4070:	ffff8fea 	.word	0xffff8fea

00004074 <mutex_lock_platform>:
    if(mutex == NULL) {
    4074:	b370      	cbz	r0, 40d4 <mutex_lock_platform+0x60>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4076:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4078:	6843      	ldr	r3, [r0, #4]
    407a:	2b04      	cmp	r3, #4
    407c:	d004      	beq.n	4088 <mutex_lock_platform+0x14>
    407e:	2b08      	cmp	r3, #8
    4080:	d00f      	beq.n	40a2 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4082:	b9c3      	cbnz	r3, 40b6 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4084:	4815      	ldr	r0, [pc, #84]	; (40dc <mutex_lock_platform+0x68>)
    4086:	e00b      	b.n	40a0 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4088:	6803      	ldr	r3, [r0, #0]
    408a:	2201      	movs	r2, #1
    408c:	e8d3 1fef 	ldaex	r1, [r3]
    4090:	2900      	cmp	r1, #0
    4092:	d103      	bne.n	409c <mutex_lock_platform+0x28>
    4094:	e8c3 2fe0 	stlex	r0, r2, [r3]
    4098:	2800      	cmp	r0, #0
    409a:	d1f7      	bne.n	408c <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    409c:	d116      	bne.n	40cc <mutex_lock_platform+0x58>
    409e:	2000      	movs	r0, #0
}
    40a0:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    40a2:	6803      	ldr	r3, [r0, #0]
    40a4:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    40a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    40aa:	4a0d      	ldr	r2, [pc, #52]	; (40e0 <mutex_lock_platform+0x6c>)
    40ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40b0:	b973      	cbnz	r3, 40d0 <mutex_lock_platform+0x5c>
    40b2:	2000      	movs	r0, #0
    40b4:	e7f4      	b.n	40a0 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    40b6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    40b8:	f04f 32ff 	mov.w	r2, #4294967295
    40bc:	f04f 33ff 	mov.w	r3, #4294967295
    40c0:	f00d faa8 	bl	11614 <z_impl_k_mutex_lock>
        if (ret == 0) {
    40c4:	2800      	cmp	r0, #0
    40c6:	d0eb      	beq.n	40a0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    40c8:	4806      	ldr	r0, [pc, #24]	; (40e4 <mutex_lock_platform+0x70>)
    40ca:	e7e9      	b.n	40a0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40cc:	4805      	ldr	r0, [pc, #20]	; (40e4 <mutex_lock_platform+0x70>)
    40ce:	e7e7      	b.n	40a0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    40d0:	4804      	ldr	r0, [pc, #16]	; (40e4 <mutex_lock_platform+0x70>)
    40d2:	e7e5      	b.n	40a0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    40d4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    40d8:	4770      	bx	lr
    40da:	bf00      	nop
    40dc:	ffff8fea 	.word	0xffff8fea
    40e0:	50030000 	.word	0x50030000
    40e4:	ffff8fe9 	.word	0xffff8fe9

000040e8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    40e8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    40ea:	4604      	mov	r4, r0
    40ec:	b190      	cbz	r0, 4114 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    40ee:	6863      	ldr	r3, [r4, #4]
    40f0:	2b04      	cmp	r3, #4
    40f2:	d00e      	beq.n	4112 <mutex_free_platform+0x2a>
    40f4:	2b08      	cmp	r3, #8
    40f6:	d00c      	beq.n	4112 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    40f8:	b15b      	cbz	r3, 4112 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    40fa:	f013 0f02 	tst.w	r3, #2
    40fe:	d10e      	bne.n	411e <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4100:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4102:	2200      	movs	r2, #0
    4104:	601a      	str	r2, [r3, #0]
    4106:	605a      	str	r2, [r3, #4]
    4108:	609a      	str	r2, [r3, #8]
    410a:	60da      	str	r2, [r3, #12]
    410c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    410e:	2300      	movs	r3, #0
    4110:	6063      	str	r3, [r4, #4]
}
    4112:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4114:	4b05      	ldr	r3, [pc, #20]	; (412c <mutex_free_platform+0x44>)
    4116:	685b      	ldr	r3, [r3, #4]
    4118:	4805      	ldr	r0, [pc, #20]	; (4130 <mutex_free_platform+0x48>)
    411a:	4798      	blx	r3
    411c:	e7e7      	b.n	40ee <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    411e:	4621      	mov	r1, r4
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <mutex_free_platform+0x4c>)
    4122:	f014 fa90 	bl	18646 <k_mem_slab_free>
        mutex->mutex = NULL;
    4126:	2300      	movs	r3, #0
    4128:	6023      	str	r3, [r4, #0]
    412a:	e7f0      	b.n	410e <mutex_free_platform+0x26>
    412c:	2000006c 	.word	0x2000006c
    4130:	00032320 	.word	0x00032320
    4134:	20015368 	.word	0x20015368

00004138 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4138:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    413a:	4604      	mov	r4, r0
    413c:	b178      	cbz	r0, 415e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    413e:	6863      	ldr	r3, [r4, #4]
    4140:	2b04      	cmp	r3, #4
    4142:	d00b      	beq.n	415c <mutex_init_platform+0x24>
    4144:	2b08      	cmp	r3, #8
    4146:	d009      	beq.n	415c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4148:	b90b      	cbnz	r3, 414e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    414a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    414c:	b163      	cbz	r3, 4168 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    414e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4150:	f014 faee 	bl	18730 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4154:	6863      	ldr	r3, [r4, #4]
    4156:	f043 0301 	orr.w	r3, r3, #1
    415a:	6063      	str	r3, [r4, #4]
}
    415c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    415e:	4b10      	ldr	r3, [pc, #64]	; (41a0 <mutex_init_platform+0x68>)
    4160:	685b      	ldr	r3, [r3, #4]
    4162:	4810      	ldr	r0, [pc, #64]	; (41a4 <mutex_init_platform+0x6c>)
    4164:	4798      	blx	r3
    4166:	e7ea      	b.n	413e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4168:	f04f 32ff 	mov.w	r2, #4294967295
    416c:	f04f 33ff 	mov.w	r3, #4294967295
    4170:	4621      	mov	r1, r4
    4172:	480d      	ldr	r0, [pc, #52]	; (41a8 <mutex_init_platform+0x70>)
    4174:	f00d f926 	bl	113c4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4178:	b908      	cbnz	r0, 417e <mutex_init_platform+0x46>
    417a:	6823      	ldr	r3, [r4, #0]
    417c:	b91b      	cbnz	r3, 4186 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <mutex_init_platform+0x68>)
    4180:	685b      	ldr	r3, [r3, #4]
    4182:	480a      	ldr	r0, [pc, #40]	; (41ac <mutex_init_platform+0x74>)
    4184:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4186:	6823      	ldr	r3, [r4, #0]
    4188:	2200      	movs	r2, #0
    418a:	601a      	str	r2, [r3, #0]
    418c:	605a      	str	r2, [r3, #4]
    418e:	609a      	str	r2, [r3, #8]
    4190:	60da      	str	r2, [r3, #12]
    4192:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4194:	6863      	ldr	r3, [r4, #4]
    4196:	f043 0302 	orr.w	r3, r3, #2
    419a:	6063      	str	r3, [r4, #4]
    419c:	e7d7      	b.n	414e <mutex_init_platform+0x16>
    419e:	bf00      	nop
    41a0:	2000006c 	.word	0x2000006c
    41a4:	00032320 	.word	0x00032320
    41a8:	20015368 	.word	0x20015368
    41ac:	00032348 	.word	0x00032348

000041b0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    41b0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    41b2:	2340      	movs	r3, #64	; 0x40
    41b4:	2214      	movs	r2, #20
    41b6:	4904      	ldr	r1, [pc, #16]	; (41c8 <nrf_cc3xx_platform_mutex_init+0x18>)
    41b8:	4804      	ldr	r0, [pc, #16]	; (41cc <nrf_cc3xx_platform_mutex_init+0x1c>)
    41ba:	f014 fa35 	bl	18628 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    41be:	4904      	ldr	r1, [pc, #16]	; (41d0 <nrf_cc3xx_platform_mutex_init+0x20>)
    41c0:	4804      	ldr	r0, [pc, #16]	; (41d4 <nrf_cc3xx_platform_mutex_init+0x24>)
    41c2:	f00e f989 	bl	124d8 <nrf_cc3xx_platform_set_mutexes>
}
    41c6:	bd08      	pop	{r3, pc}
    41c8:	20015388 	.word	0x20015388
    41cc:	20015368 	.word	0x20015368
    41d0:	00032388 	.word	0x00032388
    41d4:	00032378 	.word	0x00032378

000041d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    41d8:	4901      	ldr	r1, [pc, #4]	; (41e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    41da:	2210      	movs	r2, #16
	str	r2, [r1]
    41dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    41de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    41e0:	e000ed10 	.word	0xe000ed10

000041e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    41e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    41e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    41e8:	f380 8811 	msr	BASEPRI, r0
	isb
    41ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    41f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    41f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    41f6:	b662      	cpsie	i
	isb
    41f8:	f3bf 8f6f 	isb	sy

	bx	lr
    41fc:	4770      	bx	lr
    41fe:	bf00      	nop

00004200 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4200:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4202:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4204:	f381 8811 	msr	BASEPRI, r1

	wfe
    4208:	bf20      	wfe

	msr	BASEPRI, r0
    420a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    420e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4210:	4770      	bx	lr
    4212:	bf00      	nop

00004214 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4214:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4216:	2b00      	cmp	r3, #0
    4218:	db08      	blt.n	422c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    421a:	f000 001f 	and.w	r0, r0, #31
    421e:	095b      	lsrs	r3, r3, #5
    4220:	2201      	movs	r2, #1
    4222:	fa02 f000 	lsl.w	r0, r2, r0
    4226:	4a02      	ldr	r2, [pc, #8]	; (4230 <arch_irq_enable+0x1c>)
    4228:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    422c:	4770      	bx	lr
    422e:	bf00      	nop
    4230:	e000e100 	.word	0xe000e100

00004234 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4234:	0942      	lsrs	r2, r0, #5
    4236:	4b05      	ldr	r3, [pc, #20]	; (424c <arch_irq_is_enabled+0x18>)
    4238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    423c:	f000 001f 	and.w	r0, r0, #31
    4240:	2301      	movs	r3, #1
    4242:	fa03 f000 	lsl.w	r0, r3, r0
}
    4246:	4010      	ands	r0, r2
    4248:	4770      	bx	lr
    424a:	bf00      	nop
    424c:	e000e100 	.word	0xe000e100

00004250 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4250:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4252:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4254:	2b00      	cmp	r3, #0
    4256:	db08      	blt.n	426a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4258:	0149      	lsls	r1, r1, #5
    425a:	b2c9      	uxtb	r1, r1
    425c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4260:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4264:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4268:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    426a:	f000 000f 	and.w	r0, r0, #15
    426e:	0149      	lsls	r1, r1, #5
    4270:	b2c9      	uxtb	r1, r1
    4272:	4b01      	ldr	r3, [pc, #4]	; (4278 <z_arm_irq_priority_set+0x28>)
    4274:	5419      	strb	r1, [r3, r0]
}
    4276:	4770      	bx	lr
    4278:	e000ed14 	.word	0xe000ed14

0000427c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    427c:	bf30      	wfi
    b z_SysNmiOnReset
    427e:	f7ff bffd 	b.w	427c <z_SysNmiOnReset>
    4282:	bf00      	nop

00004284 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4284:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4286:	4b0b      	ldr	r3, [pc, #44]	; (42b4 <z_arm_prep_c+0x30>)
    4288:	4a0b      	ldr	r2, [pc, #44]	; (42b8 <z_arm_prep_c+0x34>)
    428a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    428e:	609a      	str	r2, [r3, #8]
    4290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4294:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    429c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    42a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    42a4:	f00d f82e 	bl	11304 <z_bss_zero>
	z_data_copy();
    42a8:	f00d febc 	bl	12024 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    42ac:	f000 f9da 	bl	4664 <z_arm_interrupt_init>
	z_cstart();
    42b0:	f00d f834 	bl	1131c <z_cstart>
    42b4:	e000ed00 	.word	0xe000ed00
    42b8:	00000000 	.word	0x00000000

000042bc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    42bc:	4a0a      	ldr	r2, [pc, #40]	; (42e8 <arch_swap+0x2c>)
    42be:	6893      	ldr	r3, [r2, #8]
    42c0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    42c4:	4909      	ldr	r1, [pc, #36]	; (42ec <arch_swap+0x30>)
    42c6:	6809      	ldr	r1, [r1, #0]
    42c8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    42cc:	4908      	ldr	r1, [pc, #32]	; (42f0 <arch_swap+0x34>)
    42ce:	684b      	ldr	r3, [r1, #4]
    42d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    42d4:	604b      	str	r3, [r1, #4]
    42d6:	2300      	movs	r3, #0
    42d8:	f383 8811 	msr	BASEPRI, r3
    42dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    42e0:	6893      	ldr	r3, [r2, #8]
}
    42e2:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    42e6:	4770      	bx	lr
    42e8:	20015a3c 	.word	0x20015a3c
    42ec:	00035040 	.word	0x00035040
    42f0:	e000ed00 	.word	0xe000ed00

000042f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    42f4:	4914      	ldr	r1, [pc, #80]	; (4348 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    42f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    42f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    42fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    42fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4302:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4306:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4308:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    430c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4310:	4f0e      	ldr	r7, [pc, #56]	; (434c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4312:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4316:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4318:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    431a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    431c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4320:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4322:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4326:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    432a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    432e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4332:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    4336:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    433a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    433c:	f010 faab 	bl	14896 <configure_builtin_stack_guard>
    pop {r2, lr}
    4340:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4344:	4770      	bx	lr
    4346:	0000      	.short	0x0000
    ldr r1, =_kernel
    4348:	20015a3c 	.word	0x20015a3c
    ldr v4, =_SCS_ICSR
    434c:	e000ed04 	.word	0xe000ed04

00004350 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4350:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4354:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4356:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    435a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    435e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4360:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4364:	2902      	cmp	r1, #2
    beq _oops
    4366:	d0ff      	beq.n	4368 <_oops>

00004368 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4368:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    436a:	f010 fa82 	bl	14872 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    436e:	bd01      	pop	{r0, pc}

00004370 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4370:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4372:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4376:	490d      	ldr	r1, [pc, #52]	; (43ac <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4378:	f021 0101 	bic.w	r1, r1, #1
    437c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4380:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4384:	9b01      	ldr	r3, [sp, #4]
    4386:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    438a:	9b02      	ldr	r3, [sp, #8]
    438c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4390:	9b03      	ldr	r3, [sp, #12]
    4392:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    439a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    439e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    43a0:	2300      	movs	r3, #0
    43a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    43a6:	bc10      	pop	{r4}
    43a8:	4770      	bx	lr
    43aa:	bf00      	nop
    43ac:	000142e9 	.word	0x000142e9

000043b0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    43b0:	4b09      	ldr	r3, [pc, #36]	; (43d8 <arch_switch_to_main_thread+0x28>)
    43b2:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    43b4:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    43b8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    43bc:	4610      	mov	r0, r2
    43be:	f381 8809 	msr	PSP, r1
    43c2:	2100      	movs	r1, #0
    43c4:	b663      	cpsie	if
    43c6:	f381 8811 	msr	BASEPRI, r1
    43ca:	f3bf 8f6f 	isb	sy
    43ce:	2200      	movs	r2, #0
    43d0:	2300      	movs	r3, #0
    43d2:	f00f ff89 	bl	142e8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    43d6:	bf00      	nop
    43d8:	20015a3c 	.word	0x20015a3c

000043dc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    43dc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    43de:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    43e0:	4a0b      	ldr	r2, [pc, #44]	; (4410 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    43e2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    43e4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    43e6:	bf1e      	ittt	ne
	movne	r1, #0
    43e8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    43ea:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    43ec:	f014 f978 	blne	186e0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    43f0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    43f2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    43f6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    43fa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    43fe:	4905      	ldr	r1, [pc, #20]	; (4414 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4400:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4402:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4404:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4406:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    440a:	4903      	ldr	r1, [pc, #12]	; (4418 <_isr_wrapper+0x3c>)
	bx r1
    440c:	4708      	bx	r1
    440e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4410:	20015a3c 	.word	0x20015a3c
	ldr r1, =_sw_isr_table
    4414:	00019798 	.word	0x00019798
	ldr r1, =z_arm_int_exit
    4418:	0000441d 	.word	0x0000441d

0000441c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    441c:	4b04      	ldr	r3, [pc, #16]	; (4430 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    441e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4420:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4422:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4424:	d003      	beq.n	442e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4426:	4903      	ldr	r1, [pc, #12]	; (4434 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    442c:	600a      	str	r2, [r1, #0]

0000442e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    442e:	4770      	bx	lr
	ldr r3, =_kernel
    4430:	20015a3c 	.word	0x20015a3c
	ldr r1, =_SCS_ICSR
    4434:	e000ed04 	.word	0xe000ed04

00004438 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4438:	b510      	push	{r4, lr}
    443a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    443c:	4b13      	ldr	r3, [pc, #76]	; (448c <mem_manage_fault+0x54>)
    443e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4444:	f013 0f02 	tst.w	r3, #2
    4448:	d00b      	beq.n	4462 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    444a:	4b10      	ldr	r3, [pc, #64]	; (448c <mem_manage_fault+0x54>)
    444c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4450:	f013 0f80 	tst.w	r3, #128	; 0x80
    4454:	d005      	beq.n	4462 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    4456:	b121      	cbz	r1, 4462 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4458:	4a0c      	ldr	r2, [pc, #48]	; (448c <mem_manage_fault+0x54>)
    445a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    445c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4460:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4462:	4b0a      	ldr	r3, [pc, #40]	; (448c <mem_manage_fault+0x54>)
    4464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    446a:	f013 0f10 	tst.w	r3, #16
    446e:	d101      	bne.n	4474 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4470:	4b06      	ldr	r3, [pc, #24]	; (448c <mem_manage_fault+0x54>)
    4472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4474:	4a05      	ldr	r2, [pc, #20]	; (448c <mem_manage_fault+0x54>)
    4476:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4478:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    447c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    447e:	2101      	movs	r1, #1
    4480:	f010 fa15 	bl	148ae <memory_fault_recoverable>
    4484:	7020      	strb	r0, [r4, #0]

	return reason;
}
    4486:	2000      	movs	r0, #0
    4488:	bd10      	pop	{r4, pc}
    448a:	bf00      	nop
    448c:	e000ed00 	.word	0xe000ed00

00004490 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4490:	b510      	push	{r4, lr}
    4492:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4494:	4b12      	ldr	r3, [pc, #72]	; (44e0 <bus_fault+0x50>)
    4496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    449c:	f413 7f00 	tst.w	r3, #512	; 0x200
    44a0:	d00b      	beq.n	44ba <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    44a2:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <bus_fault+0x50>)
    44a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    44a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    44ac:	d005      	beq.n	44ba <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    44ae:	b121      	cbz	r1, 44ba <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    44b0:	4a0b      	ldr	r2, [pc, #44]	; (44e0 <bus_fault+0x50>)
    44b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    44b8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    44ba:	4b09      	ldr	r3, [pc, #36]	; (44e0 <bus_fault+0x50>)
    44bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    44be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44c0:	f413 7f80 	tst.w	r3, #256	; 0x100
    44c4:	d101      	bne.n	44ca <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    44c6:	4b06      	ldr	r3, [pc, #24]	; (44e0 <bus_fault+0x50>)
    44c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    44ca:	4a05      	ldr	r2, [pc, #20]	; (44e0 <bus_fault+0x50>)
    44cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    44d2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    44d4:	2101      	movs	r1, #1
    44d6:	f010 f9ea 	bl	148ae <memory_fault_recoverable>
    44da:	7020      	strb	r0, [r4, #0]

	return reason;
}
    44dc:	2000      	movs	r0, #0
    44de:	bd10      	pop	{r4, pc}
    44e0:	e000ed00 	.word	0xe000ed00

000044e4 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    44e4:	4b0a      	ldr	r3, [pc, #40]	; (4510 <usage_fault+0x2c>)
    44e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    44e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    44ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
    44ec:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    44f0:	d10b      	bne.n	450a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    44f2:	4b07      	ldr	r3, [pc, #28]	; (4510 <usage_fault+0x2c>)
    44f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    44f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    44f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    44fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    44fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    44fe:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4502:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4506:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4508:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    450a:	2002      	movs	r0, #2
    450c:	e7f1      	b.n	44f2 <usage_fault+0xe>
    450e:	bf00      	nop
    4510:	e000ed00 	.word	0xe000ed00

00004514 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4514:	b510      	push	{r4, lr}
    4516:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4518:	2300      	movs	r3, #0
    451a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    451c:	4b1b      	ldr	r3, [pc, #108]	; (458c <hard_fault+0x78>)
    451e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4520:	f010 0002 	ands.w	r0, r0, #2
    4524:	d12d      	bne.n	4582 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4528:	2b00      	cmp	r3, #0
    452a:	db2b      	blt.n	4584 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    452c:	4b17      	ldr	r3, [pc, #92]	; (458c <hard_fault+0x78>)
    452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4530:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4534:	d027      	beq.n	4586 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4536:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4538:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    453c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4540:	429a      	cmp	r2, r3
    4542:	d010      	beq.n	4566 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4544:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4548:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b963      	cbnz	r3, 456a <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    4550:	4b0f      	ldr	r3, [pc, #60]	; (4590 <hard_fault+0x7c>)
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	b97b      	cbnz	r3, 4576 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    4556:	4b0f      	ldr	r3, [pc, #60]	; (4594 <hard_fault+0x80>)
    4558:	881b      	ldrh	r3, [r3, #0]
    455a:	b29b      	uxth	r3, r3
    455c:	b193      	cbz	r3, 4584 <hard_fault+0x70>
			reason = usage_fault(esf);
    455e:	4620      	mov	r0, r4
    4560:	f7ff ffc0 	bl	44e4 <usage_fault>
    4564:	e00e      	b.n	4584 <hard_fault+0x70>
			reason = esf->basic.r0;
    4566:	6820      	ldr	r0, [r4, #0]
    4568:	e00c      	b.n	4584 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    456a:	460a      	mov	r2, r1
    456c:	2101      	movs	r1, #1
    456e:	4620      	mov	r0, r4
    4570:	f7ff ff62 	bl	4438 <mem_manage_fault>
    4574:	e006      	b.n	4584 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    4576:	460a      	mov	r2, r1
    4578:	2101      	movs	r1, #1
    457a:	4620      	mov	r0, r4
    457c:	f7ff ff88 	bl	4490 <bus_fault>
    4580:	e000      	b.n	4584 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4582:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4584:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4586:	4618      	mov	r0, r3
	return reason;
    4588:	e7fc      	b.n	4584 <hard_fault+0x70>
    458a:	bf00      	nop
    458c:	e000ed00 	.word	0xe000ed00
    4590:	e000ed29 	.word	0xe000ed29
    4594:	e000ed2a 	.word	0xe000ed2a

00004598 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4598:	b5f0      	push	{r4, r5, r6, r7, lr}
    459a:	b08b      	sub	sp, #44	; 0x2c
    459c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    459e:	4b25      	ldr	r3, [pc, #148]	; (4634 <z_arm_fault+0x9c>)
    45a0:	6859      	ldr	r1, [r3, #4]
    45a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    45a6:	2300      	movs	r3, #0
    45a8:	f383 8811 	msr	BASEPRI, r3
    45ac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    45b0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    45b4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    45b8:	d115      	bne.n	45e6 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    45ba:	f002 030c 	and.w	r3, r2, #12
    45be:	2b08      	cmp	r3, #8
    45c0:	d014      	beq.n	45ec <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    45c2:	f012 0f08 	tst.w	r2, #8
    45c6:	d00b      	beq.n	45e0 <z_arm_fault+0x48>
	*nested_exc = false;
    45c8:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    45ca:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    45ce:	4620      	mov	r0, r4
    45d0:	f010 f972 	bl	148b8 <fault_handle>
    45d4:	4606      	mov	r6, r0
	if (recoverable) {
    45d6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    45da:	b153      	cbz	r3, 45f2 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    45dc:	b00b      	add	sp, #44	; 0x2c
    45de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    45e0:	4604      	mov	r4, r0
			*nested_exc = true;
    45e2:	2701      	movs	r7, #1
    45e4:	e7f1      	b.n	45ca <z_arm_fault+0x32>
	*nested_exc = false;
    45e6:	2700      	movs	r7, #0
		return NULL;
    45e8:	463c      	mov	r4, r7
    45ea:	e7ee      	b.n	45ca <z_arm_fault+0x32>
	*nested_exc = false;
    45ec:	2700      	movs	r7, #0
		return NULL;
    45ee:	463c      	mov	r4, r7
    45f0:	e7eb      	b.n	45ca <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    45f2:	ad01      	add	r5, sp, #4
    45f4:	6820      	ldr	r0, [r4, #0]
    45f6:	6861      	ldr	r1, [r4, #4]
    45f8:	68a2      	ldr	r2, [r4, #8]
    45fa:	68e3      	ldr	r3, [r4, #12]
    45fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    45fe:	6920      	ldr	r0, [r4, #16]
    4600:	6961      	ldr	r1, [r4, #20]
    4602:	69a2      	ldr	r2, [r4, #24]
    4604:	69e3      	ldr	r3, [r4, #28]
    4606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4608:	b14f      	cbz	r7, 461e <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    460a:	9b08      	ldr	r3, [sp, #32]
    460c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4610:	b95a      	cbnz	r2, 462a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4612:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4616:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    461a:	9308      	str	r3, [sp, #32]
    461c:	e005      	b.n	462a <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    461e:	9b08      	ldr	r3, [sp, #32]
    4620:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4624:	f023 0301 	bic.w	r3, r3, #1
    4628:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    462a:	a901      	add	r1, sp, #4
    462c:	4630      	mov	r0, r6
    462e:	f010 f91c 	bl	1486a <z_arm_fatal_error>
    4632:	e7d3      	b.n	45dc <z_arm_fault+0x44>
    4634:	e000ed00 	.word	0xe000ed00

00004638 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4638:	4b04      	ldr	r3, [pc, #16]	; (464c <z_arm_fault_init+0x14>)
    463a:	695a      	ldr	r2, [r3, #20]
    463c:	f042 0210 	orr.w	r2, r2, #16
    4640:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4642:	695a      	ldr	r2, [r3, #20]
    4644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4648:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    464a:	4770      	bx	lr
    464c:	e000ed00 	.word	0xe000ed00

00004650 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4650:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4654:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4658:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    465a:	4672      	mov	r2, lr
	bl z_arm_fault
    465c:	f7ff ff9c 	bl	4598 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4660:	bd01      	pop	{r0, pc}
    4662:	bf00      	nop

00004664 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4664:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4666:	e006      	b.n	4676 <z_arm_interrupt_init+0x12>
    4668:	f002 010f 	and.w	r1, r2, #15
    466c:	4b09      	ldr	r3, [pc, #36]	; (4694 <z_arm_interrupt_init+0x30>)
    466e:	440b      	add	r3, r1
    4670:	2120      	movs	r1, #32
    4672:	7619      	strb	r1, [r3, #24]
    4674:	3201      	adds	r2, #1
    4676:	2a44      	cmp	r2, #68	; 0x44
    4678:	dc0a      	bgt.n	4690 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    467a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    467c:	2b00      	cmp	r3, #0
    467e:	dbf3      	blt.n	4668 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4680:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4684:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4688:	2120      	movs	r1, #32
    468a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    468e:	e7f1      	b.n	4674 <z_arm_interrupt_init+0x10>
	}
}
    4690:	4770      	bx	lr
    4692:	bf00      	nop
    4694:	e000ecfc 	.word	0xe000ecfc

00004698 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4698:	2000      	movs	r0, #0
    msr CONTROL, r0
    469a:	f380 8814 	msr	CONTROL, r0
    isb
    469e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    46a2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    46a4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    46a8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    46ac:	f015 f802 	bl	196b4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    46b0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    46b2:	490e      	ldr	r1, [pc, #56]	; (46ec <__start+0x54>)
    str r0, [r1]
    46b4:	6008      	str	r0, [r1, #0]
    dsb
    46b6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46ba:	480d      	ldr	r0, [pc, #52]	; (46f0 <__start+0x58>)
    msr msp, r0
    46bc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    46c0:	f000 f83c 	bl	473c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    46c4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46c6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46ca:	480a      	ldr	r0, [pc, #40]	; (46f4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    46d0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46d2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46d6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46da:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46dc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46de:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46e2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46e6:	f7ff fdcd 	bl	4284 <z_arm_prep_c>
    46ea:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    46ec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46f0:	2001dc70 	.word	0x2001dc70
    ldr r0, =z_interrupt_stacks
    46f4:	2001ddb0 	.word	0x2001ddb0

000046f8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    46f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    46fc:	4905      	ldr	r1, [pc, #20]	; (4714 <sys_arch_reboot+0x1c>)
    46fe:	68ca      	ldr	r2, [r1, #12]
    4700:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4704:	4b04      	ldr	r3, [pc, #16]	; (4718 <sys_arch_reboot+0x20>)
    4706:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4708:	60cb      	str	r3, [r1, #12]
    470a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    470e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4710:	e7fd      	b.n	470e <sys_arch_reboot+0x16>
    4712:	bf00      	nop
    4714:	e000ed00 	.word	0xe000ed00
    4718:	05fa0004 	.word	0x05fa0004

0000471c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    471c:	4b06      	ldr	r3, [pc, #24]	; (4738 <z_arm_clear_arm_mpu_config+0x1c>)
    471e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4720:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4724:	2300      	movs	r3, #0
    4726:	4283      	cmp	r3, r0
    4728:	da05      	bge.n	4736 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    472a:	4a03      	ldr	r2, [pc, #12]	; (4738 <z_arm_clear_arm_mpu_config+0x1c>)
    472c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    472e:	2100      	movs	r1, #0
    4730:	6111      	str	r1, [r2, #16]
    4732:	3301      	adds	r3, #1
    4734:	e7f7      	b.n	4726 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4736:	4770      	bx	lr
    4738:	e000ed90 	.word	0xe000ed90

0000473c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    473c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    473e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4740:	2400      	movs	r4, #0
    4742:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4746:	f7ff ffe9 	bl	471c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    474a:	4623      	mov	r3, r4
    474c:	2b0f      	cmp	r3, #15
    474e:	d809      	bhi.n	4764 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4750:	f103 0120 	add.w	r1, r3, #32
    4754:	4a0d      	ldr	r2, [pc, #52]	; (478c <z_arm_init_arch_hw_at_boot+0x50>)
    4756:	f04f 30ff 	mov.w	r0, #4294967295
    475a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    475e:	3301      	adds	r3, #1
    4760:	b2db      	uxtb	r3, r3
    4762:	e7f3      	b.n	474c <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4764:	2300      	movs	r3, #0
    4766:	2b0f      	cmp	r3, #15
    4768:	d809      	bhi.n	477e <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    476a:	f103 0160 	add.w	r1, r3, #96	; 0x60
    476e:	4a07      	ldr	r2, [pc, #28]	; (478c <z_arm_init_arch_hw_at_boot+0x50>)
    4770:	f04f 30ff 	mov.w	r0, #4294967295
    4774:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4778:	3301      	adds	r3, #1
    477a:	b2db      	uxtb	r3, r3
    477c:	e7f3      	b.n	4766 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    477e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4780:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4784:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4788:	bd10      	pop	{r4, pc}
    478a:	bf00      	nop
    478c:	e000e100 	.word	0xe000e100

00004790 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4790:	b508      	push	{r3, lr}
	if (_current == thread) {
    4792:	4b08      	ldr	r3, [pc, #32]	; (47b4 <z_impl_k_thread_abort+0x24>)
    4794:	689b      	ldr	r3, [r3, #8]
    4796:	4283      	cmp	r3, r0
    4798:	d002      	beq.n	47a0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    479a:	f00d fc1b 	bl	11fd4 <z_thread_abort>
}
    479e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    47a0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    47a4:	2b00      	cmp	r3, #0
    47a6:	d0f8      	beq.n	479a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    47a8:	4a03      	ldr	r2, [pc, #12]	; (47b8 <z_impl_k_thread_abort+0x28>)
    47aa:	6853      	ldr	r3, [r2, #4]
    47ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    47b0:	6053      	str	r3, [r2, #4]
    47b2:	e7f2      	b.n	479a <z_impl_k_thread_abort+0xa>
    47b4:	20015a3c 	.word	0x20015a3c
    47b8:	e000ed00 	.word	0xe000ed00

000047bc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    47bc:	b510      	push	{r4, lr}
    47be:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    47c0:	4c09      	ldr	r4, [pc, #36]	; (47e8 <z_arm_configure_static_mpu_regions+0x2c>)
    47c2:	4623      	mov	r3, r4
    47c4:	4a09      	ldr	r2, [pc, #36]	; (47ec <z_arm_configure_static_mpu_regions+0x30>)
    47c6:	2101      	movs	r1, #1
    47c8:	4809      	ldr	r0, [pc, #36]	; (47f0 <z_arm_configure_static_mpu_regions+0x34>)
    47ca:	f010 f8da 	bl	14982 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47ce:	2300      	movs	r3, #0
    47d0:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    47d2:	4b08      	ldr	r3, [pc, #32]	; (47f4 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47d4:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    47d6:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    47d8:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    47da:	2101      	movs	r1, #1
    47dc:	a801      	add	r0, sp, #4
    47de:	f010 f8d4 	bl	1498a <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    47e2:	b004      	add	sp, #16
    47e4:	bd10      	pop	{r4, pc}
    47e6:	bf00      	nop
    47e8:	20080000 	.word	0x20080000
    47ec:	20000000 	.word	0x20000000
    47f0:	0003239c 	.word	0x0003239c
    47f4:	20000340 	.word	0x20000340

000047f8 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    47f8:	4b01      	ldr	r3, [pc, #4]	; (4800 <mpu_init+0x8>)
    47fa:	4a02      	ldr	r2, [pc, #8]	; (4804 <mpu_init+0xc>)
    47fc:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    47fe:	4770      	bx	lr
    4800:	e000ed90 	.word	0xe000ed90
    4804:	0044ffaa 	.word	0x0044ffaa

00004808 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4808:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    480a:	680b      	ldr	r3, [r1, #0]
    480c:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    4810:	7a0c      	ldrb	r4, [r1, #8]
    4812:	f004 031f 	and.w	r3, r4, #31
    4816:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4818:	68cb      	ldr	r3, [r1, #12]
    481a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    481e:	0964      	lsrs	r4, r4, #5
    4820:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    4824:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4828:	4902      	ldr	r1, [pc, #8]	; (4834 <region_init+0x2c>)
    482a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    482c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    482e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4830:	bc10      	pop	{r4}
    4832:	4770      	bx	lr
    4834:	e000ed90 	.word	0xe000ed90

00004838 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    483c:	b087      	sub	sp, #28
    483e:	4681      	mov	r9, r0
    4840:	9100      	str	r1, [sp, #0]
    4842:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    4844:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    4846:	2700      	movs	r7, #0
    4848:	e034      	b.n	48b4 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    484a:	f06f 0615 	mvn.w	r6, #21
    484e:	e053      	b.n	48f8 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    4850:	45d8      	cmp	r8, fp
    4852:	d169      	bne.n	4928 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    4854:	4629      	mov	r1, r5
    4856:	b2f0      	uxtb	r0, r6
    4858:	f010 f878 	bl	1494c <mpu_configure_region>
    485c:	e029      	b.n	48b2 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    485e:	4b58      	ldr	r3, [pc, #352]	; (49c0 <mpu_configure_regions_and_partition+0x188>)
    4860:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    4862:	68d9      	ldr	r1, [r3, #12]
    4864:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    4868:	f022 021f 	bic.w	r2, r2, #31
    486c:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    486e:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    4870:	4629      	mov	r1, r5
    4872:	b2e0      	uxtb	r0, r4
    4874:	f010 f86a 	bl	1494c <mpu_configure_region>
    4878:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    487a:	f110 0f16 	cmn.w	r0, #22
    487e:	f000 8097 	beq.w	49b0 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    4882:	3401      	adds	r4, #1
    4884:	e015      	b.n	48b2 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    4886:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4888:	494d      	ldr	r1, [pc, #308]	; (49c0 <mpu_configure_regions_and_partition+0x188>)
    488a:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    488c:	690a      	ldr	r2, [r1, #16]
    488e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4892:	f023 031f 	bic.w	r3, r3, #31
    4896:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4898:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    489a:	4629      	mov	r1, r5
    489c:	b2e0      	uxtb	r0, r4
    489e:	f010 f855 	bl	1494c <mpu_configure_region>
    48a2:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    48a4:	f110 0f16 	cmn.w	r0, #22
    48a8:	f000 8082 	beq.w	49b0 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    48ac:	3401      	adds	r4, #1
    48ae:	e000      	b.n	48b2 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    48b0:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    48b2:	3701      	adds	r7, #1
    48b4:	9b00      	ldr	r3, [sp, #0]
    48b6:	429f      	cmp	r7, r3
    48b8:	da7a      	bge.n	49b0 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    48ba:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    48be:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    48c2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    48c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    48ca:	f1b8 0f00 	cmp.w	r8, #0
    48ce:	d0f0      	beq.n	48b2 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    48d0:	9b01      	ldr	r3, [sp, #4]
    48d2:	b123      	cbz	r3, 48de <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    48d4:	4628      	mov	r0, r5
    48d6:	f010 f81c 	bl	14912 <mpu_partition_is_valid>
		if (do_sanity_check &&
    48da:	2800      	cmp	r0, #0
    48dc:	d064      	beq.n	49a8 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    48de:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    48e2:	4658      	mov	r0, fp
    48e4:	f010 f80b 	bl	148fe <arm_cmse_mpu_region_get>
    48e8:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    48ea:	eb08 000b 	add.w	r0, r8, fp
    48ee:	3801      	subs	r0, #1
    48f0:	f010 f805 	bl	148fe <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    48f4:	4286      	cmp	r6, r0
    48f6:	d1a8      	bne.n	484a <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    48f8:	f116 0f16 	cmn.w	r6, #22
    48fc:	d057      	beq.n	49ae <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    48fe:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4900:	42b3      	cmp	r3, r6
    4902:	db59      	blt.n	49b8 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    4904:	4630      	mov	r0, r6
	MPU->RNR = index;
    4906:	4b2e      	ldr	r3, [pc, #184]	; (49c0 <mpu_configure_regions_and_partition+0x188>)
    4908:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    490a:	68d9      	ldr	r1, [r3, #12]
    490c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    4910:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4912:	691b      	ldr	r3, [r3, #16]
    4914:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4918:	f859 300a 	ldr.w	r3, [r9, sl]
    491c:	686a      	ldr	r2, [r5, #4]
    491e:	441a      	add	r2, r3
    4920:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4924:	4299      	cmp	r1, r3
    4926:	d093      	beq.n	4850 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    4928:	4299      	cmp	r1, r3
    492a:	d098      	beq.n	485e <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    492c:	45d8      	cmp	r8, fp
    492e:	d0aa      	beq.n	4886 <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    4930:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4932:	4923      	ldr	r1, [pc, #140]	; (49c0 <mpu_configure_regions_and_partition+0x188>)
    4934:	4606      	mov	r6, r0
    4936:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4938:	690a      	ldr	r2, [r1, #16]
    493a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    493e:	f023 031f 	bic.w	r3, r3, #31
    4942:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4944:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4946:	4629      	mov	r1, r5
    4948:	b2e0      	uxtb	r0, r4
    494a:	f00f ffff 	bl	1494c <mpu_configure_region>
    494e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4950:	f110 0f16 	cmn.w	r0, #22
    4954:	d02c      	beq.n	49b0 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    4956:	3001      	adds	r0, #1
	MPU->RNR = index;
    4958:	4b19      	ldr	r3, [pc, #100]	; (49c0 <mpu_configure_regions_and_partition+0x188>)
    495a:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    495c:	68d9      	ldr	r1, [r3, #12]
    495e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4962:	f361 0204 	bfi	r2, r1, #0, #5
    4966:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    496a:	691b      	ldr	r3, [r3, #16]
    496c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4970:	b2d2      	uxtb	r2, r2
    4972:	f363 1247 	bfi	r2, r3, #5, #3
    4976:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    497a:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    497e:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    4980:	4413      	add	r3, r2
    4982:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    4984:	f023 031f 	bic.w	r3, r3, #31
    4988:	eba8 080b 	sub.w	r8, r8, fp
    498c:	4443      	add	r3, r8
    498e:	3b01      	subs	r3, #1
    4990:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    4994:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    4996:	a902      	add	r1, sp, #8
    4998:	b2c0      	uxtb	r0, r0
    499a:	f00f ffcc 	bl	14936 <region_allocate_and_init>
    499e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    49a0:	f110 0f16 	cmn.w	r0, #22
    49a4:	d184      	bne.n	48b0 <mpu_configure_regions_and_partition+0x78>
    49a6:	e003      	b.n	49b0 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    49a8:	f06f 0415 	mvn.w	r4, #21
    49ac:	e000      	b.n	49b0 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    49ae:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    49b0:	4620      	mov	r0, r4
    49b2:	b007      	add	sp, #28
    49b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    49b8:	f06f 0415 	mvn.w	r4, #21
    49bc:	e7f8      	b.n	49b0 <mpu_configure_regions_and_partition+0x178>
    49be:	bf00      	nop
    49c0:	e000ed90 	.word	0xe000ed90

000049c4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    49c4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    49c6:	4c03      	ldr	r4, [pc, #12]	; (49d4 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    49c8:	2301      	movs	r3, #1
    49ca:	7822      	ldrb	r2, [r4, #0]
    49cc:	f7ff ff34 	bl	4838 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    49d0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    49d2:	bd10      	pop	{r4, pc}
    49d4:	20015aa9 	.word	0x20015aa9

000049d8 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    49d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    49dc:	4607      	mov	r7, r0
    49de:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    49e0:	2400      	movs	r4, #0
    49e2:	e003      	b.n	49ec <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    49e4:	f06f 0515 	mvn.w	r5, #21
    49e8:	e017      	b.n	4a1a <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    49ea:	3401      	adds	r4, #1
    49ec:	45a0      	cmp	r8, r4
    49ee:	dd3c      	ble.n	4a6a <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    49f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    49f4:	009a      	lsls	r2, r3, #2
    49f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    49fa:	685e      	ldr	r6, [r3, #4]
    49fc:	2e00      	cmp	r6, #0
    49fe:	d0f4      	beq.n	49ea <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4a00:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4a04:	4648      	mov	r0, r9
    4a06:	f00f ff7a 	bl	148fe <arm_cmse_mpu_region_get>
    4a0a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    4a0c:	eb06 0009 	add.w	r0, r6, r9
    4a10:	3801      	subs	r0, #1
    4a12:	f00f ff74 	bl	148fe <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4a16:	4285      	cmp	r5, r0
    4a18:	d1e4      	bne.n	49e4 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    4a1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a1e:	4a16      	ldr	r2, [pc, #88]	; (4a78 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    4a20:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4a24:	f115 0f16 	cmn.w	r5, #22
    4a28:	d020      	beq.n	4a6c <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    4a2a:	4b14      	ldr	r3, [pc, #80]	; (4a7c <mpu_mark_areas_for_dynamic_regions+0xa4>)
    4a2c:	781b      	ldrb	r3, [r3, #0]
    4a2e:	42ab      	cmp	r3, r5
    4a30:	dd1f      	ble.n	4a72 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    4a32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4a36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    4a3a:	4a11      	ldr	r2, [pc, #68]	; (4a80 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    4a3c:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    4a3e:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    4a40:	68d5      	ldr	r5, [r2, #12]
    4a42:	7b18      	ldrb	r0, [r3, #12]
    4a44:	f365 0004 	bfi	r0, r5, #0, #5
    4a48:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    4a4a:	6910      	ldr	r0, [r2, #16]
    4a4c:	f3c0 0042 	ubfx	r0, r0, #1, #3
    4a50:	7b1d      	ldrb	r5, [r3, #12]
    4a52:	f360 1547 	bfi	r5, r0, #5, #3
    4a56:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    4a58:	68d1      	ldr	r1, [r2, #12]
    4a5a:	f021 011f 	bic.w	r1, r1, #31
    4a5e:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    4a60:	6912      	ldr	r2, [r2, #16]
    4a62:	f022 021f 	bic.w	r2, r2, #31
    4a66:	611a      	str	r2, [r3, #16]
}
    4a68:	e7bf      	b.n	49ea <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    4a6a:	2500      	movs	r5, #0
}
    4a6c:	4628      	mov	r0, r5
    4a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    4a72:	f06f 0515 	mvn.w	r5, #21
    4a76:	e7f9      	b.n	4a6c <mpu_mark_areas_for_dynamic_regions+0x94>
    4a78:	20015888 	.word	0x20015888
    4a7c:	20015aa9 	.word	0x20015aa9
    4a80:	e000ed90 	.word	0xe000ed90

00004a84 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4a84:	4b03      	ldr	r3, [pc, #12]	; (4a94 <arm_core_mpu_enable+0x10>)
    4a86:	2205      	movs	r2, #5
    4a88:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4a8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a8e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4a92:	4770      	bx	lr
    4a94:	e000ed90 	.word	0xe000ed90

00004a98 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4a98:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4a9c:	4b01      	ldr	r3, [pc, #4]	; (4aa4 <arm_core_mpu_disable+0xc>)
    4a9e:	2200      	movs	r2, #0
    4aa0:	605a      	str	r2, [r3, #4]
}
    4aa2:	4770      	bx	lr
    4aa4:	e000ed90 	.word	0xe000ed90

00004aa8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4aa8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4aaa:	4b0e      	ldr	r3, [pc, #56]	; (4ae4 <z_arm_mpu_init+0x3c>)
    4aac:	681d      	ldr	r5, [r3, #0]
    4aae:	2d08      	cmp	r5, #8
    4ab0:	d815      	bhi.n	4ade <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4ab2:	f7ff fff1 	bl	4a98 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4ab6:	f7ff fe9f 	bl	47f8 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4aba:	2400      	movs	r4, #0
    4abc:	42a5      	cmp	r5, r4
    4abe:	d908      	bls.n	4ad2 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4ac0:	4b08      	ldr	r3, [pc, #32]	; (4ae4 <z_arm_mpu_init+0x3c>)
    4ac2:	6859      	ldr	r1, [r3, #4]
    4ac4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4ac8:	4620      	mov	r0, r4
    4aca:	f7ff fe9d 	bl	4808 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ace:	3401      	adds	r4, #1
    4ad0:	e7f4      	b.n	4abc <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4ad2:	4b05      	ldr	r3, [pc, #20]	; (4ae8 <z_arm_mpu_init+0x40>)
    4ad4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4ad6:	f7ff ffd5 	bl	4a84 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4ada:	2000      	movs	r0, #0
}
    4adc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4ade:	f04f 30ff 	mov.w	r0, #4294967295
    4ae2:	e7fb      	b.n	4adc <z_arm_mpu_init+0x34>
    4ae4:	000323c0 	.word	0x000323c0
    4ae8:	20015aa9 	.word	0x20015aa9

00004aec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4aec:	4b01      	ldr	r3, [pc, #4]	; (4af4 <__stdout_hook_install+0x8>)
    4aee:	6018      	str	r0, [r3, #0]
}
    4af0:	4770      	bx	lr
    4af2:	bf00      	nop
    4af4:	2000002c 	.word	0x2000002c

00004af8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4af8:	b570      	push	{r4, r5, r6, lr}
    4afa:	4606      	mov	r6, r0
    4afc:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    4afe:	2400      	movs	r4, #0
    4b00:	e000      	b.n	4b04 <z_impl_zephyr_read_stdin+0xc>
    4b02:	3401      	adds	r4, #1
    4b04:	42ac      	cmp	r4, r5
    4b06:	da08      	bge.n	4b1a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4b08:	4b05      	ldr	r3, [pc, #20]	; (4b20 <z_impl_zephyr_read_stdin+0x28>)
    4b0a:	681b      	ldr	r3, [r3, #0]
    4b0c:	4798      	blx	r3
    4b0e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4b10:	280a      	cmp	r0, #10
    4b12:	d001      	beq.n	4b18 <z_impl_zephyr_read_stdin+0x20>
    4b14:	280d      	cmp	r0, #13
    4b16:	d1f4      	bne.n	4b02 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4b18:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    4b1a:	4620      	mov	r0, r4
    4b1c:	bd70      	pop	{r4, r5, r6, pc}
    4b1e:	bf00      	nop
    4b20:	20000028 	.word	0x20000028

00004b24 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b26:	4605      	mov	r5, r0
    4b28:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4b2a:	2400      	movs	r4, #0
    4b2c:	e004      	b.n	4b38 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    4b2e:	4b09      	ldr	r3, [pc, #36]	; (4b54 <z_impl_zephyr_write_stdout+0x30>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	7830      	ldrb	r0, [r6, #0]
    4b34:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4b36:	3401      	adds	r4, #1
    4b38:	42bc      	cmp	r4, r7
    4b3a:	da08      	bge.n	4b4e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    4b3c:	192e      	adds	r6, r5, r4
    4b3e:	5d2b      	ldrb	r3, [r5, r4]
    4b40:	2b0a      	cmp	r3, #10
    4b42:	d1f4      	bne.n	4b2e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4b44:	4b03      	ldr	r3, [pc, #12]	; (4b54 <z_impl_zephyr_write_stdout+0x30>)
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	200d      	movs	r0, #13
    4b4a:	4798      	blx	r3
    4b4c:	e7ef      	b.n	4b2e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    4b4e:	4638      	mov	r0, r7
    4b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b52:	bf00      	nop
    4b54:	2000002c 	.word	0x2000002c

00004b58 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4b58:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    4b5a:	2205      	movs	r2, #5
    4b5c:	4902      	ldr	r1, [pc, #8]	; (4b68 <_exit+0x10>)
    4b5e:	2001      	movs	r0, #1
    4b60:	f00f ff24 	bl	149ac <_write>
	while (1) {
    4b64:	e7fe      	b.n	4b64 <_exit+0xc>
    4b66:	bf00      	nop
    4b68:	000323a8 	.word	0x000323a8

00004b6c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    4b6c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4b6e:	4b08      	ldr	r3, [pc, #32]	; (4b90 <_sbrk+0x24>)
    4b70:	6819      	ldr	r1, [r3, #0]
    4b72:	4b08      	ldr	r3, [pc, #32]	; (4b94 <_sbrk+0x28>)
    4b74:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4b76:	440a      	add	r2, r1
    4b78:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4b7c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
    4b80:	429a      	cmp	r2, r3
    4b82:	d202      	bcs.n	4b8a <_sbrk+0x1e>
		heap_sz += count;
    4b84:	4b02      	ldr	r3, [pc, #8]	; (4b90 <_sbrk+0x24>)
    4b86:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4b88:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    4b8a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    4b8e:	4770      	bx	lr
    4b90:	2001589c 	.word	0x2001589c
    4b94:	2001e5b0 	.word	0x2001e5b0

00004b98 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4b98:	4800      	ldr	r0, [pc, #0]	; (4b9c <get_hf_flags+0x4>)
    4b9a:	4770      	bx	lr
    4b9c:	20015938 	.word	0x20015938

00004ba0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4ba0:	4b01      	ldr	r3, [pc, #4]	; (4ba8 <get_subsys+0x8>)
    4ba2:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4ba4:	1140      	asrs	r0, r0, #5
    4ba6:	4770      	bx	lr
    4ba8:	200158b0 	.word	0x200158b0

00004bac <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4bac:	b538      	push	{r3, r4, r5, lr}
    4bae:	4605      	mov	r5, r0
    4bb0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4bb2:	f7ff fff5 	bl	4ba0 <get_subsys>
    4bb6:	4601      	mov	r1, r0
    4bb8:	2240      	movs	r2, #64	; 0x40
    4bba:	4803      	ldr	r0, [pc, #12]	; (4bc8 <onoff_stop+0x1c>)
    4bbc:	f00f ff9d 	bl	14afa <stop>
    4bc0:	4601      	mov	r1, r0
	notify(mgr, res);
    4bc2:	4628      	mov	r0, r5
    4bc4:	47a0      	blx	r4
}
    4bc6:	bd38      	pop	{r3, r4, r5, pc}
    4bc8:	00019720 	.word	0x00019720

00004bcc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4bcc:	b530      	push	{r4, r5, lr}
    4bce:	b083      	sub	sp, #12
    4bd0:	4605      	mov	r5, r0
    4bd2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4bd4:	f7ff ffe4 	bl	4ba0 <get_subsys>
    4bd8:	4601      	mov	r1, r0
    4bda:	2340      	movs	r3, #64	; 0x40
    4bdc:	9300      	str	r3, [sp, #0]
    4bde:	4623      	mov	r3, r4
    4be0:	4a05      	ldr	r2, [pc, #20]	; (4bf8 <onoff_start+0x2c>)
    4be2:	4806      	ldr	r0, [pc, #24]	; (4bfc <onoff_start+0x30>)
    4be4:	f00f ffa3 	bl	14b2e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4be8:	1e01      	subs	r1, r0, #0
    4bea:	db01      	blt.n	4bf0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4bec:	b003      	add	sp, #12
    4bee:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4bf0:	4628      	mov	r0, r5
    4bf2:	47a0      	blx	r4
}
    4bf4:	e7fa      	b.n	4bec <onoff_start+0x20>
    4bf6:	bf00      	nop
    4bf8:	00014b77 	.word	0x00014b77
    4bfc:	00019720 	.word	0x00019720

00004c00 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4c00:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4c02:	2805      	cmp	r0, #5
    4c04:	d815      	bhi.n	4c32 <clock_event_handler+0x32>
    4c06:	e8df f000 	tbb	[pc, r0]
    4c0a:	1a03      	.short	0x1a03
    4c0c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4c10:	2100      	movs	r1, #0
    4c12:	480d      	ldr	r0, [pc, #52]	; (4c48 <clock_event_handler+0x48>)
    4c14:	f00f fefc 	bl	14a10 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4c18:	6883      	ldr	r3, [r0, #8]
    4c1a:	f013 0f07 	tst.w	r3, #7
    4c1e:	d108      	bne.n	4c32 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4c20:	2100      	movs	r1, #0
    4c22:	4809      	ldr	r0, [pc, #36]	; (4c48 <clock_event_handler+0x48>)
    4c24:	f00f ff57 	bl	14ad6 <clkstarted_handle>
    4c28:	e003      	b.n	4c32 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4c2a:	2102      	movs	r1, #2
    4c2c:	4806      	ldr	r0, [pc, #24]	; (4c48 <clock_event_handler+0x48>)
    4c2e:	f00f ff52 	bl	14ad6 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4c32:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4c34:	2103      	movs	r1, #3
    4c36:	4804      	ldr	r0, [pc, #16]	; (4c48 <clock_event_handler+0x48>)
    4c38:	f00f ff4d 	bl	14ad6 <clkstarted_handle>
		break;
    4c3c:	e7f9      	b.n	4c32 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4c3e:	2101      	movs	r1, #1
    4c40:	4801      	ldr	r0, [pc, #4]	; (4c48 <clock_event_handler+0x48>)
    4c42:	f00f ff48 	bl	14ad6 <clkstarted_handle>
}
    4c46:	e7f4      	b.n	4c32 <clock_event_handler+0x32>
    4c48:	00019720 	.word	0x00019720

00004c4c <generic_hfclk_start>:
{
    4c4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c4e:	f04f 0320 	mov.w	r3, #32
    4c52:	f3ef 8411 	mrs	r4, BASEPRI
    4c56:	f383 8812 	msr	BASEPRI_MAX, r3
    4c5a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4c5e:	4a13      	ldr	r2, [pc, #76]	; (4cac <generic_hfclk_start+0x60>)
    4c60:	6813      	ldr	r3, [r2, #0]
    4c62:	f043 0302 	orr.w	r3, r3, #2
    4c66:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4c68:	f013 0f01 	tst.w	r3, #1
    4c6c:	d108      	bne.n	4c80 <generic_hfclk_start+0x34>
	bool already_started = false;
    4c6e:	2300      	movs	r3, #0
	__asm__ volatile(
    4c70:	f384 8811 	msr	BASEPRI, r4
    4c74:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4c78:	b99b      	cbnz	r3, 4ca2 <generic_hfclk_start+0x56>
	hfclk_start();
    4c7a:	f00f ff84 	bl	14b86 <hfclk_start>
}
    4c7e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4c80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c84:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4c88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4c8c:	f012 0f01 	tst.w	r2, #1
    4c90:	d101      	bne.n	4c96 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4c92:	2300      	movs	r3, #0
    4c94:	e7ec      	b.n	4c70 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4c96:	f7ff ff7f 	bl	4b98 <get_hf_flags>
    4c9a:	f00f ff09 	bl	14ab0 <set_on_state>
			already_started = true;
    4c9e:	2301      	movs	r3, #1
    4ca0:	e7e6      	b.n	4c70 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4ca2:	2100      	movs	r1, #0
    4ca4:	4802      	ldr	r0, [pc, #8]	; (4cb0 <generic_hfclk_start+0x64>)
    4ca6:	f00f ff16 	bl	14ad6 <clkstarted_handle>
		return;
    4caa:	e7e8      	b.n	4c7e <generic_hfclk_start+0x32>
    4cac:	20015960 	.word	0x20015960
    4cb0:	00019720 	.word	0x00019720

00004cb4 <generic_hfclk_stop>:
{
    4cb4:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4cb6:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <generic_hfclk_stop+0x24>)
    4cb8:	e8d3 2fef 	ldaex	r2, [r3]
    4cbc:	f022 0102 	bic.w	r1, r2, #2
    4cc0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4cc4:	2800      	cmp	r0, #0
    4cc6:	d1f7      	bne.n	4cb8 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4cc8:	f012 0f01 	tst.w	r2, #1
    4ccc:	d000      	beq.n	4cd0 <generic_hfclk_stop+0x1c>
}
    4cce:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4cd0:	f00f ff6d 	bl	14bae <hfclk_stop>
    4cd4:	e7fb      	b.n	4cce <generic_hfclk_stop+0x1a>
    4cd6:	bf00      	nop
    4cd8:	20015960 	.word	0x20015960

00004cdc <api_blocking_start>:
{
    4cdc:	b500      	push	{lr}
    4cde:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ce0:	f8cd d000 	str.w	sp, [sp]
    4ce4:	f8cd d004 	str.w	sp, [sp, #4]
    4ce8:	2300      	movs	r3, #0
    4cea:	9302      	str	r3, [sp, #8]
    4cec:	2301      	movs	r3, #1
    4cee:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4cf0:	466b      	mov	r3, sp
    4cf2:	4a07      	ldr	r2, [pc, #28]	; (4d10 <api_blocking_start+0x34>)
    4cf4:	f00f ff37 	bl	14b66 <api_start>
	if (err < 0) {
    4cf8:	2800      	cmp	r0, #0
    4cfa:	db05      	blt.n	4d08 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4cfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4d00:	2300      	movs	r3, #0
    4d02:	4668      	mov	r0, sp
    4d04:	f00c fd78 	bl	117f8 <z_impl_k_sem_take>
}
    4d08:	b005      	add	sp, #20
    4d0a:	f85d fb04 	ldr.w	pc, [sp], #4
    4d0e:	bf00      	nop
    4d10:	00014bd7 	.word	0x00014bd7

00004d14 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4d14:	b570      	push	{r4, r5, r6, lr}
    4d16:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d18:	2200      	movs	r2, #0
    4d1a:	2101      	movs	r1, #1
    4d1c:	2005      	movs	r0, #5
    4d1e:	f7ff fa97 	bl	4250 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4d22:	2005      	movs	r0, #5
    4d24:	f7ff fa76 	bl	4214 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4d28:	4811      	ldr	r0, [pc, #68]	; (4d70 <clk_init+0x5c>)
    4d2a:	f001 f92b 	bl	5f84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4d2e:	4b11      	ldr	r3, [pc, #68]	; (4d74 <clk_init+0x60>)
    4d30:	4298      	cmp	r0, r3
    4d32:	d119      	bne.n	4d68 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4d34:	f010 fa72 	bl	1521c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4d38:	2400      	movs	r4, #0
    4d3a:	2c03      	cmp	r4, #3
    4d3c:	d812      	bhi.n	4d64 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4d3e:	4621      	mov	r1, r4
    4d40:	4630      	mov	r0, r6
    4d42:	f00f fe65 	bl	14a10 <get_sub_data>
    4d46:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d48:	4621      	mov	r1, r4
    4d4a:	4630      	mov	r0, r6
    4d4c:	f00f fe6b 	bl	14a26 <get_onoff_manager>
    4d50:	4909      	ldr	r1, [pc, #36]	; (4d78 <clk_init+0x64>)
    4d52:	f00f fa51 	bl	141f8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4d56:	2800      	cmp	r0, #0
    4d58:	db05      	blt.n	4d66 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d5a:	2301      	movs	r3, #1
    4d5c:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4d5e:	441c      	add	r4, r3
    4d60:	b2e4      	uxtb	r4, r4
    4d62:	e7ea      	b.n	4d3a <clk_init+0x26>
	}

	return 0;
    4d64:	2000      	movs	r0, #0
}
    4d66:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4d68:	f06f 0004 	mvn.w	r0, #4
    4d6c:	e7fb      	b.n	4d66 <clk_init+0x52>
    4d6e:	bf00      	nop
    4d70:	00004c01 	.word	0x00004c01
    4d74:	0bad0000 	.word	0x0bad0000
    4d78:	00032424 	.word	0x00032424

00004d7c <lfclk_spinwait>:
{
    4d7c:	b570      	push	{r4, r5, r6, lr}
    4d7e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4d80:	2801      	cmp	r0, #1
    4d82:	d107      	bne.n	4d94 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4d84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d88:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d8c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4d90:	2b02      	cmp	r3, #2
    4d92:	d03f      	beq.n	4e14 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d94:	f013 fc8f 	bl	186b6 <k_is_in_isr>
    4d98:	b920      	cbnz	r0, 4da4 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    4d9a:	4b30      	ldr	r3, [pc, #192]	; (4e5c <lfclk_spinwait+0xe0>)
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	b19b      	cbz	r3, 4dc8 <lfclk_spinwait+0x4c>
    4da0:	2300      	movs	r3, #0
    4da2:	e000      	b.n	4da6 <lfclk_spinwait+0x2a>
    4da4:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4da6:	461c      	mov	r4, r3
    4da8:	b183      	cbz	r3, 4dcc <lfclk_spinwait+0x50>
	__asm__ volatile(
    4daa:	f04f 0320 	mov.w	r3, #32
    4dae:	f3ef 8611 	mrs	r6, BASEPRI
    4db2:	f383 8812 	msr	BASEPRI_MAX, r3
    4db6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4dba:	b9a4      	cbnz	r4, 4de6 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    4dbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4dc0:	2202      	movs	r2, #2
    4dc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4dc6:	e00e      	b.n	4de6 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4dc8:	2301      	movs	r3, #1
    4dca:	e7ec      	b.n	4da6 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    4dcc:	2600      	movs	r6, #0
    4dce:	e7f4      	b.n	4dba <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4dd0:	b30c      	cbz	r4, 4e16 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4dd2:	4630      	mov	r0, r6
    4dd4:	f7ff fa14 	bl	4200 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4dd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ddc:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4de0:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4de2:	2b01      	cmp	r3, #1
    4de4:	d01c      	beq.n	4e20 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4de6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4dea:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4dee:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4df2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4df6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4dfa:	d126      	bne.n	4e4a <lfclk_spinwait+0xce>
    return false;
    4dfc:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4dfe:	2a00      	cmp	r2, #0
    4e00:	d0e6      	beq.n	4dd0 <lfclk_spinwait+0x54>
    4e02:	2b02      	cmp	r3, #2
    4e04:	d001      	beq.n	4e0a <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4e06:	2d01      	cmp	r5, #1
    4e08:	d1e2      	bne.n	4dd0 <lfclk_spinwait+0x54>
	if (isr_mode) {
    4e0a:	b304      	cbz	r4, 4e4e <lfclk_spinwait+0xd2>
	__asm__ volatile(
    4e0c:	f386 8811 	msr	BASEPRI, r6
    4e10:	f3bf 8f6f 	isb	sy
}
    4e14:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    4e16:	2021      	movs	r0, #33	; 0x21
    4e18:	2100      	movs	r1, #0
    4e1a:	f00d f8a9 	bl	11f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4e1e:	e7db      	b.n	4dd8 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e20:	4b0f      	ldr	r3, [pc, #60]	; (4e60 <lfclk_spinwait+0xe4>)
    4e22:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4e24:	2b00      	cmp	r3, #0
    4e26:	d0de      	beq.n	4de6 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e28:	4b0d      	ldr	r3, [pc, #52]	; (4e60 <lfclk_spinwait+0xe4>)
    4e2a:	2200      	movs	r2, #0
    4e2c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4e2e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e34:	2202      	movs	r2, #2
    4e36:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e3a:	4b0a      	ldr	r3, [pc, #40]	; (4e64 <lfclk_spinwait+0xe8>)
    4e3c:	2220      	movs	r2, #32
    4e3e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e42:	4b09      	ldr	r3, [pc, #36]	; (4e68 <lfclk_spinwait+0xec>)
    4e44:	2201      	movs	r2, #1
    4e46:	601a      	str	r2, [r3, #0]
}
    4e48:	e7cd      	b.n	4de6 <lfclk_spinwait+0x6a>
                return true;
    4e4a:	2201      	movs	r2, #1
    4e4c:	e7d7      	b.n	4dfe <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    4e4e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e52:	2202      	movs	r2, #2
    4e54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4e58:	e7dc      	b.n	4e14 <lfclk_spinwait+0x98>
    4e5a:	bf00      	nop
    4e5c:	20015aab 	.word	0x20015aab
    4e60:	50005104 	.word	0x50005104
    4e64:	e000e100 	.word	0xe000e100
    4e68:	50005008 	.word	0x50005008

00004e6c <z_nrf_clock_control_lf_on>:
{
    4e6c:	b510      	push	{r4, lr}
    4e6e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4e70:	4b0e      	ldr	r3, [pc, #56]	; (4eac <z_nrf_clock_control_lf_on+0x40>)
    4e72:	2101      	movs	r1, #1
    4e74:	e8d3 2fef 	ldaex	r2, [r3]
    4e78:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d1f9      	bne.n	4e74 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4e80:	b11a      	cbz	r2, 4e8a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4e82:	1e63      	subs	r3, r4, #1
    4e84:	2b01      	cmp	r3, #1
    4e86:	d90c      	bls.n	4ea2 <z_nrf_clock_control_lf_on+0x36>
}
    4e88:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4e8a:	4809      	ldr	r0, [pc, #36]	; (4eb0 <z_nrf_clock_control_lf_on+0x44>)
    4e8c:	f00f fdcb 	bl	14a26 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4e90:	4908      	ldr	r1, [pc, #32]	; (4eb4 <z_nrf_clock_control_lf_on+0x48>)
    4e92:	2300      	movs	r3, #0
    4e94:	604b      	str	r3, [r1, #4]
    4e96:	60cb      	str	r3, [r1, #12]
    4e98:	2301      	movs	r3, #1
    4e9a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4e9c:	f00f f9c8 	bl	14230 <onoff_request>
    4ea0:	e7ef      	b.n	4e82 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4ea2:	4620      	mov	r0, r4
    4ea4:	f7ff ff6a 	bl	4d7c <lfclk_spinwait>
		break;
    4ea8:	e7ee      	b.n	4e88 <z_nrf_clock_control_lf_on+0x1c>
    4eaa:	bf00      	nop
    4eac:	20015964 	.word	0x20015964
    4eb0:	00019720 	.word	0x00019720
    4eb4:	200158a0 	.word	0x200158a0

00004eb8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4eb8:	b538      	push	{r3, r4, r5, lr}
    4eba:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4ebc:	b2c5      	uxtb	r5, r0
    4ebe:	4b0b      	ldr	r3, [pc, #44]	; (4eec <console_out+0x34>)
    4ec0:	681b      	ldr	r3, [r3, #0]
    4ec2:	4628      	mov	r0, r5
    4ec4:	4798      	blx	r3

	if (handled_by_debug_server) {
    4ec6:	2801      	cmp	r0, #1
    4ec8:	d007      	beq.n	4eda <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4eca:	2c0a      	cmp	r4, #10
    4ecc:	d007      	beq.n	4ede <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4ece:	4b08      	ldr	r3, [pc, #32]	; (4ef0 <console_out+0x38>)
    4ed0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4ed2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4ed4:	685b      	ldr	r3, [r3, #4]
    4ed6:	4629      	mov	r1, r5
    4ed8:	4798      	blx	r3

	return c;
}
    4eda:	4620      	mov	r0, r4
    4edc:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4ede:	4b04      	ldr	r3, [pc, #16]	; (4ef0 <console_out+0x38>)
    4ee0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4ee2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4ee4:	685b      	ldr	r3, [r3, #4]
    4ee6:	210d      	movs	r1, #13
    4ee8:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4eea:	e7f0      	b.n	4ece <console_out+0x16>
    4eec:	20000030 	.word	0x20000030
    4ef0:	20015968 	.word	0x20015968

00004ef4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4ef4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4ef6:	4c04      	ldr	r4, [pc, #16]	; (4f08 <uart_console_hook_install+0x14>)
    4ef8:	4620      	mov	r0, r4
    4efa:	f7ff fdf7 	bl	4aec <__stdout_hook_install>
	__printk_hook_install(console_out);
    4efe:	4620      	mov	r0, r4
    4f00:	f7fe f8a4 	bl	304c <__printk_hook_install>
}
    4f04:	bd10      	pop	{r4, pc}
    4f06:	bf00      	nop
    4f08:	00004eb9 	.word	0x00004eb9

00004f0c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4f0c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4f0e:	4806      	ldr	r0, [pc, #24]	; (4f28 <uart_console_init+0x1c>)
    4f10:	4b06      	ldr	r3, [pc, #24]	; (4f2c <uart_console_init+0x20>)
    4f12:	6018      	str	r0, [r3, #0]
    4f14:	f013 fb4a 	bl	185ac <z_device_ready>
    4f18:	b118      	cbz	r0, 4f22 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4f1a:	f7ff ffeb 	bl	4ef4 <uart_console_hook_install>

	return 0;
    4f1e:	2000      	movs	r0, #0
}
    4f20:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4f22:	f06f 0012 	mvn.w	r0, #18
    4f26:	e7fb      	b.n	4f20 <uart_console_init+0x14>
    4f28:	00019738 	.word	0x00019738
    4f2c:	20015968 	.word	0x20015968

00004f30 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4f30:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4f32:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4f34:	f8d3 c004 	ldr.w	ip, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f38:	4b38      	ldr	r3, [pc, #224]	; (501c <gpio_nrfx_config+0xec>)
    4f3a:	4013      	ands	r3, r2
    4f3c:	4c38      	ldr	r4, [pc, #224]	; (5020 <gpio_nrfx_config+0xf0>)
    4f3e:	42a3      	cmp	r3, r4
    4f40:	d027      	beq.n	4f92 <gpio_nrfx_config+0x62>
    4f42:	d812      	bhi.n	4f6a <gpio_nrfx_config+0x3a>
    4f44:	2b06      	cmp	r3, #6
    4f46:	d026      	beq.n	4f96 <gpio_nrfx_config+0x66>
    4f48:	d904      	bls.n	4f54 <gpio_nrfx_config+0x24>
    4f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f4e:	d109      	bne.n	4f64 <gpio_nrfx_config+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4f50:	2501      	movs	r5, #1
    4f52:	e016      	b.n	4f82 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f54:	b30b      	cbz	r3, 4f9a <gpio_nrfx_config+0x6a>
    4f56:	2b02      	cmp	r3, #2
    4f58:	d101      	bne.n	4f5e <gpio_nrfx_config+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4f5a:	2504      	movs	r5, #4
    4f5c:	e011      	b.n	4f82 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f5e:	f06f 0015 	mvn.w	r0, #21
    4f62:	e049      	b.n	4ff8 <gpio_nrfx_config+0xc8>
    4f64:	f06f 0015 	mvn.w	r0, #21
    4f68:	e046      	b.n	4ff8 <gpio_nrfx_config+0xc8>
    4f6a:	4c2e      	ldr	r4, [pc, #184]	; (5024 <gpio_nrfx_config+0xf4>)
    4f6c:	42a3      	cmp	r3, r4
    4f6e:	d016      	beq.n	4f9e <gpio_nrfx_config+0x6e>
    4f70:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4f74:	d101      	bne.n	4f7a <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
    4f76:	2503      	movs	r5, #3
    4f78:	e003      	b.n	4f82 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4f7e:	d149      	bne.n	5014 <gpio_nrfx_config+0xe4>
		drive = NRF_GPIO_PIN_S0H1;
    4f80:	2502      	movs	r5, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4f82:	f012 0f10 	tst.w	r2, #16
    4f86:	d10c      	bne.n	4fa2 <gpio_nrfx_config+0x72>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4f88:	f012 0f20 	tst.w	r2, #32
    4f8c:	d036      	beq.n	4ffc <gpio_nrfx_config+0xcc>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4f8e:	2601      	movs	r6, #1
    4f90:	e008      	b.n	4fa4 <gpio_nrfx_config+0x74>
		drive = NRF_GPIO_PIN_H0D1;
    4f92:	2507      	movs	r5, #7
    4f94:	e7f5      	b.n	4f82 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
    4f96:	2506      	movs	r5, #6
    4f98:	e7f3      	b.n	4f82 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f9a:	2500      	movs	r5, #0
    4f9c:	e7f1      	b.n	4f82 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    4f9e:	2505      	movs	r5, #5
    4fa0:	e7ef      	b.n	4f82 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
    4fa2:	2603      	movs	r6, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4fa4:	f3c2 2440 	ubfx	r4, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fa8:	f412 7f80 	tst.w	r2, #256	; 0x100
    4fac:	bf0c      	ite	eq
    4fae:	2701      	moveq	r7, #1
    4fb0:	2700      	movne	r7, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4fb2:	f412 7f00 	tst.w	r2, #512	; 0x200
    4fb6:	d006      	beq.n	4fc6 <gpio_nrfx_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4fb8:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4fbc:	d020      	beq.n	5000 <gpio_nrfx_config+0xd0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4fbe:	2301      	movs	r3, #1
    4fc0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4fc2:	f8cc 3008 	str.w	r3, [ip, #8]
	return port->config;
    4fc6:	6843      	ldr	r3, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4fc8:	7a18      	ldrb	r0, [r3, #8]
    4fca:	f001 031f 	and.w	r3, r1, #31
    4fce:	ea43 1140 	orr.w	r1, r3, r0, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4fd2:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fd4:	2901      	cmp	r1, #1
    4fd6:	d01b      	beq.n	5010 <gpio_nrfx_config+0xe0>
        case 0: return NRF_P0;
    4fd8:	4813      	ldr	r0, [pc, #76]	; (5028 <gpio_nrfx_config+0xf8>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4fda:	3380      	adds	r3, #128	; 0x80
    4fdc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    4fe0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4fe4:	ea44 0247 	orr.w	r2, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4fe8:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4fec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4ff0:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    4ff2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4ff6:	2000      	movs	r0, #0
}
    4ff8:	bcf0      	pop	{r4, r5, r6, r7}
    4ffa:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4ffc:	2600      	movs	r6, #0
    4ffe:	e7d1      	b.n	4fa4 <gpio_nrfx_config+0x74>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    5000:	f412 6f80 	tst.w	r2, #1024	; 0x400
    5004:	d0df      	beq.n	4fc6 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    5006:	2301      	movs	r3, #1
    5008:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    500a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    500e:	e7da      	b.n	4fc6 <gpio_nrfx_config+0x96>
        case 1: return NRF_P1;
    5010:	4806      	ldr	r0, [pc, #24]	; (502c <gpio_nrfx_config+0xfc>)
    5012:	e7e2      	b.n	4fda <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    5014:	f06f 0015 	mvn.w	r0, #21
    5018:	e7ee      	b.n	4ff8 <gpio_nrfx_config+0xc8>
    501a:	bf00      	nop
    501c:	00f00006 	.word	0x00f00006
    5020:	00100006 	.word	0x00100006
    5024:	00400002 	.word	0x00400002
    5028:	50842500 	.word	0x50842500
    502c:	50842800 	.word	0x50842800

00005030 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    5030:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    5032:	6905      	ldr	r5, [r0, #16]
	return port->config;
    5034:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    5036:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    5038:	696a      	ldr	r2, [r5, #20]
    503a:	69ab      	ldr	r3, [r5, #24]
    503c:	4313      	orrs	r3, r2
    503e:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    5042:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    5044:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    5046:	e010      	b.n	506a <cfg_level_pins+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    5048:	f04f 0c02 	mov.w	ip, #2
    504c:	e01c      	b.n	5088 <cfg_level_pins+0x58>
    504e:	4f13      	ldr	r7, [pc, #76]	; (509c <cfg_level_pins+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5050:	3480      	adds	r4, #128	; 0x80
    5052:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    5056:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    505a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    505e:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    5062:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    5066:	3001      	adds	r0, #1
		bit <<= 1;
    5068:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    506a:	b1a1      	cbz	r1, 5096 <cfg_level_pins+0x66>
		if (level_pins & bit) {
    506c:	420b      	tst	r3, r1
    506e:	d0fa      	beq.n	5066 <cfg_level_pins+0x36>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5070:	7a34      	ldrb	r4, [r6, #8]
    5072:	f000 021f 	and.w	r2, r0, #31
    5076:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    507a:	692c      	ldr	r4, [r5, #16]
    507c:	40c4      	lsrs	r4, r0
    507e:	f014 0f01 	tst.w	r4, #1
    5082:	d1e1      	bne.n	5048 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    5084:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    5088:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    508c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    508e:	2a01      	cmp	r2, #1
    5090:	d0dd      	beq.n	504e <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    5092:	4f03      	ldr	r7, [pc, #12]	; (50a0 <cfg_level_pins+0x70>)
    5094:	e7dc      	b.n	5050 <cfg_level_pins+0x20>
	}
}
    5096:	bcf0      	pop	{r4, r5, r6, r7}
    5098:	4770      	bx	lr
    509a:	bf00      	nop
    509c:	50842800 	.word	0x50842800
    50a0:	50842500 	.word	0x50842500

000050a4 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    50a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a6:	468c      	mov	ip, r1
	return port->data;
    50a8:	6903      	ldr	r3, [r0, #16]
	return port->config;
    50aa:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    50ac:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    50ae:	695a      	ldr	r2, [r3, #20]
    50b0:	6998      	ldr	r0, [r3, #24]
    50b2:	4302      	orrs	r2, r0
    50b4:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    50b8:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    50ba:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    50bc:	6918      	ldr	r0, [r3, #16]
    50be:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    50c0:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    50c4:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    50c6:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    50c8:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    50ca:	e015      	b.n	50f8 <check_level_trigger_pins+0x54>
        case 1: return NRF_P1;
    50cc:	f8df e070 	ldr.w	lr, [pc, #112]	; 5140 <check_level_trigger_pins+0x9c>
    50d0:	e025      	b.n	511e <check_level_trigger_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    50d2:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    50d6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50d8:	2a01      	cmp	r2, #1
    50da:	d02d      	beq.n	5138 <check_level_trigger_pins+0x94>
        case 0: return NRF_P0;
    50dc:	f8df e064 	ldr.w	lr, [pc, #100]	; 5144 <check_level_trigger_pins+0xa0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    50e0:	f106 0280 	add.w	r2, r6, #128	; 0x80
    50e4:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    50e8:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    50ec:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    50f0:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    50f4:	3501      	adds	r5, #1
		bit <<= 1;
    50f6:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    50f8:	b30c      	cbz	r4, 513e <check_level_trigger_pins+0x9a>
		if (check_pins & bit) {
    50fa:	4223      	tst	r3, r4
    50fc:	d0fa      	beq.n	50f4 <check_level_trigger_pins+0x50>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    50fe:	7a0e      	ldrb	r6, [r1, #8]
    5100:	f005 021f 	and.w	r2, r5, #31
    5104:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    5108:	423b      	tst	r3, r7
    510a:	d1e2      	bne.n	50d2 <check_level_trigger_pins+0x2e>
    *p_pin = pin_number & 0x1F;
    510c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5110:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5114:	f1be 0f01 	cmp.w	lr, #1
    5118:	d0d8      	beq.n	50cc <check_level_trigger_pins+0x28>
        case 0: return NRF_P0;
    511a:	f8df e028 	ldr.w	lr, [pc, #40]	; 5144 <check_level_trigger_pins+0xa0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    511e:	3680      	adds	r6, #128	; 0x80
    5120:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5124:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    5128:	2e02      	cmp	r6, #2
    512a:	d1d2      	bne.n	50d2 <check_level_trigger_pins+0x2e>
					*sense_levels |= bit;
    512c:	f8dc 6000 	ldr.w	r6, [ip]
    5130:	431e      	orrs	r6, r3
    5132:	f8cc 6000 	str.w	r6, [ip]
    5136:	e7cc      	b.n	50d2 <check_level_trigger_pins+0x2e>
        case 1: return NRF_P1;
    5138:	f8df e004 	ldr.w	lr, [pc, #4]	; 5140 <check_level_trigger_pins+0x9c>
    513c:	e7d0      	b.n	50e0 <check_level_trigger_pins+0x3c>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5140:	50842800 	.word	0x50842800
    5144:	50842500 	.word	0x50842500

00005148 <gpiote_pin_cleanup>:
{
    5148:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    514a:	4b14      	ldr	r3, [pc, #80]	; (519c <gpiote_pin_cleanup+0x54>)
    514c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    5150:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    5152:	2300      	movs	r3, #0
    5154:	e000      	b.n	5158 <gpiote_pin_cleanup+0x10>
    5156:	3301      	adds	r3, #1
    5158:	2b07      	cmp	r3, #7
    515a:	d81d      	bhi.n	5198 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    515c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    5160:	490e      	ldr	r1, [pc, #56]	; (519c <gpiote_pin_cleanup+0x54>)
    5162:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    5166:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    516a:	4290      	cmp	r0, r2
    516c:	d1f3      	bne.n	5156 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    516e:	fa24 f203 	lsr.w	r2, r4, r3
    5172:	f012 0f01 	tst.w	r2, #1
    5176:	d0ee      	beq.n	5156 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    5178:	460a      	mov	r2, r1
    517a:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    517e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5182:	f021 0101 	bic.w	r1, r1, #1
    5186:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    518a:	2101      	movs	r1, #1
    518c:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    518e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    5192:	b2d8      	uxtb	r0, r3
    5194:	f001 f968 	bl	6468 <nrfx_gpiote_channel_free>
}
    5198:	bd10      	pop	{r4, pc}
    519a:	bf00      	nop
    519c:	5000d000 	.word	0x5000d000

000051a0 <gpiote_channel_alloc>:
{
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	b082      	sub	sp, #8
    51a4:	4604      	mov	r4, r0
    51a6:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    51a8:	f10d 0007 	add.w	r0, sp, #7
    51ac:	f001 f978 	bl	64a0 <nrfx_gpiote_channel_alloc>
    51b0:	4b1c      	ldr	r3, [pc, #112]	; (5224 <gpiote_channel_alloc+0x84>)
    51b2:	4298      	cmp	r0, r3
    51b4:	d132      	bne.n	521c <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    51b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    51ba:	f103 0240 	add.w	r2, r3, #64	; 0x40
    51be:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    51c0:	4e19      	ldr	r6, [pc, #100]	; (5228 <gpiote_channel_alloc+0x88>)
    51c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    51c6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    51ca:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    51ce:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    51d2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51d6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    51da:	0224      	lsls	r4, r4, #8
    51dc:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    51e0:	042d      	lsls	r5, r5, #16
    51e2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    51e6:	432c      	orrs	r4, r5
    51e8:	430c      	orrs	r4, r1
    51ea:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    51ee:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    51f2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    51f6:	2000      	movs	r0, #0
    51f8:	6018      	str	r0, [r3, #0]
    51fa:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    51fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5200:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5204:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    5208:	f042 0201 	orr.w	r2, r2, #1
    520c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    5210:	2301      	movs	r3, #1
    5212:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    5214:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    5218:	b002      	add	sp, #8
    521a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    521c:	f06f 0012 	mvn.w	r0, #18
    5220:	e7fa      	b.n	5218 <gpiote_channel_alloc+0x78>
    5222:	bf00      	nop
    5224:	0bad0000 	.word	0x0bad0000
    5228:	5000d000 	.word	0x5000d000

0000522c <gpiote_pin_int_cfg>:
{
    522c:	b570      	push	{r4, r5, r6, lr}
    522e:	460d      	mov	r5, r1
	return port->data;
    5230:	6906      	ldr	r6, [r0, #16]
	return port->config;
    5232:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5234:	7a1b      	ldrb	r3, [r3, #8]
    5236:	f001 041f 	and.w	r4, r1, #31
    523a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    523e:	4620      	mov	r0, r4
    5240:	f7ff ff82 	bl	5148 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    5244:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    5248:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    524a:	2b01      	cmp	r3, #1
    524c:	d01f      	beq.n	528e <gpiote_pin_int_cfg+0x62>
        case 0: return NRF_P0;
    524e:	4a1f      	ldr	r2, [pc, #124]	; (52cc <gpiote_pin_int_cfg+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5250:	f100 0180 	add.w	r1, r0, #128	; 0x80
    5254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5258:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    525c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    5260:	68f3      	ldr	r3, [r6, #12]
    5262:	40eb      	lsrs	r3, r5
    5264:	f013 0f01 	tst.w	r3, #1
    5268:	d02e      	beq.n	52c8 <gpiote_pin_int_cfg+0x9c>
		if (data->trig_edge & BIT(pin)) {
    526a:	6973      	ldr	r3, [r6, #20]
    526c:	40eb      	lsrs	r3, r5
    526e:	f013 0f01 	tst.w	r3, #1
    5272:	d015      	beq.n	52a0 <gpiote_pin_int_cfg+0x74>
				if (data->double_edge & BIT(pin)) {
    5274:	69b3      	ldr	r3, [r6, #24]
    5276:	40eb      	lsrs	r3, r5
    5278:	f013 0f01 	tst.w	r3, #1
    527c:	d109      	bne.n	5292 <gpiote_pin_int_cfg+0x66>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    527e:	6931      	ldr	r1, [r6, #16]
    5280:	fa21 f505 	lsr.w	r5, r1, r5
    5284:	f015 0f01 	tst.w	r5, #1
    5288:	d008      	beq.n	529c <gpiote_pin_int_cfg+0x70>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    528a:	2101      	movs	r1, #1
    528c:	e002      	b.n	5294 <gpiote_pin_int_cfg+0x68>
        case 1: return NRF_P1;
    528e:	4a10      	ldr	r2, [pc, #64]	; (52d0 <gpiote_pin_int_cfg+0xa4>)
    5290:	e7de      	b.n	5250 <gpiote_pin_int_cfg+0x24>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    5292:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    5294:	4620      	mov	r0, r4
    5296:	f7ff ff83 	bl	51a0 <gpiote_channel_alloc>
    529a:	e016      	b.n	52ca <gpiote_pin_int_cfg+0x9e>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    529c:	2102      	movs	r1, #2
    529e:	e7f9      	b.n	5294 <gpiote_pin_int_cfg+0x68>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    52a0:	6931      	ldr	r1, [r6, #16]
    52a2:	fa21 f505 	lsr.w	r5, r1, r5
    52a6:	f015 0f01 	tst.w	r5, #1
    52aa:	d10b      	bne.n	52c4 <gpiote_pin_int_cfg+0x98>
	return NRF_GPIO_PIN_SENSE_LOW;
    52ac:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    52ae:	3080      	adds	r0, #128	; 0x80
    52b0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    52b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    52b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    52bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    52c0:	2000      	movs	r0, #0
}
    52c2:	e002      	b.n	52ca <gpiote_pin_int_cfg+0x9e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    52c4:	2102      	movs	r1, #2
    52c6:	e7f2      	b.n	52ae <gpiote_pin_int_cfg+0x82>
	int res = 0;
    52c8:	2000      	movs	r0, #0
}
    52ca:	bd70      	pop	{r4, r5, r6, pc}
    52cc:	50842500 	.word	0x50842500
    52d0:	50842800 	.word	0x50842800

000052d4 <gpio_nrfx_pin_interrupt_configure>:
{
    52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    52d6:	6904      	ldr	r4, [r0, #16]
	return port->config;
    52d8:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    52da:	7a2e      	ldrb	r6, [r5, #8]
    52dc:	f001 051f 	and.w	r5, r1, #31
    52e0:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    52e4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    52e8:	d025      	beq.n	5336 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    52ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    52ee:	d034      	beq.n	535a <gpio_nrfx_pin_interrupt_configure+0x86>
    52f0:	68e5      	ldr	r5, [r4, #12]
    52f2:	2601      	movs	r6, #1
    52f4:	408e      	lsls	r6, r1
    52f6:	4335      	orrs	r5, r6
    52f8:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    52fa:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    52fe:	d032      	beq.n	5366 <gpio_nrfx_pin_interrupt_configure+0x92>
    5300:	6962      	ldr	r2, [r4, #20]
    5302:	2501      	movs	r5, #1
    5304:	408d      	lsls	r5, r1
    5306:	ea22 0205 	bic.w	r2, r2, r5
    530a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    530c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5310:	d02e      	beq.n	5370 <gpio_nrfx_pin_interrupt_configure+0x9c>
    5312:	69a2      	ldr	r2, [r4, #24]
    5314:	2501      	movs	r5, #1
    5316:	408d      	lsls	r5, r1
    5318:	ea22 0205 	bic.w	r2, r2, r5
    531c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    531e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5322:	d02a      	beq.n	537a <gpio_nrfx_pin_interrupt_configure+0xa6>
    5324:	6923      	ldr	r3, [r4, #16]
    5326:	2201      	movs	r2, #1
    5328:	408a      	lsls	r2, r1
    532a:	ea23 0302 	bic.w	r3, r3, r2
    532e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    5330:	f7ff ff7c 	bl	522c <gpiote_pin_int_cfg>
}
    5334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    5336:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    533a:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    533c:	2d01      	cmp	r5, #1
    533e:	d00a      	beq.n	5356 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5340:	4f10      	ldr	r7, [pc, #64]	; (5384 <gpio_nrfx_pin_interrupt_configure+0xb0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5342:	f106 0580 	add.w	r5, r6, #128	; 0x80
    5346:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    534a:	f015 0f01 	tst.w	r5, #1
    534e:	d0cc      	beq.n	52ea <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    5350:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5354:	e7ee      	b.n	5334 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    5356:	4f0c      	ldr	r7, [pc, #48]	; (5388 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    5358:	e7f3      	b.n	5342 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    535a:	68e5      	ldr	r5, [r4, #12]
    535c:	2601      	movs	r6, #1
    535e:	408e      	lsls	r6, r1
    5360:	ea25 0506 	bic.w	r5, r5, r6
    5364:	e7c8      	b.n	52f8 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    5366:	6962      	ldr	r2, [r4, #20]
    5368:	2501      	movs	r5, #1
    536a:	408d      	lsls	r5, r1
    536c:	432a      	orrs	r2, r5
    536e:	e7cc      	b.n	530a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    5370:	69a2      	ldr	r2, [r4, #24]
    5372:	2501      	movs	r5, #1
    5374:	408d      	lsls	r5, r1
    5376:	432a      	orrs	r2, r5
    5378:	e7d0      	b.n	531c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    537a:	6923      	ldr	r3, [r4, #16]
    537c:	2201      	movs	r2, #1
    537e:	408a      	lsls	r2, r1
    5380:	4313      	orrs	r3, r2
    5382:	e7d4      	b.n	532e <gpio_nrfx_pin_interrupt_configure+0x5a>
    5384:	50842500 	.word	0x50842500
    5388:	50842800 	.word	0x50842800

0000538c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    538c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    538e:	4b0b      	ldr	r3, [pc, #44]	; (53bc <gpio_nrfx_init+0x30>)
    5390:	781b      	ldrb	r3, [r3, #0]
    5392:	b10b      	cbz	r3, 5398 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    5394:	2000      	movs	r0, #0
    5396:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    5398:	4b08      	ldr	r3, [pc, #32]	; (53bc <gpio_nrfx_init+0x30>)
    539a:	2201      	movs	r2, #1
    539c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    539e:	2200      	movs	r2, #0
    53a0:	2105      	movs	r1, #5
    53a2:	200d      	movs	r0, #13
    53a4:	f7fe ff54 	bl	4250 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    53a8:	200d      	movs	r0, #13
    53aa:	f7fe ff33 	bl	4214 <arch_irq_enable>
    53ae:	4b04      	ldr	r3, [pc, #16]	; (53c0 <gpio_nrfx_init+0x34>)
    53b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    53b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    53b8:	e7ec      	b.n	5394 <gpio_nrfx_init+0x8>
    53ba:	bf00      	nop
    53bc:	20015aaa 	.word	0x20015aaa
    53c0:	5000d000 	.word	0x5000d000

000053c4 <gpiote_event_handler>:
{
    53c4:	b570      	push	{r4, r5, r6, lr}
    53c6:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    53c8:	2300      	movs	r3, #0
    53ca:	9302      	str	r3, [sp, #8]
    53cc:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    53ce:	9300      	str	r3, [sp, #0]
    53d0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53d2:	4b46      	ldr	r3, [pc, #280]	; (54ec <gpiote_event_handler+0x128>)
    53d4:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    53d6:	b90c      	cbnz	r4, 53dc <gpiote_event_handler+0x18>
{
    53d8:	2100      	movs	r1, #0
    53da:	e011      	b.n	5400 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    53dc:	4d44      	ldr	r5, [pc, #272]	; (54f0 <gpiote_event_handler+0x12c>)
    53de:	4669      	mov	r1, sp
    53e0:	4628      	mov	r0, r5
    53e2:	f7ff fe5f 	bl	50a4 <check_level_trigger_pins>
		fired_triggers[0] =
    53e6:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    53e8:	a901      	add	r1, sp, #4
    53ea:	f105 0018 	add.w	r0, r5, #24
    53ee:	f7ff fe59 	bl	50a4 <check_level_trigger_pins>
		fired_triggers[1] =
    53f2:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53f4:	4b3d      	ldr	r3, [pc, #244]	; (54ec <gpiote_event_handler+0x128>)
    53f6:	2200      	movs	r2, #0
    53f8:	601a      	str	r2, [r3, #0]
    53fa:	681b      	ldr	r3, [r3, #0]
}
    53fc:	e7ec      	b.n	53d8 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    53fe:	3101      	adds	r1, #1
    5400:	2907      	cmp	r1, #7
    5402:	d82d      	bhi.n	5460 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    5404:	f101 0340 	add.w	r3, r1, #64	; 0x40
    5408:	009b      	lsls	r3, r3, #2
    540a:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    540c:	2301      	movs	r3, #1
    540e:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    5410:	4838      	ldr	r0, [pc, #224]	; (54f4 <gpiote_event_handler+0x130>)
    5412:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    5416:	4203      	tst	r3, r0
    5418:	d0f1      	beq.n	53fe <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    541a:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    541e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    5422:	681b      	ldr	r3, [r3, #0]
    5424:	2b00      	cmp	r3, #0
    5426:	d0ea      	beq.n	53fe <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5428:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    542c:	4831      	ldr	r0, [pc, #196]	; (54f4 <gpiote_event_handler+0x130>)
    542e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    5432:	f3c0 3340 	ubfx	r3, r0, #13, #1
    5436:	f3c0 2004 	ubfx	r0, r0, #8, #5
    543a:	2501      	movs	r5, #1
    543c:	fa05 f000 	lsl.w	r0, r5, r0
    5440:	ad04      	add	r5, sp, #16
    5442:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5446:	f853 5c08 	ldr.w	r5, [r3, #-8]
    544a:	4305      	orrs	r5, r0
    544c:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    5450:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    5454:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5458:	2200      	movs	r2, #0
    545a:	601a      	str	r2, [r3, #0]
    545c:	681b      	ldr	r3, [r3, #0]
}
    545e:	e7ce      	b.n	53fe <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    5460:	9e02      	ldr	r6, [sp, #8]
    5462:	b92e      	cbnz	r6, 5470 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    5464:	9e03      	ldr	r6, [sp, #12]
    5466:	b9ee      	cbnz	r6, 54a4 <gpiote_event_handler+0xe0>
	if (port_event) {
    5468:	2c00      	cmp	r4, #0
    546a:	d135      	bne.n	54d8 <gpiote_event_handler+0x114>
}
    546c:	b004      	add	sp, #16
    546e:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    5470:	4b21      	ldr	r3, [pc, #132]	; (54f8 <gpiote_event_handler+0x134>)
    5472:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5474:	b119      	cbz	r1, 547e <gpiote_event_handler+0xba>
    5476:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    5478:	b149      	cbz	r1, 548e <gpiote_event_handler+0xca>
	return node->next;
    547a:	680d      	ldr	r5, [r1, #0]
    547c:	e007      	b.n	548e <gpiote_event_handler+0xca>
    547e:	460d      	mov	r5, r1
    5480:	e005      	b.n	548e <gpiote_event_handler+0xca>
    5482:	b16d      	cbz	r5, 54a0 <gpiote_event_handler+0xdc>
    5484:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    5486:	b105      	cbz	r5, 548a <gpiote_event_handler+0xc6>
	return node->next;
    5488:	682b      	ldr	r3, [r5, #0]
    548a:	4629      	mov	r1, r5
    548c:	461d      	mov	r5, r3
    548e:	2900      	cmp	r1, #0
    5490:	d0e8      	beq.n	5464 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    5492:	688a      	ldr	r2, [r1, #8]
    5494:	4032      	ands	r2, r6
    5496:	d0f4      	beq.n	5482 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5498:	684b      	ldr	r3, [r1, #4]
    549a:	4815      	ldr	r0, [pc, #84]	; (54f0 <gpiote_event_handler+0x12c>)
    549c:	4798      	blx	r3
    549e:	e7f0      	b.n	5482 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    54a0:	462b      	mov	r3, r5
    54a2:	e7f2      	b.n	548a <gpiote_event_handler+0xc6>
	return list->head;
    54a4:	4b15      	ldr	r3, [pc, #84]	; (54fc <gpiote_event_handler+0x138>)
    54a6:	6859      	ldr	r1, [r3, #4]
    54a8:	b119      	cbz	r1, 54b2 <gpiote_event_handler+0xee>
    54aa:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    54ac:	b149      	cbz	r1, 54c2 <gpiote_event_handler+0xfe>
	return node->next;
    54ae:	680d      	ldr	r5, [r1, #0]
    54b0:	e007      	b.n	54c2 <gpiote_event_handler+0xfe>
    54b2:	460d      	mov	r5, r1
    54b4:	e005      	b.n	54c2 <gpiote_event_handler+0xfe>
    54b6:	b16d      	cbz	r5, 54d4 <gpiote_event_handler+0x110>
    54b8:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    54ba:	b105      	cbz	r5, 54be <gpiote_event_handler+0xfa>
	return node->next;
    54bc:	682b      	ldr	r3, [r5, #0]
    54be:	4629      	mov	r1, r5
    54c0:	461d      	mov	r5, r3
    54c2:	2900      	cmp	r1, #0
    54c4:	d0d0      	beq.n	5468 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    54c6:	688a      	ldr	r2, [r1, #8]
    54c8:	4032      	ands	r2, r6
    54ca:	d0f4      	beq.n	54b6 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    54cc:	684b      	ldr	r3, [r1, #4]
    54ce:	480c      	ldr	r0, [pc, #48]	; (5500 <gpiote_event_handler+0x13c>)
    54d0:	4798      	blx	r3
    54d2:	e7f0      	b.n	54b6 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    54d4:	462b      	mov	r3, r5
    54d6:	e7f2      	b.n	54be <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    54d8:	4c05      	ldr	r4, [pc, #20]	; (54f0 <gpiote_event_handler+0x12c>)
    54da:	4620      	mov	r0, r4
    54dc:	f7ff fda8 	bl	5030 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    54e0:	f104 0018 	add.w	r0, r4, #24
    54e4:	f7ff fda4 	bl	5030 <cfg_level_pins>
}
    54e8:	e7c0      	b.n	546c <gpiote_event_handler+0xa8>
    54ea:	bf00      	nop
    54ec:	5000d17c 	.word	0x5000d17c
    54f0:	00019768 	.word	0x00019768
    54f4:	5000d000 	.word	0x5000d000
    54f8:	2001596c 	.word	0x2001596c
    54fc:	20015988 	.word	0x20015988
    5500:	00019780 	.word	0x00019780

00005504 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    5504:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    5506:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5508:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    550c:	d06f      	beq.n	55ee <baudrate_set+0xea>
    550e:	d83a      	bhi.n	5586 <baudrate_set+0x82>
    5510:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5514:	d06e      	beq.n	55f4 <baudrate_set+0xf0>
    5516:	d90a      	bls.n	552e <baudrate_set+0x2a>
    5518:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    551c:	d075      	beq.n	560a <baudrate_set+0x106>
    551e:	d924      	bls.n	556a <baudrate_set+0x66>
    5520:	f647 2312 	movw	r3, #31250	; 0x7a12
    5524:	4299      	cmp	r1, r3
    5526:	d12b      	bne.n	5580 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    552c:	e013      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    552e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5532:	d061      	beq.n	55f8 <baudrate_set+0xf4>
    5534:	d907      	bls.n	5546 <baudrate_set+0x42>
    5536:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    553a:	d063      	beq.n	5604 <baudrate_set+0x100>
    553c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5540:	d110      	bne.n	5564 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5542:	4b3c      	ldr	r3, [pc, #240]	; (5634 <baudrate_set+0x130>)
    5544:	e007      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    5546:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    554a:	d058      	beq.n	55fe <baudrate_set+0xfa>
    554c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    5550:	d105      	bne.n	555e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    5552:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5556:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    555a:	2000      	movs	r0, #0
    555c:	4770      	bx	lr
	switch (baudrate) {
    555e:	f06f 0015 	mvn.w	r0, #21
    5562:	4770      	bx	lr
    5564:	f06f 0015 	mvn.w	r0, #21
    5568:	4770      	bx	lr
    556a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    556e:	d04e      	beq.n	560e <baudrate_set+0x10a>
    5570:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    5574:	d101      	bne.n	557a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    5576:	4b30      	ldr	r3, [pc, #192]	; (5638 <baudrate_set+0x134>)
    5578:	e7ed      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    557a:	f06f 0015 	mvn.w	r0, #21
    557e:	4770      	bx	lr
    5580:	f06f 0015 	mvn.w	r0, #21
    5584:	4770      	bx	lr
    5586:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    558a:	d042      	beq.n	5612 <baudrate_set+0x10e>
    558c:	d909      	bls.n	55a2 <baudrate_set+0x9e>
    558e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5592:	d046      	beq.n	5622 <baudrate_set+0x11e>
    5594:	d91f      	bls.n	55d6 <baudrate_set+0xd2>
    5596:	4b29      	ldr	r3, [pc, #164]	; (563c <baudrate_set+0x138>)
    5598:	4299      	cmp	r1, r3
    559a:	d148      	bne.n	562e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    559c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55a0:	e7d9      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    55a2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    55a6:	d037      	beq.n	5618 <baudrate_set+0x114>
    55a8:	d905      	bls.n	55b6 <baudrate_set+0xb2>
    55aa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    55ae:	d10f      	bne.n	55d0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    55b0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    55b4:	e7cf      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    55b6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    55ba:	4299      	cmp	r1, r3
    55bc:	d02e      	beq.n	561c <baudrate_set+0x118>
    55be:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    55c2:	d102      	bne.n	55ca <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    55c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    55c8:	e7c5      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    55ca:	f06f 0015 	mvn.w	r0, #21
    55ce:	4770      	bx	lr
    55d0:	f06f 0015 	mvn.w	r0, #21
    55d4:	4770      	bx	lr
    55d6:	4b1a      	ldr	r3, [pc, #104]	; (5640 <baudrate_set+0x13c>)
    55d8:	4299      	cmp	r1, r3
    55da:	d025      	beq.n	5628 <baudrate_set+0x124>
    55dc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    55e0:	d102      	bne.n	55e8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    55e2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    55e6:	e7b6      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    55e8:	f06f 0015 	mvn.w	r0, #21
    55ec:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    55ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    55f2:	e7b0      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    55f4:	4b13      	ldr	r3, [pc, #76]	; (5644 <baudrate_set+0x140>)
    55f6:	e7ae      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    55f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    55fc:	e7ab      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    55fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5602:	e7a8      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5604:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5608:	e7a5      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    560a:	4b0f      	ldr	r3, [pc, #60]	; (5648 <baudrate_set+0x144>)
    560c:	e7a3      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    560e:	4b0f      	ldr	r3, [pc, #60]	; (564c <baudrate_set+0x148>)
    5610:	e7a1      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5612:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5616:	e79e      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5618:	4b0d      	ldr	r3, [pc, #52]	; (5650 <baudrate_set+0x14c>)
    561a:	e79c      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    561c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5620:	e799      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5622:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5626:	e796      	b.n	5556 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5628:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    562c:	e793      	b.n	5556 <baudrate_set+0x52>
	switch (baudrate) {
    562e:	f06f 0015 	mvn.w	r0, #21
}
    5632:	4770      	bx	lr
    5634:	0013b000 	.word	0x0013b000
    5638:	004ea000 	.word	0x004ea000
    563c:	000f4240 	.word	0x000f4240
    5640:	0003d090 	.word	0x0003d090
    5644:	00275000 	.word	0x00275000
    5648:	0075c000 	.word	0x0075c000
    564c:	003af000 	.word	0x003af000
    5650:	013a9000 	.word	0x013a9000

00005654 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    5654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5658:	4605      	mov	r5, r0
    565a:	460f      	mov	r7, r1
	return dev->data;
    565c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5660:	f013 f829 	bl	186b6 <k_is_in_isr>
    5664:	b920      	cbnz	r0, 5670 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    5666:	4b16      	ldr	r3, [pc, #88]	; (56c0 <uarte_nrfx_poll_out+0x6c>)
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	b1ab      	cbz	r3, 5698 <uarte_nrfx_poll_out+0x44>
    566c:	2300      	movs	r3, #0
    566e:	e000      	b.n	5672 <uarte_nrfx_poll_out+0x1e>
    5670:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    5672:	b19b      	cbz	r3, 569c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    5674:	f04f 0320 	mov.w	r3, #32
    5678:	f3ef 8411 	mrs	r4, BASEPRI
    567c:	f383 8812 	msr	BASEPRI_MAX, r3
    5680:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    5684:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    5686:	4628      	mov	r0, r5
    5688:	f00f fbe4 	bl	14e54 <is_tx_ready>
    568c:	b950      	cbnz	r0, 56a4 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    568e:	f384 8811 	msr	BASEPRI, r4
    5692:	f3bf 8f6f 	isb	sy
}
    5696:	e7ed      	b.n	5674 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5698:	2301      	movs	r3, #1
    569a:	e7ea      	b.n	5672 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    569c:	4628      	mov	r0, r5
    569e:	f00f fcf6 	bl	1508e <wait_tx_ready>
    56a2:	4606      	mov	r6, r0
	}

	data->char_out = c;
    56a4:	4641      	mov	r1, r8
    56a6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    56aa:	2201      	movs	r2, #1
    56ac:	4628      	mov	r0, r5
    56ae:	f00f fbeb 	bl	14e88 <tx_start>
	__asm__ volatile(
    56b2:	f386 8811 	msr	BASEPRI, r6
    56b6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    56ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56be:	bf00      	nop
    56c0:	20015aab 	.word	0x20015aab

000056c4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    56c4:	b538      	push	{r3, r4, r5, lr}
    56c6:	4605      	mov	r5, r0
    56c8:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    56ca:	f101 0016 	add.w	r0, r1, #22
    56ce:	f000 fe7d 	bl	63cc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    56d2:	4b0a      	ldr	r3, [pc, #40]	; (56fc <endtx_stoptx_ppi_init+0x38>)
    56d4:	4298      	cmp	r0, r3
    56d6:	d10e      	bne.n	56f6 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    56d8:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    56da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    56de:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    56e2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    56e6:	7da2      	ldrb	r2, [r4, #22]
    56e8:	2301      	movs	r3, #1
    56ea:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    56ec:	4a04      	ldr	r2, [pc, #16]	; (5700 <endtx_stoptx_ppi_init+0x3c>)
    56ee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    56f2:	2000      	movs	r0, #0
}
    56f4:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    56f6:	f06f 0004 	mvn.w	r0, #4
    56fa:	e7fb      	b.n	56f4 <endtx_stoptx_ppi_init+0x30>
    56fc:	0bad0000 	.word	0x0bad0000
    5700:	50017000 	.word	0x50017000

00005704 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5706:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5708:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    570a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    570c:	2300      	movs	r3, #0
    570e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5712:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5714:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5716:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    571a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    571c:	2b01      	cmp	r3, #1
    571e:	f000 80a0 	beq.w	5862 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
    5722:	4a5a      	ldr	r2, [pc, #360]	; (588c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5724:	2301      	movs	r3, #1
    5726:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    5728:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
    572a:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    572c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5730:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5732:	2b01      	cmp	r3, #1
    5734:	f000 8097 	beq.w	5866 <uarte_instance_init+0x162>
        case 0: return NRF_P0;
    5738:	4954      	ldr	r1, [pc, #336]	; (588c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    573a:	3280      	adds	r2, #128	; 0x80
    573c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5740:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5744:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5748:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    574c:	68e3      	ldr	r3, [r4, #12]
    574e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5752:	d010      	beq.n	5776 <uarte_instance_init+0x72>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    5754:	7e27      	ldrb	r7, [r4, #24]
    *p_pin = pin_number & 0x1F;
    5756:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    575a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    575c:	2b01      	cmp	r3, #1
    575e:	f000 8084 	beq.w	586a <uarte_instance_init+0x166>
        case 0: return NRF_P0;
    5762:	494a      	ldr	r1, [pc, #296]	; (588c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5764:	3280      	adds	r2, #128	; 0x80
    5766:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    576a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    576e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5772:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    5776:	68a2      	ldr	r2, [r4, #8]
    5778:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    577a:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    577e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    5782:	6923      	ldr	r3, [r4, #16]
    5784:	f1b3 3fff 	cmp.w	r3, #4294967295
    5788:	d00f      	beq.n	57aa <uarte_instance_init+0xa6>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    578a:	7e67      	ldrb	r7, [r4, #25]
    *p_pin = pin_number & 0x1F;
    578c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5790:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5792:	2b01      	cmp	r3, #1
    5794:	d06b      	beq.n	586e <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
    5796:	493d      	ldr	r1, [pc, #244]	; (588c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5798:	3280      	adds	r2, #128	; 0x80
    579a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    579e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    57a2:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    57a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    57aa:	6963      	ldr	r3, [r4, #20]
    57ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    57b0:	d018      	beq.n	57e4 <uarte_instance_init+0xe0>
    *p_pin = pin_number & 0x1F;
    57b2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    57b6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57b8:	2b01      	cmp	r3, #1
    57ba:	d05a      	beq.n	5872 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
    57bc:	4933      	ldr	r1, [pc, #204]	; (588c <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    57be:	2301      	movs	r3, #1
    57c0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    57c2:	608b      	str	r3, [r1, #8]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    57c4:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    57c6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    57ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57cc:	2b01      	cmp	r3, #1
    57ce:	d052      	beq.n	5876 <uarte_instance_init+0x172>
        case 0: return NRF_P0;
    57d0:	492e      	ldr	r1, [pc, #184]	; (588c <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    57d2:	3280      	adds	r2, #128	; 0x80
    57d4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    57d8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    57dc:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    57e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    57e4:	6962      	ldr	r2, [r4, #20]
    57e6:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    57e8:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    57ec:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    57f0:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    57f2:	3104      	adds	r1, #4
    57f4:	f00f fab2 	bl	14d5c <uarte_nrfx_configure>
	if (err) {
    57f8:	4607      	mov	r7, r0
    57fa:	bb80      	cbnz	r0, 585e <uarte_instance_init+0x15a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    57fc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    57fe:	f013 0f08 	tst.w	r3, #8
    5802:	d13a      	bne.n	587a <uarte_instance_init+0x176>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5804:	2308      	movs	r3, #8
    5806:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    580a:	68e3      	ldr	r3, [r4, #12]
    580c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5810:	d00c      	beq.n	582c <uarte_instance_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5812:	2300      	movs	r3, #0
    5814:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5818:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    581c:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5820:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5824:	2301      	movs	r3, #1
    5826:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    582a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    582c:	6863      	ldr	r3, [r4, #4]
    582e:	f013 0f08 	tst.w	r3, #8
    5832:	d103      	bne.n	583c <uarte_instance_init+0x138>
    p_reg->INTENSET = mask;
    5834:	f44f 7380 	mov.w	r3, #256	; 0x100
    5838:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    583c:	6863      	ldr	r3, [r4, #4]
    583e:	f013 0f10 	tst.w	r3, #16
    5842:	d003      	beq.n	584c <uarte_instance_init+0x148>
    5844:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5848:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    584c:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    584e:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5852:	2300      	movs	r3, #0
    5854:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5858:	2301      	movs	r3, #1
    585a:	60ab      	str	r3, [r5, #8]
    585c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    585e:	4638      	mov	r0, r7
    5860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    5862:	4a0b      	ldr	r2, [pc, #44]	; (5890 <uarte_instance_init+0x18c>)
    5864:	e75e      	b.n	5724 <uarte_instance_init+0x20>
    5866:	490a      	ldr	r1, [pc, #40]	; (5890 <uarte_instance_init+0x18c>)
    5868:	e767      	b.n	573a <uarte_instance_init+0x36>
    586a:	4909      	ldr	r1, [pc, #36]	; (5890 <uarte_instance_init+0x18c>)
    586c:	e77a      	b.n	5764 <uarte_instance_init+0x60>
    586e:	4908      	ldr	r1, [pc, #32]	; (5890 <uarte_instance_init+0x18c>)
    5870:	e792      	b.n	5798 <uarte_instance_init+0x94>
    5872:	4907      	ldr	r1, [pc, #28]	; (5890 <uarte_instance_init+0x18c>)
    5874:	e7a3      	b.n	57be <uarte_instance_init+0xba>
    5876:	4906      	ldr	r1, [pc, #24]	; (5890 <uarte_instance_init+0x18c>)
    5878:	e7ab      	b.n	57d2 <uarte_instance_init+0xce>
		err = endtx_stoptx_ppi_init(uarte, data);
    587a:	4631      	mov	r1, r6
    587c:	4628      	mov	r0, r5
    587e:	f7ff ff21 	bl	56c4 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5882:	2800      	cmp	r0, #0
    5884:	dabe      	bge.n	5804 <uarte_instance_init+0x100>
			return err;
    5886:	4607      	mov	r7, r0
    5888:	e7e9      	b.n	585e <uarte_instance_init+0x15a>
    588a:	bf00      	nop
    588c:	50842500 	.word	0x50842500
    5890:	50842800 	.word	0x50842800

00005894 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5894:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5898:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    589c:	4b01      	ldr	r3, [pc, #4]	; (58a4 <set_comparator+0x10>)
    589e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    58a2:	4770      	bx	lr
    58a4:	50015000 	.word	0x50015000

000058a8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    58a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    58ac:	4b01      	ldr	r3, [pc, #4]	; (58b4 <get_comparator+0xc>)
    58ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    58b2:	4770      	bx	lr
    58b4:	50015000 	.word	0x50015000

000058b8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58bc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    58be:	4a02      	ldr	r2, [pc, #8]	; (58c8 <event_enable+0x10>)
    58c0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    58c4:	4770      	bx	lr
    58c6:	bf00      	nop
    58c8:	50015000 	.word	0x50015000

000058cc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58d0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    58d2:	4a02      	ldr	r2, [pc, #8]	; (58dc <event_disable+0x10>)
    58d4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    58d8:	4770      	bx	lr
    58da:	bf00      	nop
    58dc:	50015000 	.word	0x50015000

000058e0 <counter>:
     return p_reg->COUNTER;
    58e0:	4b01      	ldr	r3, [pc, #4]	; (58e8 <counter+0x8>)
    58e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    58e6:	4770      	bx	lr
    58e8:	50015000 	.word	0x50015000

000058ec <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    58ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    58ee:	2301      	movs	r3, #1
    58f0:	4083      	lsls	r3, r0
    58f2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58f4:	4a0d      	ldr	r2, [pc, #52]	; (592c <compare_int_lock+0x40>)
    58f6:	e8d2 1fef 	ldaex	r1, [r2]
    58fa:	ea01 0c04 	and.w	ip, r1, r4
    58fe:	e8c2 cfee 	stlex	lr, ip, [r2]
    5902:	f1be 0f00 	cmp.w	lr, #0
    5906:	d1f6      	bne.n	58f6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5908:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    590c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5910:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    5914:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    5918:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    591c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5920:	420b      	tst	r3, r1
}
    5922:	bf14      	ite	ne
    5924:	2001      	movne	r0, #1
    5926:	2000      	moveq	r0, #0
    5928:	bd10      	pop	{r4, pc}
    592a:	bf00      	nop
    592c:	200159c8 	.word	0x200159c8

00005930 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5930:	b570      	push	{r4, r5, r6, lr}
    5932:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5934:	f00f fbf7 	bl	15126 <full_int_lock>
    5938:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    593a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    593e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5940:	4a15      	ldr	r2, [pc, #84]	; (5998 <channel_processing_check_and_clear+0x68>)
    5942:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5946:	4213      	tst	r3, r2
    5948:	d105      	bne.n	5956 <channel_processing_check_and_clear+0x26>
	bool result = false;
    594a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    594c:	4628      	mov	r0, r5
    594e:	f00f fbf3 	bl	15138 <full_int_unlock>

	return result;
}
    5952:	4630      	mov	r0, r6
    5954:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5956:	2301      	movs	r3, #1
    5958:	40a3      	lsls	r3, r4
    595a:	43db      	mvns	r3, r3
    595c:	4a0f      	ldr	r2, [pc, #60]	; (599c <channel_processing_check_and_clear+0x6c>)
    595e:	e8d2 1fef 	ldaex	r1, [r2]
    5962:	ea01 0003 	and.w	r0, r1, r3
    5966:	e8c2 0fe6 	stlex	r6, r0, [r2]
    596a:	2e00      	cmp	r6, #0
    596c:	d1f7      	bne.n	595e <channel_processing_check_and_clear+0x2e>
    596e:	b959      	cbnz	r1, 5988 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5970:	f104 0350 	add.w	r3, r4, #80	; 0x50
    5974:	009b      	lsls	r3, r3, #2
    5976:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5978:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    597c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5980:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5982:	b113      	cbz	r3, 598a <channel_processing_check_and_clear+0x5a>
    5984:	2301      	movs	r3, #1
    5986:	e000      	b.n	598a <channel_processing_check_and_clear+0x5a>
    5988:	2301      	movs	r3, #1
		if (result) {
    598a:	461e      	mov	r6, r3
    598c:	2b00      	cmp	r3, #0
    598e:	d0dd      	beq.n	594c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5990:	4620      	mov	r0, r4
    5992:	f00f fbb9 	bl	15108 <event_clear>
    5996:	e7d9      	b.n	594c <channel_processing_check_and_clear+0x1c>
    5998:	50015000 	.word	0x50015000
    599c:	200159c4 	.word	0x200159c4

000059a0 <compare_int_unlock>:
	if (key) {
    59a0:	b901      	cbnz	r1, 59a4 <compare_int_unlock+0x4>
}
    59a2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    59a4:	2301      	movs	r3, #1
    59a6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59a8:	4a0e      	ldr	r2, [pc, #56]	; (59e4 <compare_int_unlock+0x44>)
    59aa:	e8d2 1fef 	ldaex	r1, [r2]
    59ae:	4319      	orrs	r1, r3
    59b0:	e8c2 1fec 	stlex	ip, r1, [r2]
    59b4:	f1bc 0f00 	cmp.w	ip, #0
    59b8:	d1f7      	bne.n	59aa <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    59ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    59be:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    59c0:	4a09      	ldr	r2, [pc, #36]	; (59e8 <compare_int_unlock+0x48>)
    59c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59c6:	4b09      	ldr	r3, [pc, #36]	; (59ec <compare_int_unlock+0x4c>)
    59c8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    59cc:	fa23 f000 	lsr.w	r0, r3, r0
    59d0:	f010 0f01 	tst.w	r0, #1
    59d4:	d0e5      	beq.n	59a2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59d6:	4b06      	ldr	r3, [pc, #24]	; (59f0 <compare_int_unlock+0x50>)
    59d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    59dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    59e0:	e7df      	b.n	59a2 <compare_int_unlock+0x2>
    59e2:	bf00      	nop
    59e4:	200159c8 	.word	0x200159c8
    59e8:	50015000 	.word	0x50015000
    59ec:	200159c4 	.word	0x200159c4
    59f0:	e000e100 	.word	0xe000e100

000059f4 <sys_clock_timeout_handler>:
{
    59f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f6:	4607      	mov	r7, r0
    59f8:	4614      	mov	r4, r2
    59fa:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    59fc:	4610      	mov	r0, r2
    59fe:	4619      	mov	r1, r3
    5a00:	f00f fb8e 	bl	15120 <absolute_time_to_cc>
    5a04:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5a06:	4b15      	ldr	r3, [pc, #84]	; (5a5c <sys_clock_timeout_handler+0x68>)
    5a08:	681a      	ldr	r2, [r3, #0]
    5a0a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    5a0c:	601c      	str	r4, [r3, #0]
    5a0e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5a10:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5a14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5a18:	d308      	bcc.n	5a2c <sys_clock_timeout_handler+0x38>
	return false;
    5a1a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5a1c:	f00c fc0e 	bl	1223c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5a20:	4638      	mov	r0, r7
    5a22:	f7ff ff41 	bl	58a8 <get_comparator>
    5a26:	42a8      	cmp	r0, r5
    5a28:	d00c      	beq.n	5a44 <sys_clock_timeout_handler+0x50>
}
    5a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5a2c:	4b0c      	ldr	r3, [pc, #48]	; (5a60 <sys_clock_timeout_handler+0x6c>)
    5a2e:	6819      	ldr	r1, [r3, #0]
    5a30:	0a0b      	lsrs	r3, r1, #8
    5a32:	060a      	lsls	r2, r1, #24
    5a34:	1952      	adds	r2, r2, r5
    5a36:	f143 0300 	adc.w	r3, r3, #0
    5a3a:	490a      	ldr	r1, [pc, #40]	; (5a64 <sys_clock_timeout_handler+0x70>)
    5a3c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5a40:	2401      	movs	r4, #1
    5a42:	e7eb      	b.n	5a1c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    5a44:	b11c      	cbz	r4, 5a4e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    5a46:	4638      	mov	r0, r7
    5a48:	f7ff ff36 	bl	58b8 <event_enable>
}
    5a4c:	e7ed      	b.n	5a2a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    5a4e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    5a52:	4638      	mov	r0, r7
    5a54:	f7ff ff1e 	bl	5894 <set_comparator>
    5a58:	e7f5      	b.n	5a46 <sys_clock_timeout_handler+0x52>
    5a5a:	bf00      	nop
    5a5c:	20000358 	.word	0x20000358
    5a60:	200159cc 	.word	0x200159cc
    5a64:	20000340 	.word	0x20000340

00005a68 <z_nrf_rtc_timer_read>:
{
    5a68:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5a6a:	4b0d      	ldr	r3, [pc, #52]	; (5aa0 <z_nrf_rtc_timer_read+0x38>)
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	0a1d      	lsrs	r5, r3, #8
    5a70:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5a72:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    5a76:	f7ff ff33 	bl	58e0 <counter>
    5a7a:	4603      	mov	r3, r0
	val += cntr;
    5a7c:	1820      	adds	r0, r4, r0
    5a7e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5a86:	d20a      	bcs.n	5a9e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    5a88:	4b06      	ldr	r3, [pc, #24]	; (5aa4 <z_nrf_rtc_timer_read+0x3c>)
    5a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    5a8e:	4299      	cmp	r1, r3
    5a90:	bf08      	it	eq
    5a92:	4290      	cmpeq	r0, r2
    5a94:	d203      	bcs.n	5a9e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5a96:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5a9a:	f141 0100 	adc.w	r1, r1, #0
}
    5a9e:	bd38      	pop	{r3, r4, r5, pc}
    5aa0:	200159cc 	.word	0x200159cc
    5aa4:	20000340 	.word	0x20000340

00005aa8 <compare_set_nolocks>:
{
    5aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5aac:	4606      	mov	r6, r0
    5aae:	4614      	mov	r4, r2
    5ab0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    5ab2:	4610      	mov	r0, r2
    5ab4:	4619      	mov	r1, r3
    5ab6:	f00f fb33 	bl	15120 <absolute_time_to_cc>
    5aba:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5abc:	f7ff ffd4 	bl	5a68 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5ac0:	42a9      	cmp	r1, r5
    5ac2:	bf08      	it	eq
    5ac4:	42a0      	cmpeq	r0, r4
    5ac6:	d21e      	bcs.n	5b06 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5ac8:	ebb4 0800 	subs.w	r8, r4, r0
    5acc:	eb65 0901 	sbc.w	r9, r5, r1
    5ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5ad4:	2300      	movs	r3, #0
    5ad6:	454b      	cmp	r3, r9
    5ad8:	bf08      	it	eq
    5ada:	4542      	cmpeq	r2, r8
    5adc:	d32a      	bcc.n	5b34 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    5ade:	4b17      	ldr	r3, [pc, #92]	; (5b3c <compare_set_nolocks+0x94>)
    5ae0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5ae4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5ae8:	42ab      	cmp	r3, r5
    5aea:	bf08      	it	eq
    5aec:	42a2      	cmpeq	r2, r4
    5aee:	d014      	beq.n	5b1a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5af0:	4639      	mov	r1, r7
    5af2:	4630      	mov	r0, r6
    5af4:	f00f fb25 	bl	15142 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5af8:	4639      	mov	r1, r7
    5afa:	f00f fb01 	bl	15100 <counter_sub>
    5afe:	1824      	adds	r4, r4, r0
    5b00:	f145 0500 	adc.w	r5, r5, #0
    5b04:	e009      	b.n	5b1a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5b06:	2301      	movs	r3, #1
    5b08:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b0a:	4a0d      	ldr	r2, [pc, #52]	; (5b40 <compare_set_nolocks+0x98>)
    5b0c:	e8d2 1fef 	ldaex	r1, [r2]
    5b10:	4319      	orrs	r1, r3
    5b12:	e8c2 1fe0 	stlex	r0, r1, [r2]
    5b16:	2800      	cmp	r0, #0
    5b18:	d1f8      	bne.n	5b0c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    5b1a:	4b08      	ldr	r3, [pc, #32]	; (5b3c <compare_set_nolocks+0x94>)
    5b1c:	0132      	lsls	r2, r6, #4
    5b1e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5b22:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5b26:	9908      	ldr	r1, [sp, #32]
    5b28:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    5b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b2c:	6073      	str	r3, [r6, #4]
	return ret;
    5b2e:	2000      	movs	r0, #0
}
    5b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5b34:	f06f 0015 	mvn.w	r0, #21
    5b38:	e7fa      	b.n	5b30 <compare_set_nolocks+0x88>
    5b3a:	bf00      	nop
    5b3c:	20000348 	.word	0x20000348
    5b40:	200159c4 	.word	0x200159c4

00005b44 <process_channel>:

static void process_channel(int32_t chan)
{
    5b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b48:	b082      	sub	sp, #8
    5b4a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    5b4c:	f7ff fef0 	bl	5930 <channel_processing_check_and_clear>
    5b50:	b910      	cbnz	r0, 5b58 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5b52:	b002      	add	sp, #8
    5b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5b58:	f7ff ff86 	bl	5a68 <z_nrf_rtc_timer_read>
    5b5c:	4606      	mov	r6, r0
    5b5e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5b60:	f00f fae1 	bl	15126 <full_int_lock>
    5b64:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5b66:	4b13      	ldr	r3, [pc, #76]	; (5bb4 <process_channel+0x70>)
    5b68:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5b6c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5b70:	454f      	cmp	r7, r9
    5b72:	bf08      	it	eq
    5b74:	4546      	cmpeq	r6, r8
    5b76:	d20b      	bcs.n	5b90 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5b78:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5b7a:	4650      	mov	r0, sl
    5b7c:	f00f fadc 	bl	15138 <full_int_unlock>
		if (handler) {
    5b80:	2e00      	cmp	r6, #0
    5b82:	d0e6      	beq.n	5b52 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5b84:	9500      	str	r5, [sp, #0]
    5b86:	4642      	mov	r2, r8
    5b88:	464b      	mov	r3, r9
    5b8a:	4620      	mov	r0, r4
    5b8c:	47b0      	blx	r6
}
    5b8e:	e7e0      	b.n	5b52 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5b90:	4a08      	ldr	r2, [pc, #32]	; (5bb4 <process_channel+0x70>)
    5b92:	0123      	lsls	r3, r4, #4
    5b94:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5b98:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5b9a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    5b9c:	2000      	movs	r0, #0
    5b9e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5ba0:	f04f 32ff 	mov.w	r2, #4294967295
    5ba4:	f04f 33ff 	mov.w	r3, #4294967295
    5ba8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5bac:	4620      	mov	r0, r4
    5bae:	f7ff fe8d 	bl	58cc <event_disable>
    5bb2:	e7e2      	b.n	5b7a <process_channel+0x36>
    5bb4:	20000348 	.word	0x20000348

00005bb8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5bb8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5bba:	4b0d      	ldr	r3, [pc, #52]	; (5bf0 <rtc_nrf_isr+0x38>)
    5bbc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5bc0:	f013 0f02 	tst.w	r3, #2
    5bc4:	d00a      	beq.n	5bdc <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bc6:	4b0b      	ldr	r3, [pc, #44]	; (5bf4 <rtc_nrf_isr+0x3c>)
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	b13b      	cbz	r3, 5bdc <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5bcc:	4b09      	ldr	r3, [pc, #36]	; (5bf4 <rtc_nrf_isr+0x3c>)
    5bce:	2200      	movs	r2, #0
    5bd0:	601a      	str	r2, [r3, #0]
    5bd2:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5bd4:	4a08      	ldr	r2, [pc, #32]	; (5bf8 <rtc_nrf_isr+0x40>)
    5bd6:	6813      	ldr	r3, [r2, #0]
    5bd8:	3301      	adds	r3, #1
    5bda:	6013      	str	r3, [r2, #0]
{
    5bdc:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bde:	2c00      	cmp	r4, #0
    5be0:	dd00      	ble.n	5be4 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5be2:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5be4:	4620      	mov	r0, r4
    5be6:	f7ff ffad 	bl	5b44 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bea:	3401      	adds	r4, #1
    5bec:	e7f7      	b.n	5bde <rtc_nrf_isr+0x26>
    5bee:	bf00      	nop
    5bf0:	50015000 	.word	0x50015000
    5bf4:	50015104 	.word	0x50015104
    5bf8:	200159cc 	.word	0x200159cc

00005bfc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5bfc:	b530      	push	{r4, r5, lr}
    5bfe:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5c00:	2300      	movs	r3, #0
    5c02:	4a1f      	ldr	r2, [pc, #124]	; (5c80 <sys_clock_driver_init+0x84>)
    5c04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5c08:	2b00      	cmp	r3, #0
    5c0a:	dd27      	ble.n	5c5c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    5c0c:	4c1c      	ldr	r4, [pc, #112]	; (5c80 <sys_clock_driver_init+0x84>)
    5c0e:	2502      	movs	r5, #2
    5c10:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c14:	4b1b      	ldr	r3, [pc, #108]	; (5c84 <sys_clock_driver_init+0x88>)
    5c16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5c1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5c1e:	2200      	movs	r2, #0
    5c20:	2101      	movs	r1, #1
    5c22:	2015      	movs	r0, #21
    5c24:	f7fe fb14 	bl	4250 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5c28:	2015      	movs	r0, #21
    5c2a:	f7fe faf3 	bl	4214 <arch_irq_enable>
    5c2e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5c32:	2301      	movs	r3, #1
    5c34:	4a14      	ldr	r2, [pc, #80]	; (5c88 <sys_clock_driver_init+0x8c>)
    5c36:	6013      	str	r3, [r2, #0]
    5c38:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5c3a:	4a14      	ldr	r2, [pc, #80]	; (5c8c <sys_clock_driver_init+0x90>)
    5c3c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5c3e:	2400      	movs	r4, #0
    5c40:	9401      	str	r4, [sp, #4]
    5c42:	4b13      	ldr	r3, [pc, #76]	; (5c90 <sys_clock_driver_init+0x94>)
    5c44:	9300      	str	r3, [sp, #0]
    5c46:	4a13      	ldr	r2, [pc, #76]	; (5c94 <sys_clock_driver_init+0x98>)
    5c48:	2300      	movs	r3, #0
    5c4a:	4620      	mov	r0, r4
    5c4c:	f00f fab4 	bl	151b8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5c50:	4628      	mov	r0, r5
    5c52:	f7ff f90b 	bl	4e6c <z_nrf_clock_control_lf_on>

	return 0;
}
    5c56:	4620      	mov	r0, r4
    5c58:	b003      	add	sp, #12
    5c5a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5c5c:	4a0e      	ldr	r2, [pc, #56]	; (5c98 <sys_clock_driver_init+0x9c>)
    5c5e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5c62:	f04f 30ff 	mov.w	r0, #4294967295
    5c66:	f04f 31ff 	mov.w	r1, #4294967295
    5c6a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5c72:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5c74:	4902      	ldr	r1, [pc, #8]	; (5c80 <sys_clock_driver_init+0x84>)
    5c76:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5c7a:	3301      	adds	r3, #1
    5c7c:	e7c4      	b.n	5c08 <sys_clock_driver_init+0xc>
    5c7e:	bf00      	nop
    5c80:	50015000 	.word	0x50015000
    5c84:	e000e100 	.word	0xe000e100
    5c88:	50015008 	.word	0x50015008
    5c8c:	200159c8 	.word	0x200159c8
    5c90:	000059f5 	.word	0x000059f5
    5c94:	007fffff 	.word	0x007fffff
    5c98:	20000348 	.word	0x20000348

00005c9c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    5c9c:	b510      	push	{r4, lr}
    5c9e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
    5ca4:	d007      	beq.n	5cb6 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5ca6:	1e44      	subs	r4, r0, #1
    5ca8:	2c00      	cmp	r4, #0
    5caa:	dd07      	ble.n	5cbc <sys_clock_set_timeout+0x20>
    5cac:	4b11      	ldr	r3, [pc, #68]	; (5cf4 <sys_clock_set_timeout+0x58>)
    5cae:	429c      	cmp	r4, r3
    5cb0:	dd05      	ble.n	5cbe <sys_clock_set_timeout+0x22>
    5cb2:	4c11      	ldr	r4, [pc, #68]	; (5cf8 <sys_clock_set_timeout+0x5c>)
    5cb4:	e003      	b.n	5cbe <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5cb6:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5cba:	e7f4      	b.n	5ca6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5cbc:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5cbe:	f7ff fed3 	bl	5a68 <z_nrf_rtc_timer_read>
    5cc2:	4b0e      	ldr	r3, [pc, #56]	; (5cfc <sys_clock_set_timeout+0x60>)
    5cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cc8:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5cca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5cce:	d300      	bcc.n	5cd2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5cd0:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5cd2:	4404      	add	r4, r0
    5cd4:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5cd6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5cda:	d300      	bcc.n	5cde <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5cdc:	4c06      	ldr	r4, [pc, #24]	; (5cf8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5cde:	2000      	movs	r0, #0
    5ce0:	9001      	str	r0, [sp, #4]
    5ce2:	4907      	ldr	r1, [pc, #28]	; (5d00 <sys_clock_set_timeout+0x64>)
    5ce4:	9100      	str	r1, [sp, #0]
    5ce6:	1912      	adds	r2, r2, r4
    5ce8:	f143 0300 	adc.w	r3, r3, #0
    5cec:	f00f fa64 	bl	151b8 <compare_set>
}
    5cf0:	b002      	add	sp, #8
    5cf2:	bd10      	pop	{r4, pc}
    5cf4:	007ffffe 	.word	0x007ffffe
    5cf8:	007fffff 	.word	0x007fffff
    5cfc:	20000358 	.word	0x20000358
    5d00:	000059f5 	.word	0x000059f5

00005d04 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5d04:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5d06:	f7ff feaf 	bl	5a68 <z_nrf_rtc_timer_read>
    5d0a:	4b02      	ldr	r3, [pc, #8]	; (5d14 <sys_clock_elapsed+0x10>)
    5d0c:	681b      	ldr	r3, [r3, #0]
}
    5d0e:	1ac0      	subs	r0, r0, r3
    5d10:	bd08      	pop	{r3, pc}
    5d12:	bf00      	nop
    5d14:	20000358 	.word	0x20000358

00005d18 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d18:	4b08      	ldr	r3, [pc, #32]	; (5d3c <nrf53_errata_42+0x24>)
    5d1a:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d1c:	3304      	adds	r3, #4
    5d1e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d20:	2a07      	cmp	r2, #7
    5d22:	d001      	beq.n	5d28 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d24:	2000      	movs	r0, #0
    5d26:	4770      	bx	lr
                    switch(var2)
    5d28:	3b02      	subs	r3, #2
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d804      	bhi.n	5d38 <nrf53_errata_42+0x20>
    5d2e:	e8df f003 	tbb	[pc, r3]
    5d32:	01          	.byte	0x01
    5d33:	00          	.byte	0x00
                if (var1 == 0x07)
    5d34:	2001      	movs	r0, #1
    5d36:	4770      	bx	lr
                            return false;
    5d38:	2000      	movs	r0, #0
    #endif
}
    5d3a:	4770      	bx	lr
    5d3c:	00ff0130 	.word	0x00ff0130

00005d40 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d40:	4b0a      	ldr	r3, [pc, #40]	; (5d6c <nrf53_errata_46+0x2c>)
    5d42:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d44:	3304      	adds	r3, #4
    5d46:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d48:	2a07      	cmp	r2, #7
    5d4a:	d001      	beq.n	5d50 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d4c:	2000      	movs	r0, #0
    5d4e:	4770      	bx	lr
                    switch(var2)
    5d50:	2b04      	cmp	r3, #4
    5d52:	d007      	beq.n	5d64 <nrf53_errata_46+0x24>
    5d54:	d808      	bhi.n	5d68 <nrf53_errata_46+0x28>
    5d56:	3b02      	subs	r3, #2
    5d58:	2b01      	cmp	r3, #1
    5d5a:	d801      	bhi.n	5d60 <nrf53_errata_46+0x20>
    5d5c:	2001      	movs	r0, #1
    #endif
}
    5d5e:	4770      	bx	lr
                            return false;
    5d60:	2000      	movs	r0, #0
    5d62:	4770      	bx	lr
                            return false;
    5d64:	2000      	movs	r0, #0
    5d66:	4770      	bx	lr
                            return false;
    5d68:	2000      	movs	r0, #0
    5d6a:	4770      	bx	lr
    5d6c:	00ff0130 	.word	0x00ff0130

00005d70 <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d70:	4b08      	ldr	r3, [pc, #32]	; (5d94 <nrf53_errata_49+0x24>)
    5d72:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d74:	3304      	adds	r3, #4
    5d76:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d78:	2a07      	cmp	r2, #7
    5d7a:	d001      	beq.n	5d80 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d7c:	2000      	movs	r0, #0
    5d7e:	4770      	bx	lr
                    switch(var2)
    5d80:	3b02      	subs	r3, #2
    5d82:	2b00      	cmp	r3, #0
    5d84:	d804      	bhi.n	5d90 <nrf53_errata_49+0x20>
    5d86:	e8df f003 	tbb	[pc, r3]
    5d8a:	01          	.byte	0x01
    5d8b:	00          	.byte	0x00
                if (var1 == 0x07)
    5d8c:	2001      	movs	r0, #1
    5d8e:	4770      	bx	lr
                            return false;
    5d90:	2000      	movs	r0, #0
    #endif
}
    5d92:	4770      	bx	lr
    5d94:	00ff0130 	.word	0x00ff0130

00005d98 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d98:	4b03      	ldr	r3, [pc, #12]	; (5da8 <nrf53_errata_55+0x10>)
    5d9a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d9c:	2b07      	cmp	r3, #7
    5d9e:	d001      	beq.n	5da4 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5da0:	2000      	movs	r0, #0
    5da2:	4770      	bx	lr
                            return true;
    5da4:	2001      	movs	r0, #1
    #endif
}
    5da6:	4770      	bx	lr
    5da8:	00ff0130 	.word	0x00ff0130

00005dac <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5dac:	4b08      	ldr	r3, [pc, #32]	; (5dd0 <nrf53_errata_64+0x24>)
    5dae:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5db0:	3304      	adds	r3, #4
    5db2:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5db4:	2a07      	cmp	r2, #7
    5db6:	d001      	beq.n	5dbc <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5db8:	2000      	movs	r0, #0
    5dba:	4770      	bx	lr
                    switch(var2)
    5dbc:	3b02      	subs	r3, #2
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d804      	bhi.n	5dcc <nrf53_errata_64+0x20>
    5dc2:	e8df f003 	tbb	[pc, r3]
    5dc6:	01          	.byte	0x01
    5dc7:	00          	.byte	0x00
                if (var1 == 0x07)
    5dc8:	2001      	movs	r0, #1
    5dca:	4770      	bx	lr
                            return false;
    5dcc:	2000      	movs	r0, #0
    #endif
}
    5dce:	4770      	bx	lr
    5dd0:	00ff0130 	.word	0x00ff0130

00005dd4 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5dd4:	4b08      	ldr	r3, [pc, #32]	; (5df8 <nrf53_errata_69+0x24>)
    5dd6:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5dd8:	3304      	adds	r3, #4
    5dda:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5ddc:	2a07      	cmp	r2, #7
    5dde:	d001      	beq.n	5de4 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5de0:	2000      	movs	r0, #0
    5de2:	4770      	bx	lr
                    switch(var2)
    5de4:	3b02      	subs	r3, #2
    5de6:	2b00      	cmp	r3, #0
    5de8:	d804      	bhi.n	5df4 <nrf53_errata_69+0x20>
    5dea:	e8df f003 	tbb	[pc, r3]
    5dee:	01          	.byte	0x01
    5def:	00          	.byte	0x00
                if (var1 == 0x07)
    5df0:	2001      	movs	r0, #1
    5df2:	4770      	bx	lr
                            return false;
    5df4:	2000      	movs	r0, #0
    #endif
}
    5df6:	4770      	bx	lr
    5df8:	00ff0130 	.word	0x00ff0130

00005dfc <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5dfc:	4b08      	ldr	r3, [pc, #32]	; (5e20 <nrf53_errata_97+0x24>)
    5dfe:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5e00:	3304      	adds	r3, #4
    5e02:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5e04:	2a07      	cmp	r2, #7
    5e06:	d001      	beq.n	5e0c <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5e08:	2000      	movs	r0, #0
    5e0a:	4770      	bx	lr
                    switch(var2)
    5e0c:	3b02      	subs	r3, #2
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d804      	bhi.n	5e1c <nrf53_errata_97+0x20>
    5e12:	e8df f003 	tbb	[pc, r3]
    5e16:	01          	.byte	0x01
    5e17:	00          	.byte	0x00
                if (var1 == 0x07)
    5e18:	2001      	movs	r0, #1
    5e1a:	4770      	bx	lr
                            return false;
    5e1c:	2000      	movs	r0, #0
    #endif
}
    5e1e:	4770      	bx	lr
    5e20:	00ff0130 	.word	0x00ff0130

00005e24 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    5e24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e28:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    5e2c:	f002 0203 	and.w	r2, r2, #3
    5e30:	4b02      	ldr	r3, [pc, #8]	; (5e3c <SystemCoreClockUpdate+0x18>)
    5e32:	40d3      	lsrs	r3, r2
    5e34:	4a02      	ldr	r2, [pc, #8]	; (5e40 <SystemCoreClockUpdate+0x1c>)
    5e36:	6013      	str	r3, [r2, #0]
#endif
}
    5e38:	4770      	bx	lr
    5e3a:	bf00      	nop
    5e3c:	07a12000 	.word	0x07a12000
    5e40:	20000060 	.word	0x20000060

00005e44 <SystemInit>:

void SystemInit(void)
{
    5e44:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5e46:	f7ff ffd9 	bl	5dfc <nrf53_errata_97>
    5e4a:	b158      	cbz	r0, 5e64 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    5e4c:	4b3b      	ldr	r3, [pc, #236]	; (5f3c <SystemInit+0xf8>)
    5e4e:	681b      	ldr	r3, [r3, #0]
    5e50:	b943      	cbnz	r3, 5e64 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5e52:	4b3a      	ldr	r3, [pc, #232]	; (5f3c <SystemInit+0xf8>)
    5e54:	220d      	movs	r2, #13
    5e56:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5e58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5e5c:	2201      	movs	r2, #1
    5e5e:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5e60:	2200      	movs	r2, #0
    5e62:	601a      	str	r2, [r3, #0]
{
    5e64:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5e66:	2a1f      	cmp	r2, #31
    5e68:	d815      	bhi.n	5e96 <SystemInit+0x52>
    5e6a:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5e6e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5e72:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5e76:	f1b3 3fff 	cmp.w	r3, #4294967295
    5e7a:	d00c      	beq.n	5e96 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5e7c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5e80:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5e84:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5e88:	00db      	lsls	r3, r3, #3
    5e8a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    5e8e:	685b      	ldr	r3, [r3, #4]
    5e90:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5e92:	3201      	adds	r2, #1
    5e94:	e7e7      	b.n	5e66 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    5e96:	f7ff ff89 	bl	5dac <nrf53_errata_64>
    5e9a:	b128      	cbz	r0, 5ea8 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    5e9c:	4b28      	ldr	r3, [pc, #160]	; (5f40 <SystemInit+0xfc>)
    5e9e:	2229      	movs	r2, #41	; 0x29
    5ea0:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5ea2:	3330      	adds	r3, #48	; 0x30
    5ea4:	2203      	movs	r2, #3
    5ea6:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5ea8:	f7ff ff36 	bl	5d18 <nrf53_errata_42>
    5eac:	b138      	cbz	r0, 5ebe <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    5eae:	4b25      	ldr	r3, [pc, #148]	; (5f44 <SystemInit+0x100>)
    5eb0:	4a25      	ldr	r2, [pc, #148]	; (5f48 <SystemInit+0x104>)
    5eb2:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5eb4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5eb8:	2201      	movs	r2, #1
    5eba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    5ebe:	f7ff ff3f 	bl	5d40 <nrf53_errata_46>
    5ec2:	b110      	cbz	r0, 5eca <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5ec4:	4b21      	ldr	r3, [pc, #132]	; (5f4c <SystemInit+0x108>)
    5ec6:	2200      	movs	r2, #0
    5ec8:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    5eca:	f7ff ff51 	bl	5d70 <nrf53_errata_49>
    5ece:	b168      	cbz	r0, 5eec <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5ed0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ed4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5ed8:	f013 0f01 	tst.w	r3, #1
    5edc:	d006      	beq.n	5eec <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5ede:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ee2:	2200      	movs	r2, #0
    5ee4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5ee8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5eec:	f7ff ff54 	bl	5d98 <nrf53_errata_55>
    5ef0:	b160      	cbz	r0, 5f0c <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    5ef2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ef6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5efa:	f013 0f01 	tst.w	r3, #1
    5efe:	d005      	beq.n	5f0c <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    5f00:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f04:	f06f 0201 	mvn.w	r2, #1
    5f08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    5f0c:	f7ff ff62 	bl	5dd4 <nrf53_errata_69>
    5f10:	b110      	cbz	r0, 5f18 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    5f12:	4b0b      	ldr	r3, [pc, #44]	; (5f40 <SystemInit+0xfc>)
    5f14:	2265      	movs	r2, #101	; 0x65
    5f16:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5f18:	4a0d      	ldr	r2, [pc, #52]	; (5f50 <SystemInit+0x10c>)
    5f1a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    5f1e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    5f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5f26:	4a0b      	ldr	r2, [pc, #44]	; (5f54 <SystemInit+0x110>)
    5f28:	6811      	ldr	r1, [r2, #0]
    5f2a:	4b0b      	ldr	r3, [pc, #44]	; (5f58 <SystemInit+0x114>)
    5f2c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    5f30:	69d2      	ldr	r2, [r2, #28]
    5f32:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5f36:	f7ff ff75 	bl	5e24 <SystemCoreClockUpdate>
}
    5f3a:	bd08      	pop	{r3, pc}
    5f3c:	50004a20 	.word	0x50004a20
    5f40:	5000470c 	.word	0x5000470c
    5f44:	50039530 	.word	0x50039530
    5f48:	beef0044 	.word	0xbeef0044
    5f4c:	5003254c 	.word	0x5003254c
    5f50:	e000ed00 	.word	0xe000ed00
    5f54:	00ff8000 	.word	0x00ff8000
    5f58:	50006000 	.word	0x50006000

00005f5c <nrf53_errata_4>:
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5f5c:	4b08      	ldr	r3, [pc, #32]	; (5f80 <nrf53_errata_4+0x24>)
    5f5e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5f60:	3304      	adds	r3, #4
    5f62:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    5f64:	2a07      	cmp	r2, #7
    5f66:	d001      	beq.n	5f6c <nrf53_errata_4+0x10>
        return false;
    5f68:	2000      	movs	r0, #0
    5f6a:	4770      	bx	lr
                    switch(var2)
    5f6c:	3b02      	subs	r3, #2
    5f6e:	2b00      	cmp	r3, #0
    5f70:	d804      	bhi.n	5f7c <nrf53_errata_4+0x20>
    5f72:	e8df f003 	tbb	[pc, r3]
    5f76:	01          	.byte	0x01
    5f77:	00          	.byte	0x00
                if (var1 == 0x07)
    5f78:	2001      	movs	r0, #1
    5f7a:	4770      	bx	lr
                            return false;
    5f7c:	2000      	movs	r0, #0
}
    5f7e:	4770      	bx	lr
    5f80:	00ff0130 	.word	0x00ff0130

00005f84 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5f84:	4b05      	ldr	r3, [pc, #20]	; (5f9c <nrfx_clock_init+0x18>)
    5f86:	791b      	ldrb	r3, [r3, #4]
    5f88:	b92b      	cbnz	r3, 5f96 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5f8a:	4b04      	ldr	r3, [pc, #16]	; (5f9c <nrfx_clock_init+0x18>)
    5f8c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5f8e:	2201      	movs	r2, #1
    5f90:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5f92:	4803      	ldr	r0, [pc, #12]	; (5fa0 <nrfx_clock_init+0x1c>)
    5f94:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5f96:	4803      	ldr	r0, [pc, #12]	; (5fa4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	200159d0 	.word	0x200159d0
    5fa0:	0bad0000 	.word	0x0bad0000
    5fa4:	0bad000c 	.word	0x0bad000c

00005fa8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5fa8:	2803      	cmp	r0, #3
    5faa:	d84e      	bhi.n	604a <nrfx_clock_start+0xa2>
    5fac:	e8df f000 	tbb	[pc, r0]
    5fb0:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fb4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5fb8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5fbc:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fc0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5fc4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5fc8:	d111      	bne.n	5fee <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fce:	2201      	movs	r2, #1
    5fd0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fd4:	4b1d      	ldr	r3, [pc, #116]	; (604c <nrfx_clock_start+0xa4>)
    5fd6:	2200      	movs	r2, #0
    5fd8:	601a      	str	r2, [r3, #0]
    5fda:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5fdc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fe0:	2202      	movs	r2, #2
    5fe2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fe6:	3308      	adds	r3, #8
    5fe8:	2201      	movs	r2, #1
    5fea:	601a      	str	r2, [r3, #0]
}
    5fec:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5fee:	2b02      	cmp	r3, #2
    5ff0:	d1eb      	bne.n	5fca <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5ff2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ff6:	2202      	movs	r2, #2
    5ff8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5ffc:	e7ea      	b.n	5fd4 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ffe:	4b14      	ldr	r3, [pc, #80]	; (6050 <nrfx_clock_start+0xa8>)
    6000:	2200      	movs	r2, #0
    6002:	601a      	str	r2, [r3, #0]
    6004:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6006:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    600a:	2201      	movs	r2, #1
    600c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6010:	601a      	str	r2, [r3, #0]
}
    6012:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6014:	4b0f      	ldr	r3, [pc, #60]	; (6054 <nrfx_clock_start+0xac>)
    6016:	2200      	movs	r2, #0
    6018:	601a      	str	r2, [r3, #0]
    601a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    601c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6020:	f44f 7200 	mov.w	r2, #512	; 0x200
    6024:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6028:	3320      	adds	r3, #32
    602a:	2201      	movs	r2, #1
    602c:	601a      	str	r2, [r3, #0]
}
    602e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6030:	4b09      	ldr	r3, [pc, #36]	; (6058 <nrfx_clock_start+0xb0>)
    6032:	2200      	movs	r2, #0
    6034:	601a      	str	r2, [r3, #0]
    6036:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6038:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    603c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6040:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6044:	3318      	adds	r3, #24
    6046:	2201      	movs	r2, #1
    6048:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    604a:	4770      	bx	lr
    604c:	50005104 	.word	0x50005104
    6050:	50005100 	.word	0x50005100
    6054:	50005124 	.word	0x50005124
    6058:	50005120 	.word	0x50005120

0000605c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    605c:	b570      	push	{r4, r5, r6, lr}
    605e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    6060:	2803      	cmp	r0, #3
    6062:	f200 80cd 	bhi.w	6200 <nrfx_clock_stop+0x1a4>
    6066:	e8df f000 	tbb	[pc, r0]
    606a:	1402      	.short	0x1402
    606c:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    606e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6072:	2202      	movs	r2, #2
    6074:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6078:	f503 7382 	add.w	r3, r3, #260	; 0x104
    607c:	2200      	movs	r2, #0
    607e:	601a      	str	r2, [r3, #0]
    6080:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6082:	4b60      	ldr	r3, [pc, #384]	; (6204 <nrfx_clock_stop+0x1a8>)
    6084:	2201      	movs	r2, #1
    6086:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6088:	2c01      	cmp	r4, #1
    608a:	d02d      	beq.n	60e8 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    608c:	f242 7510 	movw	r5, #10000	; 0x2710
    6090:	e0a1      	b.n	61d6 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    6092:	2301      	movs	r3, #1
    6094:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6098:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    609c:	f502 7280 	add.w	r2, r2, #256	; 0x100
    60a0:	2100      	movs	r1, #0
    60a2:	6011      	str	r1, [r2, #0]
    60a4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60a6:	4a58      	ldr	r2, [pc, #352]	; (6208 <nrfx_clock_stop+0x1ac>)
    60a8:	6013      	str	r3, [r2, #0]
}
    60aa:	e7ed      	b.n	6088 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    60ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    60b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60b8:	f503 7392 	add.w	r3, r3, #292	; 0x124
    60bc:	2200      	movs	r2, #0
    60be:	601a      	str	r2, [r3, #0]
    60c0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60c2:	4b52      	ldr	r3, [pc, #328]	; (620c <nrfx_clock_stop+0x1b0>)
    60c4:	2201      	movs	r2, #1
    60c6:	601a      	str	r2, [r3, #0]
}
    60c8:	e7de      	b.n	6088 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    60ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60ce:	f44f 7280 	mov.w	r2, #256	; 0x100
    60d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
    60da:	2200      	movs	r2, #0
    60dc:	601a      	str	r2, [r3, #0]
    60de:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60e0:	4b4b      	ldr	r3, [pc, #300]	; (6210 <nrfx_clock_stop+0x1b4>)
    60e2:	2201      	movs	r2, #1
    60e4:	601a      	str	r2, [r3, #0]
}
    60e6:	e7cf      	b.n	6088 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    60e8:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    60ea:	f242 7510 	movw	r5, #10000	; 0x2710
    60ee:	e035      	b.n	615c <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60f4:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    60f8:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60fc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6100:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6104:	d13a      	bne.n	617c <nrfx_clock_stop+0x120>
    return false;
    6106:	2300      	movs	r3, #0
    6108:	e01f      	b.n	614a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    610a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    610e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    6112:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6116:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    611a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    611e:	d12f      	bne.n	6180 <nrfx_clock_stop+0x124>
    return false;
    6120:	2300      	movs	r3, #0
    6122:	e012      	b.n	614a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6124:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6128:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    612c:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6130:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    6134:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6138:	d124      	bne.n	6184 <nrfx_clock_stop+0x128>
    return false;
    613a:	2300      	movs	r3, #0
    613c:	e005      	b.n	614a <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    613e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6142:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    6146:	f3c3 4300 	ubfx	r3, r3, #16, #1
    614a:	2b00      	cmp	r3, #0
    614c:	d058      	beq.n	6200 <nrfx_clock_stop+0x1a4>
    614e:	2e01      	cmp	r6, #1
    6150:	d156      	bne.n	6200 <nrfx_clock_stop+0x1a4>
    6152:	2001      	movs	r0, #1
    6154:	f00f f85e 	bl	15214 <nrfx_busy_wait>
    6158:	3d01      	subs	r5, #1
    615a:	d051      	beq.n	6200 <nrfx_clock_stop+0x1a4>
    switch (domain)
    615c:	2c03      	cmp	r4, #3
    615e:	d80b      	bhi.n	6178 <nrfx_clock_stop+0x11c>
    6160:	a301      	add	r3, pc, #4	; (adr r3, 6168 <nrfx_clock_stop+0x10c>)
    6162:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    6166:	bf00      	nop
    6168:	000060f1 	.word	0x000060f1
    616c:	0000610b 	.word	0x0000610b
    6170:	00006125 	.word	0x00006125
    6174:	0000613f 	.word	0x0000613f
    6178:	2300      	movs	r3, #0
    617a:	e7e6      	b.n	614a <nrfx_clock_stop+0xee>
                return true;
    617c:	2301      	movs	r3, #1
    617e:	e7e4      	b.n	614a <nrfx_clock_stop+0xee>
                return true;
    6180:	2301      	movs	r3, #1
    6182:	e7e2      	b.n	614a <nrfx_clock_stop+0xee>
                return true;
    6184:	2301      	movs	r3, #1
    6186:	e7e0      	b.n	614a <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6188:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    618c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6190:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6194:	d12e      	bne.n	61f4 <nrfx_clock_stop+0x198>
    return false;
    6196:	2300      	movs	r3, #0
    6198:	e017      	b.n	61ca <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    619a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    619e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    61a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    61a6:	d127      	bne.n	61f8 <nrfx_clock_stop+0x19c>
    return false;
    61a8:	2300      	movs	r3, #0
    61aa:	e00e      	b.n	61ca <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    61ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61b0:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    61b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    61b8:	d120      	bne.n	61fc <nrfx_clock_stop+0x1a0>
    return false;
    61ba:	2300      	movs	r3, #0
    61bc:	e005      	b.n	61ca <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    61be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61c2:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    61c6:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    61ca:	b1cb      	cbz	r3, 6200 <nrfx_clock_stop+0x1a4>
    61cc:	2001      	movs	r0, #1
    61ce:	f00f f821 	bl	15214 <nrfx_busy_wait>
    61d2:	3d01      	subs	r5, #1
    61d4:	d014      	beq.n	6200 <nrfx_clock_stop+0x1a4>
    switch (domain)
    61d6:	2c03      	cmp	r4, #3
    61d8:	d80a      	bhi.n	61f0 <nrfx_clock_stop+0x194>
    61da:	a301      	add	r3, pc, #4	; (adr r3, 61e0 <nrfx_clock_stop+0x184>)
    61dc:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    61e0:	00006189 	.word	0x00006189
    61e4:	0000619b 	.word	0x0000619b
    61e8:	000061ad 	.word	0x000061ad
    61ec:	000061bf 	.word	0x000061bf
    61f0:	2300      	movs	r3, #0
    61f2:	e7ea      	b.n	61ca <nrfx_clock_stop+0x16e>
                return true;
    61f4:	2301      	movs	r3, #1
    61f6:	e7e8      	b.n	61ca <nrfx_clock_stop+0x16e>
                return true;
    61f8:	2301      	movs	r3, #1
    61fa:	e7e6      	b.n	61ca <nrfx_clock_stop+0x16e>
                return true;
    61fc:	2301      	movs	r3, #1
    61fe:	e7e4      	b.n	61ca <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6200:	bd70      	pop	{r4, r5, r6, pc}
    6202:	bf00      	nop
    6204:	5000500c 	.word	0x5000500c
    6208:	50005004 	.word	0x50005004
    620c:	50005024 	.word	0x50005024
    6210:	5000501c 	.word	0x5000501c

00006214 <nrfx_clock_divider_set>:
}

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK192M
nrfx_err_t nrfx_clock_divider_set(nrf_clock_domain_t domain,
                                  nrf_clock_hfclk_div_t div)
{
    6214:	b510      	push	{r4, lr}
    6216:	460c      	mov	r4, r1
    switch(domain)
    6218:	2801      	cmp	r0, #1
    621a:	d003      	beq.n	6224 <nrfx_clock_divider_set+0x10>
    621c:	2802      	cmp	r0, #2
    621e:	d05a      	beq.n	62d6 <nrfx_clock_divider_set+0xc2>
    6220:	4834      	ldr	r0, [pc, #208]	; (62f4 <nrfx_clock_divider_set+0xe0>)
#endif
        default:
            NRFX_ASSERT(0);
            return NRFX_ERROR_NOT_SUPPORTED;
    }
}
    6222:	bd10      	pop	{r4, pc}
            switch (div)
    6224:	b359      	cbz	r1, 627e <nrfx_clock_divider_set+0x6a>
    6226:	2901      	cmp	r1, #1
    6228:	d15f      	bne.n	62ea <nrfx_clock_divider_set+0xd6>
                    if (nrf53_errata_4())
    622a:	f7ff fe97 	bl	5f5c <nrf53_errata_4>
    622e:	b1f8      	cbz	r0, 6270 <nrfx_clock_divider_set+0x5c>
	__asm__ volatile(
    6230:	f04f 0320 	mov.w	r3, #32
    6234:	f3ef 8211 	mrs	r2, BASEPRI
    6238:	f383 8812 	msr	BASEPRI_MAX, r3
    623c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6240:	f3bf 8f4f 	dsb	sy

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)
NRF_STATIC_INLINE
void nrf_clock_hfclk_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    6244:	f004 0403 	and.w	r4, r4, #3
    6248:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    624c:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        *(volatile uint32_t *)0x5084450C = 0x0;
    6250:	2300      	movs	r3, #0
    6252:	4929      	ldr	r1, [pc, #164]	; (62f8 <nrfx_clock_divider_set+0xe4>)
    6254:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50026548 = 0x0;
    6256:	4929      	ldr	r1, [pc, #164]	; (62fc <nrfx_clock_divider_set+0xe8>)
    6258:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x0D;
    625a:	4b29      	ldr	r3, [pc, #164]	; (6300 <nrfx_clock_divider_set+0xec>)
    625c:	210d      	movs	r1, #13
    625e:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    6260:	f382 8811 	msr	BASEPRI, r2
    6264:	f3bf 8f6f 	isb	sy
            SystemCoreClockUpdate();
    6268:	f7ff fddc 	bl	5e24 <SystemCoreClockUpdate>
            return NRFX_SUCCESS;
    626c:	4825      	ldr	r0, [pc, #148]	; (6304 <nrfx_clock_divider_set+0xf0>)
    626e:	e7d8      	b.n	6222 <nrfx_clock_divider_set+0xe>
    6270:	f004 0403 	and.w	r4, r4, #3
    6274:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6278:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}
    627c:	e7f4      	b.n	6268 <nrfx_clock_divider_set+0x54>
                    if (nrf53_errata_4())
    627e:	f7ff fe6d 	bl	5f5c <nrf53_errata_4>
    6282:	b308      	cbz	r0, 62c8 <nrfx_clock_divider_set+0xb4>
	__asm__ volatile(
    6284:	f04f 0220 	mov.w	r2, #32
    6288:	f3ef 8311 	mrs	r3, BASEPRI
    628c:	f382 8812 	msr	BASEPRI_MAX, r2
    6290:	f3bf 8f6f 	isb	sy
    6294:	f3bf 8f4f 	dsb	sy
                        *(volatile uint32_t *)0x5084450C = 0x4040;
    6298:	4a17      	ldr	r2, [pc, #92]	; (62f8 <nrfx_clock_divider_set+0xe4>)
    629a:	f244 0140 	movw	r1, #16448	; 0x4040
    629e:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50026548 = 0x40;
    62a0:	4a16      	ldr	r2, [pc, #88]	; (62fc <nrfx_clock_divider_set+0xe8>)
    62a2:	2140      	movs	r1, #64	; 0x40
    62a4:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x4D;
    62a6:	f502 22b7 	add.w	r2, r2, #374784	; 0x5b800
    62aa:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
    62ae:	214d      	movs	r1, #77	; 0x4d
    62b0:	6011      	str	r1, [r2, #0]
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    62b2:	f004 0403 	and.w	r4, r4, #3
    62b6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    62ba:	f8c2 4558 	str.w	r4, [r2, #1368]	; 0x558
	__asm__ volatile(
    62be:	f383 8811 	msr	BASEPRI, r3
    62c2:	f3bf 8f6f 	isb	sy
}
    62c6:	e7cf      	b.n	6268 <nrfx_clock_divider_set+0x54>
    62c8:	f004 0403 	and.w	r4, r4, #3
    62cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62d0:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
}
    62d4:	e7c8      	b.n	6268 <nrfx_clock_divider_set+0x54>
            if (div > NRF_CLOCK_HFCLK_DIV_4)
    62d6:	2902      	cmp	r1, #2
    62d8:	d809      	bhi.n	62ee <nrfx_clock_divider_set+0xda>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    62da:	f001 0403 	and.w	r4, r1, #3
    62de:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62e2:	f8c3 45b8 	str.w	r4, [r3, #1464]	; 0x5b8
            return NRFX_SUCCESS;
    62e6:	4807      	ldr	r0, [pc, #28]	; (6304 <nrfx_clock_divider_set+0xf0>)
    62e8:	e79b      	b.n	6222 <nrfx_clock_divider_set+0xe>
    62ea:	4807      	ldr	r0, [pc, #28]	; (6308 <nrfx_clock_divider_set+0xf4>)
    62ec:	e799      	b.n	6222 <nrfx_clock_divider_set+0xe>
                return NRFX_ERROR_INVALID_PARAM;
    62ee:	4806      	ldr	r0, [pc, #24]	; (6308 <nrfx_clock_divider_set+0xf4>)
    62f0:	e797      	b.n	6222 <nrfx_clock_divider_set+0xe>
    62f2:	bf00      	nop
    62f4:	0bad0003 	.word	0x0bad0003
    62f8:	5084450c 	.word	0x5084450c
    62fc:	50026548 	.word	0x50026548
    6300:	50081ee4 	.word	0x50081ee4
    6304:	0bad0000 	.word	0x0bad0000
    6308:	0bad0004 	.word	0x0bad0004

0000630c <nrfx_power_clock_irq_handler>:
#endif

void nrfx_clock_irq_handler(void)
{
    630c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    630e:	4b2a      	ldr	r3, [pc, #168]	; (63b8 <nrfx_power_clock_irq_handler+0xac>)
    6310:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6312:	b15b      	cbz	r3, 632c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6314:	4b28      	ldr	r3, [pc, #160]	; (63b8 <nrfx_power_clock_irq_handler+0xac>)
    6316:	2000      	movs	r0, #0
    6318:	6018      	str	r0, [r3, #0]
    631a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    631c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6320:	2201      	movs	r2, #1
    6322:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6326:	4b25      	ldr	r3, [pc, #148]	; (63bc <nrfx_power_clock_irq_handler+0xb0>)
    6328:	681b      	ldr	r3, [r3, #0]
    632a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    632c:	4b24      	ldr	r3, [pc, #144]	; (63c0 <nrfx_power_clock_irq_handler+0xb4>)
    632e:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6330:	b1b3      	cbz	r3, 6360 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6332:	4b23      	ldr	r3, [pc, #140]	; (63c0 <nrfx_power_clock_irq_handler+0xb4>)
    6334:	2200      	movs	r2, #0
    6336:	601a      	str	r2, [r3, #0]
    6338:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    633a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    633e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6342:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6346:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    634a:	2b01      	cmp	r3, #1
    634c:	d02b      	beq.n	63a6 <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    634e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6352:	2202      	movs	r2, #2
    6354:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6358:	4b18      	ldr	r3, [pc, #96]	; (63bc <nrfx_power_clock_irq_handler+0xb0>)
    635a:	681b      	ldr	r3, [r3, #0]
    635c:	2001      	movs	r0, #1
    635e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6360:	4b18      	ldr	r3, [pc, #96]	; (63c4 <nrfx_power_clock_irq_handler+0xb8>)
    6362:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    6364:	b16b      	cbz	r3, 6382 <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6366:	4b17      	ldr	r3, [pc, #92]	; (63c4 <nrfx_power_clock_irq_handler+0xb8>)
    6368:	2200      	movs	r2, #0
    636a:	601a      	str	r2, [r3, #0]
    636c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    636e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6372:	f44f 7280 	mov.w	r2, #256	; 0x100
    6376:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    637a:	4b10      	ldr	r3, [pc, #64]	; (63bc <nrfx_power_clock_irq_handler+0xb0>)
    637c:	681b      	ldr	r3, [r3, #0]
    637e:	2004      	movs	r0, #4
    6380:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6382:	4b11      	ldr	r3, [pc, #68]	; (63c8 <nrfx_power_clock_irq_handler+0xbc>)
    6384:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    6386:	b16b      	cbz	r3, 63a4 <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6388:	4b0f      	ldr	r3, [pc, #60]	; (63c8 <nrfx_power_clock_irq_handler+0xbc>)
    638a:	2200      	movs	r2, #0
    638c:	601a      	str	r2, [r3, #0]
    638e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6390:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6394:	f44f 7200 	mov.w	r2, #512	; 0x200
    6398:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    639c:	4b07      	ldr	r3, [pc, #28]	; (63bc <nrfx_power_clock_irq_handler+0xb0>)
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	2005      	movs	r0, #5
    63a2:	4798      	blx	r3
    }
#endif
}
    63a4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    63a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    63aa:	2202      	movs	r2, #2
    63ac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63b0:	3308      	adds	r3, #8
    63b2:	2201      	movs	r2, #1
    63b4:	601a      	str	r2, [r3, #0]
}
    63b6:	e7d3      	b.n	6360 <nrfx_power_clock_irq_handler+0x54>
    63b8:	50005100 	.word	0x50005100
    63bc:	200159d0 	.word	0x200159d0
    63c0:	50005104 	.word	0x50005104
    63c4:	50005120 	.word	0x50005120
    63c8:	50005124 	.word	0x50005124

000063cc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    63cc:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
    63ce:	f04f 0320 	mov.w	r3, #32
    63d2:	f3ef 8611 	mrs	r6, BASEPRI
    63d6:	f383 8812 	msr	BASEPRI_MAX, r3
    63da:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    63de:	4b0e      	ldr	r3, [pc, #56]	; (6418 <nrfx_dppi_channel_alloc+0x4c>)
    63e0:	681d      	ldr	r5, [r3, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    63e2:	43e9      	mvns	r1, r5
    63e4:	d016      	beq.n	6414 <nrfx_dppi_channel_alloc+0x48>
    uint8_t channel = 0;
    63e6:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    63e8:	fa21 f203 	lsr.w	r2, r1, r3
    63ec:	f012 0f01 	tst.w	r2, #1
    63f0:	d102      	bne.n	63f8 <nrfx_dppi_channel_alloc+0x2c>
        {
            channel++;
    63f2:	3301      	adds	r3, #1
    63f4:	b2db      	uxtb	r3, r3
    63f6:	e7f7      	b.n	63e8 <nrfx_dppi_channel_alloc+0x1c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    63f8:	2201      	movs	r2, #1
    63fa:	fa02 f403 	lsl.w	r4, r2, r3
    63fe:	4325      	orrs	r5, r4
    6400:	4a05      	ldr	r2, [pc, #20]	; (6418 <nrfx_dppi_channel_alloc+0x4c>)
    6402:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
    6404:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
    6406:	4805      	ldr	r0, [pc, #20]	; (641c <nrfx_dppi_channel_alloc+0x50>)
	__asm__ volatile(
    6408:	f386 8811 	msr	BASEPRI, r6
    640c:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    6410:	bc70      	pop	{r4, r5, r6}
    6412:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
    6414:	4802      	ldr	r0, [pc, #8]	; (6420 <nrfx_dppi_channel_alloc+0x54>)
    6416:	e7f7      	b.n	6408 <nrfx_dppi_channel_alloc+0x3c>
    6418:	200159d8 	.word	0x200159d8
    641c:	0bad0000 	.word	0x0bad0000
    6420:	0bad0002 	.word	0x0bad0002

00006424 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    6424:	4b04      	ldr	r3, [pc, #16]	; (6438 <is_allocated_channel+0x14>)
    6426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    6428:	2301      	movs	r3, #1
    642a:	4083      	lsls	r3, r0
    642c:	421a      	tst	r2, r3
}
    642e:	bf14      	ite	ne
    6430:	2001      	movne	r0, #1
    6432:	2000      	moveq	r0, #0
    6434:	4770      	bx	lr
    6436:	bf00      	nop
    6438:	200159dc 	.word	0x200159dc

0000643c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    643c:	2301      	movs	r3, #1
    643e:	fa03 f000 	lsl.w	r0, r3, r0
    6442:	4a02      	ldr	r2, [pc, #8]	; (644c <channel_allocated_set+0x10>)
    6444:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6446:	4303      	orrs	r3, r0
    6448:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    644a:	4770      	bx	lr
    644c:	200159dc 	.word	0x200159dc

00006450 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    6450:	2301      	movs	r3, #1
    6452:	fa03 f000 	lsl.w	r0, r3, r0
    6456:	4a03      	ldr	r2, [pc, #12]	; (6464 <channel_allocated_clr+0x14>)
    6458:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    645a:	ea23 0300 	bic.w	r3, r3, r0
    645e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    6460:	4770      	bx	lr
    6462:	bf00      	nop
    6464:	200159dc 	.word	0x200159dc

00006468 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    6468:	b538      	push	{r3, r4, r5, lr}
    646a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    646c:	f00e fee7 	bl	1523e <is_app_channel>
    6470:	b908      	cbnz	r0, 6476 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    6472:	4809      	ldr	r0, [pc, #36]	; (6498 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6474:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6476:	f04f 0320 	mov.w	r3, #32
    647a:	f3ef 8511 	mrs	r5, BASEPRI
    647e:	f383 8812 	msr	BASEPRI_MAX, r3
    6482:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    6486:	4620      	mov	r0, r4
    6488:	f7ff ffe2 	bl	6450 <channel_allocated_clr>
	__asm__ volatile(
    648c:	f385 8811 	msr	BASEPRI, r5
    6490:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    6494:	4801      	ldr	r0, [pc, #4]	; (649c <nrfx_gpiote_channel_free+0x34>)
}
    6496:	e7ed      	b.n	6474 <nrfx_gpiote_channel_free+0xc>
    6498:	0bad0004 	.word	0x0bad0004
    649c:	0bad0000 	.word	0x0bad0000

000064a0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    64a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    64a4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64a6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    64a8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    64aa:	4f17      	ldr	r7, [pc, #92]	; (6508 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64ac:	e013      	b.n	64d6 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    64ae:	4620      	mov	r0, r4
    64b0:	f7ff ffc4 	bl	643c <channel_allocated_set>
            *p_channel = ch_idx;
    64b4:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    64b8:	4f14      	ldr	r7, [pc, #80]	; (650c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    64ba:	f386 8811 	msr	BASEPRI, r6
    64be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    64c2:	4b12      	ldr	r3, [pc, #72]	; (650c <nrfx_gpiote_channel_alloc+0x6c>)
    64c4:	429f      	cmp	r7, r3
    64c6:	d01b      	beq.n	6500 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    64c8:	2301      	movs	r3, #1
    64ca:	fa03 f309 	lsl.w	r3, r3, r9
    64ce:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    64d2:	3401      	adds	r4, #1
    64d4:	b2e4      	uxtb	r4, r4
    64d6:	b19d      	cbz	r5, 6500 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    64d8:	f04f 0320 	mov.w	r3, #32
    64dc:	f3ef 8611 	mrs	r6, BASEPRI
    64e0:	f383 8812 	msr	BASEPRI_MAX, r3
    64e4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    64e8:	46a1      	mov	r9, r4
    64ea:	fa25 f304 	lsr.w	r3, r5, r4
    64ee:	f013 0f01 	tst.w	r3, #1
    64f2:	d0e2      	beq.n	64ba <nrfx_gpiote_channel_alloc+0x1a>
    64f4:	4620      	mov	r0, r4
    64f6:	f7ff ff95 	bl	6424 <is_allocated_channel>
    64fa:	2800      	cmp	r0, #0
    64fc:	d1dd      	bne.n	64ba <nrfx_gpiote_channel_alloc+0x1a>
    64fe:	e7d6      	b.n	64ae <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6500:	4638      	mov	r0, r7
    6502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6506:	bf00      	nop
    6508:	0bad0002 	.word	0x0bad0002
    650c:	0bad0000 	.word	0x0bad0000

00006510 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6510:	b570      	push	{r4, r5, r6, lr}
    6512:	b082      	sub	sp, #8
    6514:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6516:	6905      	ldr	r5, [r0, #16]
    6518:	6983      	ldr	r3, [r0, #24]
    651a:	429d      	cmp	r5, r3
    651c:	d006      	beq.n	652c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    651e:	490f      	ldr	r1, [pc, #60]	; (655c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6520:	6840      	ldr	r0, [r0, #4]
    6522:	f00f fcc7 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6526:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6528:	b002      	add	sp, #8
    652a:	bd70      	pop	{r4, r5, r6, pc}
    652c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    652e:	4611      	mov	r1, r2
    6530:	6880      	ldr	r0, [r0, #8]
    6532:	f00e fec8 	bl	152c6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6536:	6963      	ldr	r3, [r4, #20]
    6538:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    653a:	42b3      	cmp	r3, r6
    653c:	d304      	bcc.n	6548 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    653e:	4430      	add	r0, r6
    6540:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    6542:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    6544:	2000      	movs	r0, #0
    6546:	e7ef      	b.n	6528 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    6548:	1af2      	subs	r2, r6, r3
    654a:	9200      	str	r2, [sp, #0]
    654c:	4632      	mov	r2, r6
    654e:	4904      	ldr	r1, [pc, #16]	; (6560 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    6550:	6860      	ldr	r0, [r4, #4]
    6552:	f00f fcaf 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    6556:	2001      	movs	r0, #1
    6558:	e7e6      	b.n	6528 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    655a:	bf00      	nop
    655c:	000324f8 	.word	0x000324f8
    6560:	00032550 	.word	0x00032550

00006564 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    6564:	b530      	push	{r4, r5, lr}
    6566:	b083      	sub	sp, #12
    6568:	4605      	mov	r5, r0
    656a:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    656c:	4611      	mov	r1, r2
    656e:	6980      	ldr	r0, [r0, #24]
    6570:	f00e fea9 	bl	152c6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6574:	696b      	ldr	r3, [r5, #20]
    6576:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    6578:	42a3      	cmp	r3, r4
    657a:	d303      	bcc.n	6584 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    657c:	4404      	add	r4, r0
    657e:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    6580:	b003      	add	sp, #12
    6582:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    6584:	1ae2      	subs	r2, r4, r3
    6586:	9200      	str	r2, [sp, #0]
    6588:	4622      	mov	r2, r4
    658a:	4903      	ldr	r1, [pc, #12]	; (6598 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    658c:	6868      	ldr	r0, [r5, #4]
    658e:	f00f fc91 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    6592:	2000      	movs	r0, #0
    6594:	e7f4      	b.n	6580 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    6596:	bf00      	nop
    6598:	00032594 	.word	0x00032594

0000659c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    659c:	b530      	push	{r4, r5, lr}
    659e:	b083      	sub	sp, #12
    65a0:	4604      	mov	r4, r0
    65a2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    65a4:	6940      	ldr	r0, [r0, #20]
    65a6:	4611      	mov	r1, r2
    65a8:	1b40      	subs	r0, r0, r5
    65aa:	f00e fe93 	bl	152d4 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    65ae:	6923      	ldr	r3, [r4, #16]
    65b0:	4283      	cmp	r3, r0
    65b2:	d802      	bhi.n	65ba <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    65b4:	6160      	str	r0, [r4, #20]
}
    65b6:	b003      	add	sp, #12
    65b8:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    65ba:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    65bc:	9300      	str	r3, [sp, #0]
    65be:	1aeb      	subs	r3, r5, r3
    65c0:	462a      	mov	r2, r5
    65c2:	4903      	ldr	r1, [pc, #12]	; (65d0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    65c4:	6860      	ldr	r0, [r4, #4]
    65c6:	f00f fc75 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    65ca:	2000      	movs	r0, #0
    65cc:	e7f3      	b.n	65b6 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    65ce:	bf00      	nop
    65d0:	000325e0 	.word	0x000325e0

000065d4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    65d4:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    65d6:	4d05      	ldr	r5, [pc, #20]	; (65ec <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    65d8:	6005      	str	r5, [r0, #0]
    65da:	6041      	str	r1, [r0, #4]
    65dc:	6082      	str	r2, [r0, #8]
    65de:	60c3      	str	r3, [r0, #12]
    65e0:	6102      	str	r2, [r0, #16]
    65e2:	6143      	str	r3, [r0, #20]
    65e4:	6182      	str	r2, [r0, #24]
    65e6:	bc30      	pop	{r4, r5}
    65e8:	4770      	bx	lr
    65ea:	bf00      	nop
    65ec:	00032634 	.word	0x00032634

000065f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    65f0:	b510      	push	{r4, lr}
    65f2:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    65f4:	b300      	cbz	r0, 6638 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    65f6:	460c      	mov	r4, r1
    65f8:	4613      	mov	r3, r2
    65fa:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    65fc:	b1f4      	cbz	r4, 663c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    65fe:	4622      	mov	r2, r4
    6600:	a801      	add	r0, sp, #4
    6602:	f00e fe2e 	bl	15262 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6606:	2204      	movs	r2, #4
    6608:	211c      	movs	r1, #28
    660a:	eb0d 0002 	add.w	r0, sp, r2
    660e:	f7ff ffc5 	bl	659c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6612:	4603      	mov	r3, r0
    6614:	b168      	cbz	r0, 6632 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6616:	4a0a      	ldr	r2, [pc, #40]	; (6640 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6618:	6002      	str	r2, [r0, #0]
    661a:	9a02      	ldr	r2, [sp, #8]
    661c:	6042      	str	r2, [r0, #4]
    661e:	9a03      	ldr	r2, [sp, #12]
    6620:	6082      	str	r2, [r0, #8]
    6622:	9a04      	ldr	r2, [sp, #16]
    6624:	60c2      	str	r2, [r0, #12]
    6626:	9a05      	ldr	r2, [sp, #20]
    6628:	6102      	str	r2, [r0, #16]
    662a:	9a06      	ldr	r2, [sp, #24]
    662c:	6142      	str	r2, [r0, #20]
    662e:	9a07      	ldr	r2, [sp, #28]
    6630:	6182      	str	r2, [r0, #24]
}
    6632:	4618      	mov	r0, r3
    6634:	b008      	add	sp, #32
    6636:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6638:	f012 fa2c 	bl	18a94 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    663c:	f012 fa2a 	bl	18a94 <abort>
    6640:	00032634 	.word	0x00032634

00006644 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    6644:	b508      	push	{r3, lr}
    6646:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6648:	4b03      	ldr	r3, [pc, #12]	; (6658 <DebugLog+0x14>)
    664a:	681b      	ldr	r3, [r3, #0]
    664c:	4903      	ldr	r1, [pc, #12]	; (665c <DebugLog+0x18>)
    664e:	68d8      	ldr	r0, [r3, #12]
    6650:	f00c fa42 	bl	12ad8 <fiprintf>
#endif
}
    6654:	bd08      	pop	{r3, pc}
    6656:	bf00      	nop
    6658:	200000cc 	.word	0x200000cc
    665c:	0003264c 	.word	0x0003264c

00006660 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    6660:	b500      	push	{lr}
    6662:	b0c1      	sub	sp, #260	; 0x104
    6664:	4602      	mov	r2, r0
    6666:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    6668:	f44f 7180 	mov.w	r1, #256	; 0x100
    666c:	4668      	mov	r0, sp
    666e:	f000 f917 	bl	68a0 <MicroVsnprintf>
  DebugLog(log_buffer);
    6672:	4668      	mov	r0, sp
    6674:	f7ff ffe6 	bl	6644 <DebugLog>
  DebugLog("\r\n");
    6678:	4802      	ldr	r0, [pc, #8]	; (6684 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    667a:	f7ff ffe3 	bl	6644 <DebugLog>
#endif
}
    667e:	b041      	add	sp, #260	; 0x104
    6680:	f85d fb04 	ldr.w	pc, [sp], #4
    6684:	00035104 	.word	0x00035104

00006688 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    6688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    668c:	b083      	sub	sp, #12
    668e:	4680      	mov	r8, r0
    6690:	468b      	mov	fp, r1
    6692:	4692      	mov	sl, r2
    6694:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    6696:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    6698:	f00e fe92 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    669c:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    66a0:	4620      	mov	r0, r4
    66a2:	f00e fe93 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66a6:	2804      	cmp	r0, #4
    66a8:	d90d      	bls.n	66c6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    66aa:	1d20      	adds	r0, r4, #4
    66ac:	f00e fe8e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    66b0:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66b4:	b148      	cbz	r0, 66ca <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    66b6:	4620      	mov	r0, r4
    66b8:	f00e fe7c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66bc:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    66be:	b3ac      	cbz	r4, 672c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    66c0:	2500      	movs	r5, #0
  int element_count = 1;
    66c2:	2701      	movs	r7, #1
    66c4:	e01e      	b.n	6704 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66c6:	2000      	movs	r0, #0
    66c8:	e7f2      	b.n	66b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66ca:	2400      	movs	r4, #0
    66cc:	e7f7      	b.n	66be <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66ce:	1d20      	adds	r0, r4, #4
    66d0:	f00e fe7c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    66d4:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    66d6:	b300      	cbz	r0, 671a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    66d8:	4620      	mov	r0, r4
    66da:	f00e fe6b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    66de:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    66e0:	6820      	ldr	r0, [r4, #0]
    66e2:	f00d fc48 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    66e6:	4285      	cmp	r5, r0
    66e8:	d221      	bcs.n	672e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    66ea:	6820      	ldr	r0, [r4, #0]
    66ec:	f00d fc43 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    66f0:	4285      	cmp	r5, r0
    66f2:	d214      	bcs.n	671e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    66f4:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    66f6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    66fa:	f00e fe60 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    66fe:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6702:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6704:	4630      	mov	r0, r6
    6706:	f00e fe5b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    670a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    670c:	4620      	mov	r0, r4
    670e:	f00e fe5d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6712:	2804      	cmp	r0, #4
    6714:	d8db      	bhi.n	66ce <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6716:	2000      	movs	r0, #0
    6718:	e7dc      	b.n	66d4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    671a:	2400      	movs	r4, #0
    671c:	e7e0      	b.n	66e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    671e:	4b1a      	ldr	r3, [pc, #104]	; (6788 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6720:	4a1a      	ldr	r2, [pc, #104]	; (678c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6722:	f44f 7183 	mov.w	r1, #262	; 0x106
    6726:	481a      	ldr	r0, [pc, #104]	; (6790 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6728:	f00c f9b8 	bl	12a9c <__assert_func>
  int element_count = 1;
    672c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    672e:	4640      	mov	r0, r8
    6730:	f00e fe46 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6734:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6738:	4620      	mov	r0, r4
    673a:	f00e fe47 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    673e:	2806      	cmp	r0, #6
    6740:	d910      	bls.n	6764 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    6742:	1da0      	adds	r0, r4, #6
    6744:	f00e fe42 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6748:	b170      	cbz	r0, 6768 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    674a:	4440      	add	r0, r8
    674c:	f00e fe44 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    6750:	464a      	mov	r2, r9
    6752:	f10d 0107 	add.w	r1, sp, #7
    6756:	b2c0      	uxtb	r0, r0
    6758:	f003 f9b0 	bl	9abc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    675c:	b130      	cbz	r0, 676c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    675e:	b003      	add	sp, #12
    6760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6764:	2000      	movs	r0, #0
    6766:	e7ef      	b.n	6748 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6768:	2000      	movs	r0, #0
    676a:	e7f1      	b.n	6750 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    676c:	4651      	mov	r1, sl
    676e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6772:	f00e fdbb 	bl	152ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    6776:	2800      	cmp	r0, #0
    6778:	d1f1      	bne.n	675e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    677a:	f8da 3000 	ldr.w	r3, [sl]
    677e:	fb07 f703 	mul.w	r7, r7, r3
    6782:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    6786:	e7ea      	b.n	675e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    6788:	00032664 	.word	0x00032664
    678c:	00032670 	.word	0x00032670
    6790:	00032730 	.word	0x00032730

00006794 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    6794:	b5f0      	push	{r4, r5, r6, r7, lr}
    6796:	b089      	sub	sp, #36	; 0x24
    6798:	9001      	str	r0, [sp, #4]
    679a:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    679c:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    67a0:	2204      	movs	r2, #4
    67a2:	eb0d 0102 	add.w	r1, sp, r2
    67a6:	a807      	add	r0, sp, #28
    67a8:	f012 f99b 	bl	18ae2 <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    67ac:	9b07      	ldr	r3, [sp, #28]
    67ae:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    67b2:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    67b4:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    67b8:	2b00      	cmp	r3, #0
    67ba:	db0e      	blt.n	67da <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    67bc:	2300      	movs	r3, #0
    67be:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    67c0:	2c80      	cmp	r4, #128	; 0x80
    67c2:	d00e      	beq.n	67e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    67c4:	4b32      	ldr	r3, [pc, #200]	; (6890 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    67c6:	f10d 0c0c 	add.w	ip, sp, #12
    67ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    67cc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    67d0:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    67d4:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    67d6:	2300      	movs	r3, #0
    67d8:	e01a      	b.n	6810 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    67da:	232d      	movs	r3, #45	; 0x2d
    67dc:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    67e0:	e7ec      	b.n	67bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    67e2:	b937      	cbnz	r7, 67f2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    67e4:	4a2b      	ldr	r2, [pc, #172]	; (6894 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    67e6:	1ba9      	subs	r1, r5, r6
    67e8:	4630      	mov	r0, r6
    67ea:	f00e fe0c 	bl	15406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    67ee:	4607      	mov	r7, r0
      return current;
    67f0:	e04a      	b.n	6888 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    67f2:	4a29      	ldr	r2, [pc, #164]	; (6898 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    67f4:	1ba9      	subs	r1, r5, r6
    67f6:	4630      	mov	r0, r6
    67f8:	f00e fe05 	bl	15406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    67fc:	4607      	mov	r7, r0
      return current;
    67fe:	e043      	b.n	6888 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6800:	a908      	add	r1, sp, #32
    6802:	18c8      	adds	r0, r1, r3
    6804:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6808:	fa27 f000 	lsr.w	r0, r7, r0
    680c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    680e:	3301      	adds	r3, #1
    6810:	2b0c      	cmp	r3, #12
    6812:	ddf5      	ble.n	6800 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6814:	2331      	movs	r3, #49	; 0x31
    6816:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6818:	232e      	movs	r3, #46	; 0x2e
    681a:	7073      	strb	r3, [r6, #1]
  current += 1;
    681c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    681e:	2300      	movs	r3, #0
    6820:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6822:	1be9      	subs	r1, r5, r7
    6824:	2907      	cmp	r1, #7
    6826:	dd2f      	ble.n	6888 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6828:	2301      	movs	r3, #1
    682a:	2b06      	cmp	r3, #6
    682c:	dc03      	bgt.n	6836 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    682e:	2030      	movs	r0, #48	; 0x30
    6830:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6832:	3301      	adds	r3, #1
    6834:	e7f9      	b.n	682a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6836:	230a      	movs	r3, #10
    6838:	4638      	mov	r0, r7
    683a:	f00e fe31 	bl	154a0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    683e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6840:	2330      	movs	r3, #48	; 0x30
    6842:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    6844:	f1d1 0607 	rsbs	r6, r1, #7
    6848:	d00c      	beq.n	6864 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    684a:	2300      	movs	r3, #0
    684c:	428b      	cmp	r3, r1
    684e:	da06      	bge.n	685e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    6850:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    6854:	5582      	strb	r2, [r0, r6]
      *current = '0';
    6856:	2230      	movs	r2, #48	; 0x30
    6858:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    685a:	3301      	adds	r3, #1
    685c:	e7f6      	b.n	684c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    685e:	3007      	adds	r0, #7
    6860:	e000      	b.n	6864 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    6862:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    6864:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6868:	2b30      	cmp	r3, #48	; 0x30
    686a:	d102      	bne.n	6872 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    686c:	1e43      	subs	r3, r0, #1
    686e:	42bb      	cmp	r3, r7
    6870:	d8f7      	bhi.n	6862 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    6872:	2300      	movs	r3, #0
    6874:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    6876:	4a09      	ldr	r2, [pc, #36]	; (689c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    6878:	1a29      	subs	r1, r5, r0
    687a:	f00e fdc4 	bl	15406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    687e:	4622      	mov	r2, r4
    6880:	1a29      	subs	r1, r5, r0
    6882:	f00e fdfe 	bl	15482 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    6886:	4607      	mov	r7, r0
  return current;
}
    6888:	4638      	mov	r0, r7
    688a:	b009      	add	sp, #36	; 0x24
    688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    688e:	bf00      	nop
    6890:	000327a4 	.word	0x000327a4
    6894:	00032798 	.word	0x00032798
    6898:	0003279c 	.word	0x0003279c
    689c:	000327a0 	.word	0x000327a0

000068a0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    68a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68a2:	b083      	sub	sp, #12
    68a4:	4607      	mov	r7, r0
    68a6:	4615      	mov	r5, r2
    68a8:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    68aa:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    68ac:	2400      	movs	r4, #0
    68ae:	e07c      	b.n	69aa <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    68b0:	1b33      	subs	r3, r6, r4
    68b2:	2b0a      	cmp	r3, #10
    68b4:	dd09      	ble.n	68ca <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    68b6:	9b01      	ldr	r3, [sp, #4]
    68b8:	1d1a      	adds	r2, r3, #4
    68ba:	9201      	str	r2, [sp, #4]
    68bc:	6819      	ldr	r1, [r3, #0]
    68be:	1938      	adds	r0, r7, r4
    68c0:	f00e fdfe 	bl	154c0 <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    68c4:	4404      	add	r4, r0
          current++;
    68c6:	1caa      	adds	r2, r5, #2
          break;
    68c8:	e06e      	b.n	69a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68ca:	1c60      	adds	r0, r4, #1
    68cc:	2300      	movs	r3, #0
    68ce:	553b      	strb	r3, [r7, r4]
            return output_index;
    68d0:	e0b1      	b.n	6a36 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    68d2:	1b33      	subs	r3, r6, r4
    68d4:	2b0a      	cmp	r3, #10
    68d6:	dd09      	ble.n	68ec <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    68d8:	9b01      	ldr	r3, [sp, #4]
    68da:	1d1a      	adds	r2, r3, #4
    68dc:	9201      	str	r2, [sp, #4]
    68de:	6819      	ldr	r1, [r3, #0]
    68e0:	1938      	adds	r0, r7, r4
    68e2:	f00e fdf5 	bl	154d0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    68e6:	4404      	add	r4, r0
          current++;
    68e8:	1caa      	adds	r2, r5, #2
          break;
    68ea:	e05d      	b.n	69a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68ec:	1c60      	adds	r0, r4, #1
    68ee:	2300      	movs	r3, #0
    68f0:	553b      	strb	r3, [r7, r4]
            return output_index;
    68f2:	e0a0      	b.n	6a36 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    68f4:	1b33      	subs	r3, r6, r4
    68f6:	2b09      	cmp	r3, #9
    68f8:	dd0f      	ble.n	691a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    68fa:	1c63      	adds	r3, r4, #1
    68fc:	2230      	movs	r2, #48	; 0x30
    68fe:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6900:	3402      	adds	r4, #2
    6902:	2278      	movs	r2, #120	; 0x78
    6904:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	1d1a      	adds	r2, r3, #4
    690a:	9201      	str	r2, [sp, #4]
    690c:	6819      	ldr	r1, [r3, #0]
    690e:	1938      	adds	r0, r7, r4
    6910:	f00e fde7 	bl	154e2 <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6914:	4404      	add	r4, r0
          current++;
    6916:	1caa      	adds	r2, r5, #2
          break;
    6918:	e046      	b.n	69a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    691a:	1c60      	adds	r0, r4, #1
    691c:	2300      	movs	r3, #0
    691e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6920:	e089      	b.n	6a36 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6922:	1b30      	subs	r0, r6, r4
    6924:	f7fa f9a0 	bl	c68 <__aeabi_i2f>
    6928:	4944      	ldr	r1, [pc, #272]	; (6a3c <MicroVsnprintf+0x19c>)
    692a:	f7fa fb8f 	bl	104c <__aeabi_fcmplt>
    692e:	b988      	cbnz	r0, 6954 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6930:	9b01      	ldr	r3, [sp, #4]
    6932:	3307      	adds	r3, #7
    6934:	f023 0307 	bic.w	r3, r3, #7
    6938:	f103 0208 	add.w	r2, r3, #8
    693c:	9201      	str	r2, [sp, #4]
    693e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6942:	f7fa f887 	bl	a54 <__aeabi_d2f>
    6946:	4601      	mov	r1, r0
    6948:	1938      	adds	r0, r7, r4
    694a:	f00e fdd3 	bl	154f4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    694e:	4404      	add	r4, r0
          current++;
    6950:	1caa      	adds	r2, r5, #2
          break;
    6952:	e029      	b.n	69a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    6954:	1c60      	adds	r0, r4, #1
    6956:	2300      	movs	r3, #0
    6958:	553b      	strb	r3, [r7, r4]
            return output_index;
    695a:	e06c      	b.n	6a36 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    695c:	1caa      	adds	r2, r5, #2
    695e:	553b      	strb	r3, [r7, r4]
    6960:	3401      	adds	r4, #1
          break;
    6962:	e021      	b.n	69a8 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    6964:	1b33      	subs	r3, r6, r4
    6966:	2b00      	cmp	r3, #0
    6968:	dd07      	ble.n	697a <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	1d1a      	adds	r2, r3, #4
    696e:	9201      	str	r2, [sp, #4]
    6970:	681b      	ldr	r3, [r3, #0]
    6972:	553b      	strb	r3, [r7, r4]
          current++;
    6974:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    6976:	3401      	adds	r4, #1
          break;
    6978:	e016      	b.n	69a8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    697a:	1c60      	adds	r0, r4, #1
    697c:	2300      	movs	r3, #0
    697e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6980:	e059      	b.n	6a36 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	1d1a      	adds	r2, r3, #4
    6986:	9201      	str	r2, [sp, #4]
    6988:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    698a:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    698c:	18e2      	adds	r2, r4, r3
    698e:	42b2      	cmp	r2, r6
    6990:	da05      	bge.n	699e <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    6992:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    6994:	b11a      	cbz	r2, 699e <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    6996:	3301      	adds	r3, #1
    6998:	553a      	strb	r2, [r7, r4]
    699a:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    699c:	e7f6      	b.n	698c <MicroVsnprintf+0xec>
          }
          current++;
    699e:	1caa      	adds	r2, r5, #2
    69a0:	e002      	b.n	69a8 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    69a2:	1c6a      	adds	r2, r5, #1
    69a4:	553b      	strb	r3, [r7, r4]
    69a6:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    69a8:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    69aa:	782b      	ldrb	r3, [r5, #0]
    69ac:	2b00      	cmp	r3, #0
    69ae:	d03f      	beq.n	6a30 <MicroVsnprintf+0x190>
    69b0:	42b4      	cmp	r4, r6
    69b2:	da3d      	bge.n	6a30 <MicroVsnprintf+0x190>
    if (*current == '%') {
    69b4:	2b25      	cmp	r3, #37	; 0x25
    69b6:	d1f4      	bne.n	69a2 <MicroVsnprintf+0x102>
      current++;
    69b8:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    69ba:	786b      	ldrb	r3, [r5, #1]
    69bc:	2b25      	cmp	r3, #37	; 0x25
    69be:	d0cd      	beq.n	695c <MicroVsnprintf+0xbc>
    69c0:	d3f2      	bcc.n	69a8 <MicroVsnprintf+0x108>
    69c2:	2b78      	cmp	r3, #120	; 0x78
    69c4:	d8f0      	bhi.n	69a8 <MicroVsnprintf+0x108>
    69c6:	2b63      	cmp	r3, #99	; 0x63
    69c8:	d3ee      	bcc.n	69a8 <MicroVsnprintf+0x108>
    69ca:	3b63      	subs	r3, #99	; 0x63
    69cc:	2b15      	cmp	r3, #21
    69ce:	d8eb      	bhi.n	69a8 <MicroVsnprintf+0x108>
    69d0:	a101      	add	r1, pc, #4	; (adr r1, 69d8 <MicroVsnprintf+0x138>)
    69d2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    69d6:	bf00      	nop
    69d8:	00006965 	.word	0x00006965
    69dc:	000068b1 	.word	0x000068b1
    69e0:	000069a9 	.word	0x000069a9
    69e4:	00006923 	.word	0x00006923
    69e8:	000069a9 	.word	0x000069a9
    69ec:	000069a9 	.word	0x000069a9
    69f0:	000069a9 	.word	0x000069a9
    69f4:	000069a9 	.word	0x000069a9
    69f8:	000069a9 	.word	0x000069a9
    69fc:	000069a9 	.word	0x000069a9
    6a00:	000069a9 	.word	0x000069a9
    6a04:	000069a9 	.word	0x000069a9
    6a08:	000069a9 	.word	0x000069a9
    6a0c:	000069a9 	.word	0x000069a9
    6a10:	000069a9 	.word	0x000069a9
    6a14:	000069a9 	.word	0x000069a9
    6a18:	00006983 	.word	0x00006983
    6a1c:	000069a9 	.word	0x000069a9
    6a20:	000068d3 	.word	0x000068d3
    6a24:	000069a9 	.word	0x000069a9
    6a28:	000069a9 	.word	0x000069a9
    6a2c:	000068f5 	.word	0x000068f5
    }
  }
  output[output_index++] = '\0';
    6a30:	1c60      	adds	r0, r4, #1
    6a32:	2300      	movs	r3, #0
    6a34:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6a36:	b003      	add	sp, #12
    6a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a3a:	bf00      	nop
    6a3c:	41600000 	.word	0x41600000

00006a40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6a40:	b570      	push	{r4, r5, r6, lr}
    6a42:	4604      	mov	r4, r0
    6a44:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    6a46:	f00e fcbb 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a4a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a4c:	4630      	mov	r0, r6
    6a4e:	f00e fcbd 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a52:	2808      	cmp	r0, #8
    6a54:	d918      	bls.n	6a88 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    6a56:	f106 0008 	add.w	r0, r6, #8
    6a5a:	f00e fcb7 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6a5e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a60:	b1a0      	cbz	r0, 6a8c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    6a62:	4620      	mov	r0, r4
    6a64:	f00e fca6 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6a68:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6a6a:	6820      	ldr	r0, [r4, #0]
    6a6c:	f00d fa83 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6a70:	4285      	cmp	r5, r0
    6a72:	d20d      	bcs.n	6a90 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6a74:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6a76:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6a7a:	4620      	mov	r0, r4
    6a7c:	f00e fc9a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    6a80:	4420      	add	r0, r4
    6a82:	f00e fd4d 	bl	15520 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    6a86:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6a88:	2000      	movs	r0, #0
    6a8a:	e7e8      	b.n	6a5e <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6a8c:	2400      	movs	r4, #0
    6a8e:	e7ec      	b.n	6a6a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    6a90:	4b03      	ldr	r3, [pc, #12]	; (6aa0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    6a92:	4a04      	ldr	r2, [pc, #16]	; (6aa4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    6a94:	f44f 7183 	mov.w	r1, #262	; 0x106
    6a98:	4803      	ldr	r0, [pc, #12]	; (6aa8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    6a9a:	f00b ffff 	bl	12a9c <__assert_func>
    6a9e:	bf00      	nop
    6aa0:	00032664 	.word	0x00032664
    6aa4:	000327b4 	.word	0x000327b4
    6aa8:	00032730 	.word	0x00032730

00006aac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    6aac:	6943      	ldr	r3, [r0, #20]
    6aae:	2b20      	cmp	r3, #32
    6ab0:	d007      	beq.n	6ac2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6ab2:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6ab4:	2a91      	cmp	r2, #145	; 0x91
    6ab6:	d806      	bhi.n	6ac6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6ab8:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    6aba:	4a04      	ldr	r2, [pc, #16]	; (6acc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    6abc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6ac0:	4770      	bx	lr
    return registration->custom_name;
    6ac2:	6980      	ldr	r0, [r0, #24]
    6ac4:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6ac6:	4802      	ldr	r0, [pc, #8]	; (6ad0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6ac8:	4770      	bx	lr
    6aca:	bf00      	nop
    6acc:	000331c0 	.word	0x000331c0
    6ad0:	00031e90 	.word	0x00031e90

00006ad4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad8:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    6ada:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6ade:	2600      	movs	r6, #0
    6ae0:	e024      	b.n	6b2c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6ae2:	4621      	mov	r1, r4
    6ae4:	68e8      	ldr	r0, [r5, #12]
    6ae6:	f00e ff57 	bl	15998 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    6aea:	3401      	adds	r4, #1
    6aec:	42bc      	cmp	r4, r7
    6aee:	d21c      	bcs.n	6b2a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6af0:	692b      	ldr	r3, [r5, #16]
    6af2:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6af6:	212c      	movs	r1, #44	; 0x2c
    6af8:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    6afc:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6b00:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6b04:	2b00      	cmp	r3, #0
    6b06:	d0ec      	beq.n	6ae2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6b08:	6868      	ldr	r0, [r5, #4]
    6b0a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    6b0c:	4682      	mov	sl, r0
    6b0e:	2800      	cmp	r0, #0
    6b10:	d0e7      	beq.n	6ae2 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6b12:	4648      	mov	r0, r9
    6b14:	f7ff ffca 	bl	6aac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b18:	4601      	mov	r1, r0
    6b1a:	4653      	mov	r3, sl
    6b1c:	4622      	mov	r2, r4
    6b1e:	480c      	ldr	r0, [pc, #48]	; (6b50 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6b20:	f00e fbc3 	bl	152aa <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6b24:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6b2a:	3601      	adds	r6, #1
    6b2c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6b2e:	6818      	ldr	r0, [r3, #0]
    6b30:	f00d fa21 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6b34:	4286      	cmp	r6, r0
    6b36:	d207      	bcs.n	6b48 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6b38:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6b3a:	4631      	mov	r1, r6
    6b3c:	68a8      	ldr	r0, [r5, #8]
    6b3e:	f7ff ff7f 	bl	6a40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6b42:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    6b44:	2400      	movs	r4, #0
    6b46:	e7d1      	b.n	6aec <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6b48:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    6b4c:	2000      	movs	r0, #0
    6b4e:	e7ea      	b.n	6b26 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    6b50:	000328ac 	.word	0x000328ac

00006b54 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    6b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b58:	b083      	sub	sp, #12
    6b5a:	4606      	mov	r6, r0
    6b5c:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    6b5e:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    6b62:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    6b64:	6983      	ldr	r3, [r0, #24]
    6b66:	6818      	ldr	r0, [r3, #0]
    6b68:	f00d fa05 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6b6c:	4284      	cmp	r4, r0
    6b6e:	d207      	bcs.n	6b80 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    6b70:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6b72:	4621      	mov	r1, r4
    6b74:	68b0      	ldr	r0, [r6, #8]
    6b76:	f7ff ff63 	bl	6a40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6b7a:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    6b7c:	2700      	movs	r7, #0
    6b7e:	e01d      	b.n	6bbc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    6b80:	4602      	mov	r2, r0
    6b82:	4621      	mov	r1, r4
    6b84:	4827      	ldr	r0, [pc, #156]	; (6c24 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    6b86:	f00e fb90 	bl	152aa <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    6b8a:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    6b8c:	4628      	mov	r0, r5
    6b8e:	b003      	add	sp, #12
    6b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    6b94:	f011 ff7e 	bl	18a94 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    6b98:	4640      	mov	r0, r8
    6b9a:	f7ff ff87 	bl	6aac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b9e:	4601      	mov	r1, r0
    6ba0:	462b      	mov	r3, r5
    6ba2:	463a      	mov	r2, r7
    6ba4:	4820      	ldr	r0, [pc, #128]	; (6c28 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    6ba6:	f00e fb80 	bl	152aa <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    6baa:	2c00      	cmp	r4, #0
    6bac:	d0ee      	beq.n	6b8c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    6bae:	6823      	ldr	r3, [r4, #0]
    6bb0:	68db      	ldr	r3, [r3, #12]
    6bb2:	9900      	ldr	r1, [sp, #0]
    6bb4:	4620      	mov	r0, r4
    6bb6:	4798      	blx	r3
    6bb8:	e7e8      	b.n	6b8c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    6bba:	3701      	adds	r7, #1
    6bbc:	454f      	cmp	r7, r9
    6bbe:	d22d      	bcs.n	6c1c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6bc0:	6933      	ldr	r3, [r6, #16]
    6bc2:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6bc6:	252c      	movs	r5, #44	; 0x2c
    6bc8:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    6bcc:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6bd0:	4640      	mov	r0, r8
    6bd2:	f7ff ff6b 	bl	6aac <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6bd6:	4601      	mov	r1, r0
    6bd8:	6873      	ldr	r3, [r6, #4]
    6bda:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    6bdc:	2300      	movs	r3, #0
    6bde:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6be0:	b124      	cbz	r4, 6bec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6be2:	6823      	ldr	r3, [r4, #0]
    6be4:	689b      	ldr	r3, [r3, #8]
    6be6:	4620      	mov	r0, r4
    6be8:	4798      	blx	r3
    6bea:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    6bec:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d0cf      	beq.n	6b94 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6bf4:	4629      	mov	r1, r5
    6bf6:	6870      	ldr	r0, [r6, #4]
    6bf8:	4798      	blx	r3
    6bfa:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    6bfc:	68f0      	ldr	r0, [r6, #12]
    6bfe:	6803      	ldr	r3, [r0, #0]
    6c00:	689b      	ldr	r3, [r3, #8]
    6c02:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6c04:	2d01      	cmp	r5, #1
    6c06:	d0c7      	beq.n	6b98 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6c08:	2d00      	cmp	r5, #0
    6c0a:	d1ce      	bne.n	6baa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    6c0c:	2c00      	cmp	r4, #0
    6c0e:	d0d4      	beq.n	6bba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6c10:	6823      	ldr	r3, [r4, #0]
    6c12:	68db      	ldr	r3, [r3, #12]
    6c14:	9900      	ldr	r1, [sp, #0]
    6c16:	4620      	mov	r0, r4
    6c18:	4798      	blx	r3
    6c1a:	e7ce      	b.n	6bba <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    6c1c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6c20:	2500      	movs	r5, #0
    6c22:	e7b3      	b.n	6b8c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6c24:	000328e4 	.word	0x000328e4
    6c28:	00032918 	.word	0x00032918

00006c2c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    6c2c:	b570      	push	{r4, r5, r6, lr}
    6c2e:	4604      	mov	r4, r0
    6c30:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6c32:	4a11      	ldr	r2, [pc, #68]	; (6c78 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6c34:	6002      	str	r2, [r0, #0]
    6c36:	6041      	str	r1, [r0, #4]
    6c38:	6085      	str	r5, [r0, #8]
    6c3a:	60c3      	str	r3, [r0, #12]
    6c3c:	2300      	movs	r3, #0
    6c3e:	6103      	str	r3, [r0, #16]
    6c40:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    6c42:	b19d      	cbz	r5, 6c6c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    6c44:	4628      	mov	r0, r5
    6c46:	f00e fbbb 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c4a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c4c:	4630      	mov	r0, r6
    6c4e:	f00e fbbd 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c52:	2808      	cmp	r0, #8
    6c54:	d90c      	bls.n	6c70 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    6c56:	f106 0008 	add.w	r0, r6, #8
    6c5a:	f00e fbb7 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c5e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c60:	b140      	cbz	r0, 6c74 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    6c62:	4628      	mov	r0, r5
    6c64:	f00e fba6 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c68:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    6c6a:	61a5      	str	r5, [r4, #24]
}
    6c6c:	4620      	mov	r0, r4
    6c6e:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c70:	2000      	movs	r0, #0
    6c72:	e7f4      	b.n	6c5e <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c74:	2500      	movs	r5, #0
    6c76:	e7f8      	b.n	6c6a <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    6c78:	00033414 	.word	0x00033414

00006c7c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    6c7c:	b570      	push	{r4, r5, r6, lr}
    6c7e:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    6c80:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6c82:	4620      	mov	r0, r4
    6c84:	f00e fb9c 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c88:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c8a:	4630      	mov	r0, r6
    6c8c:	f00e fb9e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c90:	2808      	cmp	r0, #8
    6c92:	d92c      	bls.n	6cee <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6c94:	f106 0008 	add.w	r0, r6, #8
    6c98:	f00e fb98 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c9c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c9e:	b340      	cbz	r0, 6cf2 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6ca0:	4620      	mov	r0, r4
    6ca2:	f00e fb87 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ca6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ca8:	6820      	ldr	r0, [r4, #0]
    6caa:	f00d f964 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6cae:	4285      	cmp	r5, r0
    6cb0:	d221      	bcs.n	6cf6 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6cb2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6cb4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6cb8:	4620      	mov	r0, r4
    6cba:	f00e fb7b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cbe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6cc0:	4620      	mov	r0, r4
    6cc2:	f00e fb7d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cc6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cc8:	4628      	mov	r0, r5
    6cca:	f00e fb7f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cce:	2808      	cmp	r0, #8
    6cd0:	d918      	bls.n	6d04 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6cd2:	f105 0008 	add.w	r0, r5, #8
    6cd6:	f00e fb79 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cda:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cdc:	b1a0      	cbz	r0, 6d08 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    6cde:	4620      	mov	r0, r4
    6ce0:	f00e fb68 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ce4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ce6:	6820      	ldr	r0, [r4, #0]
    6ce8:	f00d f945 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6cec:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cee:	2000      	movs	r0, #0
    6cf0:	e7d4      	b.n	6c9c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cf2:	2400      	movs	r4, #0
    6cf4:	e7d8      	b.n	6ca8 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6cf6:	4b05      	ldr	r3, [pc, #20]	; (6d0c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6cf8:	4a05      	ldr	r2, [pc, #20]	; (6d10 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    6cfa:	f44f 7183 	mov.w	r1, #262	; 0x106
    6cfe:	4805      	ldr	r0, [pc, #20]	; (6d14 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6d00:	f00b fecc 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d04:	2000      	movs	r0, #0
    6d06:	e7e8      	b.n	6cda <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d08:	2400      	movs	r4, #0
    6d0a:	e7ec      	b.n	6ce6 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6d0c:	00032664 	.word	0x00032664
    6d10:	000327b4 	.word	0x000327b4
    6d14:	00032730 	.word	0x00032730

00006d18 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6d18:	b570      	push	{r4, r5, r6, lr}
    6d1a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6d1c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6d1e:	4620      	mov	r0, r4
    6d20:	f00e fb4e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d24:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d26:	4630      	mov	r0, r6
    6d28:	f00e fb50 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d2c:	2808      	cmp	r0, #8
    6d2e:	d92b      	bls.n	6d88 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6d30:	f106 0008 	add.w	r0, r6, #8
    6d34:	f00e fb4a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d38:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d3a:	b338      	cbz	r0, 6d8c <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6d3c:	4620      	mov	r0, r4
    6d3e:	f00e fb39 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d42:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d44:	6820      	ldr	r0, [r4, #0]
    6d46:	f00d f916 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d4a:	4285      	cmp	r5, r0
    6d4c:	d220      	bcs.n	6d90 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d4e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d50:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d54:	4620      	mov	r0, r4
    6d56:	f00e fb2d 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d5a:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6d5c:	4620      	mov	r0, r4
    6d5e:	f00e fb2f 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d62:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d64:	4628      	mov	r0, r5
    6d66:	f00e fb31 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d6a:	2806      	cmp	r0, #6
    6d6c:	d917      	bls.n	6d9e <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6d6e:	1da8      	adds	r0, r5, #6
    6d70:	f00e fb2c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d74:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d76:	b1a0      	cbz	r0, 6da2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    6d78:	4620      	mov	r0, r4
    6d7a:	f00e fb1b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d7e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d80:	6820      	ldr	r0, [r4, #0]
    6d82:	f00d f8f8 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6d86:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d88:	2000      	movs	r0, #0
    6d8a:	e7d5      	b.n	6d38 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d8c:	2400      	movs	r4, #0
    6d8e:	e7d9      	b.n	6d44 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6d90:	4b05      	ldr	r3, [pc, #20]	; (6da8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6d92:	4a06      	ldr	r2, [pc, #24]	; (6dac <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6d94:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d98:	4805      	ldr	r0, [pc, #20]	; (6db0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    6d9a:	f00b fe7f 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d9e:	2000      	movs	r0, #0
    6da0:	e7e8      	b.n	6d74 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6da2:	2400      	movs	r4, #0
    6da4:	e7ec      	b.n	6d80 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6da6:	bf00      	nop
    6da8:	00032664 	.word	0x00032664
    6dac:	000327b4 	.word	0x000327b4
    6db0:	00032730 	.word	0x00032730

00006db4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6db8:	4606      	mov	r6, r0
    6dba:	460d      	mov	r5, r1
    6dbc:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6dbe:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6dc0:	4620      	mov	r0, r4
    6dc2:	f00e fafd 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dc6:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6dca:	4640      	mov	r0, r8
    6dcc:	f00e fafe 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6dd0:	2808      	cmp	r0, #8
    6dd2:	d93d      	bls.n	6e50 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6dd4:	f108 0008 	add.w	r0, r8, #8
    6dd8:	f00e faf8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ddc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dde:	b3c8      	cbz	r0, 6e54 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6de0:	4620      	mov	r0, r4
    6de2:	f00e fae7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6de6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6de8:	6820      	ldr	r0, [r4, #0]
    6dea:	f00d f8c4 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6dee:	4285      	cmp	r5, r0
    6df0:	d232      	bcs.n	6e58 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6df2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6df4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6df8:	4620      	mov	r0, r4
    6dfa:	f00e fadb 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6dfe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6e00:	4620      	mov	r0, r4
    6e02:	f00e fadd 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e06:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e0a:	4640      	mov	r0, r8
    6e0c:	f00e fade 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e10:	2808      	cmp	r0, #8
    6e12:	d928      	bls.n	6e66 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6e14:	f108 0008 	add.w	r0, r8, #8
    6e18:	f00e fad8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e1c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e1e:	b320      	cbz	r0, 6e6a <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6e20:	4620      	mov	r0, r4
    6e22:	f00e fac7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e26:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e28:	6820      	ldr	r0, [r4, #0]
    6e2a:	f00d f8a4 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e2e:	4287      	cmp	r7, r0
    6e30:	d21d      	bcs.n	6e6e <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e32:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6e34:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6e38:	f00e fac1 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6e3c:	6931      	ldr	r1, [r6, #16]
    6e3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6e42:	686b      	ldr	r3, [r5, #4]
    6e44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6e48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e50:	2000      	movs	r0, #0
    6e52:	e7c3      	b.n	6ddc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e54:	2400      	movs	r4, #0
    6e56:	e7c7      	b.n	6de8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6e58:	4b08      	ldr	r3, [pc, #32]	; (6e7c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6e5a:	4a09      	ldr	r2, [pc, #36]	; (6e80 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6e5c:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e60:	4808      	ldr	r0, [pc, #32]	; (6e84 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6e62:	f00b fe1b 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e66:	2000      	movs	r0, #0
    6e68:	e7d8      	b.n	6e1c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e6a:	2400      	movs	r4, #0
    6e6c:	e7dc      	b.n	6e28 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6e6e:	4b03      	ldr	r3, [pc, #12]	; (6e7c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6e70:	4a05      	ldr	r2, [pc, #20]	; (6e88 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6e72:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e76:	4803      	ldr	r0, [pc, #12]	; (6e84 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6e78:	f00b fe10 	bl	12a9c <__assert_func>
    6e7c:	00032664 	.word	0x00032664
    6e80:	000327b4 	.word	0x000327b4
    6e84:	00032730 	.word	0x00032730
    6e88:	00032670 	.word	0x00032670

00006e8c <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e90:	4606      	mov	r6, r0
    6e92:	460d      	mov	r5, r1
    6e94:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6e96:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6e98:	4620      	mov	r0, r4
    6e9a:	f00e fa91 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e9e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ea2:	4640      	mov	r0, r8
    6ea4:	f00e fa92 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ea8:	2808      	cmp	r0, #8
    6eaa:	d93d      	bls.n	6f28 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6eac:	f108 0008 	add.w	r0, r8, #8
    6eb0:	f00e fa8c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6eb4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6eb6:	b3c8      	cbz	r0, 6f2c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6eb8:	4620      	mov	r0, r4
    6eba:	f00e fa7b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ebe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6ec0:	6820      	ldr	r0, [r4, #0]
    6ec2:	f00d f858 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6ec6:	4285      	cmp	r5, r0
    6ec8:	d232      	bcs.n	6f30 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6eca:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6ecc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ed0:	4620      	mov	r0, r4
    6ed2:	f00e fa6f 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ed6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6ed8:	4620      	mov	r0, r4
    6eda:	f00e fa71 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ede:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ee2:	4640      	mov	r0, r8
    6ee4:	f00e fa72 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ee8:	2806      	cmp	r0, #6
    6eea:	d928      	bls.n	6f3e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6eec:	f108 0006 	add.w	r0, r8, #6
    6ef0:	f00e fa6c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ef4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ef6:	b320      	cbz	r0, 6f42 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6ef8:	4620      	mov	r0, r4
    6efa:	f00e fa5b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6efe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f00:	6820      	ldr	r0, [r4, #0]
    6f02:	f00d f838 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f06:	4287      	cmp	r7, r0
    6f08:	d21d      	bcs.n	6f46 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f0a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6f0c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6f10:	f00e fa55 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6f14:	6931      	ldr	r1, [r6, #16]
    6f16:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6f1a:	686b      	ldr	r3, [r5, #4]
    6f1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6f20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f28:	2000      	movs	r0, #0
    6f2a:	e7c3      	b.n	6eb4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f2c:	2400      	movs	r4, #0
    6f2e:	e7c7      	b.n	6ec0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6f30:	4b08      	ldr	r3, [pc, #32]	; (6f54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6f32:	4a09      	ldr	r2, [pc, #36]	; (6f58 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6f34:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f38:	4808      	ldr	r0, [pc, #32]	; (6f5c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6f3a:	f00b fdaf 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f3e:	2000      	movs	r0, #0
    6f40:	e7d8      	b.n	6ef4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f42:	2400      	movs	r4, #0
    6f44:	e7dc      	b.n	6f00 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6f46:	4b03      	ldr	r3, [pc, #12]	; (6f54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6f48:	4a05      	ldr	r2, [pc, #20]	; (6f60 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6f4a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f4e:	4803      	ldr	r0, [pc, #12]	; (6f5c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6f50:	f00b fda4 	bl	12a9c <__assert_func>
    6f54:	00032664 	.word	0x00032664
    6f58:	000327b4 	.word	0x000327b4
    6f5c:	00032730 	.word	0x00032730
    6f60:	00032670 	.word	0x00032670

00006f64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f68:	b083      	sub	sp, #12
    6f6a:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6f6c:	2700      	movs	r7, #0
    6f6e:	e0c8      	b.n	7102 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6f70:	4b71      	ldr	r3, [pc, #452]	; (7138 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6f72:	4a72      	ldr	r2, [pc, #456]	; (713c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6f74:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f78:	4871      	ldr	r0, [pc, #452]	; (7140 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6f7a:	f00b fd8f 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f7e:	2000      	movs	r0, #0
    6f80:	e01d      	b.n	6fbe <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f82:	2400      	movs	r4, #0
    6f84:	e022      	b.n	6fcc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6f86:	4b6c      	ldr	r3, [pc, #432]	; (7138 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6f88:	4a6e      	ldr	r2, [pc, #440]	; (7144 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6f8a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f8e:	486c      	ldr	r0, [pc, #432]	; (7140 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6f90:	f00b fd84 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f94:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6f96:	b118      	cbz	r0, 6fa0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6f98:	4420      	add	r0, r4
    6f9a:	f00e fae0 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6f9e:	e000      	b.n	6fa2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6fa0:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6fa2:	bba0      	cbnz	r0, 700e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6fa4:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6fa6:	4630      	mov	r0, r6
    6fa8:	f00e fa0a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fac:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fae:	4620      	mov	r0, r4
    6fb0:	f00e fa0c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fb4:	2804      	cmp	r0, #4
    6fb6:	d9e2      	bls.n	6f7e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6fb8:	1d20      	adds	r0, r4, #4
    6fba:	f00e fa07 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fbe:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d0de      	beq.n	6f82 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6fc4:	4620      	mov	r0, r4
    6fc6:	f00e f9f5 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fca:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6fcc:	6820      	ldr	r0, [r4, #0]
    6fce:	f00c ffd2 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6fd2:	4285      	cmp	r5, r0
    6fd4:	f080 8094 	bcs.w	7100 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6fd8:	6820      	ldr	r0, [r4, #0]
    6fda:	f00c ffcc 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6fde:	4285      	cmp	r5, r0
    6fe0:	d2d1      	bcs.n	6f86 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6fe2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6fe4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6fe8:	4620      	mov	r0, r4
    6fea:	f00e f9e3 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fee:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6ff0:	4620      	mov	r0, r4
    6ff2:	f00e f9e5 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ff6:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ffa:	4648      	mov	r0, r9
    6ffc:	f00e f9e6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7000:	280e      	cmp	r0, #14
    7002:	d9c7      	bls.n	6f94 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    7004:	f109 000e 	add.w	r0, r9, #14
    7008:	f00e f9e0 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    700c:	e7c3      	b.n	6f96 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    700e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7012:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    7016:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    701a:	6858      	ldr	r0, [r3, #4]
    701c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7020:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    7024:	a901      	add	r1, sp, #4
    7026:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    702a:	f00e f9a2 	bl	15372 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    702e:	4603      	mov	r3, r0
    7030:	2800      	cmp	r0, #0
    7032:	d17d      	bne.n	7130 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    7034:	4620      	mov	r0, r4
    7036:	f00e f9c3 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    703a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    703e:	4648      	mov	r0, r9
    7040:	f00e f9c4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7044:	2806      	cmp	r0, #6
    7046:	d914      	bls.n	7072 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    7048:	f109 0006 	add.w	r0, r9, #6
    704c:	f00e f9be 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7050:	b188      	cbz	r0, 7076 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    7052:	4420      	add	r0, r4
    7054:	f00e f9c0 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    7058:	2809      	cmp	r0, #9
    705a:	d00e      	beq.n	707a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    705c:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    705e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7062:	4453      	add	r3, sl
    7064:	685b      	ldr	r3, [r3, #4]
    7066:	9a01      	ldr	r2, [sp, #4]
    7068:	f853 000b 	ldr.w	r0, [r3, fp]
    706c:	f011 fd46 	bl	18afc <memset>
    7070:	e798      	b.n	6fa4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7072:	2000      	movs	r0, #0
    7074:	e7ec      	b.n	7050 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7076:	2000      	movs	r0, #0
    7078:	e7ee      	b.n	7058 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    707a:	4620      	mov	r0, r4
    707c:	f00e f9a0 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7080:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7084:	4648      	mov	r0, r9
    7086:	f00e f9a1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    708a:	280c      	cmp	r0, #12
    708c:	d928      	bls.n	70e0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    708e:	f109 000c 	add.w	r0, r9, #12
    7092:	f00e f99b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7096:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7098:	b320      	cbz	r0, 70e4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    709a:	4620      	mov	r0, r4
    709c:	f00e f98a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70a0:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    70a2:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    70a4:	4620      	mov	r0, r4
    70a6:	f00e f98b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70aa:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70ac:	4620      	mov	r0, r4
    70ae:	f00e f98d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70b2:	280a      	cmp	r0, #10
    70b4:	d918      	bls.n	70e8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    70b6:	f104 000a 	add.w	r0, r4, #10
    70ba:	f00e f987 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70be:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70c0:	b1a0      	cbz	r0, 70ec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    70c2:	4648      	mov	r0, r9
    70c4:	f00e f976 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70c8:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70ca:	f8d9 0000 	ldr.w	r0, [r9]
    70ce:	f00c ff52 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    70d2:	b170      	cbz	r0, 70f2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    70d4:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    70d8:	f00e fa46 	bl	15568 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    70dc:	4601      	mov	r1, r0
    70de:	e7be      	b.n	705e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70e0:	2000      	movs	r0, #0
    70e2:	e7d8      	b.n	7096 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70e4:	2400      	movs	r4, #0
    70e6:	e7dc      	b.n	70a2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70e8:	2000      	movs	r0, #0
    70ea:	e7e8      	b.n	70be <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70ec:	f04f 0900 	mov.w	r9, #0
    70f0:	e7eb      	b.n	70ca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    70f2:	4b11      	ldr	r3, [pc, #68]	; (7138 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    70f4:	4a14      	ldr	r2, [pc, #80]	; (7148 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    70f6:	f44f 7183 	mov.w	r1, #262	; 0x106
    70fa:	4811      	ldr	r0, [pc, #68]	; (7140 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    70fc:	f00b fcce 	bl	12a9c <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    7100:	3701      	adds	r7, #1
    7102:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    7106:	6830      	ldr	r0, [r6, #0]
    7108:	f00c ff35 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    710c:	4287      	cmp	r7, r0
    710e:	d20e      	bcs.n	712e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    7110:	6830      	ldr	r0, [r6, #0]
    7112:	f00c ff30 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7116:	4287      	cmp	r7, r0
    7118:	f4bf af2a 	bcs.w	6f70 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    711c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    711e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7122:	4630      	mov	r0, r6
    7124:	f00e f946 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7128:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    712a:	2500      	movs	r5, #0
    712c:	e73b      	b.n	6fa6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    712e:	2300      	movs	r3, #0
}
    7130:	4618      	mov	r0, r3
    7132:	b003      	add	sp, #12
    7134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7138:	00032664 	.word	0x00032664
    713c:	000327b4 	.word	0x000327b4
    7140:	00032730 	.word	0x00032730
    7144:	0003294c 	.word	0x0003294c
    7148:	00032a40 	.word	0x00032a40

0000714c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    714c:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    714e:	4b05      	ldr	r3, [pc, #20]	; (7164 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    7150:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    7152:	4b05      	ldr	r3, [pc, #20]	; (7168 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    7154:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    7156:	4b05      	ldr	r3, [pc, #20]	; (716c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    7158:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    715a:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    715c:	2300      	movs	r3, #0
    715e:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    7162:	4770      	bx	lr
    7164:	000156ef 	.word	0x000156ef
    7168:	0001569d 	.word	0x0001569d
    716c:	000156bb 	.word	0x000156bb

00007170 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    7170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7172:	4605      	mov	r5, r0
    7174:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    7176:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7178:	4620      	mov	r0, r4
    717a:	f00e f921 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    717e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7180:	4638      	mov	r0, r7
    7182:	f00e f923 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7186:	2808      	cmp	r0, #8
    7188:	d92f      	bls.n	71ea <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    718a:	f107 0008 	add.w	r0, r7, #8
    718e:	f00e f91d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7192:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7194:	b358      	cbz	r0, 71ee <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    7196:	4620      	mov	r0, r4
    7198:	f00e f90c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    719c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    719e:	6820      	ldr	r0, [r4, #0]
    71a0:	f00c fee9 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71a4:	b328      	cbz	r0, 71f2 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    71a6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    71a8:	4620      	mov	r0, r4
    71aa:	f00e f903 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71ae:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    71b0:	4620      	mov	r0, r4
    71b2:	f00e f905 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71b6:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71b8:	4638      	mov	r0, r7
    71ba:	f00e f907 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71be:	2808      	cmp	r0, #8
    71c0:	d91e      	bls.n	7200 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    71c2:	f107 0008 	add.w	r0, r7, #8
    71c6:	f00e f901 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71ca:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71cc:	b1d0      	cbz	r0, 7204 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    71ce:	4620      	mov	r0, r4
    71d0:	f00e f8f0 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71d4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71d6:	6820      	ldr	r0, [r4, #0]
    71d8:	f00c fecd 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    71dc:	4286      	cmp	r6, r0
    71de:	d213      	bcs.n	7208 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    71e0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    71e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    71e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71ea:	2000      	movs	r0, #0
    71ec:	e7d1      	b.n	7192 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71ee:	2400      	movs	r4, #0
    71f0:	e7d5      	b.n	719e <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    71f2:	4b09      	ldr	r3, [pc, #36]	; (7218 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    71f4:	4a09      	ldr	r2, [pc, #36]	; (721c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    71f6:	f44f 7183 	mov.w	r1, #262	; 0x106
    71fa:	4809      	ldr	r0, [pc, #36]	; (7220 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    71fc:	f00b fc4e 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7200:	2000      	movs	r0, #0
    7202:	e7e2      	b.n	71ca <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7204:	2400      	movs	r4, #0
    7206:	e7e6      	b.n	71d6 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7208:	4603      	mov	r3, r0
    720a:	4632      	mov	r2, r6
    720c:	4905      	ldr	r1, [pc, #20]	; (7224 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    720e:	68a8      	ldr	r0, [r5, #8]
    7210:	f00e fe50 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7214:	2000      	movs	r0, #0
    7216:	e7e7      	b.n	71e8 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    7218:	00032664 	.word	0x00032664
    721c:	000327b4 	.word	0x000327b4
    7220:	00032730 	.word	0x00032730
    7224:	00033444 	.word	0x00033444

00007228 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    7228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    722a:	4605      	mov	r5, r0
    722c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    722e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7230:	4620      	mov	r0, r4
    7232:	f00e f8c5 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7236:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7238:	4638      	mov	r0, r7
    723a:	f00e f8c7 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    723e:	2808      	cmp	r0, #8
    7240:	d92e      	bls.n	72a0 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    7242:	f107 0008 	add.w	r0, r7, #8
    7246:	f00e f8c1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    724a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    724c:	b350      	cbz	r0, 72a4 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    724e:	4620      	mov	r0, r4
    7250:	f00e f8b0 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7254:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7256:	6820      	ldr	r0, [r4, #0]
    7258:	f00c fe8d 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    725c:	b320      	cbz	r0, 72a8 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    725e:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7260:	4620      	mov	r0, r4
    7262:	f00e f8a7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7266:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7268:	4620      	mov	r0, r4
    726a:	f00e f8a9 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    726e:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7270:	4638      	mov	r0, r7
    7272:	f00e f8ab 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7276:	2806      	cmp	r0, #6
    7278:	d91d      	bls.n	72b6 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    727a:	1db8      	adds	r0, r7, #6
    727c:	f00e f8a6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7280:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7282:	b1d0      	cbz	r0, 72ba <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    7284:	4620      	mov	r0, r4
    7286:	f00e f895 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    728a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    728c:	6820      	ldr	r0, [r4, #0]
    728e:	f00c fe72 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    7292:	4286      	cmp	r6, r0
    7294:	d213      	bcs.n	72be <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    7296:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    729a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72a0:	2000      	movs	r0, #0
    72a2:	e7d2      	b.n	724a <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72a4:	2400      	movs	r4, #0
    72a6:	e7d6      	b.n	7256 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    72a8:	4b09      	ldr	r3, [pc, #36]	; (72d0 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    72aa:	4a0a      	ldr	r2, [pc, #40]	; (72d4 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    72ac:	f44f 7183 	mov.w	r1, #262	; 0x106
    72b0:	4809      	ldr	r0, [pc, #36]	; (72d8 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    72b2:	f00b fbf3 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72b6:	2000      	movs	r0, #0
    72b8:	e7e2      	b.n	7280 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72ba:	2400      	movs	r4, #0
    72bc:	e7e6      	b.n	728c <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    72be:	4603      	mov	r3, r0
    72c0:	4632      	mov	r2, r6
    72c2:	4906      	ldr	r1, [pc, #24]	; (72dc <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    72c4:	68a8      	ldr	r0, [r5, #8]
    72c6:	f00e fdf5 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    72ca:	2000      	movs	r0, #0
    72cc:	e7e7      	b.n	729e <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    72ce:	bf00      	nop
    72d0:	00032664 	.word	0x00032664
    72d4:	000327b4 	.word	0x000327b4
    72d8:	00032730 	.word	0x00032730
    72dc:	00033470 	.word	0x00033470

000072e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    72e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72e4:	b08b      	sub	sp, #44	; 0x2c
    72e6:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    72e8:	2300      	movs	r3, #0
    72ea:	9305      	str	r3, [sp, #20]
    72ec:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    72f0:	f00e f9aa 	bl	15648 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    72f4:	9b05      	ldr	r3, [sp, #20]
    72f6:	4298      	cmp	r0, r3
    72f8:	f340 81f6 	ble.w	76e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    72fc:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    7300:	4628      	mov	r0, r5
    7302:	f00e f85d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7306:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7308:	4620      	mov	r0, r4
    730a:	f00e f85f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    730e:	2808      	cmp	r0, #8
    7310:	d927      	bls.n	7362 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    7312:	f104 0008 	add.w	r0, r4, #8
    7316:	f00e f859 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    731a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    731c:	b318      	cbz	r0, 7366 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    731e:	4620      	mov	r0, r4
    7320:	f00e f848 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7324:	4404      	add	r4, r0
    7326:	9e05      	ldr	r6, [sp, #20]
    7328:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    732a:	6820      	ldr	r0, [r4, #0]
    732c:	f00c fe23 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7330:	4286      	cmp	r6, r0
    7332:	d21a      	bcs.n	736a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7334:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7336:	9b05      	ldr	r3, [sp, #20]
    7338:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    733c:	4620      	mov	r0, r4
    733e:	f00e f839 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7342:	1823      	adds	r3, r4, r0
    7344:	9302      	str	r3, [sp, #8]
    7346:	d017      	beq.n	7378 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    7348:	4628      	mov	r0, r5
    734a:	f00e f839 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    734e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7350:	4620      	mov	r0, r4
    7352:	f00e f83b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7356:	2806      	cmp	r0, #6
    7358:	d910      	bls.n	737c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    735a:	1da0      	adds	r0, r4, #6
    735c:	f00e f836 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7360:	e00d      	b.n	737e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    7362:	2000      	movs	r0, #0
    7364:	e7d9      	b.n	731a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7366:	2400      	movs	r4, #0
    7368:	e7dd      	b.n	7326 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    736a:	4b4e      	ldr	r3, [pc, #312]	; (74a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    736c:	4a4e      	ldr	r2, [pc, #312]	; (74a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    736e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7372:	484e      	ldr	r0, [pc, #312]	; (74ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7374:	f00b fb92 	bl	12a9c <__assert_func>
    7378:	f011 fb8c 	bl	18a94 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    737c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    737e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7380:	b178      	cbz	r0, 73a2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    7382:	4628      	mov	r0, r5
    7384:	f00e f816 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7388:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    738c:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    7390:	f00e fb21 	bl	159d6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    7394:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7396:	9802      	ldr	r0, [sp, #8]
    7398:	f00e f8c2 	bl	15520 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    739c:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    739e:	2700      	movs	r7, #0
    73a0:	e0dd      	b.n	755e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    73a2:	f04f 0900 	mov.w	r9, #0
    73a6:	e7f1      	b.n	738c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73a8:	2000      	movs	r0, #0
    73aa:	e0eb      	b.n	7584 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73ac:	2400      	movs	r4, #0
    73ae:	e0f2      	b.n	7596 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    73b0:	4b3c      	ldr	r3, [pc, #240]	; (74a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    73b2:	4a3f      	ldr	r2, [pc, #252]	; (74b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    73b4:	f44f 7183 	mov.w	r1, #262	; 0x106
    73b8:	483c      	ldr	r0, [pc, #240]	; (74ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    73ba:	f00b fb6f 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73be:	2000      	movs	r0, #0
    73c0:	e103      	b.n	75ca <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    73c2:	2600      	movs	r6, #0
    73c4:	e108      	b.n	75d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    73c6:	4631      	mov	r1, r6
    73c8:	483a      	ldr	r0, [pc, #232]	; (74b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    73ca:	f00d ff6e 	bl	152aa <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    73ce:	2301      	movs	r3, #1
    73d0:	461c      	mov	r4, r3
}
    73d2:	4620      	mov	r0, r4
    73d4:	b00b      	add	sp, #44	; 0x2c
    73d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    73da:	4b32      	ldr	r3, [pc, #200]	; (74a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    73dc:	4a36      	ldr	r2, [pc, #216]	; (74b8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    73de:	f44f 7183 	mov.w	r1, #262	; 0x106
    73e2:	4832      	ldr	r0, [pc, #200]	; (74ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    73e4:	f00b fb5a 	bl	12a9c <__assert_func>
    73e8:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    73ea:	4650      	mov	r0, sl
    73ec:	f00e fd80 	bl	15ef0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    73f0:	2891      	cmp	r0, #145	; 0x91
    73f2:	d806      	bhi.n	7402 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    73f4:	4b31      	ldr	r3, [pc, #196]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    73f6:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    73fa:	4831      	ldr	r0, [pc, #196]	; (74c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    73fc:	f00d ff55 	bl	152aa <_Z11MicroPrintfPKcz>
        return status;
    7400:	e7e7      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7402:	4930      	ldr	r1, [pc, #192]	; (74c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7404:	e7f9      	b.n	73fa <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7406:	4631      	mov	r1, r6
    7408:	482f      	ldr	r0, [pc, #188]	; (74c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    740a:	f00d ff4e 	bl	152aa <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    740e:	2301      	movs	r3, #1
    7410:	461c      	mov	r4, r3
    7412:	e7de      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7414:	4620      	mov	r0, r4
    7416:	f00d ffd3 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    741a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    741c:	4630      	mov	r0, r6
    741e:	f00d ffd5 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7422:	280e      	cmp	r0, #14
    7424:	d904      	bls.n	7430 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7426:	f106 000e 	add.w	r0, r6, #14
    742a:	f00d ffcf 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    742e:	e000      	b.n	7432 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7430:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7432:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7434:	b160      	cbz	r0, 7450 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7436:	4630      	mov	r0, r6
    7438:	f00d ffbc 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    743c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    743e:	b360      	cbz	r0, 749a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7440:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7442:	f853 0b04 	ldr.w	r0, [r3], #4
    7446:	9301      	str	r3, [sp, #4]
    7448:	f00c fd95 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    744c:	4682      	mov	sl, r0
    744e:	e131      	b.n	76b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7450:	2000      	movs	r0, #0
    7452:	e7f4      	b.n	743e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7454:	2000      	movs	r0, #0
    7456:	e10b      	b.n	7670 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7458:	2300      	movs	r3, #0
    745a:	9301      	str	r3, [sp, #4]
    745c:	e113      	b.n	7686 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    745e:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7462:	d809      	bhi.n	7478 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    7464:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    7466:	4b15      	ldr	r3, [pc, #84]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    746c:	4817      	ldr	r0, [pc, #92]	; (74cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    746e:	f00d ff1c 	bl	152aa <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    7472:	2301      	movs	r3, #1
    7474:	461c      	mov	r4, r3
    7476:	e7ac      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7478:	4912      	ldr	r1, [pc, #72]	; (74c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    747a:	e7f7      	b.n	746c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    747c:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    7480:	d804      	bhi.n	748c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    7482:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    7484:	4a0d      	ldr	r2, [pc, #52]	; (74bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7486:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    748a:	e000      	b.n	748e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    748c:	490d      	ldr	r1, [pc, #52]	; (74c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    748e:	4810      	ldr	r0, [pc, #64]	; (74d0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    7490:	f00d ff0b 	bl	152aa <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    7494:	2301      	movs	r3, #1
    7496:	461c      	mov	r4, r3
    7498:	e79b      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    749a:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    749c:	f04f 0a00 	mov.w	sl, #0
    74a0:	e108      	b.n	76b4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    74a2:	bf00      	nop
    74a4:	00032664 	.word	0x00032664
    74a8:	000327b4 	.word	0x000327b4
    74ac:	00032730 	.word	0x00032730
    74b0:	0003349c 	.word	0x0003349c
    74b4:	00033594 	.word	0x00033594
    74b8:	000335c0 	.word	0x000335c0
    74bc:	000331c0 	.word	0x000331c0
    74c0:	000336c0 	.word	0x000336c0
    74c4:	00031e90 	.word	0x00031e90
    74c8:	000336f0 	.word	0x000336f0
    74cc:	00033714 	.word	0x00033714
    74d0:	0003375c 	.word	0x0003375c
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74d4:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    74d6:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74d8:	2800      	cmp	r0, #0
    74da:	f000 80fb 	beq.w	76d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    74de:	4630      	mov	r0, r6
    74e0:	f00d ff68 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74e4:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    74e6:	aa08      	add	r2, sp, #32
    74e8:	4640      	mov	r0, r8
    74ea:	f00e fa80 	bl	159ee <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    74ee:	2800      	cmp	r0, #0
    74f0:	f040 80ff 	bne.w	76f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    74f4:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    74f8:	4620      	mov	r0, r4
    74fa:	f00d ff61 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74fe:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7500:	4630      	mov	r0, r6
    7502:	f00d ff63 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7506:	2808      	cmp	r0, #8
    7508:	f240 80e6 	bls.w	76d8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    750c:	f106 0008 	add.w	r0, r6, #8
    7510:	f00d ff5c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7514:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7516:	2800      	cmp	r0, #0
    7518:	f000 80e0 	beq.w	76dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    751c:	4620      	mov	r0, r4
    751e:	f00d ff49 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7522:	1821      	adds	r1, r4, r0
    7524:	aa09      	add	r2, sp, #36	; 0x24
    7526:	4640      	mov	r0, r8
    7528:	f00e fa61 	bl	159ee <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    752c:	2800      	cmp	r0, #0
    752e:	f040 80e2 	bne.w	76f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7532:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7536:	9a00      	ldr	r2, [sp, #0]
    7538:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    753c:	1974      	adds	r4, r6, r5
      *node = {};
    753e:	2228      	movs	r2, #40	; 0x28
    7540:	2100      	movs	r1, #0
    7542:	4620      	mov	r0, r4
    7544:	f011 fada 	bl	18afc <memset>
      node->inputs = inputs_array;
    7548:	9b08      	ldr	r3, [sp, #32]
    754a:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    754e:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    7550:	9b07      	ldr	r3, [sp, #28]
    7552:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    7554:	9b01      	ldr	r3, [sp, #4]
    7556:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    7558:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    755c:	3701      	adds	r7, #1
    755e:	9b03      	ldr	r3, [sp, #12]
    7560:	429f      	cmp	r7, r3
    7562:	f080 80bd 	bcs.w	76e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    7566:	9c02      	ldr	r4, [sp, #8]
    7568:	4620      	mov	r0, r4
    756a:	f00d ff29 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    756e:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7570:	4620      	mov	r0, r4
    7572:	f00d ff2b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7576:	280a      	cmp	r0, #10
    7578:	f67f af16 	bls.w	73a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    757c:	f104 000a 	add.w	r0, r4, #10
    7580:	f00d ff24 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7584:	9b02      	ldr	r3, [sp, #8]
    7586:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7588:	2800      	cmp	r0, #0
    758a:	f43f af0f 	beq.w	73ac <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    758e:	4620      	mov	r0, r4
    7590:	f00d ff10 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7594:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7596:	6820      	ldr	r0, [r4, #0]
    7598:	f00c fced 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    759c:	4287      	cmp	r7, r0
    759e:	f4bf af07 	bcs.w	73b0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75a2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    75a4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    75a8:	4620      	mov	r0, r4
    75aa:	f00d ff03 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75ae:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    75b0:	4620      	mov	r0, r4
    75b2:	f00d ff05 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75b6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75b8:	4628      	mov	r0, r5
    75ba:	f00d ff07 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75be:	2804      	cmp	r0, #4
    75c0:	f67f aefd 	bls.w	73be <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    75c4:	1d28      	adds	r0, r5, #4
    75c6:	f00d ff01 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    75ca:	2800      	cmp	r0, #0
    75cc:	f43f aef9 	beq.w	73c2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    75d0:	4420      	add	r0, r4
    75d2:	f00d feef 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75d6:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75d8:	f8d9 0000 	ldr.w	r0, [r9]
    75dc:	f00c fccb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    75e0:	42b0      	cmp	r0, r6
    75e2:	f67f aef0 	bls.w	73c6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    75e6:	f8d9 0000 	ldr.w	r0, [r9]
    75ea:	f00c fcc4 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75ee:	4286      	cmp	r6, r0
    75f0:	f4bf aef3 	bcs.w	73da <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75f4:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    75f8:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    75fc:	4650      	mov	r0, sl
    75fe:	f00d fed9 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7602:	4482      	add	sl, r0
    7604:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7608:	9a00      	ldr	r2, [sp, #0]
    760a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    760e:	252c      	movs	r5, #44	; 0x2c
    7610:	fb05 f507 	mul.w	r5, r5, r7
    7614:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7616:	3328      	adds	r3, #40	; 0x28
    7618:	f8db 2008 	ldr.w	r2, [fp, #8]
    761c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7620:	4650      	mov	r0, sl
    7622:	f003 f87d 	bl	a720 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7626:	2800      	cmp	r0, #0
    7628:	f47f aede 	bne.w	73e8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    762c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7630:	9a00      	ldr	r2, [sp, #0]
    7632:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7636:	442b      	add	r3, r5
                                     .registration;
    7638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    763a:	2b00      	cmp	r3, #0
    763c:	f43f aee3 	beq.w	7406 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7640:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    7642:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    7646:	2300      	movs	r3, #0
    7648:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    764a:	f1ba 0f20 	cmp.w	sl, #32
    764e:	f43f aee1 	beq.w	7414 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    7652:	4620      	mov	r0, r4
    7654:	f00d feb4 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7658:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    765c:	4640      	mov	r0, r8
    765e:	f00d feb5 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7662:	280e      	cmp	r0, #14
    7664:	f67f aef6 	bls.w	7454 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    7668:	f108 000e 	add.w	r0, r8, #14
    766c:	f00d feae 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7670:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7674:	2800      	cmp	r0, #0
    7676:	f43f aeef 	beq.w	7458 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    767a:	4640      	mov	r0, r8
    767c:	f00d fe9a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7680:	eb08 0300 	add.w	r3, r8, r0
    7684:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    7686:	9b01      	ldr	r3, [sp, #4]
    7688:	2b00      	cmp	r3, #0
    768a:	f47f aee8 	bne.w	745e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    768e:	f8db 0004 	ldr.w	r0, [fp, #4]
    7692:	6803      	ldr	r3, [r0, #0]
    7694:	6a1b      	ldr	r3, [r3, #32]
    7696:	4651      	mov	r1, sl
    7698:	4798      	blx	r3
        if (parser == nullptr) {
    769a:	4680      	mov	r8, r0
    769c:	2800      	cmp	r0, #0
    769e:	f43f aeed 	beq.w	747c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    76a2:	ab07      	add	r3, sp, #28
    76a4:	9a04      	ldr	r2, [sp, #16]
    76a6:	f8db 1008 	ldr.w	r1, [fp, #8]
    76aa:	4620      	mov	r0, r4
    76ac:	47c0      	blx	r8
    76ae:	b9f0      	cbnz	r0, 76ee <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    76b0:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    76b4:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    76b8:	4620      	mov	r0, r4
    76ba:	f00d fe81 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76be:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76c0:	4630      	mov	r0, r6
    76c2:	f00d fe83 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76c6:	2806      	cmp	r0, #6
    76c8:	f67f af04 	bls.w	74d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    76cc:	1db0      	adds	r0, r6, #6
    76ce:	f00d fe7d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76d2:	e700      	b.n	74d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76d4:	2100      	movs	r1, #0
    76d6:	e706      	b.n	74e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76d8:	2000      	movs	r0, #0
    76da:	e71b      	b.n	7514 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76dc:	2100      	movs	r1, #0
    76de:	e721      	b.n	7524 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    76e0:	9b05      	ldr	r3, [sp, #20]
    76e2:	3301      	adds	r3, #1
    76e4:	9305      	str	r3, [sp, #20]
    76e6:	e601      	b.n	72ec <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    76e8:	2300      	movs	r3, #0
    76ea:	461c      	mov	r4, r3
    76ec:	e671      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    76ee:	4604      	mov	r4, r0
    76f0:	e66f      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    76f2:	4604      	mov	r4, r0
    76f4:	e66d      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    76f6:	4604      	mov	r4, r0
    76f8:	e66b      	b.n	73d2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    76fa:	bf00      	nop

000076fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    76fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7700:	b083      	sub	sp, #12
    7702:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7704:	6801      	ldr	r1, [r0, #0]
    7706:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7708:	f000 fe60 	bl	83cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    770c:	b170      	cbz	r0, 772c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    770e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7710:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7714:	4630      	mov	r0, r6
    7716:	f00d ff35 	bl	15584 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    771a:	4628      	mov	r0, r5
    771c:	f7ff fde0 	bl	72e0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7720:	4603      	mov	r3, r0
    7722:	b158      	cbz	r0, 773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7724:	4618      	mov	r0, r3
    7726:	b003      	add	sp, #12
    7728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    772c:	49bc      	ldr	r1, [pc, #752]	; (7a20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    772e:	68a8      	ldr	r0, [r5, #8]
    7730:	f00e fbc0 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7734:	2301      	movs	r3, #1
    7736:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    773a:	e7f3      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    773c:	4bb9      	ldr	r3, [pc, #740]	; (7a24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    773e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7740:	2400      	movs	r4, #0
    7742:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    7744:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    7746:	4bb8      	ldr	r3, [pc, #736]	; (7a28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7748:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    774a:	4630      	mov	r0, r6
    774c:	f00d ff1c 	bl	15588 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    7750:	4bb6      	ldr	r3, [pc, #728]	; (7a2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    7752:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    7754:	4630      	mov	r0, r6
    7756:	f7ff f9bd 	bl	6ad4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    775a:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    775c:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    775e:	4bb4      	ldr	r3, [pc, #720]	; (7a30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    7760:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    7762:	462b      	mov	r3, r5
    7764:	f853 1b8c 	ldr.w	r1, [r3], #140
    7768:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    776a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    776c:	f000 fb90 	bl	7e90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    7770:	4603      	mov	r3, r0
    7772:	2800      	cmp	r0, #0
    7774:	d1d6      	bne.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7776:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    7778:	6833      	ldr	r3, [r6, #0]
    777a:	68df      	ldr	r7, [r3, #12]
    777c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    777e:	4620      	mov	r0, r4
    7780:	f00d fe1e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7784:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7788:	4640      	mov	r0, r8
    778a:	f00d fe1f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    778e:	2808      	cmp	r0, #8
    7790:	d921      	bls.n	77d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    7792:	f108 0008 	add.w	r0, r8, #8
    7796:	f00d fe19 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    779a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    779c:	b1e8      	cbz	r0, 77da <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    779e:	4620      	mov	r0, r4
    77a0:	f00d fe08 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77a4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77a6:	6820      	ldr	r0, [r4, #0]
    77a8:	f00c fbe5 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    77ac:	b1b8      	cbz	r0, 77de <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    77ae:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    77b0:	4620      	mov	r0, r4
    77b2:	f00d fdff 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77b6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    77b8:	4620      	mov	r0, r4
    77ba:	f00d fe01 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77be:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77c2:	4640      	mov	r0, r8
    77c4:	f00d fe02 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77c8:	2806      	cmp	r0, #6
    77ca:	d90f      	bls.n	77ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    77cc:	f108 0006 	add.w	r0, r8, #6
    77d0:	f00d fdfc 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    77d4:	e00b      	b.n	77ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    77d6:	2000      	movs	r0, #0
    77d8:	e7df      	b.n	779a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77da:	2400      	movs	r4, #0
    77dc:	e7e3      	b.n	77a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    77de:	4b95      	ldr	r3, [pc, #596]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    77e0:	4a95      	ldr	r2, [pc, #596]	; (7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    77e2:	f44f 7183 	mov.w	r1, #262	; 0x106
    77e6:	4895      	ldr	r0, [pc, #596]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    77e8:	f00b f958 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77ec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    77ee:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77f0:	b178      	cbz	r0, 7812 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    77f2:	4620      	mov	r0, r4
    77f4:	f00d fdde 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77f8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77fa:	6820      	ldr	r0, [r4, #0]
    77fc:	f00c fbbb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7800:	0081      	lsls	r1, r0, #2
    7802:	4630      	mov	r0, r6
    7804:	47b8      	blx	r7
    7806:	4604      	mov	r4, r0
  input_tensors_ =
    7808:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    780c:	b118      	cbz	r0, 7816 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    780e:	2600      	movs	r6, #0
    7810:	e09c      	b.n	794c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7812:	2400      	movs	r4, #0
    7814:	e7f1      	b.n	77fa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7816:	68ae      	ldr	r6, [r5, #8]
    7818:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    781a:	4628      	mov	r0, r5
    781c:	f00d fdd0 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7820:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7822:	4638      	mov	r0, r7
    7824:	f00d fdd2 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7828:	2808      	cmp	r0, #8
    782a:	d91f      	bls.n	786c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    782c:	f107 0008 	add.w	r0, r7, #8
    7830:	f00d fdcc 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7834:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7836:	b1d8      	cbz	r0, 7870 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7838:	4628      	mov	r0, r5
    783a:	f00d fdbb 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    783e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7840:	6828      	ldr	r0, [r5, #0]
    7842:	f00c fb98 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7846:	b1a8      	cbz	r0, 7874 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7848:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    784a:	4628      	mov	r0, r5
    784c:	f00d fdb2 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7850:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7852:	4628      	mov	r0, r5
    7854:	f00d fdb4 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7858:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    785a:	4638      	mov	r0, r7
    785c:	f00d fdb6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7860:	2806      	cmp	r0, #6
    7862:	d90e      	bls.n	7882 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    7864:	1db8      	adds	r0, r7, #6
    7866:	f00d fdb1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    786a:	e00b      	b.n	7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    786c:	2000      	movs	r0, #0
    786e:	e7e1      	b.n	7834 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7870:	4625      	mov	r5, r4
    7872:	e7e5      	b.n	7840 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    7874:	4b6f      	ldr	r3, [pc, #444]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7876:	4a70      	ldr	r2, [pc, #448]	; (7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7878:	f44f 7183 	mov.w	r1, #262	; 0x106
    787c:	486f      	ldr	r0, [pc, #444]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    787e:	f00b f90d 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7882:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7884:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7886:	b118      	cbz	r0, 7890 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    7888:	4628      	mov	r0, r5
    788a:	f00d fd93 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    788e:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7890:	6820      	ldr	r0, [r4, #0]
    7892:	f00c fb70 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7896:	0082      	lsls	r2, r0, #2
    7898:	4969      	ldr	r1, [pc, #420]	; (7a40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    789a:	4630      	mov	r0, r6
    789c:	f00e fb0a 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    78a0:	2301      	movs	r3, #1
    78a2:	e73f      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78a4:	2000      	movs	r0, #0
    78a6:	e05f      	b.n	7968 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78a8:	2400      	movs	r4, #0
    78aa:	e064      	b.n	7976 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    78ac:	4b61      	ldr	r3, [pc, #388]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    78ae:	4a62      	ldr	r2, [pc, #392]	; (7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    78b0:	f44f 7183 	mov.w	r1, #262	; 0x106
    78b4:	4861      	ldr	r0, [pc, #388]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    78b6:	f00b f8f1 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78ba:	2000      	movs	r0, #0
    78bc:	e071      	b.n	79a2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78be:	2400      	movs	r4, #0
    78c0:	e076      	b.n	79b0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78c2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    78c4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78c6:	2800      	cmp	r0, #0
    78c8:	f000 808f 	beq.w	79ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    78cc:	4620      	mov	r0, r4
    78ce:	f00d fd71 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78d2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78d4:	6820      	ldr	r0, [r4, #0]
    78d6:	f00c fb4e 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78da:	2800      	cmp	r0, #0
    78dc:	f000 8087 	beq.w	79ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78e0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78e2:	4620      	mov	r0, r4
    78e4:	f00d fd66 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78e8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    78ea:	4620      	mov	r0, r4
    78ec:	f00d fd68 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78f0:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78f4:	4658      	mov	r0, fp
    78f6:	f00d fd69 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78fa:	2806      	cmp	r0, #6
    78fc:	d97e      	bls.n	79fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    78fe:	f10b 0006 	add.w	r0, fp, #6
    7902:	f00d fd63 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7906:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7908:	2800      	cmp	r0, #0
    790a:	d079      	beq.n	7a00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    790c:	4620      	mov	r0, r4
    790e:	f00d fd51 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7912:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7914:	6820      	ldr	r0, [r4, #0]
    7916:	f00c fb2e 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    791a:	4286      	cmp	r6, r0
    791c:	d272      	bcs.n	7a04 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    791e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7920:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7924:	f00d fd4b 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7928:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    792a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    792e:	2200      	movs	r2, #0
    7930:	9200      	str	r2, [sp, #0]
    7932:	4652      	mov	r2, sl
    7934:	4639      	mov	r1, r7
    7936:	4640      	mov	r0, r8
    7938:	47c8      	blx	r9
    793a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    793e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    7942:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7946:	2b00      	cmp	r3, #0
    7948:	d063      	beq.n	7a12 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    794a:	3601      	adds	r6, #1
    794c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    794e:	4620      	mov	r0, r4
    7950:	f00d fd36 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7954:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7956:	4638      	mov	r0, r7
    7958:	f00d fd38 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    795c:	2808      	cmp	r0, #8
    795e:	d9a1      	bls.n	78a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    7960:	f107 0008 	add.w	r0, r7, #8
    7964:	f00d fd32 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7968:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    796a:	2800      	cmp	r0, #0
    796c:	d09c      	beq.n	78a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    796e:	4620      	mov	r0, r4
    7970:	f00d fd20 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7974:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7976:	6820      	ldr	r0, [r4, #0]
    7978:	f00c fafd 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    797c:	2800      	cmp	r0, #0
    797e:	d095      	beq.n	78ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7980:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7982:	4620      	mov	r0, r4
    7984:	f00d fd16 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7988:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    798a:	4620      	mov	r0, r4
    798c:	f00d fd18 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7990:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7992:	4638      	mov	r0, r7
    7994:	f00d fd1a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7998:	2806      	cmp	r0, #6
    799a:	d98e      	bls.n	78ba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    799c:	1db8      	adds	r0, r7, #6
    799e:	f00d fd15 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    79a2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79a4:	2800      	cmp	r0, #0
    79a6:	d08a      	beq.n	78be <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    79a8:	4620      	mov	r0, r4
    79aa:	f00d fd03 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79ae:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79b0:	6820      	ldr	r0, [r4, #0]
    79b2:	f00c fae0 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    79b6:	4286      	cmp	r6, r0
    79b8:	d248      	bcs.n	7a4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    79ba:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    79be:	f8d8 3000 	ldr.w	r3, [r8]
    79c2:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    79c6:	682f      	ldr	r7, [r5, #0]
    79c8:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    79cc:	4638      	mov	r0, r7
    79ce:	f00d fcf7 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79d2:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79d4:	4620      	mov	r0, r4
    79d6:	f00d fcf9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79da:	2808      	cmp	r0, #8
    79dc:	f67f af71 	bls.w	78c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    79e0:	f104 0008 	add.w	r0, r4, #8
    79e4:	f00d fcf2 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    79e8:	e76c      	b.n	78c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79ea:	2400      	movs	r4, #0
    79ec:	e772      	b.n	78d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    79ee:	4b11      	ldr	r3, [pc, #68]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    79f0:	4a11      	ldr	r2, [pc, #68]	; (7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    79f2:	f44f 7183 	mov.w	r1, #262	; 0x106
    79f6:	4811      	ldr	r0, [pc, #68]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    79f8:	f00b f850 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79fc:	2000      	movs	r0, #0
    79fe:	e782      	b.n	7906 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a00:	2400      	movs	r4, #0
    7a02:	e787      	b.n	7914 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7a04:	4b0b      	ldr	r3, [pc, #44]	; (7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7a06:	4a0f      	ldr	r2, [pc, #60]	; (7a44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7a08:	f44f 7183 	mov.w	r1, #262	; 0x106
    7a0c:	480b      	ldr	r0, [pc, #44]	; (7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7a0e:	f00b f845 	bl	12a9c <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7a12:	4632      	mov	r2, r6
    7a14:	490c      	ldr	r1, [pc, #48]	; (7a48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7a16:	68a8      	ldr	r0, [r5, #8]
    7a18:	f00e fa4c 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7a1c:	2301      	movs	r3, #1
    7a1e:	e681      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7a20:	0003377c 	.word	0x0003377c
    7a24:	00015683 	.word	0x00015683
    7a28:	000156d3 	.word	0x000156d3
    7a2c:	000156dd 	.word	0x000156dd
    7a30:	00015691 	.word	0x00015691
    7a34:	00032664 	.word	0x00032664
    7a38:	000327b4 	.word	0x000327b4
    7a3c:	00032730 	.word	0x00032730
    7a40:	000337a0 	.word	0x000337a0
    7a44:	00032670 	.word	0x00032670
    7a48:	000337ec 	.word	0x000337ec
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7a4c:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    7a4e:	6833      	ldr	r3, [r6, #0]
    7a50:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    7a52:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7a54:	4620      	mov	r0, r4
    7a56:	f00d fcb3 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a5a:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a5e:	4640      	mov	r0, r8
    7a60:	f00d fcb4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a64:	2808      	cmp	r0, #8
    7a66:	d904      	bls.n	7a72 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    7a68:	f108 0008 	add.w	r0, r8, #8
    7a6c:	f00d fcae 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7a70:	e000      	b.n	7a74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    7a72:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7a74:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a76:	b360      	cbz	r0, 7ad2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    7a78:	4620      	mov	r0, r4
    7a7a:	f00d fc9b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a7e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a80:	6820      	ldr	r0, [r4, #0]
    7a82:	f00c fa78 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a86:	b330      	cbz	r0, 7ad6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a88:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a8a:	4620      	mov	r0, r4
    7a8c:	f00d fc92 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a90:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7a92:	4620      	mov	r0, r4
    7a94:	f00d fc94 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a98:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a9c:	4640      	mov	r0, r8
    7a9e:	f00d fc95 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aa2:	2808      	cmp	r0, #8
    7aa4:	d91e      	bls.n	7ae4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    7aa6:	f108 0008 	add.w	r0, r8, #8
    7aaa:	f00d fc8f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7aae:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ab0:	b1d0      	cbz	r0, 7ae8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7ab2:	4620      	mov	r0, r4
    7ab4:	f00d fc7e 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ab8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7aba:	6820      	ldr	r0, [r4, #0]
    7abc:	f00c fa5b 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7ac0:	0081      	lsls	r1, r0, #2
    7ac2:	4630      	mov	r0, r6
    7ac4:	47b8      	blx	r7
    7ac6:	4604      	mov	r4, r0
  output_tensors_ =
    7ac8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    7acc:	b170      	cbz	r0, 7aec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7ace:	2600      	movs	r6, #0
    7ad0:	e0c6      	b.n	7c60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ad2:	2400      	movs	r4, #0
    7ad4:	e7d4      	b.n	7a80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7ad6:	4b8f      	ldr	r3, [pc, #572]	; (7d14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7ad8:	4a8f      	ldr	r2, [pc, #572]	; (7d18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7ada:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ade:	488f      	ldr	r0, [pc, #572]	; (7d1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7ae0:	f00a ffdc 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ae4:	2000      	movs	r0, #0
    7ae6:	e7e2      	b.n	7aae <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ae8:	2400      	movs	r4, #0
    7aea:	e7e6      	b.n	7aba <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    7aec:	68ae      	ldr	r6, [r5, #8]
    7aee:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7af0:	4628      	mov	r0, r5
    7af2:	f00d fc65 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7af6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7af8:	4638      	mov	r0, r7
    7afa:	f00d fc67 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7afe:	2808      	cmp	r0, #8
    7b00:	d920      	bls.n	7b44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7b02:	f107 0008 	add.w	r0, r7, #8
    7b06:	f00d fc61 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b0a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b0c:	b1e0      	cbz	r0, 7b48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    7b0e:	4628      	mov	r0, r5
    7b10:	f00d fc50 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b14:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b16:	6828      	ldr	r0, [r5, #0]
    7b18:	f00c fa2d 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b1c:	b1b0      	cbz	r0, 7b4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b1e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b20:	4628      	mov	r0, r5
    7b22:	f00d fc47 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b26:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7b28:	4628      	mov	r0, r5
    7b2a:	f00d fc49 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b2e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b30:	4638      	mov	r0, r7
    7b32:	f00d fc4b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b36:	2808      	cmp	r0, #8
    7b38:	d90f      	bls.n	7b5a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    7b3a:	f107 0008 	add.w	r0, r7, #8
    7b3e:	f00d fc45 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7b42:	e00b      	b.n	7b5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    7b44:	2000      	movs	r0, #0
    7b46:	e7e0      	b.n	7b0a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b48:	4625      	mov	r5, r4
    7b4a:	e7e4      	b.n	7b16 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    7b4c:	4b71      	ldr	r3, [pc, #452]	; (7d14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b4e:	4a72      	ldr	r2, [pc, #456]	; (7d18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7b50:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b54:	4871      	ldr	r0, [pc, #452]	; (7d1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b56:	f00a ffa1 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b5a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7b5c:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b5e:	b118      	cbz	r0, 7b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    7b60:	4628      	mov	r0, r5
    7b62:	f00d fc27 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b66:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b68:	6820      	ldr	r0, [r4, #0]
    7b6a:	f00c fa04 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7b6e:	0082      	lsls	r2, r0, #2
    7b70:	496b      	ldr	r1, [pc, #428]	; (7d20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    7b72:	4630      	mov	r0, r6
    7b74:	f00e f99e 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7b78:	2301      	movs	r3, #1
    7b7a:	e5d3      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b7c:	2000      	movs	r0, #0
    7b7e:	e07d      	b.n	7c7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b80:	2400      	movs	r4, #0
    7b82:	e083      	b.n	7c8c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    7b84:	4b63      	ldr	r3, [pc, #396]	; (7d14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b86:	4a64      	ldr	r2, [pc, #400]	; (7d18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7b88:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b8c:	4863      	ldr	r0, [pc, #396]	; (7d1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b8e:	f00a ff85 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b92:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7b94:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b96:	2800      	cmp	r0, #0
    7b98:	f000 8092 	beq.w	7cc0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    7b9c:	4620      	mov	r0, r4
    7b9e:	f00d fc09 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ba2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ba4:	6820      	ldr	r0, [r4, #0]
    7ba6:	f00c f9e6 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7baa:	4286      	cmp	r6, r0
    7bac:	f080 80a7 	bcs.w	7cfe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7bb0:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7bb4:	f8d8 3000 	ldr.w	r3, [r8]
    7bb8:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7bbc:	682f      	ldr	r7, [r5, #0]
    7bbe:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7bc2:	4638      	mov	r0, r7
    7bc4:	f00d fbfc 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7bc8:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7bca:	4620      	mov	r0, r4
    7bcc:	f00d fbfe 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bd0:	2808      	cmp	r0, #8
    7bd2:	d977      	bls.n	7cc4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7bd4:	f104 0008 	add.w	r0, r4, #8
    7bd8:	f00d fbf8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7bdc:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bde:	2800      	cmp	r0, #0
    7be0:	d072      	beq.n	7cc8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7be2:	4620      	mov	r0, r4
    7be4:	f00d fbe6 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7be8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bea:	6820      	ldr	r0, [r4, #0]
    7bec:	f00c f9c3 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d06b      	beq.n	7ccc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7bf4:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7bf6:	4620      	mov	r0, r4
    7bf8:	f00d fbdc 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bfc:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7bfe:	4620      	mov	r0, r4
    7c00:	f00d fbde 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c04:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c08:	4658      	mov	r0, fp
    7c0a:	f00d fbdf 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c0e:	2808      	cmp	r0, #8
    7c10:	d963      	bls.n	7cda <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7c12:	f10b 0008 	add.w	r0, fp, #8
    7c16:	f00d fbd9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c1a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c1c:	2800      	cmp	r0, #0
    7c1e:	d05e      	beq.n	7cde <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7c20:	4620      	mov	r0, r4
    7c22:	f00d fbc7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c26:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c28:	6820      	ldr	r0, [r4, #0]
    7c2a:	f00c f9a4 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c2e:	4286      	cmp	r6, r0
    7c30:	d257      	bcs.n	7ce2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c32:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7c34:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7c38:	f00d fbc1 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7c3c:	4603      	mov	r3, r0
    7c3e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    7c42:	2200      	movs	r2, #0
    7c44:	9200      	str	r2, [sp, #0]
    7c46:	4652      	mov	r2, sl
    7c48:	4639      	mov	r1, r7
    7c4a:	4640      	mov	r0, r8
    7c4c:	47c8      	blx	r9
    7c4e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    7c52:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7c56:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d048      	beq.n	7cf0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7c5e:	3601      	adds	r6, #1
    7c60:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7c62:	4620      	mov	r0, r4
    7c64:	f00d fbac 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c68:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c6a:	4638      	mov	r0, r7
    7c6c:	f00d fbae 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c70:	2808      	cmp	r0, #8
    7c72:	d983      	bls.n	7b7c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    7c74:	f107 0008 	add.w	r0, r7, #8
    7c78:	f00d fba8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7c7c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c7e:	2800      	cmp	r0, #0
    7c80:	f43f af7e 	beq.w	7b80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    7c84:	4620      	mov	r0, r4
    7c86:	f00d fb95 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c8a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c8c:	6820      	ldr	r0, [r4, #0]
    7c8e:	f00c f972 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c92:	2800      	cmp	r0, #0
    7c94:	f43f af76 	beq.w	7b84 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c98:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7c9a:	4620      	mov	r0, r4
    7c9c:	f00d fb8a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ca0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7ca2:	4620      	mov	r0, r4
    7ca4:	f00d fb8c 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ca8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7caa:	4638      	mov	r0, r7
    7cac:	f00d fb8e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cb0:	2808      	cmp	r0, #8
    7cb2:	f67f af6e 	bls.w	7b92 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7cb6:	f107 0008 	add.w	r0, r7, #8
    7cba:	f00d fb87 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7cbe:	e769      	b.n	7b94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cc0:	2400      	movs	r4, #0
    7cc2:	e76f      	b.n	7ba4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cc4:	2000      	movs	r0, #0
    7cc6:	e789      	b.n	7bdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cc8:	2400      	movs	r4, #0
    7cca:	e78e      	b.n	7bea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    7ccc:	4b11      	ldr	r3, [pc, #68]	; (7d14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7cce:	4a12      	ldr	r2, [pc, #72]	; (7d18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7cd0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7cd4:	4811      	ldr	r0, [pc, #68]	; (7d1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7cd6:	f00a fee1 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7cda:	2000      	movs	r0, #0
    7cdc:	e79d      	b.n	7c1a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7cde:	2400      	movs	r4, #0
    7ce0:	e7a2      	b.n	7c28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7ce2:	4b0c      	ldr	r3, [pc, #48]	; (7d14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7ce4:	4a0f      	ldr	r2, [pc, #60]	; (7d24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7ce6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7cea:	480c      	ldr	r0, [pc, #48]	; (7d1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7cec:	f00a fed6 	bl	12a9c <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7cf0:	4632      	mov	r2, r6
    7cf2:	490d      	ldr	r1, [pc, #52]	; (7d28 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7cf4:	68a8      	ldr	r0, [r5, #8]
    7cf6:	f00e f8dd 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7cfa:	2301      	movs	r3, #1
    7cfc:	e512      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    7cfe:	4628      	mov	r0, r5
    7d00:	f00d fd45 	bl	1578e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7d04:	4603      	mov	r3, r0
    7d06:	2800      	cmp	r0, #0
    7d08:	f47f ad0c 	bne.w	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7d0c:	2201      	movs	r2, #1
    7d0e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7d12:	e507      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7d14:	00032664 	.word	0x00032664
    7d18:	000327b4 	.word	0x000327b4
    7d1c:	00032730 	.word	0x00032730
    7d20:	00033814 	.word	0x00033814
    7d24:	00032670 	.word	0x00032670
    7d28:	00033860 	.word	0x00033860

00007d2c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7d2c:	b510      	push	{r4, lr}
    7d2e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7d30:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7d34:	b95b      	cbnz	r3, 7d4e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7d36:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7d3a:	b913      	cbnz	r3, 7d42 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7d3c:	f7ff fcde 	bl	76fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7d40:	b920      	cbnz	r0, 7d4c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    7d42:	2100      	movs	r1, #0
    7d44:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7d48:	f7fe ff04 	bl	6b54 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7d4c:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7d4e:	4903      	ldr	r1, [pc, #12]	; (7d5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7d50:	6880      	ldr	r0, [r0, #8]
    7d52:	f00e f8af 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7d56:	2001      	movs	r0, #1
    7d58:	e7f8      	b.n	7d4c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7d5a:	bf00      	nop
    7d5c:	00033888 	.word	0x00033888

00007d60 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7d60:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    7d62:	4c05      	ldr	r4, [pc, #20]	; (7d78 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    7d64:	6004      	str	r4, [r0, #0]
    7d66:	6041      	str	r1, [r0, #4]
    7d68:	60c2      	str	r2, [r0, #12]
    7d6a:	2200      	movs	r2, #0
    7d6c:	7402      	strb	r2, [r0, #16]
    7d6e:	6142      	str	r2, [r0, #20]
    7d70:	6182      	str	r2, [r0, #24]
    7d72:	bc10      	pop	{r4}
    7d74:	4770      	bx	lr
    7d76:	bf00      	nop
    7d78:	00033fd4 	.word	0x00033fd4

00007d7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    7d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d7e:	4605      	mov	r5, r0
    7d80:	460f      	mov	r7, r1
    7d82:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    7d84:	f00d fe00 	bl	15988 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7d88:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    7d8a:	4613      	mov	r3, r2
    7d8c:	e000      	b.n	7d90 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7d8e:	3201      	adds	r2, #1
    7d90:	696c      	ldr	r4, [r5, #20]
    7d92:	4294      	cmp	r4, r2
    7d94:	d907      	bls.n	7da6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7d96:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    7d9a:	6864      	ldr	r4, [r4, #4]
    7d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
    7da0:	d1f5      	bne.n	7d8e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7da2:	3301      	adds	r3, #1
    7da4:	e7f3      	b.n	7d8e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7da6:	2b0b      	cmp	r3, #11
    7da8:	d80d      	bhi.n	7dc6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7daa:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7dae:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7db2:	f04f 32ff 	mov.w	r2, #4294967295
    7db6:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7db8:	696b      	ldr	r3, [r5, #20]
    7dba:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7dbc:	696b      	ldr	r3, [r5, #20]
    7dbe:	3301      	adds	r3, #1
    7dc0:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7dc2:	2000      	movs	r0, #0
}
    7dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7dc6:	220c      	movs	r2, #12
    7dc8:	4902      	ldr	r1, [pc, #8]	; (7dd4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7dca:	68e8      	ldr	r0, [r5, #12]
    7dcc:	f00e f872 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7dd0:	2001      	movs	r0, #1
    7dd2:	e7f7      	b.n	7dc4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7dd4:	000338b8 	.word	0x000338b8

00007dd8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7ddc:	b122      	cbz	r2, 7de8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7dde:	4607      	mov	r7, r0
    7de0:	460e      	mov	r6, r1
    7de2:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7de4:	2500      	movs	r5, #0
    7de6:	e029      	b.n	7e3c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7de8:	f010 fe54 	bl	18a94 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7dee:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7df0:	b390      	cbz	r0, 7e58 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7df2:	4620      	mov	r0, r4
    7df4:	f00d fade 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7df8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7dfa:	6820      	ldr	r0, [r4, #0]
    7dfc:	f00c f8bb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e00:	4285      	cmp	r5, r0
    7e02:	d23a      	bcs.n	7e7a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7e04:	6820      	ldr	r0, [r4, #0]
    7e06:	f00c f8b6 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e0a:	4285      	cmp	r5, r0
    7e0c:	d226      	bcs.n	7e5c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e0e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7e10:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e14:	4620      	mov	r0, r4
    7e16:	f00d facd 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7e1a:	1820      	adds	r0, r4, r0
    7e1c:	d025      	beq.n	7e6a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7e1e:	f00d fb7f 	bl	15520 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7e22:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7e24:	681a      	ldr	r2, [r3, #0]
    7e26:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7e28:	2204      	movs	r2, #4
    7e2a:	212c      	movs	r1, #44	; 0x2c
    7e2c:	fb01 f100 	mul.w	r1, r1, r0
    7e30:	4618      	mov	r0, r3
    7e32:	47a0      	blx	r4
    if (output == nullptr) {
    7e34:	b1d8      	cbz	r0, 7e6e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7e36:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e3a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7e3c:	4630      	mov	r0, r6
    7e3e:	f00d fabf 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e42:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e44:	4620      	mov	r0, r4
    7e46:	f00d fac1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e4a:	2808      	cmp	r0, #8
    7e4c:	d9ce      	bls.n	7dec <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7e4e:	f104 0008 	add.w	r0, r4, #8
    7e52:	f00d fabb 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e56:	e7ca      	b.n	7dee <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e58:	2400      	movs	r4, #0
    7e5a:	e7ce      	b.n	7dfa <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7e5c:	4b08      	ldr	r3, [pc, #32]	; (7e80 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7e5e:	4a09      	ldr	r2, [pc, #36]	; (7e84 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7e60:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e64:	4808      	ldr	r0, [pc, #32]	; (7e88 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7e66:	f00a fe19 	bl	12a9c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7e6a:	f010 fe13 	bl	18a94 <abort>
      TF_LITE_REPORT_ERROR(
    7e6e:	4907      	ldr	r1, [pc, #28]	; (7e8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7e70:	68f8      	ldr	r0, [r7, #12]
    7e72:	f00e f81f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7e76:	2001      	movs	r0, #1
    7e78:	e000      	b.n	7e7c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7e7a:	2000      	movs	r0, #0
}
    7e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e80:	00032664 	.word	0x00032664
    7e84:	000327b4 	.word	0x000327b4
    7e88:	00032730 	.word	0x00032730
    7e8c:	000338f0 	.word	0x000338f0

00007e90 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e94:	b083      	sub	sp, #12
    7e96:	4605      	mov	r5, r0
    7e98:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7e9a:	7c03      	ldrb	r3, [r0, #16]
    7e9c:	b11b      	cbz	r3, 7ea6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7e9e:	460f      	mov	r7, r1
    7ea0:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7ea2:	2600      	movs	r6, #0
    7ea4:	e043      	b.n	7f2e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7ea6:	4930      	ldr	r1, [pc, #192]	; (7f68 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7ea8:	68c0      	ldr	r0, [r0, #12]
    7eaa:	f00e f803 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7eae:	2301      	movs	r3, #1
    7eb0:	e055      	b.n	7f5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7eb2:	f104 0008 	add.w	r0, r4, #8
    7eb6:	f00d fa89 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7eba:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d041      	beq.n	7f44 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7ec0:	4620      	mov	r0, r4
    7ec2:	f00d fa77 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ec6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ec8:	6820      	ldr	r0, [r4, #0]
    7eca:	f00c f854 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7ece:	4286      	cmp	r6, r0
    7ed0:	d243      	bcs.n	7f5a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7ed2:	6820      	ldr	r0, [r4, #0]
    7ed4:	f00c f84f 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ed8:	4286      	cmp	r6, r0
    7eda:	d235      	bcs.n	7f48 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7edc:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7ede:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7ee2:	4620      	mov	r0, r4
    7ee4:	f00d fa66 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7ee8:	1824      	adds	r4, r4, r0
    7eea:	d034      	beq.n	7f56 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7eec:	682b      	ldr	r3, [r5, #0]
    7eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7ef0:	696a      	ldr	r2, [r5, #20]
    7ef2:	4641      	mov	r1, r8
    7ef4:	4628      	mov	r0, r5
    7ef6:	4798      	blx	r3
    7ef8:	4603      	mov	r3, r0
    7efa:	bb80      	cbnz	r0, 7f5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7efc:	682b      	ldr	r3, [r5, #0]
    7efe:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7f02:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7f06:	9600      	str	r6, [sp, #0]
    7f08:	f8d8 3000 	ldr.w	r3, [r8]
    7f0c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7f10:	4639      	mov	r1, r7
    7f12:	4628      	mov	r0, r5
    7f14:	47d8      	blx	fp
    7f16:	4603      	mov	r3, r0
    7f18:	bb08      	cbnz	r0, 7f5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7f1a:	682b      	ldr	r3, [r5, #0]
    7f1c:	6a1b      	ldr	r3, [r3, #32]
    7f1e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7f22:	4621      	mov	r1, r4
    7f24:	4628      	mov	r0, r5
    7f26:	4798      	blx	r3
    7f28:	4603      	mov	r3, r0
    7f2a:	b9c0      	cbnz	r0, 7f5e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7f2c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7f2e:	4638      	mov	r0, r7
    7f30:	f00d fa46 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f34:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f36:	4620      	mov	r0, r4
    7f38:	f00d fa48 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f3c:	2808      	cmp	r0, #8
    7f3e:	d8b8      	bhi.n	7eb2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7f40:	2000      	movs	r0, #0
    7f42:	e7ba      	b.n	7eba <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f44:	2400      	movs	r4, #0
    7f46:	e7bf      	b.n	7ec8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7f48:	4b08      	ldr	r3, [pc, #32]	; (7f6c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7f4a:	4a09      	ldr	r2, [pc, #36]	; (7f70 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7f4c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f50:	4808      	ldr	r0, [pc, #32]	; (7f74 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7f52:	f00a fda3 	bl	12a9c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7f56:	f010 fd9d 	bl	18a94 <abort>
  model_is_allocating_ = false;
    7f5a:	2300      	movs	r3, #0
    7f5c:	742b      	strb	r3, [r5, #16]
}
    7f5e:	4618      	mov	r0, r3
    7f60:	b003      	add	sp, #12
    7f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f66:	bf00      	nop
    7f68:	00033928 	.word	0x00033928
    7f6c:	00032664 	.word	0x00032664
    7f70:	000327b4 	.word	0x000327b4
    7f74:	00032730 	.word	0x00032730

00007f78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7f78:	b570      	push	{r4, r5, r6, lr}
    7f7a:	4606      	mov	r6, r0
    7f7c:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7f7e:	f00d fa1f 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f82:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f84:	4620      	mov	r0, r4
    7f86:	f00d fa21 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f8a:	2808      	cmp	r0, #8
    7f8c:	d923      	bls.n	7fd6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7f8e:	f104 0008 	add.w	r0, r4, #8
    7f92:	f00d fa1b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7f96:	b300      	cbz	r0, 7fda <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7f98:	4430      	add	r0, r6
    7f9a:	f00d fa0b 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f9e:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7fa0:	6828      	ldr	r0, [r5, #0]
    7fa2:	f00b ffe8 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7fa6:	42b0      	cmp	r0, r6
    7fa8:	d919      	bls.n	7fde <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7faa:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7fac:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7fb0:	4620      	mov	r0, r4
    7fb2:	f00d f9ff 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7fb6:	1824      	adds	r4, r4, r0
    7fb8:	d025      	beq.n	8006 <CONFIG_MAIN_STACK_SIZE+0x6>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7fba:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7fbc:	4620      	mov	r0, r4
    7fbe:	f00d f9ff 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7fc2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7fc4:	4620      	mov	r0, r4
    7fc6:	f00d fa01 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fca:	2804      	cmp	r0, #4
    7fcc:	d90e      	bls.n	7fec <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7fce:	1d20      	adds	r0, r4, #4
    7fd0:	f00d f9fc 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7fd4:	e00b      	b.n	7fee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7fd6:	2000      	movs	r0, #0
    7fd8:	e7dd      	b.n	7f96 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7fda:	2600      	movs	r6, #0
    7fdc:	e7e0      	b.n	7fa0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7fde:	4b0d      	ldr	r3, [pc, #52]	; (8014 <CONFIG_MAIN_STACK_SIZE+0x14>)
    7fe0:	4a0d      	ldr	r2, [pc, #52]	; (8018 <CONFIG_MAIN_STACK_SIZE+0x18>)
    7fe2:	f44f 7183 	mov.w	r1, #262	; 0x106
    7fe6:	480d      	ldr	r0, [pc, #52]	; (801c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    7fe8:	f00a fd58 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fec:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7fee:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ff0:	b158      	cbz	r0, 800a <CONFIG_MAIN_STACK_SIZE+0xa>
    7ff2:	4628      	mov	r0, r5
    7ff4:	f00d f9de 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ff8:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7ffa:	b124      	cbz	r4, 8006 <CONFIG_MAIN_STACK_SIZE+0x6>
  uoffset_t size() const { return EndianScalar(length_); }
    7ffc:	6820      	ldr	r0, [r4, #0]
    7ffe:	f00b ffba 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    8002:	b120      	cbz	r0, 800e <CONFIG_MAIN_STACK_SIZE+0xe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8004:	3404      	adds	r4, #4
}
    8006:	4620      	mov	r0, r4
    8008:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    800a:	2400      	movs	r4, #0
    800c:	e7f5      	b.n	7ffa <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    800e:	2400      	movs	r4, #0
  return out_buffer;
    8010:	e7f9      	b.n	8006 <CONFIG_MAIN_STACK_SIZE+0x6>
    8012:	bf00      	nop
    8014:	00032664 	.word	0x00032664
    8018:	00033974 	.word	0x00033974
    801c:	00032730 	.word	0x00032730

00008020 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    8020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8024:	b082      	sub	sp, #8
    8026:	4606      	mov	r6, r0
    8028:	460f      	mov	r7, r1
    802a:	4690      	mov	r8, r2
    802c:	461d      	mov	r5, r3
    802e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    8032:	4608      	mov	r0, r1
    8034:	f00d f9c4 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8038:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    803a:	4620      	mov	r0, r4
    803c:	f00d f9c6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8040:	2808      	cmp	r0, #8
    8042:	d93e      	bls.n	80c2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    8044:	f104 0008 	add.w	r0, r4, #8
    8048:	f00d f9c0 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    804c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    804e:	2800      	cmp	r0, #0
    8050:	d039      	beq.n	80c6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    8052:	4620      	mov	r0, r4
    8054:	f00d f9ae 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8058:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    805a:	6820      	ldr	r0, [r4, #0]
    805c:	f00b ff8b 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8060:	4581      	cmp	r9, r0
    8062:	d232      	bcs.n	80ca <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8064:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8066:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    806a:	4620      	mov	r0, r4
    806c:	f00d f9a2 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    8070:	42c4      	cmn	r4, r0
    8072:	d031      	beq.n	80d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    8074:	6833      	ldr	r3, [r6, #0]
    8076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8078:	4630      	mov	r0, r6
    807a:	4798      	blx	r3
    807c:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    807e:	6833      	ldr	r3, [r6, #0]
    8080:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    8084:	2300      	movs	r3, #0
    8086:	9301      	str	r3, [sp, #4]
    8088:	f8cd 9000 	str.w	r9, [sp]
    808c:	462b      	mov	r3, r5
    808e:	4602      	mov	r2, r0
    8090:	4639      	mov	r1, r7
    8092:	4630      	mov	r0, r6
    8094:	47d0      	blx	sl
    8096:	bb08      	cbnz	r0, 80dc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    8098:	f1b8 0f00 	cmp.w	r8, #0
    809c:	d00d      	beq.n	80ba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    809e:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    80a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    80aa:	00ad      	lsls	r5, r5, #2
    80ac:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    80ae:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    80b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80b4:	441d      	add	r5, r3
    80b6:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    80b8:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    80ba:	4620      	mov	r0, r4
    80bc:	b002      	add	sp, #8
    80be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80c2:	2000      	movs	r0, #0
    80c4:	e7c2      	b.n	804c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80c6:	2400      	movs	r4, #0
    80c8:	e7c7      	b.n	805a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    80ca:	4b07      	ldr	r3, [pc, #28]	; (80e8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    80cc:	4a07      	ldr	r2, [pc, #28]	; (80ec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    80ce:	f44f 7183 	mov.w	r1, #262	; 0x106
    80d2:	4807      	ldr	r0, [pc, #28]	; (80f0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    80d4:	f00a fce2 	bl	12a9c <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    80d8:	f010 fcdc 	bl	18a94 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    80dc:	4905      	ldr	r1, [pc, #20]	; (80f4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    80de:	68f0      	ldr	r0, [r6, #12]
    80e0:	f00d fee8 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    80e4:	2400      	movs	r4, #0
    80e6:	e7e8      	b.n	80ba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    80e8:	00032664 	.word	0x00032664
    80ec:	000327b4 	.word	0x000327b4
    80f0:	00032730 	.word	0x00032730
    80f4:	00033a68 	.word	0x00033a68

000080f8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    80f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80fc:	b082      	sub	sp, #8
    80fe:	4680      	mov	r8, r0
    8100:	460e      	mov	r6, r1
    8102:	4617      	mov	r7, r2
    8104:	461d      	mov	r5, r3
    8106:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    810a:	4608      	mov	r0, r1
    810c:	f00d f958 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8110:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8112:	4620      	mov	r0, r4
    8114:	f00d f95a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8118:	2808      	cmp	r0, #8
    811a:	d93e      	bls.n	819a <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    811c:	f104 0008 	add.w	r0, r4, #8
    8120:	f00d f954 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8124:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8126:	2800      	cmp	r0, #0
    8128:	d039      	beq.n	819e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    812a:	4620      	mov	r0, r4
    812c:	f00d f942 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8130:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8132:	6820      	ldr	r0, [r4, #0]
    8134:	f00b ff1f 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8138:	4581      	cmp	r9, r0
    813a:	d232      	bcs.n	81a2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    813c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    813e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8142:	4620      	mov	r0, r4
    8144:	f00d f936 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    8148:	42c4      	cmn	r4, r0
    814a:	d031      	beq.n	81b0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    814c:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    8150:	6803      	ldr	r3, [r0, #0]
    8152:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    8154:	2204      	movs	r2, #4
    8156:	2140      	movs	r1, #64	; 0x40
    8158:	4798      	blx	r3
    815a:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    815c:	f8d8 3000 	ldr.w	r3, [r8]
    8160:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    8164:	2301      	movs	r3, #1
    8166:	9301      	str	r3, [sp, #4]
    8168:	f8cd 9000 	str.w	r9, [sp]
    816c:	462b      	mov	r3, r5
    816e:	4602      	mov	r2, r0
    8170:	4631      	mov	r1, r6
    8172:	4640      	mov	r0, r8
    8174:	47d0      	blx	sl
    8176:	b9e8      	cbnz	r0, 81b4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    8178:	b15f      	cbz	r7, 8192 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    817a:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    817e:	687b      	ldr	r3, [r7, #4]
    8180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8184:	00ad      	lsls	r5, r5, #2
    8186:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    8188:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    818a:	687b      	ldr	r3, [r7, #4]
    818c:	441d      	add	r5, r3
    818e:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    8190:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    8192:	4620      	mov	r0, r4
    8194:	b002      	add	sp, #8
    8196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    819a:	2000      	movs	r0, #0
    819c:	e7c2      	b.n	8124 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    819e:	2400      	movs	r4, #0
    81a0:	e7c7      	b.n	8132 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    81a2:	4b08      	ldr	r3, [pc, #32]	; (81c4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    81a4:	4a08      	ldr	r2, [pc, #32]	; (81c8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    81a6:	f44f 7183 	mov.w	r1, #262	; 0x106
    81aa:	4808      	ldr	r0, [pc, #32]	; (81cc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    81ac:	f00a fc76 	bl	12a9c <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    81b0:	f010 fc70 	bl	18a94 <abort>
    TF_LITE_REPORT_ERROR(
    81b4:	4906      	ldr	r1, [pc, #24]	; (81d0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    81b6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    81ba:	f00d fe7b 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    81be:	2400      	movs	r4, #0
    81c0:	e7e7      	b.n	8192 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    81c2:	bf00      	nop
    81c4:	00032664 	.word	0x00032664
    81c8:	000327b4 	.word	0x000327b4
    81cc:	00032730 	.word	0x00032730
    81d0:	00033ab4 	.word	0x00033ab4

000081d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    81d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81d8:	4607      	mov	r7, r0
    81da:	460c      	mov	r4, r1
    81dc:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    81de:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    81e0:	4608      	mov	r0, r1
    81e2:	f00d f8ed 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81e6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81e8:	4628      	mov	r0, r5
    81ea:	f00d f8ef 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81ee:	2810      	cmp	r0, #16
    81f0:	d904      	bls.n	81fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    81f2:	f105 0010 	add.w	r0, r5, #16
    81f6:	f00d f8e9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    81fa:	e000      	b.n	81fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    81fc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    81fe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8200:	b140      	cbz	r0, 8214 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    8202:	4620      	mov	r0, r4
    8204:	f00d f8d6 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8208:	4404      	add	r4, r0
  if (model->metadata()) {
    820a:	2c00      	cmp	r4, #0
    820c:	f000 80cc 	beq.w	83a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8210:	2500      	movs	r5, #0
    8212:	e023      	b.n	825c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    8214:	2400      	movs	r4, #0
    8216:	e7f8      	b.n	820a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8218:	2000      	movs	r0, #0
    821a:	e02c      	b.n	8276 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    821c:	2400      	movs	r4, #0
    821e:	e031      	b.n	8284 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    8220:	4b64      	ldr	r3, [pc, #400]	; (83b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    8222:	4a65      	ldr	r2, [pc, #404]	; (83b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    8224:	f44f 7183 	mov.w	r1, #262	; 0x106
    8228:	4864      	ldr	r0, [pc, #400]	; (83bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    822a:	f00a fc37 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    822e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8230:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8234:	2800      	cmp	r0, #0
    8236:	d046      	beq.n	82c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    8238:	4648      	mov	r0, r9
    823a:	f00d f8bb 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    823e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8240:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    8244:	f8df a180 	ldr.w	sl, [pc, #384]	; 83c8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    8248:	4650      	mov	r0, sl
    824a:	f7f9 f943 	bl	14d4 <strlen>
    824e:	4602      	mov	r2, r0
    8250:	4651      	mov	r1, sl
    8252:	4648      	mov	r0, r9
    8254:	f010 fdb9 	bl	18dca <strncmp>
    8258:	b3c0      	cbz	r0, 82cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    825a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    825c:	4630      	mov	r0, r6
    825e:	f00d f8af 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8262:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8264:	4620      	mov	r0, r4
    8266:	f00d f8b1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    826a:	2810      	cmp	r0, #16
    826c:	d9d4      	bls.n	8218 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    826e:	f104 0010 	add.w	r0, r4, #16
    8272:	f00d f8ab 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8276:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8278:	2800      	cmp	r0, #0
    827a:	d0cf      	beq.n	821c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    827c:	4620      	mov	r0, r4
    827e:	f00d f899 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8282:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8284:	6820      	ldr	r0, [r4, #0]
    8286:	f00b fe76 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    828a:	4285      	cmp	r5, r0
    828c:	f080 808e 	bcs.w	83ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    8290:	6820      	ldr	r0, [r4, #0]
    8292:	f00b fe70 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8296:	4285      	cmp	r5, r0
    8298:	d2c2      	bcs.n	8220 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    829a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    829c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    82a0:	4620      	mov	r0, r4
    82a2:	f00d f887 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82a6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    82a8:	4620      	mov	r0, r4
    82aa:	f00d f889 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82ae:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82b2:	4648      	mov	r0, r9
    82b4:	f00d f88a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82b8:	2804      	cmp	r0, #4
    82ba:	d9b8      	bls.n	822e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    82bc:	f109 0004 	add.w	r0, r9, #4
    82c0:	f00d f884 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    82c4:	e7b4      	b.n	8230 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82c6:	f04f 0900 	mov.w	r9, #0
    82ca:	e7b9      	b.n	8240 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    82cc:	4630      	mov	r0, r6
    82ce:	f00d f877 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82d2:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    82d6:	4648      	mov	r0, r9
    82d8:	f00d f878 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82dc:	280c      	cmp	r0, #12
    82de:	d94e      	bls.n	837e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    82e0:	f109 000c 	add.w	r0, r9, #12
    82e4:	f00d f872 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    82e8:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82ec:	2800      	cmp	r0, #0
    82ee:	d048      	beq.n	8382 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    82f0:	4648      	mov	r0, r9
    82f2:	f00d f85f 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82f6:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    82f8:	4620      	mov	r0, r4
    82fa:	f00d f861 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    82fe:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8302:	4650      	mov	r0, sl
    8304:	f00d f862 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8308:	2806      	cmp	r0, #6
    830a:	d93d      	bls.n	8388 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    830c:	f10a 0006 	add.w	r0, sl, #6
    8310:	f00d f85c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8314:	b3d0      	cbz	r0, 838c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    8316:	4420      	add	r0, r4
    8318:	f00d f84c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    831c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    831e:	f8d9 0000 	ldr.w	r0, [r9]
    8322:	f00b fe28 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8326:	4550      	cmp	r0, sl
    8328:	d933      	bls.n	8392 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    832a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    832e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8332:	4620      	mov	r0, r4
    8334:	f00d f83e 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8338:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    833a:	4620      	mov	r0, r4
    833c:	f00d f840 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8340:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8344:	4648      	mov	r0, r9
    8346:	f00d f841 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    834a:	2804      	cmp	r0, #4
    834c:	d928      	bls.n	83a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    834e:	f109 0004 	add.w	r0, r9, #4
    8352:	f00d f83b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8356:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8358:	b320      	cbz	r0, 83a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    835a:	4620      	mov	r0, r4
    835c:	f00d f82a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8360:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    8362:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    8364:	3010      	adds	r0, #16
        *offline_planner_offsets =
    8366:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    836a:	687b      	ldr	r3, [r7, #4]
    836c:	4293      	cmp	r3, r2
    836e:	f43f af74 	beq.w	825a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    8372:	4913      	ldr	r1, [pc, #76]	; (83c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    8374:	68f8      	ldr	r0, [r7, #12]
    8376:	f00d fd9d 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    837a:	2001      	movs	r0, #1
    837c:	e017      	b.n	83ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    837e:	2000      	movs	r0, #0
    8380:	e7b2      	b.n	82e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8382:	f04f 0900 	mov.w	r9, #0
    8386:	e7b7      	b.n	82f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8388:	2000      	movs	r0, #0
    838a:	e7c3      	b.n	8314 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    838c:	f04f 0a00 	mov.w	sl, #0
    8390:	e7c5      	b.n	831e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    8392:	4b08      	ldr	r3, [pc, #32]	; (83b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    8394:	4a0b      	ldr	r2, [pc, #44]	; (83c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    8396:	f44f 7183 	mov.w	r1, #262	; 0x106
    839a:	4808      	ldr	r0, [pc, #32]	; (83bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    839c:	f00a fb7e 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83a0:	2000      	movs	r0, #0
    83a2:	e7d8      	b.n	8356 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83a4:	2000      	movs	r0, #0
    83a6:	e7dc      	b.n	8362 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    83a8:	2000      	movs	r0, #0
    83aa:	e000      	b.n	83ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    83ac:	2000      	movs	r0, #0
}
    83ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83b2:	bf00      	nop
    83b4:	00032664 	.word	0x00032664
    83b8:	00033af8 	.word	0x00033af8
    83bc:	00032730 	.word	0x00032730
    83c0:	00033bf0 	.word	0x00033bf0
    83c4:	00033974 	.word	0x00033974
    83c8:	00033f9c 	.word	0x00033f9c

000083cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    83cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    83d0:	b349      	cbz	r1, 8426 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    83d2:	4604      	mov	r4, r0
    83d4:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    83d6:	7c03      	ldrb	r3, [r0, #16]
    83d8:	bb3b      	cbnz	r3, 842a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    83da:	2301      	movs	r3, #1
    83dc:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    83de:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    83e0:	6803      	ldr	r3, [r0, #0]
    83e2:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    83e4:	2204      	movs	r2, #4
    83e6:	2108      	movs	r1, #8
    83e8:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    83ea:	4603      	mov	r3, r0
    83ec:	b118      	cbz	r0, 83f6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    83ee:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    83f0:	4926      	ldr	r1, [pc, #152]	; (848c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    83f2:	6001      	str	r1, [r0, #0]
    83f4:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    83f6:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    83f8:	4620      	mov	r0, r4
    83fa:	f00d fabb 	bl	15974 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    83fe:	2800      	cmp	r0, #0
    8400:	d142      	bne.n	8488 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8402:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8404:	683b      	ldr	r3, [r7, #0]
    8406:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    840a:	4628      	mov	r0, r5
    840c:	f00c ffd8 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8410:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8412:	4630      	mov	r0, r6
    8414:	f00c ffda 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8418:	2808      	cmp	r0, #8
    841a:	d90c      	bls.n	8436 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    841c:	f106 0008 	add.w	r0, r6, #8
    8420:	f00c ffd4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8424:	e008      	b.n	8438 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8426:	f010 fb35 	bl	18a94 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    842a:	4919      	ldr	r1, [pc, #100]	; (8490 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    842c:	68c0      	ldr	r0, [r0, #12]
    842e:	f00d fd41 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8432:	2600      	movs	r6, #0
    8434:	e01d      	b.n	8472 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8436:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8438:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    843a:	b1e8      	cbz	r0, 8478 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    843c:	4630      	mov	r0, r6
    843e:	f00c ffb9 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8442:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8444:	6830      	ldr	r0, [r6, #0]
    8446:	f00b fd96 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    844a:	2204      	movs	r2, #4
    844c:	00c1      	lsls	r1, r0, #3
    844e:	4638      	mov	r0, r7
    8450:	47c0      	blx	r8
  if (output == nullptr) {
    8452:	4606      	mov	r6, r0
    8454:	b190      	cbz	r0, 847c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8456:	6823      	ldr	r3, [r4, #0]
    8458:	69db      	ldr	r3, [r3, #28]
    845a:	4602      	mov	r2, r0
    845c:	4629      	mov	r1, r5
    845e:	4620      	mov	r0, r4
    8460:	4798      	blx	r3
    8462:	b978      	cbnz	r0, 8484 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    8464:	6823      	ldr	r3, [r4, #0]
    8466:	699b      	ldr	r3, [r3, #24]
    8468:	4632      	mov	r2, r6
    846a:	4629      	mov	r1, r5
    846c:	4620      	mov	r0, r4
    846e:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    8470:	b940      	cbnz	r0, 8484 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    8472:	4630      	mov	r0, r6
    8474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8478:	2600      	movs	r6, #0
    847a:	e7e3      	b.n	8444 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    847c:	4805      	ldr	r0, [pc, #20]	; (8494 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    847e:	f00c ff14 	bl	152aa <_Z11MicroPrintfPKcz>
    return nullptr;
    8482:	e7f6      	b.n	8472 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8484:	2600      	movs	r6, #0
    8486:	e7f4      	b.n	8472 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    8488:	2600      	movs	r6, #0
    848a:	e7f2      	b.n	8472 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    848c:	00033fbc 	.word	0x00033fbc
    8490:	00033c3c 	.word	0x00033c3c
    8494:	00033c94 	.word	0x00033c94

00008498 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    8498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    849c:	b083      	sub	sp, #12
    849e:	4680      	mov	r8, r0
    84a0:	460e      	mov	r6, r1
    84a2:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    84a4:	2500      	movs	r5, #0
    84a6:	e013      	b.n	84d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84a8:	2000      	movs	r0, #0
    84aa:	e01d      	b.n	84e8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84ac:	2400      	movs	r4, #0
    84ae:	e022      	b.n	84f6 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    84b0:	4b31      	ldr	r3, [pc, #196]	; (8578 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    84b2:	4a32      	ldr	r2, [pc, #200]	; (857c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    84b4:	f44f 7183 	mov.w	r1, #262	; 0x106
    84b8:	4831      	ldr	r0, [pc, #196]	; (8580 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    84ba:	f00a faef 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84be:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    84c0:	b118      	cbz	r0, 84ca <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    84c2:	4420      	add	r0, r4
    84c4:	f00d f84b 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    84c8:	e000      	b.n	84cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    84ca:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    84cc:	bb98      	cbnz	r0, 8536 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    84ce:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    84d0:	4630      	mov	r0, r6
    84d2:	f00c ff75 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84d6:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84d8:	4620      	mov	r0, r4
    84da:	f00c ff77 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    84de:	2804      	cmp	r0, #4
    84e0:	d9e2      	bls.n	84a8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    84e2:	1d20      	adds	r0, r4, #4
    84e4:	f00c ff72 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    84e8:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84ea:	2800      	cmp	r0, #0
    84ec:	d0de      	beq.n	84ac <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    84ee:	4620      	mov	r0, r4
    84f0:	f00c ff60 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84f4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84f6:	6820      	ldr	r0, [r4, #0]
    84f8:	f00b fd3d 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    84fc:	4285      	cmp	r5, r0
    84fe:	d236      	bcs.n	856e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8500:	6820      	ldr	r0, [r4, #0]
    8502:	f00b fd38 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8506:	4285      	cmp	r5, r0
    8508:	d2d2      	bcs.n	84b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    850a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    850c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8510:	4620      	mov	r0, r4
    8512:	f00c ff4f 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8516:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8518:	4620      	mov	r0, r4
    851a:	f00c ff51 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    851e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8522:	4648      	mov	r0, r9
    8524:	f00c ff52 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8528:	280e      	cmp	r0, #14
    852a:	d9c8      	bls.n	84be <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    852c:	f109 000e 	add.w	r0, r9, #14
    8530:	f00c ff4c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8534:	e7c4      	b.n	84c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8536:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    853a:	0084      	lsls	r4, r0, #2
    853c:	a901      	add	r1, sp, #4
    853e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8542:	f00c ff16 	bl	15372 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8546:	4603      	mov	r3, r0
    8548:	b990      	cbnz	r0, 8570 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    854a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    854e:	6803      	ldr	r3, [r0, #0]
    8550:	68db      	ldr	r3, [r3, #12]
    8552:	2210      	movs	r2, #16
    8554:	9901      	ldr	r1, [sp, #4]
    8556:	4798      	blx	r3
      eval_tensors[i].data.data =
    8558:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    855a:	2800      	cmp	r0, #0
    855c:	d1b7      	bne.n	84ce <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    855e:	9a01      	ldr	r2, [sp, #4]
    8560:	4908      	ldr	r1, [pc, #32]	; (8584 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    8562:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8566:	f00d fca5 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    856a:	2301      	movs	r3, #1
    856c:	e000      	b.n	8570 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    856e:	2300      	movs	r3, #0
}
    8570:	4618      	mov	r0, r3
    8572:	b003      	add	sp, #12
    8574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8578:	00032664 	.word	0x00032664
    857c:	0003294c 	.word	0x0003294c
    8580:	00032730 	.word	0x00032730
    8584:	00033cc4 	.word	0x00033cc4

00008588 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    8588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    858c:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    858e:	b12b      	cbz	r3, 859c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    8590:	4604      	mov	r4, r0
    8592:	4688      	mov	r8, r1
    8594:	4692      	mov	sl, r2
    8596:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    8598:	2600      	movs	r6, #0
    859a:	e04b      	b.n	8634 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    859c:	f010 fa7a 	bl	18a94 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    85a0:	4640      	mov	r0, r8
    85a2:	f00c ff0d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85a6:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85aa:	4658      	mov	r0, fp
    85ac:	f00c ff0e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85b0:	2804      	cmp	r0, #4
    85b2:	d92e      	bls.n	8612 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    85b4:	f10b 0004 	add.w	r0, fp, #4
    85b8:	f00c ff08 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    85bc:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85c0:	b120      	cbz	r0, 85cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    85c2:	4658      	mov	r0, fp
    85c4:	f00c fef6 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85c8:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    85cc:	6838      	ldr	r0, [r7, #0]
    85ce:	f00b fcd2 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    85d2:	4286      	cmp	r6, r0
    85d4:	d21f      	bcs.n	8616 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    85d6:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    85d8:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    85dc:	4638      	mov	r0, r7
    85de:	f00c fee9 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85e2:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    85e4:	4638      	mov	r0, r7
    85e6:	f00c feeb 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85ea:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    85ee:	4658      	mov	r0, fp
    85f0:	f00c feec 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85f4:	280e      	cmp	r0, #14
    85f6:	d915      	bls.n	8624 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    85f8:	f10b 000e 	add.w	r0, fp, #14
    85fc:	f00c fee6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8600:	b118      	cbz	r0, 860a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8602:	4438      	add	r0, r7
    8604:	f00c ffab 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8608:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    860a:	9b01      	ldr	r3, [sp, #4]
    860c:	b963      	cbnz	r3, 8628 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    860e:	2301      	movs	r3, #1
    8610:	e02c      	b.n	866c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8612:	2000      	movs	r0, #0
    8614:	e7d2      	b.n	85bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8616:	4bb6      	ldr	r3, [pc, #728]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8618:	4ab6      	ldr	r2, [pc, #728]	; (88f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    861a:	f44f 7183 	mov.w	r1, #262	; 0x106
    861e:	48b6      	ldr	r0, [pc, #728]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8620:	f00a fa3c 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8624:	2000      	movs	r0, #0
    8626:	e7eb      	b.n	8600 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8628:	2300      	movs	r3, #0
    862a:	e01f      	b.n	866c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    862c:	f04f 33ff 	mov.w	r3, #4294967295
    8630:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8632:	3601      	adds	r6, #1
    8634:	6863      	ldr	r3, [r4, #4]
    8636:	42b3      	cmp	r3, r6
    8638:	d920      	bls.n	867c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    863a:	6825      	ldr	r5, [r4, #0]
    863c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8640:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    8644:	009f      	lsls	r7, r3, #2
    8646:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    864a:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    864c:	4629      	mov	r1, r5
    864e:	f00c fe90 	bl	15372 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8652:	9001      	str	r0, [sp, #4]
    8654:	2800      	cmp	r0, #0
    8656:	f040 8146 	bne.w	88e6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    865a:	f04f 33ff 	mov.w	r3, #4294967295
    865e:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    8660:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    8662:	f859 7007 	ldr.w	r7, [r9, r7]
    8666:	2f00      	cmp	r7, #0
    8668:	d09a      	beq.n	85a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    866a:	2300      	movs	r3, #0
    866c:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    866e:	f1ba 0f00 	cmp.w	sl, #0
    8672:	d0db      	beq.n	862c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    8674:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    8678:	612b      	str	r3, [r5, #16]
    867a:	e7da      	b.n	8632 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    867c:	4640      	mov	r0, r8
    867e:	f00c ff4f 	bl	15520 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    8682:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8684:	f04f 0900 	mov.w	r9, #0
    8688:	e01f      	b.n	86ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    868a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    868c:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8690:	b350      	cbz	r0, 86e8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    8692:	4628      	mov	r0, r5
    8694:	f00c fe8e 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8698:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    869a:	6828      	ldr	r0, [r5, #0]
    869c:	f00b fc6b 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    86a0:	4581      	cmp	r9, r0
    86a2:	d22a      	bcs.n	86fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    86a4:	6828      	ldr	r0, [r5, #0]
    86a6:	f00b fc66 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    86aa:	4581      	cmp	r9, r0
    86ac:	d21e      	bcs.n	86ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    86ae:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    86b0:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    86b4:	f00c fe83 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    86b8:	6823      	ldr	r3, [r4, #0]
    86ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    86be:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    86c2:	2300      	movs	r3, #0
    86c4:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    86c6:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    86ca:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    86cc:	4640      	mov	r0, r8
    86ce:	f00c fe77 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86d2:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86d6:	4628      	mov	r0, r5
    86d8:	f00c fe78 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86dc:	2806      	cmp	r0, #6
    86de:	d9d4      	bls.n	868a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    86e0:	1da8      	adds	r0, r5, #6
    86e2:	f00c fe73 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    86e6:	e7d1      	b.n	868c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86e8:	2500      	movs	r5, #0
    86ea:	e7d6      	b.n	869a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    86ec:	4b80      	ldr	r3, [pc, #512]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    86ee:	4a83      	ldr	r2, [pc, #524]	; (88fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    86f0:	f44f 7183 	mov.w	r1, #262	; 0x106
    86f4:	4880      	ldr	r0, [pc, #512]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    86f6:	f00a f9d1 	bl	12a9c <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    86fa:	f04f 0800 	mov.w	r8, #0
    86fe:	e01e      	b.n	873e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8700:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8702:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8704:	b348      	cbz	r0, 875a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8706:	4628      	mov	r0, r5
    8708:	f00c fe54 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    870c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    870e:	6828      	ldr	r0, [r5, #0]
    8710:	f00b fc31 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8714:	4580      	cmp	r8, r0
    8716:	d229      	bcs.n	876c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8718:	6828      	ldr	r0, [r5, #0]
    871a:	f00b fc2c 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    871e:	4580      	cmp	r8, r0
    8720:	d21d      	bcs.n	875e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8722:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8724:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8728:	f00c fe49 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    872c:	6823      	ldr	r3, [r4, #0]
    872e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8732:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8736:	1e7b      	subs	r3, r7, #1
    8738:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    873a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    873e:	4630      	mov	r0, r6
    8740:	f00c fe3e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8744:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8746:	4628      	mov	r0, r5
    8748:	f00c fe40 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    874c:	2808      	cmp	r0, #8
    874e:	d9d7      	bls.n	8700 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    8750:	f105 0008 	add.w	r0, r5, #8
    8754:	f00c fe3a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8758:	e7d3      	b.n	8702 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    875a:	2500      	movs	r5, #0
    875c:	e7d7      	b.n	870e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    875e:	4b64      	ldr	r3, [pc, #400]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8760:	4a66      	ldr	r2, [pc, #408]	; (88fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8762:	f44f 7183 	mov.w	r1, #262	; 0x106
    8766:	4864      	ldr	r0, [pc, #400]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8768:	f00a f998 	bl	12a9c <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    876c:	3f01      	subs	r7, #1
    876e:	e08d      	b.n	888c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8770:	2000      	movs	r0, #0
    8772:	e09b      	b.n	88ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8774:	f04f 0900 	mov.w	r9, #0
    8778:	e0a1      	b.n	88be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    877a:	4b5d      	ldr	r3, [pc, #372]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    877c:	4a60      	ldr	r2, [pc, #384]	; (8900 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    877e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8782:	485d      	ldr	r0, [pc, #372]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8784:	f00a f98a 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8788:	2000      	movs	r0, #0
    878a:	e019      	b.n	87c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    878c:	2500      	movs	r5, #0
    878e:	e01f      	b.n	87d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    8790:	4b57      	ldr	r3, [pc, #348]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8792:	4a5a      	ldr	r2, [pc, #360]	; (88fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8794:	f44f 7183 	mov.w	r1, #262	; 0x106
    8798:	4857      	ldr	r0, [pc, #348]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    879a:	f00a f97f 	bl	12a9c <__assert_func>
        current->last_used = i;
    879e:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    87a0:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    87a4:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    87a6:	4648      	mov	r0, r9
    87a8:	f00c fe0a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87ac:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87b0:	4628      	mov	r0, r5
    87b2:	f00c fe0b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87b6:	2806      	cmp	r0, #6
    87b8:	d9e6      	bls.n	8788 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    87ba:	1da8      	adds	r0, r5, #6
    87bc:	f00c fe06 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    87c0:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    87c4:	2800      	cmp	r0, #0
    87c6:	d0e1      	beq.n	878c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    87c8:	4628      	mov	r0, r5
    87ca:	f00c fdf3 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87ce:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87d0:	6828      	ldr	r0, [r5, #0]
    87d2:	f00b fbd0 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    87d6:	4582      	cmp	sl, r0
    87d8:	d215      	bcs.n	8806 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    87da:	6828      	ldr	r0, [r5, #0]
    87dc:	f00b fbcb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    87e0:	4582      	cmp	sl, r0
    87e2:	d2d5      	bcs.n	8790 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    87e4:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    87e6:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    87ea:	f00c fde8 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    87ee:	6823      	ldr	r3, [r4, #0]
    87f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    87f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    87f8:	68c3      	ldr	r3, [r0, #12]
    87fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    87fe:	d0ce      	beq.n	879e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8800:	42bb      	cmp	r3, r7
    8802:	dacd      	bge.n	87a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8804:	e7cb      	b.n	879e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8806:	f04f 0900 	mov.w	r9, #0
    880a:	e00d      	b.n	8828 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    880c:	2000      	movs	r0, #0
    880e:	e019      	b.n	8844 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8810:	2500      	movs	r5, #0
    8812:	e01f      	b.n	8854 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8814:	4b36      	ldr	r3, [pc, #216]	; (88f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8816:	4a39      	ldr	r2, [pc, #228]	; (88fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8818:	f44f 7183 	mov.w	r1, #262	; 0x106
    881c:	4836      	ldr	r0, [pc, #216]	; (88f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    881e:	f00a f93d 	bl	12a9c <__assert_func>
        current->first_created = i;
    8822:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8824:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8828:	4640      	mov	r0, r8
    882a:	f00c fdc9 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    882e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8832:	4628      	mov	r0, r5
    8834:	f00c fdca 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8838:	2808      	cmp	r0, #8
    883a:	d9e7      	bls.n	880c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    883c:	f105 0008 	add.w	r0, r5, #8
    8840:	f00c fdc4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8844:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8848:	2800      	cmp	r0, #0
    884a:	d0e1      	beq.n	8810 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    884c:	4628      	mov	r0, r5
    884e:	f00c fdb1 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8852:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8854:	6828      	ldr	r0, [r5, #0]
    8856:	f00b fb8e 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    885a:	4581      	cmp	r9, r0
    885c:	d215      	bcs.n	888a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    885e:	6828      	ldr	r0, [r5, #0]
    8860:	f00b fb89 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8864:	4581      	cmp	r9, r0
    8866:	d2d5      	bcs.n	8814 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8868:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    886a:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    886e:	f00c fda6 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    8872:	6823      	ldr	r3, [r4, #0]
    8874:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8878:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    887c:	6883      	ldr	r3, [r0, #8]
    887e:	f1b3 3fff 	cmp.w	r3, #4294967295
    8882:	d0ce      	beq.n	8822 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    8884:	42bb      	cmp	r3, r7
    8886:	ddcd      	ble.n	8824 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    8888:	e7cb      	b.n	8822 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    888a:	3f01      	subs	r7, #1
    888c:	2f00      	cmp	r7, #0
    888e:	db28      	blt.n	88e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    8890:	4630      	mov	r0, r6
    8892:	f00c fd95 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8896:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8898:	4628      	mov	r0, r5
    889a:	f00c fd97 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    889e:	280a      	cmp	r0, #10
    88a0:	f67f af66 	bls.w	8770 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    88a4:	f105 000a 	add.w	r0, r5, #10
    88a8:	f00c fd90 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    88ac:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88b0:	2800      	cmp	r0, #0
    88b2:	f43f af5f 	beq.w	8774 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    88b6:	4648      	mov	r0, r9
    88b8:	f00c fd7c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88bc:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    88be:	f8d9 0000 	ldr.w	r0, [r9]
    88c2:	f00b fb58 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    88c6:	4287      	cmp	r7, r0
    88c8:	f4bf af57 	bcs.w	877a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    88cc:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    88d0:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    88d4:	4648      	mov	r0, r9
    88d6:	f00c fd6d 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88da:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    88dc:	f04f 0a00 	mov.w	sl, #0
    88e0:	e760      	b.n	87a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    88e2:	2300      	movs	r3, #0
    88e4:	9301      	str	r3, [sp, #4]
}
    88e6:	9801      	ldr	r0, [sp, #4]
    88e8:	b003      	add	sp, #12
    88ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88ee:	bf00      	nop
    88f0:	00032664 	.word	0x00032664
    88f4:	0003294c 	.word	0x0003294c
    88f8:	00032730 	.word	0x00032730
    88fc:	00032670 	.word	0x00032670
    8900:	0003349c 	.word	0x0003349c

00008904 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8908:	b083      	sub	sp, #12
    890a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    890e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8910:	b31d      	cbz	r5, 895a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8912:	4607      	mov	r7, r0
    8914:	4688      	mov	r8, r1
    8916:	4614      	mov	r4, r2
    8918:	469a      	mov	sl, r3
  *result = {};
    891a:	2240      	movs	r2, #64	; 0x40
    891c:	2100      	movs	r1, #0
    891e:	4628      	mov	r0, r5
    8920:	f010 f8ec 	bl	18afc <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8924:	4620      	mov	r0, r4
    8926:	f00c fd4b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    892a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    892c:	4630      	mov	r0, r6
    892e:	f00c fd4d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8932:	2806      	cmp	r0, #6
    8934:	d913      	bls.n	895e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8936:	1db0      	adds	r0, r6, #6
    8938:	f00c fd48 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    893c:	b188      	cbz	r0, 8962 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    893e:	4420      	add	r0, r4
    8940:	f00c fd4a 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8944:	464a      	mov	r2, r9
    8946:	4629      	mov	r1, r5
    8948:	b2c0      	uxtb	r0, r0
    894a:	f001 f8b7 	bl	9abc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    894e:	4606      	mov	r6, r0
    8950:	b148      	cbz	r0, 8966 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    8952:	4630      	mov	r0, r6
    8954:	b003      	add	sp, #12
    8956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    895a:	f010 f89b 	bl	18a94 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    895e:	2000      	movs	r0, #0
    8960:	e7ec      	b.n	893c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8962:	2000      	movs	r0, #0
    8964:	e7ee      	b.n	8944 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    8966:	4620      	mov	r0, r4
    8968:	f00c fd2a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    896c:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8970:	4658      	mov	r0, fp
    8972:	f00c fd2b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8976:	280e      	cmp	r0, #14
    8978:	d93f      	bls.n	89fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    897a:	f10b 000e 	add.w	r0, fp, #14
    897e:	f00c fd25 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8982:	b118      	cbz	r0, 898c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    8984:	4420      	add	r0, r4
    8986:	f00c fdea 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    898a:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    898c:	3e00      	subs	r6, #0
    898e:	bf18      	it	ne
    8990:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    8992:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8996:	4651      	mov	r1, sl
    8998:	4620      	mov	r0, r4
    899a:	f7ff faed 	bl	7f78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    899e:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    89a0:	b368      	cbz	r0, 89fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    89a2:	2301      	movs	r3, #1
    89a4:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    89a6:	464b      	mov	r3, r9
    89a8:	aa01      	add	r2, sp, #4
    89aa:	f105 0118 	add.w	r1, r5, #24
    89ae:	4620      	mov	r0, r4
    89b0:	f7fd fe6a 	bl	6688 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    89b4:	4606      	mov	r6, r0
    89b6:	2800      	cmp	r0, #0
    89b8:	d1cb      	bne.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    89ba:	4620      	mov	r0, r4
    89bc:	f00c fd00 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89c0:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89c4:	4650      	mov	r0, sl
    89c6:	f00c fd01 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89ca:	2804      	cmp	r0, #4
    89cc:	d91a      	bls.n	8a04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    89ce:	f10a 0004 	add.w	r0, sl, #4
    89d2:	f00c fcfb 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    89d6:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89da:	b1a8      	cbz	r0, 8a08 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    89dc:	4650      	mov	r0, sl
    89de:	f00c fce9 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89e2:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    89e6:	b18a      	cbz	r2, 8a0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    89e8:	f105 0308 	add.w	r3, r5, #8
    89ec:	4649      	mov	r1, r9
    89ee:	4638      	mov	r0, r7
    89f0:	f00c fff3 	bl	159da <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    89f4:	b160      	cbz	r0, 8a10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    89f6:	4606      	mov	r6, r0
    89f8:	e7ab      	b.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89fa:	2000      	movs	r0, #0
    89fc:	e7c1      	b.n	8982 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    89fe:	2302      	movs	r3, #2
    8a00:	752b      	strb	r3, [r5, #20]
    8a02:	e7d0      	b.n	89a6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8a04:	2000      	movs	r0, #0
    8a06:	e7e6      	b.n	89d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a08:	2200      	movs	r2, #0
    8a0a:	e7ec      	b.n	89e6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8a0c:	4bb6      	ldr	r3, [pc, #728]	; (8ce8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    8a0e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8a10:	4620      	mov	r0, r4
    8a12:	f00c fcd5 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a16:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a1a:	4650      	mov	r0, sl
    8a1c:	f00c fcd6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a20:	280c      	cmp	r0, #12
    8a22:	d91a      	bls.n	8a5a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8a24:	f10a 000c 	add.w	r0, sl, #12
    8a28:	f00c fcd0 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a2c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a2e:	b1b0      	cbz	r0, 8a5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8a30:	4620      	mov	r0, r4
    8a32:	f00c fcbf 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a36:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8a38:	2c00      	cmp	r4, #0
    8a3a:	d08a      	beq.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    8a3c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8a3e:	4620      	mov	r0, r4
    8a40:	f00c fcbe 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a44:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a46:	4620      	mov	r0, r4
    8a48:	f00c fcc0 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a4c:	2808      	cmp	r0, #8
    8a4e:	d908      	bls.n	8a62 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    8a50:	f104 0008 	add.w	r0, r4, #8
    8a54:	f00c fcba 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a58:	e004      	b.n	8a64 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    8a5a:	2000      	movs	r0, #0
    8a5c:	e7e6      	b.n	8a2c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a5e:	2400      	movs	r4, #0
    8a60:	e7ea      	b.n	8a38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a62:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8a64:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a68:	2800      	cmp	r0, #0
    8a6a:	d060      	beq.n	8b2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    8a6c:	4620      	mov	r0, r4
    8a6e:	f00c fca1 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a72:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    8a74:	2c00      	cmp	r4, #0
    8a76:	f43f af6c 	beq.w	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8a7a:	6820      	ldr	r0, [r4, #0]
    8a7c:	f00b fa7b 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8a80:	2800      	cmp	r0, #0
    8a82:	f43f af66 	beq.w	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    8a86:	4650      	mov	r0, sl
    8a88:	f00c fc9a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a8c:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a90:	4658      	mov	r0, fp
    8a92:	f00c fc9b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a96:	280a      	cmp	r0, #10
    8a98:	d94b      	bls.n	8b32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    8a9a:	f10b 000a 	add.w	r0, fp, #10
    8a9e:	f00c fc95 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8aa2:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8aa6:	2800      	cmp	r0, #0
    8aa8:	d045      	beq.n	8b36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    8aaa:	4658      	mov	r0, fp
    8aac:	f00c fc82 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ab0:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8ab2:	2800      	cmp	r0, #0
    8ab4:	f43f af4d 	beq.w	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8ab8:	6800      	ldr	r0, [r0, #0]
    8aba:	f00b fa5c 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    8abe:	2800      	cmp	r0, #0
    8ac0:	f43f af47 	beq.w	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8ac4:	6820      	ldr	r0, [r4, #0]
    8ac6:	f00b fa56 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8aca:	b3b0      	cbz	r0, 8b3a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8acc:	6860      	ldr	r0, [r4, #4]
    8ace:	f00c fd4c 	bl	1556a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8ad2:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8ad4:	4650      	mov	r0, sl
    8ad6:	f00c fc73 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ada:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ade:	4620      	mov	r0, r4
    8ae0:	f00c fc74 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ae4:	280a      	cmp	r0, #10
    8ae6:	d92f      	bls.n	8b48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8ae8:	f104 000a 	add.w	r0, r4, #10
    8aec:	f00c fc6e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8af0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8af4:	b350      	cbz	r0, 8b4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8af6:	4620      	mov	r0, r4
    8af8:	f00c fc5c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8afc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8afe:	6820      	ldr	r0, [r4, #0]
    8b00:	f00b fa39 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8b04:	b320      	cbz	r0, 8b50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8b06:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    8b0a:	f00c fd2d 	bl	15568 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    8b0e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8b10:	4650      	mov	r0, sl
    8b12:	f00c fc55 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b16:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b1a:	4620      	mov	r0, r4
    8b1c:	f00c fc56 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b20:	2808      	cmp	r0, #8
    8b22:	d91c      	bls.n	8b5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8b24:	f104 0008 	add.w	r0, r4, #8
    8b28:	f00c fc50 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8b2c:	e018      	b.n	8b60 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b2e:	2400      	movs	r4, #0
    8b30:	e7a0      	b.n	8a74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b32:	2000      	movs	r0, #0
    8b34:	e7b5      	b.n	8aa2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b36:	2000      	movs	r0, #0
    8b38:	e7bb      	b.n	8ab2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    8b3a:	4b6c      	ldr	r3, [pc, #432]	; (8cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8b3c:	4a6c      	ldr	r2, [pc, #432]	; (8cf0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    8b3e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8b42:	486c      	ldr	r0, [pc, #432]	; (8cf4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8b44:	f009 ffaa 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b48:	2000      	movs	r0, #0
    8b4a:	e7d1      	b.n	8af0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b4c:	2400      	movs	r4, #0
    8b4e:	e7d6      	b.n	8afe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    8b50:	4b66      	ldr	r3, [pc, #408]	; (8cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8b52:	4a69      	ldr	r2, [pc, #420]	; (8cf8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8b54:	f44f 7183 	mov.w	r1, #262	; 0x106
    8b58:	4866      	ldr	r0, [pc, #408]	; (8cf4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8b5a:	f009 ff9f 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b5e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8b60:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b64:	b390      	cbz	r0, 8bcc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    8b66:	4620      	mov	r0, r4
    8b68:	f00c fc24 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b6c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b6e:	6820      	ldr	r0, [r4, #0]
    8b70:	f00b fa01 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8b74:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    8b76:	f1b8 0f00 	cmp.w	r8, #0
    8b7a:	d029      	beq.n	8bd0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    8b7c:	683b      	ldr	r3, [r7, #0]
    8b7e:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    8b80:	2204      	movs	r2, #4
    8b82:	210c      	movs	r1, #12
    8b84:	4638      	mov	r0, r7
    8b86:	4798      	blx	r3
    8b88:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    8b8a:	f1bb 0f00 	cmp.w	fp, #0
    8b8e:	d027      	beq.n	8be0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8b90:	f1b8 0f00 	cmp.w	r8, #0
    8b94:	d02a      	beq.n	8bec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    8b96:	683b      	ldr	r3, [r7, #0]
    8b98:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8b9a:	4620      	mov	r0, r4
    8b9c:	f00d f8af 	bl	15cfe <TfLiteIntArrayGetSizeInBytes>
    8ba0:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8ba2:	2204      	movs	r2, #4
    8ba4:	4638      	mov	r0, r7
    8ba6:	47b0      	blx	r6
    quantization->zero_point =
    8ba8:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    8bac:	b340      	cbz	r0, 8c00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    8bae:	4650      	mov	r0, sl
    8bb0:	f00c fc06 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8bb4:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bb8:	4630      	mov	r0, r6
    8bba:	f00c fc07 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bbe:	2808      	cmp	r0, #8
    8bc0:	d924      	bls.n	8c0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8bc2:	f106 0008 	add.w	r0, r6, #8
    8bc6:	f00c fc01 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8bca:	e020      	b.n	8c0e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bcc:	2400      	movs	r4, #0
    8bce:	e7ce      	b.n	8b6e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8bd0:	683b      	ldr	r3, [r7, #0]
    8bd2:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8bd4:	2204      	movs	r2, #4
    8bd6:	210c      	movs	r1, #12
    8bd8:	4638      	mov	r0, r7
    8bda:	4798      	blx	r3
    8bdc:	4683      	mov	fp, r0
    8bde:	e7d4      	b.n	8b8a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8be0:	4946      	ldr	r1, [pc, #280]	; (8cfc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8be2:	4648      	mov	r0, r9
    8be4:	f00d f966 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8be8:	2601      	movs	r6, #1
    8bea:	e6b2      	b.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    8bec:	683b      	ldr	r3, [r7, #0]
    8bee:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8bf0:	4620      	mov	r0, r4
    8bf2:	f00d f884 	bl	15cfe <TfLiteIntArrayGetSizeInBytes>
    8bf6:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8bf8:	2204      	movs	r2, #4
    8bfa:	4638      	mov	r0, r7
    8bfc:	47b0      	blx	r6
    8bfe:	e7d3      	b.n	8ba8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8c00:	493f      	ldr	r1, [pc, #252]	; (8d00 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8c02:	4648      	mov	r0, r9
    8c04:	f00d f956 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8c08:	2601      	movs	r6, #1
    8c0a:	e6a2      	b.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c0c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c0e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c12:	b1b0      	cbz	r0, 8c42 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8c14:	4630      	mov	r0, r6
    8c16:	f00c fbcd 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c1a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8c1c:	465b      	mov	r3, fp
    8c1e:	4649      	mov	r1, r9
    8c20:	4638      	mov	r0, r7
    8c22:	f00c feec 	bl	159fe <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8c26:	4606      	mov	r6, r0
    8c28:	2800      	cmp	r0, #0
    8c2a:	f47f ae92 	bne.w	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    8c2e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c32:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8c34:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c38:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    8c3c:	f04f 0800 	mov.w	r8, #0
    8c40:	e019      	b.n	8c76 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    8c42:	2200      	movs	r2, #0
    8c44:	e7ea      	b.n	8c1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c46:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c48:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c4c:	b320      	cbz	r0, 8c98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    8c4e:	4638      	mov	r0, r7
    8c50:	f00c fbb0 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c54:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c56:	6838      	ldr	r0, [r7, #0]
    8c58:	f00b f98d 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8c5c:	4580      	cmp	r8, r0
    8c5e:	d21d      	bcs.n	8c9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c60:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8c62:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    8c66:	e9d7 0100 	ldrd	r0, r1, [r7]
    8c6a:	f00c fc7d 	bl	15568 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8c6e:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    8c72:	f108 0801 	add.w	r8, r8, #1
    8c76:	45a0      	cmp	r8, r4
    8c78:	da17      	bge.n	8caa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    8c7a:	4650      	mov	r0, sl
    8c7c:	f00c fba0 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c80:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c84:	4638      	mov	r0, r7
    8c86:	f00c fba1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c8a:	280a      	cmp	r0, #10
    8c8c:	d9db      	bls.n	8c46 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    8c8e:	f107 000a 	add.w	r0, r7, #10
    8c92:	f00c fb9b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8c96:	e7d7      	b.n	8c48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c98:	2700      	movs	r7, #0
    8c9a:	e7dc      	b.n	8c56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    8c9c:	4b13      	ldr	r3, [pc, #76]	; (8cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8c9e:	4a16      	ldr	r2, [pc, #88]	; (8cf8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8ca0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8ca4:	4813      	ldr	r0, [pc, #76]	; (8cf4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8ca6:	f009 fef9 	bl	12a9c <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    8caa:	4650      	mov	r0, sl
    8cac:	f00c fb88 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8cb0:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cb4:	4620      	mov	r0, r4
    8cb6:	f00c fb89 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cba:	2810      	cmp	r0, #16
    8cbc:	d90f      	bls.n	8cde <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    8cbe:	f104 0010 	add.w	r0, r4, #16
    8cc2:	f00c fb83 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8cc6:	b160      	cbz	r0, 8ce2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8cc8:	4450      	add	r0, sl
    8cca:	f00c fb79 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    8cce:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8cd2:	2301      	movs	r3, #1
    8cd4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8cd8:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    8cdc:	e639      	b.n	8952 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cde:	2000      	movs	r0, #0
    8ce0:	e7f1      	b.n	8cc6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8ce2:	2000      	movs	r0, #0
    8ce4:	e7f3      	b.n	8cce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8ce6:	bf00      	nop
    8ce8:	00033f98 	.word	0x00033f98
    8cec:	00032664 	.word	0x00032664
    8cf0:	00033cf4 	.word	0x00033cf4
    8cf4:	00032730 	.word	0x00032730
    8cf8:	00032a40 	.word	0x00032a40
    8cfc:	00033db8 	.word	0x00033db8
    8d00:	00033de8 	.word	0x00033de8

00008d04 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d08:	b082      	sub	sp, #8
    8d0a:	4607      	mov	r7, r0
    8d0c:	460e      	mov	r6, r1
    8d0e:	4690      	mov	r8, r2
    8d10:	469a      	mov	sl, r3
    8d12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8d14:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8d18:	4608      	mov	r0, r1
    8d1a:	f00c fb51 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d1e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d20:	4628      	mov	r0, r5
    8d22:	f00c fb53 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d26:	2808      	cmp	r0, #8
    8d28:	d941      	bls.n	8dae <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8d2a:	f105 0008 	add.w	r0, r5, #8
    8d2e:	f00c fb4d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d32:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d34:	b3e8      	cbz	r0, 8db2 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8d36:	4628      	mov	r0, r5
    8d38:	f00c fb3c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d3c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d3e:	6828      	ldr	r0, [r5, #0]
    8d40:	f00b f919 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d44:	4284      	cmp	r4, r0
    8d46:	d236      	bcs.n	8db6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d48:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8d4a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d4e:	4620      	mov	r0, r4
    8d50:	f00c fb30 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d54:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8d56:	4620      	mov	r0, r4
    8d58:	f00c fb32 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d5c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d5e:	4628      	mov	r0, r5
    8d60:	f00c fb34 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d64:	2804      	cmp	r0, #4
    8d66:	d92d      	bls.n	8dc4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8d68:	1d28      	adds	r0, r5, #4
    8d6a:	f00c fb2f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d6e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d70:	b350      	cbz	r0, 8dc8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    8d72:	4620      	mov	r0, r4
    8d74:	f00c fb1e 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d78:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d7a:	6820      	ldr	r0, [r4, #0]
    8d7c:	f00b f8fb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d80:	4582      	cmp	sl, r0
    8d82:	d223      	bcs.n	8dcc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d84:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8d86:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d8a:	4620      	mov	r0, r4
    8d8c:	f00c fb12 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d90:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8d92:	4630      	mov	r0, r6
    8d94:	f00c fb14 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d98:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d9a:	4628      	mov	r0, r5
    8d9c:	f00c fb16 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8da0:	280c      	cmp	r0, #12
    8da2:	d91a      	bls.n	8dda <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8da4:	f105 000c 	add.w	r0, r5, #12
    8da8:	f00c fb10 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8dac:	e016      	b.n	8ddc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8dae:	2000      	movs	r0, #0
    8db0:	e7bf      	b.n	8d32 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8db2:	2500      	movs	r5, #0
    8db4:	e7c3      	b.n	8d3e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8db6:	4b14      	ldr	r3, [pc, #80]	; (8e08 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8db8:	4a14      	ldr	r2, [pc, #80]	; (8e0c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8dba:	f44f 7183 	mov.w	r1, #262	; 0x106
    8dbe:	4814      	ldr	r0, [pc, #80]	; (8e10 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8dc0:	f009 fe6c 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dc4:	2000      	movs	r0, #0
    8dc6:	e7d2      	b.n	8d6e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dc8:	2400      	movs	r4, #0
    8dca:	e7d6      	b.n	8d7a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8dcc:	4b0e      	ldr	r3, [pc, #56]	; (8e08 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8dce:	4a11      	ldr	r2, [pc, #68]	; (8e14 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8dd0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8dd4:	480e      	ldr	r0, [pc, #56]	; (8e10 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8dd6:	f009 fe61 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dda:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8ddc:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dde:	b180      	cbz	r0, 8e02 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8de0:	4630      	mov	r0, r6
    8de2:	f00c fae7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8de6:	1833      	adds	r3, r6, r0
    8de8:	f8cd 8004 	str.w	r8, [sp, #4]
    8dec:	68fa      	ldr	r2, [r7, #12]
    8dee:	9200      	str	r2, [sp, #0]
    8df0:	4622      	mov	r2, r4
    8df2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8df6:	4648      	mov	r0, r9
    8df8:	f7ff fd84 	bl	8904 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8dfc:	b002      	add	sp, #8
    8dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e02:	2300      	movs	r3, #0
    8e04:	e7f0      	b.n	8de8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8e06:	bf00      	nop
    8e08:	00032664 	.word	0x00032664
    8e0c:	000327b4 	.word	0x000327b4
    8e10:	00032730 	.word	0x00032730
    8e14:	0003294c 	.word	0x0003294c

00008e18 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e1c:	4680      	mov	r8, r0
    8e1e:	460c      	mov	r4, r1
    8e20:	4691      	mov	r9, r2
    8e22:	461f      	mov	r7, r3
    8e24:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8e26:	2300      	movs	r3, #0
    8e28:	602b      	str	r3, [r5, #0]
    8e2a:	606b      	str	r3, [r5, #4]
    8e2c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8e2e:	4608      	mov	r0, r1
    8e30:	f00c fac6 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e34:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e36:	4630      	mov	r0, r6
    8e38:	f00c fac8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e3c:	2806      	cmp	r0, #6
    8e3e:	d911      	bls.n	8e64 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8e40:	1db0      	adds	r0, r6, #6
    8e42:	f00c fac3 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8e46:	b178      	cbz	r0, 8e68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8e48:	4420      	add	r0, r4
    8e4a:	f00c fac5 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8e4e:	463a      	mov	r2, r7
    8e50:	f105 0108 	add.w	r1, r5, #8
    8e54:	b2c0      	uxtb	r0, r0
    8e56:	f000 fe31 	bl	9abc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8e5a:	4606      	mov	r6, r0
    8e5c:	b130      	cbz	r0, 8e6c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8e5e:	4630      	mov	r0, r6
    8e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e64:	2000      	movs	r0, #0
    8e66:	e7ee      	b.n	8e46 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8e68:	2000      	movs	r0, #0
    8e6a:	e7f0      	b.n	8e4e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8e6c:	4649      	mov	r1, r9
    8e6e:	4620      	mov	r0, r4
    8e70:	f7ff f882 	bl	7f78 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8e74:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8e76:	4620      	mov	r0, r4
    8e78:	f00c faa2 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e7c:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e80:	4648      	mov	r0, r9
    8e82:	f00c faa3 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e86:	2804      	cmp	r0, #4
    8e88:	d911      	bls.n	8eae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8e8a:	f109 0004 	add.w	r0, r9, #4
    8e8e:	f00c fa9d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8e92:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e94:	b168      	cbz	r0, 8eb2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8e96:	4620      	mov	r0, r4
    8e98:	f00c fa8c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e9c:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8e9e:	b152      	cbz	r2, 8eb6 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8ea0:	1d2b      	adds	r3, r5, #4
    8ea2:	4639      	mov	r1, r7
    8ea4:	4640      	mov	r0, r8
    8ea6:	f00c fd98 	bl	159da <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8eaa:	4606      	mov	r6, r0
    8eac:	e7d7      	b.n	8e5e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8eae:	2000      	movs	r0, #0
    8eb0:	e7ef      	b.n	8e92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8eb2:	2200      	movs	r2, #0
    8eb4:	e7f3      	b.n	8e9e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8eb6:	4b01      	ldr	r3, [pc, #4]	; (8ebc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8eb8:	606b      	str	r3, [r5, #4]
    8eba:	e7d0      	b.n	8e5e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8ebc:	00033f98 	.word	0x00033f98

00008ec0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ec4:	b087      	sub	sp, #28
    8ec6:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8ec8:	9205      	str	r2, [sp, #20]
    8eca:	b192      	cbz	r2, 8ef2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8ecc:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8ece:	2300      	movs	r3, #0
    8ed0:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8ed2:	9c04      	ldr	r4, [sp, #16]
    8ed4:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8ed6:	4620      	mov	r0, r4
    8ed8:	f00c fa72 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8edc:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ede:	4620      	mov	r0, r4
    8ee0:	f00c fa74 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ee4:	2808      	cmp	r0, #8
    8ee6:	d906      	bls.n	8ef6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8ee8:	f104 0008 	add.w	r0, r4, #8
    8eec:	f00c fa6e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8ef0:	e002      	b.n	8ef8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8ef2:	f00f fdcf 	bl	18a94 <abort>
    8ef6:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8ef8:	9b04      	ldr	r3, [sp, #16]
    8efa:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8efc:	2800      	cmp	r0, #0
    8efe:	d03d      	beq.n	8f7c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8f00:	4620      	mov	r0, r4
    8f02:	f00c fa57 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f06:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f08:	6820      	ldr	r0, [r4, #0]
    8f0a:	f00b f834 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8f0e:	9d03      	ldr	r5, [sp, #12]
    8f10:	4285      	cmp	r5, r0
    8f12:	f080 80b3 	bcs.w	907c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8f16:	6820      	ldr	r0, [r4, #0]
    8f18:	f00b f82d 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8f1c:	4285      	cmp	r5, r0
    8f1e:	d22f      	bcs.n	8f80 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8f20:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8f22:	9b03      	ldr	r3, [sp, #12]
    8f24:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8f28:	4620      	mov	r0, r4
    8f2a:	f00c fa43 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8f2e:	1824      	adds	r4, r4, r0
    8f30:	d02d      	beq.n	8f8e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8f32:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8f34:	4620      	mov	r0, r4
    8f36:	f00c fa43 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f3a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f3c:	4628      	mov	r0, r5
    8f3e:	f00c fa45 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f42:	2804      	cmp	r0, #4
    8f44:	d925      	bls.n	8f92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8f46:	1d28      	adds	r0, r5, #4
    8f48:	f00c fa40 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8f4c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f4e:	b310      	cbz	r0, 8f96 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8f50:	4620      	mov	r0, r4
    8f52:	f00c fa2f 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f56:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f58:	6820      	ldr	r0, [r4, #0]
    8f5a:	f00b f80c 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8f5e:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8f60:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8f64:	6803      	ldr	r3, [r0, #0]
    8f66:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8f68:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8f6c:	0089      	lsls	r1, r1, #2
    8f6e:	460c      	mov	r4, r1
    8f70:	2204      	movs	r2, #4
    8f72:	4798      	blx	r3
    if (tensors == nullptr) {
    8f74:	9002      	str	r0, [sp, #8]
    8f76:	b180      	cbz	r0, 8f9a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8f78:	2500      	movs	r5, #0
    8f7a:	e038      	b.n	8fee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f7c:	2400      	movs	r4, #0
    8f7e:	e7c3      	b.n	8f08 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8f80:	4b3f      	ldr	r3, [pc, #252]	; (9080 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8f82:	4a40      	ldr	r2, [pc, #256]	; (9084 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8f84:	f44f 7183 	mov.w	r1, #262	; 0x106
    8f88:	483f      	ldr	r0, [pc, #252]	; (9088 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8f8a:	f009 fd87 	bl	12a9c <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8f8e:	f00f fd81 	bl	18a94 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f92:	2000      	movs	r0, #0
    8f94:	e7da      	b.n	8f4c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f96:	2400      	movs	r4, #0
    8f98:	e7de      	b.n	8f58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8f9a:	4622      	mov	r2, r4
    8f9c:	493b      	ldr	r1, [pc, #236]	; (908c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8f9e:	f8db 000c 	ldr.w	r0, [fp, #12]
    8fa2:	f00c ff87 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8fa6:	2001      	movs	r0, #1
    8fa8:	e05c      	b.n	9064 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8faa:	2000      	movs	r0, #0
    8fac:	e02f      	b.n	900e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fae:	2400      	movs	r4, #0
    8fb0:	e034      	b.n	901c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8fb2:	4b33      	ldr	r3, [pc, #204]	; (9080 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8fb4:	4a36      	ldr	r2, [pc, #216]	; (9090 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8fb6:	f44f 7183 	mov.w	r1, #262	; 0x106
    8fba:	4833      	ldr	r0, [pc, #204]	; (9088 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8fbc:	f009 fd6e 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fc0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8fc2:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fc6:	2800      	cmp	r0, #0
    8fc8:	d043      	beq.n	9052 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8fca:	4630      	mov	r0, r6
    8fcc:	f00c f9f2 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8fd0:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8fd2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8fd6:	9902      	ldr	r1, [sp, #8]
    8fd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8fdc:	9300      	str	r3, [sp, #0]
    8fde:	f8db 300c 	ldr.w	r3, [fp, #12]
    8fe2:	4621      	mov	r1, r4
    8fe4:	4648      	mov	r0, r9
    8fe6:	f7ff ff17 	bl	8e18 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8fea:	bba0      	cbnz	r0, 9056 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8fec:	3501      	adds	r5, #1
    8fee:	4555      	cmp	r5, sl
    8ff0:	d23b      	bcs.n	906a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8ff2:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8ff6:	4638      	mov	r0, r7
    8ff8:	f00c f9e2 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ffc:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ffe:	4620      	mov	r0, r4
    9000:	f00c f9e4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9004:	2804      	cmp	r0, #4
    9006:	d9d0      	bls.n	8faa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    9008:	1d20      	adds	r0, r4, #4
    900a:	f00c f9df 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    900e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9010:	2800      	cmp	r0, #0
    9012:	d0cc      	beq.n	8fae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    9014:	4620      	mov	r0, r4
    9016:	f00c f9cd 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    901a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    901c:	6820      	ldr	r0, [r4, #0]
    901e:	f00a ffaa 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9022:	4285      	cmp	r5, r0
    9024:	d2c5      	bcs.n	8fb2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9026:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    9028:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    902c:	4620      	mov	r0, r4
    902e:	f00c f9c1 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9032:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    9034:	4640      	mov	r0, r8
    9036:	f00c f9c3 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    903a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    903e:	4630      	mov	r0, r6
    9040:	f00c f9c4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9044:	280c      	cmp	r0, #12
    9046:	d9bb      	bls.n	8fc0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    9048:	f106 000c 	add.w	r0, r6, #12
    904c:	f00c f9be 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9050:	e7b7      	b.n	8fc2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9052:	2200      	movs	r2, #0
    9054:	e7bd      	b.n	8fd2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    9056:	462a      	mov	r2, r5
    9058:	490e      	ldr	r1, [pc, #56]	; (9094 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    905a:	f8db 000c 	ldr.w	r0, [fp, #12]
    905e:	f00c ff29 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    9062:	2001      	movs	r0, #1
}
    9064:	b007      	add	sp, #28
    9066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    906a:	9b05      	ldr	r3, [sp, #20]
    906c:	9a03      	ldr	r2, [sp, #12]
    906e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9072:	9902      	ldr	r1, [sp, #8]
    9074:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    9076:	1c53      	adds	r3, r2, #1
    9078:	9303      	str	r3, [sp, #12]
    907a:	e72a      	b.n	8ed2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    907c:	2000      	movs	r0, #0
    907e:	e7f1      	b.n	9064 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    9080:	00032664 	.word	0x00032664
    9084:	000327b4 	.word	0x000327b4
    9088:	00032730 	.word	0x00032730
    908c:	00033e18 	.word	0x00033e18
    9090:	0003294c 	.word	0x0003294c
    9094:	00033e60 	.word	0x00033e60

00009098 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    9098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    909c:	b093      	sub	sp, #76	; 0x4c
    909e:	4606      	mov	r6, r0
    90a0:	460f      	mov	r7, r1
    90a2:	4690      	mov	r8, r2
    90a4:	4699      	mov	r9, r3
    90a6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    90aa:	4608      	mov	r0, r1
    90ac:	f00c f988 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    90b0:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    90b2:	4620      	mov	r0, r4
    90b4:	f00c f98a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90b8:	2808      	cmp	r0, #8
    90ba:	d948      	bls.n	914e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    90bc:	f104 0008 	add.w	r0, r4, #8
    90c0:	f00c f984 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    90c4:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90c6:	2800      	cmp	r0, #0
    90c8:	d043      	beq.n	9152 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    90ca:	4620      	mov	r0, r4
    90cc:	f00c f972 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90d0:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    90d2:	6820      	ldr	r0, [r4, #0]
    90d4:	f00a ff4f 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    90d8:	4582      	cmp	sl, r0
    90da:	d23c      	bcs.n	9156 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    90dc:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    90de:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    90e2:	4620      	mov	r0, r4
    90e4:	f00c f966 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90e8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    90ea:	4620      	mov	r0, r4
    90ec:	f00c f968 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    90f0:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    90f2:	4628      	mov	r0, r5
    90f4:	f00c f96a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90f8:	2804      	cmp	r0, #4
    90fa:	d933      	bls.n	9164 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    90fc:	1d28      	adds	r0, r5, #4
    90fe:	f00c f965 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9102:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9104:	b380      	cbz	r0, 9168 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    9106:	4628      	mov	r0, r5
    9108:	f00c f954 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    910c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    910e:	6828      	ldr	r0, [r5, #0]
    9110:	f00a ff31 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    9114:	6973      	ldr	r3, [r6, #20]
    9116:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    9118:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    911c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    9120:	6870      	ldr	r0, [r6, #4]
    9122:	6803      	ldr	r3, [r0, #0]
    9124:	691b      	ldr	r3, [r3, #16]
    9126:	2204      	movs	r2, #4
    9128:	4651      	mov	r1, sl
    912a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    912c:	4683      	mov	fp, r0
    912e:	b1e8      	cbz	r0, 916c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    9130:	4620      	mov	r0, r4
    9132:	f00c f945 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9136:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    913a:	4650      	mov	r0, sl
    913c:	f00c f946 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9140:	2804      	cmp	r0, #4
    9142:	d91a      	bls.n	917a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    9144:	f10a 0004 	add.w	r0, sl, #4
    9148:	f00c f940 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    914c:	e016      	b.n	917c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    914e:	2000      	movs	r0, #0
    9150:	e7b8      	b.n	90c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9152:	2400      	movs	r4, #0
    9154:	e7bd      	b.n	90d2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    9156:	4b55      	ldr	r3, [pc, #340]	; (92ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    9158:	4a55      	ldr	r2, [pc, #340]	; (92b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    915a:	f44f 7183 	mov.w	r1, #262	; 0x106
    915e:	4855      	ldr	r0, [pc, #340]	; (92b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    9160:	f009 fc9c 	bl	12a9c <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9164:	2000      	movs	r0, #0
    9166:	e7cc      	b.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9168:	2500      	movs	r5, #0
    916a:	e7d0      	b.n	910e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    916c:	4652      	mov	r2, sl
    916e:	4952      	ldr	r1, [pc, #328]	; (92b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    9170:	68f0      	ldr	r0, [r6, #12]
    9172:	f00c fe9f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    9176:	2701      	movs	r7, #1
    9178:	e01b      	b.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    917a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    917c:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9180:	b1d8      	cbz	r0, 91ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    9182:	4650      	mov	r0, sl
    9184:	f00c f916 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9188:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    918a:	f8da 0000 	ldr.w	r0, [sl]
    918e:	f00a fef2 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    9192:	6972      	ldr	r2, [r6, #20]
    9194:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    9196:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    919a:	900f      	str	r0, [sp, #60]	; 0x3c
    919c:	9210      	str	r2, [sp, #64]	; 0x40
    919e:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    91a0:	2300      	movs	r3, #0
    91a2:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    91a4:	aa0d      	add	r2, sp, #52	; 0x34
    91a6:	4639      	mov	r1, r7
    91a8:	a80e      	add	r0, sp, #56	; 0x38
    91aa:	f7ff f813 	bl	81d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    91ae:	4607      	mov	r7, r0
    91b0:	b130      	cbz	r0, 91c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    91b2:	4638      	mov	r0, r7
    91b4:	b013      	add	sp, #76	; 0x4c
    91b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    91ba:	f04f 0a00 	mov.w	sl, #0
    91be:	e7e4      	b.n	918a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    91c0:	4643      	mov	r3, r8
    91c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    91c4:	4621      	mov	r1, r4
    91c6:	a80e      	add	r0, sp, #56	; 0x38
    91c8:	f7ff f9de 	bl	8588 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    91cc:	4607      	mov	r7, r0
    91ce:	2800      	cmp	r0, #0
    91d0:	d1ef      	bne.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    91d2:	4630      	mov	r0, r6
    91d4:	f00c fbd8 	bl	15988 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    91d8:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    91da:	464a      	mov	r2, r9
    91dc:	a80e      	add	r0, sp, #56	; 0x38
    91de:	f00c fae2 	bl	157a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    91e2:	4607      	mov	r7, r0
    91e4:	2800      	cmp	r0, #0
    91e6:	d1e4      	bne.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    91e8:	2110      	movs	r1, #16
    91ea:	6870      	ldr	r0, [r6, #4]
    91ec:	f00c f842 	bl	15274 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    91f0:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    91f2:	6870      	ldr	r0, [r6, #4]
    91f4:	6803      	ldr	r3, [r0, #0]
    91f6:	691b      	ldr	r3, [r3, #16]
    91f8:	2210      	movs	r2, #16
    91fa:	4621      	mov	r1, r4
    91fc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    91fe:	4601      	mov	r1, r0
    9200:	2800      	cmp	r0, #0
    9202:	d036      	beq.n	9272 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9204:	4622      	mov	r2, r4
    9206:	a802      	add	r0, sp, #8
    9208:	f000 f882 	bl	9310 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    920c:	462b      	mov	r3, r5
    920e:	465a      	mov	r2, fp
    9210:	a902      	add	r1, sp, #8
    9212:	68f0      	ldr	r0, [r6, #12]
    9214:	f00c fb4e 	bl	158b4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    9218:	4607      	mov	r7, r0
    921a:	2800      	cmp	r0, #0
    921c:	d141      	bne.n	92a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    921e:	6870      	ldr	r0, [r6, #4]
    9220:	6803      	ldr	r3, [r0, #0]
    9222:	695b      	ldr	r3, [r3, #20]
    9224:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9226:	2110      	movs	r1, #16
    9228:	6870      	ldr	r0, [r6, #4]
    922a:	f00c f823 	bl	15274 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    922e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    9230:	a802      	add	r0, sp, #8
    9232:	f00c fd41 	bl	15cb8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    9236:	42a0      	cmp	r0, r4
    9238:	d828      	bhi.n	928c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    923a:	68f4      	ldr	r4, [r6, #12]
    923c:	6870      	ldr	r0, [r6, #4]
    923e:	f00c f817 	bl	15270 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    9242:	4602      	mov	r2, r0
    9244:	9500      	str	r5, [sp, #0]
    9246:	465b      	mov	r3, fp
    9248:	a902      	add	r1, sp, #8
    924a:	4620      	mov	r0, r4
    924c:	f00c facf 	bl	157ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    9250:	4607      	mov	r7, r0
    9252:	bb30      	cbnz	r0, 92a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    9254:	a802      	add	r0, sp, #8
    9256:	f00c fd2f 	bl	15cb8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    925a:	69b3      	ldr	r3, [r6, #24]
    925c:	4283      	cmp	r3, r0
    925e:	d200      	bcs.n	9262 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    9260:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    9262:	6870      	ldr	r0, [r6, #4]
    9264:	6803      	ldr	r3, [r0, #0]
    9266:	689b      	ldr	r3, [r3, #8]
    9268:	2210      	movs	r2, #16
    926a:	69b1      	ldr	r1, [r6, #24]
    926c:	4798      	blx	r3
    926e:	4607      	mov	r7, r0
    9270:	e017      	b.n	92a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    9272:	68f0      	ldr	r0, [r6, #12]
    9274:	4b11      	ldr	r3, [pc, #68]	; (92bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    9276:	9301      	str	r3, [sp, #4]
    9278:	f240 33d2 	movw	r3, #978	; 0x3d2
    927c:	9300      	str	r3, [sp, #0]
    927e:	4b10      	ldr	r3, [pc, #64]	; (92c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    9280:	4a10      	ldr	r2, [pc, #64]	; (92c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    9282:	4601      	mov	r1, r0
    9284:	f00c fe25 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9288:	2701      	movs	r7, #1
    928a:	e792      	b.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    928c:	68f5      	ldr	r5, [r6, #12]
    928e:	a802      	add	r0, sp, #8
    9290:	f00c fd12 	bl	15cb8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    9294:	4602      	mov	r2, r0
    9296:	4623      	mov	r3, r4
    9298:	490b      	ldr	r1, [pc, #44]	; (92c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    929a:	4628      	mov	r0, r5
    929c:	f00c fe0a 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    92a0:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    92a2:	a802      	add	r0, sp, #8
    92a4:	f00c fbb5 	bl	15a12 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    92a8:	e783      	b.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    92aa:	bf00      	nop
    92ac:	00032664 	.word	0x00032664
    92b0:	000327b4 	.word	0x000327b4
    92b4:	00032730 	.word	0x00032730
    92b8:	00033e80 	.word	0x00033e80
    92bc:	00033f2c 	.word	0x00033f2c
    92c0:	00033ec4 	.word	0x00033ec4
    92c4:	00033f14 	.word	0x00033f14
    92c8:	00033f48 	.word	0x00033f48

000092cc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    92cc:	b538      	push	{r3, r4, r5, lr}
    92ce:	4604      	mov	r4, r0
    92d0:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    92d2:	68a5      	ldr	r5, [r4, #8]
    92d4:	6861      	ldr	r1, [r4, #4]
    92d6:	428d      	cmp	r5, r1
    92d8:	da12      	bge.n	9300 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    92da:	68e1      	ldr	r1, [r4, #12]
    92dc:	0128      	lsls	r0, r5, #4
    92de:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    92e2:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    92e4:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    92e6:	9b04      	ldr	r3, [sp, #16]
    92e8:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    92ea:	f04f 33ff 	mov.w	r3, #4294967295
    92ee:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    92f0:	68a3      	ldr	r3, [r4, #8]
    92f2:	3301      	adds	r3, #1
    92f4:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    92f6:	2301      	movs	r3, #1
    92f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    92fc:	2000      	movs	r0, #0
}
    92fe:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    9300:	460a      	mov	r2, r1
    9302:	4902      	ldr	r1, [pc, #8]	; (930c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    9304:	f00c fdd6 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9308:	2001      	movs	r0, #1
    930a:	e7f8      	b.n	92fe <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    930c:	00034008 	.word	0x00034008

00009310 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    9310:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    9312:	4c0f      	ldr	r4, [pc, #60]	; (9350 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    9314:	6004      	str	r4, [r0, #0]
    9316:	2400      	movs	r4, #0
    9318:	6084      	str	r4, [r0, #8]
    931a:	2401      	movs	r4, #1
    931c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    9320:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    9324:	fba4 4202 	umull	r4, r2, r4, r2
    9328:	0952      	lsrs	r2, r2, #5
    932a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    932c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    932e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    9332:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    9334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    9338:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    933a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    933e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    9340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    9348:	6241      	str	r1, [r0, #36]	; 0x24
}
    934a:	bc10      	pop	{r4}
    934c:	4770      	bx	lr
    934e:	bf00      	nop
    9350:	0003405c 	.word	0x0003405c

00009354 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    9354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9356:	4605      	mov	r5, r0
    9358:	460f      	mov	r7, r1
    935a:	4614      	mov	r4, r2
    935c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    935e:	f00c fbd0 	bl	15b02 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    9362:	2c00      	cmp	r4, #0
    9364:	db08      	blt.n	9378 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    9366:	68ab      	ldr	r3, [r5, #8]
    9368:	42a3      	cmp	r3, r4
    936a:	dd05      	ble.n	9378 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    936c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    936e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    9372:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    9374:	2000      	movs	r0, #0
}
    9376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    9378:	68ab      	ldr	r3, [r5, #8]
    937a:	4622      	mov	r2, r4
    937c:	4902      	ldr	r1, [pc, #8]	; (9388 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    937e:	4638      	mov	r0, r7
    9380:	f00c fd98 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9384:	2001      	movs	r0, #1
    9386:	e7f6      	b.n	9376 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    9388:	00034028 	.word	0x00034028

0000938c <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    938c:	2810      	cmp	r0, #16
    938e:	d82a      	bhi.n	93e6 <TfLiteTypeGetName+0x5a>
    9390:	e8df f000 	tbb	[pc, r0]
    9394:	110d2b09 	.word	0x110d2b09
    9398:	0b191f15 	.word	0x0b191f15
    939c:	2321131b 	.word	0x2321131b
    93a0:	2725171d 	.word	0x2725171d
    93a4:	0f          	.byte	0x0f
    93a5:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    93a6:	4812      	ldr	r0, [pc, #72]	; (93f0 <TfLiteTypeGetName+0x64>)
    93a8:	4770      	bx	lr
      return "INT16";
    93aa:	4812      	ldr	r0, [pc, #72]	; (93f4 <TfLiteTypeGetName+0x68>)
    93ac:	4770      	bx	lr
      return "INT32";
    93ae:	4812      	ldr	r0, [pc, #72]	; (93f8 <TfLiteTypeGetName+0x6c>)
    93b0:	4770      	bx	lr
      return "UINT32";
    93b2:	4812      	ldr	r0, [pc, #72]	; (93fc <TfLiteTypeGetName+0x70>)
    93b4:	4770      	bx	lr
      return "UINT8";
    93b6:	4812      	ldr	r0, [pc, #72]	; (9400 <TfLiteTypeGetName+0x74>)
    93b8:	4770      	bx	lr
      return "INT8";
    93ba:	4812      	ldr	r0, [pc, #72]	; (9404 <TfLiteTypeGetName+0x78>)
    93bc:	4770      	bx	lr
      return "INT64";
    93be:	4812      	ldr	r0, [pc, #72]	; (9408 <TfLiteTypeGetName+0x7c>)
    93c0:	4770      	bx	lr
      return "UINT64";
    93c2:	4812      	ldr	r0, [pc, #72]	; (940c <TfLiteTypeGetName+0x80>)
    93c4:	4770      	bx	lr
      return "BOOL";
    93c6:	4812      	ldr	r0, [pc, #72]	; (9410 <TfLiteTypeGetName+0x84>)
    93c8:	4770      	bx	lr
      return "COMPLEX64";
    93ca:	4812      	ldr	r0, [pc, #72]	; (9414 <TfLiteTypeGetName+0x88>)
    93cc:	4770      	bx	lr
      return "COMPLEX128";
    93ce:	4812      	ldr	r0, [pc, #72]	; (9418 <TfLiteTypeGetName+0x8c>)
    93d0:	4770      	bx	lr
      return "STRING";
    93d2:	4812      	ldr	r0, [pc, #72]	; (941c <TfLiteTypeGetName+0x90>)
    93d4:	4770      	bx	lr
      return "FLOAT16";
    93d6:	4812      	ldr	r0, [pc, #72]	; (9420 <TfLiteTypeGetName+0x94>)
    93d8:	4770      	bx	lr
      return "FLOAT64";
    93da:	4812      	ldr	r0, [pc, #72]	; (9424 <TfLiteTypeGetName+0x98>)
    93dc:	4770      	bx	lr
      return "RESOURCE";
    93de:	4812      	ldr	r0, [pc, #72]	; (9428 <TfLiteTypeGetName+0x9c>)
    93e0:	4770      	bx	lr
      return "VARIANT";
    93e2:	4812      	ldr	r0, [pc, #72]	; (942c <TfLiteTypeGetName+0xa0>)
    93e4:	4770      	bx	lr
  }
  return "Unknown type";
    93e6:	4812      	ldr	r0, [pc, #72]	; (9430 <TfLiteTypeGetName+0xa4>)
    93e8:	4770      	bx	lr
      return "FLOAT32";
    93ea:	4812      	ldr	r0, [pc, #72]	; (9434 <TfLiteTypeGetName+0xa8>)
}
    93ec:	4770      	bx	lr
    93ee:	bf00      	nop
    93f0:	00034110 	.word	0x00034110
    93f4:	0003408c 	.word	0x0003408c
    93f8:	00034094 	.word	0x00034094
    93fc:	0003409c 	.word	0x0003409c
    9400:	000340a4 	.word	0x000340a4
    9404:	000340ac 	.word	0x000340ac
    9408:	000340b4 	.word	0x000340b4
    940c:	000340bc 	.word	0x000340bc
    9410:	000340c4 	.word	0x000340c4
    9414:	000340cc 	.word	0x000340cc
    9418:	000340d8 	.word	0x000340d8
    941c:	000340e4 	.word	0x000340e4
    9420:	000340ec 	.word	0x000340ec
    9424:	000340f4 	.word	0x000340f4
    9428:	000340fc 	.word	0x000340fc
    942c:	00034108 	.word	0x00034108
    9430:	00034074 	.word	0x00034074
    9434:	00034084 	.word	0x00034084

00009438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9438:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    943c:	4606      	mov	r6, r0
    943e:	460f      	mov	r7, r1
    9440:	4615      	mov	r5, r2
    9442:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    9444:	2200      	movs	r2, #0
    9446:	2300      	movs	r3, #0
    9448:	f7f7 faaa 	bl	9a0 <__aeabi_dcmpeq>
    944c:	b120      	cbz	r0, 9458 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    944e:	2300      	movs	r3, #0
    9450:	602b      	str	r3, [r5, #0]
    *shift = 0;
    9452:	6023      	str	r3, [r4, #0]
}
    9454:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    9458:	4622      	mov	r2, r4
    945a:	4630      	mov	r0, r6
    945c:	4639      	mov	r1, r7
    945e:	f009 f905 	bl	1266c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    9462:	2200      	movs	r2, #0
    9464:	4b1a      	ldr	r3, [pc, #104]	; (94d0 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    9466:	f7f7 f833 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    946a:	f009 f937 	bl	126dc <round>
    946e:	f7f7 fe53 	bl	1118 <__aeabi_d2lz>
    9472:	4606      	mov	r6, r0
    9474:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    9476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    947a:	2300      	movs	r3, #0
    947c:	4282      	cmp	r2, r0
    947e:	418b      	sbcs	r3, r1
    9480:	db12      	blt.n	94a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    9482:	2900      	cmp	r1, #0
    9484:	bf08      	it	eq
    9486:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    948a:	d00f      	beq.n	94ac <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    948c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    9490:	f177 0300 	sbcs.w	r3, r7, #0
    9494:	da19      	bge.n	94ca <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    9496:	6823      	ldr	r3, [r4, #0]
    9498:	f113 0f1f 	cmn.w	r3, #31
    949c:	da02      	bge.n	94a4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    949e:	2300      	movs	r3, #0
    94a0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    94a2:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    94a4:	602e      	str	r6, [r5, #0]
    94a6:	e7d5      	b.n	9454 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    94a8:	f00f faf4 	bl	18a94 <abort>
    q_fixed /= 2;
    94ac:	0fc9      	lsrs	r1, r1, #31
    94ae:	eb16 0b01 	adds.w	fp, r6, r1
    94b2:	f147 0c00 	adc.w	ip, r7, #0
    94b6:	ea4f 025b 	mov.w	r2, fp, lsr #1
    94ba:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    94be:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    94c2:	6823      	ldr	r3, [r4, #0]
    94c4:	3301      	adds	r3, #1
    94c6:	6023      	str	r3, [r4, #0]
    94c8:	e7e0      	b.n	948c <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    94ca:	f00f fae3 	bl	18a94 <abort>
    94ce:	bf00      	nop
    94d0:	41e00000 	.word	0x41e00000

000094d4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    94d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94d6:	4606      	mov	r6, r0
    94d8:	460f      	mov	r7, r1
    94da:	4615      	mov	r5, r2
    94dc:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    94de:	2200      	movs	r2, #0
    94e0:	4b08      	ldr	r3, [pc, #32]	; (9504 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    94e2:	f7f7 fa85 	bl	9f0 <__aeabi_dcmpgt>
    94e6:	b148      	cbz	r0, 94fc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    94e8:	4623      	mov	r3, r4
    94ea:	462a      	mov	r2, r5
    94ec:	4630      	mov	r0, r6
    94ee:	4639      	mov	r1, r7
    94f0:	f7ff ffa2 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    94f4:	6823      	ldr	r3, [r4, #0]
    94f6:	2b00      	cmp	r3, #0
    94f8:	db02      	blt.n	9500 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    94fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    94fc:	f00f faca 	bl	18a94 <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9500:	f00f fac8 	bl	18a94 <abort>
    9504:	3ff00000 	.word	0x3ff00000

00009508 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
    9508:	b5f0      	push	{r4, r5, r6, r7, lr}
    950a:	b083      	sub	sp, #12
    950c:	4604      	mov	r4, r0
    950e:	460d      	mov	r5, r1
    9510:	4616      	mov	r6, r2
    9512:	461f      	mov	r7, r3
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9514:	2200      	movs	r2, #0
    9516:	4b0e      	ldr	r3, [pc, #56]	; (9550 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x48>)
    9518:	f7f7 fa4c 	bl	9b4 <__aeabi_dcmplt>
    951c:	b190      	cbz	r0, 9544 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x3c>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    951e:	2200      	movs	r2, #0
    9520:	2300      	movs	r3, #0
    9522:	4620      	mov	r0, r4
    9524:	4629      	mov	r1, r5
    9526:	f7f7 fa63 	bl	9f0 <__aeabi_dcmpgt>
    952a:	b168      	cbz	r0, 9548 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x40>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
    952c:	ab01      	add	r3, sp, #4
    952e:	4632      	mov	r2, r6
    9530:	4620      	mov	r0, r4
    9532:	4629      	mov	r1, r5
    9534:	f7ff ff80 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
    9538:	9b01      	ldr	r3, [sp, #4]
    953a:	2b00      	cmp	r3, #0
    953c:	dc06      	bgt.n	954c <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x44>
  *left_shift = shift;
    953e:	603b      	str	r3, [r7, #0]
}
    9540:	b003      	add	sp, #12
    9542:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
    9544:	f00f faa6 	bl	18a94 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
    9548:	f00f faa4 	bl	18a94 <abort>
  TFLITE_CHECK_LE(shift, 0);
    954c:	f00f faa2 	bl	18a94 <abort>
    9550:	3ff00000 	.word	0x3ff00000

00009554 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9554:	b5f0      	push	{r4, r5, r6, r7, lr}
    9556:	b087      	sub	sp, #28
    9558:	4605      	mov	r5, r0
    955a:	460c      	mov	r4, r1
    955c:	9203      	str	r2, [sp, #12]
    955e:	9302      	str	r3, [sp, #8]
    9560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9562:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9564:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    9566:	2901      	cmp	r1, #1
    9568:	d00e      	beq.n	9588 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    956a:	2903      	cmp	r1, #3
    956c:	d042      	beq.n	95f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    956e:	2902      	cmp	r1, #2
    9570:	f000 80a7 	beq.w	96c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9574:	9b03      	ldr	r3, [sp, #12]
    9576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9578:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    957a:	9b02      	ldr	r3, [sp, #8]
    957c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    957e:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9580:	2400      	movs	r4, #0
}
    9582:	4620      	mov	r0, r4
    9584:	b007      	add	sp, #28
    9586:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    9588:	4631      	mov	r1, r6
    958a:	2000      	movs	r0, #0
    958c:	f7f7 fc74 	bl	e78 <__aeabi_fdiv>
    9590:	f7f6 ff46 	bl	420 <__aeabi_f2d>
    9594:	f009 f8a2 	bl	126dc <round>
    9598:	f7f7 fa5c 	bl	a54 <__aeabi_d2f>
    959c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    959e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    95a2:	f7f7 fd67 	bl	1074 <__aeabi_fcmpge>
    95a6:	b160      	cbz	r0, 95c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    95a8:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    95ac:	4630      	mov	r0, r6
    95ae:	f7f7 fd57 	bl	1060 <__aeabi_fcmple>
    95b2:	b130      	cbz	r0, 95c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    95b4:	4630      	mov	r0, r6
    95b6:	f7f7 fd71 	bl	109c <__aeabi_f2iz>
    95ba:	4407      	add	r7, r0
    95bc:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    95be:	2400      	movs	r4, #0
    95c0:	e008      	b.n	95d4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    95c2:	696e      	ldr	r6, [r5, #20]
    95c4:	4b73      	ldr	r3, [pc, #460]	; (9794 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    95c6:	9300      	str	r3, [sp, #0]
    95c8:	f240 1359 	movw	r3, #345	; 0x159
    95cc:	4a72      	ldr	r2, [pc, #456]	; (9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    95ce:	4973      	ldr	r1, [pc, #460]	; (979c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    95d0:	4628      	mov	r0, r5
    95d2:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    95d4:	2c00      	cmp	r4, #0
    95d6:	d1d4      	bne.n	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    95d8:	9a05      	ldr	r2, [sp, #20]
    95da:	9b03      	ldr	r3, [sp, #12]
    95dc:	429a      	cmp	r2, r3
    95de:	dc07      	bgt.n	95f0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    95e0:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    95e2:	681b      	ldr	r3, [r3, #0]
    95e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95e6:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    95e8:	9b02      	ldr	r3, [sp, #8]
    95ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    95ec:	6013      	str	r3, [r2, #0]
    95ee:	e7c8      	b.n	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    95f0:	ab05      	add	r3, sp, #20
    95f2:	e7f6      	b.n	95e2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    95f4:	4631      	mov	r1, r6
    95f6:	2000      	movs	r0, #0
    95f8:	f7f7 fc3e 	bl	e78 <__aeabi_fdiv>
    95fc:	f7f6 ff10 	bl	420 <__aeabi_f2d>
    9600:	f009 f86c 	bl	126dc <round>
    9604:	f7f7 fa26 	bl	a54 <__aeabi_d2f>
    9608:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    960a:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    960e:	f7f7 fd31 	bl	1074 <__aeabi_fcmpge>
    9612:	b160      	cbz	r0, 962e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9614:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9618:	4620      	mov	r0, r4
    961a:	f7f7 fd21 	bl	1060 <__aeabi_fcmple>
    961e:	b130      	cbz	r0, 962e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9620:	4620      	mov	r0, r4
    9622:	f7f7 fd3b 	bl	109c <__aeabi_f2iz>
    9626:	4438      	add	r0, r7
    9628:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    962a:	2400      	movs	r4, #0
    962c:	e009      	b.n	9642 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    962e:	696c      	ldr	r4, [r5, #20]
    9630:	4b58      	ldr	r3, [pc, #352]	; (9794 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9632:	9300      	str	r3, [sp, #0]
    9634:	f240 1359 	movw	r3, #345	; 0x159
    9638:	4a57      	ldr	r2, [pc, #348]	; (9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    963a:	4958      	ldr	r1, [pc, #352]	; (979c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    963c:	4628      	mov	r0, r5
    963e:	47a0      	blx	r4
    9640:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9642:	2c00      	cmp	r4, #0
    9644:	d19d      	bne.n	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9646:	9a03      	ldr	r2, [sp, #12]
    9648:	9b05      	ldr	r3, [sp, #20]
    964a:	429a      	cmp	r2, r3
    964c:	db1f      	blt.n	968e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    964e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9654:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9656:	4631      	mov	r1, r6
    9658:	4851      	ldr	r0, [pc, #324]	; (97a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    965a:	f7f7 fc0d 	bl	e78 <__aeabi_fdiv>
    965e:	f7f6 fedf 	bl	420 <__aeabi_f2d>
    9662:	f009 f83b 	bl	126dc <round>
    9666:	f7f7 f9f5 	bl	a54 <__aeabi_d2f>
    966a:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    966c:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9670:	f7f7 fd00 	bl	1074 <__aeabi_fcmpge>
    9674:	b168      	cbz	r0, 9692 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    9676:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    967a:	4630      	mov	r0, r6
    967c:	f7f7 fcf0 	bl	1060 <__aeabi_fcmple>
    9680:	b138      	cbz	r0, 9692 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9682:	4630      	mov	r0, r6
    9684:	f7f7 fd0a 	bl	109c <__aeabi_f2iz>
    9688:	4407      	add	r7, r0
    968a:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    968c:	e00b      	b.n	96a6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    968e:	ab05      	add	r3, sp, #20
    9690:	e7de      	b.n	9650 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9692:	696c      	ldr	r4, [r5, #20]
    9694:	4b3f      	ldr	r3, [pc, #252]	; (9794 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9696:	9300      	str	r3, [sp, #0]
    9698:	f240 1359 	movw	r3, #345	; 0x159
    969c:	4a3e      	ldr	r2, [pc, #248]	; (9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    969e:	493f      	ldr	r1, [pc, #252]	; (979c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    96a0:	4628      	mov	r0, r5
    96a2:	47a0      	blx	r4
    96a4:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    96a6:	2c00      	cmp	r4, #0
    96a8:	f47f af6b 	bne.w	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    96ac:	9a05      	ldr	r2, [sp, #20]
    96ae:	9b02      	ldr	r3, [sp, #8]
    96b0:	429a      	cmp	r2, r3
    96b2:	db04      	blt.n	96be <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    96b4:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    96b6:	681b      	ldr	r3, [r3, #0]
    96b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    96ba:	6013      	str	r3, [r2, #0]
    96bc:	e761      	b.n	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    96be:	ab05      	add	r3, sp, #20
    96c0:	e7f9      	b.n	96b6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    96c2:	4631      	mov	r1, r6
    96c4:	4837      	ldr	r0, [pc, #220]	; (97a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    96c6:	f7f7 fbd7 	bl	e78 <__aeabi_fdiv>
    96ca:	f7f6 fea9 	bl	420 <__aeabi_f2d>
    96ce:	f009 f805 	bl	126dc <round>
    96d2:	f7f7 f9bf 	bl	a54 <__aeabi_d2f>
    96d6:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    96d8:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    96dc:	f7f7 fcca 	bl	1074 <__aeabi_fcmpge>
    96e0:	b160      	cbz	r0, 96fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    96e2:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    96e6:	4620      	mov	r0, r4
    96e8:	f7f7 fcba 	bl	1060 <__aeabi_fcmple>
    96ec:	b130      	cbz	r0, 96fc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    96ee:	4620      	mov	r0, r4
    96f0:	f7f7 fcd4 	bl	109c <__aeabi_f2iz>
    96f4:	4438      	add	r0, r7
    96f6:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    96f8:	2400      	movs	r4, #0
    96fa:	e009      	b.n	9710 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    96fc:	696c      	ldr	r4, [r5, #20]
    96fe:	4b25      	ldr	r3, [pc, #148]	; (9794 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9700:	9300      	str	r3, [sp, #0]
    9702:	f240 1359 	movw	r3, #345	; 0x159
    9706:	4a24      	ldr	r2, [pc, #144]	; (9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9708:	4924      	ldr	r1, [pc, #144]	; (979c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    970a:	4628      	mov	r0, r5
    970c:	47a0      	blx	r4
    970e:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9710:	2c00      	cmp	r4, #0
    9712:	f47f af36 	bne.w	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    9716:	9a03      	ldr	r2, [sp, #12]
    9718:	9b05      	ldr	r3, [sp, #20]
    971a:	429a      	cmp	r2, r3
    971c:	db20      	blt.n	9760 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    971e:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9720:	681b      	ldr	r3, [r3, #0]
    9722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9724:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    9726:	4631      	mov	r1, r6
    9728:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    972c:	f7f7 fba4 	bl	e78 <__aeabi_fdiv>
    9730:	f7f6 fe76 	bl	420 <__aeabi_f2d>
    9734:	f008 ffd2 	bl	126dc <round>
    9738:	f7f7 f98c 	bl	a54 <__aeabi_d2f>
    973c:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    973e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9742:	f7f7 fc97 	bl	1074 <__aeabi_fcmpge>
    9746:	b168      	cbz	r0, 9764 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    9748:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    974c:	4630      	mov	r0, r6
    974e:	f7f7 fc87 	bl	1060 <__aeabi_fcmple>
    9752:	b138      	cbz	r0, 9764 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9754:	4630      	mov	r0, r6
    9756:	f7f7 fca1 	bl	109c <__aeabi_f2iz>
    975a:	4407      	add	r7, r0
    975c:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    975e:	e00b      	b.n	9778 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9760:	ab05      	add	r3, sp, #20
    9762:	e7dd      	b.n	9720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9764:	696c      	ldr	r4, [r5, #20]
    9766:	4b0b      	ldr	r3, [pc, #44]	; (9794 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9768:	9300      	str	r3, [sp, #0]
    976a:	f240 1359 	movw	r3, #345	; 0x159
    976e:	4a0a      	ldr	r2, [pc, #40]	; (9798 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9770:	490a      	ldr	r1, [pc, #40]	; (979c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9772:	4628      	mov	r0, r5
    9774:	47a0      	blx	r4
    9776:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9778:	2c00      	cmp	r4, #0
    977a:	f47f af02 	bne.w	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    977e:	9a05      	ldr	r2, [sp, #20]
    9780:	9b02      	ldr	r3, [sp, #8]
    9782:	429a      	cmp	r2, r3
    9784:	db04      	blt.n	9790 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    9786:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    978c:	6013      	str	r3, [r2, #0]
    978e:	e6f8      	b.n	9582 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9790:	ab05      	add	r3, sp, #20
    9792:	e7f9      	b.n	9788 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    9794:	00034164 	.word	0x00034164
    9798:	00034118 	.word	0x00034118
    979c:	00033f14 	.word	0x00033f14
    97a0:	40c00000 	.word	0x40c00000
    97a4:	bf800000 	.word	0xbf800000

000097a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    97a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97ac:	b082      	sub	sp, #8
    97ae:	4680      	mov	r8, r0
    97b0:	4608      	mov	r0, r1
    97b2:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    97b4:	68d1      	ldr	r1, [r2, #12]
    97b6:	68c0      	ldr	r0, [r0, #12]
    97b8:	f7f7 faaa 	bl	d10 <__aeabi_fmul>
    97bc:	4604      	mov	r4, r0
  const double input_product_scale =
    97be:	f7f6 fe2f 	bl	420 <__aeabi_f2d>
    97c2:	4606      	mov	r6, r0
    97c4:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    97c6:	2100      	movs	r1, #0
    97c8:	4620      	mov	r0, r4
    97ca:	f7f7 fc53 	bl	1074 <__aeabi_fcmpge>
    97ce:	b178      	cbz	r0, 97f0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    97d0:	68e8      	ldr	r0, [r5, #12]
    97d2:	f7f6 fe25 	bl	420 <__aeabi_f2d>
    97d6:	4602      	mov	r2, r0
    97d8:	460b      	mov	r3, r1
    97da:	4630      	mov	r0, r6
    97dc:	4639      	mov	r1, r7
    97de:	f7f6 ffa1 	bl	724 <__aeabi_ddiv>
    97e2:	9b08      	ldr	r3, [sp, #32]
    97e4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    97e8:	2000      	movs	r0, #0
}
    97ea:	b002      	add	sp, #8
    97ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    97f0:	f8d8 4014 	ldr.w	r4, [r8, #20]
    97f4:	4b04      	ldr	r3, [pc, #16]	; (9808 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    97f6:	9300      	str	r3, [sp, #0]
    97f8:	f240 134b 	movw	r3, #331	; 0x14b
    97fc:	4a03      	ldr	r2, [pc, #12]	; (980c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    97fe:	4904      	ldr	r1, [pc, #16]	; (9810 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9800:	4640      	mov	r0, r8
    9802:	47a0      	blx	r4
    9804:	2001      	movs	r0, #1
    9806:	e7f0      	b.n	97ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    9808:	0003418c 	.word	0x0003418c
    980c:	00034118 	.word	0x00034118
    9810:	00033f14 	.word	0x00033f14

00009814 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9814:	b570      	push	{r4, r5, r6, lr}
    9816:	b084      	sub	sp, #16
    9818:	4614      	mov	r4, r2
    981a:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    981c:	7813      	ldrb	r3, [r2, #0]
    981e:	2b03      	cmp	r3, #3
    9820:	d00d      	beq.n	983e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9822:	2b09      	cmp	r3, #9
    9824:	d00e      	beq.n	9844 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    9826:	2b07      	cmp	r3, #7
    9828:	d017      	beq.n	985a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    982a:	6944      	ldr	r4, [r0, #20]
    982c:	4b0d      	ldr	r3, [pc, #52]	; (9864 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    982e:	9300      	str	r3, [sp, #0]
    9830:	f240 1391 	movw	r3, #401	; 0x191
    9834:	4a0c      	ldr	r2, [pc, #48]	; (9868 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    9836:	490d      	ldr	r1, [pc, #52]	; (986c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    9838:	47a0      	blx	r4
    983a:	2001      	movs	r0, #1
    983c:	e00b      	b.n	9856 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    983e:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9840:	2200      	movs	r2, #0
    9842:	e002      	b.n	984a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9844:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    9846:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    984a:	9e08      	ldr	r6, [sp, #32]
    984c:	9602      	str	r6, [sp, #8]
    984e:	9501      	str	r5, [sp, #4]
    9850:	9400      	str	r4, [sp, #0]
    9852:	f7ff fe7f 	bl	9554 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    9856:	b004      	add	sp, #16
    9858:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    985a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    985e:	4a04      	ldr	r2, [pc, #16]	; (9870 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9860:	e7f3      	b.n	984a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9862:	bf00      	nop
    9864:	000341cc 	.word	0x000341cc
    9868:	00034118 	.word	0x00034118
    986c:	00033f14 	.word	0x00033f14
    9870:	ffff8000 	.word	0xffff8000

00009874 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9878:	b08d      	sub	sp, #52	; 0x34
    987a:	4604      	mov	r4, r0
    987c:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    987e:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9882:	2e01      	cmp	r6, #1
    9884:	d010      	beq.n	98a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    9886:	6947      	ldr	r7, [r0, #20]
    9888:	2501      	movs	r5, #1
    988a:	9503      	str	r5, [sp, #12]
    988c:	9602      	str	r6, [sp, #8]
    988e:	4b7d      	ldr	r3, [pc, #500]	; (9a84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    9890:	9301      	str	r3, [sp, #4]
    9892:	4b7d      	ldr	r3, [pc, #500]	; (9a88 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    9894:	9300      	str	r3, [sp, #0]
    9896:	23da      	movs	r3, #218	; 0xda
    9898:	4a7c      	ldr	r2, [pc, #496]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    989a:	497d      	ldr	r1, [pc, #500]	; (9a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    989c:	47b8      	blx	r7
    989e:	462e      	mov	r6, r5
}
    98a0:	4630      	mov	r0, r6
    98a2:	b00d      	add	sp, #52	; 0x34
    98a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98a8:	460d      	mov	r5, r1
    98aa:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    98ac:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    98b0:	f1b8 0f01 	cmp.w	r8, #1
    98b4:	d00d      	beq.n	98d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    98b6:	6945      	ldr	r5, [r0, #20]
    98b8:	2301      	movs	r3, #1
    98ba:	9303      	str	r3, [sp, #12]
    98bc:	f8cd 8008 	str.w	r8, [sp, #8]
    98c0:	4b70      	ldr	r3, [pc, #448]	; (9a84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    98c2:	9301      	str	r3, [sp, #4]
    98c4:	4b73      	ldr	r3, [pc, #460]	; (9a94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    98c6:	9300      	str	r3, [sp, #0]
    98c8:	23dc      	movs	r3, #220	; 0xdc
    98ca:	4a70      	ldr	r2, [pc, #448]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    98cc:	4970      	ldr	r1, [pc, #448]	; (9a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    98ce:	47a8      	blx	r5
    98d0:	e7e6      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    98d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    98d4:	b1b3      	cbz	r3, 9904 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    98d6:	f8d3 b000 	ldr.w	fp, [r3]
    98da:	f1bb 0f00 	cmp.w	fp, #0
    98de:	d01a      	beq.n	9916 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    98e0:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    98e4:	2f01      	cmp	r7, #1
    98e6:	dd5a      	ble.n	999e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    98e8:	780a      	ldrb	r2, [r1, #0]
    98ea:	2a09      	cmp	r2, #9
    98ec:	d01c      	beq.n	9928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    98ee:	2a07      	cmp	r2, #7
    98f0:	d01a      	beq.n	9928 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    98f2:	6945      	ldr	r5, [r0, #20]
    98f4:	4b68      	ldr	r3, [pc, #416]	; (9a98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    98f6:	9300      	str	r3, [sp, #0]
    98f8:	23ec      	movs	r3, #236	; 0xec
    98fa:	4a64      	ldr	r2, [pc, #400]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    98fc:	4967      	ldr	r1, [pc, #412]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    98fe:	47a8      	blx	r5
    9900:	4646      	mov	r6, r8
    9902:	e7cd      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9904:	6945      	ldr	r5, [r0, #20]
    9906:	4b66      	ldr	r3, [pc, #408]	; (9aa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    9908:	9300      	str	r3, [sp, #0]
    990a:	23e7      	movs	r3, #231	; 0xe7
    990c:	4a5f      	ldr	r2, [pc, #380]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    990e:	4963      	ldr	r1, [pc, #396]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9910:	47a8      	blx	r5
    9912:	4646      	mov	r6, r8
    9914:	e7c4      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    9916:	6945      	ldr	r5, [r0, #20]
    9918:	4b62      	ldr	r3, [pc, #392]	; (9aa4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    991a:	9300      	str	r3, [sp, #0]
    991c:	23e8      	movs	r3, #232	; 0xe8
    991e:	4a5b      	ldr	r2, [pc, #364]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9920:	495e      	ldr	r1, [pc, #376]	; (9a9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9922:	47a8      	blx	r5
    9924:	4646      	mov	r6, r8
    9926:	e7bb      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    9928:	f89a 2000 	ldrb.w	r2, [sl]
    992c:	2a09      	cmp	r2, #9
    992e:	d00e      	beq.n	994e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9930:	6965      	ldr	r5, [r4, #20]
    9932:	2309      	movs	r3, #9
    9934:	9303      	str	r3, [sp, #12]
    9936:	9202      	str	r2, [sp, #8]
    9938:	4b5b      	ldr	r3, [pc, #364]	; (9aa8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    993a:	9301      	str	r3, [sp, #4]
    993c:	4b5b      	ldr	r3, [pc, #364]	; (9aac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    993e:	9300      	str	r3, [sp, #0]
    9940:	23ee      	movs	r3, #238	; 0xee
    9942:	4a52      	ldr	r2, [pc, #328]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9944:	4952      	ldr	r1, [pc, #328]	; (9a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9946:	4620      	mov	r0, r4
    9948:	47a8      	blx	r5
    994a:	4646      	mov	r6, r8
    994c:	e7a8      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    994e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9950:	4297      	cmp	r7, r2
    9952:	d00d      	beq.n	9970 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9954:	6965      	ldr	r5, [r4, #20]
    9956:	9203      	str	r2, [sp, #12]
    9958:	9702      	str	r7, [sp, #8]
    995a:	4b55      	ldr	r3, [pc, #340]	; (9ab0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    995c:	9301      	str	r3, [sp, #4]
    995e:	4b55      	ldr	r3, [pc, #340]	; (9ab4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9960:	9300      	str	r3, [sp, #0]
    9962:	23ef      	movs	r3, #239	; 0xef
    9964:	4a49      	ldr	r2, [pc, #292]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9966:	494a      	ldr	r1, [pc, #296]	; (9a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9968:	4620      	mov	r0, r4
    996a:	47a8      	blx	r5
    996c:	4646      	mov	r6, r8
    996e:	e797      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9970:	f8da 2008 	ldr.w	r2, [sl, #8]
    9974:	689b      	ldr	r3, [r3, #8]
    9976:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    997a:	6853      	ldr	r3, [r2, #4]
    997c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    997e:	4293      	cmp	r3, r2
    9980:	d00d      	beq.n	999e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9982:	6965      	ldr	r5, [r4, #20]
    9984:	9303      	str	r3, [sp, #12]
    9986:	9202      	str	r2, [sp, #8]
    9988:	4b4b      	ldr	r3, [pc, #300]	; (9ab8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    998a:	9301      	str	r3, [sp, #4]
    998c:	4b48      	ldr	r3, [pc, #288]	; (9ab0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    998e:	9300      	str	r3, [sp, #0]
    9990:	23f0      	movs	r3, #240	; 0xf0
    9992:	4a3e      	ldr	r2, [pc, #248]	; (9a8c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9994:	493e      	ldr	r1, [pc, #248]	; (9a90 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    9996:	4620      	mov	r0, r4
    9998:	47a8      	blx	r5
    999a:	4646      	mov	r6, r8
    999c:	e780      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    999e:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    99a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99a4:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    99a8:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    99ac:	2600      	movs	r6, #0
    99ae:	9405      	str	r4, [sp, #20]
    99b0:	9506      	str	r5, [sp, #24]
    99b2:	f8cd a01c 	str.w	sl, [sp, #28]
    99b6:	469a      	mov	sl, r3
    99b8:	e024      	b.n	9a04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    99ba:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    99be:	f7f6 fd2f 	bl	420 <__aeabi_f2d>
    99c2:	4604      	mov	r4, r0
    99c4:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    99c6:	4648      	mov	r0, r9
    99c8:	f7f6 fd2a 	bl	420 <__aeabi_f2d>
    99cc:	4622      	mov	r2, r4
    99ce:	462b      	mov	r3, r5
    99d0:	f7f6 fd7e 	bl	4d0 <__aeabi_dmul>
    99d4:	4604      	mov	r4, r0
    99d6:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    99d8:	4640      	mov	r0, r8
    99da:	f7f6 fd21 	bl	420 <__aeabi_f2d>
    99de:	4602      	mov	r2, r0
    99e0:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    99e2:	4620      	mov	r0, r4
    99e4:	4629      	mov	r1, r5
    99e6:	f7f6 fe9d 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    99ea:	ab0a      	add	r3, sp, #40	; 0x28
    99ec:	aa09      	add	r2, sp, #36	; 0x24
    99ee:	f7ff fd23 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    99f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    99f6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    99fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    99fe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9a02:	3601      	adds	r6, #1
    9a04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9a06:	429e      	cmp	r6, r3
    9a08:	da04      	bge.n	9a14 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    9a0a:	2f01      	cmp	r7, #1
    9a0c:	ddd5      	ble.n	99ba <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    9a0e:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9a12:	e7d4      	b.n	99be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9a14:	9c05      	ldr	r4, [sp, #20]
    9a16:	9d06      	ldr	r5, [sp, #24]
    9a18:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    9a1c:	782b      	ldrb	r3, [r5, #0]
    9a1e:	2b03      	cmp	r3, #3
    9a20:	d008      	beq.n	9a34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9a22:	782b      	ldrb	r3, [r5, #0]
    9a24:	2b09      	cmp	r3, #9
    9a26:	d022      	beq.n	9a6e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9a28:	2b03      	cmp	r3, #3
    9a2a:	d020      	beq.n	9a6e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9a2c:	2b07      	cmp	r3, #7
    9a2e:	d01e      	beq.n	9a6e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9a30:	2600      	movs	r6, #0
    9a32:	e735      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9a34:	2200      	movs	r2, #0
    9a36:	2300      	movs	r3, #0
    9a38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    9a3c:	ab0a      	add	r3, sp, #40	; 0x28
    9a3e:	9301      	str	r3, [sp, #4]
    9a40:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a42:	9300      	str	r3, [sp, #0]
    9a44:	9b04      	ldr	r3, [sp, #16]
    9a46:	4652      	mov	r2, sl
    9a48:	4629      	mov	r1, r5
    9a4a:	4620      	mov	r0, r4
    9a4c:	f7f7 fd78 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9a50:	4606      	mov	r6, r0
    9a52:	2800      	cmp	r0, #0
    9a54:	f47f af24 	bne.w	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    9a58:	ab09      	add	r3, sp, #36	; 0x24
    9a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9a5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9a60:	f7ff fcea 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a66:	425b      	negs	r3, r3
    9a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9a6a:	6013      	str	r3, [r2, #0]
    9a6c:	e7d9      	b.n	9a22 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    9a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a70:	9300      	str	r3, [sp, #0]
    9a72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9a74:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9a76:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9a78:	7809      	ldrb	r1, [r1, #0]
    9a7a:	4620      	mov	r0, r4
    9a7c:	f7ff feca 	bl	9814 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9a80:	4606      	mov	r6, r0
    9a82:	e70d      	b.n	98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9a84:	000341f0 	.word	0x000341f0
    9a88:	0003420c 	.word	0x0003420c
    9a8c:	00034118 	.word	0x00034118
    9a90:	000341d4 	.word	0x000341d4
    9a94:	00034228 	.word	0x00034228
    9a98:	00034274 	.word	0x00034274
    9a9c:	00033f14 	.word	0x00033f14
    9aa0:	00034244 	.word	0x00034244
    9aa4:	00034258 	.word	0x00034258
    9aa8:	000342b0 	.word	0x000342b0
    9aac:	000342bc 	.word	0x000342bc
    9ab0:	000342cc 	.word	0x000342cc
    9ab4:	000342dc 	.word	0x000342dc
    9ab8:	00034300 	.word	0x00034300

00009abc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    9abc:	b508      	push	{r3, lr}
    9abe:	4613      	mov	r3, r2
  switch (tensor_type) {
    9ac0:	280f      	cmp	r0, #15
    9ac2:	d848      	bhi.n	9b56 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    9ac4:	e8df f000 	tbb	[pc, r0]
    9ac8:	1f17080c 	.word	0x1f17080c
    9acc:	13332f27 	.word	0x13332f27
    9ad0:	3b0f2337 	.word	0x3b0f2337
    9ad4:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    9ad8:	230a      	movs	r3, #10
    9ada:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9adc:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    9ade:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    9ae0:	2301      	movs	r3, #1
    9ae2:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9ae4:	e7fb      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    9ae6:	230b      	movs	r3, #11
    9ae8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9aea:	2000      	movs	r0, #0
    9aec:	e7f7      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    9aee:	2307      	movs	r3, #7
    9af0:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9af2:	2000      	movs	r0, #0
    9af4:	e7f3      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    9af6:	2302      	movs	r3, #2
    9af8:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9afa:	2000      	movs	r0, #0
    9afc:	e7ef      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    9afe:	2310      	movs	r3, #16
    9b00:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b02:	2000      	movs	r0, #0
    9b04:	e7eb      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    9b06:	2303      	movs	r3, #3
    9b08:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b0a:	2000      	movs	r0, #0
    9b0c:	e7e7      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    9b0e:	2309      	movs	r3, #9
    9b10:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b12:	2000      	movs	r0, #0
    9b14:	e7e3      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    9b16:	2304      	movs	r3, #4
    9b18:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b1a:	2000      	movs	r0, #0
    9b1c:	e7df      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    9b1e:	230d      	movs	r3, #13
    9b20:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b22:	2000      	movs	r0, #0
    9b24:	e7db      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    9b26:	2305      	movs	r3, #5
    9b28:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b2a:	2000      	movs	r0, #0
    9b2c:	e7d7      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    9b2e:	2306      	movs	r3, #6
    9b30:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b32:	2000      	movs	r0, #0
    9b34:	e7d3      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    9b36:	2308      	movs	r3, #8
    9b38:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b3a:	2000      	movs	r0, #0
    9b3c:	e7cf      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    9b3e:	230c      	movs	r3, #12
    9b40:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b42:	2000      	movs	r0, #0
    9b44:	e7cb      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    9b46:	230e      	movs	r3, #14
    9b48:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b4a:	2000      	movs	r0, #0
    9b4c:	e7c7      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    9b4e:	230f      	movs	r3, #15
    9b50:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9b52:	2000      	movs	r0, #0
    9b54:	e7c3      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    9b56:	2200      	movs	r2, #0
    9b58:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    9b5a:	4602      	mov	r2, r0
    9b5c:	4902      	ldr	r1, [pc, #8]	; (9b68 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9b5e:	4618      	mov	r0, r3
    9b60:	f00c f9a8 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9b64:	2001      	movs	r0, #1
    9b66:	e7ba      	b.n	9ade <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    9b68:	00034340 	.word	0x00034340

00009b6c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    9b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b70:	461c      	mov	r4, r3
  if (!flat_vector) {
    9b72:	b1d1      	cbz	r1, 9baa <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9b74:	4680      	mov	r8, r0
    9b76:	4617      	mov	r7, r2
    9b78:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    9b7a:	6808      	ldr	r0, [r1, #0]
    9b7c:	f00a f9fb 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9b80:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9b82:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    9b86:	d817      	bhi.n	9bb8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    9b88:	2400      	movs	r4, #0
    9b8a:	42b4      	cmp	r4, r6
    9b8c:	d222      	bcs.n	9bd4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    9b8e:	6828      	ldr	r0, [r5, #0]
    9b90:	f00a f9f1 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9b94:	4284      	cmp	r4, r0
    9b96:	d216      	bcs.n	9bc6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9b98:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9b9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    9b9e:	f00b fc0e 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    9ba2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    9ba6:	3401      	adds	r4, #1
    9ba8:	e7ef      	b.n	9b8a <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    9baa:	9a06      	ldr	r2, [sp, #24]
    9bac:	490b      	ldr	r1, [pc, #44]	; (9bdc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    9bae:	4618      	mov	r0, r3
    9bb0:	f00c f980 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9bb4:	2001      	movs	r0, #1
    9bb6:	e00e      	b.n	9bd6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    9bb8:	9a06      	ldr	r2, [sp, #24]
    9bba:	4909      	ldr	r1, [pc, #36]	; (9be0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    9bbc:	4620      	mov	r0, r4
    9bbe:	f00c f979 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9bc2:	2001      	movs	r0, #1
    9bc4:	e007      	b.n	9bd6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    9bc6:	4b07      	ldr	r3, [pc, #28]	; (9be4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    9bc8:	4a07      	ldr	r2, [pc, #28]	; (9be8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    9bca:	f44f 7183 	mov.w	r1, #262	; 0x106
    9bce:	4807      	ldr	r0, [pc, #28]	; (9bec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    9bd0:	f008 ff64 	bl	12a9c <__assert_func>
  return kTfLiteOk;
    9bd4:	2000      	movs	r0, #0
}
    9bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bda:	bf00      	nop
    9bdc:	00034364 	.word	0x00034364
    9be0:	00034394 	.word	0x00034394
    9be4:	00032664 	.word	0x00032664
    9be8:	00032670 	.word	0x00032670
    9bec:	00032730 	.word	0x00032730

00009bf0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bf4:	b084      	sub	sp, #16
    9bf6:	4604      	mov	r4, r0
    9bf8:	4688      	mov	r8, r1
    9bfa:	4615      	mov	r5, r2
    9bfc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9bfe:	f00c f94b 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9c02:	682b      	ldr	r3, [r5, #0]
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	2204      	movs	r2, #4
    9c08:	2124      	movs	r1, #36	; 0x24
    9c0a:	4628      	mov	r0, r5
    9c0c:	4798      	blx	r3
    return new (allocated_memory) T();
    9c0e:	4606      	mov	r6, r0
    9c10:	b118      	cbz	r0, 9c1a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9c12:	2224      	movs	r2, #36	; 0x24
    9c14:	2100      	movs	r1, #0
    9c16:	f00e ff71 	bl	18afc <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    9c1a:	9502      	str	r5, [sp, #8]
    9c1c:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9c1e:	b336      	cbz	r6, 9c6e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9c20:	4620      	mov	r0, r4
    9c22:	f00b fbcd 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c26:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c28:	4628      	mov	r0, r5
    9c2a:	f00b fbcf 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c2e:	280a      	cmp	r0, #10
    9c30:	d92a      	bls.n	9c88 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9c32:	f105 000a 	add.w	r0, r5, #10
    9c36:	f00b fbc9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c3a:	b338      	cbz	r0, 9c8c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9c3c:	4420      	add	r0, r4
    9c3e:	f00b fc8e 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9c42:	2811      	cmp	r0, #17
    9c44:	d128      	bne.n	9c98 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9c46:	4620      	mov	r0, r4
    9c48:	f00b fbba 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c4c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c4e:	4628      	mov	r0, r5
    9c50:	f00b fbbc 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c54:	280c      	cmp	r0, #12
    9c56:	d91b      	bls.n	9c90 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9c58:	f105 000c 	add.w	r0, r5, #12
    9c5c:	f00b fbb6 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9c60:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c62:	b1b8      	cbz	r0, 9c94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9c64:	4620      	mov	r0, r4
    9c66:	f00b fba5 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9c6a:	4404      	add	r4, r0
    9c6c:	e015      	b.n	9c9a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9c6e:	4b26      	ldr	r3, [pc, #152]	; (9d08 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9c70:	9301      	str	r3, [sp, #4]
    9c72:	f240 63c3 	movw	r3, #1731	; 0x6c3
    9c76:	9300      	str	r3, [sp, #0]
    9c78:	4b24      	ldr	r3, [pc, #144]	; (9d0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    9c7a:	4a25      	ldr	r2, [pc, #148]	; (9d10 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    9c7c:	4641      	mov	r1, r8
    9c7e:	4640      	mov	r0, r8
    9c80:	f00c f927 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9c84:	2501      	movs	r5, #1
    9c86:	e030      	b.n	9cea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c88:	2000      	movs	r0, #0
    9c8a:	e7d6      	b.n	9c3a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c8c:	2000      	movs	r0, #0
    9c8e:	e7d8      	b.n	9c42 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c90:	2000      	movs	r0, #0
    9c92:	e7e5      	b.n	9c60 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c94:	2400      	movs	r4, #0
    9c96:	e000      	b.n	9c9a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9c98:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    9c9a:	b314      	cbz	r4, 9ce2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    9c9c:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9c9e:	4620      	mov	r0, r4
    9ca0:	f00b fb8e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ca4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ca6:	4620      	mov	r0, r4
    9ca8:	f00b fb90 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cac:	2804      	cmp	r0, #4
    9cae:	d926      	bls.n	9cfe <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    9cb0:	1d20      	adds	r0, r4, #4
    9cb2:	f00b fb8b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9cb6:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9cb8:	b318      	cbz	r0, 9d02 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    9cba:	4628      	mov	r0, r5
    9cbc:	f00b fb7a 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9cc0:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    9cc2:	b174      	cbz	r4, 9ce2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    9cc4:	4b13      	ldr	r3, [pc, #76]	; (9d14 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    9cc6:	9300      	str	r3, [sp, #0]
    9cc8:	4643      	mov	r3, r8
    9cca:	4632      	mov	r2, r6
    9ccc:	4621      	mov	r1, r4
    9cce:	2020      	movs	r0, #32
    9cd0:	f7ff ff4c 	bl	9b6c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    9cd4:	4605      	mov	r5, r0
    9cd6:	b940      	cbnz	r0, 9cea <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    9cd8:	6820      	ldr	r0, [r4, #0]
    9cda:	f00a f94c 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9cde:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    9ce0:	6218      	str	r0, [r3, #32]
    9ce2:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    9ce4:	2500      	movs	r5, #0
    9ce6:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    9ce8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9cea:	9903      	ldr	r1, [sp, #12]
    9cec:	b119      	cbz	r1, 9cf6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9cee:	9802      	ldr	r0, [sp, #8]
    9cf0:	6803      	ldr	r3, [r0, #0]
    9cf2:	685b      	ldr	r3, [r3, #4]
    9cf4:	4798      	blx	r3
  return kTfLiteOk;
}
    9cf6:	4628      	mov	r0, r5
    9cf8:	b004      	add	sp, #16
    9cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cfe:	2000      	movs	r0, #0
    9d00:	e7d9      	b.n	9cb6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9d02:	2400      	movs	r4, #0
    9d04:	e7dd      	b.n	9cc2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9d06:	bf00      	nop
    9d08:	00034430 	.word	0x00034430
    9d0c:	000343d8 	.word	0x000343d8
    9d10:	00033f14 	.word	0x00033f14
    9d14:	00034444 	.word	0x00034444

00009d18 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
    9d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d1c:	b084      	sub	sp, #16
    9d1e:	4604      	mov	r4, r0
    9d20:	4688      	mov	r8, r1
    9d22:	4616      	mov	r6, r2
    9d24:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9d26:	f00c f8b7 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9d2a:	6833      	ldr	r3, [r6, #0]
    9d2c:	681b      	ldr	r3, [r3, #0]
    9d2e:	2201      	movs	r2, #1
    9d30:	2102      	movs	r1, #2
    9d32:	4630      	mov	r0, r6
    9d34:	4798      	blx	r3
    return new (allocated_memory) T();
    9d36:	4605      	mov	r5, r0
    9d38:	b110      	cbz	r0, 9d40 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x28>
    9d3a:	2300      	movs	r3, #0
    9d3c:	7003      	strb	r3, [r0, #0]
    9d3e:	7043      	strb	r3, [r0, #1]
    9d40:	9602      	str	r6, [sp, #8]
    9d42:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9d44:	b335      	cbz	r5, 9d94 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>
    return data_ - ReadScalar<soffset_t>(data_);
    9d46:	4620      	mov	r0, r4
    9d48:	f00b fb3a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d4c:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d4e:	4630      	mov	r0, r6
    9d50:	f00b fb3c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d54:	280a      	cmp	r0, #10
    9d56:	d92a      	bls.n	9dae <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x96>
    9d58:	f106 000a 	add.w	r0, r6, #10
    9d5c:	f00b fb36 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d60:	b338      	cbz	r0, 9db2 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9a>
    9d62:	4420      	add	r0, r4
    9d64:	f00b fbfb 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
    9d68:	280b      	cmp	r0, #11
    9d6a:	d128      	bne.n	9dbe <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    return data_ - ReadScalar<soffset_t>(data_);
    9d6c:	4620      	mov	r0, r4
    9d6e:	f00b fb27 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d72:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d74:	4630      	mov	r0, r6
    9d76:	f00b fb29 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d7a:	280c      	cmp	r0, #12
    9d7c:	d91b      	bls.n	9db6 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9d7e:	f106 000c 	add.w	r0, r6, #12
    9d82:	f00b fb23 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9d86:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9d88:	b1b8      	cbz	r0, 9dba <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9d8a:	4620      	mov	r0, r4
    9d8c:	f00b fb12 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9d90:	4404      	add	r4, r0
    9d92:	e015      	b.n	9dc0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9d94:	4b2a      	ldr	r3, [pc, #168]	; (9e40 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x128>)
    9d96:	9301      	str	r3, [sp, #4]
    9d98:	f240 33a5 	movw	r3, #933	; 0x3a5
    9d9c:	9300      	str	r3, [sp, #0]
    9d9e:	4b29      	ldr	r3, [pc, #164]	; (9e44 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
    9da0:	4a29      	ldr	r2, [pc, #164]	; (9e48 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
    9da2:	4641      	mov	r1, r8
    9da4:	4640      	mov	r0, r8
    9da6:	f00c f894 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9daa:	2401      	movs	r4, #1
    9dac:	e035      	b.n	9e1a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dae:	2000      	movs	r0, #0
    9db0:	e7d6      	b.n	9d60 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9db2:	2000      	movs	r0, #0
    9db4:	e7d8      	b.n	9d68 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9db6:	2000      	movs	r0, #0
    9db8:	e7e5      	b.n	9d86 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9dba:	2400      	movs	r4, #0
    9dbc:	e000      	b.n	9dc0 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    9dbe:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9dc0:	b344      	cbz	r4, 9e14 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfc>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9dc2:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9dc4:	4620      	mov	r0, r4
    9dc6:	f00b fafb 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9dca:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9dcc:	4620      	mov	r0, r4
    9dce:	f00b fafd 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dd2:	2804      	cmp	r0, #4
    9dd4:	d92b      	bls.n	9e2e <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x116>
    9dd6:	1d20      	adds	r0, r4, #4
    9dd8:	f00b faf8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ddc:	b348      	cbz	r0, 9e32 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    9dde:	4430      	add	r0, r6
    9de0:	f00b fafa 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9de4:	b2c0      	uxtb	r0, r0
    9de6:	f00c f844 	bl	15e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9dea:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    9dec:	4630      	mov	r0, r6
    9dee:	f00b fae7 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9df2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9df4:	4620      	mov	r0, r4
    9df6:	f00b fae9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dfa:	2806      	cmp	r0, #6
    9dfc:	d91b      	bls.n	9e36 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
    9dfe:	1da0      	adds	r0, r4, #6
    9e00:	f00b fae4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e04:	b1c8      	cbz	r0, 9e3a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    9e06:	4430      	add	r0, r6
    9e08:	f00b fba9 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
    9e0c:	3800      	subs	r0, #0
    9e0e:	bf18      	it	ne
    9e10:	2001      	movne	r0, #1
    params->pot_scale_int16 = schema_params->pot_scale_int16();
    9e12:	7068      	strb	r0, [r5, #1]
	_M_t._M_ptr() = pointer();
    9e14:	2400      	movs	r4, #0
    9e16:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9e18:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    9e1a:	9903      	ldr	r1, [sp, #12]
    9e1c:	b119      	cbz	r1, 9e26 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9e1e:	9802      	ldr	r0, [sp, #8]
    9e20:	6803      	ldr	r3, [r0, #0]
    9e22:	685b      	ldr	r3, [r3, #4]
    9e24:	4798      	blx	r3
}
    9e26:	4620      	mov	r0, r4
    9e28:	b004      	add	sp, #16
    9e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e2e:	2000      	movs	r0, #0
    9e30:	e7d4      	b.n	9ddc <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e32:	2000      	movs	r0, #0
    9e34:	e7d6      	b.n	9de4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e36:	2000      	movs	r0, #0
    9e38:	e7e4      	b.n	9e04 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e3a:	2001      	movs	r0, #1
    9e3c:	e7e6      	b.n	9e0c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    9e3e:	bf00      	nop
    9e40:	00034430 	.word	0x00034430
    9e44:	000343d8 	.word	0x000343d8
    9e48:	00033f14 	.word	0x00033f14

00009e4c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    9e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e50:	b084      	sub	sp, #16
    9e52:	4604      	mov	r4, r0
    9e54:	4688      	mov	r8, r1
    9e56:	4615      	mov	r5, r2
    9e58:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9e5a:	f00c f81d 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9e5e:	682b      	ldr	r3, [r5, #0]
    9e60:	681b      	ldr	r3, [r3, #0]
    9e62:	2204      	movs	r2, #4
    9e64:	2128      	movs	r1, #40	; 0x28
    9e66:	4628      	mov	r0, r5
    9e68:	4798      	blx	r3
    return new (allocated_memory) T();
    9e6a:	4607      	mov	r7, r0
    9e6c:	b118      	cbz	r0, 9e76 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9e6e:	2228      	movs	r2, #40	; 0x28
    9e70:	2100      	movs	r1, #0
    9e72:	f00e fe43 	bl	18afc <memset>
    9e76:	9502      	str	r5, [sp, #8]
    9e78:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9e7a:	b337      	cbz	r7, 9eca <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9e7c:	4620      	mov	r0, r4
    9e7e:	f00b fa9f 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e82:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e84:	4628      	mov	r0, r5
    9e86:	f00b faa1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e8a:	280a      	cmp	r0, #10
    9e8c:	d92a      	bls.n	9ee4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9e8e:	f105 000a 	add.w	r0, r5, #10
    9e92:	f00b fa9b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e96:	b338      	cbz	r0, 9ee8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9e98:	4420      	add	r0, r4
    9e9a:	f00b fb60 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    9e9e:	2805      	cmp	r0, #5
    9ea0:	d128      	bne.n	9ef4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9ea2:	4620      	mov	r0, r4
    9ea4:	f00b fa8c 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ea8:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9eaa:	4628      	mov	r0, r5
    9eac:	f00b fa8e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eb0:	280c      	cmp	r0, #12
    9eb2:	d91b      	bls.n	9eec <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9eb4:	f105 000c 	add.w	r0, r5, #12
    9eb8:	f00b fa88 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9ebc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ebe:	b1b8      	cbz	r0, 9ef0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9ec0:	4620      	mov	r0, r4
    9ec2:	f00b fa77 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9ec6:	4404      	add	r4, r0
    9ec8:	e015      	b.n	9ef6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9eca:	4b5b      	ldr	r3, [pc, #364]	; (a038 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    9ecc:	9301      	str	r3, [sp, #4]
    9ece:	f240 6361 	movw	r3, #1633	; 0x661
    9ed2:	9300      	str	r3, [sp, #0]
    9ed4:	4b59      	ldr	r3, [pc, #356]	; (a03c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9ed6:	4a5a      	ldr	r2, [pc, #360]	; (a040 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9ed8:	4641      	mov	r1, r8
    9eda:	4640      	mov	r0, r8
    9edc:	f00b fff9 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9ee0:	2401      	movs	r4, #1
    9ee2:	e086      	b.n	9ff2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ee4:	2000      	movs	r0, #0
    9ee6:	e7d6      	b.n	9e96 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ee8:	2000      	movs	r0, #0
    9eea:	e7d8      	b.n	9e9e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eec:	2000      	movs	r0, #0
    9eee:	e7e5      	b.n	9ebc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ef0:	2400      	movs	r4, #0
    9ef2:	e000      	b.n	9ef6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9ef4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9ef6:	2c00      	cmp	r4, #0
    9ef8:	d077      	beq.n	9fea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9efa:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9efc:	4620      	mov	r0, r4
    9efe:	f00b fa5f 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f02:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f04:	4620      	mov	r0, r4
    9f06:	f00b fa61 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f0a:	2804      	cmp	r0, #4
    9f0c:	d97b      	bls.n	a006 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    9f0e:	1d20      	adds	r0, r4, #4
    9f10:	f00b fa5c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f14:	2800      	cmp	r0, #0
    9f16:	d078      	beq.n	a00a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    9f18:	4428      	add	r0, r5
    9f1a:	f00b fa5d 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9f1e:	b2c0      	uxtb	r0, r0
    9f20:	f00b ffb1 	bl	15e86 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9f24:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9f26:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f28:	4628      	mov	r0, r5
    9f2a:	f00b fa49 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f2e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f30:	4620      	mov	r0, r4
    9f32:	f00b fa4b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f36:	2806      	cmp	r0, #6
    9f38:	d969      	bls.n	a00e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9f3a:	1da0      	adds	r0, r4, #6
    9f3c:	f00b fa46 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f40:	2800      	cmp	r0, #0
    9f42:	d066      	beq.n	a012 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9f44:	4428      	add	r0, r5
    9f46:	f00b fa3b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9f4a:	6078      	str	r0, [r7, #4]
    9f4c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f4e:	4628      	mov	r0, r5
    9f50:	f00b fa36 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f54:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f56:	4638      	mov	r0, r7
    9f58:	f00b fa38 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f5c:	2808      	cmp	r0, #8
    9f5e:	d95a      	bls.n	a016 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9f60:	f107 0008 	add.w	r0, r7, #8
    9f64:	f00b fa32 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f68:	2800      	cmp	r0, #0
    9f6a:	d056      	beq.n	a01a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9f6c:	4428      	add	r0, r5
    9f6e:	f00b fa27 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9f72:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9f74:	4628      	mov	r0, r5
    9f76:	f00b fa23 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f7a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f7c:	4638      	mov	r0, r7
    9f7e:	f00b fa25 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f82:	280a      	cmp	r0, #10
    9f84:	d94b      	bls.n	a01e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9f86:	f107 000a 	add.w	r0, r7, #10
    9f8a:	f00b fa1f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f8e:	2800      	cmp	r0, #0
    9f90:	d047      	beq.n	a022 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9f92:	4428      	add	r0, r5
    9f94:	f00b fa14 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9f98:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f9a:	4628      	mov	r0, r5
    9f9c:	f00b fa10 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fa0:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fa2:	4638      	mov	r0, r7
    9fa4:	f00b fa12 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fa8:	280c      	cmp	r0, #12
    9faa:	d93c      	bls.n	a026 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9fac:	f107 000c 	add.w	r0, r7, #12
    9fb0:	f00b fa0c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fb4:	2800      	cmp	r0, #0
    9fb6:	d038      	beq.n	a02a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9fb8:	4428      	add	r0, r5
    9fba:	f00b fa01 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9fbe:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9fc0:	4628      	mov	r0, r5
    9fc2:	f00b f9fd 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fc6:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fc8:	4638      	mov	r0, r7
    9fca:	f00b f9ff 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fce:	280e      	cmp	r0, #14
    9fd0:	d92d      	bls.n	a02e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9fd2:	f107 000e 	add.w	r0, r7, #14
    9fd6:	f00b f9f9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fda:	b350      	cbz	r0, a032 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9fdc:	4428      	add	r0, r5
    9fde:	f00b f9fb 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9fe2:	b2c0      	uxtb	r0, r0
    9fe4:	f00b ff45 	bl	15e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9fe8:	7520      	strb	r0, [r4, #20]
    9fea:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9fec:	2400      	movs	r4, #0
    9fee:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9ff0:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    9ff2:	9903      	ldr	r1, [sp, #12]
    9ff4:	b119      	cbz	r1, 9ffe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9ff6:	9802      	ldr	r0, [sp, #8]
    9ff8:	6803      	ldr	r3, [r0, #0]
    9ffa:	685b      	ldr	r3, [r3, #4]
    9ffc:	4798      	blx	r3
}
    9ffe:	4620      	mov	r0, r4
    a000:	b004      	add	sp, #16
    a002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a006:	2000      	movs	r0, #0
    a008:	e784      	b.n	9f14 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a00a:	2000      	movs	r0, #0
    a00c:	e787      	b.n	9f1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a00e:	2000      	movs	r0, #0
    a010:	e796      	b.n	9f40 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a012:	2000      	movs	r0, #0
    a014:	e799      	b.n	9f4a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a016:	2000      	movs	r0, #0
    a018:	e7a6      	b.n	9f68 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a01a:	2000      	movs	r0, #0
    a01c:	e7a9      	b.n	9f72 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a01e:	2000      	movs	r0, #0
    a020:	e7b5      	b.n	9f8e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a022:	2000      	movs	r0, #0
    a024:	e7b8      	b.n	9f98 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a026:	2000      	movs	r0, #0
    a028:	e7c4      	b.n	9fb4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a02a:	2000      	movs	r0, #0
    a02c:	e7c7      	b.n	9fbe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a02e:	2000      	movs	r0, #0
    a030:	e7d3      	b.n	9fda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a032:	2000      	movs	r0, #0
    a034:	e7d5      	b.n	9fe2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    a036:	bf00      	nop
    a038:	00034430 	.word	0x00034430
    a03c:	000343d8 	.word	0x000343d8
    a040:	00033f14 	.word	0x00033f14

0000a044 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a048:	b084      	sub	sp, #16
    a04a:	4604      	mov	r4, r0
    a04c:	4688      	mov	r8, r1
    a04e:	4615      	mov	r5, r2
    a050:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a052:	f00b ff21 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a056:	682b      	ldr	r3, [r5, #0]
    a058:	681b      	ldr	r3, [r3, #0]
    a05a:	2204      	movs	r2, #4
    a05c:	2118      	movs	r1, #24
    a05e:	4628      	mov	r0, r5
    a060:	4798      	blx	r3
    return new (allocated_memory) T();
    a062:	4606      	mov	r6, r0
    a064:	b130      	cbz	r0, a074 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    a066:	2300      	movs	r3, #0
    a068:	6003      	str	r3, [r0, #0]
    a06a:	6043      	str	r3, [r0, #4]
    a06c:	6083      	str	r3, [r0, #8]
    a06e:	60c3      	str	r3, [r0, #12]
    a070:	6103      	str	r3, [r0, #16]
    a072:	6143      	str	r3, [r0, #20]
    a074:	9502      	str	r5, [sp, #8]
    a076:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a078:	b336      	cbz	r6, a0c8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    a07a:	4620      	mov	r0, r4
    a07c:	f00b f9a0 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a080:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a082:	4628      	mov	r0, r5
    a084:	f00b f9a2 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a088:	280a      	cmp	r0, #10
    a08a:	d92a      	bls.n	a0e2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    a08c:	f105 000a 	add.w	r0, r5, #10
    a090:	f00b f99c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a094:	b338      	cbz	r0, a0e6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    a096:	4420      	add	r0, r4
    a098:	f00b fa61 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    a09c:	2801      	cmp	r0, #1
    a09e:	d128      	bne.n	a0f2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    a0a0:	4620      	mov	r0, r4
    a0a2:	f00b f98d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a0a6:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a0a8:	4628      	mov	r0, r5
    a0aa:	f00b f98f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0ae:	280c      	cmp	r0, #12
    a0b0:	d91b      	bls.n	a0ea <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a0b2:	f105 000c 	add.w	r0, r5, #12
    a0b6:	f00b f989 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a0ba:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a0bc:	b1b8      	cbz	r0, a0ee <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    a0be:	4620      	mov	r0, r4
    a0c0:	f00b f978 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a0c4:	4404      	add	r4, r0
    a0c6:	e015      	b.n	a0f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    a0c8:	4b5a      	ldr	r3, [pc, #360]	; (a234 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    a0ca:	9301      	str	r3, [sp, #4]
    a0cc:	f240 434d 	movw	r3, #1101	; 0x44d
    a0d0:	9300      	str	r3, [sp, #0]
    a0d2:	4b59      	ldr	r3, [pc, #356]	; (a238 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    a0d4:	4a59      	ldr	r2, [pc, #356]	; (a23c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    a0d6:	4641      	mov	r1, r8
    a0d8:	4640      	mov	r0, r8
    a0da:	f00b fefa 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a0de:	2401      	movs	r4, #1
    a0e0:	e086      	b.n	a1f0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0e2:	2000      	movs	r0, #0
    a0e4:	e7d6      	b.n	a094 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0e6:	2000      	movs	r0, #0
    a0e8:	e7d8      	b.n	a09c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0ea:	2000      	movs	r0, #0
    a0ec:	e7e5      	b.n	a0ba <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a0ee:	2400      	movs	r4, #0
    a0f0:	e000      	b.n	a0f4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    a0f2:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a0f4:	2c00      	cmp	r4, #0
    a0f6:	d077      	beq.n	a1e8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a0f8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a0fa:	4620      	mov	r0, r4
    a0fc:	f00b f960 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a100:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a102:	4620      	mov	r0, r4
    a104:	f00b f962 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a108:	2804      	cmp	r0, #4
    a10a:	d97b      	bls.n	a204 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    a10c:	1d20      	adds	r0, r4, #4
    a10e:	f00b f95d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a112:	2800      	cmp	r0, #0
    a114:	d078      	beq.n	a208 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    a116:	4428      	add	r0, r5
    a118:	f00b f95e 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a11c:	b2c0      	uxtb	r0, r0
    a11e:	f00b feb2 	bl	15e86 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a122:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a124:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a126:	4628      	mov	r0, r5
    a128:	f00b f94a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a12c:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a12e:	4620      	mov	r0, r4
    a130:	f00b f94c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a134:	2806      	cmp	r0, #6
    a136:	d969      	bls.n	a20c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    a138:	1da0      	adds	r0, r4, #6
    a13a:	f00b f947 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a13e:	2800      	cmp	r0, #0
    a140:	d066      	beq.n	a210 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    a142:	4428      	add	r0, r5
    a144:	f00b f93c 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a148:	6070      	str	r0, [r6, #4]
    a14a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a14c:	4628      	mov	r0, r5
    a14e:	f00b f937 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a152:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a154:	4630      	mov	r0, r6
    a156:	f00b f939 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a15a:	2808      	cmp	r0, #8
    a15c:	d95a      	bls.n	a214 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a15e:	f106 0008 	add.w	r0, r6, #8
    a162:	f00b f933 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a166:	2800      	cmp	r0, #0
    a168:	d056      	beq.n	a218 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    a16a:	4428      	add	r0, r5
    a16c:	f00b f928 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a170:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a172:	4628      	mov	r0, r5
    a174:	f00b f924 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a178:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a17a:	4630      	mov	r0, r6
    a17c:	f00b f926 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a180:	280a      	cmp	r0, #10
    a182:	d94b      	bls.n	a21c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    a184:	f106 000a 	add.w	r0, r6, #10
    a188:	f00b f920 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a18c:	2800      	cmp	r0, #0
    a18e:	d047      	beq.n	a220 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    a190:	4428      	add	r0, r5
    a192:	f00b f921 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a196:	b2c0      	uxtb	r0, r0
    a198:	f00b fe6b 	bl	15e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a19c:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a19e:	4628      	mov	r0, r5
    a1a0:	f00b f90e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1a4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1a6:	4630      	mov	r0, r6
    a1a8:	f00b f910 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1ac:	280c      	cmp	r0, #12
    a1ae:	d939      	bls.n	a224 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    a1b0:	f106 000c 	add.w	r0, r6, #12
    a1b4:	f00b f90a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1b8:	2800      	cmp	r0, #0
    a1ba:	d035      	beq.n	a228 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    a1bc:	4428      	add	r0, r5
    a1be:	f00b f8ff 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a1c2:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a1c4:	4628      	mov	r0, r5
    a1c6:	f00b f8fb 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1ca:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1cc:	4630      	mov	r0, r6
    a1ce:	f00b f8fd 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1d2:	280e      	cmp	r0, #14
    a1d4:	d92a      	bls.n	a22c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    a1d6:	f106 000e 	add.w	r0, r6, #14
    a1da:	f00b f8f7 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1de:	b338      	cbz	r0, a230 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    a1e0:	4428      	add	r0, r5
    a1e2:	f00b f8ed 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a1e6:	6160      	str	r0, [r4, #20]
    a1e8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a1ea:	2400      	movs	r4, #0
    a1ec:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a1ee:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a1f0:	9903      	ldr	r1, [sp, #12]
    a1f2:	b119      	cbz	r1, a1fc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a1f4:	9802      	ldr	r0, [sp, #8]
    a1f6:	6803      	ldr	r3, [r0, #0]
    a1f8:	685b      	ldr	r3, [r3, #4]
    a1fa:	4798      	blx	r3
}
    a1fc:	4620      	mov	r0, r4
    a1fe:	b004      	add	sp, #16
    a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a204:	2000      	movs	r0, #0
    a206:	e784      	b.n	a112 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a208:	2000      	movs	r0, #0
    a20a:	e787      	b.n	a11c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a20c:	2000      	movs	r0, #0
    a20e:	e796      	b.n	a13e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a210:	2000      	movs	r0, #0
    a212:	e799      	b.n	a148 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a214:	2000      	movs	r0, #0
    a216:	e7a6      	b.n	a166 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a218:	2000      	movs	r0, #0
    a21a:	e7a9      	b.n	a170 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a21c:	2000      	movs	r0, #0
    a21e:	e7b5      	b.n	a18c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a220:	2000      	movs	r0, #0
    a222:	e7b8      	b.n	a196 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a224:	2000      	movs	r0, #0
    a226:	e7c7      	b.n	a1b8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a228:	2001      	movs	r0, #1
    a22a:	e7ca      	b.n	a1c2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a22c:	2000      	movs	r0, #0
    a22e:	e7d6      	b.n	a1de <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a230:	2001      	movs	r0, #1
    a232:	e7d8      	b.n	a1e6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    a234:	00034430 	.word	0x00034430
    a238:	000343d8 	.word	0x000343d8
    a23c:	00033f14 	.word	0x00033f14

0000a240 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a244:	b084      	sub	sp, #16
    a246:	4604      	mov	r4, r0
    a248:	4688      	mov	r8, r1
    a24a:	4616      	mov	r6, r2
    a24c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a24e:	f00b fe23 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a252:	6833      	ldr	r3, [r6, #0]
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	2201      	movs	r2, #1
    a258:	2104      	movs	r1, #4
    a25a:	4630      	mov	r0, r6
    a25c:	4798      	blx	r3
    return new (allocated_memory) T();
    a25e:	4605      	mov	r5, r0
    a260:	b108      	cbz	r0, a266 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a262:	2300      	movs	r3, #0
    a264:	6003      	str	r3, [r0, #0]
    a266:	9602      	str	r6, [sp, #8]
    a268:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a26a:	b305      	cbz	r5, a2ae <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    a26c:	4620      	mov	r0, r4
    a26e:	f00b f8a7 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a272:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a274:	4630      	mov	r0, r6
    a276:	f00b f8a9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a27a:	280a      	cmp	r0, #10
    a27c:	d924      	bls.n	a2c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    a27e:	f106 000a 	add.w	r0, r6, #10
    a282:	f00b f8a3 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a286:	b308      	cbz	r0, a2cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    a288:	4420      	add	r0, r4
    a28a:	f00b f968 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    a28e:	2808      	cmp	r0, #8
    a290:	d128      	bne.n	a2e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a292:	4620      	mov	r0, r4
    a294:	f00b f894 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a298:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a29a:	4630      	mov	r0, r6
    a29c:	f00b f896 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2a0:	280c      	cmp	r0, #12
    a2a2:	d915      	bls.n	a2d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    a2a4:	f106 000c 	add.w	r0, r6, #12
    a2a8:	f00b f890 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a2ac:	e011      	b.n	a2d2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    a2ae:	4b4c      	ldr	r3, [pc, #304]	; (a3e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    a2b0:	9301      	str	r3, [sp, #4]
    a2b2:	f240 531d 	movw	r3, #1309	; 0x51d
    a2b6:	9300      	str	r3, [sp, #0]
    a2b8:	4b4a      	ldr	r3, [pc, #296]	; (a3e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    a2ba:	4a4b      	ldr	r2, [pc, #300]	; (a3e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    a2bc:	4641      	mov	r1, r8
    a2be:	4640      	mov	r0, r8
    a2c0:	f00b fe07 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a2c4:	2401      	movs	r4, #1
    a2c6:	e07d      	b.n	a3c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    a2c8:	2000      	movs	r0, #0
    a2ca:	e7dc      	b.n	a286 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2cc:	2000      	movs	r0, #0
    a2ce:	e7de      	b.n	a28e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2d0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    a2d2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a2d4:	b120      	cbz	r0, a2e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a2d6:	4620      	mov	r0, r4
    a2d8:	f00b f86c 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a2dc:	4404      	add	r4, r0
    a2de:	e002      	b.n	a2e6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a2e0:	2400      	movs	r4, #0
    a2e2:	e000      	b.n	a2e6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a2e4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a2e6:	2c00      	cmp	r4, #0
    a2e8:	d069      	beq.n	a3be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    a2ea:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a2ec:	4620      	mov	r0, r4
    a2ee:	f00b f867 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2f2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2f4:	4620      	mov	r0, r4
    a2f6:	f00b f869 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2fa:	2804      	cmp	r0, #4
    a2fc:	d903      	bls.n	a306 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    a2fe:	1d20      	adds	r0, r4, #4
    a300:	f00b f864 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a304:	e000      	b.n	a308 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    a306:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a308:	b118      	cbz	r0, a312 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    a30a:	4430      	add	r0, r6
    a30c:	f00b f864 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a310:	e000      	b.n	a314 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    a312:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    a314:	b2c0      	uxtb	r0, r0
    a316:	f00b fdac 	bl	15e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a31a:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    a31c:	4630      	mov	r0, r6
    a31e:	f00b f84f 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a322:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a324:	4620      	mov	r0, r4
    a326:	f00b f851 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a32a:	2808      	cmp	r0, #8
    a32c:	d904      	bls.n	a338 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    a32e:	f104 0008 	add.w	r0, r4, #8
    a332:	f00b f84b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a336:	e000      	b.n	a33a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    a338:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a33a:	b118      	cbz	r0, a344 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    a33c:	4430      	add	r0, r6
    a33e:	f00b f90e 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a342:	e000      	b.n	a346 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    a344:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    a346:	3800      	subs	r0, #0
    a348:	bf18      	it	ne
    a34a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    a34c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    a34e:	4630      	mov	r0, r6
    a350:	f00b f836 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a354:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a356:	4620      	mov	r0, r4
    a358:	f00b f838 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a35c:	280a      	cmp	r0, #10
    a35e:	d904      	bls.n	a36a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    a360:	f104 000a 	add.w	r0, r4, #10
    a364:	f00b f832 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a368:	e000      	b.n	a36c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    a36a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a36c:	b118      	cbz	r0, a376 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    a36e:	4430      	add	r0, r6
    a370:	f00b f8f5 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a374:	e000      	b.n	a378 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    a376:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    a378:	3800      	subs	r0, #0
    a37a:	bf18      	it	ne
    a37c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    a37e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    a380:	4630      	mov	r0, r6
    a382:	f00b f81d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a386:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a388:	4620      	mov	r0, r4
    a38a:	f00b f81f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a38e:	2806      	cmp	r0, #6
    a390:	d903      	bls.n	a39a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    a392:	1da0      	adds	r0, r4, #6
    a394:	f00b f81a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a398:	e000      	b.n	a39c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    a39a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a39c:	b118      	cbz	r0, a3a6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    a39e:	4430      	add	r0, r6
    a3a0:	f00b f81a 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a3a4:	e000      	b.n	a3a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    a3a6:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    a3a8:	b138      	cbz	r0, a3ba <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    a3aa:	2801      	cmp	r0, #1
    a3ac:	d014      	beq.n	a3d8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    a3ae:	490f      	ldr	r1, [pc, #60]	; (a3ec <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    a3b0:	4640      	mov	r0, r8
    a3b2:	f00b fd7f 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    a3b6:	2401      	movs	r4, #1
    a3b8:	e004      	b.n	a3c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    a3ba:	2300      	movs	r3, #0
    a3bc:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    a3be:	2400      	movs	r4, #0
    a3c0:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a3c2:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    a3c4:	9903      	ldr	r1, [sp, #12]
    a3c6:	b119      	cbz	r1, a3d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a3c8:	9802      	ldr	r0, [sp, #8]
    a3ca:	6803      	ldr	r3, [r0, #0]
    a3cc:	685b      	ldr	r3, [r3, #4]
    a3ce:	4798      	blx	r3
}
    a3d0:	4620      	mov	r0, r4
    a3d2:	b004      	add	sp, #16
    a3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    a3d8:	2301      	movs	r3, #1
    a3da:	706b      	strb	r3, [r5, #1]
        break;
    a3dc:	e7ef      	b.n	a3be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    a3de:	bf00      	nop
    a3e0:	00034430 	.word	0x00034430
    a3e4:	000343d8 	.word	0x000343d8
    a3e8:	00033f14 	.word	0x00033f14
    a3ec:	0003444c 	.word	0x0003444c

0000a3f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    a3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3f4:	b084      	sub	sp, #16
    a3f6:	4604      	mov	r4, r0
    a3f8:	4688      	mov	r8, r1
    a3fa:	4615      	mov	r5, r2
    a3fc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a3fe:	f00b fd4b 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a402:	682b      	ldr	r3, [r5, #0]
    a404:	681b      	ldr	r3, [r3, #0]
    a406:	2204      	movs	r2, #4
    a408:	211c      	movs	r1, #28
    a40a:	4628      	mov	r0, r5
    a40c:	4798      	blx	r3
    return new (allocated_memory) T();
    a40e:	4606      	mov	r6, r0
    a410:	b138      	cbz	r0, a422 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    a412:	2300      	movs	r3, #0
    a414:	6003      	str	r3, [r0, #0]
    a416:	6043      	str	r3, [r0, #4]
    a418:	6083      	str	r3, [r0, #8]
    a41a:	60c3      	str	r3, [r0, #12]
    a41c:	6103      	str	r3, [r0, #16]
    a41e:	6143      	str	r3, [r0, #20]
    a420:	6183      	str	r3, [r0, #24]
    a422:	9502      	str	r5, [sp, #8]
    a424:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a426:	b336      	cbz	r6, a476 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    a428:	4620      	mov	r0, r4
    a42a:	f00a ffc9 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a42e:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a430:	4628      	mov	r0, r5
    a432:	f00a ffcb 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a436:	280a      	cmp	r0, #10
    a438:	d92a      	bls.n	a490 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a43a:	f105 000a 	add.w	r0, r5, #10
    a43e:	f00a ffc5 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a442:	b338      	cbz	r0, a494 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    a444:	4420      	add	r0, r4
    a446:	f00b f88a 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    a44a:	2802      	cmp	r0, #2
    a44c:	d128      	bne.n	a4a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    a44e:	4620      	mov	r0, r4
    a450:	f00a ffb6 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a454:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a456:	4628      	mov	r0, r5
    a458:	f00a ffb8 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a45c:	280c      	cmp	r0, #12
    a45e:	d91b      	bls.n	a498 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    a460:	f105 000c 	add.w	r0, r5, #12
    a464:	f00a ffb2 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a468:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a46a:	b1b8      	cbz	r0, a49c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    a46c:	4620      	mov	r0, r4
    a46e:	f00a ffa1 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a472:	4404      	add	r4, r0
    a474:	e015      	b.n	a4a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a476:	4b68      	ldr	r3, [pc, #416]	; (a618 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    a478:	9301      	str	r3, [sp, #4]
    a47a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    a47e:	9300      	str	r3, [sp, #0]
    a480:	4b66      	ldr	r3, [pc, #408]	; (a61c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    a482:	4a67      	ldr	r2, [pc, #412]	; (a620 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    a484:	4641      	mov	r1, r8
    a486:	4640      	mov	r0, r8
    a488:	f00b fd23 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a48c:	2401      	movs	r4, #1
    a48e:	e09c      	b.n	a5ca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a490:	2000      	movs	r0, #0
    a492:	e7d6      	b.n	a442 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a494:	2000      	movs	r0, #0
    a496:	e7d8      	b.n	a44a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a498:	2000      	movs	r0, #0
    a49a:	e7e5      	b.n	a468 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a49c:	2400      	movs	r4, #0
    a49e:	e000      	b.n	a4a2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a4a0:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a4a2:	2c00      	cmp	r4, #0
    a4a4:	f000 808d 	beq.w	a5c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a4a8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a4aa:	4620      	mov	r0, r4
    a4ac:	f00a ff88 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4b0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4b2:	4620      	mov	r0, r4
    a4b4:	f00a ff8a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4b8:	2804      	cmp	r0, #4
    a4ba:	f240 8090 	bls.w	a5de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    a4be:	1d20      	adds	r0, r4, #4
    a4c0:	f00a ff84 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4c4:	2800      	cmp	r0, #0
    a4c6:	f000 808c 	beq.w	a5e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    a4ca:	4428      	add	r0, r5
    a4cc:	f00a ff84 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a4d0:	b2c0      	uxtb	r0, r0
    a4d2:	f00b fcd8 	bl	15e86 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a4d6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a4d8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a4da:	4628      	mov	r0, r5
    a4dc:	f00a ff70 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4e0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4e2:	4620      	mov	r0, r4
    a4e4:	f00a ff72 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4e8:	2806      	cmp	r0, #6
    a4ea:	d97c      	bls.n	a5e6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    a4ec:	1da0      	adds	r0, r4, #6
    a4ee:	f00a ff6d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4f2:	2800      	cmp	r0, #0
    a4f4:	d079      	beq.n	a5ea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    a4f6:	4428      	add	r0, r5
    a4f8:	f00a ff62 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a4fc:	6070      	str	r0, [r6, #4]
    a4fe:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a500:	4628      	mov	r0, r5
    a502:	f00a ff5d 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a506:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a508:	4630      	mov	r0, r6
    a50a:	f00a ff5f 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a50e:	2808      	cmp	r0, #8
    a510:	d96d      	bls.n	a5ee <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    a512:	f106 0008 	add.w	r0, r6, #8
    a516:	f00a ff59 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a51a:	2800      	cmp	r0, #0
    a51c:	d069      	beq.n	a5f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    a51e:	4428      	add	r0, r5
    a520:	f00a ff4e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a524:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a526:	4628      	mov	r0, r5
    a528:	f00a ff4a 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a52c:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a52e:	4630      	mov	r0, r6
    a530:	f00a ff4c 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a534:	280a      	cmp	r0, #10
    a536:	d95e      	bls.n	a5f6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a538:	f106 000a 	add.w	r0, r6, #10
    a53c:	f00a ff46 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a540:	2800      	cmp	r0, #0
    a542:	d05a      	beq.n	a5fa <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a544:	4428      	add	r0, r5
    a546:	f00a ff3b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a54a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a54c:	4628      	mov	r0, r5
    a54e:	f00a ff37 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a552:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a554:	4630      	mov	r0, r6
    a556:	f00a ff39 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a55a:	280c      	cmp	r0, #12
    a55c:	d94f      	bls.n	a5fe <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a55e:	f106 000c 	add.w	r0, r6, #12
    a562:	f00a ff33 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a566:	2800      	cmp	r0, #0
    a568:	d04b      	beq.n	a602 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a56a:	4428      	add	r0, r5
    a56c:	f00a ff34 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a570:	b2c0      	uxtb	r0, r0
    a572:	f00b fc7e 	bl	15e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a576:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a578:	4628      	mov	r0, r5
    a57a:	f00a ff21 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a57e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a580:	4630      	mov	r0, r6
    a582:	f00a ff23 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a586:	280e      	cmp	r0, #14
    a588:	d93d      	bls.n	a606 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a58a:	f106 000e 	add.w	r0, r6, #14
    a58e:	f00a ff1d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a592:	2800      	cmp	r0, #0
    a594:	d039      	beq.n	a60a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a596:	4428      	add	r0, r5
    a598:	f00a ff12 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a59c:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a59e:	4628      	mov	r0, r5
    a5a0:	f00a ff0e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a5a4:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a5a6:	4630      	mov	r0, r6
    a5a8:	f00a ff10 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5ac:	2810      	cmp	r0, #16
    a5ae:	d92e      	bls.n	a60e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a5b0:	f106 0010 	add.w	r0, r6, #16
    a5b4:	f00a ff0a 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5b8:	b358      	cbz	r0, a612 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a5ba:	4428      	add	r0, r5
    a5bc:	f00a ff00 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a5c0:	61a0      	str	r0, [r4, #24]
    a5c2:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a5c4:	2400      	movs	r4, #0
    a5c6:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a5c8:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a5ca:	9903      	ldr	r1, [sp, #12]
    a5cc:	b119      	cbz	r1, a5d6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a5ce:	9802      	ldr	r0, [sp, #8]
    a5d0:	6803      	ldr	r3, [r0, #0]
    a5d2:	685b      	ldr	r3, [r3, #4]
    a5d4:	4798      	blx	r3
}
    a5d6:	4620      	mov	r0, r4
    a5d8:	b004      	add	sp, #16
    a5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5de:	2000      	movs	r0, #0
    a5e0:	e770      	b.n	a4c4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5e2:	2000      	movs	r0, #0
    a5e4:	e774      	b.n	a4d0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5e6:	2000      	movs	r0, #0
    a5e8:	e783      	b.n	a4f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5ea:	2000      	movs	r0, #0
    a5ec:	e786      	b.n	a4fc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5ee:	2000      	movs	r0, #0
    a5f0:	e793      	b.n	a51a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5f2:	2000      	movs	r0, #0
    a5f4:	e796      	b.n	a524 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5f6:	2000      	movs	r0, #0
    a5f8:	e7a2      	b.n	a540 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a5fa:	2000      	movs	r0, #0
    a5fc:	e7a5      	b.n	a54a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5fe:	2000      	movs	r0, #0
    a600:	e7b1      	b.n	a566 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a602:	2000      	movs	r0, #0
    a604:	e7b4      	b.n	a570 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a606:	2000      	movs	r0, #0
    a608:	e7c3      	b.n	a592 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a60a:	2001      	movs	r0, #1
    a60c:	e7c6      	b.n	a59c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a60e:	2000      	movs	r0, #0
    a610:	e7d2      	b.n	a5b8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a612:	2001      	movs	r0, #1
    a614:	e7d4      	b.n	a5c0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a616:	bf00      	nop
    a618:	00034430 	.word	0x00034430
    a61c:	000343d8 	.word	0x000343d8
    a620:	00033f14 	.word	0x00033f14

0000a624 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a628:	b084      	sub	sp, #16
    a62a:	4604      	mov	r4, r0
    a62c:	4688      	mov	r8, r1
    a62e:	4615      	mov	r5, r2
    a630:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a632:	f00b fc31 	bl	15e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a636:	682b      	ldr	r3, [r5, #0]
    a638:	681b      	ldr	r3, [r3, #0]
    a63a:	2204      	movs	r2, #4
    a63c:	4611      	mov	r1, r2
    a63e:	4628      	mov	r0, r5
    a640:	4798      	blx	r3
    return new (allocated_memory) T();
    a642:	4606      	mov	r6, r0
    a644:	b108      	cbz	r0, a64a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a646:	2300      	movs	r3, #0
    a648:	6003      	str	r3, [r0, #0]
    a64a:	9502      	str	r5, [sp, #8]
    a64c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a64e:	b336      	cbz	r6, a69e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a650:	4620      	mov	r0, r4
    a652:	f00a feb5 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a656:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a658:	4628      	mov	r0, r5
    a65a:	f00a feb7 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a65e:	280a      	cmp	r0, #10
    a660:	d92a      	bls.n	a6b8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a662:	f105 000a 	add.w	r0, r5, #10
    a666:	f00a feb1 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a66a:	b338      	cbz	r0, a6bc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a66c:	4420      	add	r0, r4
    a66e:	f00a ff76 	bl	1555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a672:	2809      	cmp	r0, #9
    a674:	d128      	bne.n	a6c8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a676:	4620      	mov	r0, r4
    a678:	f00a fea2 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a67c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a67e:	4628      	mov	r0, r5
    a680:	f00a fea4 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a684:	280c      	cmp	r0, #12
    a686:	d91b      	bls.n	a6c0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a688:	f105 000c 	add.w	r0, r5, #12
    a68c:	f00a fe9e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a690:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a692:	b1b8      	cbz	r0, a6c4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a694:	4620      	mov	r0, r4
    a696:	f00a fe8d 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a69a:	4404      	add	r4, r0
    a69c:	e015      	b.n	a6ca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a69e:	4b1d      	ldr	r3, [pc, #116]	; (a714 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a6a0:	9301      	str	r3, [sp, #4]
    a6a2:	f240 734c 	movw	r3, #1868	; 0x74c
    a6a6:	9300      	str	r3, [sp, #0]
    a6a8:	4b1b      	ldr	r3, [pc, #108]	; (a718 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a6aa:	4a1c      	ldr	r2, [pc, #112]	; (a71c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a6ac:	4641      	mov	r1, r8
    a6ae:	4640      	mov	r0, r8
    a6b0:	f00b fc0f 	bl	15ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a6b4:	2401      	movs	r4, #1
    a6b6:	e01e      	b.n	a6f6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6b8:	2000      	movs	r0, #0
    a6ba:	e7d6      	b.n	a66a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a6bc:	2000      	movs	r0, #0
    a6be:	e7d8      	b.n	a672 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6c0:	2000      	movs	r0, #0
    a6c2:	e7e5      	b.n	a690 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a6c4:	2400      	movs	r4, #0
    a6c6:	e000      	b.n	a6ca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a6c8:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a6ca:	b18c      	cbz	r4, a6f0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a6cc:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a6ce:	4620      	mov	r0, r4
    a6d0:	f00a fe76 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a6d4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a6d6:	4620      	mov	r0, r4
    a6d8:	f00a fe78 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a6dc:	2804      	cmp	r0, #4
    a6de:	d914      	bls.n	a70a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a6e0:	1d20      	adds	r0, r4, #4
    a6e2:	f00a fe73 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a6e6:	b190      	cbz	r0, a70e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a6e8:	4428      	add	r0, r5
    a6ea:	f00a ff3f 	bl	1556c <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a6ee:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a6f0:	2400      	movs	r4, #0
    a6f2:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a6f4:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a6f6:	9903      	ldr	r1, [sp, #12]
    a6f8:	b119      	cbz	r1, a702 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a6fa:	9802      	ldr	r0, [sp, #8]
    a6fc:	6803      	ldr	r3, [r0, #0]
    a6fe:	685b      	ldr	r3, [r3, #4]
    a700:	4798      	blx	r3
  return kTfLiteOk;
}
    a702:	4620      	mov	r0, r4
    a704:	b004      	add	sp, #16
    a706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a70a:	2000      	movs	r0, #0
    a70c:	e7eb      	b.n	a6e6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a70e:	2000      	movs	r0, #0
    a710:	e7ed      	b.n	a6ee <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a712:	bf00      	nop
    a714:	00034430 	.word	0x00034430
    a718:	000343d8 	.word	0x000343d8
    a71c:	00033f14 	.word	0x00033f14

0000a720 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a724:	4604      	mov	r4, r0
    a726:	4688      	mov	r8, r1
    a728:	4691      	mov	r9, r2
    a72a:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a72c:	2300      	movs	r3, #0
    a72e:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a730:	f00b fbde 	bl	15ef0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a734:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a736:	4620      	mov	r0, r4
    a738:	f00a fe42 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a73c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a73e:	4638      	mov	r0, r7
    a740:	f00a fe44 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a744:	2808      	cmp	r0, #8
    a746:	d904      	bls.n	a752 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a748:	f107 0008 	add.w	r0, r7, #8
    a74c:	f00a fe3e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a750:	e000      	b.n	a754 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a752:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a754:	b120      	cbz	r0, a760 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a756:	4420      	add	r0, r4
    a758:	f00a fe32 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a75c:	4607      	mov	r7, r0
    a75e:	e000      	b.n	a762 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a760:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a762:	2d91      	cmp	r5, #145	; 0x91
    a764:	d80d      	bhi.n	a782 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a766:	2d20      	cmp	r5, #32
    a768:	d01c      	beq.n	a7a4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a76a:	f8d8 3000 	ldr.w	r3, [r8]
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	463a      	mov	r2, r7
    a772:	4629      	mov	r1, r5
    a774:	4640      	mov	r0, r8
    a776:	4798      	blx	r3
    a778:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a77a:	b148      	cbz	r0, a790 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a77c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a782:	462a      	mov	r2, r5
    a784:	491c      	ldr	r1, [pc, #112]	; (a7f8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a786:	4648      	mov	r0, r9
    a788:	f00b fb94 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a78c:	2001      	movs	r0, #1
    a78e:	e7f6      	b.n	a77e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a790:	463b      	mov	r3, r7
    a792:	4a1a      	ldr	r2, [pc, #104]	; (a7fc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a794:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a798:	4919      	ldr	r1, [pc, #100]	; (a800 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a79a:	4648      	mov	r0, r9
    a79c:	f00b fb8a 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a7a0:	2001      	movs	r0, #1
    a7a2:	e7ec      	b.n	a77e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a7a4:	4620      	mov	r0, r4
    a7a6:	f00a fe0b 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a7aa:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a7ac:	4628      	mov	r0, r5
    a7ae:	f00a fe0d 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a7b2:	2806      	cmp	r0, #6
    a7b4:	d914      	bls.n	a7e0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a7b6:	1da8      	adds	r0, r5, #6
    a7b8:	f00a fe08 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a7bc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a7be:	b188      	cbz	r0, a7e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a7c0:	4620      	mov	r0, r4
    a7c2:	f00a fdf7 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a7c6:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a7c8:	b171      	cbz	r1, a7e8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a7ca:	f8d8 3000 	ldr.w	r3, [r8]
    a7ce:	685b      	ldr	r3, [r3, #4]
    a7d0:	463a      	mov	r2, r7
    a7d2:	3104      	adds	r1, #4
    a7d4:	4640      	mov	r0, r8
    a7d6:	4798      	blx	r3
    a7d8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a7da:	b158      	cbz	r0, a7f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a7dc:	2000      	movs	r0, #0
    a7de:	e7ce      	b.n	a77e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a7e0:	2000      	movs	r0, #0
    a7e2:	e7eb      	b.n	a7bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a7e4:	2100      	movs	r1, #0
    a7e6:	e7ef      	b.n	a7c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a7e8:	4906      	ldr	r1, [pc, #24]	; (a804 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a7ea:	4648      	mov	r0, r9
    a7ec:	f00b fb62 	bl	15eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a7f0:	2001      	movs	r0, #1
    a7f2:	e7c4      	b.n	a77e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a7f4:	2001      	movs	r0, #1
    a7f6:	e7c2      	b.n	a77e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a7f8:	00034478 	.word	0x00034478
    a7fc:	000331c0 	.word	0x000331c0
    a800:	000344cc 	.word	0x000344cc
    a804:	00034570 	.word	0x00034570

0000a808 <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
    a808:	b470      	push	{r4, r5, r6}
    a80a:	4606      	mov	r6, r0
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    a80c:	4604      	mov	r4, r0
    a80e:	4d05      	ldr	r5, [pc, #20]	; (a824 <_ZN6tflite3ops5micro12Register_ADDEv+0x1c>)
    a810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a814:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    a818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    a81c:	4630      	mov	r0, r6
    a81e:	bc70      	pop	{r4, r5, r6}
    a820:	4770      	bx	lr
    a822:	bf00      	nop
    a824:	00019a30 	.word	0x00019a30

0000a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a828:	2801      	cmp	r0, #1
    a82a:	d009      	beq.n	a840 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a82c:	2803      	cmp	r0, #3
    a82e:	d00c      	beq.n	a84a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a830:	2802      	cmp	r0, #2
    a832:	d00f      	beq.n	a854 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a834:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a838:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a83a:	4b09      	ldr	r3, [pc, #36]	; (a860 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a83c:	6013      	str	r3, [r2, #0]
  }
}
    a83e:	4770      	bx	lr
    *activation_min = 0;
    a840:	2300      	movs	r3, #0
    a842:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a844:	4b06      	ldr	r3, [pc, #24]	; (a860 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a846:	6013      	str	r3, [r2, #0]
    a848:	4770      	bx	lr
    *activation_min = 0;
    a84a:	2300      	movs	r3, #0
    a84c:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a84e:	4b05      	ldr	r3, [pc, #20]	; (a864 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a850:	6013      	str	r3, [r2, #0]
    a852:	4770      	bx	lr
    *activation_min = -1;
    a854:	4b04      	ldr	r3, [pc, #16]	; (a868 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a856:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a858:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a85c:	6013      	str	r3, [r2, #0]
    a85e:	4770      	bx	lr
    a860:	7f7fffff 	.word	0x7f7fffff
    a864:	40c00000 	.word	0x40c00000
    a868:	bf800000 	.word	0xbf800000

0000a86c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a86e:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->user_data != nullptr);
    a870:	690b      	ldr	r3, [r1, #16]
    a872:	b303      	cbz	r3, a8b6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    a874:	4605      	mov	r5, r0
    a876:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a878:	694b      	ldr	r3, [r1, #20]
    a87a:	b1f3      	cbz	r3, a8ba <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
    a87c:	2200      	movs	r2, #0
    a87e:	f00b faad 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a882:	4606      	mov	r6, r0
    a884:	b1d8      	cbz	r0, a8be <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
    a886:	2201      	movs	r2, #1
    a888:	4621      	mov	r1, r4
    a88a:	4628      	mov	r0, r5
    a88c:	f00b faa6 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a890:	4607      	mov	r7, r0
    a892:	b1f0      	cbz	r0, a8d2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    a894:	2200      	movs	r2, #0
    a896:	4621      	mov	r1, r4
    a898:	4628      	mov	r0, r5
    a89a:	f00b fabe 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    a89e:	b310      	cbz	r0, a8e6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
  OpData* data = static_cast<OpData*>(node->user_data);
    a8a0:	6922      	ldr	r2, [r4, #16]
  TF_LITE_ENSURE_STATUS(
    a8a2:	9201      	str	r2, [sp, #4]
    a8a4:	9000      	str	r0, [sp, #0]
    a8a6:	463b      	mov	r3, r7
    a8a8:	4632      	mov	r2, r6
    a8aa:	6961      	ldr	r1, [r4, #20]
    a8ac:	4628      	mov	r0, r5
    a8ae:	f00b fb98 	bl	15fe2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
}
    a8b2:	b003      	add	sp, #12
    a8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    a8b6:	f00e f8ed 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    a8ba:	f00e f8eb 	bl	18a94 <abort>
  TF_LITE_ENSURE(context, input1 != nullptr);
    a8be:	696c      	ldr	r4, [r5, #20]
    a8c0:	4b0e      	ldr	r3, [pc, #56]	; (a8fc <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    a8c2:	9300      	str	r3, [sp, #0]
    a8c4:	23d5      	movs	r3, #213	; 0xd5
    a8c6:	4a0e      	ldr	r2, [pc, #56]	; (a900 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a8c8:	490e      	ldr	r1, [pc, #56]	; (a904 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a8ca:	4628      	mov	r0, r5
    a8cc:	47a0      	blx	r4
    a8ce:	2001      	movs	r0, #1
    a8d0:	e7ef      	b.n	a8b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, input2 != nullptr);
    a8d2:	696c      	ldr	r4, [r5, #20]
    a8d4:	4b0c      	ldr	r3, [pc, #48]	; (a908 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    a8d6:	9300      	str	r3, [sp, #0]
    a8d8:	23d7      	movs	r3, #215	; 0xd7
    a8da:	4a09      	ldr	r2, [pc, #36]	; (a900 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a8dc:	4909      	ldr	r1, [pc, #36]	; (a904 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a8de:	4628      	mov	r0, r5
    a8e0:	47a0      	blx	r4
    a8e2:	2001      	movs	r0, #1
    a8e4:	e7e5      	b.n	a8b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
  TF_LITE_ENSURE(context, output != nullptr);
    a8e6:	696c      	ldr	r4, [r5, #20]
    a8e8:	4b08      	ldr	r3, [pc, #32]	; (a90c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
    a8ea:	9300      	str	r3, [sp, #0]
    a8ec:	23d9      	movs	r3, #217	; 0xd9
    a8ee:	4a04      	ldr	r2, [pc, #16]	; (a900 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    a8f0:	4904      	ldr	r1, [pc, #16]	; (a904 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    a8f2:	4628      	mov	r0, r5
    a8f4:	47a0      	blx	r4
    a8f6:	2001      	movs	r0, #1
    a8f8:	e7db      	b.n	a8b2 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x46>
    a8fa:	bf00      	nop
    a8fc:	000345f4 	.word	0x000345f4
    a900:	000345a8 	.word	0x000345a8
    a904:	00033f14 	.word	0x00033f14
    a908:	00034608 	.word	0x00034608
    a90c:	0003461c 	.word	0x0003461c

0000a910 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>:
// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline typename std::enable_if<is_small_integer<T>::value, void>::type
BroadcastAdd4DSlow(const ArithmeticParams& params,
    a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a914:	b0ab      	sub	sp, #172	; 0xac
    a916:	9206      	str	r2, [sp, #24]
    a918:	461d      	mov	r5, r3
    a91a:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
      : size_(0) {
    a91c:	2300      	movs	r3, #0
    a91e:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a920:	680b      	ldr	r3, [r1, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a922:	2b04      	cmp	r3, #4
    a924:	dc0e      	bgt.n	a944 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34>
    a926:	4607      	mov	r7, r0
    a928:	460e      	mov	r6, r1
    if (size_ > kMaxSmallSize) {
    a92a:	9b08      	ldr	r3, [sp, #32]
    a92c:	2b05      	cmp	r3, #5
    a92e:	dd03      	ble.n	a938 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
      delete[] dims_pointer_;
    a930:	9809      	ldr	r0, [sp, #36]	; 0x24
    a932:	b108      	cbz	r0, a938 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28>
    a934:	f00e f899 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    a938:	2304      	movs	r3, #4
    a93a:	9308      	str	r3, [sp, #32]
  inline int32_t DimensionsCount() const { return size_; }
    a93c:	6830      	ldr	r0, [r6, #0]
    Resize(new_shape_size);
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a93e:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a940:	2300      	movs	r3, #0
    a942:	e00c      	b.n	a95e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a944:	f00e f8a6 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a948:	f00e f8a4 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a94c:	f00e f8a2 	bl	18a94 <abort>
      dims_[i] = val;
    a950:	2101      	movs	r1, #1
    a952:	aa2a      	add	r2, sp, #168	; 0xa8
    a954:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a958:	f842 1c84 	str.w	r1, [r2, #-132]
    for (int i = 0; i < size_increase; ++i) {
    a95c:	3301      	adds	r3, #1
    a95e:	4298      	cmp	r0, r3
    a960:	dd0b      	ble.n	a97a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6a>
    TFLITE_DCHECK_GE(i, 0);
    a962:	2b00      	cmp	r3, #0
    a964:	dbf0      	blt.n	a948 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x38>
    TFLITE_DCHECK_LT(i, size_);
    a966:	9a08      	ldr	r2, [sp, #32]
    a968:	4293      	cmp	r3, r2
    a96a:	daef      	bge.n	a94c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c>
    if (size_ > kMaxSmallSize) {
    a96c:	2a05      	cmp	r2, #5
    a96e:	ddef      	ble.n	a950 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40>
      dims_pointer_[i] = val;
    a970:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a972:	2101      	movs	r1, #1
    a974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a978:	e7f0      	b.n	a95c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x4c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a97a:	9b08      	ldr	r3, [sp, #32]
    a97c:	2b05      	cmp	r3, #5
    a97e:	dd01      	ble.n	a984 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x74>
    a980:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a982:	e000      	b.n	a986 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76>
    a984:	ab09      	add	r3, sp, #36	; 0x24
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a98a:	6832      	ldr	r2, [r6, #0]
    a98c:	2a05      	cmp	r2, #5
    a98e:	dd15      	ble.n	a9bc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xac>
    a990:	6871      	ldr	r1, [r6, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a992:	0092      	lsls	r2, r2, #2
    a994:	f00e f8a5 	bl	18ae2 <memcpy>
      : size_(0) {
    a998:	2300      	movs	r3, #0
    a99a:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a99c:	682b      	ldr	r3, [r5, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a99e:	2b04      	cmp	r3, #4
    a9a0:	dc0e      	bgt.n	a9c0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb0>
    if (size_ > kMaxSmallSize) {
    a9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9a4:	2b05      	cmp	r3, #5
    a9a6:	dd03      	ble.n	a9b0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
      delete[] dims_pointer_;
    a9a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a9aa:	b108      	cbz	r0, a9b0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xa0>
    a9ac:	f00e f85d 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    a9b0:	2304      	movs	r3, #4
    a9b2:	930e      	str	r3, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
    a9b4:	6828      	ldr	r0, [r5, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    a9b6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    a9b8:	2300      	movs	r3, #0
    a9ba:	e00e      	b.n	a9da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xca>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a9bc:	1d31      	adds	r1, r6, #4
    a9be:	e7e8      	b.n	a992 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    a9c0:	f00e f868 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    a9c4:	f00e f866 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a9c8:	f00e f864 	bl	18a94 <abort>
      dims_[i] = val;
    a9cc:	2101      	movs	r1, #1
    a9ce:	aa2a      	add	r2, sp, #168	; 0xa8
    a9d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    a9d4:	f842 1c6c 	str.w	r1, [r2, #-108]
    for (int i = 0; i < size_increase; ++i) {
    a9d8:	3301      	adds	r3, #1
    a9da:	4298      	cmp	r0, r3
    a9dc:	dd0b      	ble.n	a9f6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xe6>
    TFLITE_DCHECK_GE(i, 0);
    a9de:	2b00      	cmp	r3, #0
    a9e0:	dbf0      	blt.n	a9c4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a9e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a9e4:	4293      	cmp	r3, r2
    a9e6:	daef      	bge.n	a9c8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xb8>
    if (size_ > kMaxSmallSize) {
    a9e8:	2a05      	cmp	r2, #5
    a9ea:	ddef      	ble.n	a9cc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xbc>
      dims_pointer_[i] = val;
    a9ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a9ee:	2101      	movs	r1, #1
    a9f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    a9f4:	e7f0      	b.n	a9d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xc8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9f8:	2b05      	cmp	r3, #5
    a9fa:	dd0c      	ble.n	aa16 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x106>
    a9fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    a9fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa02:	682a      	ldr	r2, [r5, #0]
    aa04:	2a05      	cmp	r2, #5
    aa06:	dd08      	ble.n	aa1a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10a>
    aa08:	6869      	ldr	r1, [r5, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    aa0a:	0092      	lsls	r2, r2, #2
    aa0c:	f00e f869 	bl	18ae2 <memcpy>
// Copies dims to desc, calculating strides.
template <int N>
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
                           NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
    aa10:	2303      	movs	r3, #3
  int desc_stride = 1;
    aa12:	2101      	movs	r1, #1
                sizeof(int32_t) * shape.DimensionsCount());
  }
    aa14:	e019      	b.n	aa4a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa16:	ab0f      	add	r3, sp, #60	; 0x3c
    aa18:	e7f1      	b.n	a9fe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xee>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    aa1a:	1d29      	adds	r1, r5, #4
    aa1c:	e7f5      	b.n	aa0a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xfa>
    TFLITE_DCHECK_GE(i, 0);
    aa1e:	f00e f839 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa22:	f00e f837 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa26:	aa2a      	add	r2, sp, #168	; 0xa8
    aa28:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aa2c:	f852 2c84 	ldr.w	r2, [r2, #-132]
    aa30:	e016      	b.n	aa60 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x150>
    TFLITE_DCHECK_GE(i, 0);
    aa32:	f00e f82f 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa36:	f00e f82d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa3a:	aa2a      	add	r2, sp, #168	; 0xa8
    aa3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aa40:	f852 2c84 	ldr.w	r2, [r2, #-132]
    desc_out->extents[i] = input_shape.Dims(i);
    desc_out->strides[i] = desc_stride;
    desc_stride *= input_shape.Dims(i);
    aa44:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    aa48:	3b01      	subs	r3, #1
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	db1e      	blt.n	aa8c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x17c>
    TFLITE_DCHECK_GE(i, 0);
    aa4e:	dbe6      	blt.n	aa1e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    aa50:	9a08      	ldr	r2, [sp, #32]
    aa52:	4293      	cmp	r3, r2
    aa54:	dae5      	bge.n	aa22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa56:	2a05      	cmp	r2, #5
    aa58:	dde5      	ble.n	aa26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x116>
    aa5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    aa60:	a82a      	add	r0, sp, #168	; 0xa8
    aa62:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    aa66:	f840 2c20 	str.w	r2, [r0, #-32]
    desc_out->strides[i] = desc_stride;
    aa6a:	1d1a      	adds	r2, r3, #4
    aa6c:	a82a      	add	r0, sp, #168	; 0xa8
    aa6e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    aa72:	f842 1c20 	str.w	r1, [r2, #-32]
    TFLITE_DCHECK_GE(i, 0);
    aa76:	2b00      	cmp	r3, #0
    aa78:	dbdb      	blt.n	aa32 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x122>
    TFLITE_DCHECK_LT(i, size_);
    aa7a:	9a08      	ldr	r2, [sp, #32]
    aa7c:	4293      	cmp	r3, r2
    aa7e:	dada      	bge.n	aa36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa80:	2a05      	cmp	r2, #5
    aa82:	ddda      	ble.n	aa3a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x12a>
    aa84:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aa86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    aa8a:	e7db      	b.n	aa44 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x134>
  for (int i = N - 1; i >= 0; --i) {
    aa8c:	2303      	movs	r3, #3
  int desc_stride = 1;
    aa8e:	2101      	movs	r1, #1
    aa90:	e015      	b.n	aabe <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ae>
    TFLITE_DCHECK_GE(i, 0);
    aa92:	f00d ffff 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aa96:	f00d fffd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aa9a:	aa2a      	add	r2, sp, #168	; 0xa8
    aa9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aaa0:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    aaa4:	e016      	b.n	aad4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1c4>
    TFLITE_DCHECK_GE(i, 0);
    aaa6:	f00d fff5 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    aaaa:	f00d fff3 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaae:	aa2a      	add	r2, sp, #168	; 0xa8
    aab0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aab4:	f852 2c6c 	ldr.w	r2, [r2, #-108]
    desc_stride *= input_shape.Dims(i);
    aab8:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
    aabc:	3b01      	subs	r3, #1
    aabe:	2b00      	cmp	r3, #0
    aac0:	db1e      	blt.n	ab00 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f0>
    TFLITE_DCHECK_GE(i, 0);
    aac2:	dbe6      	blt.n	aa92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x182>
    TFLITE_DCHECK_LT(i, size_);
    aac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aac6:	4293      	cmp	r3, r2
    aac8:	dae5      	bge.n	aa96 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x186>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaca:	2a05      	cmp	r2, #5
    aacc:	dde5      	ble.n	aa9a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x18a>
    aace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    aad4:	a82a      	add	r0, sp, #168	; 0xa8
    aad6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    aada:	f840 2c40 	str.w	r2, [r0, #-64]
    desc_out->strides[i] = desc_stride;
    aade:	1d1a      	adds	r2, r3, #4
    aae0:	a82a      	add	r0, sp, #168	; 0xa8
    aae2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    aae6:	f842 1c40 	str.w	r1, [r2, #-64]
    TFLITE_DCHECK_GE(i, 0);
    aaea:	2b00      	cmp	r3, #0
    aaec:	dbdb      	blt.n	aaa6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x196>
    TFLITE_DCHECK_LT(i, size_);
    aaee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aaf0:	4293      	cmp	r3, r2
    aaf2:	dada      	bge.n	aaaa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aaf4:	2a05      	cmp	r2, #5
    aaf6:	ddda      	ble.n	aaae <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x19e>
    aaf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    aafa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    aafe:	e7db      	b.n	aab8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1a8>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
    ab00:	2300      	movs	r3, #0
    ab02:	e020      	b.n	ab46 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x236>
    TFLITE_DCHECK_GE(i, 0);
    ab04:	f00d ffc6 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ab08:	f00d ffc4 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab0c:	aa2a      	add	r2, sp, #168	; 0xa8
    ab0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ab12:	f852 2c84 	ldr.w	r2, [r2, #-132]
    ab16:	e022      	b.n	ab5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x24e>
    TFLITE_DCHECK_GE(i, 0);
    ab18:	f00d ffbc 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ab1c:	f00d ffba 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab20:	a92a      	add	r1, sp, #168	; 0xa8
    ab22:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    ab26:	f851 1c6c 	ldr.w	r1, [r1, #-108]
    ab2a:	e022      	b.n	ab72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x262>
    const int extent0 = extended_input0_shape.Dims(i);
    const int extent1 = extended_input1_shape.Dims(i);
    if (extent0 != extent1) {
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
    ab2c:	1d1a      	adds	r2, r3, #4
    ab2e:	a82a      	add	r0, sp, #168	; 0xa8
    ab30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    ab34:	2000      	movs	r0, #0
    ab36:	f842 0c20 	str.w	r0, [r2, #-32]
        desc0_out->extents[i] = extent1;
    ab3a:	aa2a      	add	r2, sp, #168	; 0xa8
    ab3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ab40:	f842 1c20 	str.w	r1, [r2, #-32]
  for (int i = 0; i < N; ++i) {
    ab44:	3301      	adds	r3, #1
    ab46:	2b03      	cmp	r3, #3
    ab48:	dc28      	bgt.n	ab9c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x28c>
    TFLITE_DCHECK_GE(i, 0);
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	dbda      	blt.n	ab04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f4>
    TFLITE_DCHECK_LT(i, size_);
    ab4e:	9a08      	ldr	r2, [sp, #32]
    ab50:	4293      	cmp	r3, r2
    ab52:	dad9      	bge.n	ab08 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab54:	2a05      	cmp	r2, #5
    ab56:	ddd9      	ble.n	ab0c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1fc>
    ab58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    ab5e:	2b00      	cmp	r3, #0
    ab60:	dbda      	blt.n	ab18 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x208>
    TFLITE_DCHECK_LT(i, size_);
    ab62:	990e      	ldr	r1, [sp, #56]	; 0x38
    ab64:	428b      	cmp	r3, r1
    ab66:	dad9      	bge.n	ab1c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x20c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab68:	2905      	cmp	r1, #5
    ab6a:	ddd9      	ble.n	ab20 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
    ab6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ab6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    ab72:	4291      	cmp	r1, r2
    ab74:	d0e6      	beq.n	ab44 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
      if (extent0 == 1) {
    ab76:	2a01      	cmp	r2, #1
    ab78:	d0d8      	beq.n	ab2c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x21c>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
    ab7a:	2901      	cmp	r1, #1
    ab7c:	d10c      	bne.n	ab98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x288>
        desc1_out->strides[i] = 0;
    ab7e:	1d19      	adds	r1, r3, #4
    ab80:	a82a      	add	r0, sp, #168	; 0xa8
    ab82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ab86:	2000      	movs	r0, #0
    ab88:	f841 0c40 	str.w	r0, [r1, #-64]
        desc1_out->extents[i] = extent0;
    ab8c:	a92a      	add	r1, sp, #168	; 0xa8
    ab8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    ab92:	f841 2c40 	str.w	r2, [r1, #-64]
    ab96:	e7d5      	b.n	ab44 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
    ab98:	f00d ff7c 	bl	18a94 <abort>
    if (size_ > kMaxSmallSize) {
    ab9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab9e:	2b05      	cmp	r3, #5
    aba0:	dd03      	ble.n	abaa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
      delete[] dims_pointer_;
    aba2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aba4:	b108      	cbz	r0, abaa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x29a>
    aba6:	f00d ff60 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    abaa:	9b08      	ldr	r3, [sp, #32]
    abac:	2b05      	cmp	r3, #5
    abae:	dd03      	ble.n	abb8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
      delete[] dims_pointer_;
    abb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    abb2:	b108      	cbz	r0, abb8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2a8>
    abb4:	f00d ff59 	bl	18a6a <_ZdaPv>
      : size_(0) {
    abb8:	2300      	movs	r3, #0
    abba:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    abbc:	6823      	ldr	r3, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    abbe:	2b04      	cmp	r3, #4
    abc0:	dc0c      	bgt.n	abdc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2cc>
    if (size_ > kMaxSmallSize) {
    abc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abc4:	2b05      	cmp	r3, #5
    abc6:	dd03      	ble.n	abd0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
      delete[] dims_pointer_;
    abc8:	9815      	ldr	r0, [sp, #84]	; 0x54
    abca:	b108      	cbz	r0, abd0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2c0>
    abcc:	f00d ff4d 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    abd0:	2304      	movs	r3, #4
    abd2:	9314      	str	r3, [sp, #80]	; 0x50
  inline int32_t DimensionsCount() const { return size_; }
    abd4:	6820      	ldr	r0, [r4, #0]
    const int size_increase = new_shape_size - shape.DimensionsCount();
    abd6:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    abd8:	2300      	movs	r3, #0
    abda:	e00c      	b.n	abf6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e6>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    abdc:	f00d ff5a 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    abe0:	f00d ff58 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    abe4:	f00d ff56 	bl	18a94 <abort>
      dims_[i] = val;
    abe8:	2101      	movs	r1, #1
    abea:	aa2a      	add	r2, sp, #168	; 0xa8
    abec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    abf0:	f842 1c54 	str.w	r1, [r2, #-84]
    for (int i = 0; i < size_increase; ++i) {
    abf4:	3301      	adds	r3, #1
    abf6:	4298      	cmp	r0, r3
    abf8:	dd0b      	ble.n	ac12 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x302>
    TFLITE_DCHECK_GE(i, 0);
    abfa:	2b00      	cmp	r3, #0
    abfc:	dbf0      	blt.n	abe0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d0>
    TFLITE_DCHECK_LT(i, size_);
    abfe:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ac00:	4293      	cmp	r3, r2
    ac02:	daef      	bge.n	abe4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d4>
    if (size_ > kMaxSmallSize) {
    ac04:	2a05      	cmp	r2, #5
    ac06:	ddef      	ble.n	abe8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2d8>
      dims_pointer_[i] = val;
    ac08:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ac0a:	2101      	movs	r1, #1
    ac0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    ac10:	e7f0      	b.n	abf4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac12:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac14:	2b05      	cmp	r3, #5
    ac16:	dd1a      	ble.n	ac4e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x33e>
    ac18:	9b15      	ldr	r3, [sp, #84]	; 0x54
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ac1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac1e:	6822      	ldr	r2, [r4, #0]
    ac20:	2a05      	cmp	r2, #5
    ac22:	dd16      	ble.n	ac52 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x342>
    ac24:	6861      	ldr	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    ac26:	0092      	lsls	r2, r2, #2
    ac28:	f00d ff5b 	bl	18ae2 <memcpy>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    ac2c:	2300      	movs	r3, #0
    ac2e:	9302      	str	r3, [sp, #8]
    ac30:	46ba      	mov	sl, r7
    TFLITE_DCHECK_LT(i, size_);
    ac32:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac34:	2b00      	cmp	r3, #0
    ac36:	dd0e      	ble.n	ac56 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac38:	2b05      	cmp	r3, #5
    ac3a:	dd0e      	ble.n	ac5a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34a>
    ac3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac3e:	681b      	ldr	r3, [r3, #0]
    ac40:	9a02      	ldr	r2, [sp, #8]
    ac42:	429a      	cmp	r2, r3
    ac44:	f280 82be 	bge.w	b1c4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8b4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    ac48:	2300      	movs	r3, #0
    ac4a:	9307      	str	r3, [sp, #28]
    ac4c:	e2a4      	b.n	b198 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x888>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac4e:	ab15      	add	r3, sp, #84	; 0x54
    ac50:	e7e3      	b.n	ac1a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x30a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac52:	1d21      	adds	r1, r4, #4
    ac54:	e7e7      	b.n	ac26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x316>
    TFLITE_DCHECK_LT(i, size_);
    ac56:	f00d ff1d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ac5c:	e7f0      	b.n	ac40 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x330>
    TFLITE_DCHECK_LT(i, size_);
    ac5e:	f00d ff19 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac62:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac64:	e2a1      	b.n	b1aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x89a>
    TFLITE_DCHECK_LT(i, size_);
    ac66:	f00d ff15 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ac6c:	e28b      	b.n	b186 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x876>
    TFLITE_DCHECK_LT(i, size_);
    ac6e:	f00d ff11 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac72:	9b18      	ldr	r3, [sp, #96]	; 0x60
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    ac74:	4599      	cmp	r9, r3
    ac76:	f280 827b 	bge.w	b170 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x860>
          const int32_t input1_val =
              params.input1_offset +
    ac7a:	f8db 2004 	ldr.w	r2, [fp, #4]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    ac7e:	9902      	ldr	r1, [sp, #8]
    ac80:	2900      	cmp	r1, #0
    ac82:	f2c0 81ef 	blt.w	b064 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
    ac86:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ac88:	4299      	cmp	r1, r3
    ac8a:	f280 81eb 	bge.w	b064 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x754>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    ac8e:	f1ba 0f00 	cmp.w	sl, #0
    ac92:	f2c0 81e9 	blt.w	b068 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
    ac96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ac98:	459a      	cmp	sl, r3
    ac9a:	f280 81e5 	bge.w	b068 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x758>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    ac9e:	f1b8 0f00 	cmp.w	r8, #0
    aca2:	f2c0 81e3 	blt.w	b06c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
    aca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aca8:	4598      	cmp	r8, r3
    acaa:	f280 81df 	bge.w	b06c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x75c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    acae:	f1b9 0f00 	cmp.w	r9, #0
    acb2:	f2c0 81dd 	blt.w	b070 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
    acb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    acb8:	4599      	cmp	r9, r3
    acba:	f280 81d9 	bge.w	b070 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x760>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    acbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    acc0:	fb03 f10a 	mul.w	r1, r3, sl
    acc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    acc6:	9d02      	ldr	r5, [sp, #8]
    acc8:	fb03 1305 	mla	r3, r3, r5, r1
    accc:	9928      	ldr	r1, [sp, #160]	; 0xa0
    acce:	fb01 f008 	mul.w	r0, r1, r8
    acd2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    acd4:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    acd8:	440b      	add	r3, r1
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
    acda:	9906      	ldr	r1, [sp, #24]
    acdc:	f931 7013 	ldrsh.w	r7, [r1, r3, lsl #1]
          const int32_t input1_val =
    ace0:	443a      	add	r2, r7
          const int32_t input2_val =
              params.input2_offset +
    ace2:	f8db 4008 	ldr.w	r4, [fp, #8]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    ace6:	2d00      	cmp	r5, #0
    ace8:	f2c0 81c4 	blt.w	b074 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
    acec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    acee:	429d      	cmp	r5, r3
    acf0:	f280 81c0 	bge.w	b074 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x764>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    acf4:	f1ba 0f00 	cmp.w	sl, #0
    acf8:	f2c0 81be 	blt.w	b078 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
    acfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    acfe:	459a      	cmp	sl, r3
    ad00:	f280 81ba 	bge.w	b078 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x768>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    ad04:	f1b8 0f00 	cmp.w	r8, #0
    ad08:	f2c0 81b8 	blt.w	b07c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
    ad0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ad0e:	4598      	cmp	r8, r3
    ad10:	f280 81b4 	bge.w	b07c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x76c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    ad14:	f1b9 0f00 	cmp.w	r9, #0
    ad18:	f2c0 81b2 	blt.w	b080 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
    ad1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ad1e:	4599      	cmp	r9, r3
    ad20:	f280 81ae 	bge.w	b080 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x770>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    ad24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ad26:	fb03 f30a 	mul.w	r3, r3, sl
    ad2a:	991e      	ldr	r1, [sp, #120]	; 0x78
    ad2c:	9802      	ldr	r0, [sp, #8]
    ad2e:	fb01 3300 	mla	r3, r1, r0, r3
    ad32:	9920      	ldr	r1, [sp, #128]	; 0x80
    ad34:	fb01 f008 	mul.w	r0, r1, r8
    ad38:	9921      	ldr	r1, [sp, #132]	; 0x84
    ad3a:	fb01 0109 	mla	r1, r1, r9, r0
         i3 * desc.strides[3];
    ad3e:	440b      	add	r3, r1
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
    ad40:	9934      	ldr	r1, [sp, #208]	; 0xd0
    ad42:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
          const int32_t input2_val =
    ad46:	441c      	add	r4, r3
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
    ad48:	f8db 3018 	ldr.w	r3, [fp, #24]
          const int32_t shifted_input1_val =
    ad4c:	fa02 f703 	lsl.w	r7, r2, r3
          const int32_t shifted_input2_val =
    ad50:	409c      	lsls	r4, r3
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
    ad52:	f8db c01c 	ldr.w	ip, [fp, #28]
                  params.input1_shift);
    ad56:	f8db 5020 	ldr.w	r5, [fp, #32]
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ad5a:	45bc      	cmp	ip, r7
    ad5c:	f000 8192 	beq.w	b084 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x774>
    ad60:	2600      	movs	r6, #0
  std::int64_t a_64(a);
    ad62:	17fb      	asrs	r3, r7, #31
  std::int64_t b_64(b);
    ad64:	4660      	mov	r0, ip
    ad66:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    ad68:	fb07 f101 	mul.w	r1, r7, r1
    ad6c:	fb0c 1103 	mla	r1, ip, r3, r1
    ad70:	fba7 230c 	umull	r2, r3, r7, ip
    ad74:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ad76:	2a00      	cmp	r2, #0
    ad78:	f173 0100 	sbcs.w	r1, r3, #0
    ad7c:	f2c0 8189 	blt.w	b092 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x782>
    ad80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ad84:	1852      	adds	r2, r2, r1
    ad86:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ad8a:	4611      	mov	r1, r2
    ad8c:	4618      	mov	r0, r3
    ad8e:	2a00      	cmp	r2, #0
    ad90:	f173 0700 	sbcs.w	r7, r3, #0
    ad94:	f2c0 817f 	blt.w	b096 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x786>
    ad98:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ad9a:	ea41 0740 	orr.w	r7, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ad9e:	2e00      	cmp	r6, #0
    ada0:	f040 8181 	bne.w	b0a6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x796>
  return RoundingDivideByPOT(
    ada4:	426d      	negs	r5, r5

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    ada6:	2d00      	cmp	r5, #0
    ada8:	f2c0 8180 	blt.w	b0ac <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x79c>
  assert(exponent <= 31);
    adac:	2d1f      	cmp	r5, #31
    adae:	f300 8184 	bgt.w	b0ba <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7aa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    adb2:	2601      	movs	r6, #1
    adb4:	fa06 f005 	lsl.w	r0, r6, r5
    adb8:	3801      	subs	r0, #1
    adba:	f00b f8eb 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adbe:	9000      	str	r0, [sp, #0]
  const IntegerType zero = Dup<IntegerType>(0);
    adc0:	2000      	movs	r0, #0
    adc2:	f00b f8e7 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adc6:	9004      	str	r0, [sp, #16]
  const IntegerType one = Dup<IntegerType>(1);
    adc8:	4630      	mov	r0, r6
    adca:	f00b f8e3 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    adce:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    add0:	9900      	ldr	r1, [sp, #0]
    add2:	4638      	mov	r0, r7
    add4:	f00b f8df 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    add8:	9005      	str	r0, [sp, #20]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    adda:	4631      	mov	r1, r6
    addc:	9800      	ldr	r0, [sp, #0]
    adde:	f00b f8dc 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ade2:	4606      	mov	r6, r0
    ade4:	9904      	ldr	r1, [sp, #16]
    ade6:	4638      	mov	r0, r7
    ade8:	f00b f8e3 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    adec:	9903      	ldr	r1, [sp, #12]
    adee:	f00b f8d2 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    adf2:	4601      	mov	r1, r0
    adf4:	4630      	mov	r0, r6
    adf6:	f00b f8d2 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    adfa:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    adfc:	4629      	mov	r1, r5
    adfe:	4638      	mov	r0, r7
    ae00:	f00b f8cb 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ae04:	4605      	mov	r5, r0
    ae06:	4631      	mov	r1, r6
    ae08:	9805      	ldr	r0, [sp, #20]
    ae0a:	f00b f8da 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ae0e:	9903      	ldr	r1, [sp, #12]
    ae10:	f00b f8c1 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ae14:	4601      	mov	r1, r0
    ae16:	4628      	mov	r0, r5
    ae18:	f00b f8c1 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ae1c:	9000      	str	r0, [sp, #0]
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
    ae1e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
                  params.input2_shift);
    ae22:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ae26:	42a2      	cmp	r2, r4
    ae28:	f000 814e 	beq.w	b0c8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7b8>
    ae2c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    ae30:	17e1      	asrs	r1, r4, #31
  std::int64_t b_64(b);
    ae32:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    ae34:	fb04 f307 	mul.w	r3, r4, r7
    ae38:	fb02 3101 	mla	r1, r2, r1, r3
    ae3c:	fba4 2302 	umull	r2, r3, r4, r2
    ae40:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ae42:	2a00      	cmp	r2, #0
    ae44:	f173 0100 	sbcs.w	r1, r3, #0
    ae48:	f2c0 8147 	blt.w	b0da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ca>
    ae4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ae50:	1852      	adds	r2, r2, r1
    ae52:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ae56:	4611      	mov	r1, r2
    ae58:	4618      	mov	r0, r3
    ae5a:	2a00      	cmp	r2, #0
    ae5c:	f173 0400 	sbcs.w	r4, r3, #0
    ae60:	f2c0 813d 	blt.w	b0de <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7ce>
    ae64:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ae66:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ae6a:	f1bc 0f00 	cmp.w	ip, #0
    ae6e:	f040 813e 	bne.w	b0ee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7de>
    ae72:	426d      	negs	r5, r5
  assert(exponent >= 0);
    ae74:	2d00      	cmp	r5, #0
    ae76:	f2c0 813d 	blt.w	b0f4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7e4>
  assert(exponent <= 31);
    ae7a:	2d1f      	cmp	r5, #31
    ae7c:	f300 8141 	bgt.w	b102 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7f2>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ae80:	2701      	movs	r7, #1
    ae82:	fa07 f005 	lsl.w	r0, r7, r5
    ae86:	3801      	subs	r0, #1
    ae88:	f00b f884 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ae8c:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ae8e:	2000      	movs	r0, #0
    ae90:	f00b f880 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ae94:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    ae96:	4638      	mov	r0, r7
    ae98:	f00b f87c 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ae9c:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    ae9e:	4631      	mov	r1, r6
    aea0:	4620      	mov	r0, r4
    aea2:	f00b f878 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aea6:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    aea8:	4639      	mov	r1, r7
    aeaa:	4630      	mov	r0, r6
    aeac:	f00b f875 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    aeb0:	4606      	mov	r6, r0
    aeb2:	9903      	ldr	r1, [sp, #12]
    aeb4:	4620      	mov	r0, r4
    aeb6:	f00b f87c 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    aeba:	9f04      	ldr	r7, [sp, #16]
    aebc:	4639      	mov	r1, r7
    aebe:	f00b f86a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aec2:	4601      	mov	r1, r0
    aec4:	4630      	mov	r0, r6
    aec6:	f00b f86a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    aeca:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
    aecc:	4629      	mov	r1, r5
    aece:	4620      	mov	r0, r4
    aed0:	f00b f863 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    aed4:	4604      	mov	r4, r0
    aed6:	4631      	mov	r1, r6
    aed8:	9805      	ldr	r0, [sp, #20]
    aeda:	f00b f872 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    aede:	4639      	mov	r1, r7
    aee0:	f00b f859 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    aee4:	4601      	mov	r1, r0
    aee6:	4620      	mov	r0, r4
    aee8:	f00b f859 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    aeec:	9b00      	ldr	r3, [sp, #0]
    aeee:	4403      	add	r3, r0
    aef0:	461a      	mov	r2, r3
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
    aef2:	f8db 3010 	ldr.w	r3, [fp, #16]
    aef6:	f8db 5014 	ldr.w	r5, [fp, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    aefa:	4293      	cmp	r3, r2
    aefc:	f000 8108 	beq.w	b110 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x800>
    af00:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    af04:	4610      	mov	r0, r2
    af06:	17d1      	asrs	r1, r2, #31
    af08:	e9cd 0100 	strd	r0, r1, [sp]
  std::int64_t b_64(b);
    af0c:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    af0e:	fb02 f007 	mul.w	r0, r2, r7
    af12:	9901      	ldr	r1, [sp, #4]
    af14:	fb03 0101 	mla	r1, r3, r1, r0
    af18:	fba2 2303 	umull	r2, r3, r2, r3
    af1c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    af1e:	2a00      	cmp	r2, #0
    af20:	f173 0100 	sbcs.w	r1, r3, #0
    af24:	f2c0 80fd 	blt.w	b122 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x812>
    af28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    af2c:	1852      	adds	r2, r2, r1
    af2e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    af32:	4611      	mov	r1, r2
    af34:	4618      	mov	r0, r3
    af36:	2a00      	cmp	r2, #0
    af38:	f173 0400 	sbcs.w	r4, r3, #0
    af3c:	f2c0 80f3 	blt.w	b126 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x816>
    af40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    af42:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    af46:	f1bc 0f00 	cmp.w	ip, #0
    af4a:	f040 80f4 	bne.w	b136 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x826>
    af4e:	426d      	negs	r5, r5
  assert(exponent >= 0);
    af50:	2d00      	cmp	r5, #0
    af52:	f2c0 80f3 	blt.w	b13c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x82c>
  assert(exponent <= 31);
    af56:	2d1f      	cmp	r5, #31
    af58:	f300 80f7 	bgt.w	b14a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x83a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    af5c:	2601      	movs	r6, #1
    af5e:	fa06 f005 	lsl.w	r0, r6, r5
    af62:	3801      	subs	r0, #1
    af64:	f00b f816 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af68:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    af6a:	2000      	movs	r0, #0
    af6c:	f00b f812 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af70:	9000      	str	r0, [sp, #0]
  const IntegerType one = Dup<IntegerType>(1);
    af72:	4630      	mov	r0, r6
    af74:	f00b f80e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af78:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    af7a:	4639      	mov	r1, r7
    af7c:	4620      	mov	r0, r4
    af7e:	f00b f80a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af82:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    af84:	4631      	mov	r1, r6
    af86:	4638      	mov	r0, r7
    af88:	f00b f807 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    af8c:	4607      	mov	r7, r0
    af8e:	9900      	ldr	r1, [sp, #0]
    af90:	4620      	mov	r0, r4
    af92:	f00b f80e 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    af96:	9e03      	ldr	r6, [sp, #12]
    af98:	4631      	mov	r1, r6
    af9a:	f00a fffc 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af9e:	4601      	mov	r1, r0
    afa0:	4638      	mov	r0, r7
    afa2:	f00a fffc 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afa6:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    afa8:	4629      	mov	r1, r5
    afaa:	4620      	mov	r0, r4
    afac:	f00a fff5 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afb0:	4604      	mov	r4, r0
    afb2:	4639      	mov	r1, r7
    afb4:	9804      	ldr	r0, [sp, #16]
    afb6:	f00b f804 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    afba:	4631      	mov	r1, r6
    afbc:	f00a ffeb 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afc0:	4601      	mov	r1, r0
    afc2:	4620      	mov	r0, r4
    afc4:	f00a ffeb 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
              params.output_offset;
    afc8:	f8db 300c 	ldr.w	r3, [fp, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
    afcc:	4403      	add	r3, r0
          const int32_t raw_output =
    afce:	930e      	str	r3, [sp, #56]	; 0x38
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
    afd0:	f10b 0030 	add.w	r0, fp, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
    afd4:	f10b 022c 	add.w	r2, fp, #44	; 0x2c
      if (__a < __b)
    afd8:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
    afdc:	428b      	cmp	r3, r1
    afde:	f300 80bb 	bgt.w	b158 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x848>
      if (__b < __a)
    afe2:	6813      	ldr	r3, [r2, #0]
    afe4:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
    afe8:	4299      	cmp	r1, r3
    afea:	dc00      	bgt.n	afee <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6de>
      return __a;
    afec:	4602      	mov	r2, r0
          const int32_t clamped_output =
    afee:	6810      	ldr	r0, [r2, #0]
  inline int32_t DimensionsCount() const { return size_; }
    aff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aff2:	2b04      	cmp	r3, #4
    aff4:	f040 80b2 	bne.w	b15c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x84c>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aff8:	9a02      	ldr	r2, [sp, #8]
    affa:	2a00      	cmp	r2, #0
    affc:	f2c0 80b0 	blt.w	b160 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
    b000:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b002:	429a      	cmp	r2, r3
    b004:	f280 80ac 	bge.w	b160 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x850>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b008:	f1ba 0f00 	cmp.w	sl, #0
    b00c:	f2c0 80aa 	blt.w	b164 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
    b010:	9916      	ldr	r1, [sp, #88]	; 0x58
    b012:	458a      	cmp	sl, r1
    b014:	f280 80a6 	bge.w	b164 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x854>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b018:	f1b8 0f00 	cmp.w	r8, #0
    b01c:	f2c0 80a4 	blt.w	b168 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
    b020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    b022:	4590      	cmp	r8, r2
    b024:	f280 80a0 	bge.w	b168 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x858>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b028:	f1b9 0f00 	cmp.w	r9, #0
    b02c:	f2c0 809e 	blt.w	b16c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
    b030:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b032:	4599      	cmp	r9, r3
    b034:	f280 809a 	bge.w	b16c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x85c>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    b038:	9c02      	ldr	r4, [sp, #8]
    b03a:	fb01 a104 	mla	r1, r1, r4, sl
    b03e:	fb01 8202 	mla	r2, r1, r2, r8
    b042:	fb02 9303 	mla	r3, r2, r3, r9
          output_data[Offset(extended_output_shape, b, y, x, c)] =
    b046:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    b048:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    b04c:	f109 0901 	add.w	r9, r9, #1
    TFLITE_DCHECK_LT(i, size_);
    b050:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b052:	2b03      	cmp	r3, #3
    b054:	f77f ae0b 	ble.w	ac6e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b058:	2b05      	cmp	r3, #5
    b05a:	f77f ae0a 	ble.w	ac72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x362>
    b05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b060:	68db      	ldr	r3, [r3, #12]
    b062:	e607      	b.n	ac74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x364>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    b064:	f00d fd16 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    b068:	f00d fd14 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    b06c:	f00d fd12 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    b070:	f00d fd10 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    b074:	f00d fd0e 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    b078:	f00d fd0c 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    b07c:	f00d fd0a 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    b080:	f00d fd08 	bl	18a94 <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b084:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
    b088:	d001      	beq.n	b08e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x77e>
    b08a:	2600      	movs	r6, #0
    b08c:	e669      	b.n	ad62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
    b08e:	2601      	movs	r6, #1
    b090:	e667      	b.n	ad62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x452>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b092:	4951      	ldr	r1, [pc, #324]	; (b1d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b094:	e676      	b.n	ad84 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x474>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b096:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b09a:	1851      	adds	r1, r2, r1
    b09c:	f04f 0000 	mov.w	r0, #0
    b0a0:	eb43 0000 	adc.w	r0, r3, r0
    b0a4:	e678      	b.n	ad98 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x488>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b0a6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    b0aa:	e67b      	b.n	ada4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x494>
  assert(exponent >= 0);
    b0ac:	4b4b      	ldr	r3, [pc, #300]	; (b1dc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b0ae:	4a4c      	ldr	r2, [pc, #304]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b0b0:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b0b4:	484b      	ldr	r0, [pc, #300]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b0b6:	f007 fcf1 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b0ba:	4b4b      	ldr	r3, [pc, #300]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b0bc:	4a48      	ldr	r2, [pc, #288]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b0be:	f240 1167 	movw	r1, #359	; 0x167
    b0c2:	4848      	ldr	r0, [pc, #288]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b0c4:	f007 fcea 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b0c8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    b0cc:	d002      	beq.n	b0d4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x7c4>
    b0ce:	f04f 0c00 	mov.w	ip, #0
    b0d2:	e6ad      	b.n	ae30 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
    b0d4:	f04f 0c01 	mov.w	ip, #1
    b0d8:	e6aa      	b.n	ae30 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x520>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b0da:	493f      	ldr	r1, [pc, #252]	; (b1d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b0dc:	e6b8      	b.n	ae50 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x540>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b0de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b0e2:	1851      	adds	r1, r2, r1
    b0e4:	f04f 0000 	mov.w	r0, #0
    b0e8:	eb43 0000 	adc.w	r0, r3, r0
    b0ec:	e6ba      	b.n	ae64 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x554>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b0ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b0f2:	e6be      	b.n	ae72 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x562>
  assert(exponent >= 0);
    b0f4:	4b39      	ldr	r3, [pc, #228]	; (b1dc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b0f6:	4a3a      	ldr	r2, [pc, #232]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b0f8:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b0fc:	4839      	ldr	r0, [pc, #228]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b0fe:	f007 fccd 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b102:	4b39      	ldr	r3, [pc, #228]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b104:	4a36      	ldr	r2, [pc, #216]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b106:	f240 1167 	movw	r1, #359	; 0x167
    b10a:	4836      	ldr	r0, [pc, #216]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b10c:	f007 fcc6 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b110:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b114:	d002      	beq.n	b11c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x80c>
    b116:	f04f 0c00 	mov.w	ip, #0
    b11a:	e6f3      	b.n	af04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
    b11c:	f04f 0c01 	mov.w	ip, #1
    b120:	e6f0      	b.n	af04 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x5f4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b122:	492d      	ldr	r1, [pc, #180]	; (b1d8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c8>)
    b124:	e702      	b.n	af2c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x61c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b12a:	1851      	adds	r1, r2, r1
    b12c:	f04f 0000 	mov.w	r0, #0
    b130:	eb43 0000 	adc.w	r0, r3, r0
    b134:	e704      	b.n	af40 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x630>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b136:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b13a:	e708      	b.n	af4e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x63e>
  assert(exponent >= 0);
    b13c:	4b27      	ldr	r3, [pc, #156]	; (b1dc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8cc>)
    b13e:	4a28      	ldr	r2, [pc, #160]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b140:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b144:	4827      	ldr	r0, [pc, #156]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b146:	f007 fca9 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b14a:	4b27      	ldr	r3, [pc, #156]	; (b1e8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d8>)
    b14c:	4a24      	ldr	r2, [pc, #144]	; (b1e0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d0>)
    b14e:	f240 1167 	movw	r1, #359	; 0x167
    b152:	4824      	ldr	r0, [pc, #144]	; (b1e4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8d4>)
    b154:	f007 fca2 	bl	12a9c <__assert_func>
	return __b;
    b158:	aa0e      	add	r2, sp, #56	; 0x38
    b15a:	e742      	b.n	afe2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x6d2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b15c:	f00d fc9a 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b160:	f00d fc98 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b164:	f00d fc96 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b168:	f00d fc94 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b16c:	f00d fc92 	bl	18a94 <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    b170:	f108 0801 	add.w	r8, r8, #1
    TFLITE_DCHECK_LT(i, size_);
    b174:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b176:	2b02      	cmp	r3, #2
    b178:	f77f ad75 	ble.w	ac66 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x356>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b17c:	2b05      	cmp	r3, #5
    b17e:	f77f ad74 	ble.w	ac6a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x35a>
    b182:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b184:	689b      	ldr	r3, [r3, #8]
    b186:	4598      	cmp	r8, r3
    b188:	da02      	bge.n	b190 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x880>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    b18a:	f04f 0900 	mov.w	r9, #0
    b18e:	e75f      	b.n	b050 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x740>
    b190:	46da      	mov	sl, fp
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    b192:	9b07      	ldr	r3, [sp, #28]
    b194:	3301      	adds	r3, #1
    b196:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    b198:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b19a:	2b01      	cmp	r3, #1
    b19c:	f77f ad5f 	ble.w	ac5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b1a0:	2b05      	cmp	r3, #5
    b1a2:	f77f ad5e 	ble.w	ac62 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x352>
    b1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1a8:	685b      	ldr	r3, [r3, #4]
    b1aa:	9a07      	ldr	r2, [sp, #28]
    b1ac:	429a      	cmp	r2, r3
    b1ae:	da05      	bge.n	b1bc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8ac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    b1b0:	f04f 0900 	mov.w	r9, #0
    b1b4:	46c8      	mov	r8, r9
    b1b6:	46d3      	mov	fp, sl
    b1b8:	4692      	mov	sl, r2
    b1ba:	e7db      	b.n	b174 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x864>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    b1bc:	9b02      	ldr	r3, [sp, #8]
    b1be:	3301      	adds	r3, #1
    b1c0:	9302      	str	r3, [sp, #8]
    b1c2:	e536      	b.n	ac32 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x322>
    if (size_ > kMaxSmallSize) {
    b1c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b1c6:	2b05      	cmp	r3, #5
    b1c8:	dd03      	ble.n	b1d2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
      delete[] dims_pointer_;
    b1ca:	9815      	ldr	r0, [sp, #84]	; 0x54
    b1cc:	b108      	cbz	r0, b1d2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x8c2>
    b1ce:	f00d fc4c 	bl	18a6a <_ZdaPv>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
    b1d2:	b02b      	add	sp, #172	; 0xac
    b1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1d8:	c0000001 	.word	0xc0000001
    b1dc:	00034630 	.word	0x00034630
    b1e0:	00034640 	.word	0x00034640
    b1e4:	00034698 	.word	0x00034698
    b1e8:	000346f4 	.word	0x000346f4

0000b1ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
      }
    }
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
    b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1f0:	b085      	sub	sp, #20
    b1f2:	4614      	mov	r4, r2
  const int32_t input1_val = params.input1_offset + x;
    b1f4:	6852      	ldr	r2, [r2, #4]
    b1f6:	4402      	add	r2, r0
  const int32_t input2_val = params.input2_offset + y;
    b1f8:	68a6      	ldr	r6, [r4, #8]
    b1fa:	440e      	add	r6, r1
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    b1fc:	69a1      	ldr	r1, [r4, #24]
    b1fe:	408a      	lsls	r2, r1
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    b200:	408e      	lsls	r6, r1
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
    b202:	69e3      	ldr	r3, [r4, #28]
    b204:	6a27      	ldr	r7, [r4, #32]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b206:	4293      	cmp	r3, r2
    b208:	f000 8143 	beq.w	b492 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2a6>
    b20c:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    b210:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t b_64(b);
    b214:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b218:	fb02 f009 	mul.w	r0, r2, r9
    b21c:	fb03 010b 	mla	r1, r3, fp, r0
    b220:	fba2 2303 	umull	r2, r3, r2, r3
    b224:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b226:	2a00      	cmp	r2, #0
    b228:	f173 0100 	sbcs.w	r1, r3, #0
    b22c:	f2c0 813a 	blt.w	b4a4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b8>
    b230:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b234:	1852      	adds	r2, r2, r1
    b236:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b23a:	4611      	mov	r1, r2
    b23c:	461d      	mov	r5, r3
    b23e:	2a00      	cmp	r2, #0
    b240:	f173 0000 	sbcs.w	r0, r3, #0
    b244:	f2c0 8130 	blt.w	b4a8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2bc>
    b248:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b24a:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b24e:	f1bc 0f00 	cmp.w	ip, #0
    b252:	f040 8131 	bne.w	b4b8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2cc>
  return RoundingDivideByPOT(
    b256:	427f      	negs	r7, r7
  assert(exponent >= 0);
    b258:	2f00      	cmp	r7, #0
    b25a:	f2c0 8130 	blt.w	b4be <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2d2>
  assert(exponent <= 31);
    b25e:	2f1f      	cmp	r7, #31
    b260:	f300 8134 	bgt.w	b4cc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2e0>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b264:	f04f 0b01 	mov.w	fp, #1
    b268:	fa0b f007 	lsl.w	r0, fp, r7
    b26c:	3801      	subs	r0, #1
    b26e:	f00a fe91 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b272:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b274:	2000      	movs	r0, #0
    b276:	f00a fe8d 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b27a:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b27c:	4658      	mov	r0, fp
    b27e:	f00a fe89 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b282:	4680      	mov	r8, r0
  const IntegerType remainder = BitAnd(x, mask);
    b284:	4649      	mov	r1, r9
    b286:	4628      	mov	r0, r5
    b288:	f00a fe85 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b28c:	9001      	str	r0, [sp, #4]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b28e:	4659      	mov	r1, fp
    b290:	4648      	mov	r0, r9
    b292:	f00a fe82 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b296:	4681      	mov	r9, r0
    b298:	4651      	mov	r1, sl
    b29a:	4628      	mov	r0, r5
    b29c:	f00a fe89 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b2a0:	4641      	mov	r1, r8
    b2a2:	f00a fe78 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b2a6:	4601      	mov	r1, r0
    b2a8:	4648      	mov	r0, r9
    b2aa:	f00a fe78 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b2ae:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    b2b0:	4639      	mov	r1, r7
    b2b2:	4628      	mov	r0, r5
    b2b4:	f00a fe71 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b2b8:	4605      	mov	r5, r0
    b2ba:	4649      	mov	r1, r9
    b2bc:	9801      	ldr	r0, [sp, #4]
    b2be:	f00a fe80 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b2c2:	4641      	mov	r1, r8
    b2c4:	f00a fe67 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b2c8:	4601      	mov	r1, r0
    b2ca:	4628      	mov	r0, r5
    b2cc:	f00a fe67 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b2d0:	9001      	str	r0, [sp, #4]
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
    b2d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    b2d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b2d6:	42b2      	cmp	r2, r6
    b2d8:	f000 80ff 	beq.w	b4da <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2ee>
    b2dc:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    b2de:	ea4f 79e6 	mov.w	r9, r6, asr #31
  std::int64_t b_64(b);
    b2e2:	ea4f 7be2 	mov.w	fp, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b2e6:	fb06 f10b 	mul.w	r1, r6, fp
    b2ea:	fb02 1109 	mla	r1, r2, r9, r1
    b2ee:	fba6 2302 	umull	r2, r3, r6, r2
    b2f2:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b2f4:	2a00      	cmp	r2, #0
    b2f6:	f173 0100 	sbcs.w	r1, r3, #0
    b2fa:	f2c0 80f5 	blt.w	b4e8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2fc>
    b2fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b302:	1852      	adds	r2, r2, r1
    b304:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b308:	4611      	mov	r1, r2
    b30a:	461d      	mov	r5, r3
    b30c:	2a00      	cmp	r2, #0
    b30e:	f173 0600 	sbcs.w	r6, r3, #0
    b312:	f2c0 80eb 	blt.w	b4ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x300>
    b316:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b318:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b31c:	2f00      	cmp	r7, #0
    b31e:	f040 80ed 	bne.w	b4fc <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x310>
    b322:	4246      	negs	r6, r0
  assert(exponent >= 0);
    b324:	2e00      	cmp	r6, #0
    b326:	f2c0 80ec 	blt.w	b502 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x316>
  assert(exponent <= 31);
    b32a:	2e1f      	cmp	r6, #31
    b32c:	f300 80f0 	bgt.w	b510 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x324>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b330:	f04f 0b01 	mov.w	fp, #1
    b334:	fa0b f006 	lsl.w	r0, fp, r6
    b338:	3801      	subs	r0, #1
    b33a:	f00a fe2b 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b33e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b340:	2000      	movs	r0, #0
    b342:	f00a fe27 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b346:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b348:	4658      	mov	r0, fp
    b34a:	f00a fe23 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b34e:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b350:	4641      	mov	r1, r8
    b352:	4628      	mov	r0, r5
    b354:	f00a fe1f 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b358:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b35a:	4659      	mov	r1, fp
    b35c:	4640      	mov	r0, r8
    b35e:	f00a fe1c 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b362:	4680      	mov	r8, r0
    b364:	4651      	mov	r1, sl
    b366:	4628      	mov	r0, r5
    b368:	f00a fe23 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b36c:	4639      	mov	r1, r7
    b36e:	f00a fe12 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b372:	4601      	mov	r1, r0
    b374:	4640      	mov	r0, r8
    b376:	f00a fe12 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b37a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b37c:	4631      	mov	r1, r6
    b37e:	4628      	mov	r0, r5
    b380:	f00a fe0b 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b384:	4605      	mov	r5, r0
    b386:	4641      	mov	r1, r8
    b388:	4648      	mov	r0, r9
    b38a:	f00a fe1a 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b38e:	4639      	mov	r1, r7
    b390:	f00a fe01 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b394:	4601      	mov	r1, r0
    b396:	4628      	mov	r0, r5
    b398:	f00a fe01 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    b39c:	9b01      	ldr	r3, [sp, #4]
    b39e:	4403      	add	r3, r0
    b3a0:	461a      	mov	r2, r3
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
    b3a2:	6923      	ldr	r3, [r4, #16]
    b3a4:	6961      	ldr	r1, [r4, #20]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b3a6:	4293      	cmp	r3, r2
    b3a8:	f000 80b9 	beq.w	b51e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x332>
    b3ac:	2000      	movs	r0, #0
  std::int64_t a_64(a);
    b3ae:	17d7      	asrs	r7, r2, #31
  std::int64_t b_64(b);
    b3b0:	ea4f 79e3 	mov.w	r9, r3, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    b3b4:	fb02 f509 	mul.w	r5, r2, r9
    b3b8:	fb03 5507 	mla	r5, r3, r7, r5
    b3bc:	fba2 2303 	umull	r2, r3, r2, r3
    b3c0:	442b      	add	r3, r5
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b3c2:	2a00      	cmp	r2, #0
    b3c4:	f173 0500 	sbcs.w	r5, r3, #0
    b3c8:	f2c0 80b0 	blt.w	b52c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x340>
    b3cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b3d0:	1952      	adds	r2, r2, r5
    b3d2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
    b3d6:	4615      	mov	r5, r2
    b3d8:	461e      	mov	r6, r3
    b3da:	2a00      	cmp	r2, #0
    b3dc:	f173 0700 	sbcs.w	r7, r3, #0
    b3e0:	f2c0 80a6 	blt.w	b530 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x344>
    b3e4:	0fed      	lsrs	r5, r5, #31
  std::int32_t ab_x2_high32 =
    b3e6:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b3ea:	2800      	cmp	r0, #0
    b3ec:	f040 80a8 	bne.w	b540 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x354>
    b3f0:	424e      	negs	r6, r1
  assert(exponent >= 0);
    b3f2:	2e00      	cmp	r6, #0
    b3f4:	f2c0 80a7 	blt.w	b546 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x35a>
  assert(exponent <= 31);
    b3f8:	2e1f      	cmp	r6, #31
    b3fa:	f300 80ab 	bgt.w	b554 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x368>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b3fe:	f04f 0b01 	mov.w	fp, #1
    b402:	fa0b f006 	lsl.w	r0, fp, r6
    b406:	3801      	subs	r0, #1
    b408:	f00a fdc4 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b40c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    b40e:	2000      	movs	r0, #0
    b410:	f00a fdc0 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b414:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    b416:	4658      	mov	r0, fp
    b418:	f00a fdbc 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b41c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    b41e:	4641      	mov	r1, r8
    b420:	4628      	mov	r0, r5
    b422:	f00a fdb8 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b426:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b428:	4659      	mov	r1, fp
    b42a:	4640      	mov	r0, r8
    b42c:	f00a fdb5 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b430:	4680      	mov	r8, r0
    b432:	4651      	mov	r1, sl
    b434:	4628      	mov	r0, r5
    b436:	f00a fdbc 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b43a:	4639      	mov	r1, r7
    b43c:	f00a fdab 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b440:	4601      	mov	r1, r0
    b442:	4640      	mov	r0, r8
    b444:	f00a fdab 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b448:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    b44a:	4631      	mov	r1, r6
    b44c:	4628      	mov	r0, r5
    b44e:	f00a fda4 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b452:	4605      	mov	r5, r0
    b454:	4641      	mov	r1, r8
    b456:	4648      	mov	r0, r9
    b458:	f00a fdb3 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b45c:	4639      	mov	r1, r7
    b45e:	f00a fd9a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b462:	4601      	mov	r1, r0
    b464:	4628      	mov	r0, r5
    b466:	f00a fd9a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
      params.output_offset;
    b46a:	68e3      	ldr	r3, [r4, #12]
          raw_sum, params.output_multiplier, params.output_shift) +
    b46c:	4418      	add	r0, r3
      params.output_offset;
    b46e:	9003      	str	r0, [sp, #12]
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
    b470:	f104 0530 	add.w	r5, r4, #48	; 0x30
               std::max(params.quantized_activation_min, raw_output));
    b474:	f104 032c 	add.w	r3, r4, #44	; 0x2c
      if (__a < __b)
    b478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b47a:	4290      	cmp	r0, r2
    b47c:	dc71      	bgt.n	b562 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x376>
      if (__b < __a)
    b47e:	681a      	ldr	r2, [r3, #0]
    b480:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b482:	4291      	cmp	r1, r2
    b484:	dc00      	bgt.n	b488 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x29c>
      return __a;
    b486:	462b      	mov	r3, r5
  return static_cast<int8_t>(clamped_output);
}
    b488:	f993 0000 	ldrsb.w	r0, [r3]
    b48c:	b005      	add	sp, #20
    b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b492:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b496:	d002      	beq.n	b49e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2b2>
    b498:	f04f 0c00 	mov.w	ip, #0
    b49c:	e6b8      	b.n	b210 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
    b49e:	f04f 0c01 	mov.w	ip, #1
    b4a2:	e6b5      	b.n	b210 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x24>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b4a4:	4930      	ldr	r1, [pc, #192]	; (b568 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b4a6:	e6c5      	b.n	b234 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x48>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b4a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b4ac:	1851      	adds	r1, r2, r1
    b4ae:	f04f 0500 	mov.w	r5, #0
    b4b2:	eb43 0505 	adc.w	r5, r3, r5
    b4b6:	e6c7      	b.n	b248 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x5c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b4b8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b4bc:	e6cb      	b.n	b256 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x6a>
  assert(exponent >= 0);
    b4be:	4b2b      	ldr	r3, [pc, #172]	; (b56c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b4c0:	4a2b      	ldr	r2, [pc, #172]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b4c2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b4c6:	482b      	ldr	r0, [pc, #172]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b4c8:	f007 fae8 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b4cc:	4b2a      	ldr	r3, [pc, #168]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b4ce:	4a28      	ldr	r2, [pc, #160]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b4d0:	f240 1167 	movw	r1, #359	; 0x167
    b4d4:	4827      	ldr	r0, [pc, #156]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b4d6:	f007 fae1 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b4da:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    b4de:	d001      	beq.n	b4e4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x2f8>
    b4e0:	2700      	movs	r7, #0
    b4e2:	e6fc      	b.n	b2de <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
    b4e4:	2701      	movs	r7, #1
    b4e6:	e6fa      	b.n	b2de <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xf2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b4e8:	491f      	ldr	r1, [pc, #124]	; (b568 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b4ea:	e70a      	b.n	b302 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x116>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b4ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b4f0:	1851      	adds	r1, r2, r1
    b4f2:	f04f 0500 	mov.w	r5, #0
    b4f6:	eb43 0505 	adc.w	r5, r3, r5
    b4fa:	e70c      	b.n	b316 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x12a>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b4fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b500:	e70f      	b.n	b322 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x136>
  assert(exponent >= 0);
    b502:	4b1a      	ldr	r3, [pc, #104]	; (b56c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b504:	4a1a      	ldr	r2, [pc, #104]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b506:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b50a:	481a      	ldr	r0, [pc, #104]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b50c:	f007 fac6 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b510:	4b19      	ldr	r3, [pc, #100]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b512:	4a17      	ldr	r2, [pc, #92]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b514:	f240 1167 	movw	r1, #359	; 0x167
    b518:	4816      	ldr	r0, [pc, #88]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b51a:	f007 fabf 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b51e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b522:	d001      	beq.n	b528 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x33c>
    b524:	2000      	movs	r0, #0
    b526:	e742      	b.n	b3ae <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
    b528:	2001      	movs	r0, #1
    b52a:	e740      	b.n	b3ae <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c2>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b52c:	4d0e      	ldr	r5, [pc, #56]	; (b568 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x37c>)
    b52e:	e74f      	b.n	b3d0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b530:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b534:	1955      	adds	r5, r2, r5
    b536:	f04f 0600 	mov.w	r6, #0
    b53a:	eb43 0606 	adc.w	r6, r3, r6
    b53e:	e751      	b.n	b3e4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1f8>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b540:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b544:	e754      	b.n	b3f0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x204>
  assert(exponent >= 0);
    b546:	4b09      	ldr	r3, [pc, #36]	; (b56c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x380>)
    b548:	4a09      	ldr	r2, [pc, #36]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b54a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b54e:	4809      	ldr	r0, [pc, #36]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b550:	f007 faa4 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    b554:	4b08      	ldr	r3, [pc, #32]	; (b578 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x38c>)
    b556:	4a06      	ldr	r2, [pc, #24]	; (b570 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x384>)
    b558:	f240 1167 	movw	r1, #359	; 0x167
    b55c:	4805      	ldr	r0, [pc, #20]	; (b574 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x388>)
    b55e:	f007 fa9d 	bl	12a9c <__assert_func>
	return __b;
    b562:	ab03      	add	r3, sp, #12
    b564:	e78b      	b.n	b47e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x292>
    b566:	bf00      	nop
    b568:	c0000001 	.word	0xc0000001
    b56c:	00034630 	.word	0x00034630
    b570:	00034640 	.word	0x00034640
    b574:	00034698 	.word	0x00034698
    b578:	000346f4 	.word	0x000346f4

0000b57c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
                              TfLiteEvalTensor* output) {
    b57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b580:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    b584:	4680      	mov	r8, r0
    b586:	9fa2      	ldr	r7, [sp, #648]	; 0x288
    b588:	9ea3      	ldr	r6, [sp, #652]	; 0x28c
    b58a:	9da4      	ldr	r5, [sp, #656]	; 0x290
  op_params.left_shift = data->left_shift;
    b58c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b58e:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.input1_offset = data->input1_offset;
    b590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b592:	9229      	str	r2, [sp, #164]	; 0xa4
  op_params.input1_multiplier = data->input1_multiplier;
    b594:	695a      	ldr	r2, [r3, #20]
    b596:	922f      	str	r2, [sp, #188]	; 0xbc
  op_params.input1_shift = data->input1_shift;
    b598:	685a      	ldr	r2, [r3, #4]
    b59a:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.input2_offset = data->input2_offset;
    b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b59e:	922a      	str	r2, [sp, #168]	; 0xa8
  op_params.input2_multiplier = data->input2_multiplier;
    b5a0:	699a      	ldr	r2, [r3, #24]
    b5a2:	9231      	str	r2, [sp, #196]	; 0xc4
  op_params.input2_shift = data->input2_shift;
    b5a4:	689a      	ldr	r2, [r3, #8]
    b5a6:	9232      	str	r2, [sp, #200]	; 0xc8
  op_params.output_offset = data->output_offset;
    b5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b5aa:	922b      	str	r2, [sp, #172]	; 0xac
  op_params.output_multiplier = data->output_multiplier;
    b5ac:	69da      	ldr	r2, [r3, #28]
    b5ae:	922c      	str	r2, [sp, #176]	; 0xb0
  op_params.output_shift = data->output_shift;
    b5b0:	6a1a      	ldr	r2, [r3, #32]
    b5b2:	922d      	str	r2, [sp, #180]	; 0xb4
  SetActivationParams(data->output_activation_min, data->output_activation_max,
    b5b4:	68da      	ldr	r2, [r3, #12]
    b5b6:	691b      	ldr	r3, [r3, #16]
  params->float_activation_max = max;
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
    b5b8:	9233      	str	r2, [sp, #204]	; 0xcc
  params->quantized_activation_max = max;
    b5ba:	9334      	str	r3, [sp, #208]	; 0xd0
      tflite::micro::GetTensorShape(input1),
    b5bc:	4639      	mov	r1, r7
    b5be:	a842      	add	r0, sp, #264	; 0x108
    b5c0:	f00b fe93 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
    b5c4:	4631      	mov	r1, r6
    b5c6:	a848      	add	r0, sp, #288	; 0x120
    b5c8:	f00b fe8f 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
    b5cc:	9a42      	ldr	r2, [sp, #264]	; 0x108
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
    b5ce:	9297      	str	r2, [sp, #604]	; 0x25c
    b5d0:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b5d2:	9396      	str	r3, [sp, #600]	; 0x258
      if (__a < __b)
    b5d4:	429a      	cmp	r2, r3
    b5d6:	db11      	blt.n	b5fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80>
      return __a;
    b5d8:	ab97      	add	r3, sp, #604	; 0x25c
    b5da:	681c      	ldr	r4, [r3, #0]

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b5dc:	2304      	movs	r3, #4
    b5de:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    size_ = dimensions_count;
    b5e2:	9412      	str	r4, [sp, #72]	; 0x48
    if (dimensions_count > kMaxSmallSize) {
    b5e4:	2c05      	cmp	r4, #5
    b5e6:	dd07      	ble.n	b5f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_ = new int32_t[dimensions_count];
    b5e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b5ec:	429c      	cmp	r4, r3
    b5ee:	d207      	bcs.n	b600 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84>
    b5f0:	00a0      	lsls	r0, r4, #2
    b5f2:	f00d fa4d 	bl	18a90 <_Znaj>
    b5f6:	9013      	str	r0, [sp, #76]	; 0x4c
    for (int i = 0; i < shape_size; ++i) {
    b5f8:	2300      	movs	r3, #0
  }
    b5fa:	e00e      	b.n	b61a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e>
	return __b;
    b5fc:	ab96      	add	r3, sp, #600	; 0x258
    b5fe:	e7ec      	b.n	b5da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e>
      dims_pointer_ = new int32_t[dimensions_count];
    b600:	f04f 30ff 	mov.w	r0, #4294967295
    b604:	e7f5      	b.n	b5f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x76>
    TFLITE_DCHECK_GE(i, 0);
    b606:	f00d fa45 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b60a:	f00d fa43 	bl	18a94 <abort>
      dims_[i] = val;
    b60e:	aa12      	add	r2, sp, #72	; 0x48
    b610:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b614:	2101      	movs	r1, #1
    b616:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < shape_size; ++i) {
    b618:	3301      	adds	r3, #1
    b61a:	429c      	cmp	r4, r3
    b61c:	dd0b      	ble.n	b636 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xba>
    TFLITE_DCHECK_GE(i, 0);
    b61e:	2b00      	cmp	r3, #0
    b620:	dbf1      	blt.n	b606 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8a>
    TFLITE_DCHECK_LT(i, size_);
    b622:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b624:	4293      	cmp	r3, r2
    b626:	daf0      	bge.n	b60a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x8e>
    if (size_ > kMaxSmallSize) {
    b628:	2a05      	cmp	r2, #5
    b62a:	ddf0      	ble.n	b60e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x92>
      dims_pointer_[i] = val;
    b62c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b62e:	2101      	movs	r1, #1
    b630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b634:	e7f0      	b.n	b618 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c>
      : size_(0) {
    b636:	2300      	movs	r3, #0
    b638:	9318      	str	r3, [sp, #96]	; 0x60
  inline int32_t DimensionsCount() const { return size_; }
    b63a:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b63c:	429c      	cmp	r4, r3
    b63e:	db15      	blt.n	b66c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf0>
    if (size_ > kMaxSmallSize) {
    b640:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b642:	2b05      	cmp	r3, #5
    b644:	dd03      	ble.n	b64e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
      delete[] dims_pointer_;
    b646:	9819      	ldr	r0, [sp, #100]	; 0x64
    b648:	b108      	cbz	r0, b64e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2>
    b64a:	f00d fa0e 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    b64e:	9418      	str	r4, [sp, #96]	; 0x60
    if (dimensions_count > kMaxSmallSize) {
    b650:	2c05      	cmp	r4, #5
    b652:	dd07      	ble.n	b664 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe8>
      dims_pointer_ = new int32_t[dimensions_count];
    b654:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b658:	429c      	cmp	r4, r3
    b65a:	d209      	bcs.n	b670 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4>
    b65c:	00a0      	lsls	r0, r4, #2
    b65e:	f00d fa17 	bl	18a90 <_Znaj>
    b662:	9019      	str	r0, [sp, #100]	; 0x64
  inline int32_t DimensionsCount() const { return size_; }
    b664:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b666:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b668:	2300      	movs	r3, #0
    b66a:	e00e      	b.n	b68a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b66c:	f00d fa12 	bl	18a94 <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b670:	f04f 30ff 	mov.w	r0, #4294967295
    b674:	e7f3      	b.n	b65e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
    TFLITE_DCHECK_GE(i, 0);
    b676:	f00d fa0d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b67a:	f00d fa0b 	bl	18a94 <abort>
      dims_[i] = val;
    b67e:	aa18      	add	r2, sp, #96	; 0x60
    b680:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b684:	2101      	movs	r1, #1
    b686:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b688:	3301      	adds	r3, #1
    b68a:	4298      	cmp	r0, r3
    b68c:	dd0b      	ble.n	b6a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x12a>
    TFLITE_DCHECK_GE(i, 0);
    b68e:	2b00      	cmp	r3, #0
    b690:	dbf1      	blt.n	b676 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    b692:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b694:	4293      	cmp	r3, r2
    b696:	daf0      	bge.n	b67a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xfe>
    if (size_ > kMaxSmallSize) {
    b698:	2a05      	cmp	r2, #5
    b69a:	ddf0      	ble.n	b67e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
      dims_pointer_[i] = val;
    b69c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    b69e:	2101      	movs	r1, #1
    b6a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b6a4:	e7f0      	b.n	b688 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b6a8:	2b05      	cmp	r3, #5
    b6aa:	dd1e      	ble.n	b6ea <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    b6ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b6ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6b2:	9a42      	ldr	r2, [sp, #264]	; 0x108
    b6b4:	2a05      	cmp	r2, #5
    b6b6:	dd1a      	ble.n	b6ee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x172>
    b6b8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b6ba:	0092      	lsls	r2, r2, #2
    b6bc:	f00d fa11 	bl	18ae2 <memcpy>
      : size_(0) {
    b6c0:	2300      	movs	r3, #0
    b6c2:	9320      	str	r3, [sp, #128]	; 0x80
  inline int32_t DimensionsCount() const { return size_; }
    b6c4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b6c6:	429c      	cmp	r4, r3
    b6c8:	db13      	blt.n	b6f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x176>
    if (size_ > kMaxSmallSize) {
    b6ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b6cc:	2b05      	cmp	r3, #5
    b6ce:	dd03      	ble.n	b6d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
      delete[] dims_pointer_;
    b6d0:	9821      	ldr	r0, [sp, #132]	; 0x84
    b6d2:	b108      	cbz	r0, b6d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    b6d4:	f00d f9c9 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    b6d8:	9420      	str	r4, [sp, #128]	; 0x80
    if (dimensions_count > kMaxSmallSize) {
    b6da:	2c05      	cmp	r4, #5
    b6dc:	dd10      	ble.n	b700 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
      dims_pointer_ = new int32_t[dimensions_count];
    b6de:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    b6e2:	429c      	cmp	r4, r3
    b6e4:	d207      	bcs.n	b6f6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17a>
    b6e6:	00a0      	lsls	r0, r4, #2
    b6e8:	e007      	b.n	b6fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6ea:	ab19      	add	r3, sp, #100	; 0x64
    b6ec:	e7df      	b.n	b6ae <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b6ee:	a943      	add	r1, sp, #268	; 0x10c
    b6f0:	e7e3      	b.n	b6ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b6f2:	f00d f9cf 	bl	18a94 <abort>
      dims_pointer_ = new int32_t[dimensions_count];
    b6f6:	f04f 30ff 	mov.w	r0, #4294967295
    b6fa:	f00d f9c9 	bl	18a90 <_Znaj>
    b6fe:	9021      	str	r0, [sp, #132]	; 0x84
  inline int32_t DimensionsCount() const { return size_; }
    b700:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b702:	1a20      	subs	r0, r4, r0
    for (int i = 0; i < size_increase; ++i) {
    b704:	2300      	movs	r3, #0
    b706:	e009      	b.n	b71c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a0>
    TFLITE_DCHECK_GE(i, 0);
    b708:	f00d f9c4 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b70c:	f00d f9c2 	bl	18a94 <abort>
      dims_[i] = val;
    b710:	aa20      	add	r2, sp, #128	; 0x80
    b712:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b716:	2101      	movs	r1, #1
    b718:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    b71a:	3301      	adds	r3, #1
    b71c:	4298      	cmp	r0, r3
    b71e:	dd0b      	ble.n	b738 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1bc>
    TFLITE_DCHECK_GE(i, 0);
    b720:	2b00      	cmp	r3, #0
    b722:	dbf1      	blt.n	b708 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x18c>
    TFLITE_DCHECK_LT(i, size_);
    b724:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b726:	4293      	cmp	r3, r2
    b728:	daf0      	bge.n	b70c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x190>
    if (size_ > kMaxSmallSize) {
    b72a:	2a05      	cmp	r2, #5
    b72c:	ddf0      	ble.n	b710 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x194>
      dims_pointer_[i] = val;
    b72e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b730:	2101      	movs	r1, #1
    b732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    b736:	e7f0      	b.n	b71a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b738:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b73a:	2b05      	cmp	r3, #5
    b73c:	dd01      	ble.n	b742 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
    b73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b740:	e000      	b.n	b744 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c8>
    b742:	ab21      	add	r3, sp, #132	; 0x84
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b748:	9a48      	ldr	r2, [sp, #288]	; 0x120
    b74a:	2a05      	cmp	r2, #5
    b74c:	dd01      	ble.n	b752 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d6>
    b74e:	9949      	ldr	r1, [sp, #292]	; 0x124
    b750:	e000      	b.n	b754 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d8>
    b752:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    b754:	0092      	lsls	r2, r2, #2
    b756:	f00d f9c4 	bl	18ae2 <memcpy>
    return this->size_ == comp.size_ &&
    b75a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    b75c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b75e:	429a      	cmp	r2, r3
    b760:	d02d      	beq.n	b7be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
    b762:	2300      	movs	r3, #0

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    b764:	2b00      	cmp	r3, #0
    b766:	d13c      	bne.n	b7e2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x266>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
    b768:	1e63      	subs	r3, r4, #1
    b76a:	461a      	mov	r2, r3
    b76c:	2a00      	cmp	r2, #0
    b76e:	f2c0 80ad 	blt.w	b8cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    TFLITE_DCHECK_GE(i, 0);
    b772:	f2c0 8094 	blt.w	b89e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x322>
    TFLITE_DCHECK_LT(i, size_);
    b776:	9918      	ldr	r1, [sp, #96]	; 0x60
    b778:	428a      	cmp	r2, r1
    b77a:	f280 8092 	bge.w	b8a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x326>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b77e:	2905      	cmp	r1, #5
    b780:	f340 8091 	ble.w	b8a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x32a>
    b784:	9919      	ldr	r1, [sp, #100]	; 0x64
    b786:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b78a:	2a00      	cmp	r2, #0
    b78c:	f2c0 8090 	blt.w	b8b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x334>
    TFLITE_DCHECK_LT(i, size_);
    b790:	9920      	ldr	r1, [sp, #128]	; 0x80
    b792:	428a      	cmp	r2, r1
    b794:	f280 808e 	bge.w	b8b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x338>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b798:	2905      	cmp	r1, #5
    b79a:	f340 808d 	ble.w	b8b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33c>
    b79e:	9921      	ldr	r1, [sp, #132]	; 0x84
    b7a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
    b7a4:	4281      	cmp	r1, r0
    b7a6:	f000 808c 	beq.w	b8c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x346>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
    b7aa:	2801      	cmp	r0, #1
    b7ac:	f000 808b 	beq.w	b8c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34a>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
    b7b0:	2901      	cmp	r1, #1
    b7b2:	f040 809e 	bne.w	b8f2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x376>
      params->broadcast_category =
    b7b6:	2203      	movs	r2, #3
    b7b8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
    b7bc:	e086      	b.n	b8cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    b7be:	2a05      	cmp	r2, #5
    b7c0:	dd01      	ble.n	b7c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24a>
    b7c2:	9819      	ldr	r0, [sp, #100]	; 0x64
    b7c4:	e000      	b.n	b7c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x24c>
    b7c6:	a819      	add	r0, sp, #100	; 0x64
    b7c8:	2b05      	cmp	r3, #5
    b7ca:	dd01      	ble.n	b7d0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x254>
    b7cc:	9921      	ldr	r1, [sp, #132]	; 0x84
    b7ce:	e000      	b.n	b7d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x256>
    b7d0:	a921      	add	r1, sp, #132	; 0x84
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
    b7d2:	0092      	lsls	r2, r2, #2
    b7d4:	f00d f977 	bl	18ac6 <memcmp>
    return this->size_ == comp.size_ &&
    b7d8:	b908      	cbnz	r0, b7de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x262>
    b7da:	2301      	movs	r3, #1
    b7dc:	e7c2      	b.n	b764 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    b7de:	2300      	movs	r3, #0
    b7e0:	e7c0      	b.n	b764 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1e8>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    b7e2:	2301      	movs	r3, #1
    b7e4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
    return false;
    b7e8:	2300      	movs	r3, #0
    b7ea:	9305      	str	r3, [sp, #20]
    if (size_ > kMaxSmallSize) {
    b7ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b7ee:	2b05      	cmp	r3, #5
    b7f0:	dd03      	ble.n	b7fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
      delete[] dims_pointer_;
    b7f2:	9821      	ldr	r0, [sp, #132]	; 0x84
    b7f4:	b108      	cbz	r0, b7fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x27e>
    b7f6:	f00d f938 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b7fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b7fc:	2b05      	cmp	r3, #5
    b7fe:	dd03      	ble.n	b808 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
      delete[] dims_pointer_;
    b800:	9819      	ldr	r0, [sp, #100]	; 0x64
    b802:	b108      	cbz	r0, b808 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
    b804:	f00d f931 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b808:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b80a:	2b05      	cmp	r3, #5
    b80c:	dd03      	ble.n	b816 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
      delete[] dims_pointer_;
    b80e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b810:	b108      	cbz	r0, b816 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29a>
    b812:	f00d f92a 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b816:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b818:	2b05      	cmp	r3, #5
    b81a:	dd03      	ble.n	b824 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
      delete[] dims_pointer_;
    b81c:	9849      	ldr	r0, [sp, #292]	; 0x124
    b81e:	b108      	cbz	r0, b824 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2a8>
    b820:	f00d f923 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b824:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b826:	2b05      	cmp	r3, #5
    b828:	dd03      	ble.n	b832 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
      delete[] dims_pointer_;
    b82a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b82c:	b108      	cbz	r0, b832 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2b6>
    b82e:	f00d f91c 	bl	18a6a <_ZdaPv>
  switch (output->type) {
    b832:	7a28      	ldrb	r0, [r5, #8]
    b834:	2807      	cmp	r0, #7
    b836:	f000 843d 	beq.w	c0b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb38>
    b83a:	2809      	cmp	r0, #9
    b83c:	f040 86e6 	bne.w	c60c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1090>
      if (need_broadcast) {
    b840:	9b05      	ldr	r3, [sp, #20]
    b842:	2b00      	cmp	r3, #0
    b844:	f000 838a 	beq.w	bf5c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9e0>
            op_params, tflite::micro::GetTensorShape(input1),
    b848:	4639      	mov	r1, r7
    b84a:	a84e      	add	r0, sp, #312	; 0x138
    b84c:	f00b fd4d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b850:	4638      	mov	r0, r7
    b852:	f00a fb95 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b856:	4680      	mov	r8, r0
            tflite::micro::GetTensorShape(input2),
    b858:	4631      	mov	r1, r6
    b85a:	a854      	add	r0, sp, #336	; 0x150
    b85c:	f00b fd45 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b860:	4630      	mov	r0, r6
    b862:	f00a fb8d 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b866:	4681      	mov	r9, r0
            tflite::micro::GetTensorShape(output),
    b868:	4629      	mov	r1, r5
    b86a:	a85a      	add	r0, sp, #360	; 0x168
    b86c:	f00b fd3d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::BroadcastAdd4DSlow(
    b870:	4628      	mov	r0, r5
    b872:	f00a fb8b 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b876:	4682      	mov	sl, r0
      : size_(0) {
    b878:	2300      	movs	r3, #0
    b87a:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b87c:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    b87e:	2b04      	cmp	r3, #4
    b880:	f300 812a 	bgt.w	bad8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x55c>
    if (size_ > kMaxSmallSize) {
    b884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b886:	2b05      	cmp	r3, #5
    b888:	dd03      	ble.n	b892 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
      delete[] dims_pointer_;
    b88a:	980d      	ldr	r0, [sp, #52]	; 0x34
    b88c:	b108      	cbz	r0, b892 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x316>
    b88e:	f00d f8ec 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    b892:	2304      	movs	r3, #4
    b894:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
    b896:	984e      	ldr	r0, [sp, #312]	; 0x138
    const int size_increase = new_shape_size - shape.DimensionsCount();
    b898:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    b89a:	2300      	movs	r3, #0
    b89c:	e127      	b.n	baee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x572>
    TFLITE_DCHECK_GE(i, 0);
    b89e:	f00d f8f9 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8a2:	f00d f8f7 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8a6:	a918      	add	r1, sp, #96	; 0x60
    b8a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b8ac:	6848      	ldr	r0, [r1, #4]
    b8ae:	e76c      	b.n	b78a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20e>
    TFLITE_DCHECK_GE(i, 0);
    b8b0:	f00d f8f0 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b8b4:	f00d f8ee 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8b8:	a920      	add	r1, sp, #128	; 0x80
    b8ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b8be:	6849      	ldr	r1, [r1, #4]
    b8c0:	e770      	b.n	b7a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x228>
  for (int i = dims_count - 1; i >= 0; --i) {
    b8c2:	3a01      	subs	r2, #1
    b8c4:	e752      	b.n	b76c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1f0>
      params->broadcast_category =
    b8c6:	2202      	movs	r2, #2
    b8c8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
      return true;
    }
  }

  if (params->broadcast_category !=
    b8cc:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
    b8d0:	1e8a      	subs	r2, r1, #2
    b8d2:	b2d2      	uxtb	r2, r2
  if (params->broadcast_category !=
    b8d4:	2a01      	cmp	r2, #1
    b8d6:	d812      	bhi.n	b8fe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x382>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
    b8d8:	2903      	cmp	r1, #3
    b8da:	d012      	beq.n	b902 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x386>
    b8dc:	aa18      	add	r2, sp, #96	; 0x60
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
    b8de:	2903      	cmp	r1, #3
    b8e0:	d011      	beq.n	b906 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38a>
    b8e2:	a920      	add	r1, sp, #128	; 0x80
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
    b8e4:	2001      	movs	r0, #1
    b8e6:	903c      	str	r0, [sp, #240]	; 0xf0
  params->broadcast_shape[1] = 1;
    b8e8:	903d      	str	r0, [sp, #244]	; 0xf4
  params->broadcast_shape[2] = 1;
    b8ea:	903e      	str	r0, [sp, #248]	; 0xf8
  params->broadcast_shape[3] = 1;
    b8ec:	903f      	str	r0, [sp, #252]	; 0xfc
  params->broadcast_shape[4] = 1;
    b8ee:	9040      	str	r0, [sp, #256]	; 0x100
    b8f0:	e021      	b.n	b936 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ba>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    b8f2:	2304      	movs	r3, #4
    b8f4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
      return true;
    b8f8:	2301      	movs	r3, #1
    b8fa:	9305      	str	r3, [sp, #20]
    b8fc:	e776      	b.n	b7ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_DCHECK(false);
    b8fe:	f00d f8c9 	bl	18a94 <abort>
  const RuntimeShape* shape_a =
    b902:	aa20      	add	r2, sp, #128	; 0x80
    b904:	e7eb      	b.n	b8de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x362>
  const RuntimeShape* shape_b =
    b906:	a918      	add	r1, sp, #96	; 0x60
    b908:	e7ec      	b.n	b8e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x368>
    TFLITE_DCHECK_GE(i, 0);
    b90a:	f00d f8c3 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b90e:	f00d f8c1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b912:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b916:	6844      	ldr	r4, [r0, #4]
    b918:	e018      	b.n	b94c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3d0>
    TFLITE_DCHECK_GE(i, 0);
    b91a:	f00d f8bb 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b91e:	f00d f8b9 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b922:	6848      	ldr	r0, [r1, #4]
    b924:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b928:	42a0      	cmp	r0, r4
    b92a:	d12e      	bne.n	b98a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    params->broadcast_shape[4] *= shape_b->Dims(i);
    b92c:	9c40      	ldr	r4, [sp, #256]	; 0x100
    b92e:	fb00 f004 	mul.w	r0, r0, r4
    b932:	9040      	str	r0, [sp, #256]	; 0x100
    --i;
    b934:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b936:	2b00      	cmp	r3, #0
    b938:	db27      	blt.n	b98a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x40e>
    TFLITE_DCHECK_GE(i, 0);
    b93a:	dbe6      	blt.n	b90a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38e>
    TFLITE_DCHECK_LT(i, size_);
    b93c:	6810      	ldr	r0, [r2, #0]
    b93e:	4283      	cmp	r3, r0
    b940:	dae5      	bge.n	b90e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x392>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b942:	2805      	cmp	r0, #5
    b944:	dde5      	ble.n	b912 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x396>
    b946:	6850      	ldr	r0, [r2, #4]
    b948:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b94c:	2b00      	cmp	r3, #0
    b94e:	dbe4      	blt.n	b91a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x39e>
    TFLITE_DCHECK_LT(i, size_);
    b950:	6808      	ldr	r0, [r1, #0]
    b952:	4283      	cmp	r3, r0
    b954:	dae3      	bge.n	b91e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b956:	2805      	cmp	r0, #5
    b958:	dce3      	bgt.n	b922 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3a6>
    b95a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b95e:	6840      	ldr	r0, [r0, #4]
    b960:	e7e2      	b.n	b928 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ac>
    TFLITE_DCHECK_GE(i, 0);
    b962:	f00d f897 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b966:	f00d f895 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b96a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b96e:	6840      	ldr	r0, [r0, #4]
    b970:	e016      	b.n	b9a0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x424>
    TFLITE_DCHECK_GE(i, 0);
    b972:	f00d f88f 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b976:	f00d f88d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b97a:	6848      	ldr	r0, [r1, #4]
    b97c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
    params->broadcast_shape[3] *= shape_b->Dims(i);
    b980:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
    b982:	fb00 f004 	mul.w	r0, r0, r4
    b986:	903f      	str	r0, [sp, #252]	; 0xfc
    --i;
    b988:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
    b98a:	2b00      	cmp	r3, #0
    b98c:	db2b      	blt.n	b9e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b98e:	dbe8      	blt.n	b962 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3e6>
    TFLITE_DCHECK_LT(i, size_);
    b990:	6810      	ldr	r0, [r2, #0]
    b992:	4283      	cmp	r3, r0
    b994:	dae7      	bge.n	b966 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b996:	2805      	cmp	r0, #5
    b998:	dde7      	ble.n	b96a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3ee>
    b99a:	6850      	ldr	r0, [r2, #4]
    b99c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    b9a0:	2801      	cmp	r0, #1
    b9a2:	d120      	bne.n	b9e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x46a>
    TFLITE_DCHECK_GE(i, 0);
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	dbe4      	blt.n	b972 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3f6>
    TFLITE_DCHECK_LT(i, size_);
    b9a8:	6808      	ldr	r0, [r1, #0]
    b9aa:	4283      	cmp	r3, r0
    b9ac:	dae3      	bge.n	b976 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9ae:	2805      	cmp	r0, #5
    b9b0:	dce3      	bgt.n	b97a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3fe>
    b9b2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    b9b6:	6840      	ldr	r0, [r0, #4]
    b9b8:	e7e2      	b.n	b980 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x404>
    TFLITE_DCHECK_GE(i, 0);
    b9ba:	f00d f86b 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b9be:	f00d f869 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9c2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    b9c6:	6840      	ldr	r0, [r0, #4]
    b9c8:	e018      	b.n	b9fc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x480>
    TFLITE_DCHECK_GE(i, 0);
    b9ca:	f00d f863 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    b9ce:	f00d f861 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9d2:	684c      	ldr	r4, [r1, #4]
    b9d4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b9d8:	4284      	cmp	r4, r0
    b9da:	d12e      	bne.n	ba3a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    params->broadcast_shape[2] *= shape_a->Dims(i);
    b9dc:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
    b9de:	fb00 f004 	mul.w	r0, r0, r4
    b9e2:	903e      	str	r0, [sp, #248]	; 0xf8
    --i;
    b9e4:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    b9e6:	2b00      	cmp	r3, #0
    b9e8:	db27      	blt.n	ba3a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4be>
    TFLITE_DCHECK_GE(i, 0);
    b9ea:	dbe6      	blt.n	b9ba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x43e>
    TFLITE_DCHECK_LT(i, size_);
    b9ec:	6810      	ldr	r0, [r2, #0]
    b9ee:	4283      	cmp	r3, r0
    b9f0:	dae5      	bge.n	b9be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x442>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9f2:	2805      	cmp	r0, #5
    b9f4:	dde5      	ble.n	b9c2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x446>
    b9f6:	6850      	ldr	r0, [r2, #4]
    b9f8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	dbe4      	blt.n	b9ca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x44e>
    TFLITE_DCHECK_LT(i, size_);
    ba00:	680c      	ldr	r4, [r1, #0]
    ba02:	42a3      	cmp	r3, r4
    ba04:	dae3      	bge.n	b9ce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x452>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba06:	2c05      	cmp	r4, #5
    ba08:	dce3      	bgt.n	b9d2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x456>
    ba0a:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    ba0e:	6864      	ldr	r4, [r4, #4]
    ba10:	e7e2      	b.n	b9d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
    TFLITE_DCHECK_GE(i, 0);
    ba12:	f00d f83f 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba16:	f00d f83d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba1a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    ba1e:	6840      	ldr	r0, [r0, #4]
    ba20:	e016      	b.n	ba50 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4d4>
    TFLITE_DCHECK_GE(i, 0);
    ba22:	f00d f837 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba26:	f00d f835 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba2a:	6850      	ldr	r0, [r2, #4]
    ba2c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
    params->broadcast_shape[1] *= shape_a->Dims(i);
    ba30:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
    ba32:	fb00 f004 	mul.w	r0, r0, r4
    ba36:	903d      	str	r0, [sp, #244]	; 0xf4
    --i;
    ba38:	3b01      	subs	r3, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	db2b      	blt.n	ba96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    ba3e:	dbe8      	blt.n	ba12 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x496>
    TFLITE_DCHECK_LT(i, size_);
    ba40:	6808      	ldr	r0, [r1, #0]
    ba42:	4283      	cmp	r3, r0
    ba44:	dae7      	bge.n	ba16 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba46:	2805      	cmp	r0, #5
    ba48:	dde7      	ble.n	ba1a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49e>
    ba4a:	6848      	ldr	r0, [r1, #4]
    ba4c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    ba50:	2801      	cmp	r0, #1
    ba52:	d120      	bne.n	ba96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x51a>
    TFLITE_DCHECK_GE(i, 0);
    ba54:	2b00      	cmp	r3, #0
    ba56:	dbe4      	blt.n	ba22 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a6>
    TFLITE_DCHECK_LT(i, size_);
    ba58:	6810      	ldr	r0, [r2, #0]
    ba5a:	4283      	cmp	r3, r0
    ba5c:	dae3      	bge.n	ba26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba5e:	2805      	cmp	r0, #5
    ba60:	dce3      	bgt.n	ba2a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ae>
    ba62:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    ba66:	6840      	ldr	r0, [r0, #4]
    ba68:	e7e2      	b.n	ba30 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
    TFLITE_DCHECK_GE(i, 0);
    ba6a:	f00d f813 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba6e:	f00d f811 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba72:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    ba76:	6844      	ldr	r4, [r0, #4]
    ba78:	e018      	b.n	baac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x530>
    TFLITE_DCHECK_GE(i, 0);
    ba7a:	f00d f80b 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba7e:	f00d f809 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba82:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    ba86:	6840      	ldr	r0, [r0, #4]
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    ba88:	42a0      	cmp	r0, r4
    ba8a:	d11a      	bne.n	bac2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    params->broadcast_shape[0] *= shape_b->Dims(i);
    ba8c:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
    ba8e:	fb00 f004 	mul.w	r0, r0, r4
    ba92:	903c      	str	r0, [sp, #240]	; 0xf0
    --i;
    ba94:	3b01      	subs	r3, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    ba96:	2b00      	cmp	r3, #0
    ba98:	db13      	blt.n	bac2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x546>
    TFLITE_DCHECK_GE(i, 0);
    ba9a:	dbe6      	blt.n	ba6a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ee>
    TFLITE_DCHECK_LT(i, size_);
    ba9c:	6810      	ldr	r0, [r2, #0]
    ba9e:	4283      	cmp	r3, r0
    baa0:	dae5      	bge.n	ba6e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baa2:	2805      	cmp	r0, #5
    baa4:	dde5      	ble.n	ba72 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f6>
    baa6:	6850      	ldr	r0, [r2, #4]
    baa8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    baac:	2b00      	cmp	r3, #0
    baae:	dbe4      	blt.n	ba7a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4fe>
    TFLITE_DCHECK_LT(i, size_);
    bab0:	6808      	ldr	r0, [r1, #0]
    bab2:	4283      	cmp	r3, r0
    bab4:	dae3      	bge.n	ba7e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x502>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bab6:	2805      	cmp	r0, #5
    bab8:	dde3      	ble.n	ba82 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x506>
    baba:	6848      	ldr	r0, [r1, #4]
    babc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    bac0:	e7e2      	b.n	ba88 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x50c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    bac2:	2b00      	cmp	r3, #0
    bac4:	db05      	blt.n	bad2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x556>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
    bac6:	2304      	movs	r3, #4
    bac8:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  }
  return true;
    bacc:	2301      	movs	r3, #1
    bace:	9305      	str	r3, [sp, #20]
    bad0:	e68c      	b.n	b7ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    bad2:	2301      	movs	r3, #1
    bad4:	9305      	str	r3, [sp, #20]
    bad6:	e689      	b.n	b7ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bad8:	f00c ffdc 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    badc:	f00c ffda 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bae0:	f00c ffd8 	bl	18a94 <abort>
      dims_pointer_[i] = val;
    bae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bae6:	2101      	movs	r1, #1
    bae8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    baec:	3301      	adds	r3, #1
    baee:	4298      	cmp	r0, r3
    baf0:	dd0c      	ble.n	bb0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x590>
    TFLITE_DCHECK_GE(i, 0);
    baf2:	2b00      	cmp	r3, #0
    baf4:	dbf2      	blt.n	badc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x560>
    TFLITE_DCHECK_LT(i, size_);
    baf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    baf8:	4293      	cmp	r3, r2
    bafa:	daf1      	bge.n	bae0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x564>
    if (size_ > kMaxSmallSize) {
    bafc:	2a05      	cmp	r2, #5
    bafe:	dcf1      	bgt.n	bae4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x568>
      dims_[i] = val;
    bb00:	aa0c      	add	r2, sp, #48	; 0x30
    bb02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bb06:	2101      	movs	r1, #1
    bb08:	6051      	str	r1, [r2, #4]
    bb0a:	e7ef      	b.n	baec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x570>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bb0e:	2b05      	cmp	r3, #5
    bb10:	dd01      	ble.n	bb16 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59a>
    bb12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bb14:	e000      	b.n	bb18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x59c>
    bb16:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb1c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    bb1e:	2a05      	cmp	r2, #5
    bb20:	dd01      	ble.n	bb26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5aa>
    bb22:	994f      	ldr	r1, [sp, #316]	; 0x13c
    bb24:	e000      	b.n	bb28 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ac>
    bb26:	a94f      	add	r1, sp, #316	; 0x13c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb28:	0092      	lsls	r2, r2, #2
    bb2a:	f00c ffda 	bl	18ae2 <memcpy>
      : size_(0) {
    bb2e:	2300      	movs	r3, #0
    bb30:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bb32:	9b54      	ldr	r3, [sp, #336]	; 0x150
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bb34:	2b04      	cmp	r3, #4
    bb36:	dc0c      	bgt.n	bb52 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d6>
    if (size_ > kMaxSmallSize) {
    bb38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb3a:	2b05      	cmp	r3, #5
    bb3c:	dd03      	ble.n	bb46 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
      delete[] dims_pointer_;
    bb3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bb40:	b108      	cbz	r0, bb46 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ca>
    bb42:	f00c ff92 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    bb46:	2304      	movs	r3, #4
    bb48:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bb4a:	9854      	ldr	r0, [sp, #336]	; 0x150
    const int size_increase = new_shape_size - shape.DimensionsCount();
    bb4c:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    bb4e:	2300      	movs	r3, #0
    bb50:	e00b      	b.n	bb6a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ee>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bb52:	f00c ff9f 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    bb56:	f00c ff9d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bb5a:	f00c ff9b 	bl	18a94 <abort>
      dims_[i] = val;
    bb5e:	aa12      	add	r2, sp, #72	; 0x48
    bb60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bb64:	2101      	movs	r1, #1
    bb66:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
    bb68:	3301      	adds	r3, #1
    bb6a:	4298      	cmp	r0, r3
    bb6c:	dd0b      	ble.n	bb86 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x60a>
    TFLITE_DCHECK_GE(i, 0);
    bb6e:	2b00      	cmp	r3, #0
    bb70:	dbf1      	blt.n	bb56 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5da>
    TFLITE_DCHECK_LT(i, size_);
    bb72:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bb74:	4293      	cmp	r3, r2
    bb76:	daf0      	bge.n	bb5a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5de>
    if (size_ > kMaxSmallSize) {
    bb78:	2a05      	cmp	r2, #5
    bb7a:	ddf0      	ble.n	bb5e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e2>
      dims_pointer_[i] = val;
    bb7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bb7e:	2101      	movs	r1, #1
    bb80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    bb84:	e7f0      	b.n	bb68 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb86:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bb88:	2b05      	cmp	r3, #5
    bb8a:	dd0c      	ble.n	bba6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
    bb8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb92:	9a54      	ldr	r2, [sp, #336]	; 0x150
    bb94:	2a05      	cmp	r2, #5
    bb96:	dd08      	ble.n	bbaa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62e>
    bb98:	9955      	ldr	r1, [sp, #340]	; 0x154
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bb9a:	0092      	lsls	r2, r2, #2
    bb9c:	f00c ffa1 	bl	18ae2 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
    bba0:	2303      	movs	r3, #3
  int desc_stride = 1;
    bba2:	2201      	movs	r2, #1
  }
    bba4:	e017      	b.n	bbd6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x65a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bba6:	ab13      	add	r3, sp, #76	; 0x4c
    bba8:	e7f1      	b.n	bb8e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x612>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bbaa:	a955      	add	r1, sp, #340	; 0x154
    bbac:	e7f5      	b.n	bb9a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x61e>
    TFLITE_DCHECK_GE(i, 0);
    bbae:	f00c ff71 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bbb2:	f00c ff6f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbb6:	a90c      	add	r1, sp, #48	; 0x30
    bbb8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bbbc:	6848      	ldr	r0, [r1, #4]
    bbbe:	e015      	b.n	bbec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x670>
    TFLITE_DCHECK_GE(i, 0);
    bbc0:	f00c ff68 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bbc4:	f00c ff66 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbc8:	a90c      	add	r1, sp, #48	; 0x30
    bbca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bbce:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    bbd0:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    bbd4:	3b01      	subs	r3, #1
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	db19      	blt.n	bc0e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x692>
    TFLITE_DCHECK_GE(i, 0);
    bbda:	dbe8      	blt.n	bbae <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x632>
    TFLITE_DCHECK_LT(i, size_);
    bbdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    bbde:	428b      	cmp	r3, r1
    bbe0:	dae7      	bge.n	bbb2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x636>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbe2:	2905      	cmp	r1, #5
    bbe4:	dde7      	ble.n	bbb6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
    bbe6:	990d      	ldr	r1, [sp, #52]	; 0x34
    bbe8:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    bbec:	a918      	add	r1, sp, #96	; 0x60
    bbee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    bbf2:	1d18      	adds	r0, r3, #4
    bbf4:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	dbe1      	blt.n	bbc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x644>
    TFLITE_DCHECK_LT(i, size_);
    bbfc:	990c      	ldr	r1, [sp, #48]	; 0x30
    bbfe:	428b      	cmp	r3, r1
    bc00:	dae0      	bge.n	bbc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc02:	2905      	cmp	r1, #5
    bc04:	dde0      	ble.n	bbc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64c>
    bc06:	990d      	ldr	r1, [sp, #52]	; 0x34
    bc08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    bc0c:	e7e0      	b.n	bbd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x654>
  for (int i = N - 1; i >= 0; --i) {
    bc0e:	2303      	movs	r3, #3
  int desc_stride = 1;
    bc10:	2201      	movs	r2, #1
    bc12:	e013      	b.n	bc3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6c0>
    TFLITE_DCHECK_GE(i, 0);
    bc14:	f00c ff3e 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc18:	f00c ff3c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc1c:	a912      	add	r1, sp, #72	; 0x48
    bc1e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bc22:	6848      	ldr	r0, [r1, #4]
    bc24:	e015      	b.n	bc52 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6d6>
    TFLITE_DCHECK_GE(i, 0);
    bc26:	f00c ff35 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc2a:	f00c ff33 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc2e:	a912      	add	r1, sp, #72	; 0x48
    bc30:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bc34:	6849      	ldr	r1, [r1, #4]
    desc_stride *= input_shape.Dims(i);
    bc36:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = N - 1; i >= 0; --i) {
    bc3a:	3b01      	subs	r3, #1
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	db19      	blt.n	bc74 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6f8>
    TFLITE_DCHECK_GE(i, 0);
    bc40:	dbe8      	blt.n	bc14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x698>
    TFLITE_DCHECK_LT(i, size_);
    bc42:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc44:	428b      	cmp	r3, r1
    bc46:	dae7      	bge.n	bc18 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x69c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc48:	2905      	cmp	r1, #5
    bc4a:	dde7      	ble.n	bc1c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6a0>
    bc4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bc4e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
    bc52:	a920      	add	r1, sp, #128	; 0x80
    bc54:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
    bc58:	1d18      	adds	r0, r3, #4
    bc5a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bc5e:	2b00      	cmp	r3, #0
    bc60:	dbe1      	blt.n	bc26 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6aa>
    TFLITE_DCHECK_LT(i, size_);
    bc62:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc64:	428b      	cmp	r3, r1
    bc66:	dae0      	bge.n	bc2a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc68:	2905      	cmp	r1, #5
    bc6a:	dde0      	ble.n	bc2e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6b2>
    bc6c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bc6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    bc72:	e7e0      	b.n	bc36 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6ba>
  for (int i = 0; i < N; ++i) {
    bc74:	2300      	movs	r3, #0
    bc76:	e019      	b.n	bcac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x730>
    TFLITE_DCHECK_GE(i, 0);
    bc78:	f00c ff0c 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc7c:	f00c ff0a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc80:	aa0c      	add	r2, sp, #48	; 0x30
    bc82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bc86:	6852      	ldr	r2, [r2, #4]
    bc88:	e01c      	b.n	bcc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x748>
    TFLITE_DCHECK_GE(i, 0);
    bc8a:	f00c ff03 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bc8e:	f00c ff01 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bc92:	a912      	add	r1, sp, #72	; 0x48
    bc94:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    bc98:	6849      	ldr	r1, [r1, #4]
    bc9a:	e01d      	b.n	bcd8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x75c>
        desc0_out->strides[i] = 0;
    bc9c:	a818      	add	r0, sp, #96	; 0x60
    bc9e:	1d1a      	adds	r2, r3, #4
    bca0:	2400      	movs	r4, #0
    bca2:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
    bca6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
    bcaa:	3301      	adds	r3, #1
    bcac:	2b03      	cmp	r3, #3
    bcae:	dc23      	bgt.n	bcf8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x77c>
    TFLITE_DCHECK_GE(i, 0);
    bcb0:	2b00      	cmp	r3, #0
    bcb2:	dbe1      	blt.n	bc78 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x6fc>
    TFLITE_DCHECK_LT(i, size_);
    bcb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bcb6:	4293      	cmp	r3, r2
    bcb8:	dae0      	bge.n	bc7c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x700>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bcba:	2a05      	cmp	r2, #5
    bcbc:	dde0      	ble.n	bc80 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x704>
    bcbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bcc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	dbe0      	blt.n	bc8a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70e>
    TFLITE_DCHECK_LT(i, size_);
    bcc8:	9912      	ldr	r1, [sp, #72]	; 0x48
    bcca:	428b      	cmp	r3, r1
    bccc:	dadf      	bge.n	bc8e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x712>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bcce:	2905      	cmp	r1, #5
    bcd0:	dddf      	ble.n	bc92 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x716>
    bcd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bcd4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
    bcd8:	4291      	cmp	r1, r2
    bcda:	d0e6      	beq.n	bcaa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
      if (extent0 == 1) {
    bcdc:	2a01      	cmp	r2, #1
    bcde:	d0dd      	beq.n	bc9c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x720>
        TFLITE_DCHECK_EQ(extent1, 1);
    bce0:	2901      	cmp	r1, #1
    bce2:	d107      	bne.n	bcf4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x778>
        desc1_out->strides[i] = 0;
    bce4:	a820      	add	r0, sp, #128	; 0x80
    bce6:	1d19      	adds	r1, r3, #4
    bce8:	2400      	movs	r4, #0
    bcea:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
    bcee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    bcf2:	e7da      	b.n	bcaa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x72e>
        TFLITE_DCHECK_EQ(extent1, 1);
    bcf4:	f00c fece 	bl	18a94 <abort>
    if (size_ > kMaxSmallSize) {
    bcf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bcfa:	2b05      	cmp	r3, #5
    bcfc:	dd03      	ble.n	bd06 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
      delete[] dims_pointer_;
    bcfe:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bd00:	b108      	cbz	r0, bd06 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78a>
    bd02:	f00c feb2 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bd06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd08:	2b05      	cmp	r3, #5
    bd0a:	dd03      	ble.n	bd14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
      delete[] dims_pointer_;
    bd0c:	980d      	ldr	r0, [sp, #52]	; 0x34
    bd0e:	b108      	cbz	r0, bd14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x798>
    bd10:	f00c feab 	bl	18a6a <_ZdaPv>
      : size_(0) {
    bd14:	2300      	movs	r3, #0
    bd16:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bd18:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bd1a:	2b04      	cmp	r3, #4
    bd1c:	dc0c      	bgt.n	bd38 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7bc>
    if (size_ > kMaxSmallSize) {
    bd1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd20:	2b05      	cmp	r3, #5
    bd22:	dd03      	ble.n	bd2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
      delete[] dims_pointer_;
    bd24:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bd26:	b108      	cbz	r0, bd2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7b0>
    bd28:	f00c fe9f 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
    bd2c:	2304      	movs	r3, #4
    bd2e:	9312      	str	r3, [sp, #72]	; 0x48
  inline int32_t DimensionsCount() const { return size_; }
    bd30:	985a      	ldr	r0, [sp, #360]	; 0x168
    const int size_increase = new_shape_size - shape.DimensionsCount();
    bd32:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
    bd34:	2300      	movs	r3, #0
    bd36:	e00a      	b.n	bd4e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d2>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    bd38:	f00c feac 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    bd3c:	f00c feaa 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    bd40:	f00c fea8 	bl	18a94 <abort>
      dims_pointer_[i] = val;
    bd44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bd46:	2101      	movs	r1, #1
    bd48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < size_increase; ++i) {
    bd4c:	3301      	adds	r3, #1
    bd4e:	4298      	cmp	r0, r3
    bd50:	dd0c      	ble.n	bd6c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f0>
    TFLITE_DCHECK_GE(i, 0);
    bd52:	2b00      	cmp	r3, #0
    bd54:	dbf2      	blt.n	bd3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c0>
    TFLITE_DCHECK_LT(i, size_);
    bd56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bd58:	4293      	cmp	r3, r2
    bd5a:	daf1      	bge.n	bd40 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c4>
    if (size_ > kMaxSmallSize) {
    bd5c:	2a05      	cmp	r2, #5
    bd5e:	dcf1      	bgt.n	bd44 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c8>
      dims_[i] = val;
    bd60:	aa12      	add	r2, sp, #72	; 0x48
    bd62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    bd66:	2101      	movs	r1, #1
    bd68:	6051      	str	r1, [r2, #4]
    bd6a:	e7ef      	b.n	bd4c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7d0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd6e:	2b05      	cmp	r3, #5
    bd70:	dd16      	ble.n	bda0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x824>
    bd72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bd74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bd78:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    bd7a:	2a05      	cmp	r2, #5
    bd7c:	dd12      	ble.n	bda4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x828>
    bd7e:	995b      	ldr	r1, [sp, #364]	; 0x16c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
    bd80:	0092      	lsls	r2, r2, #2
    bd82:	f00c feae 	bl	18ae2 <memcpy>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    bd86:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
    bd88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	dd0c      	ble.n	bda8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x82c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bd8e:	2b05      	cmp	r3, #5
    bd90:	dd0c      	ble.n	bdac <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x830>
    bd92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bd94:	681b      	ldr	r3, [r3, #0]
    bd96:	429f      	cmp	r7, r3
    bd98:	f280 80c2 	bge.w	bf20 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a4>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    bd9c:	2600      	movs	r6, #0
    bd9e:	e0b0      	b.n	bf02 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x986>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bda0:	ab13      	add	r3, sp, #76	; 0x4c
    bda2:	e7e7      	b.n	bd74 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7f8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bda4:	a95b      	add	r1, sp, #364	; 0x16c
    bda6:	e7eb      	b.n	bd80 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x804>
    TFLITE_DCHECK_LT(i, size_);
    bda8:	f00c fe74 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bdae:	e7f2      	b.n	bd96 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x81a>
    TFLITE_DCHECK_LT(i, size_);
    bdb0:	f00c fe70 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bdb6:	e0ad      	b.n	bf14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x998>
    TFLITE_DCHECK_LT(i, size_);
    bdb8:	f00c fe6c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bdbe:	e09b      	b.n	bef8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x97c>
    TFLITE_DCHECK_LT(i, size_);
    bdc0:	f00c fe68 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bdc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    bdc6:	429c      	cmp	r4, r3
    bdc8:	f280 808c 	bge.w	bee4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x968>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bdcc:	2f00      	cmp	r7, #0
    bdce:	db6f      	blt.n	beb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
    bdd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bdd2:	429f      	cmp	r7, r3
    bdd4:	da6c      	bge.n	beb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x934>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bdd6:	2e00      	cmp	r6, #0
    bdd8:	db6c      	blt.n	beb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
    bdda:	9b19      	ldr	r3, [sp, #100]	; 0x64
    bddc:	429e      	cmp	r6, r3
    bdde:	da69      	bge.n	beb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x938>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bde0:	2d00      	cmp	r5, #0
    bde2:	db69      	blt.n	beb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
    bde4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bde6:	429d      	cmp	r5, r3
    bde8:	da66      	bge.n	beb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x93c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bdea:	2c00      	cmp	r4, #0
    bdec:	db66      	blt.n	bebc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
    bdee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bdf0:	429c      	cmp	r4, r3
    bdf2:	da63      	bge.n	bebc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x940>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    bdf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    bdf6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    bdf8:	fb02 f206 	mul.w	r2, r2, r6
    bdfc:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    be00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be02:	991e      	ldr	r1, [sp, #120]	; 0x78
    be04:	fb01 f105 	mul.w	r1, r1, r5
    be08:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    be0c:	4413      	add	r3, r2
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
    be0e:	f918 0003 	ldrsb.w	r0, [r8, r3]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    be12:	2f00      	cmp	r7, #0
    be14:	db54      	blt.n	bec0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
    be16:	9b20      	ldr	r3, [sp, #128]	; 0x80
    be18:	429f      	cmp	r7, r3
    be1a:	da51      	bge.n	bec0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x944>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    be1c:	2e00      	cmp	r6, #0
    be1e:	db51      	blt.n	bec4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
    be20:	9b21      	ldr	r3, [sp, #132]	; 0x84
    be22:	429e      	cmp	r6, r3
    be24:	da4e      	bge.n	bec4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x948>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    be26:	2d00      	cmp	r5, #0
    be28:	db4e      	blt.n	bec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
    be2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    be2c:	429d      	cmp	r5, r3
    be2e:	da4b      	bge.n	bec8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x94c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    be30:	2c00      	cmp	r4, #0
    be32:	db4b      	blt.n	becc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
    be34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    be36:	429c      	cmp	r4, r3
    be38:	da48      	bge.n	becc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x950>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    be3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    be3e:	fb02 f206 	mul.w	r2, r2, r6
    be42:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
    be46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
    be48:	9926      	ldr	r1, [sp, #152]	; 0x98
    be4a:	fb01 f105 	mul.w	r1, r1, r5
    be4e:	fb02 1204 	mla	r2, r2, r4, r1
         i3 * desc.strides[3];
    be52:	4413      	add	r3, r2
    be54:	f919 1003 	ldrsb.w	r1, [r9, r3]
  inline int32_t DimensionsCount() const { return size_; }
    be58:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    be5a:	2b04      	cmp	r3, #4
    be5c:	d138      	bne.n	bed0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x954>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    be5e:	2f00      	cmp	r7, #0
    be60:	db38      	blt.n	bed4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
    be62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    be64:	429f      	cmp	r7, r3
    be66:	da35      	bge.n	bed4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x958>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    be68:	2e00      	cmp	r6, #0
    be6a:	db35      	blt.n	bed8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
    be6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    be6e:	4296      	cmp	r6, r2
    be70:	da32      	bge.n	bed8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x95c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    be72:	2d00      	cmp	r5, #0
    be74:	db32      	blt.n	bedc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
    be76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be78:	429d      	cmp	r5, r3
    be7a:	da2f      	bge.n	bedc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x960>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    be7c:	2c00      	cmp	r4, #0
    be7e:	db2f      	blt.n	bee0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
    be80:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    be84:	455c      	cmp	r4, fp
    be86:	da2b      	bge.n	bee0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x964>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    be88:	fb02 6207 	mla	r2, r2, r7, r6
    be8c:	fb02 5303 	mla	r3, r2, r3, r5
    be90:	fb03 4b0b 	mla	fp, r3, fp, r4
    be94:	aa28      	add	r2, sp, #160	; 0xa0
    be96:	f7ff f9a9 	bl	b1ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    be9a:	f80a 000b 	strb.w	r0, [sl, fp]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    be9e:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
    bea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bea2:	2b03      	cmp	r3, #3
    bea4:	dd8c      	ble.n	bdc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x844>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bea6:	2b05      	cmp	r3, #5
    bea8:	dd8c      	ble.n	bdc4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x848>
    beaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    beac:	68db      	ldr	r3, [r3, #12]
    beae:	e78a      	b.n	bdc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x84a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    beb0:	f00c fdf0 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    beb4:	f00c fdee 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    beb8:	f00c fdec 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    bebc:	f00c fdea 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
    bec0:	f00c fde8 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
    bec4:	f00c fde6 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
    bec8:	f00c fde4 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
    becc:	f00c fde2 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bed0:	f00c fde0 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bed4:	f00c fdde 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bed8:	f00c fddc 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bedc:	f00c fdda 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bee0:	f00c fdd8 	bl	18a94 <abort>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bee4:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
    bee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bee8:	2b02      	cmp	r3, #2
    beea:	f77f af65 	ble.w	bdb8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x83c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    beee:	2b05      	cmp	r3, #5
    bef0:	f77f af64 	ble.w	bdbc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x840>
    bef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bef6:	689b      	ldr	r3, [r3, #8]
    bef8:	429d      	cmp	r5, r3
    befa:	da01      	bge.n	bf00 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x984>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
    befc:	2400      	movs	r4, #0
    befe:	e7cf      	b.n	bea0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x924>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
    bf00:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
    bf02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf04:	2b01      	cmp	r3, #1
    bf06:	f77f af53 	ble.w	bdb0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x834>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bf0a:	2b05      	cmp	r3, #5
    bf0c:	f77f af52 	ble.w	bdb4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x838>
    bf10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bf12:	685b      	ldr	r3, [r3, #4]
    bf14:	429e      	cmp	r6, r3
    bf16:	da01      	bge.n	bf1c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9a0>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
    bf18:	2500      	movs	r5, #0
    bf1a:	e7e4      	b.n	bee6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x96a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
    bf1c:	3701      	adds	r7, #1
    bf1e:	e733      	b.n	bd88 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x80c>
    if (size_ > kMaxSmallSize) {
    bf20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf22:	2b05      	cmp	r3, #5
    bf24:	dd03      	ble.n	bf2e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
      delete[] dims_pointer_;
    bf26:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bf28:	b108      	cbz	r0, bf2e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9b2>
    bf2a:	f00c fd9e 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf2e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    bf30:	2b05      	cmp	r3, #5
    bf32:	dd03      	ble.n	bf3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
      delete[] dims_pointer_;
    bf34:	985b      	ldr	r0, [sp, #364]	; 0x16c
    bf36:	b108      	cbz	r0, bf3c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9c0>
    bf38:	f00c fd97 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf3c:	9b54      	ldr	r3, [sp, #336]	; 0x150
    bf3e:	2b05      	cmp	r3, #5
    bf40:	dd03      	ble.n	bf4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
      delete[] dims_pointer_;
    bf42:	9855      	ldr	r0, [sp, #340]	; 0x154
    bf44:	b108      	cbz	r0, bf4a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9ce>
    bf46:	f00c fd90 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bf4a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    bf4c:	2b05      	cmp	r3, #5
    bf4e:	dd03      	ble.n	bf58 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
      delete[] dims_pointer_;
    bf50:	984f      	ldr	r0, [sp, #316]	; 0x13c
    bf52:	b108      	cbz	r0, bf58 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x9dc>
    bf54:	f00c fd89 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    bf58:	2000      	movs	r0, #0
    bf5a:	e361      	b.n	c620 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
            op_params, tflite::micro::GetTensorShape(input1),
    bf5c:	4639      	mov	r1, r7
    bf5e:	a860      	add	r0, sp, #384	; 0x180
    bf60:	f00b f9c3 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf64:	4638      	mov	r0, r7
    bf66:	f00a f80b 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bf6a:	4607      	mov	r7, r0
            tflite::micro::GetTensorShape(input2),
    bf6c:	4631      	mov	r1, r6
    bf6e:	a866      	add	r0, sp, #408	; 0x198
    bf70:	f00b f9bb 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf74:	4630      	mov	r0, r6
    bf76:	f00a f803 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    bf7a:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    bf7c:	4629      	mov	r1, r5
    bf7e:	a86c      	add	r0, sp, #432	; 0x1b0
    bf80:	f00b f9b3 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_integer_ops::Add(
    bf84:	4628      	mov	r0, r5
    bf86:	f00a f801 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    bf8a:	4680      	mov	r8, r0
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bf8c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    bf8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    bf90:	429a      	cmp	r2, r3
    bf92:	dc12      	bgt.n	bfba <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa3e>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bf94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    bf96:	4252      	negs	r2, r2
    bf98:	f112 0f80 	cmn.w	r2, #128	; 0x80
    bf9c:	db0f      	blt.n	bfbe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa42>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bf9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    bfa0:	425b      	negs	r3, r3
    bfa2:	f113 0f80 	cmn.w	r3, #128	; 0x80
    bfa6:	db0c      	blt.n	bfc2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa46>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bfa8:	2a7f      	cmp	r2, #127	; 0x7f
    bfaa:	dc0c      	bgt.n	bfc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4a>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bfac:	2b7f      	cmp	r3, #127	; 0x7f
    bfae:	dc0c      	bgt.n	bfca <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bfb0:	9960      	ldr	r1, [sp, #384]	; 0x180
    bfb2:	2905      	cmp	r1, #5
    bfb4:	dd0b      	ble.n	bfce <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa52>
    bfb6:	9861      	ldr	r0, [sp, #388]	; 0x184
    bfb8:	e00a      	b.n	bfd0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa54>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    bfba:	f00c fd6b 	bl	18a94 <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    bfbe:	f00c fd69 	bl	18a94 <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    bfc2:	f00c fd67 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    bfc6:	f00c fd65 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    bfca:	f00c fd63 	bl	18a94 <abort>
    bfce:	a861      	add	r0, sp, #388	; 0x184
    for (int i = 0; i < size_; i++) {
    bfd0:	2300      	movs	r3, #0
    int buffer_size = 1;
    bfd2:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    bfd4:	4299      	cmp	r1, r3
    bfd6:	dd05      	ble.n	bfe4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa68>
      buffer_size *= dims_data[i];
    bfd8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    bfdc:	fb02 f505 	mul.w	r5, r2, r5
    for (int i = 0; i < size_; i++) {
    bfe0:	3301      	adds	r3, #1
    bfe2:	e7f7      	b.n	bfd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa58>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bfe4:	9866      	ldr	r0, [sp, #408]	; 0x198
    bfe6:	2805      	cmp	r0, #5
    bfe8:	dd01      	ble.n	bfee <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa72>
    bfea:	9c67      	ldr	r4, [sp, #412]	; 0x19c
    bfec:	e000      	b.n	bff0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa74>
    bfee:	ac67      	add	r4, sp, #412	; 0x19c
    for (int i = 0; i < size_; i++) {
    bff0:	2300      	movs	r3, #0
    int buffer_size = 1;
    bff2:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    bff4:	4298      	cmp	r0, r3
    bff6:	dd05      	ble.n	c004 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa88>
      buffer_size *= dims_data[i];
    bff8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    bffc:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
    c000:	3301      	adds	r3, #1
    c002:	e7f7      	b.n	bff4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa78>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c004:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
    c006:	2c05      	cmp	r4, #5
    c008:	dd0b      	ble.n	c022 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaa6>
    c00a:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    for (int i = 0; i < size_; i++) {
    c00c:	2300      	movs	r3, #0
    int buffer_size = 1;
    c00e:	2101      	movs	r1, #1
    c010:	4694      	mov	ip, r2
    for (int i = 0; i < size_; i++) {
    c012:	429c      	cmp	r4, r3
    c014:	dd07      	ble.n	c026 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaaa>
      buffer_size *= dims_data[i];
    c016:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    c01a:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    c01e:	3301      	adds	r3, #1
    c020:	e7f7      	b.n	c012 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa96>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c022:	a86d      	add	r0, sp, #436	; 0x1b4
    c024:	e7f2      	b.n	c00c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa90>
  TFLITE_CHECK_EQ(size_1, size_2);
    c026:	4565      	cmp	r5, ip
    c028:	d115      	bne.n	c056 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xada>
  TFLITE_CHECK_EQ(size_2, size_3);
    c02a:	458c      	cmp	ip, r1
    c02c:	d115      	bne.n	c05a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xade>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c02e:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    c030:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    c032:	429a      	cmp	r2, r3
    c034:	dc13      	bgt.n	c05e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae2>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    c036:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c038:	4252      	negs	r2, r2
    c03a:	f112 0f80 	cmn.w	r2, #128	; 0x80
    c03e:	db10      	blt.n	c062 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xae6>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    c040:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c042:	425b      	negs	r3, r3
    c044:	f113 0f80 	cmn.w	r3, #128	; 0x80
    c048:	db0d      	blt.n	c066 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaea>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    c04a:	2a7f      	cmp	r2, #127	; 0x7f
    c04c:	dc0d      	bgt.n	c06a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaee>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    c04e:	2b7f      	cmp	r3, #127	; 0x7f
    c050:	dc0d      	bgt.n	c06e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf2>
  for (int i = 0; i < size; ++i) {
    c052:	2400      	movs	r4, #0
    c054:	e015      	b.n	c082 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb06>
  TFLITE_CHECK_EQ(size_1, size_2);
    c056:	f00c fd1d 	bl	18a94 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    c05a:	f00c fd1b 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c05e:	f00c fd19 	bl	18a94 <abort>
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
    c062:	f00c fd17 	bl	18a94 <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
    c066:	f00c fd15 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
    c06a:	f00c fd13 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
    c06e:	f00c fd11 	bl	18a94 <abort>
    output_data[i] = binary_func(input1_data[i], input2_data[i], params);
    c072:	aa28      	add	r2, sp, #160	; 0xa0
    c074:	5731      	ldrsb	r1, [r6, r4]
    c076:	5738      	ldrsb	r0, [r7, r4]
    c078:	f7ff f8b8 	bl	b1ec <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
    c07c:	f808 0004 	strb.w	r0, [r8, r4]
  for (int i = 0; i < size; ++i) {
    c080:	3401      	adds	r4, #1
    c082:	42ac      	cmp	r4, r5
    c084:	dbf5      	blt.n	c072 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xaf6>
    if (size_ > kMaxSmallSize) {
    c086:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
    c088:	2b05      	cmp	r3, #5
    c08a:	dd03      	ble.n	c094 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
      delete[] dims_pointer_;
    c08c:	986d      	ldr	r0, [sp, #436]	; 0x1b4
    c08e:	b108      	cbz	r0, c094 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb18>
    c090:	f00c fceb 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c094:	9b66      	ldr	r3, [sp, #408]	; 0x198
    c096:	2b05      	cmp	r3, #5
    c098:	dd03      	ble.n	c0a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
      delete[] dims_pointer_;
    c09a:	9867      	ldr	r0, [sp, #412]	; 0x19c
    c09c:	b108      	cbz	r0, c0a2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb26>
    c09e:	f00c fce4 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0a2:	9b60      	ldr	r3, [sp, #384]	; 0x180
    c0a4:	2b05      	cmp	r3, #5
    c0a6:	dd03      	ble.n	c0b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
      delete[] dims_pointer_;
    c0a8:	9861      	ldr	r0, [sp, #388]	; 0x184
    c0aa:	b108      	cbz	r0, c0b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb34>
    c0ac:	f00c fcdd 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    c0b0:	2000      	movs	r0, #0
    c0b2:	e2b5      	b.n	c620 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      if (need_broadcast) {
    c0b4:	9b05      	ldr	r3, [sp, #20]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d037      	beq.n	c12a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbae>
            op_params, tflite::micro::GetTensorShape(input1),
    c0ba:	4639      	mov	r1, r7
    c0bc:	a872      	add	r0, sp, #456	; 0x1c8
    c0be:	f00b f914 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0c2:	4638      	mov	r0, r7
    c0c4:	f00a fb5b 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c0c8:	4604      	mov	r4, r0
            tflite::micro::GetTensorShape(input2),
    c0ca:	4631      	mov	r1, r6
    c0cc:	a878      	add	r0, sp, #480	; 0x1e0
    c0ce:	f00b f90c 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0d2:	4630      	mov	r0, r6
    c0d4:	f00a fb53 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c0d8:	4606      	mov	r6, r0
            tflite::micro::GetTensorShape(output),
    c0da:	af7e      	add	r7, sp, #504	; 0x1f8
    c0dc:	4629      	mov	r1, r5
    c0de:	4638      	mov	r0, r7
    c0e0:	f00b f903 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::BroadcastAdd4DSlow(
    c0e4:	4628      	mov	r0, r5
    c0e6:	f00a fb50 	bl	1678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    c0ea:	9002      	str	r0, [sp, #8]
    c0ec:	9701      	str	r7, [sp, #4]
    c0ee:	9600      	str	r6, [sp, #0]
    c0f0:	ab78      	add	r3, sp, #480	; 0x1e0
    c0f2:	4622      	mov	r2, r4
    c0f4:	a972      	add	r1, sp, #456	; 0x1c8
    c0f6:	a828      	add	r0, sp, #160	; 0xa0
    c0f8:	f7fe fc0a 	bl	a910 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>
    if (size_ > kMaxSmallSize) {
    c0fc:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
    c0fe:	2b05      	cmp	r3, #5
    c100:	dd03      	ble.n	c10a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
      delete[] dims_pointer_;
    c102:	987f      	ldr	r0, [sp, #508]	; 0x1fc
    c104:	b108      	cbz	r0, c10a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8e>
    c106:	f00c fcb0 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c10a:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
    c10c:	2b05      	cmp	r3, #5
    c10e:	dd03      	ble.n	c118 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
      delete[] dims_pointer_;
    c110:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    c112:	b108      	cbz	r0, c118 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb9c>
    c114:	f00c fca9 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c118:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
    c11a:	2b05      	cmp	r3, #5
    c11c:	dd03      	ble.n	c126 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
      delete[] dims_pointer_;
    c11e:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    c120:	b108      	cbz	r0, c126 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbaa>
    c122:	f00c fca2 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    c126:	2000      	movs	r0, #0
    c128:	e27a      	b.n	c620 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c12a:	4639      	mov	r1, r7
    c12c:	a884      	add	r0, sp, #528	; 0x210
    c12e:	f00b f8dc 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    c132:	4638      	mov	r0, r7
    c134:	f00a fb23 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c138:	9009      	str	r0, [sp, #36]	; 0x24
                           tflite::micro::GetTensorShape(input2),
    c13a:	4631      	mov	r1, r6
    c13c:	a88a      	add	r0, sp, #552	; 0x228
    c13e:	f00b f8d4 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c142:	4630      	mov	r0, r6
    c144:	f00a fb1b 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    c148:	900a      	str	r0, [sp, #40]	; 0x28
                           tflite::micro::GetTensorShape(output),
    c14a:	4629      	mov	r1, r5
    c14c:	a890      	add	r0, sp, #576	; 0x240
    c14e:	f00b f8cc 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
    c152:	4628      	mov	r0, r5
    c154:	f00a fb19 	bl	1678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    c158:	900b      	str	r0, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
    c15a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    c15c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    c15e:	429a      	cmp	r2, r3
    c160:	dc04      	bgt.n	c16c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c162:	9984      	ldr	r1, [sp, #528]	; 0x210
    c164:	2905      	cmp	r1, #5
    c166:	dd03      	ble.n	c170 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf4>
    c168:	9885      	ldr	r0, [sp, #532]	; 0x214
    c16a:	e002      	b.n	c172 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbf6>
    c16c:	f00c fc92 	bl	18a94 <abort>
    c170:	a885      	add	r0, sp, #532	; 0x214
    for (int i = 0; i < size_; i++) {
    c172:	2300      	movs	r3, #0
    int buffer_size = 1;
    c174:	2201      	movs	r2, #1
    c176:	e004      	b.n	c182 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc06>
      buffer_size *= dims_data[i];
    c178:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c17c:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
    c180:	3301      	adds	r3, #1
    c182:	4299      	cmp	r1, r3
    c184:	dcf8      	bgt.n	c178 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xbfc>
    c186:	9208      	str	r2, [sp, #32]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c188:	988a      	ldr	r0, [sp, #552]	; 0x228
    c18a:	2805      	cmp	r0, #5
    c18c:	dd01      	ble.n	c192 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc16>
    c18e:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
    c190:	e000      	b.n	c194 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc18>
    c192:	ac8b      	add	r4, sp, #556	; 0x22c
    for (int i = 0; i < size_; i++) {
    c194:	2300      	movs	r3, #0
    int buffer_size = 1;
    c196:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    c198:	4298      	cmp	r0, r3
    c19a:	dd05      	ble.n	c1a8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc2c>
      buffer_size *= dims_data[i];
    c19c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    c1a0:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
    c1a4:	3301      	adds	r3, #1
    c1a6:	e7f7      	b.n	c198 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc1c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c1a8:	9c90      	ldr	r4, [sp, #576]	; 0x240
    c1aa:	2c05      	cmp	r4, #5
    c1ac:	dd01      	ble.n	c1b2 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc36>
    c1ae:	9d91      	ldr	r5, [sp, #580]	; 0x244
    c1b0:	e000      	b.n	c1b4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc38>
    c1b2:	ad91      	add	r5, sp, #580	; 0x244
    for (int i = 0; i < size_; i++) {
    c1b4:	2300      	movs	r3, #0
    int buffer_size = 1;
    c1b6:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
    c1b8:	429c      	cmp	r4, r3
    c1ba:	dd05      	ble.n	c1c8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc4c>
      buffer_size *= dims_data[i];
    c1bc:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c1c0:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
    c1c4:	3301      	adds	r3, #1
    c1c6:	e7f7      	b.n	c1b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc3c>
  TFLITE_CHECK_EQ(size_1, size_2);
    c1c8:	9b08      	ldr	r3, [sp, #32]
    c1ca:	428b      	cmp	r3, r1
    c1cc:	d124      	bne.n	c218 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc9c>
  TFLITE_CHECK_EQ(size_2, size_3);
    c1ce:	4291      	cmp	r1, r2
    c1d0:	d124      	bne.n	c21c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca0>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    c1d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c1d4:	4b42      	ldr	r3, [pc, #264]	; (c2e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1d6:	429a      	cmp	r2, r3
    c1d8:	db22      	blt.n	c220 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca4>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    c1da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c1dc:	4940      	ldr	r1, [pc, #256]	; (c2e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1de:	428b      	cmp	r3, r1
    c1e0:	db20      	blt.n	c224 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xca8>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    c1e2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    c1e6:	428a      	cmp	r2, r1
    c1e8:	dc1e      	bgt.n	c228 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcac>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    c1ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    c1ee:	4293      	cmp	r3, r2
    c1f0:	dc1c      	bgt.n	c22c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb0>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    c1f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c1f4:	4b3a      	ldr	r3, [pc, #232]	; (c2e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1f6:	429a      	cmp	r2, r3
    c1f8:	db1a      	blt.n	c230 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb4>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    c1fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    c1fc:	4938      	ldr	r1, [pc, #224]	; (c2e0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd64>)
    c1fe:	428b      	cmp	r3, r1
    c200:	db18      	blt.n	c234 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcb8>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    c202:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    c206:	428a      	cmp	r2, r1
    c208:	dc16      	bgt.n	c238 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcbc>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    c20a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    c20e:	4293      	cmp	r3, r2
    c210:	dc14      	bgt.n	c23c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc0>
  for (int i = 0; i < size; ++i) {
    c212:	f04f 0b00 	mov.w	fp, #0
    c216:	e0c5      	b.n	c3a4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe28>
  TFLITE_CHECK_EQ(size_1, size_2);
    c218:	f00c fc3c 	bl	18a94 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
    c21c:	f00c fc3a 	bl	18a94 <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -max_value);
    c220:	f00c fc38 	bl	18a94 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -max_value);
    c224:	f00c fc36 	bl	18a94 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, max_value);
    c228:	f00c fc34 	bl	18a94 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, max_value);
    c22c:	f00c fc32 	bl	18a94 <abort>
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
    c230:	f00c fc30 	bl	18a94 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
    c234:	f00c fc2e 	bl	18a94 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
    c238:	f00c fc2c 	bl	18a94 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
    c23c:	f00c fc2a 	bl	18a94 <abort>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c240:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c244:	d001      	beq.n	c24a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcce>
    c246:	9905      	ldr	r1, [sp, #20]
    c248:	e0c6      	b.n	c3d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
    c24a:	2101      	movs	r1, #1
    c24c:	e0c4      	b.n	c3d8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe5c>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c24e:	4c25      	ldr	r4, [pc, #148]	; (c2e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c250:	e0d3      	b.n	c3fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c252:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    c256:	1996      	adds	r6, r2, r6
    c258:	f04f 0400 	mov.w	r4, #0
    c25c:	eb43 0704 	adc.w	r7, r3, r4
    c260:	e0d5      	b.n	c40e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe92>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c262:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c266:	e0d8      	b.n	c41a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe9e>
  assert(exponent >= 0);
    c268:	4b1f      	ldr	r3, [pc, #124]	; (c2e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    c26a:	4a20      	ldr	r2, [pc, #128]	; (c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c26c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c270:	481f      	ldr	r0, [pc, #124]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c272:	f006 fc13 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    c276:	4b1f      	ldr	r3, [pc, #124]	; (c2f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    c278:	4a1c      	ldr	r2, [pc, #112]	; (c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c27a:	f240 1167 	movw	r1, #359	; 0x167
    c27e:	481c      	ldr	r0, [pc, #112]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c280:	f006 fc0c 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c284:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    c288:	d002      	beq.n	c290 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd14>
    c28a:	f8dd c014 	ldr.w	ip, [sp, #20]
    c28e:	e10a      	b.n	c4a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
    c290:	f04f 0c01 	mov.w	ip, #1
    c294:	e107      	b.n	c4a6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2a>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c296:	4913      	ldr	r1, [pc, #76]	; (c2e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c298:	e115      	b.n	c4c6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c29a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c29e:	1851      	adds	r1, r2, r1
    c2a0:	f04f 0400 	mov.w	r4, #0
    c2a4:	eb43 0004 	adc.w	r0, r3, r4
    c2a8:	e117      	b.n	c4da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf5e>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c2aa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c2ae:	e11b      	b.n	c4e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6c>
  assert(exponent >= 0);
    c2b0:	4b0d      	ldr	r3, [pc, #52]	; (c2e8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6c>)
    c2b2:	4a0e      	ldr	r2, [pc, #56]	; (c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c2b4:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c2b8:	480d      	ldr	r0, [pc, #52]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c2ba:	f006 fbef 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    c2be:	4b0d      	ldr	r3, [pc, #52]	; (c2f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd78>)
    c2c0:	4a0a      	ldr	r2, [pc, #40]	; (c2ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd70>)
    c2c2:	f240 1167 	movw	r1, #359	; 0x167
    c2c6:	480a      	ldr	r0, [pc, #40]	; (c2f0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd74>)
    c2c8:	f006 fbe8 	bl	12a9c <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c2cc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c2d0:	d001      	beq.n	c2d6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5a>
    c2d2:	9b05      	ldr	r3, [sp, #20]
    c2d4:	e14d      	b.n	c572 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
    c2d6:	2301      	movs	r3, #1
    c2d8:	e14b      	b.n	c572 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xff6>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c2da:	4c02      	ldr	r4, [pc, #8]	; (c2e4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd68>)
    c2dc:	e15a      	b.n	c594 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1018>
    c2de:	bf00      	nop
    c2e0:	ffff8002 	.word	0xffff8002
    c2e4:	c0000001 	.word	0xc0000001
    c2e8:	00034630 	.word	0x00034630
    c2ec:	00034640 	.word	0x00034640
    c2f0:	00034698 	.word	0x00034698
    c2f4:	000346f4 	.word	0x000346f4
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c2f8:	0fec      	lsrs	r4, r5, #31
  std::int32_t ab_x2_high32 =
    c2fa:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c2fe:	2b00      	cmp	r3, #0
    c300:	f040 815a 	bne.w	c5b8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x103c>
  return RoundingDivideByPOT(
    c304:	4255      	negs	r5, r2
  assert(exponent >= 0);
    c306:	2d00      	cmp	r5, #0
    c308:	f2c0 8159 	blt.w	c5be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1042>
  assert(exponent <= 31);
    c30c:	2d1f      	cmp	r5, #31
    c30e:	f300 815d 	bgt.w	c5cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1050>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c312:	f04f 0a01 	mov.w	sl, #1
    c316:	fa0a f005 	lsl.w	r0, sl, r5
    c31a:	3801      	subs	r0, #1
    c31c:	f009 fe3a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c320:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c322:	2000      	movs	r0, #0
    c324:	f009 fe36 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c328:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c32a:	4650      	mov	r0, sl
    c32c:	f009 fe32 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c330:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c332:	4639      	mov	r1, r7
    c334:	4620      	mov	r0, r4
    c336:	f009 fe2e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c33a:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c33c:	4651      	mov	r1, sl
    c33e:	4638      	mov	r0, r7
    c340:	f009 fe2b 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c344:	4607      	mov	r7, r0
    c346:	4649      	mov	r1, r9
    c348:	4620      	mov	r0, r4
    c34a:	f009 fe32 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c34e:	4631      	mov	r1, r6
    c350:	f009 fe21 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c354:	4601      	mov	r1, r0
    c356:	4638      	mov	r0, r7
    c358:	f009 fe21 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c35c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c35e:	4629      	mov	r1, r5
    c360:	4620      	mov	r0, r4
    c362:	f009 fe1a 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c366:	4604      	mov	r4, r0
    c368:	4639      	mov	r1, r7
    c36a:	4640      	mov	r0, r8
    c36c:	f009 fe29 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c370:	4631      	mov	r1, r6
    c372:	f009 fe10 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c376:	4601      	mov	r1, r0
    c378:	4620      	mov	r0, r4
    c37a:	f009 fe10 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
        params.output_offset;
    c37e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
            raw_sum, params.output_multiplier, params.output_shift) +
    c380:	4418      	add	r0, r3
    const int32_t raw_output =
    c382:	9020      	str	r0, [sp, #128]	; 0x80
      if (__a < __b)
    c384:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    c386:	4298      	cmp	r0, r3
    c388:	f300 8127 	bgt.w	c5da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x105e>
      return __a;
    c38c:	ab33      	add	r3, sp, #204	; 0xcc
      if (__b < __a)
    c38e:	6819      	ldr	r1, [r3, #0]
    c390:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    c392:	4291      	cmp	r1, r2
    c394:	db00      	blt.n	c398 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe1c>
      return __a;
    c396:	ab34      	add	r3, sp, #208	; 0xd0
    const int32_t clamped_output =
    c398:	681b      	ldr	r3, [r3, #0]
    output_data[i] = static_cast<T>(clamped_output);
    c39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c39c:	9906      	ldr	r1, [sp, #24]
    c39e:	5253      	strh	r3, [r2, r1]
  for (int i = 0; i < size; ++i) {
    c3a0:	f10b 0b01 	add.w	fp, fp, #1
    c3a4:	9b08      	ldr	r3, [sp, #32]
    c3a6:	455b      	cmp	r3, fp
    c3a8:	f340 8119 	ble.w	c5de <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1062>
    const int32_t input1_val = params.input1_offset + input1_data[i];
    c3ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    c3ae:	ea4f 034b 	mov.w	r3, fp, lsl #1
    c3b2:	9306      	str	r3, [sp, #24]
    c3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3b6:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c3ba:	441a      	add	r2, r3
    const int32_t input2_val = params.input2_offset + input2_data[i];
    c3bc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
    c3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3c0:	f933 301b 	ldrsh.w	r3, [r3, fp, lsl #1]
    c3c4:	441d      	add	r5, r3
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
    c3c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c3c8:	409a      	lsls	r2, r3
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
    c3ca:	409d      	lsls	r5, r3
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
    c3cc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    c3ce:	9830      	ldr	r0, [sp, #192]	; 0xc0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c3d0:	429a      	cmp	r2, r3
    c3d2:	f43f af35 	beq.w	c240 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcc4>
    c3d6:	9905      	ldr	r1, [sp, #20]
  std::int64_t a_64(a);
    c3d8:	ea4f 79e2 	mov.w	r9, r2, asr #31
  std::int64_t b_64(b);
    c3dc:	17df      	asrs	r7, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    c3de:	fb02 f407 	mul.w	r4, r2, r7
    c3e2:	fb03 4409 	mla	r4, r3, r9, r4
    c3e6:	fba2 2303 	umull	r2, r3, r2, r3
    c3ea:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c3ec:	2a00      	cmp	r2, #0
    c3ee:	f173 0400 	sbcs.w	r4, r3, #0
    c3f2:	f6ff af2c 	blt.w	c24e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd2>
    c3f6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c3fa:	1912      	adds	r2, r2, r4
    c3fc:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    c400:	4616      	mov	r6, r2
    c402:	461f      	mov	r7, r3
    c404:	2a00      	cmp	r2, #0
    c406:	f173 0400 	sbcs.w	r4, r3, #0
    c40a:	f6ff af22 	blt.w	c252 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcd6>
    c40e:	0ff4      	lsrs	r4, r6, #31
  std::int32_t ab_x2_high32 =
    c410:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c414:	2900      	cmp	r1, #0
    c416:	f47f af24 	bne.w	c262 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xce6>
    c41a:	4246      	negs	r6, r0
  assert(exponent >= 0);
    c41c:	2e00      	cmp	r6, #0
    c41e:	f6ff af23 	blt.w	c268 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcec>
  assert(exponent <= 31);
    c422:	2e1f      	cmp	r6, #31
    c424:	f73f af27 	bgt.w	c276 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xcfa>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c428:	f04f 0a01 	mov.w	sl, #1
    c42c:	fa0a f006 	lsl.w	r0, sl, r6
    c430:	3801      	subs	r0, #1
    c432:	f009 fdaf 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c436:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c438:	2000      	movs	r0, #0
    c43a:	f009 fdab 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c43e:	9007      	str	r0, [sp, #28]
  const IntegerType one = Dup<IntegerType>(1);
    c440:	4650      	mov	r0, sl
    c442:	f009 fda7 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c446:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    c448:	4641      	mov	r1, r8
    c44a:	4620      	mov	r0, r4
    c44c:	f009 fda3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c450:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c452:	4651      	mov	r1, sl
    c454:	4640      	mov	r0, r8
    c456:	f009 fda0 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c45a:	4680      	mov	r8, r0
    c45c:	9907      	ldr	r1, [sp, #28]
    c45e:	4620      	mov	r0, r4
    c460:	f009 fda7 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c464:	4639      	mov	r1, r7
    c466:	f009 fd96 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c46a:	4601      	mov	r1, r0
    c46c:	4640      	mov	r0, r8
    c46e:	f009 fd96 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c472:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    c474:	4631      	mov	r1, r6
    c476:	4620      	mov	r0, r4
    c478:	f009 fd8f 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c47c:	4604      	mov	r4, r0
    c47e:	4641      	mov	r1, r8
    c480:	4648      	mov	r0, r9
    c482:	f009 fd9e 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c486:	4639      	mov	r1, r7
    c488:	f009 fd85 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c48c:	4601      	mov	r1, r0
    c48e:	4620      	mov	r0, r4
    c490:	f009 fd85 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c494:	4680      	mov	r8, r0
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
    c496:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    c498:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c49c:	4295      	cmp	r5, r2
    c49e:	f43f aef1 	beq.w	c284 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd08>
    c4a2:	f8dd c014 	ldr.w	ip, [sp, #20]
  std::int64_t a_64(a);
    c4a6:	17e9      	asrs	r1, r5, #31
  std::int64_t b_64(b);
    c4a8:	17d7      	asrs	r7, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    c4aa:	fb05 f307 	mul.w	r3, r5, r7
    c4ae:	fb02 3101 	mla	r1, r2, r1, r3
    c4b2:	fba5 2302 	umull	r2, r3, r5, r2
    c4b6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c4b8:	2a00      	cmp	r2, #0
    c4ba:	f173 0100 	sbcs.w	r1, r3, #0
    c4be:	f6ff aeea 	blt.w	c296 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1a>
    c4c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c4c6:	1852      	adds	r2, r2, r1
    c4c8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    c4cc:	4611      	mov	r1, r2
    c4ce:	4618      	mov	r0, r3
    c4d0:	2a00      	cmp	r2, #0
    c4d2:	f173 0400 	sbcs.w	r4, r3, #0
    c4d6:	f6ff aee0 	blt.w	c29a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd1e>
    c4da:	0fcc      	lsrs	r4, r1, #31
  std::int32_t ab_x2_high32 =
    c4dc:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c4e0:	f1bc 0f00 	cmp.w	ip, #0
    c4e4:	f47f aee1 	bne.w	c2aa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd2e>
    c4e8:	f1ce 0500 	rsb	r5, lr, #0
  assert(exponent >= 0);
    c4ec:	2d00      	cmp	r5, #0
    c4ee:	f6ff aedf 	blt.w	c2b0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd34>
  assert(exponent <= 31);
    c4f2:	2d1f      	cmp	r5, #31
    c4f4:	f73f aee3 	bgt.w	c2be <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd42>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    c4f8:	f04f 0a01 	mov.w	sl, #1
    c4fc:	fa0a f005 	lsl.w	r0, sl, r5
    c500:	3801      	subs	r0, #1
    c502:	f009 fd47 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c506:	4607      	mov	r7, r0
  const IntegerType zero = Dup<IntegerType>(0);
    c508:	2000      	movs	r0, #0
    c50a:	f009 fd43 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c50e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    c510:	4650      	mov	r0, sl
    c512:	f009 fd3f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    c516:	4606      	mov	r6, r0
  const IntegerType remainder = BitAnd(x, mask);
    c518:	4639      	mov	r1, r7
    c51a:	4620      	mov	r0, r4
    c51c:	f009 fd3b 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c520:	9007      	str	r0, [sp, #28]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    c522:	4651      	mov	r1, sl
    c524:	4638      	mov	r0, r7
    c526:	f009 fd38 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c52a:	4607      	mov	r7, r0
    c52c:	4649      	mov	r1, r9
    c52e:	4620      	mov	r0, r4
    c530:	f009 fd3f 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    c534:	4631      	mov	r1, r6
    c536:	f009 fd2e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c53a:	4601      	mov	r1, r0
    c53c:	4638      	mov	r0, r7
    c53e:	f009 fd2e 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    c542:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    c544:	4629      	mov	r1, r5
    c546:	4620      	mov	r0, r4
    c548:	f009 fd27 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    c54c:	4604      	mov	r4, r0
    c54e:	4639      	mov	r1, r7
    c550:	9807      	ldr	r0, [sp, #28]
    c552:	f009 fd36 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    c556:	4631      	mov	r1, r6
    c558:	f009 fd1d 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    c55c:	4601      	mov	r1, r0
    c55e:	4620      	mov	r0, r4
    c560:	f009 fd1d 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
    c564:	4440      	add	r0, r8
            raw_sum, params.output_multiplier, params.output_shift) +
    c566:	992c      	ldr	r1, [sp, #176]	; 0xb0
    c568:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    c56a:	4288      	cmp	r0, r1
    c56c:	f43f aeae 	beq.w	c2cc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd50>
    c570:	9b05      	ldr	r3, [sp, #20]
  std::int64_t a_64(a);
    c572:	ea4f 79e0 	mov.w	r9, r0, asr #31
  std::int64_t b_64(b);
    c576:	17cf      	asrs	r7, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    c578:	fb00 f407 	mul.w	r4, r0, r7
    c57c:	fb01 4409 	mla	r4, r1, r9, r4
    c580:	fba0 0101 	umull	r0, r1, r0, r1
    c584:	4421      	add	r1, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    c586:	2800      	cmp	r0, #0
    c588:	f171 0400 	sbcs.w	r4, r1, #0
    c58c:	f6ff aea5 	blt.w	c2da <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd5e>
    c590:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    c594:	1900      	adds	r0, r0, r4
    c596:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
    c59a:	4605      	mov	r5, r0
    c59c:	460e      	mov	r6, r1
    c59e:	2800      	cmp	r0, #0
    c5a0:	f171 0400 	sbcs.w	r4, r1, #0
    c5a4:	f6bf aea8 	bge.w	c2f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
    c5a8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    c5ac:	1945      	adds	r5, r0, r5
    c5ae:	f04f 0400 	mov.w	r4, #0
    c5b2:	eb41 0604 	adc.w	r6, r1, r4
    c5b6:	e69f      	b.n	c2f8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd7c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    c5b8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    c5bc:	e6a2      	b.n	c304 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd88>
  assert(exponent >= 0);
    c5be:	4b1a      	ldr	r3, [pc, #104]	; (c628 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10ac>)
    c5c0:	4a1a      	ldr	r2, [pc, #104]	; (c62c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c5c2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    c5c6:	481a      	ldr	r0, [pc, #104]	; (c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c5c8:	f006 fa68 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    c5cc:	4b19      	ldr	r3, [pc, #100]	; (c634 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b8>)
    c5ce:	4a17      	ldr	r2, [pc, #92]	; (c62c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b0>)
    c5d0:	f240 1167 	movw	r1, #359	; 0x167
    c5d4:	4816      	ldr	r0, [pc, #88]	; (c630 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10b4>)
    c5d6:	f006 fa61 	bl	12a9c <__assert_func>
	return __b;
    c5da:	ab20      	add	r3, sp, #128	; 0x80
    c5dc:	e6d7      	b.n	c38e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe12>
    if (size_ > kMaxSmallSize) {
    c5de:	9b90      	ldr	r3, [sp, #576]	; 0x240
    c5e0:	2b05      	cmp	r3, #5
    c5e2:	dd03      	ble.n	c5ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
      delete[] dims_pointer_;
    c5e4:	9891      	ldr	r0, [sp, #580]	; 0x244
    c5e6:	b108      	cbz	r0, c5ec <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1070>
    c5e8:	f00c fa3f 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c5ec:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    c5ee:	2b05      	cmp	r3, #5
    c5f0:	dd03      	ble.n	c5fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
      delete[] dims_pointer_;
    c5f2:	988b      	ldr	r0, [sp, #556]	; 0x22c
    c5f4:	b108      	cbz	r0, c5fa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x107e>
    c5f6:	f00c fa38 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c5fa:	9b84      	ldr	r3, [sp, #528]	; 0x210
    c5fc:	2b05      	cmp	r3, #5
    c5fe:	dd03      	ble.n	c608 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
      delete[] dims_pointer_;
    c600:	9885      	ldr	r0, [sp, #532]	; 0x214
    c602:	b108      	cbz	r0, c608 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x108c>
    c604:	f00c fa31 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    c608:	2000      	movs	r0, #0
    c60a:	e009      	b.n	c620 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10a4>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c60c:	f8d8 6014 	ldr.w	r6, [r8, #20]
    c610:	f7fc febc 	bl	938c <TfLiteTypeGetName>
    c614:	4602      	mov	r2, r0
    c616:	7a2b      	ldrb	r3, [r5, #8]
    c618:	4907      	ldr	r1, [pc, #28]	; (c638 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x10bc>)
    c61a:	4640      	mov	r0, r8
    c61c:	47b0      	blx	r6
      return kTfLiteError;
    c61e:	2001      	movs	r0, #1
}
    c620:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c628:	00034630 	.word	0x00034630
    c62c:	00034640 	.word	0x00034640
    c630:	00034698 	.word	0x00034698
    c634:	000346f4 	.word	0x000346f4
    c638:	00034704 	.word	0x00034704

0000c63c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c640:	b084      	sub	sp, #16
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
    c642:	f8d1 9014 	ldr.w	r9, [r1, #20]
  TFLITE_DCHECK(node->user_data != nullptr);
    c646:	f8d1 8010 	ldr.w	r8, [r1, #16]
    c64a:	f1b8 0f00 	cmp.w	r8, #0
    c64e:	d02c      	beq.n	c6aa <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
    c650:	4604      	mov	r4, r0
    c652:	460d      	mov	r5, r1
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    c654:	b358      	cbz	r0, c6ae <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    c656:	b361      	cbz	r1, c6b2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c658:	6d43      	ldr	r3, [r0, #84]	; 0x54
    c65a:	680a      	ldr	r2, [r1, #0]
    c65c:	6851      	ldr	r1, [r2, #4]
    c65e:	4798      	blx	r3
    c660:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    c662:	b344      	cbz	r4, c6b6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node != nullptr);
    c664:	b34d      	cbz	r5, c6ba <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x7e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c666:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c668:	682a      	ldr	r2, [r5, #0]
    c66a:	6891      	ldr	r1, [r2, #8]
    c66c:	4620      	mov	r0, r4
    c66e:	4798      	blx	r3
    c670:	4682      	mov	sl, r0
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    c672:	b324      	cbz	r4, c6be <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x82>
  TFLITE_DCHECK(node != nullptr);
    c674:	b32d      	cbz	r5, c6c2 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x86>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c676:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c678:	686a      	ldr	r2, [r5, #4]
    c67a:	6851      	ldr	r1, [r2, #4]
    c67c:	4620      	mov	r0, r4
    c67e:	4798      	blx	r3
    c680:	4606      	mov	r6, r0
  if (output->type == kTfLiteFloat32) {
    c682:	7a00      	ldrb	r0, [r0, #8]
    c684:	2801      	cmp	r0, #1
    c686:	d01e      	beq.n	c6c6 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  } else if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
    c688:	2809      	cmp	r0, #9
    c68a:	d001      	beq.n	c690 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x54>
    c68c:	2807      	cmp	r0, #7
    c68e:	d126      	bne.n	c6de <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
    c690:	9602      	str	r6, [sp, #8]
    c692:	f8cd a004 	str.w	sl, [sp, #4]
    c696:	9700      	str	r7, [sp, #0]
    c698:	4643      	mov	r3, r8
    c69a:	464a      	mov	r2, r9
    c69c:	4629      	mov	r1, r5
    c69e:	4620      	mov	r0, r4
    c6a0:	f7fe ff6c 	bl	b57c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
}
    c6a4:	b004      	add	sp, #16
    c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
    c6aa:	f00c f9f3 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6ae:	f00c f9f1 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6b2:	f00c f9ef 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6b6:	f00c f9ed 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6ba:	f00c f9eb 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6be:	f00c f9e9 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6c2:	f00c f9e7 	bl	18a94 <abort>
    EvalAdd(context, node, params, data, input1, input2, output);
    c6c6:	9602      	str	r6, [sp, #8]
    c6c8:	f8cd a004 	str.w	sl, [sp, #4]
    c6cc:	9700      	str	r7, [sp, #0]
    c6ce:	4643      	mov	r3, r8
    c6d0:	464a      	mov	r2, r9
    c6d2:	4629      	mov	r1, r5
    c6d4:	4620      	mov	r0, r4
    c6d6:	f009 fd1d 	bl	16114 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
  return kTfLiteOk;
    c6da:	2000      	movs	r0, #0
    c6dc:	e7e2      	b.n	c6a4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c6de:	6965      	ldr	r5, [r4, #20]
    c6e0:	f7fc fe54 	bl	938c <TfLiteTypeGetName>
    c6e4:	4602      	mov	r2, r0
    c6e6:	7a33      	ldrb	r3, [r6, #8]
    c6e8:	4902      	ldr	r1, [pc, #8]	; (c6f4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
    c6ea:	4620      	mov	r0, r4
    c6ec:	47a8      	blx	r5
    return kTfLiteError;
    c6ee:	2001      	movs	r0, #1
    c6f0:	e7d8      	b.n	c6a4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    c6f2:	bf00      	nop
    c6f4:	00034704 	.word	0x00034704

0000c6f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6fc:	b0a5      	sub	sp, #148	; 0x94
    c6fe:	9118      	str	r1, [sp, #96]	; 0x60
    c700:	9219      	str	r2, [sp, #100]	; 0x64
    c702:	461d      	mov	r5, r3
    c704:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    c708:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    c70a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    c70e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    c712:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    c714:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    c718:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    c71a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    c71e:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    c720:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    c724:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    c726:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    c72a:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    c72c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    c730:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    c732:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c734:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    c736:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    c738:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c73a:	428a      	cmp	r2, r1
    c73c:	f300 8086 	bgt.w	c84c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
  inline int32_t DimensionsCount() const { return size_; }
    c740:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c742:	2a04      	cmp	r2, #4
    c744:	f040 8084 	bne.w	c850 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    c748:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c74c:	2a04      	cmp	r2, #4
    c74e:	f040 8081 	bne.w	c854 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    c752:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c756:	2a04      	cmp	r2, #4
    c758:	d17e      	bne.n	c858 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
    TFLITE_DCHECK_LT(i, size_);
    c75a:	682a      	ldr	r2, [r5, #0]
    c75c:	2a00      	cmp	r2, #0
    c75e:	dd7d      	ble.n	c85c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c760:	2a05      	cmp	r2, #5
    c762:	dd7d      	ble.n	c860 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    c764:	686a      	ldr	r2, [r5, #4]
    c766:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c768:	f8d9 2000 	ldr.w	r2, [r9]
    c76c:	2a00      	cmp	r2, #0
    c76e:	dd79      	ble.n	c864 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c770:	2a05      	cmp	r2, #5
    c772:	dd79      	ble.n	c868 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    c774:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c778:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c77a:	428a      	cmp	r2, r1
    c77c:	d177      	bne.n	c86e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c77e:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    c780:	f8d9 2000 	ldr.w	r2, [r9]
    c784:	2a00      	cmp	r2, #0
    c786:	dd74      	ble.n	c872 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c788:	2a05      	cmp	r2, #5
    c78a:	dd74      	ble.n	c876 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    c78c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c790:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c792:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    c794:	4291      	cmp	r1, r2
    c796:	dc71      	bgt.n	c87c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    c798:	aa23      	add	r2, sp, #140	; 0x8c
    c79a:	6812      	ldr	r2, [r2, #0]
    c79c:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    c79e:	682a      	ldr	r2, [r5, #0]
    c7a0:	2a03      	cmp	r2, #3
    c7a2:	dd6d      	ble.n	c880 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7a4:	2a05      	cmp	r2, #5
    c7a6:	dd6d      	ble.n	c884 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    c7a8:	686a      	ldr	r2, [r5, #4]
    c7aa:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    c7ac:	f8de 2000 	ldr.w	r2, [lr]
    c7b0:	2a03      	cmp	r2, #3
    c7b2:	dd69      	ble.n	c888 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7b4:	2a05      	cmp	r2, #5
    c7b6:	dd69      	ble.n	c88c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    c7b8:	f8de 2004 	ldr.w	r2, [lr, #4]
    c7bc:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c7be:	428a      	cmp	r2, r1
    c7c0:	d167      	bne.n	c892 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7c2:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    c7c4:	f8de 2000 	ldr.w	r2, [lr]
    c7c8:	2a03      	cmp	r2, #3
    c7ca:	dd64      	ble.n	c896 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7cc:	2a05      	cmp	r2, #5
    c7ce:	dd64      	ble.n	c89a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    c7d0:	f8de 2004 	ldr.w	r2, [lr, #4]
    c7d4:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7d6:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    c7d8:	4291      	cmp	r1, r2
    c7da:	dc61      	bgt.n	c8a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    c7dc:	aa21      	add	r2, sp, #132	; 0x84
    c7de:	6812      	ldr	r2, [r2, #0]
    c7e0:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    c7e2:	f8de 2000 	ldr.w	r2, [lr]
    c7e6:	2a00      	cmp	r2, #0
    c7e8:	dd5c      	ble.n	c8a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7ea:	2a05      	cmp	r2, #5
    c7ec:	dd5c      	ble.n	c8a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    c7ee:	f8de 2004 	ldr.w	r2, [lr, #4]
    c7f2:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    c7f4:	f8d9 2000 	ldr.w	r2, [r9]
    c7f8:	2a03      	cmp	r2, #3
    c7fa:	dd58      	ble.n	c8ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7fc:	2a05      	cmp	r2, #5
    c7fe:	dd58      	ble.n	c8b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    c800:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c804:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c806:	428a      	cmp	r2, r1
    c808:	d156      	bne.n	c8b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c80a:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    c80c:	f8d9 2000 	ldr.w	r2, [r9]
    c810:	2a03      	cmp	r2, #3
    c812:	dd53      	ble.n	c8bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c814:	2a05      	cmp	r2, #5
    c816:	dd53      	ble.n	c8c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    c818:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c81c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c81e:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    c820:	4291      	cmp	r1, r2
    c822:	dc50      	bgt.n	c8c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    c824:	aa1f      	add	r2, sp, #124	; 0x7c
    c826:	6812      	ldr	r2, [r2, #0]
    c828:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    c82a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    c82c:	2a00      	cmp	r2, #0
    c82e:	d051      	beq.n	c8d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c830:	6818      	ldr	r0, [r3, #0]
    c832:	2805      	cmp	r0, #5
    c834:	dd49      	ble.n	c8ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    c836:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    c838:	2100      	movs	r1, #0
    int buffer_size = 1;
    c83a:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    c83c:	4281      	cmp	r1, r0
    c83e:	da46      	bge.n	c8ce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    c840:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c844:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    c848:	3101      	adds	r1, #1
    c84a:	e7f7      	b.n	c83c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c84c:	f00c f922 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    c850:	f00c f920 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    c854:	f00c f91e 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    c858:	f00c f91c 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c85c:	f00c f91a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c860:	6869      	ldr	r1, [r5, #4]
    c862:	e781      	b.n	c768 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    c864:	f00c f916 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c868:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c86c:	e785      	b.n	c77a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c86e:	f00c f911 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c872:	f00c f90f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c876:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c87a:	e78a      	b.n	c792 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    c87c:	aa22      	add	r2, sp, #136	; 0x88
    c87e:	e78c      	b.n	c79a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    c880:	f00c f908 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c884:	6929      	ldr	r1, [r5, #16]
    c886:	e791      	b.n	c7ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    c888:	f00c f904 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c88c:	f8de 2010 	ldr.w	r2, [lr, #16]
    c890:	e795      	b.n	c7be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c892:	f00c f8ff 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c896:	f00c f8fd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c89a:	f8de 2010 	ldr.w	r2, [lr, #16]
    c89e:	e79a      	b.n	c7d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    c8a0:	aa20      	add	r2, sp, #128	; 0x80
    c8a2:	e79c      	b.n	c7de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    c8a4:	f00c f8f6 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8a8:	f8de 1004 	ldr.w	r1, [lr, #4]
    c8ac:	e7a2      	b.n	c7f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    c8ae:	f00c f8f1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c8b6:	e7a6      	b.n	c806 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c8b8:	f00c f8ec 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8bc:	f00c f8ea 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
    c8c4:	e7ab      	b.n	c81e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    c8c6:	aa1e      	add	r2, sp, #120	; 0x78
    c8c8:	e7ad      	b.n	c826 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c8ca:	3304      	adds	r3, #4
    c8cc:	e7b4      	b.n	c838 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c8ce:	9b05      	ldr	r3, [sp, #20]
    c8d0:	429c      	cmp	r4, r3
    c8d2:	d160      	bne.n	c996 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    c8d4:	682b      	ldr	r3, [r5, #0]
    c8d6:	2b01      	cmp	r3, #1
    c8d8:	dd5f      	ble.n	c99a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8da:	2b05      	cmp	r3, #5
    c8dc:	dd5f      	ble.n	c99e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    c8de:	686b      	ldr	r3, [r5, #4]
    c8e0:	685b      	ldr	r3, [r3, #4]
    c8e2:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    c8e4:	682b      	ldr	r3, [r5, #0]
    c8e6:	2b02      	cmp	r3, #2
    c8e8:	dd5c      	ble.n	c9a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8ea:	2b05      	cmp	r3, #5
    c8ec:	dd5c      	ble.n	c9a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    c8ee:	686b      	ldr	r3, [r5, #4]
    c8f0:	689b      	ldr	r3, [r3, #8]
    c8f2:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    c8f4:	f8de 3000 	ldr.w	r3, [lr]
    c8f8:	2b01      	cmp	r3, #1
    c8fa:	dd58      	ble.n	c9ae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8fc:	2b05      	cmp	r3, #5
    c8fe:	dd58      	ble.n	c9b2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    c900:	f8de 3004 	ldr.w	r3, [lr, #4]
    c904:	685b      	ldr	r3, [r3, #4]
    c906:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    c908:	f8de 3000 	ldr.w	r3, [lr]
    c90c:	2b02      	cmp	r3, #2
    c90e:	dd54      	ble.n	c9ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c910:	2b05      	cmp	r3, #5
    c912:	dd54      	ble.n	c9be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    c914:	f8de 3004 	ldr.w	r3, [lr, #4]
    c918:	689b      	ldr	r3, [r3, #8]
    c91a:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    c91c:	f8d9 3000 	ldr.w	r3, [r9]
    c920:	2b01      	cmp	r3, #1
    c922:	dd50      	ble.n	c9c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c924:	2b05      	cmp	r3, #5
    c926:	dd50      	ble.n	c9ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    c928:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c92c:	685b      	ldr	r3, [r3, #4]
    c92e:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    c930:	f8d9 3000 	ldr.w	r3, [r9]
    c934:	2b02      	cmp	r3, #2
    c936:	dd4c      	ble.n	c9d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c938:	2b05      	cmp	r3, #5
    c93a:	dd4c      	ble.n	c9d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    c93c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c940:	689b      	ldr	r3, [r3, #8]
    c942:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    c944:	2300      	movs	r3, #0
    c946:	9300      	str	r3, [sp, #0]
    c948:	46f0      	mov	r8, lr
    c94a:	464c      	mov	r4, r9
    c94c:	46a9      	mov	r9, r5
    c94e:	9b00      	ldr	r3, [sp, #0]
    c950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c952:	4293      	cmp	r3, r2
    c954:	f280 8190 	bge.w	cc78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    c958:	2300      	movs	r3, #0
    c95a:	9301      	str	r3, [sp, #4]
    c95c:	46ce      	mov	lr, r9
    c95e:	46c1      	mov	r9, r8
    c960:	9b01      	ldr	r3, [sp, #4]
    c962:	9907      	ldr	r1, [sp, #28]
    c964:	428b      	cmp	r3, r1
    c966:	f280 8181 	bge.w	cc6c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    c96a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c96c:	fb02 f303 	mul.w	r3, r2, r3
    c970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c972:	1a9b      	subs	r3, r3, r2
    c974:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    c976:	2300      	movs	r3, #0
    c978:	9304      	str	r3, [sp, #16]
    c97a:	46f0      	mov	r8, lr
    c97c:	9b04      	ldr	r3, [sp, #16]
    c97e:	9906      	ldr	r1, [sp, #24]
    c980:	428b      	cmp	r3, r1
    c982:	f280 816e 	bge.w	cc62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    c986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c988:	fb02 f303 	mul.w	r3, r2, r3
    c98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c98e:	1a9b      	subs	r3, r3, r2
    c990:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    c992:	2100      	movs	r1, #0
    c994:	e135      	b.n	cc02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    c996:	f00c f87d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c99a:	f00c f87b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c99e:	68ab      	ldr	r3, [r5, #8]
    c9a0:	930b      	str	r3, [sp, #44]	; 0x2c
    c9a2:	e79f      	b.n	c8e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    c9a4:	f00c f876 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9a8:	68eb      	ldr	r3, [r5, #12]
    c9aa:	930a      	str	r3, [sp, #40]	; 0x28
    c9ac:	e7a2      	b.n	c8f4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    c9ae:	f00c f871 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9b2:	f8de 3008 	ldr.w	r3, [lr, #8]
    c9b6:	9309      	str	r3, [sp, #36]	; 0x24
    c9b8:	e7a6      	b.n	c908 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    c9ba:	f00c f86b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9be:	f8de 300c 	ldr.w	r3, [lr, #12]
    c9c2:	9308      	str	r3, [sp, #32]
    c9c4:	e7aa      	b.n	c91c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    c9c6:	f00c f865 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c9ce:	9307      	str	r3, [sp, #28]
    c9d0:	e7ae      	b.n	c930 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    c9d2:	f00c f85f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9d6:	f8d9 300c 	ldr.w	r3, [r9, #12]
    c9da:	9306      	str	r3, [sp, #24]
    c9dc:	e7b2      	b.n	c944 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c9de:	f00c f859 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c9e2:	f00c f857 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c9e6:	f00c f855 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c9ea:	f00c f853 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    c9ee:	f00c f851 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    c9f2:	f00c f84f 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    c9f6:	f00c f84d 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    c9fa:	f00c f84b 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    c9fe:	f00c f849 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ca02:	f00c f847 	bl	18a94 <abort>
    ca06:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    ca08:	3501      	adds	r5, #1
    ca0a:	9b08      	ldr	r3, [sp, #32]
    ca0c:	429d      	cmp	r5, r3
    ca0e:	da68      	bge.n	cae2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    ca10:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca12:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ca14:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    ca18:	2a00      	cmp	r2, #0
    ca1a:	dbf5      	blt.n	ca08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca1e:	429a      	cmp	r2, r3
    ca20:	daf2      	bge.n	ca08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca22:	2f00      	cmp	r7, #0
    ca24:	dbf0      	blt.n	ca08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca28:	429f      	cmp	r7, r3
    ca2a:	daed      	bge.n	ca08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    ca2c:	2300      	movs	r3, #0
    ca2e:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    ca30:	9c16      	ldr	r4, [sp, #88]	; 0x58
    ca32:	42a3      	cmp	r3, r4
    ca34:	dae7      	bge.n	ca06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ca36:	f8d8 4000 	ldr.w	r4, [r8]
    ca3a:	2c04      	cmp	r4, #4
    ca3c:	d1cf      	bne.n	c9de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ca3e:	2800      	cmp	r0, #0
    ca40:	dbcf      	blt.n	c9e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    ca42:	f8d8 4004 	ldr.w	r4, [r8, #4]
    ca46:	42a0      	cmp	r0, r4
    ca48:	dacb      	bge.n	c9e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ca4a:	2f00      	cmp	r7, #0
    ca4c:	dbcb      	blt.n	c9e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    ca4e:	f8d8 a008 	ldr.w	sl, [r8, #8]
    ca52:	4557      	cmp	r7, sl
    ca54:	dac7      	bge.n	c9e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ca56:	2a00      	cmp	r2, #0
    ca58:	dbc7      	blt.n	c9ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    ca5a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    ca5e:	4572      	cmp	r2, lr
    ca60:	dac3      	bge.n	c9ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ca62:	2b00      	cmp	r3, #0
    ca64:	dbc3      	blt.n	c9ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    ca66:	f8d8 c010 	ldr.w	ip, [r8, #16]
    ca6a:	4563      	cmp	r3, ip
    ca6c:	dabf      	bge.n	c9ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ca6e:	fb0a 7a00 	mla	sl, sl, r0, r7
    ca72:	fb0a 2a0e 	mla	sl, sl, lr, r2
    ca76:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    ca7a:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    ca7c:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ca80:	f8d9 4000 	ldr.w	r4, [r9]
    ca84:	2c04      	cmp	r4, #4
    ca86:	d1b4      	bne.n	c9f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ca88:	2900      	cmp	r1, #0
    ca8a:	dbb4      	blt.n	c9f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    ca8c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    ca90:	42a1      	cmp	r1, r4
    ca92:	dab0      	bge.n	c9f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ca94:	2e00      	cmp	r6, #0
    ca96:	dbb0      	blt.n	c9fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    ca98:	f8d9 c008 	ldr.w	ip, [r9, #8]
    ca9c:	4566      	cmp	r6, ip
    ca9e:	daac      	bge.n	c9fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    caa0:	2d00      	cmp	r5, #0
    caa2:	dbac      	blt.n	c9fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    caa4:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    caa8:	455d      	cmp	r5, fp
    caaa:	daa8      	bge.n	c9fe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    caac:	2b00      	cmp	r3, #0
    caae:	dba8      	blt.n	ca02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    cab0:	f8d9 a010 	ldr.w	sl, [r9, #16]
    cab4:	4553      	cmp	r3, sl
    cab6:	daa4      	bge.n	ca02 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cab8:	fb0c 6c01 	mla	ip, ip, r1, r6
    cabc:	fb0c 5c0b 	mla	ip, ip, fp, r5
    cac0:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    cac4:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    cac6:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    caca:	fb0c fe0e 	mul.w	lr, ip, lr
    cace:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    cad2:	eb1a 0a0e 	adds.w	sl, sl, lr
    cad6:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    cada:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    cade:	3301      	adds	r3, #1
    cae0:	e7a6      	b.n	ca30 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    cae2:	3601      	adds	r6, #1
    cae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cae6:	429e      	cmp	r6, r3
    cae8:	da06      	bge.n	caf8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    caea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    caec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    caee:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    caf2:	2500      	movs	r5, #0
    caf4:	9800      	ldr	r0, [sp, #0]
    caf6:	e788      	b.n	ca0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    caf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    cafc:	9832      	ldr	r0, [sp, #200]	; 0xc8
    cafe:	b130      	cbz	r0, cb0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    cb00:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    cb04:	6828      	ldr	r0, [r5, #0]
    cb06:	686d      	ldr	r5, [r5, #4]
    cb08:	1812      	adds	r2, r2, r0
    cb0a:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    cb0e:	9818      	ldr	r0, [sp, #96]	; 0x60
    cb10:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    cb14:	9d19      	ldr	r5, [sp, #100]	; 0x64
    cb16:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  assert(quantized_multiplier >= 0);
    cb1a:	2800      	cmp	r0, #0
    cb1c:	db7a      	blt.n	cc14 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    cb1e:	f105 061f 	add.w	r6, r5, #31
    cb22:	2e26      	cmp	r6, #38	; 0x26
    cb24:	d87c      	bhi.n	cc20 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    cb26:	1c16      	adds	r6, r2, #0
    cb28:	960c      	str	r6, [sp, #48]	; 0x30
    cb2a:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    cb2e:	960d      	str	r6, [sp, #52]	; 0x34
    cb30:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    cb34:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    cb38:	bf08      	it	eq
    cb3a:	2e00      	cmpeq	r6, #0
    cb3c:	d276      	bcs.n	cc2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    cb3e:	4e50      	ldr	r6, [pc, #320]	; (cc80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    cb40:	42b0      	cmp	r0, r6
    cb42:	dc79      	bgt.n	cc38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    cb44:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    cb48:	1400      	asrs	r0, r0, #16
  int total_shift = 15 - shift;
    cb4a:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    cb4e:	17c7      	asrs	r7, r0, #31
    cb50:	fb02 f607 	mul.w	r6, r2, r7
    cb54:	fb00 6603 	mla	r6, r0, r3, r6
    cb58:	fba2 2300 	umull	r2, r3, r2, r0
    cb5c:	4433      	add	r3, r6
    cb5e:	f1c5 070e 	rsb	r7, r5, #14
    cb62:	2001      	movs	r0, #1
    cb64:	f1a7 0a20 	sub.w	sl, r7, #32
    cb68:	f1c7 0e20 	rsb	lr, r7, #32
    cb6c:	fa00 f60a 	lsl.w	r6, r0, sl
    cb70:	fa20 fe0e 	lsr.w	lr, r0, lr
    cb74:	ea46 060e 	orr.w	r6, r6, lr
    cb78:	40b8      	lsls	r0, r7
    cb7a:	1810      	adds	r0, r2, r0
    cb7c:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    cb80:	3511      	adds	r5, #17
    cb82:	f1bc 0320 	subs.w	r3, ip, #32
    cb86:	fa20 f00c 	lsr.w	r0, r0, ip
    cb8a:	fa06 f505 	lsl.w	r5, r6, r5
    cb8e:	ea40 0005 	orr.w	r0, r0, r5
    cb92:	d402      	bmi.n	cb9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    cb94:	fa46 f303 	asr.w	r3, r6, r3
    cb98:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    cb9a:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    cb9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cb9e:	4283      	cmp	r3, r0
    cba0:	dc4d      	bgt.n	cc3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    cba2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    cba4:	681a      	ldr	r2, [r3, #0]
    cba6:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    cba8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    cbaa:	429a      	cmp	r2, r3
    cbac:	dc49      	bgt.n	cc42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    cbae:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    cbb0:	681a      	ldr	r2, [r3, #0]
    cbb2:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    cbb4:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cbb6:	2b04      	cmp	r3, #4
    cbb8:	d145      	bne.n	cc46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cbba:	9800      	ldr	r0, [sp, #0]
    cbbc:	2800      	cmp	r0, #0
    cbbe:	db44      	blt.n	cc4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    cbc0:	6863      	ldr	r3, [r4, #4]
    cbc2:	4298      	cmp	r0, r3
    cbc4:	da41      	bge.n	cc4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	db40      	blt.n	cc4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    cbcc:	68a5      	ldr	r5, [r4, #8]
    cbce:	42ab      	cmp	r3, r5
    cbd0:	da3d      	bge.n	cc4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cbd2:	9b04      	ldr	r3, [sp, #16]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	db3c      	blt.n	cc52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    cbd8:	68e0      	ldr	r0, [r4, #12]
    cbda:	4283      	cmp	r3, r0
    cbdc:	da39      	bge.n	cc52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cbde:	2900      	cmp	r1, #0
    cbe0:	db39      	blt.n	cc56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    cbe2:	6923      	ldr	r3, [r4, #16]
    cbe4:	4299      	cmp	r1, r3
    cbe6:	da36      	bge.n	cc56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    cbe8:	9e00      	ldr	r6, [sp, #0]
    cbea:	9f01      	ldr	r7, [sp, #4]
    cbec:	fb05 7506 	mla	r5, r5, r6, r7
    cbf0:	9e04      	ldr	r6, [sp, #16]
    cbf2:	fb05 6000 	mla	r0, r5, r0, r6
    cbf6:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    cbfa:	9834      	ldr	r0, [sp, #208]	; 0xd0
    cbfc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cc00:	3101      	adds	r1, #1
    cc02:	9b05      	ldr	r3, [sp, #20]
    cc04:	4299      	cmp	r1, r3
    cc06:	da28      	bge.n	cc5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    cc08:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    cc0a:	2200      	movs	r2, #0
    cc0c:	2300      	movs	r3, #0
    cc0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    cc12:	e767      	b.n	cae4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    cc14:	4b1b      	ldr	r3, [pc, #108]	; (cc84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    cc16:	4a1c      	ldr	r2, [pc, #112]	; (cc88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc18:	21b3      	movs	r1, #179	; 0xb3
    cc1a:	481c      	ldr	r0, [pc, #112]	; (cc8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc1c:	f005 ff3e 	bl	12a9c <__assert_func>
  assert(shift >= -31 && shift < 8);
    cc20:	4b1b      	ldr	r3, [pc, #108]	; (cc90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    cc22:	4a19      	ldr	r2, [pc, #100]	; (cc88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc24:	21b4      	movs	r1, #180	; 0xb4
    cc26:	4819      	ldr	r0, [pc, #100]	; (cc8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc28:	f005 ff38 	bl	12a9c <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    cc2c:	4b19      	ldr	r3, [pc, #100]	; (cc94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    cc2e:	4a16      	ldr	r2, [pc, #88]	; (cc88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    cc30:	21b5      	movs	r1, #181	; 0xb5
    cc32:	4816      	ldr	r0, [pc, #88]	; (cc8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    cc34:	f005 ff32 	bl	12a9c <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    cc38:	f647 70ff 	movw	r0, #32767	; 0x7fff
    cc3c:	e785      	b.n	cb4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    cc3e:	ab1d      	add	r3, sp, #116	; 0x74
    cc40:	e7b0      	b.n	cba4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    cc42:	ab1c      	add	r3, sp, #112	; 0x70
    cc44:	e7b4      	b.n	cbb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cc46:	f00b ff25 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cc4a:	f00b ff23 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cc4e:	f00b ff21 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cc52:	f00b ff1f 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cc56:	f00b ff1d 	bl	18a94 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cc5a:	9b04      	ldr	r3, [sp, #16]
    cc5c:	3301      	adds	r3, #1
    cc5e:	9304      	str	r3, [sp, #16]
    cc60:	e68c      	b.n	c97c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    cc62:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cc64:	9b01      	ldr	r3, [sp, #4]
    cc66:	3301      	adds	r3, #1
    cc68:	9301      	str	r3, [sp, #4]
    cc6a:	e679      	b.n	c960 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    cc6c:	46c8      	mov	r8, r9
    cc6e:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    cc70:	9b00      	ldr	r3, [sp, #0]
    cc72:	3301      	adds	r3, #1
    cc74:	9300      	str	r3, [sp, #0]
    cc76:	e66a      	b.n	c94e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    cc78:	b025      	add	sp, #148	; 0x94
    cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc7e:	bf00      	nop
    cc80:	7ffeffff 	.word	0x7ffeffff
    cc84:	00034720 	.word	0x00034720
    cc88:	0003473c 	.word	0x0003473c
    cc8c:	00034784 	.word	0x00034784
    cc90:	000347d4 	.word	0x000347d4
    cc94:	000347f0 	.word	0x000347f0

0000cc98 <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    cc98:	b470      	push	{r4, r5, r6}
    cc9a:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    cc9c:	4604      	mov	r4, r0
    cc9e:	4d05      	ldr	r5, [pc, #20]	; (ccb4 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    cca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    ccac:	4630      	mov	r0, r6
    ccae:	bc70      	pop	{r4, r5, r6}
    ccb0:	4770      	bx	lr
    ccb2:	bf00      	nop
    ccb4:	00019a50 	.word	0x00019a50

0000ccb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccbc:	b0a7      	sub	sp, #156	; 0x9c
    ccbe:	911a      	str	r1, [sp, #104]	; 0x68
    ccc0:	921b      	str	r2, [sp, #108]	; 0x6c
    ccc2:	469a      	mov	sl, r3
    ccc4:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    ccc6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    ccc8:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    cccc:	6942      	ldr	r2, [r0, #20]
    ccce:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    ccd0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    ccd4:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    ccd6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    ccda:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    ccdc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    cce0:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    cce2:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    cce6:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    cce8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    ccec:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    ccee:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    ccf2:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    ccf4:	69c2      	ldr	r2, [r0, #28]
    ccf6:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    ccf8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ccfa:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    ccfc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ccfe:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    cd00:	4291      	cmp	r1, r2
    cd02:	f300 8082 	bgt.w	ce0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    cd06:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    cd0a:	2a04      	cmp	r2, #4
    cd0c:	d17f      	bne.n	ce0e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    cd0e:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    cd10:	2a04      	cmp	r2, #4
    cd12:	d17e      	bne.n	ce12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    cd14:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    cd18:	2a04      	cmp	r2, #4
    cd1a:	d17c      	bne.n	ce16 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    cd1c:	f8da 2000 	ldr.w	r2, [sl]
    cd20:	2a00      	cmp	r2, #0
    cd22:	dd7a      	ble.n	ce1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd24:	2a05      	cmp	r2, #5
    cd26:	dd7a      	ble.n	ce1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    cd28:	f8da 2004 	ldr.w	r2, [sl, #4]
    cd2c:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    cd2e:	f8d8 1000 	ldr.w	r1, [r8]
    cd32:	2900      	cmp	r1, #0
    cd34:	dd76      	ble.n	ce24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd36:	2905      	cmp	r1, #5
    cd38:	dd76      	ble.n	ce28 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    cd3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cd3e:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cd40:	4291      	cmp	r1, r2
    cd42:	d174      	bne.n	ce2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd44:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    cd46:	f8d8 1000 	ldr.w	r1, [r8]
    cd4a:	2900      	cmp	r1, #0
    cd4c:	dd71      	ble.n	ce32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd4e:	2905      	cmp	r1, #5
    cd50:	dd71      	ble.n	ce36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    cd52:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cd56:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd58:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    cd5a:	428a      	cmp	r2, r1
    cd5c:	dc6e      	bgt.n	ce3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    cd5e:	aa25      	add	r2, sp, #148	; 0x94
    cd60:	6812      	ldr	r2, [r2, #0]
    cd62:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    cd64:	f8da 2000 	ldr.w	r2, [sl]
    cd68:	2a03      	cmp	r2, #3
    cd6a:	dd69      	ble.n	ce40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd6c:	2a05      	cmp	r2, #5
    cd6e:	dd69      	ble.n	ce44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    cd70:	f8da 2004 	ldr.w	r2, [sl, #4]
    cd74:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    cd76:	6839      	ldr	r1, [r7, #0]
    cd78:	2903      	cmp	r1, #3
    cd7a:	dd66      	ble.n	ce4a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd7c:	2905      	cmp	r1, #5
    cd7e:	dd66      	ble.n	ce4e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    cd80:	6879      	ldr	r1, [r7, #4]
    cd82:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cd84:	4291      	cmp	r1, r2
    cd86:	d164      	bne.n	ce52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd88:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    cd8a:	6839      	ldr	r1, [r7, #0]
    cd8c:	2903      	cmp	r1, #3
    cd8e:	dd62      	ble.n	ce56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cd90:	2905      	cmp	r1, #5
    cd92:	dd62      	ble.n	ce5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    cd94:	6879      	ldr	r1, [r7, #4]
    cd96:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cd98:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    cd9a:	428a      	cmp	r2, r1
    cd9c:	dc5f      	bgt.n	ce5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    cd9e:	aa23      	add	r2, sp, #140	; 0x8c
    cda0:	6812      	ldr	r2, [r2, #0]
    cda2:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    cda4:	683a      	ldr	r2, [r7, #0]
    cda6:	2a00      	cmp	r2, #0
    cda8:	dd5b      	ble.n	ce62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cdaa:	2a05      	cmp	r2, #5
    cdac:	dd5b      	ble.n	ce66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    cdae:	687a      	ldr	r2, [r7, #4]
    cdb0:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    cdb2:	f8d8 1000 	ldr.w	r1, [r8]
    cdb6:	2903      	cmp	r1, #3
    cdb8:	dd57      	ble.n	ce6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cdba:	2905      	cmp	r1, #5
    cdbc:	dd57      	ble.n	ce6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    cdbe:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cdc2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    cdc4:	4291      	cmp	r1, r2
    cdc6:	d155      	bne.n	ce74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cdc8:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    cdca:	f8d8 1000 	ldr.w	r1, [r8]
    cdce:	2903      	cmp	r1, #3
    cdd0:	dd52      	ble.n	ce78 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cdd2:	2905      	cmp	r1, #5
    cdd4:	dd52      	ble.n	ce7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    cdd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    cdda:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    cddc:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    cdde:	428a      	cmp	r2, r1
    cde0:	dc4f      	bgt.n	ce82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    cde2:	aa21      	add	r2, sp, #132	; 0x84
    cde4:	6812      	ldr	r2, [r2, #0]
    cde6:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    cde8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    cdea:	2a00      	cmp	r2, #0
    cdec:	d050      	beq.n	ce90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    cdee:	681c      	ldr	r4, [r3, #0]
    cdf0:	2c05      	cmp	r4, #5
    cdf2:	dd48      	ble.n	ce86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    cdf4:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    cdf6:	2200      	movs	r2, #0
    int buffer_size = 1;
    cdf8:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    cdfa:	42a2      	cmp	r2, r4
    cdfc:	da45      	bge.n	ce8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    cdfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ce02:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    ce06:	3201      	adds	r2, #1
    ce08:	e7f7      	b.n	cdfa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ce0a:	f00b fe43 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ce0e:	f00b fe41 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ce12:	f00b fe3f 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ce16:	f00b fe3d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce1a:	f00b fe3b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce1e:	f8da 2004 	ldr.w	r2, [sl, #4]
    ce22:	e784      	b.n	cd2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    ce24:	f00b fe36 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce28:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ce2c:	e788      	b.n	cd40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce2e:	f00b fe31 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce32:	f00b fe2f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce36:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ce3a:	e78d      	b.n	cd58 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    ce3c:	aa24      	add	r2, sp, #144	; 0x90
    ce3e:	e78f      	b.n	cd60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    ce40:	f00b fe28 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce44:	f8da 2010 	ldr.w	r2, [sl, #16]
    ce48:	e795      	b.n	cd76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    ce4a:	f00b fe23 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce4e:	6939      	ldr	r1, [r7, #16]
    ce50:	e798      	b.n	cd84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce52:	f00b fe1f 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce56:	f00b fe1d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce5a:	6939      	ldr	r1, [r7, #16]
    ce5c:	e79c      	b.n	cd98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    ce5e:	aa22      	add	r2, sp, #136	; 0x88
    ce60:	e79e      	b.n	cda0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    ce62:	f00b fe17 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce66:	687a      	ldr	r2, [r7, #4]
    ce68:	e7a3      	b.n	cdb2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    ce6a:	f00b fe13 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ce72:	e7a7      	b.n	cdc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ce74:	f00b fe0e 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ce78:	f00b fe0c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce7c:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ce80:	e7ac      	b.n	cddc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    ce82:	aa20      	add	r2, sp, #128	; 0x80
    ce84:	e7ae      	b.n	cde4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ce86:	3304      	adds	r3, #4
    ce88:	e7b5      	b.n	cdf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    ce8a:	9b03      	ldr	r3, [sp, #12]
    ce8c:	4299      	cmp	r1, r3
    ce8e:	d167      	bne.n	cf60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    ce90:	f8da 3000 	ldr.w	r3, [sl]
    ce94:	2b01      	cmp	r3, #1
    ce96:	dd65      	ble.n	cf64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ce98:	2b05      	cmp	r3, #5
    ce9a:	dd65      	ble.n	cf68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    ce9c:	f8da 3004 	ldr.w	r3, [sl, #4]
    cea0:	685b      	ldr	r3, [r3, #4]
    cea2:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    cea4:	f8da 3000 	ldr.w	r3, [sl]
    cea8:	2b02      	cmp	r3, #2
    ceaa:	dd61      	ble.n	cf70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ceac:	2b05      	cmp	r3, #5
    ceae:	dd61      	ble.n	cf74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    ceb0:	f8da 3004 	ldr.w	r3, [sl, #4]
    ceb4:	689b      	ldr	r3, [r3, #8]
    ceb6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    ceb8:	683b      	ldr	r3, [r7, #0]
    ceba:	2b01      	cmp	r3, #1
    cebc:	dd5e      	ble.n	cf7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cebe:	2b05      	cmp	r3, #5
    cec0:	dd5e      	ble.n	cf80 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    cec2:	687b      	ldr	r3, [r7, #4]
    cec4:	685b      	ldr	r3, [r3, #4]
    cec6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    cec8:	683b      	ldr	r3, [r7, #0]
    ceca:	2b02      	cmp	r3, #2
    cecc:	dd5b      	ble.n	cf86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cece:	2b05      	cmp	r3, #5
    ced0:	dd5b      	ble.n	cf8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	689b      	ldr	r3, [r3, #8]
    ced6:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    ced8:	f8d8 3000 	ldr.w	r3, [r8]
    cedc:	2b01      	cmp	r3, #1
    cede:	dd57      	ble.n	cf90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cee0:	2b05      	cmp	r3, #5
    cee2:	dd57      	ble.n	cf94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    cee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cee8:	685b      	ldr	r3, [r3, #4]
    ceea:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    ceec:	f8d8 3000 	ldr.w	r3, [r8]
    cef0:	2b02      	cmp	r3, #2
    cef2:	dd53      	ble.n	cf9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cef4:	2b05      	cmp	r3, #5
    cef6:	dd53      	ble.n	cfa0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    cef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    cefc:	689b      	ldr	r3, [r3, #8]
    cefe:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    cf00:	f04f 0b00 	mov.w	fp, #0
    cf04:	46d1      	mov	r9, sl
    cf06:	46ba      	mov	sl, r7
    cf08:	4647      	mov	r7, r8
    cf0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cf0c:	459b      	cmp	fp, r3
    cf0e:	f280 81cd 	bge.w	d2ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    cf12:	2300      	movs	r3, #0
    cf14:	9301      	str	r3, [sp, #4]
    cf16:	46c8      	mov	r8, r9
    cf18:	46d1      	mov	r9, sl
    cf1a:	46da      	mov	sl, fp
    cf1c:	46bb      	mov	fp, r7
    cf1e:	9b01      	ldr	r3, [sp, #4]
    cf20:	9905      	ldr	r1, [sp, #20]
    cf22:	428b      	cmp	r3, r1
    cf24:	f280 81bb 	bge.w	d29e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    cf28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf2a:	fb02 f303 	mul.w	r3, r2, r3
    cf2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cf30:	1a9b      	subs	r3, r3, r2
    cf32:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    cf34:	2300      	movs	r3, #0
    cf36:	9302      	str	r3, [sp, #8]
    cf38:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    cf3c:	46c3      	mov	fp, r8
    cf3e:	46c8      	mov	r8, r9
    cf40:	46d1      	mov	r9, sl
    cf42:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    cf46:	9b02      	ldr	r3, [sp, #8]
    cf48:	9904      	ldr	r1, [sp, #16]
    cf4a:	428b      	cmp	r3, r1
    cf4c:	f280 819c 	bge.w	d288 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    cf50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf52:	fb02 f303 	mul.w	r3, r2, r3
    cf56:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cf58:	1a9b      	subs	r3, r3, r2
    cf5a:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    cf5c:	2400      	movs	r4, #0
    cf5e:	e157      	b.n	d210 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    cf60:	f00b fd98 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    cf64:	f00b fd96 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf68:	f8da 3008 	ldr.w	r3, [sl, #8]
    cf6c:	9309      	str	r3, [sp, #36]	; 0x24
    cf6e:	e799      	b.n	cea4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    cf70:	f00b fd90 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf74:	f8da 300c 	ldr.w	r3, [sl, #12]
    cf78:	9308      	str	r3, [sp, #32]
    cf7a:	e79d      	b.n	ceb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    cf7c:	f00b fd8a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf80:	68bb      	ldr	r3, [r7, #8]
    cf82:	9307      	str	r3, [sp, #28]
    cf84:	e7a0      	b.n	cec8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    cf86:	f00b fd85 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	9306      	str	r3, [sp, #24]
    cf8e:	e7a3      	b.n	ced8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    cf90:	f00b fd80 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cf94:	f8d8 3008 	ldr.w	r3, [r8, #8]
    cf98:	9305      	str	r3, [sp, #20]
    cf9a:	e7a7      	b.n	ceec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    cf9c:	f00b fd7a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cfa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    cfa4:	9304      	str	r3, [sp, #16]
    cfa6:	e7ab      	b.n	cf00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cfa8:	f00b fd74 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cfac:	f00b fd72 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cfb0:	f00b fd70 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cfb4:	f00b fd6e 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cfb8:	f00b fd6c 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    cfbc:	f00b fd6a 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    cfc0:	f00b fd68 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    cfc4:	f00b fd66 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    cfc8:	f00b fd64 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    cfcc:	f00b fd62 	bl	18a94 <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    cfd0:	3201      	adds	r2, #1
    cfd2:	9b06      	ldr	r3, [sp, #24]
    cfd4:	429a      	cmp	r2, r3
    cfd6:	da63      	bge.n	d0a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    cfd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfda:	9815      	ldr	r0, [sp, #84]	; 0x54
    cfdc:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    cfe0:	2800      	cmp	r0, #0
    cfe2:	dbf5      	blt.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cfe4:	9b08      	ldr	r3, [sp, #32]
    cfe6:	4298      	cmp	r0, r3
    cfe8:	daf2      	bge.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cfea:	2900      	cmp	r1, #0
    cfec:	dbf0      	blt.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cff0:	4299      	cmp	r1, r3
    cff2:	daed      	bge.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    cff4:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    cff6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    cff8:	42ab      	cmp	r3, r5
    cffa:	dae9      	bge.n	cfd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    cffc:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d000:	2d04      	cmp	r5, #4
    d002:	d1d1      	bne.n	cfa8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d004:	f1b9 0f00 	cmp.w	r9, #0
    d008:	dbd0      	blt.n	cfac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    d00a:	f8db 5004 	ldr.w	r5, [fp, #4]
    d00e:	45a9      	cmp	r9, r5
    d010:	dacc      	bge.n	cfac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d012:	2900      	cmp	r1, #0
    d014:	dbcc      	blt.n	cfb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    d016:	f8db c008 	ldr.w	ip, [fp, #8]
    d01a:	4561      	cmp	r1, ip
    d01c:	dac8      	bge.n	cfb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d01e:	2800      	cmp	r0, #0
    d020:	dbc8      	blt.n	cfb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    d022:	f8db 700c 	ldr.w	r7, [fp, #12]
    d026:	42b8      	cmp	r0, r7
    d028:	dac4      	bge.n	cfb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d02a:	2b00      	cmp	r3, #0
    d02c:	dbc4      	blt.n	cfb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    d02e:	f8db 5010 	ldr.w	r5, [fp, #16]
    d032:	42ab      	cmp	r3, r5
    d034:	dac0      	bge.n	cfb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d036:	fb0c 1c09 	mla	ip, ip, r9, r1
    d03a:	fb0c 0707 	mla	r7, ip, r7, r0
    d03e:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    d042:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    d044:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    d046:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d04a:	2d04      	cmp	r5, #4
    d04c:	d1b6      	bne.n	cfbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d04e:	2c00      	cmp	r4, #0
    d050:	dbb6      	blt.n	cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    d052:	f8d8 5004 	ldr.w	r5, [r8, #4]
    d056:	42ac      	cmp	r4, r5
    d058:	dab2      	bge.n	cfc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d05a:	2e00      	cmp	r6, #0
    d05c:	dbb2      	blt.n	cfc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    d05e:	f8d8 e008 	ldr.w	lr, [r8, #8]
    d062:	4576      	cmp	r6, lr
    d064:	daae      	bge.n	cfc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d066:	2a00      	cmp	r2, #0
    d068:	dbae      	blt.n	cfc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    d06a:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    d06e:	4562      	cmp	r2, ip
    d070:	daaa      	bge.n	cfc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d072:	2b00      	cmp	r3, #0
    d074:	dbaa      	blt.n	cfcc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    d076:	f8d8 5010 	ldr.w	r5, [r8, #16]
    d07a:	42ab      	cmp	r3, r5
    d07c:	daa6      	bge.n	cfcc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d07e:	fb0e 6e04 	mla	lr, lr, r4, r6
    d082:	fb0e 2c0c 	mla	ip, lr, ip, r2
    d086:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    d08a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    d08c:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    d090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d092:	442f      	add	r7, r5
    d094:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    d096:	fb0c 5507 	mla	r5, ip, r7, r5
    d09a:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    d09c:	3301      	adds	r3, #1
    d09e:	e7aa      	b.n	cff6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    d0a0:	3601      	adds	r6, #1
    d0a2:	9b07      	ldr	r3, [sp, #28]
    d0a4:	429e      	cmp	r6, r3
    d0a6:	da05      	bge.n	d0b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    d0a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d0ac:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    d0b0:	2200      	movs	r2, #0
    d0b2:	e78e      	b.n	cfd2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    d0b4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    d0b6:	b123      	cbz	r3, d0c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    d0b8:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    d0bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d0be:	4413      	add	r3, r2
    d0c0:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    d0c2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    d0c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    d0c6:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    d0ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d0cc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    d0d0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    d0d4:	2e00      	cmp	r6, #0
    d0d6:	f340 80a1 	ble.w	d21c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    d0da:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    d0dc:	409d      	lsls	r5, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d0de:	45ac      	cmp	ip, r5
    d0e0:	f000 809e 	beq.w	d220 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    d0e4:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    d0e6:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    d0e8:	4660      	mov	r0, ip
    d0ea:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    d0ec:	fb05 f101 	mul.w	r1, r5, r1
    d0f0:	fb0c 1103 	mla	r1, ip, r3, r1
    d0f4:	fba5 230c 	umull	r2, r3, r5, ip
    d0f8:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d0fa:	2a00      	cmp	r2, #0
    d0fc:	f173 0100 	sbcs.w	r1, r3, #0
    d100:	f2c0 8095 	blt.w	d22e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    d104:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d108:	1852      	adds	r2, r2, r1
    d10a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    d10e:	4611      	mov	r1, r2
    d110:	461d      	mov	r5, r3
    d112:	2a00      	cmp	r2, #0
    d114:	f173 0000 	sbcs.w	r0, r3, #0
    d118:	f2c0 808b 	blt.w	d232 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    d11c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    d11e:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d122:	2f00      	cmp	r7, #0
    d124:	f040 808d 	bne.w	d242 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>
  assert(exponent >= 0);
    d128:	2e00      	cmp	r6, #0
    d12a:	f2c0 808d 	blt.w	d248 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    d12e:	2e1f      	cmp	r6, #31
    d130:	f300 8091 	bgt.w	d256 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d134:	2701      	movs	r7, #1
    d136:	fa07 f006 	lsl.w	r0, r7, r6
    d13a:	3801      	subs	r0, #1
    d13c:	f008 ff2a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d140:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    d142:	2000      	movs	r0, #0
    d144:	f008 ff26 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d148:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    d14a:	4638      	mov	r0, r7
    d14c:	f008 ff22 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d150:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    d152:	990a      	ldr	r1, [sp, #40]	; 0x28
    d154:	4628      	mov	r0, r5
    d156:	f008 ff1e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d15a:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d15c:	4639      	mov	r1, r7
    d15e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d160:	f008 ff1b 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d164:	4607      	mov	r7, r0
    d166:	9918      	ldr	r1, [sp, #96]	; 0x60
    d168:	4628      	mov	r0, r5
    d16a:	f008 ff22 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d16e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d170:	f008 ff11 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d174:	4601      	mov	r1, r0
    d176:	4638      	mov	r0, r7
    d178:	f008 ff11 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d17c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    d17e:	4631      	mov	r1, r6
    d180:	4628      	mov	r0, r5
    d182:	f008 ff0a 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d186:	4605      	mov	r5, r0
    d188:	4639      	mov	r1, r7
    d18a:	9819      	ldr	r0, [sp, #100]	; 0x64
    d18c:	f008 ff19 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d190:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d192:	f008 ff00 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d196:	4601      	mov	r1, r0
    d198:	4628      	mov	r0, r5
    d19a:	f008 ff00 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    d19e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d1a0:	4418      	add	r0, r3
    d1a2:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    d1a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    d1a6:	4290      	cmp	r0, r2
    d1a8:	db5c      	blt.n	d264 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    d1aa:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    d1ac:	681b      	ldr	r3, [r3, #0]
    d1ae:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    d1b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d1b2:	4293      	cmp	r3, r2
    d1b4:	dc58      	bgt.n	d268 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    d1b6:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    d1b8:	6818      	ldr	r0, [r3, #0]
    d1ba:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    d1bc:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d1c0:	2b04      	cmp	r3, #4
    d1c2:	d153      	bne.n	d26c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d1c4:	f1b9 0f00 	cmp.w	r9, #0
    d1c8:	db52      	blt.n	d270 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    d1ca:	f8da 3004 	ldr.w	r3, [sl, #4]
    d1ce:	4599      	cmp	r9, r3
    d1d0:	da4e      	bge.n	d270 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	2b00      	cmp	r3, #0
    d1d6:	db4d      	blt.n	d274 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    d1d8:	f8da 1008 	ldr.w	r1, [sl, #8]
    d1dc:	428b      	cmp	r3, r1
    d1de:	da49      	bge.n	d274 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d1e0:	9b02      	ldr	r3, [sp, #8]
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	db48      	blt.n	d278 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    d1e6:	f8da 200c 	ldr.w	r2, [sl, #12]
    d1ea:	4293      	cmp	r3, r2
    d1ec:	da44      	bge.n	d278 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d1ee:	2c00      	cmp	r4, #0
    d1f0:	db44      	blt.n	d27c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    d1f2:	f8da 3010 	ldr.w	r3, [sl, #16]
    d1f6:	429c      	cmp	r4, r3
    d1f8:	da40      	bge.n	d27c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    d1fa:	9d01      	ldr	r5, [sp, #4]
    d1fc:	fb01 5109 	mla	r1, r1, r9, r5
    d200:	9d02      	ldr	r5, [sp, #8]
    d202:	fb01 5202 	mla	r2, r1, r2, r5
    d206:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    d20a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    d20c:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    d20e:	3401      	adds	r4, #1
    d210:	9b03      	ldr	r3, [sp, #12]
    d212:	429c      	cmp	r4, r3
    d214:	da34      	bge.n	d280 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    d216:	2600      	movs	r6, #0
    d218:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    d21a:	e742      	b.n	d0a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    d21c:	4276      	negs	r6, r6
    d21e:	e75d      	b.n	d0dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d220:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    d224:	d001      	beq.n	d22a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    d226:	2700      	movs	r7, #0
    d228:	e75d      	b.n	d0e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    d22a:	2701      	movs	r7, #1
    d22c:	e75b      	b.n	d0e6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d22e:	4921      	ldr	r1, [pc, #132]	; (d2b4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    d230:	e76a      	b.n	d108 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d236:	1851      	adds	r1, r2, r1
    d238:	f04f 0500 	mov.w	r5, #0
    d23c:	eb43 0505 	adc.w	r5, r3, r5
    d240:	e76c      	b.n	d11c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d242:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    d246:	e76f      	b.n	d128 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    d248:	4b1b      	ldr	r3, [pc, #108]	; (d2b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    d24a:	4a1c      	ldr	r2, [pc, #112]	; (d2bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    d24c:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d250:	481b      	ldr	r0, [pc, #108]	; (d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    d252:	f005 fc23 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    d256:	4b1b      	ldr	r3, [pc, #108]	; (d2c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    d258:	4a18      	ldr	r2, [pc, #96]	; (d2bc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    d25a:	f240 1167 	movw	r1, #359	; 0x167
    d25e:	4818      	ldr	r0, [pc, #96]	; (d2c0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    d260:	f005 fc1c 	bl	12a9c <__assert_func>
	return __b;
    d264:	ab1f      	add	r3, sp, #124	; 0x7c
    d266:	e7a1      	b.n	d1ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    d268:	ab1e      	add	r3, sp, #120	; 0x78
    d26a:	e7a5      	b.n	d1b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    d26c:	f00b fc12 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    d270:	f00b fc10 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    d274:	f00b fc0e 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    d278:	f00b fc0c 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    d27c:	f00b fc0a 	bl	18a94 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    d280:	9b02      	ldr	r3, [sp, #8]
    d282:	3301      	adds	r3, #1
    d284:	9302      	str	r3, [sp, #8]
    d286:	e65e      	b.n	cf46 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    d288:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    d28c:	46ca      	mov	sl, r9
    d28e:	46c1      	mov	r9, r8
    d290:	46d8      	mov	r8, fp
    d292:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    d296:	9b01      	ldr	r3, [sp, #4]
    d298:	3301      	adds	r3, #1
    d29a:	9301      	str	r3, [sp, #4]
    d29c:	e63f      	b.n	cf1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    d29e:	465f      	mov	r7, fp
    d2a0:	46d3      	mov	fp, sl
    d2a2:	46ca      	mov	sl, r9
    d2a4:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    d2a6:	f10b 0b01 	add.w	fp, fp, #1
    d2aa:	e62e      	b.n	cf0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    d2ac:	b027      	add	sp, #156	; 0x9c
    d2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2b2:	bf00      	nop
    d2b4:	c0000001 	.word	0xc0000001
    d2b8:	00034630 	.word	0x00034630
    d2bc:	00034640 	.word	0x00034640
    d2c0:	00034698 	.word	0x00034698
    d2c4:	000346f4 	.word	0x000346f4

0000d2c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2cc:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    d2ce:	4bae      	ldr	r3, [pc, #696]	; (d588 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    d2d0:	681a      	ldr	r2, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d2d2:	2800      	cmp	r0, #0
    d2d4:	d052      	beq.n	d37c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    d2d6:	4688      	mov	r8, r1
    d2d8:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    d2da:	2900      	cmp	r1, #0
    d2dc:	d050      	beq.n	d380 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d2de:	6d44      	ldr	r4, [r0, #84]	; 0x54
    d2e0:	680b      	ldr	r3, [r1, #0]
    d2e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    d2e6:	6859      	ldr	r1, [r3, #4]
    d2e8:	47a0      	blx	r4
    d2ea:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    d2ec:	4ba7      	ldr	r3, [pc, #668]	; (d58c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    d2ee:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d2f0:	f1b9 0f00 	cmp.w	r9, #0
    d2f4:	d046      	beq.n	d384 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    d2f6:	f1b8 0f00 	cmp.w	r8, #0
    d2fa:	d045      	beq.n	d388 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d2fc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d300:	f8d8 3000 	ldr.w	r3, [r8]
    d304:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d308:	6859      	ldr	r1, [r3, #4]
    d30a:	4648      	mov	r0, r9
    d30c:	4790      	blx	r2
    d30e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d310:	f8d8 3000 	ldr.w	r3, [r8]
    d314:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d316:	2b03      	cmp	r3, #3
    d318:	d038      	beq.n	d38c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    d31a:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    d31c:	4b9c      	ldr	r3, [pc, #624]	; (d590 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    d31e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d320:	f1b9 0f00 	cmp.w	r9, #0
    d324:	d049      	beq.n	d3ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    d326:	f1b8 0f00 	cmp.w	r8, #0
    d32a:	d048      	beq.n	d3be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d32c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d330:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d334:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d338:	6859      	ldr	r1, [r3, #4]
    d33a:	4648      	mov	r0, r9
    d33c:	4790      	blx	r2
    d33e:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d340:	f8d8 1014 	ldr.w	r1, [r8, #20]
    d344:	2900      	cmp	r1, #0
    d346:	d03c      	beq.n	d3c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    d348:	f8d8 b010 	ldr.w	fp, [r8, #16]
    d34c:	f1bb 0f00 	cmp.w	fp, #0
    d350:	d039      	beq.n	d3c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    d352:	7a38      	ldrb	r0, [r7, #8]
    d354:	7a23      	ldrb	r3, [r4, #8]
    d356:	4298      	cmp	r0, r3
    d358:	d037      	beq.n	d3ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    d35a:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d35e:	9303      	str	r3, [sp, #12]
    d360:	9002      	str	r0, [sp, #8]
    d362:	4b8c      	ldr	r3, [pc, #560]	; (d594 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    d364:	9301      	str	r3, [sp, #4]
    d366:	4b8c      	ldr	r3, [pc, #560]	; (d598 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    d368:	9300      	str	r3, [sp, #0]
    d36a:	2337      	movs	r3, #55	; 0x37
    d36c:	4a8b      	ldr	r2, [pc, #556]	; (d59c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    d36e:	498c      	ldr	r1, [pc, #560]	; (d5a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    d370:	4648      	mov	r0, r9
    d372:	47a0      	blx	r4
    d374:	2001      	movs	r0, #1
}
    d376:	b067      	add	sp, #412	; 0x19c
    d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    d37c:	f00b fb8a 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    d380:	f00b fb88 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    d384:	f00b fb86 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    d388:	f00b fb84 	bl	18a94 <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    d38c:	4b85      	ldr	r3, [pc, #532]	; (d5a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    d38e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d390:	f1b9 0f00 	cmp.w	r9, #0
    d394:	d00d      	beq.n	d3b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    d396:	f1b8 0f00 	cmp.w	r8, #0
    d39a:	d00c      	beq.n	d3b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d39c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    d3a0:	f8d8 3000 	ldr.w	r3, [r8]
    d3a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d3a8:	6859      	ldr	r1, [r3, #4]
    d3aa:	4648      	mov	r0, r9
    d3ac:	4790      	blx	r2
    d3ae:	4606      	mov	r6, r0
    d3b0:	e7b4      	b.n	d31c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    d3b2:	f00b fb6f 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    d3b6:	f00b fb6d 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    d3ba:	f00b fb6b 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    d3be:	f00b fb69 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d3c2:	f00b fb67 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d3c6:	f00b fb65 	bl	18a94 <abort>
  TF_LITE_ENSURE_MSG(
    d3ca:	7a2b      	ldrb	r3, [r5, #8]
    d3cc:	4298      	cmp	r0, r3
    d3ce:	d00a      	beq.n	d3e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d3d0:	2807      	cmp	r0, #7
    d3d2:	d101      	bne.n	d3d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    d3d4:	2b09      	cmp	r3, #9
    d3d6:	d006      	beq.n	d3e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    d3d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    d3dc:	4972      	ldr	r1, [pc, #456]	; (d5a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    d3de:	4648      	mov	r0, r9
    d3e0:	4798      	blx	r3
    d3e2:	2001      	movs	r0, #1
    d3e4:	e7c7      	b.n	d376 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    d3e6:	2807      	cmp	r0, #7
    d3e8:	d073      	beq.n	d4d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    d3ea:	2809      	cmp	r0, #9
    d3ec:	f000 80e0 	beq.w	d5b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    d3f0:	2801      	cmp	r0, #1
    d3f2:	d00a      	beq.n	d40a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    d3f4:	f8d9 4014 	ldr.w	r4, [r9, #20]
    d3f8:	f7fb ffc8 	bl	938c <TfLiteTypeGetName>
    d3fc:	4602      	mov	r2, r0
    d3fe:	7a3b      	ldrb	r3, [r7, #8]
    d400:	496a      	ldr	r1, [pc, #424]	; (d5ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    d402:	4648      	mov	r0, r9
    d404:	47a0      	blx	r4
      return kTfLiteError;
    d406:	2001      	movs	r0, #1
    d408:	e7b5      	b.n	d376 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    d40a:	465a      	mov	r2, fp
    d40c:	a80a      	add	r0, sp, #40	; 0x28
    d40e:	f009 fc4f 	bl	16cb0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d412:	4639      	mov	r1, r7
    d414:	a818      	add	r0, sp, #96	; 0x60
    d416:	f009 ff68 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d41a:	4638      	mov	r0, r7
    d41c:	f008 fda6 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d420:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    d422:	4629      	mov	r1, r5
    d424:	a81e      	add	r0, sp, #120	; 0x78
    d426:	f009 ff60 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d42a:	4628      	mov	r0, r5
    d42c:	f008 fd9e 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d430:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d432:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    d436:	4631      	mov	r1, r6
    d438:	4640      	mov	r0, r8
    d43a:	f009 ff56 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d43e:	4630      	mov	r0, r6
    d440:	f008 fd94 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    d444:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d446:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    d44a:	4621      	mov	r1, r4
    d44c:	4648      	mov	r0, r9
    d44e:	f009 ff4c 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d452:	4620      	mov	r0, r4
    d454:	f008 fd90 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    d458:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    d45a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    d45e:	2100      	movs	r1, #0
    d460:	4650      	mov	r0, sl
    d462:	f009 ff42 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    d466:	2300      	movs	r3, #0
    d468:	9306      	str	r3, [sp, #24]
    d46a:	f8cd a014 	str.w	sl, [sp, #20]
    d46e:	9404      	str	r4, [sp, #16]
    d470:	f8cd 900c 	str.w	r9, [sp, #12]
    d474:	9602      	str	r6, [sp, #8]
    d476:	f8cd 8004 	str.w	r8, [sp, #4]
    d47a:	9500      	str	r5, [sp, #0]
    d47c:	ab1e      	add	r3, sp, #120	; 0x78
    d47e:	463a      	mov	r2, r7
    d480:	a918      	add	r1, sp, #96	; 0x60
    d482:	a80a      	add	r0, sp, #40	; 0x28
    d484:	f009 f999 	bl	167ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    d488:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    d48a:	2b05      	cmp	r3, #5
    d48c:	dd03      	ble.n	d496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    d48e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    d490:	b108      	cbz	r0, d496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    d492:	f00b faea 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d496:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    d498:	2b05      	cmp	r3, #5
    d49a:	dd03      	ble.n	d4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    d49c:	982b      	ldr	r0, [sp, #172]	; 0xac
    d49e:	b108      	cbz	r0, d4a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    d4a0:	f00b fae3 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d4a6:	2b05      	cmp	r3, #5
    d4a8:	dd03      	ble.n	d4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    d4aa:	9825      	ldr	r0, [sp, #148]	; 0x94
    d4ac:	b108      	cbz	r0, d4b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    d4ae:	f00b fadc 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    d4b4:	2b05      	cmp	r3, #5
    d4b6:	dd03      	ble.n	d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    d4b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d4ba:	b108      	cbz	r0, d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    d4bc:	f00b fad5 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d4c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d4c2:	2b05      	cmp	r3, #5
    d4c4:	dd03      	ble.n	d4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    d4c6:	9819      	ldr	r0, [sp, #100]	; 0x64
    d4c8:	b108      	cbz	r0, d4ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    d4ca:	f00b face 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    d4ce:	2000      	movs	r0, #0
      break;
    d4d0:	e751      	b.n	d376 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d4d2:	465a      	mov	r2, fp
    d4d4:	a80a      	add	r0, sp, #40	; 0x28
    d4d6:	f009 fbc4 	bl	16c62 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d4da:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d4de:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    d4e2:	4639      	mov	r1, r7
    d4e4:	a836      	add	r0, sp, #216	; 0xd8
    d4e6:	f009 ff00 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d4ea:	4638      	mov	r0, r7
    d4ec:	f009 f947 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    d4f0:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d4f2:	af3c      	add	r7, sp, #240	; 0xf0
    d4f4:	4629      	mov	r1, r5
    d4f6:	4638      	mov	r0, r7
    d4f8:	f009 fef7 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d4fc:	4628      	mov	r0, r5
    d4fe:	f008 fd3f 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d502:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d504:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    d508:	4631      	mov	r1, r6
    d50a:	4640      	mov	r0, r8
    d50c:	f009 feed 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d510:	4630      	mov	r0, r6
    d512:	f009 f944 	bl	1679e <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    d516:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d518:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    d51c:	4621      	mov	r1, r4
    d51e:	4648      	mov	r0, r9
    d520:	f009 fee3 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d524:	4620      	mov	r0, r4
    d526:	f009 f930 	bl	1678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    d52a:	9006      	str	r0, [sp, #24]
    d52c:	f8cd 9014 	str.w	r9, [sp, #20]
    d530:	9604      	str	r6, [sp, #16]
    d532:	f8cd 800c 	str.w	r8, [sp, #12]
    d536:	9502      	str	r5, [sp, #8]
    d538:	9701      	str	r7, [sp, #4]
    d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d53c:	9300      	str	r3, [sp, #0]
    d53e:	ab36      	add	r3, sp, #216	; 0xd8
    d540:	465a      	mov	r2, fp
    d542:	4651      	mov	r1, sl
    d544:	a80a      	add	r0, sp, #40	; 0x28
    d546:	f7ff f8d7 	bl	c6f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    d54a:	9b48      	ldr	r3, [sp, #288]	; 0x120
    d54c:	2b05      	cmp	r3, #5
    d54e:	dd03      	ble.n	d558 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    d550:	9849      	ldr	r0, [sp, #292]	; 0x124
    d552:	b108      	cbz	r0, d558 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    d554:	f00b fa89 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d558:	9b42      	ldr	r3, [sp, #264]	; 0x108
    d55a:	2b05      	cmp	r3, #5
    d55c:	dd03      	ble.n	d566 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    d55e:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d560:	b108      	cbz	r0, d566 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    d562:	f00b fa82 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d566:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    d568:	2b05      	cmp	r3, #5
    d56a:	dd03      	ble.n	d574 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    d56c:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d56e:	b108      	cbz	r0, d574 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    d570:	f00b fa7b 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d574:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    d576:	2b05      	cmp	r3, #5
    d578:	dd03      	ble.n	d582 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    d57a:	9837      	ldr	r0, [sp, #220]	; 0xdc
    d57c:	b108      	cbz	r0, d582 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    d57e:	f00b fa74 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    d582:	2000      	movs	r0, #0
      break;
    d584:	e6f7      	b.n	d376 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    d586:	bf00      	nop
    d588:	00034a80 	.word	0x00034a80
    d58c:	00034a88 	.word	0x00034a88
    d590:	00034a84 	.word	0x00034a84
    d594:	0003488c 	.word	0x0003488c
    d598:	0003489c 	.word	0x0003489c
    d59c:	00034840 	.word	0x00034840
    d5a0:	000341d4 	.word	0x000341d4
    d5a4:	00034a7c 	.word	0x00034a7c
    d5a8:	000348a8 	.word	0x000348a8
    d5ac:	00034704 	.word	0x00034704
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    d5b0:	465a      	mov	r2, fp
    d5b2:	a80a      	add	r0, sp, #40	; 0x28
    d5b4:	f009 fb55 	bl	16c62 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    d5b8:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    d5bc:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    d5c0:	4639      	mov	r1, r7
    d5c2:	a84e      	add	r0, sp, #312	; 0x138
    d5c4:	f009 fe91 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5c8:	4638      	mov	r0, r7
    d5ca:	f008 fcd9 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d5ce:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    d5d0:	af54      	add	r7, sp, #336	; 0x150
    d5d2:	4629      	mov	r1, r5
    d5d4:	4638      	mov	r0, r7
    d5d6:	f009 fe88 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5da:	4628      	mov	r0, r5
    d5dc:	f008 fcd0 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    d5e0:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    d5e2:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    d5e6:	4631      	mov	r1, r6
    d5e8:	4650      	mov	r0, sl
    d5ea:	f009 fe7e 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d5ee:	4630      	mov	r0, r6
    d5f0:	f009 f8cf 	bl	16792 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    d5f4:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    d5f6:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    d5fa:	4621      	mov	r1, r4
    d5fc:	4658      	mov	r0, fp
    d5fe:	f009 fe74 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    d602:	4620      	mov	r0, r4
    d604:	f008 fcc2 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    d608:	9006      	str	r0, [sp, #24]
    d60a:	f8cd b014 	str.w	fp, [sp, #20]
    d60e:	9604      	str	r6, [sp, #16]
    d610:	f8cd a00c 	str.w	sl, [sp, #12]
    d614:	9502      	str	r5, [sp, #8]
    d616:	9701      	str	r7, [sp, #4]
    d618:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d61a:	9300      	str	r3, [sp, #0]
    d61c:	ab4e      	add	r3, sp, #312	; 0x138
    d61e:	464a      	mov	r2, r9
    d620:	4641      	mov	r1, r8
    d622:	a80a      	add	r0, sp, #40	; 0x28
    d624:	f7ff fb48 	bl	ccb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    d628:	9b60      	ldr	r3, [sp, #384]	; 0x180
    d62a:	2b05      	cmp	r3, #5
    d62c:	dd03      	ble.n	d636 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    d62e:	9861      	ldr	r0, [sp, #388]	; 0x184
    d630:	b108      	cbz	r0, d636 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    d632:	f00b fa1a 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d636:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    d638:	2b05      	cmp	r3, #5
    d63a:	dd03      	ble.n	d644 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    d63c:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d63e:	b108      	cbz	r0, d644 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    d640:	f00b fa13 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d644:	9b54      	ldr	r3, [sp, #336]	; 0x150
    d646:	2b05      	cmp	r3, #5
    d648:	dd03      	ble.n	d652 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    d64a:	9855      	ldr	r0, [sp, #340]	; 0x154
    d64c:	b108      	cbz	r0, d652 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    d64e:	f00b fa0c 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    d652:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    d654:	2b05      	cmp	r3, #5
    d656:	dd03      	ble.n	d660 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    d658:	984f      	ldr	r0, [sp, #316]	; 0x13c
    d65a:	b108      	cbz	r0, d660 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    d65c:	f00b fa05 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    d660:	2000      	movs	r0, #0
      break;
    d662:	e688      	b.n	d376 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000d664 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    d664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d668:	b08f      	sub	sp, #60	; 0x3c
    d66a:	4604      	mov	r4, r0
    d66c:	460d      	mov	r5, r1
    d66e:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    d670:	6809      	ldr	r1, [r1, #0]
    d672:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    d674:	2903      	cmp	r1, #3
    d676:	d00a      	beq.n	d68e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d678:	2902      	cmp	r1, #2
    d67a:	d008      	beq.n	d68e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    d67c:	6945      	ldr	r5, [r0, #20]
    d67e:	4b77      	ldr	r3, [pc, #476]	; (d85c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    d680:	9300      	str	r3, [sp, #0]
    d682:	2356      	movs	r3, #86	; 0x56
    d684:	4a76      	ldr	r2, [pc, #472]	; (d860 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d686:	4977      	ldr	r1, [pc, #476]	; (d864 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d688:	47a8      	blx	r5
    d68a:	2001      	movs	r0, #1
    d68c:	e011      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    d68e:	686a      	ldr	r2, [r5, #4]
    d690:	6812      	ldr	r2, [r2, #0]
    d692:	2a01      	cmp	r2, #1
    d694:	d010      	beq.n	d6b8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    d696:	6966      	ldr	r6, [r4, #20]
    d698:	2501      	movs	r5, #1
    d69a:	9503      	str	r5, [sp, #12]
    d69c:	9202      	str	r2, [sp, #8]
    d69e:	4b72      	ldr	r3, [pc, #456]	; (d868 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    d6a0:	9301      	str	r3, [sp, #4]
    d6a2:	4b72      	ldr	r3, [pc, #456]	; (d86c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    d6a4:	9300      	str	r3, [sp, #0]
    d6a6:	2357      	movs	r3, #87	; 0x57
    d6a8:	4a6d      	ldr	r2, [pc, #436]	; (d860 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d6aa:	4971      	ldr	r1, [pc, #452]	; (d870 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    d6ac:	4620      	mov	r0, r4
    d6ae:	47b0      	blx	r6
    d6b0:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    d6b2:	b00f      	add	sp, #60	; 0x3c
    d6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    d6b8:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    d6bc:	68b1      	ldr	r1, [r6, #8]
    d6be:	6872      	ldr	r2, [r6, #4]
    d6c0:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d6c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d6c6:	3801      	subs	r0, #1
    d6c8:	6937      	ldr	r7, [r6, #16]
    d6ca:	fb00 f007 	mul.w	r0, r0, r7
    d6ce:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    d6d2:	b1b2      	cbz	r2, d702 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    d6d4:	f1be 0f01 	cmp.w	lr, #1
    d6d8:	d005      	beq.n	d6e6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    d6da:	f1be 0f02 	cmp.w	lr, #2
    d6de:	d009      	beq.n	d6f4 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    d6e0:	f04f 0c00 	mov.w	ip, #0
    d6e4:	e00e      	b.n	d704 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    d6e6:	eb02 0c03 	add.w	ip, r2, r3
    d6ea:	f10c 3cff 	add.w	ip, ip, #4294967295
    d6ee:	fb9c fcf2 	sdiv	ip, ip, r2
    d6f2:	e007      	b.n	d704 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    d6f4:	eb02 0c03 	add.w	ip, r2, r3
    d6f8:	ebac 0c09 	sub.w	ip, ip, r9
    d6fc:	fb9c fcf2 	sdiv	ip, ip, r2
    d700:	e000      	b.n	d704 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    d702:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    d704:	9f18      	ldr	r7, [sp, #96]	; 0x60
    d706:	3f01      	subs	r7, #1
    d708:	fb07 f708 	mul.w	r7, r7, r8
    d70c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    d70e:	b1c1      	cbz	r1, d742 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    d710:	f1be 0f01 	cmp.w	lr, #1
    d714:	d005      	beq.n	d722 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    d716:	f1be 0f02 	cmp.w	lr, #2
    d71a:	d00a      	beq.n	d732 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    d71c:	f04f 0e00 	mov.w	lr, #0
    d720:	e010      	b.n	d744 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    d722:	9816      	ldr	r0, [sp, #88]	; 0x58
    d724:	eb01 0e00 	add.w	lr, r1, r0
    d728:	f10e 3eff 	add.w	lr, lr, #4294967295
    d72c:	fb9e fef1 	sdiv	lr, lr, r1
    d730:	e008      	b.n	d744 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    d732:	9816      	ldr	r0, [sp, #88]	; 0x58
    d734:	eb01 0e00 	add.w	lr, r1, r0
    d738:	ebae 0e07 	sub.w	lr, lr, r7
    d73c:	fb9e fef1 	sdiv	lr, lr, r1
    d740:	e000      	b.n	d744 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    d742:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d744:	f10e 3eff 	add.w	lr, lr, #4294967295
    d748:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    d74c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    d74e:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    d750:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    d754:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    d758:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    d75c:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    d75e:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    d760:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    d762:	f10c 3cff 	add.w	ip, ip, #4294967295
    d766:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    d76a:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    d76c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    d770:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    d774:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    d778:	1052      	asrs	r2, r2, #1
  padding_values.width =
    d77a:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    d77c:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    d77e:	ab0e      	add	r3, sp, #56	; 0x38
    d780:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    d784:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    d786:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d78a:	2200      	movs	r2, #0
    d78c:	4629      	mov	r1, r5
    d78e:	4620      	mov	r0, r4
    d790:	f008 fb24 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d794:	4607      	mov	r7, r0
    d796:	b308      	cbz	r0, d7dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d798:	2201      	movs	r2, #1
    d79a:	4629      	mov	r1, r5
    d79c:	4620      	mov	r0, r4
    d79e:	f008 fb1d 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d7a2:	4680      	mov	r8, r0
    d7a4:	b320      	cbz	r0, d7f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    d7a6:	2202      	movs	r2, #2
    d7a8:	4629      	mov	r1, r5
    d7aa:	4620      	mov	r0, r4
    d7ac:	f008 fb54 	bl	15e58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    d7b0:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d7b2:	2200      	movs	r2, #0
    d7b4:	4629      	mov	r1, r5
    d7b6:	4620      	mov	r0, r4
    d7b8:	f008 fb2f 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d7bc:	4605      	mov	r5, r0
    d7be:	b308      	cbz	r0, d804 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    d7c0:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    d7c4:	2b01      	cmp	r3, #1
    d7c6:	d127      	bne.n	d818 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    d7c8:	693b      	ldr	r3, [r7, #16]
    d7ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d7cc:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    d7ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d7d2:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    d7d4:	692b      	ldr	r3, [r5, #16]
    d7d6:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    d7d8:	2000      	movs	r0, #0
    d7da:	e76a      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    d7dc:	6965      	ldr	r5, [r4, #20]
    d7de:	4b25      	ldr	r3, [pc, #148]	; (d874 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    d7e0:	9300      	str	r3, [sp, #0]
    d7e2:	2361      	movs	r3, #97	; 0x61
    d7e4:	4a1e      	ldr	r2, [pc, #120]	; (d860 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d7e6:	491f      	ldr	r1, [pc, #124]	; (d864 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d7e8:	4620      	mov	r0, r4
    d7ea:	47a8      	blx	r5
    d7ec:	2001      	movs	r0, #1
    d7ee:	e760      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    d7f0:	6965      	ldr	r5, [r4, #20]
    d7f2:	4b21      	ldr	r3, [pc, #132]	; (d878 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    d7f4:	9300      	str	r3, [sp, #0]
    d7f6:	2363      	movs	r3, #99	; 0x63
    d7f8:	4a19      	ldr	r2, [pc, #100]	; (d860 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d7fa:	491a      	ldr	r1, [pc, #104]	; (d864 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d7fc:	4620      	mov	r0, r4
    d7fe:	47a8      	blx	r5
    d800:	2001      	movs	r0, #1
    d802:	e756      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    d804:	6965      	ldr	r5, [r4, #20]
    d806:	4b1d      	ldr	r3, [pc, #116]	; (d87c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    d808:	9300      	str	r3, [sp, #0]
    d80a:	2367      	movs	r3, #103	; 0x67
    d80c:	4a14      	ldr	r2, [pc, #80]	; (d860 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    d80e:	4915      	ldr	r1, [pc, #84]	; (d864 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    d810:	4620      	mov	r0, r4
    d812:	47a8      	blx	r5
    d814:	2001      	movs	r0, #1
    d816:	e74c      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    d818:	f8d8 3008 	ldr.w	r3, [r8, #8]
    d81c:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    d81e:	360c      	adds	r6, #12
    d820:	9308      	str	r3, [sp, #32]
    d822:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d826:	9307      	str	r3, [sp, #28]
    d828:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d82c:	9306      	str	r3, [sp, #24]
    d82e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d830:	3330      	adds	r3, #48	; 0x30
    d832:	9305      	str	r3, [sp, #20]
    d834:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d836:	332c      	adds	r3, #44	; 0x2c
    d838:	9304      	str	r3, [sp, #16]
    d83a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d83c:	3320      	adds	r3, #32
    d83e:	9303      	str	r3, [sp, #12]
    d840:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    d842:	331c      	adds	r3, #28
    d844:	9302      	str	r3, [sp, #8]
    d846:	9601      	str	r6, [sp, #4]
    d848:	9000      	str	r0, [sp, #0]
    d84a:	464b      	mov	r3, r9
    d84c:	4642      	mov	r2, r8
    d84e:	4639      	mov	r1, r7
    d850:	4620      	mov	r0, r4
    d852:	f7fc f80f 	bl	9874 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    d856:	2800      	cmp	r0, #0
    d858:	d0b6      	beq.n	d7c8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    d85a:	e72a      	b.n	d6b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    d85c:	00034978 	.word	0x00034978
    d860:	00034924 	.word	0x00034924
    d864:	00033f14 	.word	0x00033f14
    d868:	00034fd0 	.word	0x00034fd0
    d86c:	0003499c 	.word	0x0003499c
    d870:	000341d4 	.word	0x000341d4
    d874:	000349b0 	.word	0x000349b0
    d878:	000349c4 	.word	0x000349c4
    d87c:	0003461c 	.word	0x0003461c

0000d880 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d884:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    d886:	690e      	ldr	r6, [r1, #16]
    d888:	2e00      	cmp	r6, #0
    d88a:	d052      	beq.n	d932 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    d88c:	4604      	mov	r4, r0
    d88e:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d890:	694f      	ldr	r7, [r1, #20]
    d892:	2f00      	cmp	r7, #0
    d894:	d04f      	beq.n	d936 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    d896:	2200      	movs	r2, #0
    d898:	f008 fabf 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d89c:	4680      	mov	r8, r0
    d89e:	2800      	cmp	r0, #0
    d8a0:	d04b      	beq.n	d93a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    d8a2:	2200      	movs	r2, #0
    d8a4:	4629      	mov	r1, r5
    d8a6:	4620      	mov	r0, r4
    d8a8:	f008 fa98 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d8ac:	4681      	mov	r9, r0
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d051      	beq.n	d956 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    d8b2:	2201      	movs	r2, #1
    d8b4:	4629      	mov	r1, r5
    d8b6:	4620      	mov	r0, r4
    d8b8:	f008 fa90 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    d8bc:	4682      	mov	sl, r0
    d8be:	2800      	cmp	r0, #0
    d8c0:	d054      	beq.n	d96c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    d8c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
    d8c6:	68da      	ldr	r2, [r3, #12]
    d8c8:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    d8ca:	689b      	ldr	r3, [r3, #8]
    d8cc:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    d8ce:	6883      	ldr	r3, [r0, #8]
    d8d0:	68da      	ldr	r2, [r3, #12]
    d8d2:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    d8d4:	689a      	ldr	r2, [r3, #8]
    d8d6:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    d8d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d8dc:	68d1      	ldr	r1, [r2, #12]
    d8de:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    d8e0:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    d8e4:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d8e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d8e8:	ea4f 0882 	mov.w	r8, r2, lsl #2
    d8ec:	4641      	mov	r1, r8
    d8ee:	4620      	mov	r0, r4
    d8f0:	4798      	blx	r3
  data->per_channel_output_multiplier =
    d8f2:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    d8f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d8f6:	4641      	mov	r1, r8
    d8f8:	4620      	mov	r0, r4
    d8fa:	4798      	blx	r3
  data->per_channel_output_shift =
    d8fc:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    d8fe:	f899 3000 	ldrb.w	r3, [r9]
    d902:	2b09      	cmp	r3, #9
    d904:	d03d      	beq.n	d982 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    d906:	2b07      	cmp	r3, #7
    d908:	d03b      	beq.n	d982 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    d90a:	9606      	str	r6, [sp, #24]
    d90c:	9305      	str	r3, [sp, #20]
    d90e:	f8cd b010 	str.w	fp, [sp, #16]
    d912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d914:	9303      	str	r3, [sp, #12]
    d916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d918:	9302      	str	r3, [sp, #8]
    d91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d91c:	9301      	str	r3, [sp, #4]
    d91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d920:	9300      	str	r3, [sp, #0]
    d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d924:	463a      	mov	r2, r7
    d926:	4629      	mov	r1, r5
    d928:	4620      	mov	r0, r4
    d92a:	f7ff fe9b 	bl	d664 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    d92e:	4680      	mov	r8, r0
    d930:	e00d      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    d932:	f00b f8af 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d936:	f00b f8ad 	bl	18a94 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    d93a:	6965      	ldr	r5, [r4, #20]
    d93c:	4b32      	ldr	r3, [pc, #200]	; (da08 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    d93e:	9300      	str	r3, [sp, #0]
    d940:	2386      	movs	r3, #134	; 0x86
    d942:	4a32      	ldr	r2, [pc, #200]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d944:	4932      	ldr	r1, [pc, #200]	; (da10 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d946:	4620      	mov	r0, r4
    d948:	47a8      	blx	r5
    d94a:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    d94e:	4640      	mov	r0, r8
    d950:	b00f      	add	sp, #60	; 0x3c
    d952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    d956:	6965      	ldr	r5, [r4, #20]
    d958:	4b2e      	ldr	r3, [pc, #184]	; (da14 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    d95a:	9300      	str	r3, [sp, #0]
    d95c:	2388      	movs	r3, #136	; 0x88
    d95e:	4a2b      	ldr	r2, [pc, #172]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d960:	492b      	ldr	r1, [pc, #172]	; (da10 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d962:	4620      	mov	r0, r4
    d964:	47a8      	blx	r5
    d966:	f04f 0801 	mov.w	r8, #1
    d96a:	e7f0      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    d96c:	6965      	ldr	r5, [r4, #20]
    d96e:	4b2a      	ldr	r3, [pc, #168]	; (da18 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    d970:	9300      	str	r3, [sp, #0]
    d972:	238a      	movs	r3, #138	; 0x8a
    d974:	4a25      	ldr	r2, [pc, #148]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d976:	4926      	ldr	r1, [pc, #152]	; (da10 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d978:	4620      	mov	r0, r4
    d97a:	47a8      	blx	r5
    d97c:	f04f 0801 	mov.w	r8, #1
    d980:	e7e5      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    d982:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    d986:	f1b8 0f01 	cmp.w	r8, #1
    d98a:	d00f      	beq.n	d9ac <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    d98c:	6966      	ldr	r6, [r4, #20]
    d98e:	2501      	movs	r5, #1
    d990:	9503      	str	r5, [sp, #12]
    d992:	f8cd 8008 	str.w	r8, [sp, #8]
    d996:	4b21      	ldr	r3, [pc, #132]	; (da1c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    d998:	9301      	str	r3, [sp, #4]
    d99a:	4b21      	ldr	r3, [pc, #132]	; (da20 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    d99c:	9300      	str	r3, [sp, #0]
    d99e:	239e      	movs	r3, #158	; 0x9e
    d9a0:	4a1a      	ldr	r2, [pc, #104]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d9a2:	4920      	ldr	r1, [pc, #128]	; (da24 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    d9a4:	4620      	mov	r0, r4
    d9a6:	47b0      	blx	r6
    d9a8:	46a8      	mov	r8, r5
    d9aa:	e7d0      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    d9ac:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    d9b0:	b1a2      	cbz	r2, d9dc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d9b2:	6811      	ldr	r1, [r2, #0]
    d9b4:	b1a1      	cbz	r1, d9e0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d9b6:	6850      	ldr	r0, [r2, #4]
    d9b8:	b1a0      	cbz	r0, d9e4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    d9ba:	680a      	ldr	r2, [r1, #0]
    d9bc:	2a01      	cmp	r2, #1
    d9be:	d013      	beq.n	d9e8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d9c0:	f8da 1008 	ldr.w	r1, [sl, #8]
    d9c4:	6849      	ldr	r1, [r1, #4]
    d9c6:	428a      	cmp	r2, r1
    d9c8:	d00e      	beq.n	d9e8 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    d9ca:	6965      	ldr	r5, [r4, #20]
    d9cc:	4b16      	ldr	r3, [pc, #88]	; (da28 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    d9ce:	9300      	str	r3, [sp, #0]
    d9d0:	23a7      	movs	r3, #167	; 0xa7
    d9d2:	4a0e      	ldr	r2, [pc, #56]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    d9d4:	490e      	ldr	r1, [pc, #56]	; (da10 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    d9d6:	4620      	mov	r0, r4
    d9d8:	47a8      	blx	r5
    d9da:	e7b8      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    d9dc:	f00b f85a 	bl	18a94 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    d9e0:	f00b f858 	bl	18a94 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    d9e4:	f00b f856 	bl	18a94 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    d9e8:	6801      	ldr	r1, [r0, #0]
    d9ea:	428a      	cmp	r2, r1
    d9ec:	d08d      	beq.n	d90a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    d9ee:	6965      	ldr	r5, [r4, #20]
    d9f0:	9103      	str	r1, [sp, #12]
    d9f2:	9202      	str	r2, [sp, #8]
    d9f4:	4b0d      	ldr	r3, [pc, #52]	; (da2c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    d9f6:	9301      	str	r3, [sp, #4]
    d9f8:	4b0d      	ldr	r3, [pc, #52]	; (da30 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    d9fa:	9300      	str	r3, [sp, #0]
    d9fc:	23ab      	movs	r3, #171	; 0xab
    d9fe:	4a03      	ldr	r2, [pc, #12]	; (da0c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    da00:	4908      	ldr	r1, [pc, #32]	; (da24 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    da02:	4620      	mov	r0, r4
    da04:	47a8      	blx	r5
    da06:	e7a2      	b.n	d94e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    da08:	0003461c 	.word	0x0003461c
    da0c:	00034924 	.word	0x00034924
    da10:	00033f14 	.word	0x00033f14
    da14:	000349b0 	.word	0x000349b0
    da18:	000349c4 	.word	0x000349c4
    da1c:	000341f0 	.word	0x000341f0
    da20:	00034228 	.word	0x00034228
    da24:	000341d4 	.word	0x000341d4
    da28:	000349d8 	.word	0x000349d8
    da2c:	00034a54 	.word	0x00034a54
    da30:	000342dc 	.word	0x000342dc

0000da34 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    da34:	b470      	push	{r4, r5, r6}
    da36:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    da38:	4604      	mov	r4, r0
    da3a:	4d05      	ldr	r5, [pc, #20]	; (da50 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    da3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    da3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    da40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    da44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    da48:	4630      	mov	r0, r6
    da4a:	bc70      	pop	{r4, r5, r6}
    da4c:	4770      	bx	lr
    da4e:	bf00      	nop
    da50:	00019a70 	.word	0x00019a70

0000da54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da58:	b0a5      	sub	sp, #148	; 0x94
    da5a:	911a      	str	r1, [sp, #104]	; 0x68
    da5c:	921b      	str	r2, [sp, #108]	; 0x6c
    da5e:	461f      	mov	r7, r3
    da60:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    da64:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    da66:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    da6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    da6e:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    da70:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    da74:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    da76:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    da7a:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    da7c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    da80:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    da82:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    da86:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    da88:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    da8c:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    da8e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    da92:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    da94:	6942      	ldr	r2, [r0, #20]
    da96:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    da98:	69c2      	ldr	r2, [r0, #28]
    da9a:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    da9c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    da9e:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    daa0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    daa2:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    daa4:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    daa6:	2804      	cmp	r0, #4
    daa8:	f040 80b6 	bne.w	dc18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    daac:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    dab0:	2804      	cmp	r0, #4
    dab2:	f040 80b3 	bne.w	dc1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    dab6:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    daba:	2804      	cmp	r0, #4
    dabc:	f040 80b0 	bne.w	dc20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    dac0:	4291      	cmp	r1, r2
    dac2:	f300 80af 	bgt.w	dc24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    dac6:	683a      	ldr	r2, [r7, #0]
    dac8:	2a00      	cmp	r2, #0
    daca:	f340 80ad 	ble.w	dc28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dace:	2a05      	cmp	r2, #5
    dad0:	f340 80ac 	ble.w	dc2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    dad4:	687a      	ldr	r2, [r7, #4]
    dad6:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    dad8:	f8d9 1000 	ldr.w	r1, [r9]
    dadc:	2900      	cmp	r1, #0
    dade:	f340 80a7 	ble.w	dc30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dae2:	2905      	cmp	r1, #5
    dae4:	f340 80a6 	ble.w	dc34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    dae8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    daec:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    daee:	4291      	cmp	r1, r2
    daf0:	f040 80a3 	bne.w	dc3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    daf4:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    daf6:	f8d9 1000 	ldr.w	r1, [r9]
    dafa:	2900      	cmp	r1, #0
    dafc:	f340 809f 	ble.w	dc3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db00:	2905      	cmp	r1, #5
    db02:	f340 809e 	ble.w	dc42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    db06:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db0a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db0c:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    db0e:	428a      	cmp	r2, r1
    db10:	f300 809a 	bgt.w	dc48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    db14:	aa23      	add	r2, sp, #140	; 0x8c
    db16:	6812      	ldr	r2, [r2, #0]
    db18:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    db1a:	f8d8 2000 	ldr.w	r2, [r8]
    db1e:	2a03      	cmp	r2, #3
    db20:	f340 8094 	ble.w	dc4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db24:	2a05      	cmp	r2, #5
    db26:	f340 8093 	ble.w	dc50 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    db2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    db2e:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    db30:	f8d9 1000 	ldr.w	r1, [r9]
    db34:	2903      	cmp	r1, #3
    db36:	f340 808e 	ble.w	dc56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db3a:	2905      	cmp	r1, #5
    db3c:	f340 808d 	ble.w	dc5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    db40:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db44:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    db46:	4291      	cmp	r1, r2
    db48:	f040 808a 	bne.w	dc60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db4c:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    db4e:	f8d9 1000 	ldr.w	r1, [r9]
    db52:	2903      	cmp	r1, #3
    db54:	f340 8086 	ble.w	dc64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db58:	2905      	cmp	r1, #5
    db5a:	f340 8085 	ble.w	dc68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    db5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    db62:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db64:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    db66:	428a      	cmp	r2, r1
    db68:	f300 8081 	bgt.w	dc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    db6c:	aa21      	add	r2, sp, #132	; 0x84
    db6e:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    db70:	683a      	ldr	r2, [r7, #0]
    db72:	2a01      	cmp	r2, #1
    db74:	dd7d      	ble.n	dc72 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db76:	2a05      	cmp	r2, #5
    db78:	dd7d      	ble.n	dc76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    db7a:	687a      	ldr	r2, [r7, #4]
    db7c:	6852      	ldr	r2, [r2, #4]
    db7e:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    db80:	683a      	ldr	r2, [r7, #0]
    db82:	2a02      	cmp	r2, #2
    db84:	dd7a      	ble.n	dc7c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db86:	2a05      	cmp	r2, #5
    db88:	dd7a      	ble.n	dc80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    db8a:	687a      	ldr	r2, [r7, #4]
    db8c:	6892      	ldr	r2, [r2, #8]
    db8e:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    db90:	683a      	ldr	r2, [r7, #0]
    db92:	2a03      	cmp	r2, #3
    db94:	dd77      	ble.n	dc86 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db96:	2a05      	cmp	r2, #5
    db98:	dd77      	ble.n	dc8a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    db9a:	687a      	ldr	r2, [r7, #4]
    db9c:	68d2      	ldr	r2, [r2, #12]
    db9e:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    dba0:	f8d8 2000 	ldr.w	r2, [r8]
    dba4:	2a01      	cmp	r2, #1
    dba6:	dd73      	ble.n	dc90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dba8:	2a05      	cmp	r2, #5
    dbaa:	dd73      	ble.n	dc94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    dbac:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dbb0:	6852      	ldr	r2, [r2, #4]
    dbb2:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    dbb4:	f8d8 2000 	ldr.w	r2, [r8]
    dbb8:	2a02      	cmp	r2, #2
    dbba:	dd6f      	ble.n	dc9c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbbc:	2a05      	cmp	r2, #5
    dbbe:	dd6f      	ble.n	dca0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    dbc0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    dbc4:	6892      	ldr	r2, [r2, #8]
    dbc6:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    dbc8:	f8d9 2000 	ldr.w	r2, [r9]
    dbcc:	2a01      	cmp	r2, #1
    dbce:	dd6b      	ble.n	dca8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbd0:	2a05      	cmp	r2, #5
    dbd2:	dd6b      	ble.n	dcac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    dbd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    dbd8:	6852      	ldr	r2, [r2, #4]
    dbda:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    dbdc:	f8d9 2000 	ldr.w	r2, [r9]
    dbe0:	2a02      	cmp	r2, #2
    dbe2:	dd67      	ble.n	dcb4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbe4:	2a05      	cmp	r2, #5
    dbe6:	dd67      	ble.n	dcb8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    dbe8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    dbec:	6892      	ldr	r2, [r2, #8]
    dbee:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    dbf0:	9a05      	ldr	r2, [sp, #20]
    dbf2:	9806      	ldr	r0, [sp, #24]
    dbf4:	fb02 f200 	mul.w	r2, r2, r0
    dbf8:	428a      	cmp	r2, r1
    dbfa:	d161      	bne.n	dcc0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dbfc:	681c      	ldr	r4, [r3, #0]
    dbfe:	2c05      	cmp	r4, #5
    dc00:	dd60      	ble.n	dcc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    dc02:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    dc04:	2200      	movs	r2, #0
    int buffer_size = 1;
    dc06:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    dc08:	42a2      	cmp	r2, r4
    dc0a:	da5d      	bge.n	dcc8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    dc0c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    dc10:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    dc14:	3201      	adds	r2, #1
    dc16:	e7f7      	b.n	dc08 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    dc18:	f00a ff3c 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    dc1c:	f00a ff3a 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    dc20:	f00a ff38 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    dc24:	f00a ff36 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc28:	f00a ff34 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc2c:	687a      	ldr	r2, [r7, #4]
    dc2e:	e753      	b.n	dad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    dc30:	f00a ff30 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc34:	f8d9 1004 	ldr.w	r1, [r9, #4]
    dc38:	e759      	b.n	daee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc3a:	f00a ff2b 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc3e:	f00a ff29 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc42:	f8d9 1004 	ldr.w	r1, [r9, #4]
    dc46:	e761      	b.n	db0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    dc48:	aa22      	add	r2, sp, #136	; 0x88
    dc4a:	e764      	b.n	db16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    dc4c:	f00a ff22 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc50:	f8d8 2010 	ldr.w	r2, [r8, #16]
    dc54:	e76c      	b.n	db30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    dc56:	f00a ff1d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc5a:	f8d9 1010 	ldr.w	r1, [r9, #16]
    dc5e:	e772      	b.n	db46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc60:	f00a ff18 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc64:	f00a ff16 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc68:	f8d9 1010 	ldr.w	r1, [r9, #16]
    dc6c:	e77a      	b.n	db64 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    dc6e:	aa20      	add	r2, sp, #128	; 0x80
    dc70:	e77d      	b.n	db6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    dc72:	f00a ff0f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc76:	68ba      	ldr	r2, [r7, #8]
    dc78:	920c      	str	r2, [sp, #48]	; 0x30
    dc7a:	e781      	b.n	db80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    dc7c:	f00a ff0a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc80:	68fa      	ldr	r2, [r7, #12]
    dc82:	920b      	str	r2, [sp, #44]	; 0x2c
    dc84:	e784      	b.n	db90 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    dc86:	f00a ff05 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc8a:	693a      	ldr	r2, [r7, #16]
    dc8c:	9205      	str	r2, [sp, #20]
    dc8e:	e787      	b.n	dba0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    dc90:	f00a ff00 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc94:	f8d8 2008 	ldr.w	r2, [r8, #8]
    dc98:	920a      	str	r2, [sp, #40]	; 0x28
    dc9a:	e78b      	b.n	dbb4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    dc9c:	f00a fefa 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dca0:	f8d8 200c 	ldr.w	r2, [r8, #12]
    dca4:	9209      	str	r2, [sp, #36]	; 0x24
    dca6:	e78f      	b.n	dbc8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    dca8:	f00a fef4 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcac:	f8d9 2008 	ldr.w	r2, [r9, #8]
    dcb0:	9208      	str	r2, [sp, #32]
    dcb2:	e793      	b.n	dbdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    dcb4:	f00a feee 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dcb8:	f8d9 200c 	ldr.w	r2, [r9, #12]
    dcbc:	9207      	str	r2, [sp, #28]
    dcbe:	e797      	b.n	dbf0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    dcc0:	f00a fee8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dcc4:	3304      	adds	r3, #4
    dcc6:	e79d      	b.n	dc04 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    dcc8:	428d      	cmp	r5, r1
    dcca:	d128      	bne.n	dd1e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    dccc:	f04f 0a00 	mov.w	sl, #0
    dcd0:	46c3      	mov	fp, r8
    dcd2:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    dcd6:	46d1      	mov	r9, sl
    dcd8:	46ba      	mov	sl, r7
    dcda:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    dcdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dcde:	4599      	cmp	r9, r3
    dce0:	f280 81b4 	bge.w	e04c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    dce4:	2300      	movs	r3, #0
    dce6:	9301      	str	r3, [sp, #4]
    dce8:	f8cd 900c 	str.w	r9, [sp, #12]
    dcec:	46d0      	mov	r8, sl
    dcee:	46d9      	mov	r9, fp
    dcf0:	46ba      	mov	sl, r7
    dcf2:	9b01      	ldr	r3, [sp, #4]
    dcf4:	9a08      	ldr	r2, [sp, #32]
    dcf6:	4293      	cmp	r3, r2
    dcf8:	f280 81a0 	bge.w	e03c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    dcfc:	2300      	movs	r3, #0
    dcfe:	9302      	str	r3, [sp, #8]
    dd00:	464f      	mov	r7, r9
    dd02:	46c1      	mov	r9, r8
    dd04:	46d0      	mov	r8, sl
    dd06:	9b02      	ldr	r3, [sp, #8]
    dd08:	9a07      	ldr	r2, [sp, #28]
    dd0a:	4293      	cmp	r3, r2
    dd0c:	f280 818f 	bge.w	e02e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    dd10:	f04f 0b00 	mov.w	fp, #0
    dd14:	46da      	mov	sl, fp
    dd16:	46cb      	mov	fp, r9
    dd18:	46c1      	mov	r9, r8
    dd1a:	46b8      	mov	r8, r7
    dd1c:	e17a      	b.n	e014 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    dd1e:	f00a feb9 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd22:	f00a feb7 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd26:	f00a feb5 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd2a:	f00a feb3 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd2e:	f00a feb1 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dd32:	f00a feaf 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd36:	f00a fead 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd3a:	f00a feab 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd3e:	f00a fea9 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd42:	f00a fea7 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dd46:	f00a fea5 	bl	18a94 <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    dd4a:	3201      	adds	r2, #1
    dd4c:	9909      	ldr	r1, [sp, #36]	; 0x24
    dd4e:	428a      	cmp	r2, r1
    dd50:	da5e      	bge.n	de10 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    dd52:	9911      	ldr	r1, [sp, #68]	; 0x44
    dd54:	980d      	ldr	r0, [sp, #52]	; 0x34
    dd56:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    dd5a:	9912      	ldr	r1, [sp, #72]	; 0x48
    dd5c:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    dd60:	2e00      	cmp	r6, #0
    dd62:	dbf2      	blt.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd64:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dd66:	428e      	cmp	r6, r1
    dd68:	daef      	bge.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd6a:	2f00      	cmp	r7, #0
    dd6c:	dbed      	blt.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    dd6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    dd70:	428f      	cmp	r7, r1
    dd72:	daea      	bge.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    dd74:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dd78:	2804      	cmp	r0, #4
    dd7a:	d1d2      	bne.n	dd22 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    dd7c:	9903      	ldr	r1, [sp, #12]
    dd7e:	2900      	cmp	r1, #0
    dd80:	dbd1      	blt.n	dd26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    dd82:	f8db 0004 	ldr.w	r0, [fp, #4]
    dd86:	4281      	cmp	r1, r0
    dd88:	dacd      	bge.n	dd26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    dd8a:	2f00      	cmp	r7, #0
    dd8c:	dbcd      	blt.n	dd2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    dd8e:	f8db e008 	ldr.w	lr, [fp, #8]
    dd92:	4577      	cmp	r7, lr
    dd94:	dac9      	bge.n	dd2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    dd96:	2e00      	cmp	r6, #0
    dd98:	dbc9      	blt.n	dd2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    dd9a:	f8db c00c 	ldr.w	ip, [fp, #12]
    dd9e:	4566      	cmp	r6, ip
    dda0:	dac5      	bge.n	dd2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    dda2:	f1ba 0f00 	cmp.w	sl, #0
    dda6:	dbc4      	blt.n	dd32 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    dda8:	f8db 0010 	ldr.w	r0, [fp, #16]
    ddac:	4582      	cmp	sl, r0
    ddae:	dac0      	bge.n	dd32 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ddb0:	9903      	ldr	r1, [sp, #12]
    ddb2:	fb0e 7701 	mla	r7, lr, r1, r7
    ddb6:	fb07 660c 	mla	r6, r7, ip, r6
    ddba:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    ddbe:	992e      	ldr	r1, [sp, #184]	; 0xb8
    ddc0:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    ddc2:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ddc6:	2804      	cmp	r0, #4
    ddc8:	d1b5      	bne.n	dd36 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ddca:	f8d8 0004 	ldr.w	r0, [r8, #4]
    ddce:	2800      	cmp	r0, #0
    ddd0:	ddb3      	ble.n	dd3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	dbb3      	blt.n	dd3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    ddd6:	f8d8 0008 	ldr.w	r0, [r8, #8]
    ddda:	4283      	cmp	r3, r0
    dddc:	daaf      	bge.n	dd3e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ddde:	2a00      	cmp	r2, #0
    dde0:	dbaf      	blt.n	dd42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    dde2:	f8d8 700c 	ldr.w	r7, [r8, #12]
    dde6:	42ba      	cmp	r2, r7
    dde8:	daab      	bge.n	dd42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ddea:	2d00      	cmp	r5, #0
    ddec:	dbab      	blt.n	dd46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    ddee:	f8d8 0010 	ldr.w	r0, [r8, #16]
    ddf2:	4285      	cmp	r5, r0
    ddf4:	daa7      	bge.n	dd46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ddf6:	fb07 2703 	mla	r7, r7, r3, r2
    ddfa:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    ddfe:	9930      	ldr	r1, [sp, #192]	; 0xc0
    de00:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    de02:	9915      	ldr	r1, [sp, #84]	; 0x54
    de04:	440e      	add	r6, r1
    de06:	981d      	ldr	r0, [sp, #116]	; 0x74
    de08:	fb07 0006 	mla	r0, r7, r6, r0
    de0c:	901d      	str	r0, [sp, #116]	; 0x74
    de0e:	e79c      	b.n	dd4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    de10:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    de12:	3301      	adds	r3, #1
    de14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de16:	4293      	cmp	r3, r2
    de18:	da02      	bge.n	de20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    de1a:	2200      	movs	r2, #0
    de1c:	910d      	str	r1, [sp, #52]	; 0x34
    de1e:	e795      	b.n	dd4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    de20:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    de22:	b123      	cbz	r3, de2e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    de24:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    de28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    de2a:	4413      	add	r3, r2
    de2c:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    de2e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    de30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    de32:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    de36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    de38:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    de3c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    de40:	2e00      	cmp	r6, #0
    de42:	f340 80b3 	ble.w	dfac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    de46:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    de48:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    de4a:	45a4      	cmp	ip, r4
    de4c:	f000 80b0 	beq.w	dfb0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    de50:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    de52:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    de54:	4660      	mov	r0, ip
    de56:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    de58:	fb04 f101 	mul.w	r1, r4, r1
    de5c:	fb0c 1103 	mla	r1, ip, r3, r1
    de60:	fba4 230c 	umull	r2, r3, r4, ip
    de64:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    de66:	2a00      	cmp	r2, #0
    de68:	f173 0100 	sbcs.w	r1, r3, #0
    de6c:	f2c0 80a7 	blt.w	dfbe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    de70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    de74:	1852      	adds	r2, r2, r1
    de76:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    de7a:	4611      	mov	r1, r2
    de7c:	461c      	mov	r4, r3
    de7e:	2a00      	cmp	r2, #0
    de80:	f173 0000 	sbcs.w	r0, r3, #0
    de84:	f2c0 809d 	blt.w	dfc2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    de88:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    de8a:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    de8e:	2f00      	cmp	r7, #0
    de90:	f040 809f 	bne.w	dfd2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    de94:	2e00      	cmp	r6, #0
    de96:	f2c0 809f 	blt.w	dfd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    de9a:	2e1f      	cmp	r6, #31
    de9c:	f300 80a3 	bgt.w	dfe6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    dea0:	2701      	movs	r7, #1
    dea2:	fa07 f006 	lsl.w	r0, r7, r6
    dea6:	3801      	subs	r0, #1
    dea8:	f008 f874 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    deac:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    deae:	2000      	movs	r0, #0
    deb0:	f008 f870 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    deb4:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    deb6:	4638      	mov	r0, r7
    deb8:	f008 f86c 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    debc:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    debe:	990d      	ldr	r1, [sp, #52]	; 0x34
    dec0:	4620      	mov	r0, r4
    dec2:	f008 f868 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dec6:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    dec8:	4639      	mov	r1, r7
    deca:	980d      	ldr	r0, [sp, #52]	; 0x34
    decc:	f008 f865 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ded0:	4607      	mov	r7, r0
    ded2:	9918      	ldr	r1, [sp, #96]	; 0x60
    ded4:	4620      	mov	r0, r4
    ded6:	f008 f86c 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    deda:	990e      	ldr	r1, [sp, #56]	; 0x38
    dedc:	f008 f85b 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dee0:	4601      	mov	r1, r0
    dee2:	4638      	mov	r0, r7
    dee4:	f008 f85b 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    dee8:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    deea:	4631      	mov	r1, r6
    deec:	4620      	mov	r0, r4
    deee:	f008 f854 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    def2:	4604      	mov	r4, r0
    def4:	4639      	mov	r1, r7
    def6:	9819      	ldr	r0, [sp, #100]	; 0x64
    def8:	f008 f863 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    defc:	990e      	ldr	r1, [sp, #56]	; 0x38
    defe:	f008 f84a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    df02:	4601      	mov	r1, r0
    df04:	4620      	mov	r0, r4
    df06:	f008 f84a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    df0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    df0c:	4418      	add	r0, r3
    df0e:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    df10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    df12:	4290      	cmp	r0, r2
    df14:	db6e      	blt.n	dff4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    df16:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    df1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    df1e:	4293      	cmp	r3, r2
    df20:	dc6a      	bgt.n	dff8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    df22:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    df24:	6818      	ldr	r0, [r3, #0]
    df26:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    df28:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    df2c:	2b04      	cmp	r3, #4
    df2e:	d165      	bne.n	dffc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    df30:	9a03      	ldr	r2, [sp, #12]
    df32:	2a00      	cmp	r2, #0
    df34:	db64      	blt.n	e000 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    df36:	f8d9 3004 	ldr.w	r3, [r9, #4]
    df3a:	429a      	cmp	r2, r3
    df3c:	da60      	bge.n	e000 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    df3e:	9b01      	ldr	r3, [sp, #4]
    df40:	2b00      	cmp	r3, #0
    df42:	db5f      	blt.n	e004 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    df44:	f8d9 1008 	ldr.w	r1, [r9, #8]
    df48:	428b      	cmp	r3, r1
    df4a:	da5b      	bge.n	e004 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    df4c:	9b02      	ldr	r3, [sp, #8]
    df4e:	2b00      	cmp	r3, #0
    df50:	db5a      	blt.n	e008 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    df52:	f8d9 200c 	ldr.w	r2, [r9, #12]
    df56:	4293      	cmp	r3, r2
    df58:	da56      	bge.n	e008 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    df5a:	2d00      	cmp	r5, #0
    df5c:	db56      	blt.n	e00c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    df5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    df62:	429d      	cmp	r5, r3
    df64:	da52      	bge.n	e00c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    df66:	9c03      	ldr	r4, [sp, #12]
    df68:	9e01      	ldr	r6, [sp, #4]
    df6a:	fb01 6104 	mla	r1, r1, r4, r6
    df6e:	9c02      	ldr	r4, [sp, #8]
    df70:	fb01 4202 	mla	r2, r1, r2, r4
    df74:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    df78:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    df7a:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    df7c:	9b04      	ldr	r3, [sp, #16]
    df7e:	3301      	adds	r3, #1
    df80:	9304      	str	r3, [sp, #16]
    df82:	9904      	ldr	r1, [sp, #16]
    df84:	9b06      	ldr	r3, [sp, #24]
    df86:	4299      	cmp	r1, r3
    df88:	da42      	bge.n	e010 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    df8a:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    df8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df90:	9a02      	ldr	r2, [sp, #8]
    df92:	fb03 f102 	mul.w	r1, r3, r2
    df96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df98:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    df9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    df9c:	9a01      	ldr	r2, [sp, #4]
    df9e:	fb03 f402 	mul.w	r4, r3, r2
    dfa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    dfa4:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    dfa6:	2300      	movs	r3, #0
    dfa8:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    dfaa:	e733      	b.n	de14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    dfac:	4276      	negs	r6, r6
    dfae:	e74b      	b.n	de48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dfb0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    dfb4:	d001      	beq.n	dfba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    dfb6:	2700      	movs	r7, #0
    dfb8:	e74b      	b.n	de52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    dfba:	2701      	movs	r7, #1
    dfbc:	e749      	b.n	de52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dfbe:	4925      	ldr	r1, [pc, #148]	; (e054 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    dfc0:	e758      	b.n	de74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dfc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dfc6:	1851      	adds	r1, r2, r1
    dfc8:	f04f 0400 	mov.w	r4, #0
    dfcc:	eb43 0404 	adc.w	r4, r3, r4
    dfd0:	e75a      	b.n	de88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dfd2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    dfd6:	e75d      	b.n	de94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    dfd8:	4b1f      	ldr	r3, [pc, #124]	; (e058 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    dfda:	4a20      	ldr	r2, [pc, #128]	; (e05c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dfdc:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dfe0:	481f      	ldr	r0, [pc, #124]	; (e060 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    dfe2:	f004 fd5b 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    dfe6:	4b1f      	ldr	r3, [pc, #124]	; (e064 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    dfe8:	4a1c      	ldr	r2, [pc, #112]	; (e05c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    dfea:	f240 1167 	movw	r1, #359	; 0x167
    dfee:	481c      	ldr	r0, [pc, #112]	; (e060 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    dff0:	f004 fd54 	bl	12a9c <__assert_func>
	return __b;
    dff4:	ab1f      	add	r3, sp, #124	; 0x7c
    dff6:	e78f      	b.n	df18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    dff8:	ab1e      	add	r3, sp, #120	; 0x78
    dffa:	e793      	b.n	df24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    dffc:	f00a fd4a 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    e000:	f00a fd48 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    e004:	f00a fd46 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    e008:	f00a fd44 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    e00c:	f00a fd42 	bl	18a94 <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    e010:	f10a 0a01 	add.w	sl, sl, #1
    e014:	9b05      	ldr	r3, [sp, #20]
    e016:	459a      	cmp	sl, r3
    e018:	da02      	bge.n	e020 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    e01a:	2300      	movs	r3, #0
    e01c:	9304      	str	r3, [sp, #16]
    e01e:	e7b0      	b.n	df82 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    e020:	4647      	mov	r7, r8
    e022:	46c8      	mov	r8, r9
    e024:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    e026:	9b02      	ldr	r3, [sp, #8]
    e028:	3301      	adds	r3, #1
    e02a:	9302      	str	r3, [sp, #8]
    e02c:	e66b      	b.n	dd06 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    e02e:	46c2      	mov	sl, r8
    e030:	46c8      	mov	r8, r9
    e032:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    e034:	9b01      	ldr	r3, [sp, #4]
    e036:	3301      	adds	r3, #1
    e038:	9301      	str	r3, [sp, #4]
    e03a:	e65a      	b.n	dcf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    e03c:	46cb      	mov	fp, r9
    e03e:	f8dd 900c 	ldr.w	r9, [sp, #12]
    e042:	4657      	mov	r7, sl
    e044:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    e046:	f109 0901 	add.w	r9, r9, #1
    e04a:	e647      	b.n	dcdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    e04c:	b025      	add	sp, #148	; 0x94
    e04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e052:	bf00      	nop
    e054:	c0000001 	.word	0xc0000001
    e058:	00034630 	.word	0x00034630
    e05c:	00034640 	.word	0x00034640
    e060:	00034698 	.word	0x00034698
    e064:	000346f4 	.word	0x000346f4

0000e068 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e06c:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    e06e:	f8d1 9010 	ldr.w	r9, [r1, #16]
    e072:	f1b9 0f00 	cmp.w	r9, #0
    e076:	d041      	beq.n	e0fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    e078:	4605      	mov	r5, r0
    e07a:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e07c:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e080:	f1ba 0f00 	cmp.w	sl, #0
    e084:	d03c      	beq.n	e100 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    e086:	4b86      	ldr	r3, [pc, #536]	; (e2a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    e088:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e08a:	2800      	cmp	r0, #0
    e08c:	d03a      	beq.n	e104 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    e08e:	2e00      	cmp	r6, #0
    e090:	d03a      	beq.n	e108 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e092:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e094:	6873      	ldr	r3, [r6, #4]
    e096:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e09a:	6859      	ldr	r1, [r3, #4]
    e09c:	4790      	blx	r2
    e09e:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    e0a0:	4b80      	ldr	r3, [pc, #512]	; (e2a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    e0a2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e0a4:	2d00      	cmp	r5, #0
    e0a6:	d031      	beq.n	e10c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    e0a8:	2e00      	cmp	r6, #0
    e0aa:	d031      	beq.n	e110 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e0ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e0ae:	6833      	ldr	r3, [r6, #0]
    e0b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e0b4:	6859      	ldr	r1, [r3, #4]
    e0b6:	4628      	mov	r0, r5
    e0b8:	4790      	blx	r2
    e0ba:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    e0bc:	4b7a      	ldr	r3, [pc, #488]	; (e2a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    e0be:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e0c0:	b345      	cbz	r5, e114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    e0c2:	b34e      	cbz	r6, e118 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e0c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e0c6:	6833      	ldr	r3, [r6, #0]
    e0c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e0cc:	6859      	ldr	r1, [r3, #4]
    e0ce:	4628      	mov	r0, r5
    e0d0:	4790      	blx	r2
    e0d2:	4680      	mov	r8, r0
    e0d4:	6833      	ldr	r3, [r6, #0]
    e0d6:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    e0d8:	2b03      	cmp	r3, #3
    e0da:	d01f      	beq.n	e11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    e0dc:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    e0de:	7a38      	ldrb	r0, [r7, #8]
    e0e0:	2801      	cmp	r0, #1
    e0e2:	d02c      	beq.n	e13e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    e0e4:	2809      	cmp	r0, #9
    e0e6:	d07f      	beq.n	e1e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e0e8:	696c      	ldr	r4, [r5, #20]
    e0ea:	f7fb f94f 	bl	938c <TfLiteTypeGetName>
    e0ee:	4602      	mov	r2, r0
    e0f0:	7a3b      	ldrb	r3, [r7, #8]
    e0f2:	496e      	ldr	r1, [pc, #440]	; (e2ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    e0f4:	4628      	mov	r0, r5
    e0f6:	47a0      	blx	r4
      return kTfLiteError;
    e0f8:	2001      	movs	r0, #1
    e0fa:	e072      	b.n	e1e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    e0fc:	f00a fcca 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e100:	f00a fcc8 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e104:	f00a fcc6 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e108:	f00a fcc4 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e10c:	f00a fcc2 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e110:	f00a fcc0 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e114:	f00a fcbe 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e118:	f00a fcbc 	bl	18a94 <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    e11c:	4b64      	ldr	r3, [pc, #400]	; (e2b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    e11e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e120:	b14d      	cbz	r5, e136 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    e122:	b156      	cbz	r6, e13a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e124:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    e126:	6833      	ldr	r3, [r6, #0]
    e128:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e12c:	6859      	ldr	r1, [r3, #4]
    e12e:	4628      	mov	r0, r5
    e130:	4790      	blx	r2
    e132:	4606      	mov	r6, r0
    e134:	e7d3      	b.n	e0de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    e136:	f00a fcad 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e13a:	f00a fcab 	bl	18a94 <abort>
          DepthwiseConvParamsFloat(params, data),
    e13e:	464a      	mov	r2, r9
    e140:	4651      	mov	r1, sl
    e142:	a80a      	add	r0, sp, #40	; 0x28
    e144:	f009 f857 	bl	171f6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    e148:	4639      	mov	r1, r7
    e14a:	a81a      	add	r0, sp, #104	; 0x68
    e14c:	f009 f8cd 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e150:	4638      	mov	r0, r7
    e152:	f007 ff0b 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e156:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    e158:	4641      	mov	r1, r8
    e15a:	a820      	add	r0, sp, #128	; 0x80
    e15c:	f009 f8c5 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e160:	4640      	mov	r0, r8
    e162:	f007 ff03 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e166:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    e168:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    e16c:	4631      	mov	r1, r6
    e16e:	4640      	mov	r0, r8
    e170:	f009 f8bb 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e174:	4630      	mov	r0, r6
    e176:	f007 fef9 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e17a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e17c:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    e180:	4621      	mov	r1, r4
    e182:	4648      	mov	r0, r9
    e184:	f009 f8b1 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    e188:	4620      	mov	r0, r4
    e18a:	f007 fef5 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e18e:	9004      	str	r0, [sp, #16]
    e190:	f8cd 900c 	str.w	r9, [sp, #12]
    e194:	9602      	str	r6, [sp, #8]
    e196:	f8cd 8004 	str.w	r8, [sp, #4]
    e19a:	9700      	str	r7, [sp, #0]
    e19c:	ab20      	add	r3, sp, #128	; 0x80
    e19e:	462a      	mov	r2, r5
    e1a0:	a91a      	add	r1, sp, #104	; 0x68
    e1a2:	a80a      	add	r0, sp, #40	; 0x28
    e1a4:	f008 fda9 	bl	16cfa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    e1a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    e1aa:	2b05      	cmp	r3, #5
    e1ac:	dd03      	ble.n	e1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    e1ae:	982d      	ldr	r0, [sp, #180]	; 0xb4
    e1b0:	b108      	cbz	r0, e1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    e1b2:	f00a fc5a 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e1b8:	2b05      	cmp	r3, #5
    e1ba:	dd03      	ble.n	e1c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    e1bc:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e1be:	b108      	cbz	r0, e1c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    e1c0:	f00a fc53 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e1c6:	2b05      	cmp	r3, #5
    e1c8:	dd03      	ble.n	e1d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    e1ca:	9821      	ldr	r0, [sp, #132]	; 0x84
    e1cc:	b108      	cbz	r0, e1d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    e1ce:	f00a fc4c 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e1d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e1d4:	2b05      	cmp	r3, #5
    e1d6:	dd03      	ble.n	e1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    e1d8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e1da:	b108      	cbz	r0, e1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    e1dc:	f00a fc45 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    e1e0:	2000      	movs	r0, #0
}
    e1e2:	b04b      	add	sp, #300	; 0x12c
    e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    e1e8:	464a      	mov	r2, r9
    e1ea:	4651      	mov	r1, sl
    e1ec:	a80a      	add	r0, sp, #40	; 0x28
    e1ee:	f008 ffd9 	bl	171a4 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    e1f2:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    e1f6:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    e1fa:	4639      	mov	r1, r7
    e1fc:	a832      	add	r0, sp, #200	; 0xc8
    e1fe:	f009 f874 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e202:	4638      	mov	r0, r7
    e204:	f007 febc 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e208:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    e20a:	af38      	add	r7, sp, #224	; 0xe0
    e20c:	4641      	mov	r1, r8
    e20e:	4638      	mov	r0, r7
    e210:	f009 f86b 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e214:	4640      	mov	r0, r8
    e216:	f007 feb3 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e21a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    e21c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    e220:	4631      	mov	r1, r6
    e222:	4640      	mov	r0, r8
    e224:	f009 f861 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e228:	4630      	mov	r0, r6
    e22a:	f008 fab2 	bl	16792 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    e22e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e230:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    e234:	4621      	mov	r1, r4
    e236:	4648      	mov	r0, r9
    e238:	f009 f857 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    e23c:	4620      	mov	r0, r4
    e23e:	f007 fea5 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e242:	9006      	str	r0, [sp, #24]
    e244:	f8cd 9014 	str.w	r9, [sp, #20]
    e248:	9604      	str	r6, [sp, #16]
    e24a:	f8cd 800c 	str.w	r8, [sp, #12]
    e24e:	9502      	str	r5, [sp, #8]
    e250:	9701      	str	r7, [sp, #4]
    e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e254:	9300      	str	r3, [sp, #0]
    e256:	ab32      	add	r3, sp, #200	; 0xc8
    e258:	465a      	mov	r2, fp
    e25a:	4651      	mov	r1, sl
    e25c:	a80a      	add	r0, sp, #40	; 0x28
    e25e:	f7ff fbf9 	bl	da54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    e262:	9b44      	ldr	r3, [sp, #272]	; 0x110
    e264:	2b05      	cmp	r3, #5
    e266:	dd03      	ble.n	e270 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    e268:	9845      	ldr	r0, [sp, #276]	; 0x114
    e26a:	b108      	cbz	r0, e270 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    e26c:	f00a fbfd 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e270:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    e272:	2b05      	cmp	r3, #5
    e274:	dd03      	ble.n	e27e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    e276:	983f      	ldr	r0, [sp, #252]	; 0xfc
    e278:	b108      	cbz	r0, e27e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    e27a:	f00a fbf6 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e27e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    e280:	2b05      	cmp	r3, #5
    e282:	dd03      	ble.n	e28c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    e284:	9839      	ldr	r0, [sp, #228]	; 0xe4
    e286:	b108      	cbz	r0, e28c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    e288:	f00a fbef 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e28c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    e28e:	2b05      	cmp	r3, #5
    e290:	dd03      	ble.n	e29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    e292:	9833      	ldr	r0, [sp, #204]	; 0xcc
    e294:	b108      	cbz	r0, e29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    e296:	f00a fbe8 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    e29a:	2000      	movs	r0, #0
      break;
    e29c:	e7a1      	b.n	e1e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    e29e:	bf00      	nop
    e2a0:	00034b74 	.word	0x00034b74
    e2a4:	00034b70 	.word	0x00034b70
    e2a8:	00034b78 	.word	0x00034b78
    e2ac:	00034704 	.word	0x00034704
    e2b0:	00034b6c 	.word	0x00034b6c

0000e2b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    e2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e2b8:	b08f      	sub	sp, #60	; 0x3c
    e2ba:	4604      	mov	r4, r0
    e2bc:	460d      	mov	r5, r1
    e2be:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    e2c0:	6809      	ldr	r1, [r1, #0]
    e2c2:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    e2c4:	2903      	cmp	r1, #3
    e2c6:	d00a      	beq.n	e2de <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    e2c8:	2902      	cmp	r1, #2
    e2ca:	d008      	beq.n	e2de <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    e2cc:	6945      	ldr	r5, [r0, #20]
    e2ce:	4b79      	ldr	r3, [pc, #484]	; (e4b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    e2d0:	9300      	str	r3, [sp, #0]
    e2d2:	2357      	movs	r3, #87	; 0x57
    e2d4:	4a78      	ldr	r2, [pc, #480]	; (e4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e2d6:	4979      	ldr	r1, [pc, #484]	; (e4bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e2d8:	47a8      	blx	r5
    e2da:	2001      	movs	r0, #1
    e2dc:	e011      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    e2de:	686a      	ldr	r2, [r5, #4]
    e2e0:	6812      	ldr	r2, [r2, #0]
    e2e2:	2a01      	cmp	r2, #1
    e2e4:	d010      	beq.n	e308 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    e2e6:	6966      	ldr	r6, [r4, #20]
    e2e8:	2501      	movs	r5, #1
    e2ea:	9503      	str	r5, [sp, #12]
    e2ec:	9202      	str	r2, [sp, #8]
    e2ee:	4b74      	ldr	r3, [pc, #464]	; (e4c0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    e2f0:	9301      	str	r3, [sp, #4]
    e2f2:	4b74      	ldr	r3, [pc, #464]	; (e4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    e2f4:	9300      	str	r3, [sp, #0]
    e2f6:	2358      	movs	r3, #88	; 0x58
    e2f8:	4a6f      	ldr	r2, [pc, #444]	; (e4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e2fa:	4973      	ldr	r1, [pc, #460]	; (e4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    e2fc:	4620      	mov	r0, r4
    e2fe:	47b0      	blx	r6
    e300:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    e302:	b00f      	add	sp, #60	; 0x3c
    e304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    e308:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    e30c:	68b1      	ldr	r1, [r6, #8]
    e30e:	6872      	ldr	r2, [r6, #4]
    e310:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e314:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e316:	3801      	subs	r0, #1
    e318:	6977      	ldr	r7, [r6, #20]
    e31a:	fb00 f007 	mul.w	r0, r0, r7
    e31e:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    e322:	b1b2      	cbz	r2, e352 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    e324:	f1be 0f01 	cmp.w	lr, #1
    e328:	d005      	beq.n	e336 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    e32a:	f1be 0f02 	cmp.w	lr, #2
    e32e:	d009      	beq.n	e344 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    e330:	f04f 0c00 	mov.w	ip, #0
    e334:	e00e      	b.n	e354 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    e336:	eb02 0c03 	add.w	ip, r2, r3
    e33a:	f10c 3cff 	add.w	ip, ip, #4294967295
    e33e:	fb9c fcf2 	sdiv	ip, ip, r2
    e342:	e007      	b.n	e354 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    e344:	eb02 0c03 	add.w	ip, r2, r3
    e348:	ebac 0c09 	sub.w	ip, ip, r9
    e34c:	fb9c fcf2 	sdiv	ip, ip, r2
    e350:	e000      	b.n	e354 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    e352:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    e354:	9f18      	ldr	r7, [sp, #96]	; 0x60
    e356:	3f01      	subs	r7, #1
    e358:	fb07 f708 	mul.w	r7, r7, r8
    e35c:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    e35e:	b1c1      	cbz	r1, e392 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    e360:	f1be 0f01 	cmp.w	lr, #1
    e364:	d005      	beq.n	e372 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    e366:	f1be 0f02 	cmp.w	lr, #2
    e36a:	d00a      	beq.n	e382 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    e36c:	f04f 0e00 	mov.w	lr, #0
    e370:	e010      	b.n	e394 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    e372:	9816      	ldr	r0, [sp, #88]	; 0x58
    e374:	eb01 0e00 	add.w	lr, r1, r0
    e378:	f10e 3eff 	add.w	lr, lr, #4294967295
    e37c:	fb9e fef1 	sdiv	lr, lr, r1
    e380:	e008      	b.n	e394 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    e382:	9816      	ldr	r0, [sp, #88]	; 0x58
    e384:	eb01 0e00 	add.w	lr, r1, r0
    e388:	ebae 0e07 	sub.w	lr, lr, r7
    e38c:	fb9e fef1 	sdiv	lr, lr, r1
    e390:	e000      	b.n	e394 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    e392:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e394:	f10e 3eff 	add.w	lr, lr, #4294967295
    e398:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    e39c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    e39e:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    e3a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    e3a4:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    e3a8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    e3ac:	1049      	asrs	r1, r1, #1
  padding_values.height =
    e3ae:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    e3b0:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    e3b2:	f10c 3cff 	add.w	ip, ip, #4294967295
    e3b6:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    e3ba:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    e3bc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    e3c0:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    e3c4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    e3c8:	1052      	asrs	r2, r2, #1
  padding_values.width =
    e3ca:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    e3cc:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    e3ce:	ab0e      	add	r3, sp, #56	; 0x38
    e3d0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    e3d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    e3d6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    e3da:	4b3c      	ldr	r3, [pc, #240]	; (e4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    e3dc:	681a      	ldr	r2, [r3, #0]
    e3de:	4629      	mov	r1, r5
    e3e0:	4620      	mov	r0, r4
    e3e2:	f007 fcfb 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e3e6:	4607      	mov	r7, r0
    e3e8:	b320      	cbz	r0, e434 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    e3ea:	4b39      	ldr	r3, [pc, #228]	; (e4d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    e3ec:	681a      	ldr	r2, [r3, #0]
    e3ee:	4629      	mov	r1, r5
    e3f0:	4620      	mov	r0, r4
    e3f2:	f007 fcf3 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e3f6:	4680      	mov	r8, r0
    e3f8:	b330      	cbz	r0, e448 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    e3fa:	4b36      	ldr	r3, [pc, #216]	; (e4d4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    e3fc:	681a      	ldr	r2, [r3, #0]
    e3fe:	4629      	mov	r1, r5
    e400:	4620      	mov	r0, r4
    e402:	f007 fd29 	bl	15e58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e406:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    e408:	4b33      	ldr	r3, [pc, #204]	; (e4d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    e40a:	681a      	ldr	r2, [r3, #0]
    e40c:	4629      	mov	r1, r5
    e40e:	4620      	mov	r0, r4
    e410:	f007 fd03 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e414:	4605      	mov	r5, r0
    e416:	b308      	cbz	r0, e45c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    e418:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    e41c:	2b01      	cmp	r3, #1
    e41e:	d127      	bne.n	e470 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    e420:	693b      	ldr	r3, [r7, #16]
    e422:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e424:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    e426:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e42a:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    e42c:	692b      	ldr	r3, [r5, #16]
    e42e:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    e430:	2000      	movs	r0, #0
    e432:	e766      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    e434:	6965      	ldr	r5, [r4, #20]
    e436:	4b29      	ldr	r3, [pc, #164]	; (e4dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    e438:	9300      	str	r3, [sp, #0]
    e43a:	2362      	movs	r3, #98	; 0x62
    e43c:	4a1e      	ldr	r2, [pc, #120]	; (e4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e43e:	491f      	ldr	r1, [pc, #124]	; (e4bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e440:	4620      	mov	r0, r4
    e442:	47a8      	blx	r5
    e444:	2001      	movs	r0, #1
    e446:	e75c      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    e448:	6965      	ldr	r5, [r4, #20]
    e44a:	4b25      	ldr	r3, [pc, #148]	; (e4e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    e44c:	9300      	str	r3, [sp, #0]
    e44e:	2364      	movs	r3, #100	; 0x64
    e450:	4a19      	ldr	r2, [pc, #100]	; (e4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e452:	491a      	ldr	r1, [pc, #104]	; (e4bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e454:	4620      	mov	r0, r4
    e456:	47a8      	blx	r5
    e458:	2001      	movs	r0, #1
    e45a:	e752      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    e45c:	6965      	ldr	r5, [r4, #20]
    e45e:	4b21      	ldr	r3, [pc, #132]	; (e4e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    e460:	9300      	str	r3, [sp, #0]
    e462:	2368      	movs	r3, #104	; 0x68
    e464:	4a14      	ldr	r2, [pc, #80]	; (e4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    e466:	4915      	ldr	r1, [pc, #84]	; (e4bc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    e468:	4620      	mov	r0, r4
    e46a:	47a8      	blx	r5
    e46c:	2001      	movs	r0, #1
    e46e:	e748      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e470:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e474:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    e476:	3610      	adds	r6, #16
    e478:	9308      	str	r3, [sp, #32]
    e47a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e47e:	9307      	str	r3, [sp, #28]
    e480:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e484:	9306      	str	r3, [sp, #24]
    e486:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e488:	3330      	adds	r3, #48	; 0x30
    e48a:	9305      	str	r3, [sp, #20]
    e48c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e48e:	332c      	adds	r3, #44	; 0x2c
    e490:	9304      	str	r3, [sp, #16]
    e492:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e494:	3320      	adds	r3, #32
    e496:	9303      	str	r3, [sp, #12]
    e498:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e49a:	331c      	adds	r3, #28
    e49c:	9302      	str	r3, [sp, #8]
    e49e:	9601      	str	r6, [sp, #4]
    e4a0:	9000      	str	r0, [sp, #0]
    e4a2:	464b      	mov	r3, r9
    e4a4:	4642      	mov	r2, r8
    e4a6:	4639      	mov	r1, r7
    e4a8:	4620      	mov	r0, r4
    e4aa:	f7fb f9e3 	bl	9874 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0b6      	beq.n	e420 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    e4b2:	e726      	b.n	e302 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    e4b4:	00034978 	.word	0x00034978
    e4b8:	00034a8c 	.word	0x00034a8c
    e4bc:	00033f14 	.word	0x00033f14
    e4c0:	00034fd0 	.word	0x00034fd0
    e4c4:	0003499c 	.word	0x0003499c
    e4c8:	000341d4 	.word	0x000341d4
    e4cc:	00034a80 	.word	0x00034a80
    e4d0:	00034a88 	.word	0x00034a88
    e4d4:	00034a7c 	.word	0x00034a7c
    e4d8:	00034a84 	.word	0x00034a84
    e4dc:	000349b0 	.word	0x000349b0
    e4e0:	000349c4 	.word	0x000349c4
    e4e4:	0003461c 	.word	0x0003461c

0000e4e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4ec:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    e4ee:	690e      	ldr	r6, [r1, #16]
    e4f0:	2e00      	cmp	r6, #0
    e4f2:	d051      	beq.n	e598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    e4f4:	4604      	mov	r4, r0
    e4f6:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e4f8:	694f      	ldr	r7, [r1, #20]
    e4fa:	2f00      	cmp	r7, #0
    e4fc:	d04e      	beq.n	e59c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    e4fe:	2200      	movs	r2, #0
    e500:	f007 fc8b 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e504:	4680      	mov	r8, r0
    e506:	2800      	cmp	r0, #0
    e508:	d04a      	beq.n	e5a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    e50a:	2200      	movs	r2, #0
    e50c:	4629      	mov	r1, r5
    e50e:	4620      	mov	r0, r4
    e510:	f007 fc64 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e514:	4681      	mov	r9, r0
    e516:	2800      	cmp	r0, #0
    e518:	d050      	beq.n	e5bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    e51a:	2201      	movs	r2, #1
    e51c:	4629      	mov	r1, r5
    e51e:	4620      	mov	r0, r4
    e520:	f007 fc5c 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e524:	4682      	mov	sl, r0
    e526:	2800      	cmp	r0, #0
    e528:	d053      	beq.n	e5d2 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    e52a:	f8d9 3008 	ldr.w	r3, [r9, #8]
    e52e:	68da      	ldr	r2, [r3, #12]
    e530:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    e532:	689b      	ldr	r3, [r3, #8]
    e534:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    e536:	6883      	ldr	r3, [r0, #8]
    e538:	68da      	ldr	r2, [r3, #12]
    e53a:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    e53c:	689a      	ldr	r2, [r3, #8]
    e53e:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    e540:	f8d8 2008 	ldr.w	r2, [r8, #8]
    e544:	68d1      	ldr	r1, [r2, #12]
    e546:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    e548:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    e54c:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e54e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e550:	ea4f 0882 	mov.w	r8, r2, lsl #2
    e554:	4641      	mov	r1, r8
    e556:	4620      	mov	r0, r4
    e558:	4798      	blx	r3
  data->per_channel_output_multiplier =
    e55a:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    e55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e55e:	4641      	mov	r1, r8
    e560:	4620      	mov	r0, r4
    e562:	4798      	blx	r3
  data->per_channel_output_shift =
    e564:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    e566:	f899 3000 	ldrb.w	r3, [r9]
    e56a:	2b09      	cmp	r3, #9
    e56c:	d16a      	bne.n	e644 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    e56e:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    e572:	f1b8 0f01 	cmp.w	r8, #1
    e576:	d037      	beq.n	e5e8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    e578:	6966      	ldr	r6, [r4, #20]
    e57a:	2501      	movs	r5, #1
    e57c:	9503      	str	r5, [sp, #12]
    e57e:	f8cd 8008 	str.w	r8, [sp, #8]
    e582:	4b3a      	ldr	r3, [pc, #232]	; (e66c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    e584:	9301      	str	r3, [sp, #4]
    e586:	4b3a      	ldr	r3, [pc, #232]	; (e670 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    e588:	9300      	str	r3, [sp, #0]
    e58a:	23a1      	movs	r3, #161	; 0xa1
    e58c:	4a39      	ldr	r2, [pc, #228]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e58e:	493a      	ldr	r1, [pc, #232]	; (e678 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e590:	4620      	mov	r0, r4
    e592:	47b0      	blx	r6
    e594:	46a8      	mov	r8, r5
    e596:	e00d      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    e598:	f00a fa7c 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e59c:	f00a fa7a 	bl	18a94 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    e5a0:	6965      	ldr	r5, [r4, #20]
    e5a2:	4b36      	ldr	r3, [pc, #216]	; (e67c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    e5a4:	9300      	str	r3, [sp, #0]
    e5a6:	2387      	movs	r3, #135	; 0x87
    e5a8:	4a32      	ldr	r2, [pc, #200]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5aa:	4935      	ldr	r1, [pc, #212]	; (e680 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5ac:	4620      	mov	r0, r4
    e5ae:	47a8      	blx	r5
    e5b0:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    e5b4:	4640      	mov	r0, r8
    e5b6:	b00f      	add	sp, #60	; 0x3c
    e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    e5bc:	6965      	ldr	r5, [r4, #20]
    e5be:	4b31      	ldr	r3, [pc, #196]	; (e684 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    e5c0:	9300      	str	r3, [sp, #0]
    e5c2:	238a      	movs	r3, #138	; 0x8a
    e5c4:	4a2b      	ldr	r2, [pc, #172]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5c6:	492e      	ldr	r1, [pc, #184]	; (e680 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5c8:	4620      	mov	r0, r4
    e5ca:	47a8      	blx	r5
    e5cc:	f04f 0801 	mov.w	r8, #1
    e5d0:	e7f0      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    e5d2:	6965      	ldr	r5, [r4, #20]
    e5d4:	4b2c      	ldr	r3, [pc, #176]	; (e688 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    e5d6:	9300      	str	r3, [sp, #0]
    e5d8:	238d      	movs	r3, #141	; 0x8d
    e5da:	4a26      	ldr	r2, [pc, #152]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e5dc:	4928      	ldr	r1, [pc, #160]	; (e680 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e5de:	4620      	mov	r0, r4
    e5e0:	47a8      	blx	r5
    e5e2:	f04f 0801 	mov.w	r8, #1
    e5e6:	e7e5      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    e5e8:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    e5ec:	b1a2      	cbz	r2, e618 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e5ee:	6811      	ldr	r1, [r2, #0]
    e5f0:	b1a1      	cbz	r1, e61c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e5f2:	6850      	ldr	r0, [r2, #4]
    e5f4:	b1a0      	cbz	r0, e620 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    e5f6:	680a      	ldr	r2, [r1, #0]
    e5f8:	2a01      	cmp	r2, #1
    e5fa:	d013      	beq.n	e624 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e5fc:	f8da 1008 	ldr.w	r1, [sl, #8]
    e600:	6909      	ldr	r1, [r1, #16]
    e602:	428a      	cmp	r2, r1
    e604:	d00e      	beq.n	e624 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    e606:	6965      	ldr	r5, [r4, #20]
    e608:	4b20      	ldr	r3, [pc, #128]	; (e68c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    e60a:	9300      	str	r3, [sp, #0]
    e60c:	23aa      	movs	r3, #170	; 0xaa
    e60e:	4a19      	ldr	r2, [pc, #100]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e610:	491b      	ldr	r1, [pc, #108]	; (e680 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    e612:	4620      	mov	r0, r4
    e614:	47a8      	blx	r5
    e616:	e7cd      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    e618:	f00a fa3c 	bl	18a94 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    e61c:	f00a fa3a 	bl	18a94 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    e620:	f00a fa38 	bl	18a94 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    e624:	6801      	ldr	r1, [r0, #0]
    e626:	428a      	cmp	r2, r1
    e628:	d00c      	beq.n	e644 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    e62a:	6965      	ldr	r5, [r4, #20]
    e62c:	9103      	str	r1, [sp, #12]
    e62e:	9202      	str	r2, [sp, #8]
    e630:	4b17      	ldr	r3, [pc, #92]	; (e690 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    e632:	9301      	str	r3, [sp, #4]
    e634:	4b17      	ldr	r3, [pc, #92]	; (e694 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    e636:	9300      	str	r3, [sp, #0]
    e638:	23af      	movs	r3, #175	; 0xaf
    e63a:	4a0e      	ldr	r2, [pc, #56]	; (e674 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    e63c:	490e      	ldr	r1, [pc, #56]	; (e678 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    e63e:	4620      	mov	r0, r4
    e640:	47a8      	blx	r5
    e642:	e7b7      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    e644:	9606      	str	r6, [sp, #24]
    e646:	9305      	str	r3, [sp, #20]
    e648:	f8cd b010 	str.w	fp, [sp, #16]
    e64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e64e:	9303      	str	r3, [sp, #12]
    e650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e652:	9302      	str	r3, [sp, #8]
    e654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e656:	9301      	str	r3, [sp, #4]
    e658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e65a:	9300      	str	r3, [sp, #0]
    e65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e65e:	463a      	mov	r2, r7
    e660:	4629      	mov	r1, r5
    e662:	4620      	mov	r0, r4
    e664:	f7ff fe26 	bl	e2b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    e668:	4680      	mov	r8, r0
    e66a:	e7a3      	b.n	e5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    e66c:	000341f0 	.word	0x000341f0
    e670:	00034228 	.word	0x00034228
    e674:	00034a8c 	.word	0x00034a8c
    e678:	000341d4 	.word	0x000341d4
    e67c:	0003461c 	.word	0x0003461c
    e680:	00033f14 	.word	0x00033f14
    e684:	000349b0 	.word	0x000349b0
    e688:	000349c4 	.word	0x000349c4
    e68c:	00034ae8 	.word	0x00034ae8
    e690:	00034a54 	.word	0x00034a54
    e694:	000342dc 	.word	0x000342dc

0000e698 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    e698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e69c:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    e69e:	690d      	ldr	r5, [r1, #16]
    e6a0:	b37d      	cbz	r5, e702 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    e6a2:	4607      	mov	r7, r0
    e6a4:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e6a6:	694e      	ldr	r6, [r1, #20]
    e6a8:	b36e      	cbz	r6, e706 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    e6aa:	4b38      	ldr	r3, [pc, #224]	; (e78c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    e6ac:	681a      	ldr	r2, [r3, #0]
    e6ae:	f007 fb95 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    e6b2:	4681      	mov	r9, r0
    e6b4:	b348      	cbz	r0, e70a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    e6b6:	4b36      	ldr	r3, [pc, #216]	; (e790 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    e6b8:	681a      	ldr	r2, [r3, #0]
    e6ba:	4621      	mov	r1, r4
    e6bc:	4638      	mov	r0, r7
    e6be:	f007 fb8d 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    e6c2:	4682      	mov	sl, r0
    e6c4:	b368      	cbz	r0, e722 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    e6c6:	4b33      	ldr	r3, [pc, #204]	; (e794 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    e6c8:	681a      	ldr	r2, [r3, #0]
    e6ca:	4621      	mov	r1, r4
    e6cc:	4638      	mov	r0, r7
    e6ce:	f007 fbc3 	bl	15e58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    e6d2:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    e6d4:	4b30      	ldr	r3, [pc, #192]	; (e798 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    e6d6:	681a      	ldr	r2, [r3, #0]
    e6d8:	4621      	mov	r1, r4
    e6da:	4638      	mov	r0, r7
    e6dc:	f007 fb9d 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    e6e0:	4604      	mov	r4, r0
    e6e2:	b340      	cbz	r0, e736 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e6e4:	f899 0000 	ldrb.w	r0, [r9]
    e6e8:	7823      	ldrb	r3, [r4, #0]
    e6ea:	4298      	cmp	r0, r3
    e6ec:	d12d      	bne.n	e74a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    e6ee:	f89a 3000 	ldrb.w	r3, [sl]
    e6f2:	4298      	cmp	r0, r3
    e6f4:	d03d      	beq.n	e772 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    e6f6:	697b      	ldr	r3, [r7, #20]
    e6f8:	4928      	ldr	r1, [pc, #160]	; (e79c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    e6fa:	4638      	mov	r0, r7
    e6fc:	4798      	blx	r3
    e6fe:	2001      	movs	r0, #1
    e700:	e00c      	b.n	e71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    e702:	f00a f9c7 	bl	18a94 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e706:	f00a f9c5 	bl	18a94 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    e70a:	697c      	ldr	r4, [r7, #20]
    e70c:	4b24      	ldr	r3, [pc, #144]	; (e7a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    e70e:	9300      	str	r3, [sp, #0]
    e710:	232f      	movs	r3, #47	; 0x2f
    e712:	4a24      	ldr	r2, [pc, #144]	; (e7a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e714:	4924      	ldr	r1, [pc, #144]	; (e7a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e716:	4638      	mov	r0, r7
    e718:	47a0      	blx	r4
    e71a:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    e71c:	b004      	add	sp, #16
    e71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    e722:	697c      	ldr	r4, [r7, #20]
    e724:	4b21      	ldr	r3, [pc, #132]	; (e7ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    e726:	9300      	str	r3, [sp, #0]
    e728:	2332      	movs	r3, #50	; 0x32
    e72a:	4a1e      	ldr	r2, [pc, #120]	; (e7a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e72c:	491e      	ldr	r1, [pc, #120]	; (e7a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e72e:	4638      	mov	r0, r7
    e730:	47a0      	blx	r4
    e732:	2001      	movs	r0, #1
    e734:	e7f2      	b.n	e71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    e736:	697c      	ldr	r4, [r7, #20]
    e738:	4b1d      	ldr	r3, [pc, #116]	; (e7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    e73a:	9300      	str	r3, [sp, #0]
    e73c:	2336      	movs	r3, #54	; 0x36
    e73e:	4a19      	ldr	r2, [pc, #100]	; (e7a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e740:	4919      	ldr	r1, [pc, #100]	; (e7a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    e742:	4638      	mov	r0, r7
    e744:	47a0      	blx	r4
    e746:	2001      	movs	r0, #1
    e748:	e7e8      	b.n	e71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    e74a:	697e      	ldr	r6, [r7, #20]
    e74c:	f7fa fe1e 	bl	938c <TfLiteTypeGetName>
    e750:	4605      	mov	r5, r0
    e752:	7820      	ldrb	r0, [r4, #0]
    e754:	f7fa fe1a 	bl	938c <TfLiteTypeGetName>
    e758:	9003      	str	r0, [sp, #12]
    e75a:	9502      	str	r5, [sp, #8]
    e75c:	4b15      	ldr	r3, [pc, #84]	; (e7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    e75e:	9301      	str	r3, [sp, #4]
    e760:	4b15      	ldr	r3, [pc, #84]	; (e7b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    e762:	9300      	str	r3, [sp, #0]
    e764:	2338      	movs	r3, #56	; 0x38
    e766:	4a0f      	ldr	r2, [pc, #60]	; (e7a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    e768:	4914      	ldr	r1, [pc, #80]	; (e7bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    e76a:	4638      	mov	r0, r7
    e76c:	47b0      	blx	r6
    e76e:	2001      	movs	r0, #1
    e770:	e7d4      	b.n	e71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    e772:	7831      	ldrb	r1, [r6, #0]
    e774:	9503      	str	r5, [sp, #12]
    e776:	9402      	str	r4, [sp, #8]
    e778:	f8cd 8004 	str.w	r8, [sp, #4]
    e77c:	f8cd a000 	str.w	sl, [sp]
    e780:	464b      	mov	r3, r9
    e782:	4602      	mov	r2, r0
    e784:	4638      	mov	r0, r7
    e786:	f008 fd6e 	bl	17266 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    e78a:	e7c7      	b.n	e71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    e78c:	00034c7c 	.word	0x00034c7c
    e790:	00034c84 	.word	0x00034c84
    e794:	00034c78 	.word	0x00034c78
    e798:	00034c80 	.word	0x00034c80
    e79c:	00034bf0 	.word	0x00034bf0
    e7a0:	000349b0 	.word	0x000349b0
    e7a4:	00034b7c 	.word	0x00034b7c
    e7a8:	00033f14 	.word	0x00033f14
    e7ac:	000349c4 	.word	0x000349c4
    e7b0:	0003461c 	.word	0x0003461c
    e7b4:	0003488c 	.word	0x0003488c
    e7b8:	0003489c 	.word	0x0003489c
    e7bc:	00034bd4 	.word	0x00034bd4

0000e7c0 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    e7c0:	b470      	push	{r4, r5, r6}
    e7c2:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    e7c4:	4604      	mov	r4, r0
    e7c6:	4d05      	ldr	r5, [pc, #20]	; (e7dc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    e7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e7ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e7cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e7d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    e7d4:	4630      	mov	r0, r6
    e7d6:	bc70      	pop	{r4, r5, r6}
    e7d8:	4770      	bx	lr
    e7da:	bf00      	nop
    e7dc:	00019a90 	.word	0x00019a90

0000e7e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7e4:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e7e6:	f8d1 a014 	ldr.w	sl, [r1, #20]
    e7ea:	f1ba 0f00 	cmp.w	sl, #0
    e7ee:	d04c      	beq.n	e88a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    e7f0:	4604      	mov	r4, r0
    e7f2:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    e7f4:	4ba5      	ldr	r3, [pc, #660]	; (ea8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    e7f6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e7f8:	2800      	cmp	r0, #0
    e7fa:	d048      	beq.n	e88e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    e7fc:	2e00      	cmp	r6, #0
    e7fe:	d048      	beq.n	e892 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e800:	6d42      	ldr	r2, [r0, #84]	; 0x54
    e802:	6833      	ldr	r3, [r6, #0]
    e804:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e808:	6859      	ldr	r1, [r3, #4]
    e80a:	4790      	blx	r2
    e80c:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    e80e:	4ba0      	ldr	r3, [pc, #640]	; (ea90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    e810:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e812:	2c00      	cmp	r4, #0
    e814:	d03f      	beq.n	e896 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    e816:	2e00      	cmp	r6, #0
    e818:	d03f      	beq.n	e89a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e81a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e81c:	6833      	ldr	r3, [r6, #0]
    e81e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e822:	6859      	ldr	r1, [r3, #4]
    e824:	4620      	mov	r0, r4
    e826:	4790      	blx	r2
    e828:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    e82a:	4b9a      	ldr	r3, [pc, #616]	; (ea94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    e82c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e82e:	2c00      	cmp	r4, #0
    e830:	d035      	beq.n	e89e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    e832:	2e00      	cmp	r6, #0
    e834:	d035      	beq.n	e8a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e836:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e838:	6833      	ldr	r3, [r6, #0]
    e83a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e83e:	6859      	ldr	r1, [r3, #4]
    e840:	4620      	mov	r0, r4
    e842:	4790      	blx	r2
    e844:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    e846:	4b94      	ldr	r3, [pc, #592]	; (ea98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    e848:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    e84a:	b364      	cbz	r4, e8a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    e84c:	b36e      	cbz	r6, e8aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e84e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    e850:	6873      	ldr	r3, [r6, #4]
    e852:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    e856:	6859      	ldr	r1, [r3, #4]
    e858:	4620      	mov	r0, r4
    e85a:	4790      	blx	r2
    e85c:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e85e:	6931      	ldr	r1, [r6, #16]
    e860:	b329      	cbz	r1, e8ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    e862:	f898 0008 	ldrb.w	r0, [r8, #8]
    e866:	2801      	cmp	r0, #1
    e868:	d023      	beq.n	e8b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    e86a:	2809      	cmp	r0, #9
    e86c:	f000 8136 	beq.w	eadc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e870:	6965      	ldr	r5, [r4, #20]
    e872:	f7fa fd8b 	bl	938c <TfLiteTypeGetName>
    e876:	4602      	mov	r2, r0
    e878:	f898 3008 	ldrb.w	r3, [r8, #8]
    e87c:	4987      	ldr	r1, [pc, #540]	; (ea9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    e87e:	4620      	mov	r0, r4
    e880:	47a8      	blx	r5
      return kTfLiteError;
    e882:	2001      	movs	r0, #1
}
    e884:	b04f      	add	sp, #316	; 0x13c
    e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    e88a:	f00a f903 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e88e:	f00a f901 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e892:	f00a f8ff 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e896:	f00a f8fd 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e89a:	f00a f8fb 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e89e:	f00a f8f9 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8a2:	f00a f8f7 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    e8a6:	f00a f8f5 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    e8aa:	f00a f8f3 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e8ae:	f00a f8f1 	bl	18a94 <abort>
          FullyConnectedParamsFloat(params->activation),
    e8b2:	f89a 1000 	ldrb.w	r1, [sl]
    e8b6:	a812      	add	r0, sp, #72	; 0x48
    e8b8:	f008 fd0c 	bl	172d4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    e8bc:	4641      	mov	r1, r8
    e8be:	a81c      	add	r0, sp, #112	; 0x70
    e8c0:	f008 fd13 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8c4:	4640      	mov	r0, r8
    e8c6:	f007 fb51 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8ca:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    e8cc:	4649      	mov	r1, r9
    e8ce:	a822      	add	r0, sp, #136	; 0x88
    e8d0:	f008 fd0b 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8d4:	4648      	mov	r0, r9
    e8d6:	f007 fb49 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8da:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    e8dc:	4639      	mov	r1, r7
    e8de:	a828      	add	r0, sp, #160	; 0xa0
    e8e0:	f008 fd03 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8e4:	4638      	mov	r0, r7
    e8e6:	f007 fb41 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e8ea:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    e8ec:	4629      	mov	r1, r5
    e8ee:	a82e      	add	r0, sp, #184	; 0xb8
    e8f0:	f008 fcfb 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    e8f4:	4628      	mov	r0, r5
    e8f6:	f007 fb3f 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e8fa:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    e8fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e8fe:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    e900:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    e904:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e906:	9922      	ldr	r1, [sp, #136]	; 0x88
    e908:	461c      	mov	r4, r3
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e90a:	1e5a      	subs	r2, r3, #1
    e90c:	d405      	bmi.n	e91a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    e90e:	429a      	cmp	r2, r3
    e910:	da03      	bge.n	e91a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e912:	2b05      	cmp	r3, #5
    e914:	dd03      	ble.n	e91e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    e916:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    e918:	e002      	b.n	e920 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e91a:	f00a f8bb 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e91e:	ad2f      	add	r5, sp, #188	; 0xbc
  for (int i = 0; i < dims_count; ++i) {
    e920:	2300      	movs	r3, #0
  int flat_size = 1;
    e922:	f04f 0801 	mov.w	r8, #1
    e926:	e004      	b.n	e932 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e928:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    e92c:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    e930:	3301      	adds	r3, #1
    e932:	429c      	cmp	r4, r3
    e934:	dd03      	ble.n	e93e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e936:	429a      	cmp	r2, r3
    e938:	d1f6      	bne.n	e928 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    e93a:	2001      	movs	r0, #1
    e93c:	e7f6      	b.n	e92c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    e93e:	1e8b      	subs	r3, r1, #2
    e940:	d433      	bmi.n	e9aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    e942:	9822      	ldr	r0, [sp, #136]	; 0x88
    e944:	4283      	cmp	r3, r0
    e946:	da32      	bge.n	e9ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e948:	2805      	cmp	r0, #5
    e94a:	dd32      	ble.n	e9b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    e94c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    e94e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e952:	2a00      	cmp	r2, #0
    e954:	db33      	blt.n	e9be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    e956:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e958:	4282      	cmp	r2, r0
    e95a:	da32      	bge.n	e9c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e95c:	2805      	cmp	r0, #5
    e95e:	dd32      	ble.n	e9c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    e960:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e962:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e966:	4298      	cmp	r0, r3
    e968:	d133      	bne.n	e9d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e96a:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    e96c:	2a00      	cmp	r2, #0
    e96e:	db32      	blt.n	e9d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    e970:	982e      	ldr	r0, [sp, #184]	; 0xb8
    e972:	4282      	cmp	r2, r0
    e974:	da31      	bge.n	e9da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e976:	2805      	cmp	r0, #5
    e978:	dd31      	ble.n	e9de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    e97a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    e97c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e980:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    e982:	4293      	cmp	r3, r2
    e984:	dc31      	bgt.n	e9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    e986:	ab4d      	add	r3, sp, #308	; 0x134
    e988:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    e98c:	3901      	subs	r1, #1
    e98e:	d42e      	bmi.n	e9ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    e990:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e992:	4299      	cmp	r1, r3
    e994:	da2d      	bge.n	e9f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e996:	2b05      	cmp	r3, #5
    e998:	dd2d      	ble.n	e9f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    e99a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e99c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    e9a0:	2700      	movs	r7, #0
    e9a2:	f8cd 8014 	str.w	r8, [sp, #20]
    e9a6:	46b0      	mov	r8, r6
    e9a8:	e06a      	b.n	ea80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    e9aa:	f00a f873 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9ae:	f00a f871 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9b2:	a84e      	add	r0, sp, #312	; 0x138
    e9b4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    e9b8:	f853 3cac 	ldr.w	r3, [r3, #-172]
    e9bc:	e7c9      	b.n	e952 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    e9be:	f00a f869 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9c2:	f00a f867 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9c6:	a84e      	add	r0, sp, #312	; 0x138
    e9c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    e9cc:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    e9d0:	e7c9      	b.n	e966 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e9d2:	f00a f85f 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e9d6:	f00a f85d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9da:	f00a f85b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9de:	a84e      	add	r0, sp, #312	; 0x138
    e9e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    e9e4:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    e9e8:	e7ca      	b.n	e980 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    e9ea:	ab4c      	add	r3, sp, #304	; 0x130
    e9ec:	e7cc      	b.n	e988 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    e9ee:	f00a f851 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e9f2:	f00a f84f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9f6:	ab4e      	add	r3, sp, #312	; 0x138
    e9f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e9fc:	f851 9cac 	ldr.w	r9, [r1, #-172]
    ea00:	e7ce      	b.n	e9a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    ea02:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    ea06:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    ea0a:	9902      	ldr	r1, [sp, #8]
    ea0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    ea10:	9a01      	ldr	r2, [sp, #4]
    ea12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    ea16:	f7f2 f97b 	bl	d10 <__aeabi_fmul>
    ea1a:	4601      	mov	r1, r0
    ea1c:	4628      	mov	r0, r5
    ea1e:	f7f2 f86f 	bl	b00 <__addsf3>
    ea22:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    ea24:	3601      	adds	r6, #1
    ea26:	454e      	cmp	r6, r9
    ea28:	dbeb      	blt.n	ea02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    ea2a:	f1b8 0f00 	cmp.w	r8, #0
    ea2e:	d020      	beq.n	ea72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    ea30:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    ea34:	4628      	mov	r0, r5
    ea36:	f7f2 f863 	bl	b00 <__addsf3>
    ea3a:	4601      	mov	r1, r0
    ea3c:	fb0b 4607 	mla	r6, fp, r7, r4
    ea40:	9011      	str	r0, [sp, #68]	; 0x44
    ea42:	9b04      	ldr	r3, [sp, #16]
    ea44:	9310      	str	r3, [sp, #64]	; 0x40
    ea46:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    ea4a:	4618      	mov	r0, r3
    ea4c:	f7f2 fb1c 	bl	1088 <__aeabi_fcmpgt>
    ea50:	b988      	cbnz	r0, ea76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    ea52:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    ea54:	6829      	ldr	r1, [r5, #0]
    ea56:	4650      	mov	r0, sl
    ea58:	f7f2 faf8 	bl	104c <__aeabi_fcmplt>
    ea5c:	b968      	cbnz	r0, ea7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    ea5e:	682b      	ldr	r3, [r5, #0]
    ea60:	9a03      	ldr	r2, [sp, #12]
    ea62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ea66:	3401      	adds	r4, #1
    ea68:	455c      	cmp	r4, fp
    ea6a:	da08      	bge.n	ea7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    ea6c:	2600      	movs	r6, #0
      float total = 0.f;
    ea6e:	2500      	movs	r5, #0
    ea70:	e7d9      	b.n	ea26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    ea72:	2100      	movs	r1, #0
    ea74:	e7de      	b.n	ea34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    ea76:	ad10      	add	r5, sp, #64	; 0x40
    ea78:	e7ec      	b.n	ea54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    ea7a:	ad0f      	add	r5, sp, #60	; 0x3c
    ea7c:	e7ef      	b.n	ea5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    ea7e:	3701      	adds	r7, #1
    ea80:	9b05      	ldr	r3, [sp, #20]
    ea82:	429f      	cmp	r7, r3
    ea84:	da0c      	bge.n	eaa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ea86:	2400      	movs	r4, #0
    ea88:	e7ee      	b.n	ea68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    ea8a:	bf00      	nop
    ea8c:	00034c7c 	.word	0x00034c7c
    ea90:	00034c84 	.word	0x00034c84
    ea94:	00034c78 	.word	0x00034c78
    ea98:	00034c80 	.word	0x00034c80
    ea9c:	00034704 	.word	0x00034704
    if (size_ > kMaxSmallSize) {
    eaa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    eaa2:	2b05      	cmp	r3, #5
    eaa4:	dd03      	ble.n	eaae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    eaa6:	982f      	ldr	r0, [sp, #188]	; 0xbc
    eaa8:	b108      	cbz	r0, eaae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    eaaa:	f009 ffde 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eaae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    eab0:	2b05      	cmp	r3, #5
    eab2:	dd03      	ble.n	eabc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    eab4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    eab6:	b108      	cbz	r0, eabc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    eab8:	f009 ffd7 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eabc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eabe:	2b05      	cmp	r3, #5
    eac0:	dd03      	ble.n	eaca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    eac2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    eac4:	b108      	cbz	r0, eaca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    eac6:	f009 ffd0 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eaca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    eacc:	2b05      	cmp	r3, #5
    eace:	dd03      	ble.n	ead8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    ead0:	981d      	ldr	r0, [sp, #116]	; 0x74
    ead2:	b108      	cbz	r0, ead8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    ead4:	f009 ffc9 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    ead8:	2000      	movs	r0, #0
      break;
    eada:	e6d3      	b.n	e884 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    eadc:	a812      	add	r0, sp, #72	; 0x48
    eade:	f008 fbb1 	bl	17244 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    eae2:	4641      	mov	r1, r8
    eae4:	a834      	add	r0, sp, #208	; 0xd0
    eae6:	f008 fc00 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eaea:	4640      	mov	r0, r8
    eaec:	f007 fa48 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    eaf0:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    eaf2:	4649      	mov	r1, r9
    eaf4:	a83a      	add	r0, sp, #232	; 0xe8
    eaf6:	f008 fbf8 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eafa:	4648      	mov	r0, r9
    eafc:	f007 fa40 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    eb00:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    eb02:	4639      	mov	r1, r7
    eb04:	a840      	add	r0, sp, #256	; 0x100
    eb06:	f008 fbf0 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eb0a:	4638      	mov	r0, r7
    eb0c:	f007 fe41 	bl	16792 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    eb10:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    eb12:	4629      	mov	r1, r5
    eb14:	a846      	add	r0, sp, #280	; 0x118
    eb16:	f008 fbe8 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    eb1a:	4628      	mov	r0, r5
    eb1c:	f007 fa36 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    eb20:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    eb22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb24:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    eb26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eb28:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    eb2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eb2c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    eb2e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    eb32:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    eb36:	9917      	ldr	r1, [sp, #92]	; 0x5c
    eb38:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    eb3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eb3c:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    eb3e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    eb40:	2b01      	cmp	r3, #1
    eb42:	dd33      	ble.n	ebac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    eb44:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    eb46:	2802      	cmp	r0, #2
    eb48:	d132      	bne.n	ebb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    eb4a:	4291      	cmp	r1, r2
    eb4c:	dc32      	bgt.n	ebb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    eb4e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    eb50:	2a00      	cmp	r2, #0
    eb52:	dd31      	ble.n	ebb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb54:	2a05      	cmp	r2, #5
    eb56:	dd31      	ble.n	ebbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    eb58:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    eb5a:	6812      	ldr	r2, [r2, #0]
    eb5c:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    eb5e:	9a46      	ldr	r2, [sp, #280]	; 0x118
    eb60:	2a01      	cmp	r2, #1
    eb62:	dd2e      	ble.n	ebc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb64:	2a05      	cmp	r2, #5
    eb66:	dd2e      	ble.n	ebc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    eb68:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    eb6a:	6852      	ldr	r2, [r2, #4]
    eb6c:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    eb6e:	1e9a      	subs	r2, r3, #2
    eb70:	d42c      	bmi.n	ebcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    eb72:	993a      	ldr	r1, [sp, #232]	; 0xe8
    eb74:	428a      	cmp	r2, r1
    eb76:	da2b      	bge.n	ebd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb78:	2905      	cmp	r1, #5
    eb7a:	dd2b      	ble.n	ebd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    eb7c:	993b      	ldr	r1, [sp, #236]	; 0xec
    eb7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    eb82:	9901      	ldr	r1, [sp, #4]
    eb84:	428a      	cmp	r2, r1
    eb86:	db2b      	blt.n	ebe0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    eb88:	3b01      	subs	r3, #1
    eb8a:	d42b      	bmi.n	ebe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    eb8c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    eb8e:	4293      	cmp	r3, r2
    eb90:	da2a      	bge.n	ebe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    eb92:	2a05      	cmp	r2, #5
    eb94:	dd2a      	ble.n	ebec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    eb96:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    eb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb9c:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    eb9e:	f04f 0a00 	mov.w	sl, #0
    eba2:	4653      	mov	r3, sl
    eba4:	46ca      	mov	sl, r9
    eba6:	46d9      	mov	r9, fp
    eba8:	469b      	mov	fp, r3
    ebaa:	e0ee      	b.n	ed8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    ebac:	f009 ff72 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    ebb0:	f009 ff70 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ebb4:	f009 ff6e 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebb8:	f009 ff6c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebbc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    ebbe:	920c      	str	r2, [sp, #48]	; 0x30
    ebc0:	e7cd      	b.n	eb5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    ebc2:	f009 ff67 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebc6:	9a48      	ldr	r2, [sp, #288]	; 0x120
    ebc8:	9201      	str	r2, [sp, #4]
    ebca:	e7d0      	b.n	eb6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    ebcc:	f009 ff62 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebd0:	f009 ff60 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebd4:	a94e      	add	r1, sp, #312	; 0x138
    ebd6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ebda:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    ebde:	e7d0      	b.n	eb82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    ebe0:	f009 ff58 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    ebe4:	f009 ff56 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ebe8:	f009 ff54 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ebec:	aa4e      	add	r2, sp, #312	; 0x138
    ebee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ebf2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    ebf6:	930d      	str	r3, [sp, #52]	; 0x34
    ebf8:	e7d1      	b.n	eb9e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    ebfa:	9b07      	ldr	r3, [sp, #28]
    ebfc:	b123      	cbz	r3, ec08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    ebfe:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    ec02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec04:	4413      	add	r3, r2
    ec06:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    ec08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    ec0a:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ec0e:	f1b9 0f00 	cmp.w	r9, #0
    ec12:	f340 808f 	ble.w	ed34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    ec16:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ec18:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ec1a:	4592      	cmp	sl, r2
    ec1c:	f000 808d 	beq.w	ed3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    ec20:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ec22:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ec24:	4653      	mov	r3, sl
    ec26:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    ec28:	fb02 f304 	mul.w	r3, r2, r4
    ec2c:	fb0a 3101 	mla	r1, sl, r1, r3
    ec30:	fba2 230a 	umull	r2, r3, r2, sl
    ec34:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ec36:	2a00      	cmp	r2, #0
    ec38:	f173 0100 	sbcs.w	r1, r3, #0
    ec3c:	f2c0 8084 	blt.w	ed48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    ec40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ec44:	1852      	adds	r2, r2, r1
    ec46:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ec4a:	4611      	mov	r1, r2
    ec4c:	461c      	mov	r4, r3
    ec4e:	2a00      	cmp	r2, #0
    ec50:	f173 0000 	sbcs.w	r0, r3, #0
    ec54:	db7a      	blt.n	ed4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    ec56:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ec58:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ec5c:	2f00      	cmp	r7, #0
    ec5e:	d17d      	bne.n	ed5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    ec60:	2e00      	cmp	r6, #0
    ec62:	db7e      	blt.n	ed62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    ec64:	2e1f      	cmp	r6, #31
    ec66:	f300 8083 	bgt.w	ed70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ec6a:	2701      	movs	r7, #1
    ec6c:	fa07 f006 	lsl.w	r0, r7, r6
    ec70:	3801      	subs	r0, #1
    ec72:	f007 f98f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec76:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ec78:	2000      	movs	r0, #0
    ec7a:	f007 f98b 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec7e:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    ec80:	4638      	mov	r0, r7
    ec82:	f007 f987 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ec86:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    ec88:	4641      	mov	r1, r8
    ec8a:	4620      	mov	r0, r4
    ec8c:	f007 f983 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ec90:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ec92:	4639      	mov	r1, r7
    ec94:	4640      	mov	r0, r8
    ec96:	f007 f980 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ec9a:	4680      	mov	r8, r0
    ec9c:	9902      	ldr	r1, [sp, #8]
    ec9e:	4620      	mov	r0, r4
    eca0:	f007 f987 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    eca4:	9f03      	ldr	r7, [sp, #12]
    eca6:	4639      	mov	r1, r7
    eca8:	f007 f975 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecac:	4601      	mov	r1, r0
    ecae:	4640      	mov	r0, r8
    ecb0:	f007 f975 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ecb4:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ecb6:	4631      	mov	r1, r6
    ecb8:	4620      	mov	r0, r4
    ecba:	f007 f96e 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ecbe:	4604      	mov	r4, r0
    ecc0:	4641      	mov	r1, r8
    ecc2:	9804      	ldr	r0, [sp, #16]
    ecc4:	f007 f97d 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ecc8:	4639      	mov	r1, r7
    ecca:	f007 f964 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ecce:	4601      	mov	r1, r0
    ecd0:	4620      	mov	r0, r4
    ecd2:	f007 f964 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    ecd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ecd8:	4418      	add	r0, r3
    ecda:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    ecdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ecde:	4298      	cmp	r0, r3
    ece0:	db4d      	blt.n	ed7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    ece2:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    ece4:	681b      	ldr	r3, [r3, #0]
    ece6:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    ece8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ecea:	4293      	cmp	r3, r2
    ecec:	dc49      	bgt.n	ed82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    ecee:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    ecf0:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    ecf2:	9b01      	ldr	r3, [sp, #4]
    ecf4:	fb03 530b 	mla	r3, r3, fp, r5
    ecf8:	9908      	ldr	r1, [sp, #32]
    ecfa:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ecfc:	3501      	adds	r5, #1
    ecfe:	9b01      	ldr	r3, [sp, #4]
    ed00:	429d      	cmp	r5, r3
    ed02:	da40      	bge.n	ed86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    ed04:	2300      	movs	r3, #0
    ed06:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ed08:	980d      	ldr	r0, [sp, #52]	; 0x34
    ed0a:	4283      	cmp	r3, r0
    ed0c:	f6bf af75 	bge.w	ebfa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    ed10:	fb00 320b 	mla	r2, r0, fp, r3
    ed14:	9905      	ldr	r1, [sp, #20]
    ed16:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    ed18:	fb00 3205 	mla	r2, r0, r5, r3
    ed1c:	9c06      	ldr	r4, [sp, #24]
    ed1e:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    ed20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ed22:	4422      	add	r2, r4
    ed24:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed26:	4421      	add	r1, r4
    ed28:	9c11      	ldr	r4, [sp, #68]	; 0x44
    ed2a:	fb01 4202 	mla	r2, r1, r2, r4
    ed2e:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    ed30:	3301      	adds	r3, #1
    ed32:	e7ea      	b.n	ed0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    ed34:	f1c9 0600 	rsb	r6, r9, #0
    ed38:	e76e      	b.n	ec18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ed3a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ed3e:	d001      	beq.n	ed44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    ed40:	2700      	movs	r7, #0
    ed42:	e76e      	b.n	ec22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    ed44:	2701      	movs	r7, #1
    ed46:	e76c      	b.n	ec22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ed48:	4921      	ldr	r1, [pc, #132]	; (edd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    ed4a:	e77b      	b.n	ec44 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ed4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ed50:	1851      	adds	r1, r2, r1
    ed52:	f04f 0400 	mov.w	r4, #0
    ed56:	eb43 0404 	adc.w	r4, r3, r4
    ed5a:	e77c      	b.n	ec56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ed5c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    ed60:	e77e      	b.n	ec60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    ed62:	4b1c      	ldr	r3, [pc, #112]	; (edd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    ed64:	4a1c      	ldr	r2, [pc, #112]	; (edd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ed66:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ed6a:	481c      	ldr	r0, [pc, #112]	; (eddc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ed6c:	f003 fe96 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    ed70:	4b1b      	ldr	r3, [pc, #108]	; (ede0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    ed72:	4a19      	ldr	r2, [pc, #100]	; (edd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    ed74:	f240 1167 	movw	r1, #359	; 0x167
    ed78:	4818      	ldr	r0, [pc, #96]	; (eddc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    ed7a:	f003 fe8f 	bl	12a9c <__assert_func>
	return __b;
    ed7e:	ab0f      	add	r3, sp, #60	; 0x3c
    ed80:	e7b0      	b.n	ece4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    ed82:	ab10      	add	r3, sp, #64	; 0x40
    ed84:	e7b4      	b.n	ecf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    ed86:	f10b 0b01 	add.w	fp, fp, #1
    ed8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed8c:	459b      	cmp	fp, r3
    ed8e:	da01      	bge.n	ed94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ed90:	2500      	movs	r5, #0
    ed92:	e7b4      	b.n	ecfe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    ed94:	9b46      	ldr	r3, [sp, #280]	; 0x118
    ed96:	2b05      	cmp	r3, #5
    ed98:	dd03      	ble.n	eda2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    ed9a:	9847      	ldr	r0, [sp, #284]	; 0x11c
    ed9c:	b108      	cbz	r0, eda2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    ed9e:	f009 fe64 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eda2:	9b40      	ldr	r3, [sp, #256]	; 0x100
    eda4:	2b05      	cmp	r3, #5
    eda6:	dd03      	ble.n	edb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    eda8:	9841      	ldr	r0, [sp, #260]	; 0x104
    edaa:	b108      	cbz	r0, edb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    edac:	f009 fe5d 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    edb0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    edb2:	2b05      	cmp	r3, #5
    edb4:	dd03      	ble.n	edbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    edb6:	983b      	ldr	r0, [sp, #236]	; 0xec
    edb8:	b108      	cbz	r0, edbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    edba:	f009 fe56 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    edbe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    edc0:	2b05      	cmp	r3, #5
    edc2:	dd03      	ble.n	edcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    edc4:	9835      	ldr	r0, [sp, #212]	; 0xd4
    edc6:	b108      	cbz	r0, edcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    edc8:	f009 fe4f 	bl	18a6a <_ZdaPv>
  return kTfLiteOk;
    edcc:	2000      	movs	r0, #0
      break;
    edce:	e559      	b.n	e884 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    edd0:	c0000001 	.word	0xc0000001
    edd4:	00034630 	.word	0x00034630
    edd8:	00034640 	.word	0x00034640
    eddc:	00034698 	.word	0x00034698
    ede0:	000346f4 	.word	0x000346f4

0000ede4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ede4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ede6:	4288      	cmp	r0, r1
    ede8:	d01e      	beq.n	ee28 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    edea:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    edec:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    edee:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    edf0:	fb01 f407 	mul.w	r4, r1, r7
    edf4:	fb00 4403 	mla	r4, r0, r3, r4
    edf8:	fba1 2300 	umull	r2, r3, r1, r0
    edfc:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    edfe:	2a00      	cmp	r2, #0
    ee00:	f173 0100 	sbcs.w	r1, r3, #0
    ee04:	db17      	blt.n	ee36 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    ee06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee0a:	1852      	adds	r2, r2, r1
    ee0c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ee10:	4611      	mov	r1, r2
    ee12:	4618      	mov	r0, r3
    ee14:	2a00      	cmp	r2, #0
    ee16:	f173 0400 	sbcs.w	r4, r3, #0
    ee1a:	db0e      	blt.n	ee3a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ee1c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ee1e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee22:	b995      	cbnz	r5, ee4a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    ee24:	bcf0      	pop	{r4, r5, r6, r7}
    ee26:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee28:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ee2c:	d001      	beq.n	ee32 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ee2e:	2500      	movs	r5, #0
    ee30:	e7dc      	b.n	edec <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    ee32:	2501      	movs	r5, #1
    ee34:	e7da      	b.n	edec <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee36:	4906      	ldr	r1, [pc, #24]	; (ee50 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    ee38:	e7e7      	b.n	ee0a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ee3e:	1851      	adds	r1, r2, r1
    ee40:	f04f 0000 	mov.w	r0, #0
    ee44:	eb43 0000 	adc.w	r0, r3, r0
    ee48:	e7e8      	b.n	ee1c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ee4e:	e7e9      	b.n	ee24 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    ee50:	c0000001 	.word	0xc0000001

0000ee54 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    ee54:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee56:	4288      	cmp	r0, r1
    ee58:	d01e      	beq.n	ee98 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    ee5a:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    ee5c:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    ee5e:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    ee60:	fb01 f407 	mul.w	r4, r1, r7
    ee64:	fb00 4403 	mla	r4, r0, r3, r4
    ee68:	fba1 2300 	umull	r2, r3, r1, r0
    ee6c:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ee6e:	2a00      	cmp	r2, #0
    ee70:	f173 0100 	sbcs.w	r1, r3, #0
    ee74:	db17      	blt.n	eea6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    ee76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ee7a:	1852      	adds	r2, r2, r1
    ee7c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ee80:	4611      	mov	r1, r2
    ee82:	4618      	mov	r0, r3
    ee84:	2a00      	cmp	r2, #0
    ee86:	f173 0400 	sbcs.w	r4, r3, #0
    ee8a:	db0e      	blt.n	eeaa <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ee8c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ee8e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ee92:	b995      	cbnz	r5, eeba <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    ee94:	bcf0      	pop	{r4, r5, r6, r7}
    ee96:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ee98:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ee9c:	d001      	beq.n	eea2 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ee9e:	2500      	movs	r5, #0
    eea0:	e7dc      	b.n	ee5c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    eea2:	2501      	movs	r5, #1
    eea4:	e7da      	b.n	ee5c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    eea6:	4906      	ldr	r1, [pc, #24]	; (eec0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    eea8:	e7e7      	b.n	ee7a <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    eeaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    eeae:	1851      	adds	r1, r2, r1
    eeb0:	f04f 0000 	mov.w	r0, #0
    eeb4:	eb43 0000 	adc.w	r0, r3, r0
    eeb8:	e7e8      	b.n	ee8c <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    eeba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eebe:	e7e9      	b.n	ee94 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    eec0:	c0000001 	.word	0xc0000001

0000eec4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    eec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eec8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    eeca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    eece:	f007 f861 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eed2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    eed4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    eed8:	f007 f85c 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eedc:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    eede:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    eee2:	f007 f857 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eee6:	4601      	mov	r1, r0
    eee8:	4620      	mov	r0, r4
    eeea:	f007 f86a 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    eeee:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    eef0:	480b      	ldr	r0, [pc, #44]	; (ef20 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    eef2:	f007 f84f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    eef6:	4601      	mov	r1, r0
    eef8:	4620      	mov	r0, r4
    eefa:	f007 f85a 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    eefe:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ef00:	2102      	movs	r1, #2
    ef02:	4620      	mov	r0, r4
    ef04:	f008 fa5a 	bl	173bc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ef08:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ef0a:	4641      	mov	r1, r8
    ef0c:	4638      	mov	r0, r7
    ef0e:	f008 fa76 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ef12:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ef14:	4631      	mov	r1, r6
    ef16:	4628      	mov	r0, r5
    ef18:	f008 fa71 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ef1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef20:	e0000001 	.word	0xe0000001

0000ef24 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ef24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef28:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ef2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ef2e:	f007 f831 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef32:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ef34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ef38:	f007 f82c 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef3c:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ef3e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    ef42:	f007 f827 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef46:	4601      	mov	r1, r0
    ef48:	4620      	mov	r0, r4
    ef4a:	f007 f83a 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ef4e:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ef50:	480b      	ldr	r0, [pc, #44]	; (ef80 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    ef52:	f007 f81f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef56:	4601      	mov	r1, r0
    ef58:	4620      	mov	r0, r4
    ef5a:	f007 f82a 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ef5e:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ef60:	2101      	movs	r1, #1
    ef62:	4620      	mov	r0, r4
    ef64:	f008 fa2a 	bl	173bc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ef68:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ef6a:	4641      	mov	r1, r8
    ef6c:	4638      	mov	r0, r7
    ef6e:	f008 fa46 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ef72:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ef74:	4631      	mov	r1, r6
    ef76:	4628      	mov	r0, r5
    ef78:	f008 fa41 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ef7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef80:	c0000001 	.word	0xc0000001

0000ef84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    ef84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef88:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    ef8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ef8e:	f007 f801 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ef92:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    ef94:	4620      	mov	r0, r4
    ef96:	f008 fa43 	bl	17420 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ef9a:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ef9c:	2000      	movs	r0, #0
    ef9e:	f006 fff9 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efa2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    efa4:	2000      	movs	r0, #0
    efa6:	f006 fff5 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efaa:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    efac:	2001      	movs	r0, #1
    efae:	f006 fff1 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    efb2:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    efb4:	4629      	mov	r1, r5
    efb6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    efba:	f006 ffec 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    efbe:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    efc0:	2101      	movs	r1, #1
    efc2:	4628      	mov	r0, r5
    efc4:	f006 ffe9 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    efc8:	4605      	mov	r5, r0
    efca:	4641      	mov	r1, r8
    efcc:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    efd0:	f006 ffef 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    efd4:	4621      	mov	r1, r4
    efd6:	f006 ffde 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    efda:	4601      	mov	r1, r0
    efdc:	4628      	mov	r0, r5
    efde:	f006 ffde 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    efe2:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    efe4:	2100      	movs	r1, #0
    efe6:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    efea:	f006 ffd6 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    efee:	4605      	mov	r5, r0
    eff0:	4641      	mov	r1, r8
    eff2:	4630      	mov	r0, r6
    eff4:	f006 ffe5 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    eff8:	4621      	mov	r1, r4
    effa:	f006 ffcc 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    effe:	4601      	mov	r1, r0
    f000:	4628      	mov	r0, r5
    f002:	f006 ffcc 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f006:	f006 ffc5 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f00a:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f00c:	2000      	movs	r0, #0
    f00e:	f006 ffc1 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f012:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f014:	2000      	movs	r0, #0
    f016:	f006 ffbd 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f01a:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    f01c:	2001      	movs	r0, #1
    f01e:	f006 ffb9 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f022:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f024:	f8df a0a8 	ldr.w	sl, [pc, #168]	; f0d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    f028:	4629      	mov	r1, r5
    f02a:	4650      	mov	r0, sl
    f02c:	f006 ffb3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f030:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f032:	2101      	movs	r1, #1
    f034:	4628      	mov	r0, r5
    f036:	f006 ffb0 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f03a:	4605      	mov	r5, r0
    f03c:	4649      	mov	r1, r9
    f03e:	4650      	mov	r0, sl
    f040:	f006 ffb7 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f044:	4621      	mov	r1, r4
    f046:	f006 ffa6 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f04a:	4601      	mov	r1, r0
    f04c:	4628      	mov	r0, r5
    f04e:	f006 ffa6 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f052:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    f054:	2100      	movs	r1, #0
    f056:	4650      	mov	r0, sl
    f058:	f006 ff9f 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f05c:	4605      	mov	r5, r0
    f05e:	4649      	mov	r1, r9
    f060:	4640      	mov	r0, r8
    f062:	f006 ffae 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f066:	4621      	mov	r1, r4
    f068:	f006 ff95 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f06c:	4601      	mov	r1, r0
    f06e:	4628      	mov	r0, r5
    f070:	f006 ff95 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f074:	f006 ff8e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f078:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    f07a:	4638      	mov	r0, r7
    f07c:	f7ff feb2 	bl	ede4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f080:	4601      	mov	r1, r0
    f082:	4630      	mov	r0, r6
    f084:	f008 f9e7 	bl	17456 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f088:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    f08a:	2600      	movs	r6, #0
    f08c:	e017      	b.n	f0be <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    f08e:	4621      	mov	r1, r4
    f090:	4638      	mov	r0, r7
    f092:	f7ff fea7 	bl	ede4 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f096:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    f098:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    f09c:	f006 ff7a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    f0a0:	4629      	mov	r1, r5
    f0a2:	f008 f9dd 	bl	17460 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f0a6:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    f0a8:	4620      	mov	r0, r4
    f0aa:	f7ff fed3 	bl	ee54 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f0ae:	f008 f9e2 	bl	17476 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    f0b2:	4601      	mov	r1, r0
    f0b4:	4620      	mov	r0, r4
    f0b6:	f008 f9ce 	bl	17456 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f0ba:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    f0bc:	3601      	adds	r6, #1
    f0be:	2e02      	cmp	r6, #2
    f0c0:	dde5      	ble.n	f08e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    f0c2:	4620      	mov	r0, r4
    f0c4:	f008 f9cb 	bl	1745e <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    f0c8:	f008 f9d9 	bl	1747e <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    f0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f0d0:	c3c3c3c4 	.word	0xc3c3c3c4

0000f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    f0d4:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    f0d6:	4288      	cmp	r0, r1
    f0d8:	d01e      	beq.n	f118 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    f0da:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    f0dc:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    f0de:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    f0e0:	fb01 f407 	mul.w	r4, r1, r7
    f0e4:	fb00 4403 	mla	r4, r0, r3, r4
    f0e8:	fba1 2300 	umull	r2, r3, r1, r0
    f0ec:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    f0ee:	2a00      	cmp	r2, #0
    f0f0:	f173 0100 	sbcs.w	r1, r3, #0
    f0f4:	db17      	blt.n	f126 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    f0f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    f0fa:	1852      	adds	r2, r2, r1
    f0fc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    f100:	4611      	mov	r1, r2
    f102:	4618      	mov	r0, r3
    f104:	2a00      	cmp	r2, #0
    f106:	f173 0400 	sbcs.w	r4, r3, #0
    f10a:	db0e      	blt.n	f12a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    f10c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    f10e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    f112:	b995      	cbnz	r5, f13a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    f114:	bcf0      	pop	{r4, r5, r6, r7}
    f116:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    f118:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    f11c:	d001      	beq.n	f122 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    f11e:	2500      	movs	r5, #0
    f120:	e7dc      	b.n	f0dc <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    f122:	2501      	movs	r5, #1
    f124:	e7da      	b.n	f0dc <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    f126:	4906      	ldr	r1, [pc, #24]	; (f140 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    f128:	e7e7      	b.n	f0fa <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    f12a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f12e:	1851      	adds	r1, r2, r1
    f130:	f04f 0000 	mov.w	r0, #0
    f134:	eb43 0000 	adc.w	r0, r3, r0
    f138:	e7e8      	b.n	f10c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    f13a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f13e:	e7e9      	b.n	f114 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    f140:	c0000001 	.word	0xc0000001

0000f144 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    f144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f148:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f14a:	2000      	movs	r0, #0
    f14c:	f006 ff22 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f150:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f152:	2000      	movs	r0, #0
    f154:	f006 ff1e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f158:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    f15a:	2001      	movs	r0, #1
    f15c:	f006 ff1a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f160:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f162:	f8df 9124 	ldr.w	r9, [pc, #292]	; f288 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    f166:	4629      	mov	r1, r5
    f168:	4648      	mov	r0, r9
    f16a:	f006 ff14 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f16e:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f170:	2101      	movs	r1, #1
    f172:	4628      	mov	r0, r5
    f174:	f006 ff11 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f178:	4605      	mov	r5, r0
    f17a:	4639      	mov	r1, r7
    f17c:	4648      	mov	r0, r9
    f17e:	f006 ff18 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f182:	4621      	mov	r1, r4
    f184:	f006 ff07 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f188:	4601      	mov	r1, r0
    f18a:	4628      	mov	r0, r5
    f18c:	f006 ff07 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f190:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    f192:	2100      	movs	r1, #0
    f194:	4648      	mov	r0, r9
    f196:	f006 ff00 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f19a:	4605      	mov	r5, r0
    f19c:	4639      	mov	r1, r7
    f19e:	4630      	mov	r0, r6
    f1a0:	f006 ff0f 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f1a4:	4621      	mov	r1, r4
    f1a6:	f006 fef6 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1aa:	4601      	mov	r1, r0
    f1ac:	4628      	mov	r0, r5
    f1ae:	f006 fef6 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f1b2:	f006 feef 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1b6:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f1b8:	2000      	movs	r0, #0
    f1ba:	f006 feeb 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1be:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f1c0:	2000      	movs	r0, #0
    f1c2:	f006 fee7 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1c6:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    f1c8:	2001      	movs	r0, #1
    f1ca:	f006 fee3 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f1ce:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    f1d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f28c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    f1d4:	4629      	mov	r1, r5
    f1d6:	4650      	mov	r0, sl
    f1d8:	f006 fedd 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1dc:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f1de:	2101      	movs	r1, #1
    f1e0:	4628      	mov	r0, r5
    f1e2:	f006 feda 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f1e6:	4605      	mov	r5, r0
    f1e8:	4649      	mov	r1, r9
    f1ea:	4650      	mov	r0, sl
    f1ec:	f006 fee1 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f1f0:	4621      	mov	r1, r4
    f1f2:	f006 fed0 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f1f6:	4601      	mov	r1, r0
    f1f8:	4628      	mov	r0, r5
    f1fa:	f006 fed0 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f1fe:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    f200:	2100      	movs	r1, #0
    f202:	4650      	mov	r0, sl
    f204:	f006 fec9 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f208:	4605      	mov	r5, r0
    f20a:	4649      	mov	r1, r9
    f20c:	4638      	mov	r0, r7
    f20e:	f006 fed8 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f212:	4621      	mov	r1, r4
    f214:	f006 febf 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f218:	4601      	mov	r1, r0
    f21a:	4628      	mov	r0, r5
    f21c:	f006 febf 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f220:	f006 feb8 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f224:	4607      	mov	r7, r0
    f226:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f22a:	f006 feb3 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f22e:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    f230:	4640      	mov	r0, r8
    f232:	f008 f92c 	bl	1748e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f236:	4604      	mov	r4, r0
  F x2 = x * x;
    f238:	4601      	mov	r1, r0
    f23a:	f7ff ff4b 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f23e:	4605      	mov	r5, r0
  F x3 = x2 * x;
    f240:	4621      	mov	r1, r4
    f242:	f7ff ff47 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f246:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    f248:	4629      	mov	r1, r5
    f24a:	4628      	mov	r0, r5
    f24c:	f7ff ff42 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    f250:	f008 f95c 	bl	1750c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    f254:	4641      	mov	r1, r8
    f256:	f008 f91a 	bl	1748e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f25a:	4639      	mov	r1, r7
    f25c:	f7ff ff3a 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f260:	4629      	mov	r1, r5
    f262:	f008 f914 	bl	1748e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f266:	f008 f916 	bl	17496 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    f26a:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    f26c:	4620      	mov	r0, r4
    f26e:	f008 f90e 	bl	1748e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f272:	4601      	mov	r1, r0
    f274:	4630      	mov	r0, r6
    f276:	f7ff ff2d 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f27a:	4601      	mov	r1, r0
    f27c:	4630      	mov	r0, r6
    f27e:	f008 f94d 	bl	1751c <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f286:	bf00      	nop
    f288:	70f5a894 	.word	0x70f5a894
    f28c:	2aaaaaab 	.word	0x2aaaaaab

0000f290 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    f290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f294:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    f296:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    f29a:	f006 fe7b 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f29e:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    f2a0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f2a4:	f006 fe76 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2a8:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    f2aa:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    f2ae:	f006 fe71 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2b2:	4601      	mov	r1, r0
    f2b4:	4620      	mov	r0, r4
    f2b6:	f006 fe84 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f2ba:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    f2bc:	480b      	ldr	r0, [pc, #44]	; (f2ec <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    f2be:	f006 fe69 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2c2:	4601      	mov	r1, r0
    f2c4:	4620      	mov	r0, r4
    f2c6:	f006 fe74 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f2ca:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    f2cc:	2105      	movs	r1, #5
    f2ce:	4620      	mov	r0, r4
    f2d0:	f008 f874 	bl	173bc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    f2d4:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    f2d6:	4641      	mov	r1, r8
    f2d8:	4638      	mov	r0, r7
    f2da:	f008 f890 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    f2de:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    f2e0:	4631      	mov	r1, r6
    f2e2:	4628      	mov	r0, r5
    f2e4:	f008 f88b 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    f2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ec:	fc000001 	.word	0xfc000001

0000f2f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    f2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2f4:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    f2f6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    f2fa:	f006 fe4b 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f2fe:	4604      	mov	r4, r0
    f300:	2001      	movs	r0, #1
    f302:	f006 fe47 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f306:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    f308:	4620      	mov	r0, r4
    f30a:	f008 f90f 	bl	1752c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f30e:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    f310:	4630      	mov	r0, r6
    f312:	f008 f90f 	bl	17534 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f316:	4621      	mov	r1, r4
    f318:	f008 f908 	bl	1752c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f31c:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    f31e:	f008 f94d 	bl	175bc <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    f322:	f7ff ff0f 	bl	f144 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    f326:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    f328:	4631      	mov	r1, r6
    f32a:	4628      	mov	r0, r5
    f32c:	f008 f8fe 	bl	1752c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    f330:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f332:	2000      	movs	r0, #0
    f334:	f006 fe2e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f338:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f33a:	2000      	movs	r0, #0
    f33c:	f006 fe2a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f340:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f342:	2001      	movs	r0, #1
    f344:	f006 fe26 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f348:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f34a:	f8df b428 	ldr.w	fp, [pc, #1064]	; f774 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    f34e:	4641      	mov	r1, r8
    f350:	4658      	mov	r0, fp
    f352:	f006 fe20 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f356:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f358:	2101      	movs	r1, #1
    f35a:	4640      	mov	r0, r8
    f35c:	f006 fe1d 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f360:	4680      	mov	r8, r0
    f362:	4651      	mov	r1, sl
    f364:	4658      	mov	r0, fp
    f366:	f006 fe24 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f36a:	4639      	mov	r1, r7
    f36c:	f006 fe13 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f370:	4601      	mov	r1, r0
    f372:	4640      	mov	r0, r8
    f374:	f006 fe13 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f378:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f37a:	2100      	movs	r1, #0
    f37c:	4658      	mov	r0, fp
    f37e:	f006 fe0c 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f382:	4680      	mov	r8, r0
    f384:	4651      	mov	r1, sl
    f386:	4648      	mov	r0, r9
    f388:	f006 fe1b 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f38c:	4639      	mov	r1, r7
    f38e:	f006 fe02 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f392:	4601      	mov	r1, r0
    f394:	4640      	mov	r0, r8
    f396:	f006 fe02 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f39a:	f006 fdfb 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f39e:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    f3a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    f3a4:	f006 fdf6 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3a8:	4601      	mov	r1, r0
    f3aa:	4628      	mov	r0, r5
    f3ac:	f006 fdf3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3b0:	f006 fdf9 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f3b4:	4607      	mov	r7, r0
    f3b6:	4641      	mov	r1, r8
    f3b8:	4620      	mov	r0, r4
    f3ba:	f7ff fe8b 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f3be:	4601      	mov	r1, r0
    f3c0:	4622      	mov	r2, r4
    f3c2:	4638      	mov	r0, r7
    f3c4:	f008 f85f 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f3c8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f3ca:	2000      	movs	r0, #0
    f3cc:	f006 fde2 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3d0:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f3d2:	2000      	movs	r0, #0
    f3d4:	f006 fdde 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3d8:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f3da:	2001      	movs	r0, #1
    f3dc:	f006 fdda 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f3e0:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f3e2:	f8df b394 	ldr.w	fp, [pc, #916]	; f778 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    f3e6:	4641      	mov	r1, r8
    f3e8:	4658      	mov	r0, fp
    f3ea:	f006 fdd4 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f3ee:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f3f0:	2101      	movs	r1, #1
    f3f2:	4640      	mov	r0, r8
    f3f4:	f006 fdd1 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f3f8:	4680      	mov	r8, r0
    f3fa:	4651      	mov	r1, sl
    f3fc:	4658      	mov	r0, fp
    f3fe:	f006 fdd8 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f402:	4639      	mov	r1, r7
    f404:	f006 fdc7 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f408:	4601      	mov	r1, r0
    f40a:	4640      	mov	r0, r8
    f40c:	f006 fdc7 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f410:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f412:	2100      	movs	r1, #0
    f414:	4658      	mov	r0, fp
    f416:	f006 fdc0 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f41a:	4680      	mov	r8, r0
    f41c:	4651      	mov	r1, sl
    f41e:	4648      	mov	r0, r9
    f420:	f006 fdcf 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f424:	4639      	mov	r1, r7
    f426:	f006 fdb6 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f42a:	4601      	mov	r1, r0
    f42c:	4640      	mov	r0, r8
    f42e:	f006 fdb6 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f432:	f006 fdaf 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f436:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    f438:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    f43c:	f006 fdaa 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f440:	4601      	mov	r1, r0
    f442:	4628      	mov	r0, r5
    f444:	f006 fda7 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f448:	f006 fdad 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f44c:	4607      	mov	r7, r0
    f44e:	4641      	mov	r1, r8
    f450:	4620      	mov	r0, r4
    f452:	f7ff fe3f 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f456:	4601      	mov	r1, r0
    f458:	4622      	mov	r2, r4
    f45a:	4638      	mov	r0, r7
    f45c:	f008 f813 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f460:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f462:	2000      	movs	r0, #0
    f464:	f006 fd96 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f468:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f46a:	2000      	movs	r0, #0
    f46c:	f006 fd92 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f470:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f472:	2001      	movs	r0, #1
    f474:	f006 fd8e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f478:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f47a:	f8df b300 	ldr.w	fp, [pc, #768]	; f77c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    f47e:	4641      	mov	r1, r8
    f480:	4658      	mov	r0, fp
    f482:	f006 fd88 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f486:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f488:	2101      	movs	r1, #1
    f48a:	4640      	mov	r0, r8
    f48c:	f006 fd85 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f490:	4680      	mov	r8, r0
    f492:	4651      	mov	r1, sl
    f494:	4658      	mov	r0, fp
    f496:	f006 fd8c 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f49a:	4639      	mov	r1, r7
    f49c:	f006 fd7b 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4a0:	4601      	mov	r1, r0
    f4a2:	4640      	mov	r0, r8
    f4a4:	f006 fd7b 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f4a8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f4aa:	2100      	movs	r1, #0
    f4ac:	4658      	mov	r0, fp
    f4ae:	f006 fd74 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f4b2:	4680      	mov	r8, r0
    f4b4:	4651      	mov	r1, sl
    f4b6:	4648      	mov	r0, r9
    f4b8:	f006 fd83 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f4bc:	4639      	mov	r1, r7
    f4be:	f006 fd6a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4c2:	4601      	mov	r1, r0
    f4c4:	4640      	mov	r0, r8
    f4c6:	f006 fd6a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f4ca:	f006 fd63 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f4ce:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    f4d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    f4d4:	f006 fd5e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f4d8:	4601      	mov	r1, r0
    f4da:	4628      	mov	r0, r5
    f4dc:	f006 fd5b 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f4e0:	f006 fd61 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f4e4:	4607      	mov	r7, r0
    f4e6:	4641      	mov	r1, r8
    f4e8:	4620      	mov	r0, r4
    f4ea:	f7ff fdf3 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f4ee:	4601      	mov	r1, r0
    f4f0:	4622      	mov	r2, r4
    f4f2:	4638      	mov	r0, r7
    f4f4:	f007 ffc7 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f4f8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f4fa:	2000      	movs	r0, #0
    f4fc:	f006 fd4a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f500:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f502:	2000      	movs	r0, #0
    f504:	f006 fd46 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f508:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f50a:	2001      	movs	r0, #1
    f50c:	f006 fd42 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f510:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f512:	f8df b26c 	ldr.w	fp, [pc, #620]	; f780 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    f516:	4641      	mov	r1, r8
    f518:	4658      	mov	r0, fp
    f51a:	f006 fd3c 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f51e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f520:	2101      	movs	r1, #1
    f522:	4640      	mov	r0, r8
    f524:	f006 fd39 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f528:	4680      	mov	r8, r0
    f52a:	4651      	mov	r1, sl
    f52c:	4658      	mov	r0, fp
    f52e:	f006 fd40 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f532:	4639      	mov	r1, r7
    f534:	f006 fd2f 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f538:	4601      	mov	r1, r0
    f53a:	4640      	mov	r0, r8
    f53c:	f006 fd2f 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f540:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f542:	2100      	movs	r1, #0
    f544:	4658      	mov	r0, fp
    f546:	f006 fd28 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f54a:	4680      	mov	r8, r0
    f54c:	4651      	mov	r1, sl
    f54e:	4648      	mov	r0, r9
    f550:	f006 fd37 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f554:	4639      	mov	r1, r7
    f556:	f006 fd1e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f55a:	4601      	mov	r1, r0
    f55c:	4640      	mov	r0, r8
    f55e:	f006 fd1e 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f562:	f006 fd17 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f566:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    f568:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    f56c:	f006 fd12 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f570:	4601      	mov	r1, r0
    f572:	4628      	mov	r0, r5
    f574:	f006 fd0f 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f578:	f006 fd15 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f57c:	4607      	mov	r7, r0
    f57e:	4641      	mov	r1, r8
    f580:	4620      	mov	r0, r4
    f582:	f7ff fda7 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f586:	4601      	mov	r1, r0
    f588:	4622      	mov	r2, r4
    f58a:	4638      	mov	r0, r7
    f58c:	f007 ff7b 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f590:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f592:	2000      	movs	r0, #0
    f594:	f006 fcfe 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f598:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f59a:	2000      	movs	r0, #0
    f59c:	f006 fcfa 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5a0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f5a2:	2001      	movs	r0, #1
    f5a4:	f006 fcf6 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5a8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f5aa:	f8df b1d8 	ldr.w	fp, [pc, #472]	; f784 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    f5ae:	4641      	mov	r1, r8
    f5b0:	4658      	mov	r0, fp
    f5b2:	f006 fcf0 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f5b6:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f5b8:	2101      	movs	r1, #1
    f5ba:	4640      	mov	r0, r8
    f5bc:	f006 fced 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f5c0:	4680      	mov	r8, r0
    f5c2:	4651      	mov	r1, sl
    f5c4:	4658      	mov	r0, fp
    f5c6:	f006 fcf4 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f5ca:	4639      	mov	r1, r7
    f5cc:	f006 fce3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f5d0:	4601      	mov	r1, r0
    f5d2:	4640      	mov	r0, r8
    f5d4:	f006 fce3 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f5d8:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f5da:	2100      	movs	r1, #0
    f5dc:	4658      	mov	r0, fp
    f5de:	f006 fcdc 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f5e2:	4680      	mov	r8, r0
    f5e4:	4651      	mov	r1, sl
    f5e6:	4648      	mov	r0, r9
    f5e8:	f006 fceb 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f5ec:	4639      	mov	r1, r7
    f5ee:	f006 fcd2 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f5f2:	4601      	mov	r1, r0
    f5f4:	4640      	mov	r0, r8
    f5f6:	f006 fcd2 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f5fa:	f006 fccb 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f5fe:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    f600:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    f604:	f006 fcc6 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f608:	4601      	mov	r1, r0
    f60a:	4628      	mov	r0, r5
    f60c:	f006 fcc3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f610:	f006 fcc9 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f614:	4607      	mov	r7, r0
    f616:	4641      	mov	r1, r8
    f618:	4620      	mov	r0, r4
    f61a:	f7ff fd5b 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f61e:	4601      	mov	r1, r0
    f620:	4622      	mov	r2, r4
    f622:	4638      	mov	r0, r7
    f624:	f007 ff2f 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f628:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f62a:	2000      	movs	r0, #0
    f62c:	f006 fcb2 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f630:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f632:	2000      	movs	r0, #0
    f634:	f006 fcae 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f638:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f63a:	2001      	movs	r0, #1
    f63c:	f006 fcaa 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f640:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f642:	f8df b144 	ldr.w	fp, [pc, #324]	; f788 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    f646:	4641      	mov	r1, r8
    f648:	4658      	mov	r0, fp
    f64a:	f006 fca4 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f64e:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f650:	2101      	movs	r1, #1
    f652:	4640      	mov	r0, r8
    f654:	f006 fca1 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f658:	4680      	mov	r8, r0
    f65a:	4651      	mov	r1, sl
    f65c:	4658      	mov	r0, fp
    f65e:	f006 fca8 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f662:	4639      	mov	r1, r7
    f664:	f006 fc97 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f668:	4601      	mov	r1, r0
    f66a:	4640      	mov	r0, r8
    f66c:	f006 fc97 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f670:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f672:	2100      	movs	r1, #0
    f674:	4658      	mov	r0, fp
    f676:	f006 fc90 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f67a:	4680      	mov	r8, r0
    f67c:	4651      	mov	r1, sl
    f67e:	4648      	mov	r0, r9
    f680:	f006 fc9f 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f684:	4639      	mov	r1, r7
    f686:	f006 fc86 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f68a:	4601      	mov	r1, r0
    f68c:	4640      	mov	r0, r8
    f68e:	f006 fc86 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f692:	f006 fc7f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f696:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    f698:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    f69c:	f006 fc7a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6a0:	4601      	mov	r1, r0
    f6a2:	4628      	mov	r0, r5
    f6a4:	f006 fc77 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f6a8:	f006 fc7d 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f6ac:	4607      	mov	r7, r0
    f6ae:	4641      	mov	r1, r8
    f6b0:	4620      	mov	r0, r4
    f6b2:	f7ff fd0f 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f6b6:	4601      	mov	r1, r0
    f6b8:	4622      	mov	r2, r4
    f6ba:	4638      	mov	r0, r7
    f6bc:	f007 fee3 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f6c0:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    f6c2:	2000      	movs	r0, #0
    f6c4:	f006 fc66 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6c8:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    f6ca:	2000      	movs	r0, #0
    f6cc:	f006 fc62 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6d0:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    f6d2:	2001      	movs	r0, #1
    f6d4:	f006 fc5e 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f6d8:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    f6da:	4641      	mov	r1, r8
    f6dc:	20f2      	movs	r0, #242	; 0xf2
    f6de:	f006 fc5a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f6e2:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    f6e4:	2101      	movs	r1, #1
    f6e6:	4640      	mov	r0, r8
    f6e8:	f006 fc57 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f6ec:	4680      	mov	r8, r0
    f6ee:	4651      	mov	r1, sl
    f6f0:	20f2      	movs	r0, #242	; 0xf2
    f6f2:	f006 fc5e 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    f6f6:	4639      	mov	r1, r7
    f6f8:	f006 fc4d 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f6fc:	4601      	mov	r1, r0
    f6fe:	4640      	mov	r0, r8
    f700:	f006 fc4d 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    f704:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    f706:	2100      	movs	r1, #0
    f708:	20f2      	movs	r0, #242	; 0xf2
    f70a:	f006 fc46 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    f70e:	4680      	mov	r8, r0
    f710:	4651      	mov	r1, sl
    f712:	4648      	mov	r0, r9
    f714:	f006 fc55 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    f718:	4639      	mov	r1, r7
    f71a:	f006 fc3c 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f71e:	4601      	mov	r1, r0
    f720:	4640      	mov	r0, r8
    f722:	f006 fc3c 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    f726:	f006 fc35 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f72a:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    f72c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f730:	f006 fc30 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f734:	4601      	mov	r1, r0
    f736:	4628      	mov	r0, r5
    f738:	f006 fc2d 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    f73c:	f006 fc33 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    f740:	4605      	mov	r5, r0
    f742:	4639      	mov	r1, r7
    f744:	4620      	mov	r0, r4
    f746:	f7ff fcc5 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    f74a:	4601      	mov	r1, r0
    f74c:	4622      	mov	r2, r4
    f74e:	4628      	mov	r0, r5
    f750:	f007 fe99 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    f754:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f756:	4630      	mov	r0, r6
    f758:	f007 ff2c 	bl	175b4 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    f75c:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    f75e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f762:	f006 fc17 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    f766:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    f768:	4622      	mov	r2, r4
    f76a:	4628      	mov	r0, r5
    f76c:	f007 fe8b 	bl	17486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    f770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f774:	63afbe7b 	.word	0x63afbe7b
    f778:	4da2cbf2 	.word	0x4da2cbf2
    f77c:	2f16ac6c 	.word	0x2f16ac6c
    f780:	1152aaa4 	.word	0x1152aaa4
    f784:	02582ab7 	.word	0x02582ab7
    f788:	000afe11 	.word	0x000afe11

0000f78c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    f78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f790:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f792:	694f      	ldr	r7, [r1, #20]
    f794:	b35f      	cbz	r7, f7ee <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f796:	4604      	mov	r4, r0
    f798:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f79a:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f79e:	f1b8 0f00 	cmp.w	r8, #0
    f7a2:	d026      	beq.n	f7f2 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f7a4:	4b23      	ldr	r3, [pc, #140]	; (f834 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f7a6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f7a8:	b328      	cbz	r0, f7f6 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f7aa:	b335      	cbz	r5, f7fa <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f7ac:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f7ae:	682b      	ldr	r3, [r5, #0]
    f7b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f7b4:	6859      	ldr	r1, [r3, #4]
    f7b6:	4790      	blx	r2
    f7b8:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f7ba:	4b1f      	ldr	r3, [pc, #124]	; (f838 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f7bc:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f7be:	b1f4      	cbz	r4, f7fe <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f7c0:	b1fd      	cbz	r5, f802 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f7c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f7c4:	686b      	ldr	r3, [r5, #4]
    f7c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f7ca:	6859      	ldr	r1, [r3, #4]
    f7cc:	4620      	mov	r0, r4
    f7ce:	4790      	blx	r2

  switch (input->type) {
    f7d0:	7a33      	ldrb	r3, [r6, #8]
    f7d2:	2b01      	cmp	r3, #1
    f7d4:	d017      	beq.n	f806 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f7d6:	2b09      	cmp	r3, #9
    f7d8:	d021      	beq.n	f81e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    f7da:	6965      	ldr	r5, [r4, #20]
    f7dc:	4618      	mov	r0, r3
    f7de:	f7f9 fdd5 	bl	938c <TfLiteTypeGetName>
    f7e2:	4602      	mov	r2, r0
    f7e4:	4915      	ldr	r1, [pc, #84]	; (f83c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f7e6:	4620      	mov	r0, r4
    f7e8:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    f7ea:	2001      	movs	r0, #1
    f7ec:	e014      	b.n	f818 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f7ee:	f009 f951 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f7f2:	f009 f94f 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    f7f6:	f009 f94d 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    f7fa:	f009 f94b 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    f7fe:	f009 f949 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    f802:	f009 f947 	bl	18a94 <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    f806:	9001      	str	r0, [sp, #4]
    f808:	9600      	str	r6, [sp, #0]
    f80a:	4643      	mov	r3, r8
    f80c:	463a      	mov	r2, r7
    f80e:	4629      	mov	r1, r5
    f810:	4620      	mov	r0, r4
    f812:	f008 f902 	bl	17a1a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    f816:	2000      	movs	r0, #0
}
    f818:	b002      	add	sp, #8
    f81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    f81e:	9001      	str	r0, [sp, #4]
    f820:	9600      	str	r6, [sp, #0]
    f822:	4643      	mov	r3, r8
    f824:	463a      	mov	r2, r7
    f826:	4629      	mov	r1, r5
    f828:	4620      	mov	r0, r4
    f82a:	f008 fc93 	bl	18154 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    f82e:	2000      	movs	r0, #0
      break;
    f830:	e7f2      	b.n	f818 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f832:	bf00      	nop
    f834:	00034d30 	.word	0x00034d30
    f838:	00034d34 	.word	0x00034d34
    f83c:	00034c88 	.word	0x00034c88

0000f840 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    f840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f844:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f846:	694f      	ldr	r7, [r1, #20]
    f848:	b35f      	cbz	r7, f8a2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    f84a:	4604      	mov	r4, r0
    f84c:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    f84e:	f8d1 8010 	ldr.w	r8, [r1, #16]
    f852:	f1b8 0f00 	cmp.w	r8, #0
    f856:	d026      	beq.n	f8a6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    f858:	4b23      	ldr	r3, [pc, #140]	; (f8e8 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    f85a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f85c:	b328      	cbz	r0, f8aa <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    f85e:	b335      	cbz	r5, f8ae <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    f860:	6d42      	ldr	r2, [r0, #84]	; 0x54
    f862:	682b      	ldr	r3, [r5, #0]
    f864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f868:	6859      	ldr	r1, [r3, #4]
    f86a:	4790      	blx	r2
    f86c:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    f86e:	4b1f      	ldr	r3, [pc, #124]	; (f8ec <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    f870:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    f872:	b1f4      	cbz	r4, f8b2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    f874:	b1fd      	cbz	r5, f8b6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    f876:	6d62      	ldr	r2, [r4, #84]	; 0x54
    f878:	686b      	ldr	r3, [r5, #4]
    f87a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    f87e:	6859      	ldr	r1, [r3, #4]
    f880:	4620      	mov	r0, r4
    f882:	4790      	blx	r2
  switch (input->type) {
    f884:	7a33      	ldrb	r3, [r6, #8]
    f886:	2b01      	cmp	r3, #1
    f888:	d017      	beq.n	f8ba <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    f88a:	2b09      	cmp	r3, #9
    f88c:	d021      	beq.n	f8d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    f88e:	6965      	ldr	r5, [r4, #20]
    f890:	4618      	mov	r0, r3
    f892:	f7f9 fd7b 	bl	938c <TfLiteTypeGetName>
    f896:	4602      	mov	r2, r0
    f898:	4915      	ldr	r1, [pc, #84]	; (f8f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    f89a:	4620      	mov	r0, r4
    f89c:	47a8      	blx	r5
      return kTfLiteError;
    f89e:	2001      	movs	r0, #1
    f8a0:	e014      	b.n	f8cc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f8a2:	f009 f8f7 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f8a6:	f009 f8f5 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    f8aa:	f009 f8f3 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    f8ae:	f009 f8f1 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
    f8b2:	f009 f8ef 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
    f8b6:	f009 f8ed 	bl	18a94 <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    f8ba:	9001      	str	r0, [sp, #4]
    f8bc:	9600      	str	r6, [sp, #0]
    f8be:	4643      	mov	r3, r8
    f8c0:	463a      	mov	r2, r7
    f8c2:	4629      	mov	r1, r5
    f8c4:	4620      	mov	r0, r4
    f8c6:	f007 fed7 	bl	17678 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    f8ca:	2000      	movs	r0, #0
}
    f8cc:	b002      	add	sp, #8
    f8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    f8d2:	9001      	str	r0, [sp, #4]
    f8d4:	9600      	str	r6, [sp, #0]
    f8d6:	4643      	mov	r3, r8
    f8d8:	463a      	mov	r2, r7
    f8da:	4629      	mov	r1, r5
    f8dc:	4620      	mov	r0, r4
    f8de:	f008 fa6a 	bl	17db6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    f8e2:	2000      	movs	r0, #0
      break;
    f8e4:	e7f2      	b.n	f8cc <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    f8e6:	bf00      	nop
    f8e8:	00034d30 	.word	0x00034d30
    f8ec:	00034d34 	.word	0x00034d34
    f8f0:	00034cac 	.word	0x00034cac

0000f8f4 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    f8f4:	b470      	push	{r4, r5, r6}
    f8f6:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    f8f8:	4604      	mov	r4, r0
    f8fa:	4d05      	ldr	r5, [pc, #20]	; (f910 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    f8fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f8fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f900:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    f908:	4630      	mov	r0, r6
    f90a:	bc70      	pop	{r4, r5, r6}
    f90c:	4770      	bx	lr
    f90e:	bf00      	nop
    f910:	00019ab0 	.word	0x00019ab0

0000f914 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    f914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f918:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f91a:	694f      	ldr	r7, [r1, #20]
    f91c:	b34f      	cbz	r7, f972 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    f91e:	4605      	mov	r5, r0
    f920:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    f922:	690e      	ldr	r6, [r1, #16]
    f924:	b33e      	cbz	r6, f976 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    f926:	2200      	movs	r2, #0
    f928:	f006 fa58 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f92c:	4680      	mov	r8, r0
    f92e:	b320      	cbz	r0, f97a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    f930:	2200      	movs	r2, #0
    f932:	4621      	mov	r1, r4
    f934:	4628      	mov	r0, r5
    f936:	f006 fa70 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f93a:	4681      	mov	r9, r0
    f93c:	b350      	cbz	r0, f994 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    f93e:	9600      	str	r6, [sp, #0]
    f940:	4603      	mov	r3, r0
    f942:	4642      	mov	r2, r8
    f944:	4639      	mov	r1, r7
    f946:	4628      	mov	r0, r5
    f948:	f007 fe44 	bl	175d4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    f94c:	4604      	mov	r4, r0
    f94e:	b9e8      	cbnz	r0, f98c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    f950:	f898 3000 	ldrb.w	r3, [r8]
    f954:	2b01      	cmp	r3, #1
    f956:	d027      	beq.n	f9a8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    f958:	2b09      	cmp	r3, #9
    f95a:	d117      	bne.n	f98c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    f95c:	7d39      	ldrb	r1, [r7, #20]
    f95e:	f106 0314 	add.w	r3, r6, #20
    f962:	9300      	str	r3, [sp, #0]
    f964:	f106 0310 	add.w	r3, r6, #16
    f968:	464a      	mov	r2, r9
    f96a:	4628      	mov	r0, r5
    f96c:	f7f9 ff52 	bl	9814 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    f970:	e00c      	b.n	f98c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    f972:	f009 f88f 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    f976:	f009 f88d 	bl	18a94 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    f97a:	696c      	ldr	r4, [r5, #20]
    f97c:	4b0e      	ldr	r3, [pc, #56]	; (f9b8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    f97e:	9300      	str	r3, [sp, #0]
    f980:	233a      	movs	r3, #58	; 0x3a
    f982:	4a0e      	ldr	r2, [pc, #56]	; (f9bc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f984:	490e      	ldr	r1, [pc, #56]	; (f9c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f986:	4628      	mov	r0, r5
    f988:	47a0      	blx	r4
    f98a:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    f98c:	4620      	mov	r0, r4
    f98e:	b003      	add	sp, #12
    f990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    f994:	696c      	ldr	r4, [r5, #20]
    f996:	4b0b      	ldr	r3, [pc, #44]	; (f9c4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    f998:	9300      	str	r3, [sp, #0]
    f99a:	233c      	movs	r3, #60	; 0x3c
    f99c:	4a07      	ldr	r2, [pc, #28]	; (f9bc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    f99e:	4908      	ldr	r1, [pc, #32]	; (f9c0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    f9a0:	4628      	mov	r0, r5
    f9a2:	47a0      	blx	r4
    f9a4:	2401      	movs	r4, #1
    f9a6:	e7f1      	b.n	f98c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    f9a8:	f106 021c 	add.w	r2, r6, #28
    f9ac:	f106 0118 	add.w	r1, r6, #24
    f9b0:	7d38      	ldrb	r0, [r7, #20]
    f9b2:	f7fa ff39 	bl	a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    f9b6:	e7e9      	b.n	f98c <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    f9b8:	000349b0 	.word	0x000349b0
    f9bc:	00034cd8 	.word	0x00034cd8
    f9c0:	00033f14 	.word	0x00033f14
    f9c4:	0003461c 	.word	0x0003461c

0000f9c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9cc:	b084      	sub	sp, #16
    f9ce:	4604      	mov	r4, r0
    f9d0:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    f9d2:	2200      	movs	r2, #0
    f9d4:	f006 fa02 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    f9d8:	b308      	cbz	r0, fa1e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    f9da:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    f9dc:	2200      	movs	r2, #0
    f9de:	4639      	mov	r1, r7
    f9e0:	4620      	mov	r0, r4
    f9e2:	f006 fa1a 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    f9e6:	4606      	mov	r6, r0
    f9e8:	b328      	cbz	r0, fa36 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    f9ea:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    f9ee:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    f9f2:	2201      	movs	r2, #1
    f9f4:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    f9f6:	f8d8 1000 	ldr.w	r1, [r8]
    f9fa:	4561      	cmp	r1, ip
    f9fc:	dd25      	ble.n	fa4a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    f9fe:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    fa02:	f8d1 e004 	ldr.w	lr, [r1, #4]
    fa06:	4670      	mov	r0, lr
    fa08:	17c1      	asrs	r1, r0, #31
    fa0a:	fb02 f101 	mul.w	r1, r2, r1
    fa0e:	fb0e 1103 	mla	r1, lr, r3, r1
    fa12:	fba2 230e 	umull	r2, r3, r2, lr
    fa16:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    fa18:	f10c 0c01 	add.w	ip, ip, #1
    fa1c:	e7eb      	b.n	f9f6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    fa1e:	6965      	ldr	r5, [r4, #20]
    fa20:	4b3e      	ldr	r3, [pc, #248]	; (fb1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    fa22:	9300      	str	r3, [sp, #0]
    fa24:	2323      	movs	r3, #35	; 0x23
    fa26:	4a3e      	ldr	r2, [pc, #248]	; (fb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa28:	493e      	ldr	r1, [pc, #248]	; (fb24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    fa2a:	4620      	mov	r0, r4
    fa2c:	47a8      	blx	r5
    fa2e:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    fa30:	b004      	add	sp, #16
    fa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    fa36:	6965      	ldr	r5, [r4, #20]
    fa38:	4b3b      	ldr	r3, [pc, #236]	; (fb28 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    fa3a:	9300      	str	r3, [sp, #0]
    fa3c:	2325      	movs	r3, #37	; 0x25
    fa3e:	4a38      	ldr	r2, [pc, #224]	; (fb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa40:	4938      	ldr	r1, [pc, #224]	; (fb24 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    fa42:	4620      	mov	r0, r4
    fa44:	47a8      	blx	r5
    fa46:	2001      	movs	r0, #1
    fa48:	e7f2      	b.n	fa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    fa4a:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    fa4c:	683b      	ldr	r3, [r7, #0]
    fa4e:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa50:	2b01      	cmp	r3, #1
    fa52:	d004      	beq.n	fa5e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    fa54:	2300      	movs	r3, #0
  int stretch_dim = -1;
    fa56:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    fa5a:	2701      	movs	r7, #1
    fa5c:	e01b      	b.n	fa96 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa5e:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    fa60:	2b01      	cmp	r3, #1
    fa62:	d1f7      	bne.n	fa54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    fa64:	6843      	ldr	r3, [r0, #4]
    fa66:	2b00      	cmp	r3, #0
    fa68:	d1f4      	bne.n	fa54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    fa6a:	6003      	str	r3, [r0, #0]
    fa6c:	e7f2      	b.n	fa54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    fa6e:	6965      	ldr	r5, [r4, #20]
    fa70:	f04f 33ff 	mov.w	r3, #4294967295
    fa74:	9303      	str	r3, [sp, #12]
    fa76:	f8cd c008 	str.w	ip, [sp, #8]
    fa7a:	4b2c      	ldr	r3, [pc, #176]	; (fb2c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    fa7c:	9301      	str	r3, [sp, #4]
    fa7e:	4b2c      	ldr	r3, [pc, #176]	; (fb30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    fa80:	9300      	str	r3, [sp, #0]
    fa82:	233a      	movs	r3, #58	; 0x3a
    fa84:	4a26      	ldr	r2, [pc, #152]	; (fb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fa86:	492b      	ldr	r1, [pc, #172]	; (fb34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    fa88:	4620      	mov	r0, r4
    fa8a:	47a8      	blx	r5
    fa8c:	2001      	movs	r0, #1
    fa8e:	e7cf      	b.n	fa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    fa90:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    fa94:	3301      	adds	r3, #1
    fa96:	6801      	ldr	r1, [r0, #0]
    fa98:	4299      	cmp	r1, r3
    fa9a:	dd0a      	ble.n	fab2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    fa9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    faa0:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    faa2:	f1b1 3fff 	cmp.w	r1, #4294967295
    faa6:	d1f3      	bne.n	fa90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    faa8:	f1bc 3fff 	cmp.w	ip, #4294967295
    faac:	d1df      	bne.n	fa6e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    faae:	469c      	mov	ip, r3
    fab0:	e7f0      	b.n	fa94 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    fab2:	f1bc 3fff 	cmp.w	ip, #4294967295
    fab6:	d006      	beq.n	fac6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    fab8:	fb92 f3f7 	sdiv	r3, r2, r7
    fabc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    fac0:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    fac2:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    fac6:	7828      	ldrb	r0, [r5, #0]
    fac8:	7833      	ldrb	r3, [r6, #0]
    faca:	4298      	cmp	r0, r3
    facc:	d10f      	bne.n	faee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    face:	4297      	cmp	r7, r2
    fad0:	d021      	beq.n	fb16 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    fad2:	6965      	ldr	r5, [r4, #20]
    fad4:	9703      	str	r7, [sp, #12]
    fad6:	9202      	str	r2, [sp, #8]
    fad8:	4b17      	ldr	r3, [pc, #92]	; (fb38 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    fada:	9301      	str	r3, [sp, #4]
    fadc:	4b17      	ldr	r3, [pc, #92]	; (fb3c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    fade:	9300      	str	r3, [sp, #0]
    fae0:	2346      	movs	r3, #70	; 0x46
    fae2:	4a0f      	ldr	r2, [pc, #60]	; (fb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fae4:	4913      	ldr	r1, [pc, #76]	; (fb34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    fae6:	4620      	mov	r0, r4
    fae8:	47a8      	blx	r5
    faea:	2001      	movs	r0, #1
    faec:	e7a0      	b.n	fa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    faee:	6967      	ldr	r7, [r4, #20]
    faf0:	f7f9 fc4c 	bl	938c <TfLiteTypeGetName>
    faf4:	4605      	mov	r5, r0
    faf6:	7830      	ldrb	r0, [r6, #0]
    faf8:	f7f9 fc48 	bl	938c <TfLiteTypeGetName>
    fafc:	9003      	str	r0, [sp, #12]
    fafe:	9502      	str	r5, [sp, #8]
    fb00:	4b0f      	ldr	r3, [pc, #60]	; (fb40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    fb02:	9301      	str	r3, [sp, #4]
    fb04:	4b0f      	ldr	r3, [pc, #60]	; (fb44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    fb06:	9300      	str	r3, [sp, #0]
    fb08:	2345      	movs	r3, #69	; 0x45
    fb0a:	4a05      	ldr	r2, [pc, #20]	; (fb20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    fb0c:	490e      	ldr	r1, [pc, #56]	; (fb48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    fb0e:	4620      	mov	r0, r4
    fb10:	47b8      	blx	r7
    fb12:	2001      	movs	r0, #1
    fb14:	e78c      	b.n	fa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    fb16:	2000      	movs	r0, #0
    fb18:	e78a      	b.n	fa30 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    fb1a:	bf00      	nop
    fb1c:	000349b0 	.word	0x000349b0
    fb20:	00034d38 	.word	0x00034d38
    fb24:	00033f14 	.word	0x00033f14
    fb28:	0003461c 	.word	0x0003461c
    fb2c:	00034d88 	.word	0x00034d88
    fb30:	00034d8c 	.word	0x00034d8c
    fb34:	000341d4 	.word	0x000341d4
    fb38:	00034d98 	.word	0x00034d98
    fb3c:	00034dac 	.word	0x00034dac
    fb40:	0003488c 	.word	0x0003488c
    fb44:	0003489c 	.word	0x0003489c
    fb48:	00034bd4 	.word	0x00034bd4

0000fb4c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    fb4c:	b570      	push	{r4, r5, r6, lr}
    fb4e:	b084      	sub	sp, #16
    fb50:	4605      	mov	r5, r0
    fb52:	460c      	mov	r4, r1
    fb54:	680b      	ldr	r3, [r1, #0]
    fb56:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    fb58:	2b01      	cmp	r3, #1
    fb5a:	d00a      	beq.n	fb72 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    fb5c:	2b02      	cmp	r3, #2
    fb5e:	d008      	beq.n	fb72 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    fb60:	6944      	ldr	r4, [r0, #20]
    fb62:	4b1a      	ldr	r3, [pc, #104]	; (fbcc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    fb64:	9300      	str	r3, [sp, #0]
    fb66:	234b      	movs	r3, #75	; 0x4b
    fb68:	4a19      	ldr	r2, [pc, #100]	; (fbd0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fb6a:	491a      	ldr	r1, [pc, #104]	; (fbd4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    fb6c:	47a0      	blx	r4
    fb6e:	2001      	movs	r0, #1
    fb70:	e011      	b.n	fb96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    fb72:	6863      	ldr	r3, [r4, #4]
    fb74:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    fb76:	2b01      	cmp	r3, #1
    fb78:	d00f      	beq.n	fb9a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    fb7a:	696e      	ldr	r6, [r5, #20]
    fb7c:	2401      	movs	r4, #1
    fb7e:	9403      	str	r4, [sp, #12]
    fb80:	9302      	str	r3, [sp, #8]
    fb82:	4b15      	ldr	r3, [pc, #84]	; (fbd8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    fb84:	9301      	str	r3, [sp, #4]
    fb86:	4b15      	ldr	r3, [pc, #84]	; (fbdc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    fb88:	9300      	str	r3, [sp, #0]
    fb8a:	234c      	movs	r3, #76	; 0x4c
    fb8c:	4a10      	ldr	r2, [pc, #64]	; (fbd0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fb8e:	4914      	ldr	r1, [pc, #80]	; (fbe0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    fb90:	4628      	mov	r0, r5
    fb92:	47b0      	blx	r6
    fb94:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    fb96:	b004      	add	sp, #16
    fb98:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    fb9a:	4621      	mov	r1, r4
    fb9c:	4628      	mov	r0, r5
    fb9e:	f7ff ff13 	bl	f9c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    fba2:	2800      	cmp	r0, #0
    fba4:	d0f7      	beq.n	fb96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    fba6:	696e      	ldr	r6, [r5, #20]
    fba8:	4621      	mov	r1, r4
    fbaa:	4628      	mov	r0, r5
    fbac:	f7ff ff0c 	bl	f9c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    fbb0:	2300      	movs	r3, #0
    fbb2:	9303      	str	r3, [sp, #12]
    fbb4:	9002      	str	r0, [sp, #8]
    fbb6:	4b0b      	ldr	r3, [pc, #44]	; (fbe4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    fbb8:	9301      	str	r3, [sp, #4]
    fbba:	4b0b      	ldr	r3, [pc, #44]	; (fbe8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    fbbc:	9300      	str	r3, [sp, #0]
    fbbe:	234d      	movs	r3, #77	; 0x4d
    fbc0:	4a03      	ldr	r2, [pc, #12]	; (fbd0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    fbc2:	4907      	ldr	r1, [pc, #28]	; (fbe0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    fbc4:	4628      	mov	r0, r5
    fbc6:	47b0      	blx	r6
    fbc8:	2001      	movs	r0, #1
    fbca:	e7e4      	b.n	fb96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    fbcc:	00034dc0 	.word	0x00034dc0
    fbd0:	00034d38 	.word	0x00034d38
    fbd4:	00033f14 	.word	0x00033f14
    fbd8:	00034fd0 	.word	0x00034fd0
    fbdc:	00034df0 	.word	0x00034df0
    fbe0:	000341d4 	.word	0x000341d4
    fbe4:	00034e04 	.word	0x00034e04
    fbe8:	00034e10 	.word	0x00034e10

0000fbec <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    fbec:	b470      	push	{r4, r5, r6}
    fbee:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    fbf0:	4604      	mov	r4, r0
    fbf2:	4d05      	ldr	r5, [pc, #20]	; (fc08 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    fbf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fbf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fbf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    fbfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    fc00:	4630      	mov	r0, r6
    fc02:	bc70      	pop	{r4, r5, r6}
    fc04:	4770      	bx	lr
    fc06:	bf00      	nop
    fc08:	00019af0 	.word	0x00019af0

0000fc0c <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    fc0c:	b470      	push	{r4, r5, r6}
    fc0e:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    fc10:	4604      	mov	r4, r0
    fc12:	4d05      	ldr	r5, [pc, #20]	; (fc28 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    fc14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fc16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fc18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    fc1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    fc20:	4630      	mov	r0, r6
    fc22:	bc70      	pop	{r4, r5, r6}
    fc24:	4770      	bx	lr
    fc26:	bf00      	nop
    fc28:	00019b10 	.word	0x00019b10

0000fc2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc30:	b091      	sub	sp, #68	; 0x44
    fc32:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    fc34:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    fc38:	68c2      	ldr	r2, [r0, #12]
    fc3a:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    fc3c:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    fc3e:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    fc40:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    fc42:	2200      	movs	r2, #0
    fc44:	e011      	b.n	fc6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    fc46:	f008 ff25 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fc4a:	f008 ff23 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc4e:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    fc52:	6866      	ldr	r6, [r4, #4]
    fc54:	e017      	b.n	fc86 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    fc56:	f008 ff1d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fc5a:	f008 ff1b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc5e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    fc62:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fc64:	42b4      	cmp	r4, r6
    fc66:	d119      	bne.n	fc9c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    fc68:	3201      	adds	r2, #1
    fc6a:	4295      	cmp	r5, r2
    fc6c:	dd18      	ble.n	fca0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    fc6e:	4290      	cmp	r0, r2
    fc70:	d0fa      	beq.n	fc68 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    fc72:	2a00      	cmp	r2, #0
    fc74:	dbe7      	blt.n	fc46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    fc76:	680c      	ldr	r4, [r1, #0]
    fc78:	42a2      	cmp	r2, r4
    fc7a:	dae6      	bge.n	fc4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc7c:	2c05      	cmp	r4, #5
    fc7e:	dde6      	ble.n	fc4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    fc80:	684c      	ldr	r4, [r1, #4]
    fc82:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fc86:	2a00      	cmp	r2, #0
    fc88:	dbe5      	blt.n	fc56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    fc8a:	681c      	ldr	r4, [r3, #0]
    fc8c:	42a2      	cmp	r2, r4
    fc8e:	dae4      	bge.n	fc5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fc90:	2c05      	cmp	r4, #5
    fc92:	dde4      	ble.n	fc5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    fc94:	685c      	ldr	r4, [r3, #4]
    fc96:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    fc9a:	e7e3      	b.n	fc64 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    fc9c:	f008 fefa 	bl	18a94 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    fca0:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fca2:	2800      	cmp	r0, #0
    fca4:	db08      	blt.n	fcb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    fca6:	42a8      	cmp	r0, r5
    fca8:	da06      	bge.n	fcb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fcaa:	2d05      	cmp	r5, #5
    fcac:	dd06      	ble.n	fcbc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    fcae:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    fcb0:	2200      	movs	r2, #0
  int flat_size = 1;
    fcb2:	2401      	movs	r4, #1
    fcb4:	46ac      	mov	ip, r5
    fcb6:	e007      	b.n	fcc8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    fcb8:	f008 feec 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    fcbc:	1d0e      	adds	r6, r1, #4
    fcbe:	e7f7      	b.n	fcb0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fcc0:	2501      	movs	r5, #1
    fcc2:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    fcc6:	3201      	adds	r2, #1
    fcc8:	4594      	cmp	ip, r2
    fcca:	dd04      	ble.n	fcd6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    fccc:	4290      	cmp	r0, r2
    fcce:	d0f7      	beq.n	fcc0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    fcd0:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    fcd4:	e7f5      	b.n	fcc2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    fcd6:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    fcd8:	2800      	cmp	r0, #0
    fcda:	db2e      	blt.n	fd3a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    fcdc:	680a      	ldr	r2, [r1, #0]
    fcde:	4290      	cmp	r0, r2
    fce0:	da2d      	bge.n	fd3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fce2:	2a05      	cmp	r2, #5
    fce4:	dd2d      	ble.n	fd42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    fce6:	684a      	ldr	r2, [r1, #4]
    fce8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    fcec:	2800      	cmp	r0, #0
    fcee:	db2c      	blt.n	fd4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    fcf0:	6819      	ldr	r1, [r3, #0]
    fcf2:	4288      	cmp	r0, r1
    fcf4:	da2b      	bge.n	fd4e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fcf6:	2905      	cmp	r1, #5
    fcf8:	dd2b      	ble.n	fd52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    fcfa:	6859      	ldr	r1, [r3, #4]
    fcfc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fd00:	4291      	cmp	r1, r2
    fd02:	d12a      	bne.n	fd5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fd04:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    fd06:	2800      	cmp	r0, #0
    fd08:	db29      	blt.n	fd5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    fd0a:	6819      	ldr	r1, [r3, #0]
    fd0c:	4288      	cmp	r0, r1
    fd0e:	da28      	bge.n	fd62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd10:	2905      	cmp	r1, #5
    fd12:	dd28      	ble.n	fd66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    fd14:	685b      	ldr	r3, [r3, #4]
    fd16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    fd1a:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    fd1c:	429a      	cmp	r2, r3
    fd1e:	dc26      	bgt.n	fd6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    fd20:	ab0f      	add	r3, sp, #60	; 0x3c
    fd22:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    fd26:	f04f 0a00 	mov.w	sl, #0
    fd2a:	4642      	mov	r2, r8
    fd2c:	46d0      	mov	r8, sl
    fd2e:	9702      	str	r7, [sp, #8]
    fd30:	464b      	mov	r3, r9
    fd32:	46d9      	mov	r9, fp
    fd34:	469b      	mov	fp, r3
    fd36:	4692      	mov	sl, r2
    fd38:	e15d      	b.n	fff6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    fd3a:	f008 feab 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd3e:	f008 fea9 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd42:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    fd46:	684a      	ldr	r2, [r1, #4]
    fd48:	e7d0      	b.n	fcec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    fd4a:	f008 fea3 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd4e:	f008 fea1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd52:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    fd56:	6849      	ldr	r1, [r1, #4]
    fd58:	e7d2      	b.n	fd00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    fd5a:	f008 fe9b 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
    fd5e:	f008 fe99 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
    fd62:	f008 fe97 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    fd66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    fd6a:	685b      	ldr	r3, [r3, #4]
    fd6c:	e7d5      	b.n	fd1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    fd6e:	ab0e      	add	r3, sp, #56	; 0x38
    fd70:	e7d7      	b.n	fd22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fd72:	f991 2000 	ldrsb.w	r2, [r1]
    fd76:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    fd7a:	3301      	adds	r3, #1
    fd7c:	454b      	cmp	r3, r9
    fd7e:	da0c      	bge.n	fd9a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    fd80:	fb09 3208 	mla	r2, r9, r8, r3
    fd84:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    fd88:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    fd8c:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    fd90:	4282      	cmp	r2, r0
    fd92:	dcee      	bgt.n	fd72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    fd94:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    fd98:	e7eb      	b.n	fd72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    fd9a:	2000      	movs	r0, #0
    fd9c:	f006 f8fa 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    fda0:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fda2:	2400      	movs	r4, #0
    fda4:	9f06      	ldr	r7, [sp, #24]
    fda6:	9e02      	ldr	r6, [sp, #8]
    fda8:	e01a      	b.n	fde0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fdaa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fdae:	d002      	beq.n	fdb6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    fdb0:	f04f 0c00 	mov.w	ip, #0
    fdb4:	e024      	b.n	fe00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    fdb6:	f04f 0c01 	mov.w	ip, #1
    fdba:	e021      	b.n	fe00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fdbc:	4993      	ldr	r1, [pc, #588]	; (1000c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fdbe:	e02f      	b.n	fe20 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fdc0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    fdc2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fdc6:	f1bc 0f00 	cmp.w	ip, #0
    fdca:	d13a      	bne.n	fe42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    fdcc:	f7ff fa90 	bl	f2f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    fdd0:	f007 fbec 	bl	175ac <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    fdd4:	4601      	mov	r1, r0
    fdd6:	4628      	mov	r0, r5
    fdd8:	f007 fba4 	bl	17524 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    fddc:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    fdde:	3401      	adds	r4, #1
    fde0:	454c      	cmp	r4, r9
    fde2:	da31      	bge.n	fe48 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fde4:	fb09 4308 	mla	r3, r9, r8, r4
    fde8:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    fdec:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    fdf0:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    fdf2:	4296      	cmp	r6, r2
    fdf4:	dcf3      	bgt.n	fdde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fdf6:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fdf8:	4592      	cmp	sl, r2
    fdfa:	d0d6      	beq.n	fdaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    fdfc:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    fe00:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    fe02:	fb0a f301 	mul.w	r3, sl, r1
    fe06:	4650      	mov	r0, sl
    fe08:	17c1      	asrs	r1, r0, #31
    fe0a:	fb02 3101 	mla	r1, r2, r1, r3
    fe0e:	fbaa 2302 	umull	r2, r3, sl, r2
    fe12:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fe14:	2a00      	cmp	r2, #0
    fe16:	f173 0100 	sbcs.w	r1, r3, #0
    fe1a:	dbcf      	blt.n	fdbc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    fe1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fe20:	1852      	adds	r2, r2, r1
    fe22:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    fe26:	4611      	mov	r1, r2
    fe28:	4618      	mov	r0, r3
    fe2a:	2a00      	cmp	r2, #0
    fe2c:	f173 0e00 	sbcs.w	lr, r3, #0
    fe30:	dac6      	bge.n	fdc0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    fe32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe36:	1851      	adds	r1, r2, r1
    fe38:	f04f 0000 	mov.w	r0, #0
    fe3c:	eb43 0000 	adc.w	r0, r3, r0
    fe40:	e7be      	b.n	fdc0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fe42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fe46:	e7c1      	b.n	fdcc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    fe48:	4628      	mov	r0, r5
    fe4a:	f007 fa78 	bl	1733e <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    fe4e:	f1c0 030c 	rsb	r3, r0, #12
    fe52:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    fe54:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    fe58:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    fe5c:	f7ff f892 	bl	ef84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    fe60:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    fe62:	2600      	movs	r6, #0
    fe64:	f8cd 8000 	str.w	r8, [sp]
    fe68:	4657      	mov	r7, sl
    fe6a:	46ca      	mov	sl, r9
    fe6c:	f8cd b004 	str.w	fp, [sp, #4]
    fe70:	e02b      	b.n	feca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    fe72:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fe76:	d001      	beq.n	fe7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    fe78:	2500      	movs	r5, #0
    fe7a:	e039      	b.n	fef0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    fe7c:	2501      	movs	r5, #1
    fe7e:	e037      	b.n	fef0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    fe80:	4962      	ldr	r1, [pc, #392]	; (1000c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    fe82:	e045      	b.n	ff10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    fe84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    fe88:	1851      	adds	r1, r2, r1
    fe8a:	f04f 0000 	mov.w	r0, #0
    fe8e:	eb43 0000 	adc.w	r0, r3, r0
    fe92:	e046      	b.n	ff22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    fe94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fe98:	e048      	b.n	ff2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    fe9a:	4b5d      	ldr	r3, [pc, #372]	; (10010 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    fe9c:	4a5d      	ldr	r2, [pc, #372]	; (10014 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    fe9e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    fea2:	485d      	ldr	r0, [pc, #372]	; (10018 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    fea4:	f002 fdfa 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
    fea8:	4b5c      	ldr	r3, [pc, #368]	; (1001c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    feaa:	4a5a      	ldr	r2, [pc, #360]	; (10014 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    feac:	f240 1167 	movw	r1, #359	; 0x167
    feb0:	4859      	ldr	r0, [pc, #356]	; (10018 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    feb2:	f002 fdf3 	bl	12a9c <__assert_func>
	return __b;
    feb6:	ab0c      	add	r3, sp, #48	; 0x30
    feb8:	e089      	b.n	ffce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    feba:	ab0d      	add	r3, sp, #52	; 0x34
    febc:	e08e      	b.n	ffdc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    febe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fec2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fec4:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    fec8:	3601      	adds	r6, #1
    feca:	4556      	cmp	r6, sl
    fecc:	f280 808b 	bge.w	ffe6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    fed0:	9b00      	ldr	r3, [sp, #0]
    fed2:	fb0a 6403 	mla	r4, sl, r3, r6
    fed6:	9b01      	ldr	r3, [sp, #4]
    fed8:	571a      	ldrsb	r2, [r3, r4]
    feda:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    fede:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    fee0:	9b02      	ldr	r3, [sp, #8]
    fee2:	4293      	cmp	r3, r2
    fee4:	dceb      	bgt.n	febe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    fee6:	9b06      	ldr	r3, [sp, #24]
    fee8:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    feea:	4297      	cmp	r7, r2
    feec:	d0c1      	beq.n	fe72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    feee:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    fef0:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    fef2:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    fef6:	fb02 f309 	mul.w	r3, r2, r9
    fefa:	fb07 3101 	mla	r1, r7, r1, r3
    fefe:	fba2 2307 	umull	r2, r3, r2, r7
    ff02:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ff04:	2a00      	cmp	r2, #0
    ff06:	f173 0100 	sbcs.w	r1, r3, #0
    ff0a:	dbb9      	blt.n	fe80 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    ff0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ff10:	1852      	adds	r2, r2, r1
    ff12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ff16:	4611      	mov	r1, r2
    ff18:	4618      	mov	r0, r3
    ff1a:	2a00      	cmp	r2, #0
    ff1c:	f173 0c00 	sbcs.w	ip, r3, #0
    ff20:	dbb0      	blt.n	fe84 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    ff22:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ff24:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ff28:	2d00      	cmp	r5, #0
    ff2a:	d1b3      	bne.n	fe94 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    ff2c:	f7ff f9e0 	bl	f2f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    ff30:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    ff32:	9808      	ldr	r0, [sp, #32]
    ff34:	f7ff f8ce 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ff38:	4605      	mov	r5, r0
  assert(exponent >= 0);
    ff3a:	9b07      	ldr	r3, [sp, #28]
    ff3c:	f113 090f 	adds.w	r9, r3, #15
    ff40:	d4ab      	bmi.n	fe9a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    ff42:	f1b9 0f1f 	cmp.w	r9, #31
    ff46:	dcaf      	bgt.n	fea8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ff48:	f04f 0b01 	mov.w	fp, #1
    ff4c:	fa0b f009 	lsl.w	r0, fp, r9
    ff50:	3801      	subs	r0, #1
    ff52:	f006 f81f 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff56:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ff58:	2000      	movs	r0, #0
    ff5a:	f006 f81b 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff5e:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    ff60:	4658      	mov	r0, fp
    ff62:	f006 f817 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ff66:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    ff68:	4641      	mov	r1, r8
    ff6a:	4628      	mov	r0, r5
    ff6c:	f006 f813 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ff70:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ff72:	4659      	mov	r1, fp
    ff74:	4640      	mov	r0, r8
    ff76:	f006 f810 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ff7a:	4680      	mov	r8, r0
    ff7c:	9903      	ldr	r1, [sp, #12]
    ff7e:	4628      	mov	r0, r5
    ff80:	f006 f817 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ff84:	f8dd b010 	ldr.w	fp, [sp, #16]
    ff88:	4659      	mov	r1, fp
    ff8a:	f006 f804 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ff8e:	4601      	mov	r1, r0
    ff90:	4640      	mov	r0, r8
    ff92:	f006 f804 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ff96:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ff98:	4649      	mov	r1, r9
    ff9a:	4628      	mov	r0, r5
    ff9c:	f005 fffd 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ffa0:	4605      	mov	r5, r0
    ffa2:	4641      	mov	r1, r8
    ffa4:	9805      	ldr	r0, [sp, #20]
    ffa6:	f006 f80c 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ffaa:	4659      	mov	r1, fp
    ffac:	f005 fff3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ffb0:	4601      	mov	r1, r0
    ffb2:	4628      	mov	r0, r5
    ffb4:	f005 fff3 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    ffb8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    ffbc:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    ffbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
    ffc2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    ffc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ffc8:	f6bf af75 	bge.w	feb6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    ffcc:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    ffce:	4a14      	ldr	r2, [pc, #80]	; (10020 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    ffd0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    ffd2:	681a      	ldr	r2, [r3, #0]
    ffd4:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    ffd8:	f6ff af6f 	blt.w	feba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    ffdc:	681b      	ldr	r3, [r3, #0]
    ffde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ffe0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    ffe4:	e770      	b.n	fec8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    ffe6:	f8dd 8000 	ldr.w	r8, [sp]
    ffea:	46d1      	mov	r9, sl
    ffec:	46ba      	mov	sl, r7
    ffee:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    fff2:	f108 0801 	add.w	r8, r8, #1
    fff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fff8:	4598      	cmp	r8, r3
    fffa:	da04      	bge.n	10006 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    fffc:	2380      	movs	r3, #128	; 0x80
    fffe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   10002:	2300      	movs	r3, #0
   10004:	e6ba      	b.n	fd7c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
   10006:	b011      	add	sp, #68	; 0x44
   10008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1000c:	c0000001 	.word	0xc0000001
   10010:	00034630 	.word	0x00034630
   10014:	00034640 	.word	0x00034640
   10018:	00034698 	.word	0x00034698
   1001c:	000346f4 	.word	0x000346f4
   10020:	ffff8000 	.word	0xffff8000

00010024 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   10024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10028:	b091      	sub	sp, #68	; 0x44
   1002a:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
   1002c:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
   10030:	68c2      	ldr	r2, [r0, #12]
   10032:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
   10034:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
   10036:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   10038:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
   1003a:	2200      	movs	r2, #0
   1003c:	e011      	b.n	10062 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
   1003e:	f008 fd29 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10042:	f008 fd27 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10046:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   1004a:	6866      	ldr	r6, [r4, #4]
   1004c:	e017      	b.n	1007e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
   1004e:	f008 fd21 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10052:	f008 fd1f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10056:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   1005a:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1005c:	42b4      	cmp	r4, r6
   1005e:	d119      	bne.n	10094 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
   10060:	3201      	adds	r2, #1
   10062:	4295      	cmp	r5, r2
   10064:	dd18      	ble.n	10098 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
   10066:	4290      	cmp	r0, r2
   10068:	d0fa      	beq.n	10060 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
   1006a:	2a00      	cmp	r2, #0
   1006c:	dbe7      	blt.n	1003e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
   1006e:	680c      	ldr	r4, [r1, #0]
   10070:	42a2      	cmp	r2, r4
   10072:	dae6      	bge.n	10042 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10074:	2c05      	cmp	r4, #5
   10076:	dde6      	ble.n	10046 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
   10078:	684c      	ldr	r4, [r1, #4]
   1007a:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1007e:	2a00      	cmp	r2, #0
   10080:	dbe5      	blt.n	1004e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
   10082:	681c      	ldr	r4, [r3, #0]
   10084:	42a2      	cmp	r2, r4
   10086:	dae4      	bge.n	10052 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10088:	2c05      	cmp	r4, #5
   1008a:	dde4      	ble.n	10056 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
   1008c:	685c      	ldr	r4, [r3, #4]
   1008e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   10092:	e7e3      	b.n	1005c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10094:	f008 fcfe 	bl	18a94 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10098:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   1009a:	2800      	cmp	r0, #0
   1009c:	db08      	blt.n	100b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
   1009e:	42a8      	cmp	r0, r5
   100a0:	da06      	bge.n	100b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   100a2:	2d05      	cmp	r5, #5
   100a4:	dd06      	ble.n	100b4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
   100a6:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
   100a8:	2200      	movs	r2, #0
  int flat_size = 1;
   100aa:	2401      	movs	r4, #1
   100ac:	46ac      	mov	ip, r5
   100ae:	e007      	b.n	100c0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   100b0:	f008 fcf0 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   100b4:	1d0e      	adds	r6, r1, #4
   100b6:	e7f7      	b.n	100a8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   100b8:	2501      	movs	r5, #1
   100ba:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
   100be:	3201      	adds	r2, #1
   100c0:	4594      	cmp	ip, r2
   100c2:	dd04      	ble.n	100ce <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   100c4:	4290      	cmp	r0, r2
   100c6:	d0f7      	beq.n	100b8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
   100c8:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
   100cc:	e7f5      	b.n	100ba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
   100ce:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
   100d0:	2800      	cmp	r0, #0
   100d2:	db2e      	blt.n	10132 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
   100d4:	680a      	ldr	r2, [r1, #0]
   100d6:	4290      	cmp	r0, r2
   100d8:	da2d      	bge.n	10136 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   100da:	2a05      	cmp	r2, #5
   100dc:	dd2d      	ble.n	1013a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
   100de:	684a      	ldr	r2, [r1, #4]
   100e0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   100e4:	2800      	cmp	r0, #0
   100e6:	db2c      	blt.n	10142 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
   100e8:	6819      	ldr	r1, [r3, #0]
   100ea:	4288      	cmp	r0, r1
   100ec:	da2b      	bge.n	10146 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   100ee:	2905      	cmp	r1, #5
   100f0:	dd2b      	ble.n	1014a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   100f2:	6859      	ldr	r1, [r3, #4]
   100f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   100f8:	4291      	cmp	r1, r2
   100fa:	d12a      	bne.n	10152 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   100fc:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
   100fe:	2800      	cmp	r0, #0
   10100:	db29      	blt.n	10156 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
   10102:	6819      	ldr	r1, [r3, #0]
   10104:	4288      	cmp	r0, r1
   10106:	da28      	bge.n	1015a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10108:	2905      	cmp	r1, #5
   1010a:	dd28      	ble.n	1015e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
   1010c:	685b      	ldr	r3, [r3, #4]
   1010e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10112:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   10114:	429a      	cmp	r2, r3
   10116:	dc26      	bgt.n	10166 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
   10118:	ab0f      	add	r3, sp, #60	; 0x3c
   1011a:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
   1011e:	f04f 0a00 	mov.w	sl, #0
   10122:	4642      	mov	r2, r8
   10124:	46d0      	mov	r8, sl
   10126:	9702      	str	r7, [sp, #8]
   10128:	464b      	mov	r3, r9
   1012a:	46d9      	mov	r9, fp
   1012c:	469b      	mov	fp, r3
   1012e:	4692      	mov	sl, r2
   10130:	e158      	b.n	103e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
   10132:	f008 fcaf 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10136:	f008 fcad 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1013a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   1013e:	684a      	ldr	r2, [r1, #4]
   10140:	e7d0      	b.n	100e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
   10142:	f008 fca7 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10146:	f008 fca5 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1014a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
   1014e:	6849      	ldr	r1, [r1, #4]
   10150:	e7d2      	b.n	100f8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10152:	f008 fc9f 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   10156:	f008 fc9d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1015a:	f008 fc9b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1015e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   10162:	685b      	ldr	r3, [r3, #4]
   10164:	e7d5      	b.n	10112 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
   10166:	ab0e      	add	r3, sp, #56	; 0x38
   10168:	e7d7      	b.n	1011a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1016a:	f991 2000 	ldrsb.w	r2, [r1]
   1016e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   10172:	3301      	adds	r3, #1
   10174:	454b      	cmp	r3, r9
   10176:	da0c      	bge.n	10192 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10178:	fb09 3208 	mla	r2, r9, r8, r3
   1017c:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
   10180:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
   10184:	f91b 2002 	ldrsb.w	r2, [fp, r2]
   10188:	4282      	cmp	r2, r0
   1018a:	dcee      	bgt.n	1016a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
   1018c:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   10190:	e7eb      	b.n	1016a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
   10192:	2000      	movs	r0, #0
   10194:	f005 fefe 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   10198:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
   1019a:	2400      	movs	r4, #0
   1019c:	9f06      	ldr	r7, [sp, #24]
   1019e:	9e02      	ldr	r6, [sp, #8]
   101a0:	e01a      	b.n	101d8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   101a2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   101a6:	d002      	beq.n	101ae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
   101a8:	f04f 0c00 	mov.w	ip, #0
   101ac:	e024      	b.n	101f8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
   101ae:	f04f 0c01 	mov.w	ip, #1
   101b2:	e021      	b.n	101f8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   101b4:	4991      	ldr	r1, [pc, #580]	; (103fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
   101b6:	e02f      	b.n	10218 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   101b8:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   101ba:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   101be:	f1bc 0f00 	cmp.w	ip, #0
   101c2:	d13a      	bne.n	1023a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   101c4:	f7ff f894 	bl	f2f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   101c8:	f007 f9f0 	bl	175ac <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
   101cc:	4601      	mov	r1, r0
   101ce:	4628      	mov	r0, r5
   101d0:	f007 f9a8 	bl	17524 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
   101d4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
   101d6:	3401      	adds	r4, #1
   101d8:	454c      	cmp	r4, r9
   101da:	da31      	bge.n	10240 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   101dc:	fb09 4308 	mla	r3, r9, r8, r4
   101e0:	f91b 2003 	ldrsb.w	r2, [fp, r3]
   101e4:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
   101e8:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
   101ea:	4296      	cmp	r6, r2
   101ec:	dcf3      	bgt.n	101d6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
   101ee:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   101f0:	4592      	cmp	sl, r2
   101f2:	d0d6      	beq.n	101a2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
   101f4:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
   101f8:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
   101fa:	fb0a f301 	mul.w	r3, sl, r1
   101fe:	4650      	mov	r0, sl
   10200:	17c1      	asrs	r1, r0, #31
   10202:	fb02 3101 	mla	r1, r2, r1, r3
   10206:	fbaa 2302 	umull	r2, r3, sl, r2
   1020a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1020c:	2a00      	cmp	r2, #0
   1020e:	f173 0100 	sbcs.w	r1, r3, #0
   10212:	dbcf      	blt.n	101b4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
   10214:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   10218:	1852      	adds	r2, r2, r1
   1021a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1021e:	4611      	mov	r1, r2
   10220:	4618      	mov	r0, r3
   10222:	2a00      	cmp	r2, #0
   10224:	f173 0e00 	sbcs.w	lr, r3, #0
   10228:	dac6      	bge.n	101b8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
   1022a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1022e:	1851      	adds	r1, r2, r1
   10230:	f04f 0000 	mov.w	r0, #0
   10234:	eb43 0000 	adc.w	r0, r3, r0
   10238:	e7be      	b.n	101b8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1023a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1023e:	e7c1      	b.n	101c4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
   10240:	4628      	mov	r0, r5
   10242:	f007 f87c 	bl	1733e <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   10246:	f1c0 030c 	rsb	r3, r0, #12
   1024a:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
   1024c:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
   10250:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   10254:	f7fe fe96 	bl	ef84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   10258:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
   1025a:	2600      	movs	r6, #0
   1025c:	f8cd 8000 	str.w	r8, [sp]
   10260:	4657      	mov	r7, sl
   10262:	46ca      	mov	sl, r9
   10264:	f8cd b004 	str.w	fp, [sp, #4]
   10268:	e029      	b.n	102be <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1026a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1026e:	d001      	beq.n	10274 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
   10270:	2500      	movs	r5, #0
   10272:	e037      	b.n	102e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
   10274:	2501      	movs	r5, #1
   10276:	e035      	b.n	102e4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10278:	4960      	ldr	r1, [pc, #384]	; (103fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
   1027a:	e043      	b.n	10304 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1027c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   10280:	1851      	adds	r1, r2, r1
   10282:	f04f 0000 	mov.w	r0, #0
   10286:	eb43 0000 	adc.w	r0, r3, r0
   1028a:	e044      	b.n	10316 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1028c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10290:	e046      	b.n	10320 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
   10292:	4b5b      	ldr	r3, [pc, #364]	; (10400 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
   10294:	4a5b      	ldr	r2, [pc, #364]	; (10404 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
   10296:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1029a:	485b      	ldr	r0, [pc, #364]	; (10408 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
   1029c:	f002 fbfe 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
   102a0:	4b5a      	ldr	r3, [pc, #360]	; (1040c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
   102a2:	4a58      	ldr	r2, [pc, #352]	; (10404 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
   102a4:	f240 1167 	movw	r1, #359	; 0x167
   102a8:	4857      	ldr	r0, [pc, #348]	; (10408 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
   102aa:	f002 fbf7 	bl	12a9c <__assert_func>
	return __b;
   102ae:	ab0c      	add	r3, sp, #48	; 0x30
   102b0:	e084      	b.n	103bc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
   102b2:	ab0d      	add	r3, sp, #52	; 0x34
   102b4:	e08a      	b.n	103cc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   102b6:	2380      	movs	r3, #128	; 0x80
   102b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   102ba:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
   102bc:	3601      	adds	r6, #1
   102be:	4556      	cmp	r6, sl
   102c0:	f280 8088 	bge.w	103d4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
   102c4:	9b00      	ldr	r3, [sp, #0]
   102c6:	fb0a 6403 	mla	r4, sl, r3, r6
   102ca:	9b01      	ldr	r3, [sp, #4]
   102cc:	571a      	ldrsb	r2, [r3, r4]
   102ce:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
   102d2:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
   102d4:	9b02      	ldr	r3, [sp, #8]
   102d6:	4293      	cmp	r3, r2
   102d8:	dced      	bgt.n	102b6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   102da:	9b06      	ldr	r3, [sp, #24]
   102dc:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   102de:	4297      	cmp	r7, r2
   102e0:	d0c3      	beq.n	1026a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
   102e2:	2500      	movs	r5, #0
  std::int64_t a_64(a);
   102e4:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
   102e6:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
   102ea:	fb02 f309 	mul.w	r3, r2, r9
   102ee:	fb07 3101 	mla	r1, r7, r1, r3
   102f2:	fba2 2307 	umull	r2, r3, r2, r7
   102f6:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   102f8:	2a00      	cmp	r2, #0
   102fa:	f173 0100 	sbcs.w	r1, r3, #0
   102fe:	dbbb      	blt.n	10278 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
   10300:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   10304:	1852      	adds	r2, r2, r1
   10306:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1030a:	4611      	mov	r1, r2
   1030c:	4618      	mov	r0, r3
   1030e:	2a00      	cmp	r2, #0
   10310:	f173 0c00 	sbcs.w	ip, r3, #0
   10314:	dbb2      	blt.n	1027c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
   10316:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   10318:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1031c:	2d00      	cmp	r5, #0
   1031e:	d1b5      	bne.n	1028c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   10320:	f7fe ffe6 	bl	f2f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   10324:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   10326:	9808      	ldr	r0, [sp, #32]
   10328:	f7fe fed4 	bl	f0d4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
   1032c:	4605      	mov	r5, r0
  assert(exponent >= 0);
   1032e:	9b07      	ldr	r3, [sp, #28]
   10330:	f113 0917 	adds.w	r9, r3, #23
   10334:	d4ad      	bmi.n	10292 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
   10336:	f1b9 0f1f 	cmp.w	r9, #31
   1033a:	dcb1      	bgt.n	102a0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1033c:	f04f 0b01 	mov.w	fp, #1
   10340:	fa0b f009 	lsl.w	r0, fp, r9
   10344:	3801      	subs	r0, #1
   10346:	f005 fe25 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1034a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1034c:	2000      	movs	r0, #0
   1034e:	f005 fe21 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   10352:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
   10354:	4658      	mov	r0, fp
   10356:	f005 fe1d 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1035a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
   1035c:	4641      	mov	r1, r8
   1035e:	4628      	mov	r0, r5
   10360:	f005 fe19 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10364:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   10366:	4659      	mov	r1, fp
   10368:	4640      	mov	r0, r8
   1036a:	f005 fe16 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1036e:	4680      	mov	r8, r0
   10370:	9903      	ldr	r1, [sp, #12]
   10372:	4628      	mov	r0, r5
   10374:	f005 fe1d 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   10378:	f8dd b010 	ldr.w	fp, [sp, #16]
   1037c:	4659      	mov	r1, fp
   1037e:	f005 fe0a 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   10382:	4601      	mov	r1, r0
   10384:	4640      	mov	r0, r8
   10386:	f005 fe0a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1038a:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
   1038c:	4649      	mov	r1, r9
   1038e:	4628      	mov	r0, r5
   10390:	f005 fe03 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   10394:	4605      	mov	r5, r0
   10396:	4641      	mov	r1, r8
   10398:	9805      	ldr	r0, [sp, #20]
   1039a:	f005 fe12 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   1039e:	4659      	mov	r1, fp
   103a0:	f005 fdf9 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   103a4:	4601      	mov	r1, r0
   103a6:	4628      	mov	r0, r5
   103a8:	f005 fdf9 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
   103ac:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
   103ae:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
   103b0:	237f      	movs	r3, #127	; 0x7f
   103b2:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
   103b4:	4298      	cmp	r0, r3
   103b6:	f73f af7a 	bgt.w	102ae <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
   103ba:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
   103bc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   103c0:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
   103c2:	681a      	ldr	r2, [r3, #0]
   103c4:	f112 0f80 	cmn.w	r2, #128	; 0x80
   103c8:	f6ff af73 	blt.w	102b2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   103cc:	681b      	ldr	r3, [r3, #0]
   103ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   103d0:	5513      	strb	r3, [r2, r4]
   103d2:	e773      	b.n	102bc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
   103d4:	f8dd 8000 	ldr.w	r8, [sp]
   103d8:	46d1      	mov	r9, sl
   103da:	46ba      	mov	sl, r7
   103dc:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   103e0:	f108 0801 	add.w	r8, r8, #1
   103e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103e6:	4598      	cmp	r8, r3
   103e8:	da04      	bge.n	103f4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   103ea:	2380      	movs	r3, #128	; 0x80
   103ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
   103f0:	2300      	movs	r3, #0
   103f2:	e6bf      	b.n	10174 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
   103f4:	b011      	add	sp, #68	; 0x44
   103f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103fa:	bf00      	nop
   103fc:	c0000001 	.word	0xc0000001
   10400:	00034630 	.word	0x00034630
   10404:	00034640 	.word	0x00034640
   10408:	00034698 	.word	0x00034698
   1040c:	000346f4 	.word	0x000346f4

00010410 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   10410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10414:	b0bf      	sub	sp, #252	; 0xfc
   10416:	4604      	mov	r4, r0
   10418:	460d      	mov	r5, r1
   1041a:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
   1041c:	7a03      	ldrb	r3, [r0, #8]
   1041e:	2b09      	cmp	r3, #9
   10420:	d152      	bne.n	104c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
   10422:	7a0b      	ldrb	r3, [r1, #8]
   10424:	2b07      	cmp	r3, #7
   10426:	d027      	beq.n	10478 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
   10428:	4601      	mov	r1, r0
   1042a:	a81e      	add	r0, sp, #120	; 0x78
   1042c:	f006 ff5d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10430:	4620      	mov	r0, r4
   10432:	f005 fda5 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10436:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10438:	4629      	mov	r1, r5
   1043a:	a824      	add	r0, sp, #144	; 0x90
   1043c:	f006 ff55 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10440:	4628      	mov	r0, r5
   10442:	f005 fda3 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   10446:	9000      	str	r0, [sp, #0]
   10448:	ab24      	add	r3, sp, #144	; 0x90
   1044a:	4622      	mov	r2, r4
   1044c:	a91e      	add	r1, sp, #120	; 0x78
   1044e:	4658      	mov	r0, fp
   10450:	f7ff fde8 	bl	10024 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   10454:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10456:	2b05      	cmp	r3, #5
   10458:	dd03      	ble.n	10462 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
   1045a:	9825      	ldr	r0, [sp, #148]	; 0x94
   1045c:	b108      	cbz	r0, 10462 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
   1045e:	f008 fb04 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10462:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10464:	2b05      	cmp	r3, #5
   10466:	f340 828b 	ble.w	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   1046a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1046c:	2800      	cmp	r0, #0
   1046e:	f000 8287 	beq.w	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   10472:	f008 fafa 	bl	18a6a <_ZdaPv>
   10476:	e283      	b.n	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
   10478:	4601      	mov	r1, r0
   1047a:	a812      	add	r0, sp, #72	; 0x48
   1047c:	f006 ff35 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10480:	4620      	mov	r0, r4
   10482:	f005 fd7d 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   10486:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
   10488:	4629      	mov	r1, r5
   1048a:	a818      	add	r0, sp, #96	; 0x60
   1048c:	f006 ff2d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10490:	4628      	mov	r0, r5
   10492:	f006 f97a 	bl	1678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   10496:	9000      	str	r0, [sp, #0]
   10498:	ab18      	add	r3, sp, #96	; 0x60
   1049a:	4622      	mov	r2, r4
   1049c:	a912      	add	r1, sp, #72	; 0x48
   1049e:	4658      	mov	r0, fp
   104a0:	f7ff fbc4 	bl	fc2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
   104a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   104a6:	2b05      	cmp	r3, #5
   104a8:	dd03      	ble.n	104b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
   104aa:	9819      	ldr	r0, [sp, #100]	; 0x64
   104ac:	b108      	cbz	r0, 104b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
   104ae:	f008 fadc 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   104b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   104b4:	2b05      	cmp	r3, #5
   104b6:	f340 8263 	ble.w	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   104ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   104bc:	2800      	cmp	r0, #0
   104be:	f000 825f 	beq.w	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   104c2:	f008 fad2 	bl	18a6a <_ZdaPv>
   104c6:	e25b      	b.n	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
   104c8:	4601      	mov	r1, r0
   104ca:	a82a      	add	r0, sp, #168	; 0xa8
   104cc:	f006 ff0d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   104d0:	4620      	mov	r0, r4
   104d2:	f006 f954 	bl	1677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
   104d6:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
   104d8:	4629      	mov	r1, r5
   104da:	a830      	add	r0, sp, #192	; 0xc0
   104dc:	f006 ff05 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
   104e0:	4628      	mov	r0, r5
   104e2:	f006 f952 	bl	1678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
   104e6:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   104e8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   104ea:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
   104ec:	2300      	movs	r3, #0
   104ee:	e015      	b.n	1051c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
   104f0:	f008 fad0 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   104f4:	f008 face 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   104f8:	a93e      	add	r1, sp, #248	; 0xf8
   104fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   104fe:	f851 1c4c 	ldr.w	r1, [r1, #-76]
   10502:	e019      	b.n	10538 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
   10504:	f008 fac6 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10508:	f008 fac4 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1050c:	a83e      	add	r0, sp, #248	; 0xf8
   1050e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10512:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10516:	4288      	cmp	r0, r1
   10518:	d119      	bne.n	1054e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
   1051a:	3301      	adds	r3, #1
   1051c:	429c      	cmp	r4, r3
   1051e:	dd18      	ble.n	10552 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
   10520:	429a      	cmp	r2, r3
   10522:	d0fa      	beq.n	1051a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
   10524:	2b00      	cmp	r3, #0
   10526:	dbe3      	blt.n	104f0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
   10528:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1052a:	428b      	cmp	r3, r1
   1052c:	dae2      	bge.n	104f4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1052e:	2905      	cmp	r1, #5
   10530:	dde2      	ble.n	104f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
   10532:	992b      	ldr	r1, [sp, #172]	; 0xac
   10534:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10538:	2b00      	cmp	r3, #0
   1053a:	dbe3      	blt.n	10504 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   1053c:	9830      	ldr	r0, [sp, #192]	; 0xc0
   1053e:	4283      	cmp	r3, r0
   10540:	dae2      	bge.n	10508 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10542:	2805      	cmp	r0, #5
   10544:	dde2      	ble.n	1050c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
   10546:	9831      	ldr	r0, [sp, #196]	; 0xc4
   10548:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1054c:	e7e3      	b.n	10516 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1054e:	f008 faa1 	bl	18a94 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10552:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10554:	2a00      	cmp	r2, #0
   10556:	db05      	blt.n	10564 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
   10558:	4282      	cmp	r2, r0
   1055a:	da03      	bge.n	10564 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1055c:	2805      	cmp	r0, #5
   1055e:	dd03      	ble.n	10568 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
   10560:	9c2b      	ldr	r4, [sp, #172]	; 0xac
   10562:	e002      	b.n	1056a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10564:	f008 fa96 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10568:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
   1056a:	2300      	movs	r3, #0
  int flat_size = 1;
   1056c:	2501      	movs	r5, #1
   1056e:	e004      	b.n	1057a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10570:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   10574:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
   10578:	3301      	adds	r3, #1
   1057a:	4298      	cmp	r0, r3
   1057c:	dd03      	ble.n	10586 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   1057e:	429a      	cmp	r2, r3
   10580:	d1f6      	bne.n	10570 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
   10582:	2101      	movs	r1, #1
   10584:	e7f6      	b.n	10574 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
   10586:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
   10588:	2a00      	cmp	r2, #0
   1058a:	db2a      	blt.n	105e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
   1058c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1058e:	429a      	cmp	r2, r3
   10590:	da29      	bge.n	105e6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10592:	2b05      	cmp	r3, #5
   10594:	dd29      	ble.n	105ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
   10596:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1059c:	2a00      	cmp	r2, #0
   1059e:	db2a      	blt.n	105f6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
   105a0:	9930      	ldr	r1, [sp, #192]	; 0xc0
   105a2:	428a      	cmp	r2, r1
   105a4:	da29      	bge.n	105fa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105a6:	2905      	cmp	r1, #5
   105a8:	dd29      	ble.n	105fe <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
   105aa:	9931      	ldr	r1, [sp, #196]	; 0xc4
   105ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   105b0:	4299      	cmp	r1, r3
   105b2:	d12a      	bne.n	1060a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   105b4:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
   105b6:	2a00      	cmp	r2, #0
   105b8:	db29      	blt.n	1060e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
   105ba:	9930      	ldr	r1, [sp, #192]	; 0xc0
   105bc:	428a      	cmp	r2, r1
   105be:	da28      	bge.n	10612 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105c0:	2905      	cmp	r1, #5
   105c2:	dd28      	ble.n	10616 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
   105c4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   105c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   105ca:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
   105cc:	4293      	cmp	r3, r2
   105ce:	dc28      	bgt.n	10622 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
   105d0:	ab3b      	add	r3, sp, #236	; 0xec
   105d2:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
   105d6:	f04f 0800 	mov.w	r8, #0
   105da:	46c1      	mov	r9, r8
   105dc:	46d8      	mov	r8, fp
   105de:	46d3      	mov	fp, sl
   105e0:	e1b6      	b.n	10950 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
   105e2:	f008 fa57 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   105e6:	f008 fa55 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105ea:	ab3e      	add	r3, sp, #248	; 0xf8
   105ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   105f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
   105f4:	e7d2      	b.n	1059c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
   105f6:	f008 fa4d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   105fa:	f008 fa4b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   105fe:	a93e      	add	r1, sp, #248	; 0xf8
   10600:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10604:	f851 1c34 	ldr.w	r1, [r1, #-52]
   10608:	e7d2      	b.n	105b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1060a:	f008 fa43 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   1060e:	f008 fa41 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10612:	f008 fa3f 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10616:	a93e      	add	r1, sp, #248	; 0xf8
   10618:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1061c:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10620:	e7d3      	b.n	105ca <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
   10622:	ab3a      	add	r3, sp, #232	; 0xe8
   10624:	e7d5      	b.n	105d2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10626:	f9b2 2000 	ldrsh.w	r2, [r2]
   1062a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1062e:	3301      	adds	r3, #1
   10630:	455b      	cmp	r3, fp
   10632:	da0c      	bge.n	1064e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   10634:	fb0b 3109 	mla	r1, fp, r9, r3
   10638:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
   1063c:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
   10640:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
   10644:	428c      	cmp	r4, r1
   10646:	dbee      	blt.n	10626 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
   10648:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
   1064c:	e7eb      	b.n	10626 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
   1064e:	fb0b f309 	mul.w	r3, fp, r9
   10652:	9307      	str	r3, [sp, #28]
   10654:	9a06      	ldr	r2, [sp, #24]
   10656:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1065a:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   1065c:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
   1065e:	46b2      	mov	sl, r6
   10660:	f8cd 9010 	str.w	r9, [sp, #16]
   10664:	e07c      	b.n	10760 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
   10666:	426d      	negs	r5, r5
   10668:	e091      	b.n	1078e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1066a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1066e:	d001      	beq.n	10674 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
   10670:	2700      	movs	r7, #0
   10672:	e091      	b.n	10798 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
   10674:	2701      	movs	r7, #1
   10676:	e08f      	b.n	10798 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   10678:	49c3      	ldr	r1, [pc, #780]	; (10988 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
   1067a:	e0a1      	b.n	107c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1067c:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
   1067e:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   10682:	2f00      	cmp	r7, #0
   10684:	f040 80ae 	bne.w	107e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
   10688:	2d00      	cmp	r5, #0
   1068a:	f2c0 80ae 	blt.w	107ea <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
   1068e:	2d1f      	cmp	r5, #31
   10690:	f300 80b2 	bgt.w	107f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   10694:	2701      	movs	r7, #1
   10696:	fa07 f005 	lsl.w	r0, r7, r5
   1069a:	3801      	subs	r0, #1
   1069c:	f005 fc7a 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106a0:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
   106a2:	2000      	movs	r0, #0
   106a4:	f005 fc76 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106a8:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
   106aa:	4638      	mov	r0, r7
   106ac:	f005 fc72 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   106b0:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
   106b2:	4649      	mov	r1, r9
   106b4:	4620      	mov	r0, r4
   106b6:	f005 fc6e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   106ba:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   106bc:	4639      	mov	r1, r7
   106be:	4648      	mov	r0, r9
   106c0:	f005 fc6b 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   106c4:	4681      	mov	r9, r0
   106c6:	9908      	ldr	r1, [sp, #32]
   106c8:	4620      	mov	r0, r4
   106ca:	f005 fc72 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   106ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   106d0:	4639      	mov	r1, r7
   106d2:	f005 fc60 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   106d6:	4601      	mov	r1, r0
   106d8:	4648      	mov	r0, r9
   106da:	f005 fc60 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   106de:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
   106e0:	4629      	mov	r1, r5
   106e2:	4620      	mov	r0, r4
   106e4:	f005 fc59 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   106e8:	4604      	mov	r4, r0
   106ea:	4649      	mov	r1, r9
   106ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   106ee:	f005 fc68 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   106f2:	4639      	mov	r1, r7
   106f4:	f005 fc4f 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   106f8:	4601      	mov	r1, r0
   106fa:	4620      	mov	r0, r4
   106fc:	f005 fc4f 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
   10700:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   10704:	307f      	adds	r0, #127	; 0x7f
   10706:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
   10708:	4ba0      	ldr	r3, [pc, #640]	; (1098c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   1070a:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
   1070c:	4298      	cmp	r0, r3
   1070e:	db7a      	blt.n	10806 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
   10710:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
   10712:	f647 72ff 	movw	r2, #32767	; 0x7fff
   10716:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
   10718:	681a      	ldr	r2, [r3, #0]
   1071a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1071e:	da74      	bge.n	1080a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
   10720:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
   10724:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   10728:	11da      	asrs	r2, r3, #7
   1072a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   1072e:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
   10730:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10734:	d26b      	bcs.n	1080e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
   10736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
   1073a:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   1073e:	3201      	adds	r2, #1
   10740:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
   10744:	1a52      	subs	r2, r2, r1
   10746:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   10748:	fb03 f302 	mul.w	r3, r3, r2
   1074c:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   1074e:	f343 13cf 	sbfx	r3, r3, #7, #16
   10752:	440b      	add	r3, r1
   10754:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
   10756:	9a03      	ldr	r2, [sp, #12]
   10758:	990c      	ldr	r1, [sp, #48]	; 0x30
   1075a:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
   1075c:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
   1075e:	3601      	adds	r6, #1
   10760:	455e      	cmp	r6, fp
   10762:	da5b      	bge.n	1081c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
   10764:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
   10768:	0072      	lsls	r2, r6, #1
   1076a:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
   1076c:	9a04      	ldr	r2, [sp, #16]
   1076e:	fb0b 6202 	mla	r2, fp, r2, r6
   10772:	9905      	ldr	r1, [sp, #20]
   10774:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
   10778:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
   1077a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1077e:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
   10782:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   10786:	2d00      	cmp	r5, #0
   10788:	f77f af6d 	ble.w	10666 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
   1078c:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1078e:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   10790:	4293      	cmp	r3, r2
   10792:	f43f af6a 	beq.w	1066a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
   10796:	2700      	movs	r7, #0
  std::int64_t a_64(a);
   10798:	4610      	mov	r0, r2
   1079a:	17d1      	asrs	r1, r2, #31
   1079c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
   107a0:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
   107a2:	fb02 f001 	mul.w	r0, r2, r1
   107a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   107a8:	fb03 0101 	mla	r1, r3, r1, r0
   107ac:	fba2 2303 	umull	r2, r3, r2, r3
   107b0:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   107b2:	2a00      	cmp	r2, #0
   107b4:	f173 0100 	sbcs.w	r1, r3, #0
   107b8:	f6ff af5e 	blt.w	10678 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
   107bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   107c0:	1852      	adds	r2, r2, r1
   107c2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   107c6:	4611      	mov	r1, r2
   107c8:	461c      	mov	r4, r3
   107ca:	2a00      	cmp	r2, #0
   107cc:	f173 0000 	sbcs.w	r0, r3, #0
   107d0:	f6bf af54 	bge.w	1067c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
   107d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   107d8:	1851      	adds	r1, r2, r1
   107da:	f04f 0400 	mov.w	r4, #0
   107de:	eb43 0404 	adc.w	r4, r3, r4
   107e2:	e74b      	b.n	1067c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   107e4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   107e8:	e74e      	b.n	10688 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
   107ea:	4b69      	ldr	r3, [pc, #420]	; (10990 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
   107ec:	4a69      	ldr	r2, [pc, #420]	; (10994 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   107ee:	f44f 71b3 	mov.w	r1, #358	; 0x166
   107f2:	4869      	ldr	r0, [pc, #420]	; (10998 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   107f4:	f002 f952 	bl	12a9c <__assert_func>
  assert(exponent <= 31);
   107f8:	4b68      	ldr	r3, [pc, #416]	; (1099c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
   107fa:	4a66      	ldr	r2, [pc, #408]	; (10994 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
   107fc:	f240 1167 	movw	r1, #359	; 0x167
   10800:	4865      	ldr	r0, [pc, #404]	; (10998 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
   10802:	f002 f94b 	bl	12a9c <__assert_func>
	return __b;
   10806:	ab3d      	add	r3, sp, #244	; 0xf4
   10808:	e783      	b.n	10712 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
   1080a:	ab3c      	add	r3, sp, #240	; 0xf0
   1080c:	e788      	b.n	10720 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
   1080e:	4b64      	ldr	r3, [pc, #400]	; (109a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   10810:	4a64      	ldr	r2, [pc, #400]	; (109a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   10812:	f44f 71ac 	mov.w	r1, #344	; 0x158
   10816:	4864      	ldr	r0, [pc, #400]	; (109a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   10818:	f002 f940 	bl	12a9c <__assert_func>
   1081c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
   10820:	4650      	mov	r0, sl
   10822:	f006 fd8c 	bl	1733e <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
   10826:	4652      	mov	r2, sl
   10828:	17d3      	asrs	r3, r2, #31
   1082a:	b2c1      	uxtb	r1, r0
   1082c:	1e4d      	subs	r5, r1, #1
   1082e:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
   10832:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
   10836:	fa03 f205 	lsl.w	r2, r3, r5
   1083a:	fa0a f404 	lsl.w	r4, sl, r4
   1083e:	4322      	orrs	r2, r4
   10840:	fa2a f101 	lsr.w	r1, sl, r1
   10844:	430a      	orrs	r2, r1
   10846:	fa0a f305 	lsl.w	r3, sl, r5
   1084a:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
   1084e:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
   10852:	0b9b      	lsrs	r3, r3, #14
   10854:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
   10858:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
   1085c:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
   1085e:	4a4b      	ldr	r2, [pc, #300]	; (1098c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
   10860:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
   10862:	4293      	cmp	r3, r2
   10864:	db25      	blt.n	108b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
   10866:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
   10868:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1086c:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
   1086e:	681a      	ldr	r2, [r3, #0]
   10870:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   10874:	da1f      	bge.n	108b6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
   10876:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
   1087a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
   1087e:	11d3      	asrs	r3, r2, #7
   10880:	f503 7380 	add.w	r3, r3, #256	; 0x100
   10884:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
   10886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1088a:	d216      	bcs.n	108ba <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
   1088c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
   10890:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
   10894:	3301      	adds	r3, #1
   10896:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
   1089a:	1b1b      	subs	r3, r3, r4
   1089c:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
   1089e:	fb02 f303 	mul.w	r3, r2, r3
   108a2:	3340      	adds	r3, #64	; 0x40
  return base + delta;
   108a4:	f343 13cf 	sbfx	r3, r3, #7, #16
   108a8:	18e2      	adds	r2, r4, r3
   108aa:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
   108ac:	2100      	movs	r1, #0
   108ae:	465f      	mov	r7, fp
   108b0:	e01e      	b.n	108f0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
   108b2:	ab39      	add	r3, sp, #228	; 0xe4
   108b4:	e7d8      	b.n	10868 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
   108b6:	ab38      	add	r3, sp, #224	; 0xe0
   108b8:	e7dd      	b.n	10876 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
   108ba:	4b39      	ldr	r3, [pc, #228]	; (109a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
   108bc:	4a39      	ldr	r2, [pc, #228]	; (109a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
   108be:	f44f 71ac 	mov.w	r1, #344	; 0x158
   108c2:	4839      	ldr	r0, [pc, #228]	; (109a8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
   108c4:	f002 f8ea 	bl	12a9c <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   108c8:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
   108ca:	2400      	movs	r4, #0
   108cc:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
   108ce:	42a3      	cmp	r3, r4
   108d0:	db37      	blt.n	10942 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
   108d2:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
   108d4:	f647 74ff 	movw	r4, #32767	; 0x7fff
   108d8:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
   108da:	681c      	ldr	r4, [r3, #0]
   108dc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   108e0:	da31      	bge.n	10946 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
   108e2:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
   108e4:	9b07      	ldr	r3, [sp, #28]
   108e6:	440b      	add	r3, r1
   108e8:	9d06      	ldr	r5, [sp, #24]
   108ea:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   108ee:	3101      	adds	r1, #1
   108f0:	42b9      	cmp	r1, r7
   108f2:	da2a      	bge.n	1094a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
   108f4:	f1c0 031f 	rsb	r3, r0, #31
   108f8:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
   108fa:	1e5c      	subs	r4, r3, #1
   108fc:	2601      	movs	r6, #1
   108fe:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10900:	9c03      	ldr	r4, [sp, #12]
   10902:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
   10906:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   10908:	fa0f fa82 	sxth.w	sl, r2
   1090c:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
   10910:	fb04 fc0b 	mul.w	ip, r4, fp
   10914:	fb02 cc05 	mla	ip, r2, r5, ip
   10918:	fba4 450a 	umull	r4, r5, r4, sl
   1091c:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
   1091e:	19a4      	adds	r4, r4, r6
   10920:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
   10924:	f1c3 0c20 	rsb	ip, r3, #32
   10928:	f1b3 0620 	subs.w	r6, r3, #32
   1092c:	fa24 f303 	lsr.w	r3, r4, r3
   10930:	fa05 fc0c 	lsl.w	ip, r5, ip
   10934:	ea43 030c 	orr.w	r3, r3, ip
   10938:	d4c6      	bmi.n	108c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
   1093a:	fa45 f606 	asr.w	r6, r5, r6
   1093e:	4333      	orrs	r3, r6
   10940:	e7c2      	b.n	108c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
   10942:	ab37      	add	r3, sp, #220	; 0xdc
   10944:	e7c6      	b.n	108d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
   10946:	ab36      	add	r3, sp, #216	; 0xd8
   10948:	e7cb      	b.n	108e2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
   1094a:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
   1094c:	f109 0901 	add.w	r9, r9, #1
   10950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10952:	4599      	cmp	r9, r3
   10954:	da06      	bge.n	10964 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
   10956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1095a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
   1095e:	2300      	movs	r3, #0
   10960:	9805      	ldr	r0, [sp, #20]
   10962:	e665      	b.n	10630 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
   10964:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   10966:	2b05      	cmp	r3, #5
   10968:	dd03      	ble.n	10972 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
   1096a:	9831      	ldr	r0, [sp, #196]	; 0xc4
   1096c:	b108      	cbz	r0, 10972 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
   1096e:	f008 f87c 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10972:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10974:	2b05      	cmp	r3, #5
   10976:	dd03      	ble.n	10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
   10978:	982b      	ldr	r0, [sp, #172]	; 0xac
   1097a:	b108      	cbz	r0, 10980 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
   1097c:	f008 f875 	bl	18a6a <_ZdaPv>
}
   10980:	b03f      	add	sp, #252	; 0xfc
   10982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10986:	bf00      	nop
   10988:	c0000001 	.word	0xc0000001
   1098c:	ffff8000 	.word	0xffff8000
   10990:	00034630 	.word	0x00034630
   10994:	00034640 	.word	0x00034640
   10998:	00034698 	.word	0x00034698
   1099c:	000346f4 	.word	0x000346f4
   109a0:	00034e30 	.word	0x00034e30
   109a4:	00034e5c 	.word	0x00034e5c
   109a8:	00034784 	.word	0x00034784

000109ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   109ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b0:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
   109b2:	2800      	cmp	r0, #0
   109b4:	d030      	beq.n	10a18 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
   109b6:	460c      	mov	r4, r1
   109b8:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   109ba:	2900      	cmp	r1, #0
   109bc:	d02e      	beq.n	10a1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   109be:	6d43      	ldr	r3, [r0, #84]	; 0x54
   109c0:	680a      	ldr	r2, [r1, #0]
   109c2:	6851      	ldr	r1, [r2, #4]
   109c4:	4798      	blx	r3
   109c6:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
   109c8:	b356      	cbz	r6, 10a20 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
   109ca:	b35c      	cbz	r4, 10a24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   109cc:	6d73      	ldr	r3, [r6, #84]	; 0x54
   109ce:	6862      	ldr	r2, [r4, #4]
   109d0:	6851      	ldr	r1, [r2, #4]
   109d2:	4630      	mov	r0, r6
   109d4:	4798      	blx	r3
   109d6:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   109d8:	6924      	ldr	r4, [r4, #16]
   109da:	b32c      	cbz	r4, 10a28 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
   109dc:	ad04      	add	r5, sp, #16
   109de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   109e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   109ea:	e894 0003 	ldmia.w	r4, {r0, r1}
   109ee:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
   109f2:	7a38      	ldrb	r0, [r7, #8]
   109f4:	2807      	cmp	r0, #7
   109f6:	f000 811a 	beq.w	10c2e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   109fa:	2809      	cmp	r0, #9
   109fc:	f000 8117 	beq.w	10c2e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
   10a00:	2801      	cmp	r0, #1
   10a02:	d013      	beq.n	10a2c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   10a04:	6974      	ldr	r4, [r6, #20]
   10a06:	f7f8 fcc1 	bl	938c <TfLiteTypeGetName>
   10a0a:	4602      	mov	r2, r0
   10a0c:	7a3b      	ldrb	r3, [r7, #8]
   10a0e:	498c      	ldr	r1, [pc, #560]	; (10c40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
   10a10:	4630      	mov	r0, r6
   10a12:	47a0      	blx	r4
      return kTfLiteError;
   10a14:	2001      	movs	r0, #1
   10a16:	e110      	b.n	10c3a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
   10a18:	f008 f83c 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
   10a1c:	f008 f83a 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
   10a20:	f008 f838 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
   10a24:	f008 f836 	bl	18a94 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
   10a28:	f008 f834 	bl	18a94 <abort>
          op_data, tflite::micro::GetTensorShape(input),
   10a2c:	4639      	mov	r1, r7
   10a2e:	a812      	add	r0, sp, #72	; 0x48
   10a30:	f006 fc5b 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10a34:	4638      	mov	r0, r7
   10a36:	f005 fa99 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   10a3a:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
   10a3c:	4649      	mov	r1, r9
   10a3e:	a818      	add	r0, sp, #96	; 0x60
   10a40:	f006 fc53 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
   10a44:	4648      	mov	r0, r9
   10a46:	f005 fa97 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   10a4a:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
   10a4c:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   10a4e:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
   10a50:	2300      	movs	r3, #0
   10a52:	e013      	b.n	10a7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
   10a54:	f008 f81e 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10a58:	f008 f81c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a5c:	aa20      	add	r2, sp, #128	; 0x80
   10a5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   10a62:	f852 2c34 	ldr.w	r2, [r2, #-52]
   10a66:	e017      	b.n	10a98 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
   10a68:	f008 f814 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10a6c:	f008 f812 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a70:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10a76:	4291      	cmp	r1, r2
   10a78:	d11b      	bne.n	10ab2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
   10a7a:	3301      	adds	r3, #1
   10a7c:	4298      	cmp	r0, r3
   10a7e:	dd1a      	ble.n	10ab6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
   10a80:	429c      	cmp	r4, r3
   10a82:	d0fa      	beq.n	10a7a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
   10a84:	2b00      	cmp	r3, #0
   10a86:	dbe5      	blt.n	10a54 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
   10a88:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10a8a:	4293      	cmp	r3, r2
   10a8c:	dae4      	bge.n	10a58 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10a8e:	2a05      	cmp	r2, #5
   10a90:	dde4      	ble.n	10a5c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
   10a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10a98:	2b00      	cmp	r3, #0
   10a9a:	dbe5      	blt.n	10a68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
   10a9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   10a9e:	428b      	cmp	r3, r1
   10aa0:	dae4      	bge.n	10a6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10aa2:	2905      	cmp	r1, #5
   10aa4:	dce4      	bgt.n	10a70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
   10aa6:	a920      	add	r1, sp, #128	; 0x80
   10aa8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   10aac:	f851 1c1c 	ldr.w	r1, [r1, #-28]
   10ab0:	e7e1      	b.n	10a76 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   10ab2:	f007 ffef 	bl	18a94 <abort>
  inline int32_t DimensionsCount() const { return size_; }
   10ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10ab8:	2c00      	cmp	r4, #0
   10aba:	db08      	blt.n	10ace <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
   10abc:	429c      	cmp	r4, r3
   10abe:	da06      	bge.n	10ace <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10ac0:	2b05      	cmp	r3, #5
   10ac2:	dd06      	ble.n	10ad2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
   10ac4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
   10ac6:	2200      	movs	r2, #0
  int flat_size = 1;
   10ac8:	f04f 0a01 	mov.w	sl, #1
   10acc:	e007      	b.n	10ade <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   10ace:	f007 ffe1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   10ad2:	a813      	add	r0, sp, #76	; 0x4c
   10ad4:	e7f7      	b.n	10ac6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10ad6:	2101      	movs	r1, #1
   10ad8:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
   10adc:	3201      	adds	r2, #1
   10ade:	4293      	cmp	r3, r2
   10ae0:	dd04      	ble.n	10aec <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   10ae2:	4294      	cmp	r4, r2
   10ae4:	d0f7      	beq.n	10ad6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
   10ae6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
   10aea:	e7f5      	b.n	10ad8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
   10aec:	2c00      	cmp	r4, #0
   10aee:	db25      	blt.n	10b3c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
   10af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10af2:	429c      	cmp	r4, r3
   10af4:	da24      	bge.n	10b40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10af6:	2b05      	cmp	r3, #5
   10af8:	dd24      	ble.n	10b44 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
   10afa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10afc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   10b00:	2c00      	cmp	r4, #0
   10b02:	db25      	blt.n	10b50 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
   10b04:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b06:	429c      	cmp	r4, r3
   10b08:	da24      	bge.n	10b54 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b0a:	2b05      	cmp	r3, #5
   10b0c:	dd24      	ble.n	10b58 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
   10b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b10:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10b14:	4293      	cmp	r3, r2
   10b16:	d125      	bne.n	10b64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10b18:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
   10b1a:	2c00      	cmp	r4, #0
   10b1c:	db24      	blt.n	10b68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
   10b1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b20:	429c      	cmp	r4, r3
   10b22:	da23      	bge.n	10b6c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b24:	2b05      	cmp	r3, #5
   10b26:	dd23      	ble.n	10b70 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
   10b28:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   10b2e:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
   10b30:	429a      	cmp	r2, r3
   10b32:	dc23      	bgt.n	10b7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
   10b34:	ab1f      	add	r3, sp, #124	; 0x7c
   10b36:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
   10b38:	2400      	movs	r4, #0
   10b3a:	e061      	b.n	10c00 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
   10b3c:	f007 ffaa 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b40:	f007 ffa8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b44:	ab20      	add	r3, sp, #128	; 0x80
   10b46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b4a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   10b4e:	e7d7      	b.n	10b00 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
   10b50:	f007 ffa0 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b54:	f007 ff9e 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b58:	ab20      	add	r3, sp, #128	; 0x80
   10b5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b5e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   10b62:	e7d7      	b.n	10b14 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   10b64:	f007 ff96 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   10b68:	f007 ff94 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   10b6c:	f007 ff92 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   10b70:	ab20      	add	r3, sp, #128	; 0x80
   10b72:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10b76:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   10b7a:	e7d8      	b.n	10b2e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
   10b7c:	ab1e      	add	r3, sp, #120	; 0x78
   10b7e:	e7da      	b.n	10b36 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
   10b80:	683b      	ldr	r3, [r7, #0]
   10b82:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   10b84:	3601      	adds	r6, #1
   10b86:	42ae      	cmp	r6, r5
   10b88:	da0c      	bge.n	10ba4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
   10b8a:	fb05 6304 	mla	r3, r5, r4, r6
   10b8e:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
   10b92:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
   10b96:	9803      	ldr	r0, [sp, #12]
   10b98:	f7f0 fa58 	bl	104c <__aeabi_fcmplt>
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d1ef      	bne.n	10b80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
   10ba0:	af03      	add	r7, sp, #12
   10ba2:	e7ed      	b.n	10b80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
   10ba4:	2700      	movs	r7, #0
    float sum = 0.f;
   10ba6:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
   10ba8:	42af      	cmp	r7, r5
   10baa:	da1a      	bge.n	10be2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   10bac:	fb05 7b04 	mla	fp, r5, r4, r7
   10bb0:	9903      	ldr	r1, [sp, #12]
   10bb2:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
   10bb6:	f7ef ffa1 	bl	afc <__aeabi_fsub>
   10bba:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
   10bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10bc0:	f7ef ff48 	bl	a54 <__aeabi_d2f>
   10bc4:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
   10bc6:	9801      	ldr	r0, [sp, #4]
   10bc8:	f7f0 f8a2 	bl	d10 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
   10bcc:	f001 fdce 	bl	1276c <expf>
   10bd0:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
   10bd2:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
   10bd6:	4630      	mov	r0, r6
   10bd8:	f7ef ff92 	bl	b00 <__addsf3>
   10bdc:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
   10bde:	3701      	adds	r7, #1
   10be0:	e7e2      	b.n	10ba8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
   10be2:	2700      	movs	r7, #0
   10be4:	42af      	cmp	r7, r5
   10be6:	da0a      	bge.n	10bfe <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
   10be8:	fb05 7b04 	mla	fp, r5, r4, r7
   10bec:	4631      	mov	r1, r6
   10bee:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
   10bf2:	f7f0 f941 	bl	e78 <__aeabi_fdiv>
   10bf6:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
   10bfa:	3701      	adds	r7, #1
   10bfc:	e7f2      	b.n	10be4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
   10bfe:	3401      	adds	r4, #1
   10c00:	4554      	cmp	r4, sl
   10c02:	da04      	bge.n	10c0e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
   10c04:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   10c08:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   10c0a:	2600      	movs	r6, #0
   10c0c:	e7bb      	b.n	10b86 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
   10c0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10c10:	2b05      	cmp	r3, #5
   10c12:	dd03      	ble.n	10c1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
   10c14:	9819      	ldr	r0, [sp, #100]	; 0x64
   10c16:	b108      	cbz	r0, 10c1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
   10c18:	f007 ff27 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   10c1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10c1e:	2b05      	cmp	r3, #5
   10c20:	dd03      	ble.n	10c2a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
   10c22:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10c24:	b108      	cbz	r0, 10c2a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
   10c26:	f007 ff20 	bl	18a6a <_ZdaPv>
      return kTfLiteOk;
   10c2a:	2000      	movs	r0, #0
   10c2c:	e005      	b.n	10c3a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
   10c2e:	aa04      	add	r2, sp, #16
   10c30:	4649      	mov	r1, r9
   10c32:	4638      	mov	r0, r7
   10c34:	f7ff fbec 	bl	10410 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   10c38:	2000      	movs	r0, #0
}
   10c3a:	b021      	add	sp, #132	; 0x84
   10c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c40:	00034704 	.word	0x00034704

00010c44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   10c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c48:	b097      	sub	sp, #92	; 0x5c
   10c4a:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   10c4c:	680b      	ldr	r3, [r1, #0]
   10c4e:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   10c50:	2b01      	cmp	r3, #1
   10c52:	d00f      	beq.n	10c74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
   10c54:	6946      	ldr	r6, [r0, #20]
   10c56:	2501      	movs	r5, #1
   10c58:	9503      	str	r5, [sp, #12]
   10c5a:	9302      	str	r3, [sp, #8]
   10c5c:	4ba9      	ldr	r3, [pc, #676]	; (10f04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   10c5e:	9301      	str	r3, [sp, #4]
   10c60:	4ba9      	ldr	r3, [pc, #676]	; (10f08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
   10c62:	9300      	str	r3, [sp, #0]
   10c64:	235d      	movs	r3, #93	; 0x5d
   10c66:	4aa9      	ldr	r2, [pc, #676]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10c68:	49a9      	ldr	r1, [pc, #676]	; (10f10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10c6a:	47b0      	blx	r6
   10c6c:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
   10c6e:	b017      	add	sp, #92	; 0x5c
   10c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c74:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   10c76:	684b      	ldr	r3, [r1, #4]
   10c78:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   10c7a:	2b01      	cmp	r3, #1
   10c7c:	d00d      	beq.n	10c9a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
   10c7e:	6946      	ldr	r6, [r0, #20]
   10c80:	2501      	movs	r5, #1
   10c82:	9503      	str	r5, [sp, #12]
   10c84:	9302      	str	r3, [sp, #8]
   10c86:	4b9f      	ldr	r3, [pc, #636]	; (10f04 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
   10c88:	9301      	str	r3, [sp, #4]
   10c8a:	4ba2      	ldr	r3, [pc, #648]	; (10f14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
   10c8c:	9300      	str	r3, [sp, #0]
   10c8e:	235e      	movs	r3, #94	; 0x5e
   10c90:	4a9e      	ldr	r2, [pc, #632]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10c92:	499f      	ldr	r1, [pc, #636]	; (10f10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10c94:	47b0      	blx	r6
   10c96:	4628      	mov	r0, r5
   10c98:	e7e9      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
   10c9a:	2200      	movs	r2, #0
   10c9c:	f005 f89e 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
   10ca0:	4606      	mov	r6, r0
   10ca2:	b340      	cbz	r0, 10cf6 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   10ca4:	6883      	ldr	r3, [r0, #8]
   10ca6:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   10ca8:	2b00      	cmp	r3, #0
   10caa:	dd2e      	ble.n	10d0a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
   10cac:	2200      	movs	r2, #0
   10cae:	4629      	mov	r1, r5
   10cb0:	4620      	mov	r0, r4
   10cb2:	f005 f8b2 	bl	15e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
   10cb6:	9005      	str	r0, [sp, #20]
   10cb8:	2800      	cmp	r0, #0
   10cba:	d030      	beq.n	10d1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   10cbc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   10cc0:	f1b9 0f00 	cmp.w	r9, #0
   10cc4:	d035      	beq.n	10d32 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
   10cc6:	7833      	ldrb	r3, [r6, #0]
   10cc8:	2b07      	cmp	r3, #7
   10cca:	d03c      	beq.n	10d46 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
   10ccc:	9b05      	ldr	r3, [sp, #20]
   10cce:	781b      	ldrb	r3, [r3, #0]
   10cd0:	2b07      	cmp	r3, #7
   10cd2:	d05d      	beq.n	10d90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
   10cd4:	7832      	ldrb	r2, [r6, #0]
   10cd6:	4293      	cmp	r3, r2
   10cd8:	d069      	beq.n	10dae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10cda:	6965      	ldr	r5, [r4, #20]
   10cdc:	9303      	str	r3, [sp, #12]
   10cde:	9202      	str	r2, [sp, #8]
   10ce0:	4b8d      	ldr	r3, [pc, #564]	; (10f18 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
   10ce2:	9301      	str	r3, [sp, #4]
   10ce4:	4b8d      	ldr	r3, [pc, #564]	; (10f1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
   10ce6:	9300      	str	r3, [sp, #0]
   10ce8:	2378      	movs	r3, #120	; 0x78
   10cea:	4a88      	ldr	r2, [pc, #544]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10cec:	4988      	ldr	r1, [pc, #544]	; (10f10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10cee:	4620      	mov	r0, r4
   10cf0:	47a8      	blx	r5
   10cf2:	2001      	movs	r0, #1
   10cf4:	e7bb      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
   10cf6:	6965      	ldr	r5, [r4, #20]
   10cf8:	4b89      	ldr	r3, [pc, #548]	; (10f20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
   10cfa:	9300      	str	r3, [sp, #0]
   10cfc:	2360      	movs	r3, #96	; 0x60
   10cfe:	4a83      	ldr	r2, [pc, #524]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d00:	4988      	ldr	r1, [pc, #544]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d02:	4620      	mov	r0, r4
   10d04:	47a8      	blx	r5
   10d06:	2001      	movs	r0, #1
   10d08:	e7b1      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   10d0a:	6965      	ldr	r5, [r4, #20]
   10d0c:	4b86      	ldr	r3, [pc, #536]	; (10f28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   10d0e:	9300      	str	r3, [sp, #0]
   10d10:	2361      	movs	r3, #97	; 0x61
   10d12:	4a7e      	ldr	r2, [pc, #504]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d14:	4983      	ldr	r1, [pc, #524]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d16:	4620      	mov	r0, r4
   10d18:	47a8      	blx	r5
   10d1a:	2001      	movs	r0, #1
   10d1c:	e7a7      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
   10d1e:	6965      	ldr	r5, [r4, #20]
   10d20:	4b82      	ldr	r3, [pc, #520]	; (10f2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   10d22:	9300      	str	r3, [sp, #0]
   10d24:	2363      	movs	r3, #99	; 0x63
   10d26:	4a79      	ldr	r2, [pc, #484]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d28:	497e      	ldr	r1, [pc, #504]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d2a:	4620      	mov	r0, r4
   10d2c:	47a8      	blx	r5
   10d2e:	2001      	movs	r0, #1
   10d30:	e79d      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   10d32:	6965      	ldr	r5, [r4, #20]
   10d34:	4b7e      	ldr	r3, [pc, #504]	; (10f30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   10d36:	9300      	str	r3, [sp, #0]
   10d38:	2365      	movs	r3, #101	; 0x65
   10d3a:	4a74      	ldr	r2, [pc, #464]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d3c:	4979      	ldr	r1, [pc, #484]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d3e:	4620      	mov	r0, r4
   10d40:	47a8      	blx	r5
   10d42:	2001      	movs	r0, #1
   10d44:	e793      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
   10d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10d48:	f240 4102 	movw	r1, #1026	; 0x402
   10d4c:	4620      	mov	r0, r4
   10d4e:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10d50:	b150      	cbz	r0, 10d68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
   10d52:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
   10d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10d58:	f240 4102 	movw	r1, #1026	; 0x402
   10d5c:	4620      	mov	r0, r4
   10d5e:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10d60:	b160      	cbz	r0, 10d7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
   10d62:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
   10d66:	e7b1      	b.n	10ccc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
   10d68:	6965      	ldr	r5, [r4, #20]
   10d6a:	4b72      	ldr	r3, [pc, #456]	; (10f34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   10d6c:	9300      	str	r3, [sp, #0]
   10d6e:	236b      	movs	r3, #107	; 0x6b
   10d70:	4a66      	ldr	r2, [pc, #408]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d72:	496c      	ldr	r1, [pc, #432]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d74:	4620      	mov	r0, r4
   10d76:	47a8      	blx	r5
   10d78:	2001      	movs	r0, #1
   10d7a:	e778      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
   10d7c:	6965      	ldr	r5, [r4, #20]
   10d7e:	4b6e      	ldr	r3, [pc, #440]	; (10f38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   10d80:	9300      	str	r3, [sp, #0]
   10d82:	236f      	movs	r3, #111	; 0x6f
   10d84:	4a61      	ldr	r2, [pc, #388]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10d86:	4967      	ldr	r1, [pc, #412]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10d88:	4620      	mov	r0, r4
   10d8a:	47a8      	blx	r5
   10d8c:	2001      	movs	r0, #1
   10d8e:	e76e      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
   10d90:	7833      	ldrb	r3, [r6, #0]
   10d92:	2b09      	cmp	r3, #9
   10d94:	d00b      	beq.n	10dae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10d96:	2b07      	cmp	r3, #7
   10d98:	d009      	beq.n	10dae <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   10d9a:	6965      	ldr	r5, [r4, #20]
   10d9c:	4b67      	ldr	r3, [pc, #412]	; (10f3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   10d9e:	9300      	str	r3, [sp, #0]
   10da0:	2375      	movs	r3, #117	; 0x75
   10da2:	4a5a      	ldr	r2, [pc, #360]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10da4:	495f      	ldr	r1, [pc, #380]	; (10f24 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
   10da6:	4620      	mov	r0, r4
   10da8:	47a8      	blx	r5
   10daa:	2001      	movs	r0, #1
   10dac:	e75f      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
   10dae:	7833      	ldrb	r3, [r6, #0]
   10db0:	2b07      	cmp	r3, #7
   10db2:	f040 81b7 	bne.w	11124 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   10db6:	9b05      	ldr	r3, [sp, #20]
   10db8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   10dbc:	f1bb 0f00 	cmp.w	fp, #0
   10dc0:	d00f      	beq.n	10de2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
   10dc2:	6965      	ldr	r5, [r4, #20]
   10dc4:	2300      	movs	r3, #0
   10dc6:	9303      	str	r3, [sp, #12]
   10dc8:	f8cd b008 	str.w	fp, [sp, #8]
   10dcc:	4b5c      	ldr	r3, [pc, #368]	; (10f40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   10dce:	9301      	str	r3, [sp, #4]
   10dd0:	4b5c      	ldr	r3, [pc, #368]	; (10f44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   10dd2:	9300      	str	r3, [sp, #0]
   10dd4:	237d      	movs	r3, #125	; 0x7d
   10dd6:	4a4d      	ldr	r2, [pc, #308]	; (10f0c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
   10dd8:	494d      	ldr	r1, [pc, #308]	; (10f10 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
   10dda:	4620      	mov	r0, r4
   10ddc:	47a8      	blx	r5
   10dde:	2001      	movs	r0, #1
   10de0:	e745      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   10de2:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
   10de6:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
   10de8:	465f      	mov	r7, fp
   10dea:	f8cd 901c 	str.w	r9, [sp, #28]
   10dee:	f8cd b020 	str.w	fp, [sp, #32]
   10df2:	469b      	mov	fp, r3
   10df4:	9609      	str	r6, [sp, #36]	; 0x24
   10df6:	e007      	b.n	10e08 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
   10df8:	ae14      	add	r6, sp, #80	; 0x50
   10dfa:	e079      	b.n	10ef0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10dfc:	6830      	ldr	r0, [r6, #0]
   10dfe:	f7f0 f94d 	bl	109c <__aeabi_f2iz>
   10e02:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10e06:	4657      	mov	r7, sl
   10e08:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   10e0c:	f280 80a4 	bge.w	10f58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10e10:	4638      	mov	r0, r7
   10e12:	f7ef ff29 	bl	c68 <__aeabi_i2f>
   10e16:	494c      	ldr	r1, [pc, #304]	; (10f48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10e18:	f7ef ff7a 	bl	d10 <__aeabi_fmul>
   10e1c:	494b      	ldr	r1, [pc, #300]	; (10f4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10e1e:	f7ef fe6d 	bl	afc <__aeabi_fsub>
   10e22:	4606      	mov	r6, r0
   10e24:	f007 fbb6 	bl	18594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e28:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e2c:	f7ef ff70 	bl	d10 <__aeabi_fmul>
   10e30:	f7ef faf6 	bl	420 <__aeabi_f2d>
   10e34:	f001 fc52 	bl	126dc <round>
   10e38:	f7ef fe0c 	bl	a54 <__aeabi_d2f>
   10e3c:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10e3e:	f107 0a01 	add.w	sl, r7, #1
   10e42:	4650      	mov	r0, sl
   10e44:	f7ef ff10 	bl	c68 <__aeabi_i2f>
   10e48:	493f      	ldr	r1, [pc, #252]	; (10f48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   10e4a:	f7ef ff61 	bl	d10 <__aeabi_fmul>
   10e4e:	493f      	ldr	r1, [pc, #252]	; (10f4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   10e50:	f7ef fe54 	bl	afc <__aeabi_fsub>
   10e54:	f007 fb9e 	bl	18594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e58:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e5c:	f7ef ff58 	bl	d10 <__aeabi_fmul>
   10e60:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   10e62:	4630      	mov	r0, r6
   10e64:	f007 fb96 	bl	18594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10e68:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10e6c:	f7ef ff50 	bl	d10 <__aeabi_fmul>
   10e70:	f7ef fad6 	bl	420 <__aeabi_f2d>
   10e74:	f001 fc32 	bl	126dc <round>
   10e78:	f7ef fdec 	bl	a54 <__aeabi_d2f>
   10e7c:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   10e7e:	4648      	mov	r0, r9
   10e80:	f7ef fe3e 	bl	b00 <__addsf3>
   10e84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10e88:	f7ef ff42 	bl	d10 <__aeabi_fmul>
   10e8c:	f7ef fac8 	bl	420 <__aeabi_f2d>
   10e90:	f001 fc24 	bl	126dc <round>
   10e94:	f7ef fdde 	bl	a54 <__aeabi_d2f>
   10e98:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   10e9a:	492d      	ldr	r1, [pc, #180]	; (10f50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   10e9c:	4630      	mov	r0, r6
   10e9e:	f7ef fe2f 	bl	b00 <__addsf3>
   10ea2:	f007 fb77 	bl	18594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10ea6:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10eaa:	f7ef ff31 	bl	d10 <__aeabi_fmul>
   10eae:	f7ef fab7 	bl	420 <__aeabi_f2d>
   10eb2:	f001 fc13 	bl	126dc <round>
   10eb6:	f7ef fdcd 	bl	a54 <__aeabi_d2f>
   10eba:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   10ebc:	4648      	mov	r0, r9
   10ebe:	f7ef fe1d 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   10ec2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   10ec6:	f7ef ff23 	bl	d10 <__aeabi_fmul>
   10eca:	f7ef faa9 	bl	420 <__aeabi_f2d>
   10ece:	f001 fc05 	bl	126dc <round>
   10ed2:	f7ef fdbf 	bl	a54 <__aeabi_d2f>
   10ed6:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10ed8:	4640      	mov	r0, r8
   10eda:	f7ef fe0f 	bl	afc <__aeabi_fsub>
   10ede:	9015      	str	r0, [sp, #84]	; 0x54
   10ee0:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10ee4:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
   10ee6:	f7f0 f8b1 	bl	104c <__aeabi_fcmplt>
   10eea:	2800      	cmp	r0, #0
   10eec:	d184      	bne.n	10df8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
   10eee:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
   10ef0:	4918      	ldr	r1, [pc, #96]	; (10f54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   10ef2:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
   10ef4:	6830      	ldr	r0, [r6, #0]
   10ef6:	f7f0 f8c7 	bl	1088 <__aeabi_fcmpgt>
   10efa:	2800      	cmp	r0, #0
   10efc:	f43f af7e 	beq.w	10dfc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
   10f00:	ae13      	add	r6, sp, #76	; 0x4c
   10f02:	e77b      	b.n	10dfc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
   10f04:	00034fd0 	.word	0x00034fd0
   10f08:	00034fa8 	.word	0x00034fa8
   10f0c:	00034ea0 	.word	0x00034ea0
   10f10:	000341d4 	.word	0x000341d4
   10f14:	00034df0 	.word	0x00034df0
   10f18:	0003488c 	.word	0x0003488c
   10f1c:	0003489c 	.word	0x0003489c
   10f20:	000349b0 	.word	0x000349b0
   10f24:	00033f14 	.word	0x00033f14
   10f28:	00034fb8 	.word	0x00034fb8
   10f2c:	0003461c 	.word	0x0003461c
   10f30:	00034fd4 	.word	0x00034fd4
   10f34:	00034ff0 	.word	0x00034ff0
   10f38:	00035008 	.word	0x00035008
   10f3c:	00034274 	.word	0x00034274
   10f40:	00034738 	.word	0x00034738
   10f44:	00034ef8 	.word	0x00034ef8
   10f48:	3ca00000 	.word	0x3ca00000
   10f4c:	41200000 	.word	0x41200000
   10f50:	3c200000 	.word	0x3c200000
   10f54:	46fffe00 	.word	0x46fffe00
   10f58:	f8dd 901c 	ldr.w	r9, [sp, #28]
   10f5c:	f8dd b020 	ldr.w	fp, [sp, #32]
   10f60:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   10f62:	2000      	movs	r0, #0
   10f64:	f007 fb16 	bl	18594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
   10f68:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10f6c:	f7ef fed0 	bl	d10 <__aeabi_fmul>
   10f70:	f7ef fa56 	bl	420 <__aeabi_f2d>
   10f74:	f001 fbb2 	bl	126dc <round>
   10f78:	f7ef fd6c 	bl	a54 <__aeabi_d2f>
   10f7c:	9012      	str	r0, [sp, #72]	; 0x48
   10f7e:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   10f82:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
   10f84:	f7f0 f862 	bl	104c <__aeabi_fcmplt>
   10f88:	b9a0      	cbnz	r0, 10fb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
   10f8a:	af12      	add	r7, sp, #72	; 0x48
   10f8c:	496c      	ldr	r1, [pc, #432]	; (11140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   10f8e:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
   10f90:	6838      	ldr	r0, [r7, #0]
   10f92:	f7f0 f879 	bl	1088 <__aeabi_fcmpgt>
   10f96:	b978      	cbnz	r0, 10fb8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
   10f98:	6838      	ldr	r0, [r7, #0]
   10f9a:	f7f0 f87f 	bl	109c <__aeabi_f2iz>
   10f9e:	9b06      	ldr	r3, [sp, #24]
   10fa0:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   10fa4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   10fa8:	9306      	str	r3, [sp, #24]
   10faa:	f8cd 901c 	str.w	r9, [sp, #28]
   10fae:	469a      	mov	sl, r3
   10fb0:	9608      	str	r6, [sp, #32]
   10fb2:	e00b      	b.n	10fcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
   10fb4:	af11      	add	r7, sp, #68	; 0x44
   10fb6:	e7e9      	b.n	10f8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
   10fb8:	af10      	add	r7, sp, #64	; 0x40
   10fba:	e7ed      	b.n	10f98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
   10fbc:	ae0e      	add	r6, sp, #56	; 0x38
   10fbe:	e07b      	b.n	110b8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   10fc0:	6830      	ldr	r0, [r6, #0]
   10fc2:	f7f0 f86b 	bl	109c <__aeabi_f2iz>
   10fc6:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
   10fca:	46cb      	mov	fp, r9
   10fcc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   10fd0:	da7c      	bge.n	110cc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
   10fd2:	4658      	mov	r0, fp
   10fd4:	f7ef fe48 	bl	c68 <__aeabi_i2f>
   10fd8:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   10fdc:	f7ef fe98 	bl	d10 <__aeabi_fmul>
   10fe0:	2100      	movs	r1, #0
   10fe2:	f7ef fd8d 	bl	b00 <__addsf3>
   10fe6:	4606      	mov	r6, r0
   10fe8:	f007 fac9 	bl	1857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   10fec:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   10ff0:	f7ef fe8e 	bl	d10 <__aeabi_fmul>
   10ff4:	f7ef fa14 	bl	420 <__aeabi_f2d>
   10ff8:	f001 fb70 	bl	126dc <round>
   10ffc:	f7ef fd2a 	bl	a54 <__aeabi_d2f>
   11000:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   11002:	f10b 0901 	add.w	r9, fp, #1
   11006:	4648      	mov	r0, r9
   11008:	f7ef fe2e 	bl	c68 <__aeabi_i2f>
   1100c:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   11010:	f7ef fe7e 	bl	d10 <__aeabi_fmul>
   11014:	2100      	movs	r1, #0
   11016:	f7ef fd73 	bl	b00 <__addsf3>
   1101a:	f007 fab0 	bl	1857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1101e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11022:	f7ef fe75 	bl	d10 <__aeabi_fmul>
   11026:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
   11028:	4630      	mov	r0, r6
   1102a:	f007 faa8 	bl	1857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1102e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11032:	f7ef fe6d 	bl	d10 <__aeabi_fmul>
   11036:	f7ef f9f3 	bl	420 <__aeabi_f2d>
   1103a:	f001 fb4f 	bl	126dc <round>
   1103e:	f7ef fd09 	bl	a54 <__aeabi_d2f>
   11042:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
   11044:	4640      	mov	r0, r8
   11046:	f7ef fd5b 	bl	b00 <__addsf3>
   1104a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1104e:	f7ef fe5f 	bl	d10 <__aeabi_fmul>
   11052:	f7ef f9e5 	bl	420 <__aeabi_f2d>
   11056:	f001 fb41 	bl	126dc <round>
   1105a:	f7ef fcfb 	bl	a54 <__aeabi_d2f>
   1105e:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
   11060:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
   11064:	4630      	mov	r0, r6
   11066:	f7ef fd4b 	bl	b00 <__addsf3>
   1106a:	f007 fa88 	bl	1857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   1106e:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   11072:	f7ef fe4d 	bl	d10 <__aeabi_fmul>
   11076:	f7ef f9d3 	bl	420 <__aeabi_f2d>
   1107a:	f001 fb2f 	bl	126dc <round>
   1107e:	f7ef fce9 	bl	a54 <__aeabi_d2f>
   11082:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
   11084:	4640      	mov	r0, r8
   11086:	f7ef fd39 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
   1108a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   1108e:	f7ef fe3f 	bl	d10 <__aeabi_fmul>
   11092:	f7ef f9c5 	bl	420 <__aeabi_f2d>
   11096:	f001 fb21 	bl	126dc <round>
   1109a:	f7ef fcdb 	bl	a54 <__aeabi_d2f>
   1109e:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
   110a0:	4638      	mov	r0, r7
   110a2:	f7ef fd2b 	bl	afc <__aeabi_fsub>
   110a6:	900f      	str	r0, [sp, #60]	; 0x3c
   110a8:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   110ac:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
   110ae:	f7ef ffcd 	bl	104c <__aeabi_fcmplt>
   110b2:	2800      	cmp	r0, #0
   110b4:	d182      	bne.n	10fbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
   110b6:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
   110b8:	4921      	ldr	r1, [pc, #132]	; (11140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   110ba:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
   110bc:	6830      	ldr	r0, [r6, #0]
   110be:	f7ef ffe3 	bl	1088 <__aeabi_fcmpgt>
   110c2:	2800      	cmp	r0, #0
   110c4:	f43f af7c 	beq.w	10fc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
   110c8:	ae0d      	add	r6, sp, #52	; 0x34
   110ca:	e779      	b.n	10fc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
   110cc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   110d0:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
   110d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   110d6:	f007 fa52 	bl	1857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
   110da:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   110de:	f7ef fe17 	bl	d10 <__aeabi_fmul>
   110e2:	f7ef f99d 	bl	420 <__aeabi_f2d>
   110e6:	f001 faf9 	bl	126dc <round>
   110ea:	f7ef fcb3 	bl	a54 <__aeabi_d2f>
   110ee:	900c      	str	r0, [sp, #48]	; 0x30
   110f0:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
   110f4:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
   110f6:	f7ef ffa9 	bl	104c <__aeabi_fcmplt>
   110fa:	b9e0      	cbnz	r0, 11136 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
   110fc:	af0c      	add	r7, sp, #48	; 0x30
   110fe:	4910      	ldr	r1, [pc, #64]	; (11140 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
   11100:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
   11102:	6838      	ldr	r0, [r7, #0]
   11104:	f7ef ffc0 	bl	1088 <__aeabi_fcmpgt>
   11108:	b9b8      	cbnz	r0, 1113a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
   1110a:	6838      	ldr	r0, [r7, #0]
   1110c:	f7ef ffc6 	bl	109c <__aeabi_f2iz>
   11110:	9b06      	ldr	r3, [sp, #24]
   11112:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
   11116:	9a05      	ldr	r2, [sp, #20]
   11118:	6913      	ldr	r3, [r2, #16]
   1111a:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
   1111e:	68d3      	ldr	r3, [r2, #12]
   11120:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
   11124:	f8cd 9000 	str.w	r9, [sp]
   11128:	696b      	ldr	r3, [r5, #20]
   1112a:	9a05      	ldr	r2, [sp, #20]
   1112c:	4631      	mov	r1, r6
   1112e:	4620      	mov	r0, r4
   11130:	f7f0 fa5e 	bl	15f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
   11134:	e59b      	b.n	10c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
   11136:	af0b      	add	r7, sp, #44	; 0x2c
   11138:	e7e1      	b.n	110fe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
   1113a:	af0a      	add	r7, sp, #40	; 0x28
   1113c:	e7e5      	b.n	1110a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
   1113e:	bf00      	nop
   11140:	46fffe00 	.word	0x46fffe00

00011144 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   11144:	4b03      	ldr	r3, [pc, #12]	; (11154 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   11146:	4a04      	ldr	r2, [pc, #16]	; (11158 <z_device_state_init+0x14>)
   11148:	4293      	cmp	r3, r2
   1114a:	d201      	bcs.n	11150 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1114c:	3318      	adds	r3, #24
   1114e:	e7fa      	b.n	11146 <z_device_state_init+0x2>
	}
}
   11150:	4770      	bx	lr
   11152:	bf00      	nop
   11154:	00019720 	.word	0x00019720
   11158:	00019798 	.word	0x00019798

0001115c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1115c:	b570      	push	{r4, r5, r6, lr}
   1115e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   11160:	4b11      	ldr	r3, [pc, #68]	; (111a8 <z_sys_init_run_level+0x4c>)
   11162:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   11166:	e009      	b.n	1117c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   11168:	4240      	negs	r0, r0
   1116a:	e017      	b.n	1119c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1116c:	68eb      	ldr	r3, [r5, #12]
   1116e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   11170:	68ea      	ldr	r2, [r5, #12]
   11172:	7853      	ldrb	r3, [r2, #1]
   11174:	f043 0301 	orr.w	r3, r3, #1
   11178:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1117a:	3408      	adds	r4, #8
   1117c:	1c73      	adds	r3, r6, #1
   1117e:	4a0a      	ldr	r2, [pc, #40]	; (111a8 <z_sys_init_run_level+0x4c>)
   11180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11184:	42a3      	cmp	r3, r4
   11186:	d90d      	bls.n	111a4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   11188:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1118a:	6823      	ldr	r3, [r4, #0]
   1118c:	4628      	mov	r0, r5
   1118e:	4798      	blx	r3
		if (dev != NULL) {
   11190:	2d00      	cmp	r5, #0
   11192:	d0f2      	beq.n	1117a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   11194:	2800      	cmp	r0, #0
   11196:	d0eb      	beq.n	11170 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   11198:	2800      	cmp	r0, #0
   1119a:	dbe5      	blt.n	11168 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1119c:	28ff      	cmp	r0, #255	; 0xff
   1119e:	dde5      	ble.n	1116c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   111a0:	20ff      	movs	r0, #255	; 0xff
   111a2:	e7e3      	b.n	1116c <z_sys_init_run_level+0x10>
		}
	}
}
   111a4:	bd70      	pop	{r4, r5, r6, pc}
   111a6:	bf00      	nop
   111a8:	0003502c 	.word	0x0003502c

000111ac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   111ac:	4b01      	ldr	r3, [pc, #4]	; (111b4 <z_impl_z_errno+0x8>)
   111ae:	6898      	ldr	r0, [r3, #8]
}
   111b0:	3094      	adds	r0, #148	; 0x94
   111b2:	4770      	bx	lr
   111b4:	20015a3c 	.word	0x20015a3c

000111b8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   111b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ba:	b089      	sub	sp, #36	; 0x24
   111bc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   111be:	4b15      	ldr	r3, [pc, #84]	; (11214 <init_idle_thread+0x5c>)
   111c0:	25b0      	movs	r5, #176	; 0xb0
   111c2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   111c6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   111ca:	4e13      	ldr	r6, [pc, #76]	; (11218 <init_idle_thread+0x60>)
   111cc:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   111d0:	af06      	add	r7, sp, #24
   111d2:	4603      	mov	r3, r0
   111d4:	4a11      	ldr	r2, [pc, #68]	; (1121c <init_idle_thread+0x64>)
   111d6:	2108      	movs	r1, #8
   111d8:	4638      	mov	r0, r7
   111da:	f002 ff24 	bl	14026 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   111de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   111e2:	480f      	ldr	r0, [pc, #60]	; (11220 <init_idle_thread+0x68>)
   111e4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   111e8:	9705      	str	r7, [sp, #20]
   111ea:	2301      	movs	r3, #1
   111ec:	9304      	str	r3, [sp, #16]
   111ee:	230f      	movs	r3, #15
   111f0:	9303      	str	r3, [sp, #12]
   111f2:	2300      	movs	r3, #0
   111f4:	9302      	str	r3, [sp, #8]
   111f6:	9301      	str	r3, [sp, #4]
   111f8:	9400      	str	r4, [sp, #0]
   111fa:	4b0a      	ldr	r3, [pc, #40]	; (11224 <init_idle_thread+0x6c>)
   111fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11200:	4631      	mov	r1, r6
   11202:	4628      	mov	r0, r5
   11204:	f000 f946 	bl	11494 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11208:	7b6b      	ldrb	r3, [r5, #13]
   1120a:	f023 0304 	bic.w	r3, r3, #4
   1120e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   11210:	b009      	add	sp, #36	; 0x24
   11212:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11214:	20000360 	.word	0x20000360
   11218:	2001dc70 	.word	0x2001dc70
   1121c:	00035044 	.word	0x00035044
   11220:	20015a3c 	.word	0x20015a3c
   11224:	000186ed 	.word	0x000186ed

00011228 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   11228:	b570      	push	{r4, r5, r6, lr}
   1122a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1122c:	f000 fdfe 	bl	11e2c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   11230:	4d1a      	ldr	r5, [pc, #104]	; (1129c <prepare_multithreading+0x74>)
   11232:	4b1b      	ldr	r3, [pc, #108]	; (112a0 <prepare_multithreading+0x78>)
   11234:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   11236:	4b1b      	ldr	r3, [pc, #108]	; (112a4 <prepare_multithreading+0x7c>)
   11238:	9305      	str	r3, [sp, #20]
   1123a:	2301      	movs	r3, #1
   1123c:	9304      	str	r3, [sp, #16]
   1123e:	2400      	movs	r4, #0
   11240:	9403      	str	r4, [sp, #12]
   11242:	9402      	str	r4, [sp, #8]
   11244:	9401      	str	r4, [sp, #4]
   11246:	9400      	str	r4, [sp, #0]
   11248:	4b17      	ldr	r3, [pc, #92]	; (112a8 <prepare_multithreading+0x80>)
   1124a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1124e:	4917      	ldr	r1, [pc, #92]	; (112ac <prepare_multithreading+0x84>)
   11250:	4628      	mov	r0, r5
   11252:	f000 f91f 	bl	11494 <z_setup_new_thread>
   11256:	4606      	mov	r6, r0
   11258:	7b6b      	ldrb	r3, [r5, #13]
   1125a:	f023 0304 	bic.w	r3, r3, #4
   1125e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   11260:	4628      	mov	r0, r5
   11262:	f007 faad 	bl	187c0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   11266:	2c00      	cmp	r4, #0
   11268:	dd02      	ble.n	11270 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1126a:	4630      	mov	r0, r6
   1126c:	b006      	add	sp, #24
   1126e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   11270:	4620      	mov	r0, r4
   11272:	f7ff ffa1 	bl	111b8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   11276:	4b0e      	ldr	r3, [pc, #56]	; (112b0 <prepare_multithreading+0x88>)
   11278:	22b0      	movs	r2, #176	; 0xb0
   1127a:	fb02 3204 	mla	r2, r2, r4, r3
   1127e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   11282:	4b07      	ldr	r3, [pc, #28]	; (112a0 <prepare_multithreading+0x78>)
   11284:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11288:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1128a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1128c:	4a09      	ldr	r2, [pc, #36]	; (112b4 <prepare_multithreading+0x8c>)
   1128e:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   11292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   11296:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   11298:	3401      	adds	r4, #1
   1129a:	e7e4      	b.n	11266 <prepare_multithreading+0x3e>
   1129c:	20000410 	.word	0x20000410
   112a0:	20015a3c 	.word	0x20015a3c
   112a4:	00035050 	.word	0x00035050
   112a8:	000112b9 	.word	0x000112b9
   112ac:	20015c70 	.word	0x20015c70
   112b0:	20000360 	.word	0x20000360
   112b4:	2001ddb0 	.word	0x2001ddb0

000112b8 <bg_thread_main>:
{
   112b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   112ba:	4b0b      	ldr	r3, [pc, #44]	; (112e8 <bg_thread_main+0x30>)
   112bc:	2201      	movs	r2, #1
   112be:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   112c0:	2002      	movs	r0, #2
   112c2:	f7ff ff4b 	bl	1115c <z_sys_init_run_level>
	boot_banner();
   112c6:	f001 f83b 	bl	12340 <boot_banner>
	z_cpp_init_static();
   112ca:	f003 fabd 	bl	14848 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   112ce:	2003      	movs	r0, #3
   112d0:	f7ff ff44 	bl	1115c <z_sys_init_run_level>
	z_init_static_threads();
   112d4:	f000 f942 	bl	1155c <z_init_static_threads>
	main();
   112d8:	f002 fe20 	bl	13f1c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   112dc:	4a03      	ldr	r2, [pc, #12]	; (112ec <bg_thread_main+0x34>)
   112de:	7b13      	ldrb	r3, [r2, #12]
   112e0:	f023 0301 	bic.w	r3, r3, #1
   112e4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   112e6:	bd08      	pop	{r3, pc}
   112e8:	20015aab 	.word	0x20015aab
   112ec:	20000410 	.word	0x20000410

000112f0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   112f0:	b508      	push	{r3, lr}
   112f2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   112f4:	4a01      	ldr	r2, [pc, #4]	; (112fc <switch_to_main_thread+0xc>)
   112f6:	4802      	ldr	r0, [pc, #8]	; (11300 <switch_to_main_thread+0x10>)
   112f8:	f7f3 f85a 	bl	43b0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   112fc:	000112b9 	.word	0x000112b9
   11300:	20000410 	.word	0x20000410

00011304 <z_bss_zero>:
{
   11304:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   11306:	4803      	ldr	r0, [pc, #12]	; (11314 <z_bss_zero+0x10>)
   11308:	4a03      	ldr	r2, [pc, #12]	; (11318 <z_bss_zero+0x14>)
   1130a:	1a12      	subs	r2, r2, r0
   1130c:	2100      	movs	r1, #0
   1130e:	f007 fbf5 	bl	18afc <memset>
}
   11312:	bd08      	pop	{r3, pc}
   11314:	20000340 	.word	0x20000340
   11318:	20015c6c 	.word	0x20015c6c

0001131c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1131c:	b500      	push	{lr}
   1131e:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   11320:	4b1c      	ldr	r3, [pc, #112]	; (11394 <z_cstart+0x78>)
	uint32_t msp =
   11322:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   11326:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1132a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1132e:	4c1a      	ldr	r4, [pc, #104]	; (11398 <z_cstart+0x7c>)
   11330:	23e0      	movs	r3, #224	; 0xe0
   11332:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11336:	2500      	movs	r5, #0
   11338:	77e5      	strb	r5, [r4, #31]
   1133a:	7625      	strb	r5, [r4, #24]
   1133c:	7665      	strb	r5, [r4, #25]
   1133e:	76a5      	strb	r5, [r4, #26]
   11340:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   11344:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11346:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1134a:	6263      	str	r3, [r4, #36]	; 0x24
   1134c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   11350:	f7f3 f972 	bl	4638 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   11354:	f7f2 ff40 	bl	41d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   11358:	f04f 33ff 	mov.w	r3, #4294967295
   1135c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1135e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   11360:	f7f3 fba2 	bl	4aa8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   11364:	f7f3 fa2a 	bl	47bc <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   11368:	2401      	movs	r4, #1
   1136a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1136e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   11372:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
   11374:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   11376:	4b09      	ldr	r3, [pc, #36]	; (1139c <z_cstart+0x80>)
   11378:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1137c:	f7ff fee2 	bl	11144 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   11380:	4628      	mov	r0, r5
   11382:	f7ff feeb 	bl	1115c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   11386:	4620      	mov	r0, r4
   11388:	f7ff fee8 	bl	1115c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1138c:	f7ff ff4c 	bl	11228 <prepare_multithreading>
   11390:	f7ff ffae 	bl	112f0 <switch_to_main_thread>
   11394:	2001ddb0 	.word	0x2001ddb0
   11398:	e000ed00 	.word	0xe000ed00
   1139c:	20015a3c 	.word	0x20015a3c

000113a0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   113a0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113a2:	4c06      	ldr	r4, [pc, #24]	; (113bc <init_mem_slab_module+0x1c>)
	int rc = 0;
   113a4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113a6:	4b06      	ldr	r3, [pc, #24]	; (113c0 <init_mem_slab_module+0x20>)
   113a8:	429c      	cmp	r4, r3
   113aa:	d206      	bcs.n	113ba <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   113ac:	4620      	mov	r0, r4
   113ae:	f007 f924 	bl	185fa <create_free_list>
		if (rc < 0) {
   113b2:	2800      	cmp	r0, #0
   113b4:	db01      	blt.n	113ba <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   113b6:	3420      	adds	r4, #32
   113b8:	e7f5      	b.n	113a6 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   113ba:	bd10      	pop	{r4, pc}
   113bc:	200002b4 	.word	0x200002b4
   113c0:	200002b4 	.word	0x200002b4

000113c4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   113c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   113c6:	b083      	sub	sp, #12
   113c8:	460c      	mov	r4, r1
   113ca:	461f      	mov	r7, r3
   113cc:	f04f 0320 	mov.w	r3, #32
   113d0:	f3ef 8111 	mrs	r1, BASEPRI
   113d4:	f383 8812 	msr	BASEPRI_MAX, r3
   113d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   113dc:	6983      	ldr	r3, [r0, #24]
   113de:	b16b      	cbz	r3, 113fc <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   113e0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   113e2:	6983      	ldr	r3, [r0, #24]
   113e4:	681b      	ldr	r3, [r3, #0]
   113e6:	6183      	str	r3, [r0, #24]
		slab->num_used++;
   113e8:	69c3      	ldr	r3, [r0, #28]
   113ea:	3301      	adds	r3, #1
   113ec:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   113ee:	2000      	movs	r0, #0
	__asm__ volatile(
   113f0:	f381 8811 	msr	BASEPRI, r1
   113f4:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   113f8:	b003      	add	sp, #12
   113fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113fc:	4616      	mov	r6, r2
   113fe:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   11402:	ea56 0307 	orrs.w	r3, r6, r7
   11406:	d104      	bne.n	11412 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   11408:	2300      	movs	r3, #0
   1140a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1140c:	f06f 000b 	mvn.w	r0, #11
   11410:	e7ee      	b.n	113f0 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   11412:	e9cd 6700 	strd	r6, r7, [sp]
   11416:	4602      	mov	r2, r0
   11418:	4628      	mov	r0, r5
   1141a:	f000 fbdd 	bl	11bd8 <z_pend_curr>
		if (result == 0) {
   1141e:	2800      	cmp	r0, #0
   11420:	d1ea      	bne.n	113f8 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   11422:	4b02      	ldr	r3, [pc, #8]	; (1142c <k_mem_slab_alloc+0x68>)
   11424:	689b      	ldr	r3, [r3, #8]
   11426:	695b      	ldr	r3, [r3, #20]
   11428:	6023      	str	r3, [r4, #0]
		return result;
   1142a:	e7e5      	b.n	113f8 <k_mem_slab_alloc+0x34>
   1142c:	20015a3c 	.word	0x20015a3c

00011430 <z_thread_monitor_exit>:
	__asm__ volatile(
   11430:	f04f 0320 	mov.w	r3, #32
   11434:	f3ef 8111 	mrs	r1, BASEPRI
   11438:	f383 8812 	msr	BASEPRI_MAX, r3
   1143c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   11440:	4b0a      	ldr	r3, [pc, #40]	; (1146c <z_thread_monitor_exit+0x3c>)
   11442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11444:	4283      	cmp	r3, r0
   11446:	d104      	bne.n	11452 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   11448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1144a:	4b08      	ldr	r3, [pc, #32]	; (1146c <z_thread_monitor_exit+0x3c>)
   1144c:	629a      	str	r2, [r3, #40]	; 0x28
   1144e:	e007      	b.n	11460 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   11450:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   11452:	b113      	cbz	r3, 1145a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   11454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
   11456:	4282      	cmp	r2, r0
   11458:	d1fa      	bne.n	11450 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1145a:	b10b      	cbz	r3, 11460 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1145c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   1145e:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
   11460:	f381 8811 	msr	BASEPRI, r1
   11464:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   11468:	4770      	bx	lr
   1146a:	bf00      	nop
   1146c:	20015a3c 	.word	0x20015a3c

00011470 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   11470:	b538      	push	{r3, r4, r5, lr}
   11472:	4614      	mov	r4, r2
   11474:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   11476:	ea54 0305 	orrs.w	r3, r4, r5
   1147a:	d102      	bne.n	11482 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1147c:	f007 f921 	bl	186c2 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   11480:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11482:	462b      	mov	r3, r5
   11484:	4902      	ldr	r1, [pc, #8]	; (11490 <schedule_new_thread+0x20>)
   11486:	3018      	adds	r0, #24
   11488:	f000 fe2e 	bl	120e8 <z_add_timeout>
   1148c:	e7f8      	b.n	11480 <schedule_new_thread+0x10>
   1148e:	bf00      	nop
   11490:	000187f9 	.word	0x000187f9

00011494 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   11494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11498:	b085      	sub	sp, #20
   1149a:	4604      	mov	r4, r0
   1149c:	460f      	mov	r7, r1
   1149e:	4615      	mov	r5, r2
   114a0:	461e      	mov	r6, r3
   114a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   114a6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   114aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   114ae:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   114b2:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   114b6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   114b8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   114ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   114bc:	2204      	movs	r2, #4
   114be:	9911      	ldr	r1, [sp, #68]	; 0x44
   114c0:	f007 f903 	bl	186ca <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   114c4:	462a      	mov	r2, r5
   114c6:	4639      	mov	r1, r7
   114c8:	4620      	mov	r0, r4
   114ca:	f007 f8e8 	bl	1869e <setup_thread_stack>
   114ce:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   114d0:	f8cd 8008 	str.w	r8, [sp, #8]
   114d4:	f8cd 9004 	str.w	r9, [sp, #4]
   114d8:	f8cd a000 	str.w	sl, [sp]
   114dc:	4633      	mov	r3, r6
   114de:	4602      	mov	r2, r0
   114e0:	4639      	mov	r1, r7
   114e2:	4620      	mov	r0, r4
   114e4:	f7f2 ff44 	bl	4370 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   114e8:	2300      	movs	r3, #0
   114ea:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   114ec:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
   114ee:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   114f2:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   114f6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
   114fa:	f04f 0320 	mov.w	r3, #32
   114fe:	f3ef 8211 	mrs	r2, BASEPRI
   11502:	f383 8812 	msr	BASEPRI_MAX, r3
   11506:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1150a:	4b13      	ldr	r3, [pc, #76]	; (11558 <z_setup_new_thread+0xc4>)
   1150c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1150e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
   11510:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   11512:	f382 8811 	msr	BASEPRI, r2
   11516:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1151a:	f1bb 0f00 	cmp.w	fp, #0
   1151e:	d013      	beq.n	11548 <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   11520:	221f      	movs	r2, #31
   11522:	4659      	mov	r1, fp
   11524:	f104 0074 	add.w	r0, r4, #116	; 0x74
   11528:	f007 fc61 	bl	18dee <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1152c:	2300      	movs	r3, #0
   1152e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   11532:	4b09      	ldr	r3, [pc, #36]	; (11558 <z_setup_new_thread+0xc4>)
   11534:	689b      	ldr	r3, [r3, #8]
   11536:	b15b      	cbz	r3, 11550 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   11538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1153c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   11540:	4628      	mov	r0, r5
   11542:	b005      	add	sp, #20
   11544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   11548:	2300      	movs	r3, #0
   1154a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1154e:	e7f0      	b.n	11532 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   11550:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
   11554:	e7f4      	b.n	11540 <z_setup_new_thread+0xac>
   11556:	bf00      	nop
   11558:	20015a3c 	.word	0x20015a3c

0001155c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1155c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11560:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   11562:	4c23      	ldr	r4, [pc, #140]	; (115f0 <z_init_static_threads+0x94>)
   11564:	4b23      	ldr	r3, [pc, #140]	; (115f4 <z_init_static_threads+0x98>)
   11566:	429c      	cmp	r4, r3
   11568:	d215      	bcs.n	11596 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1156a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1156c:	9305      	str	r3, [sp, #20]
   1156e:	6a23      	ldr	r3, [r4, #32]
   11570:	9304      	str	r3, [sp, #16]
   11572:	69e3      	ldr	r3, [r4, #28]
   11574:	9303      	str	r3, [sp, #12]
   11576:	69a3      	ldr	r3, [r4, #24]
   11578:	9302      	str	r3, [sp, #8]
   1157a:	6963      	ldr	r3, [r4, #20]
   1157c:	9301      	str	r3, [sp, #4]
   1157e:	6923      	ldr	r3, [r4, #16]
   11580:	9300      	str	r3, [sp, #0]
   11582:	68e3      	ldr	r3, [r4, #12]
   11584:	68a2      	ldr	r2, [r4, #8]
   11586:	6861      	ldr	r1, [r4, #4]
   11588:	6820      	ldr	r0, [r4, #0]
   1158a:	f7ff ff83 	bl	11494 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1158e:	6823      	ldr	r3, [r4, #0]
   11590:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   11592:	3430      	adds	r4, #48	; 0x30
   11594:	e7e6      	b.n	11564 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   11596:	f000 f9d7 	bl	11948 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1159a:	4c15      	ldr	r4, [pc, #84]	; (115f0 <z_init_static_threads+0x94>)
   1159c:	e01b      	b.n	115d6 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1159e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   115a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   115a4:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   115a8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   115ac:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   115b0:	03d8      	lsls	r0, r3, #15
   115b2:	f240 35e7 	movw	r5, #999	; 0x3e7
   115b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115ba:	2300      	movs	r3, #0
   115bc:	1940      	adds	r0, r0, r5
   115be:	f04f 0500 	mov.w	r5, #0
   115c2:	eb45 0101 	adc.w	r1, r5, r1
   115c6:	f7ef fd8f 	bl	10e8 <__aeabi_uldivmod>
   115ca:	4602      	mov	r2, r0
   115cc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   115ce:	4630      	mov	r0, r6
   115d0:	f7ff ff4e 	bl	11470 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   115d4:	3430      	adds	r4, #48	; 0x30
   115d6:	4b07      	ldr	r3, [pc, #28]	; (115f4 <z_init_static_threads+0x98>)
   115d8:	429c      	cmp	r4, r3
   115da:	d204      	bcs.n	115e6 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   115dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   115de:	f1b3 3fff 	cmp.w	r3, #4294967295
   115e2:	d0f7      	beq.n	115d4 <z_init_static_threads+0x78>
   115e4:	e7db      	b.n	1159e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   115e6:	f000 fbad 	bl	11d44 <k_sched_unlock>
}
   115ea:	b006      	add	sp, #24
   115ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   115f0:	200002b4 	.word	0x200002b4
   115f4:	200002b4 	.word	0x200002b4

000115f8 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   115f8:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   115fa:	f007 f9dc 	bl	189b6 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   115fe:	4b04      	ldr	r3, [pc, #16]	; (11610 <pm_save_idle+0x18>)
   11600:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   11602:	f7f2 fc9b 	bl	3f3c <pm_system_suspend>
   11606:	b100      	cbz	r0, 1160a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   11608:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1160a:	f7f2 fdeb 	bl	41e4 <arch_cpu_idle>
   1160e:	e7fb      	b.n	11608 <pm_save_idle+0x10>
   11610:	20015a3c 	.word	0x20015a3c

00011614 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   11614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11618:	b083      	sub	sp, #12
   1161a:	4604      	mov	r4, r0
   1161c:	461d      	mov	r5, r3
	__asm__ volatile(
   1161e:	f04f 0320 	mov.w	r3, #32
   11622:	f3ef 8711 	mrs	r7, BASEPRI
   11626:	f383 8812 	msr	BASEPRI_MAX, r3
   1162a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1162e:	68c1      	ldr	r1, [r0, #12]
   11630:	b999      	cbnz	r1, 1165a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   11632:	2900      	cmp	r1, #0
   11634:	d14f      	bne.n	116d6 <z_impl_k_mutex_lock+0xc2>
   11636:	4b3a      	ldr	r3, [pc, #232]	; (11720 <z_impl_k_mutex_lock+0x10c>)
   11638:	689b      	ldr	r3, [r3, #8]
   1163a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1163e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   11640:	3101      	adds	r1, #1
   11642:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   11644:	4b36      	ldr	r3, [pc, #216]	; (11720 <z_impl_k_mutex_lock+0x10c>)
   11646:	689b      	ldr	r3, [r3, #8]
   11648:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1164a:	f387 8811 	msr	BASEPRI, r7
   1164e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   11652:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   11654:	b003      	add	sp, #12
   11656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1165a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1165c:	6882      	ldr	r2, [r0, #8]
   1165e:	4b30      	ldr	r3, [pc, #192]	; (11720 <z_impl_k_mutex_lock+0x10c>)
   11660:	689b      	ldr	r3, [r3, #8]
   11662:	429a      	cmp	r2, r3
   11664:	d0e5      	beq.n	11632 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   11666:	ea55 0106 	orrs.w	r1, r5, r6
   1166a:	bf0c      	ite	eq
   1166c:	f04f 0801 	moveq.w	r8, #1
   11670:	f04f 0800 	movne.w	r8, #0
   11674:	d031      	beq.n	116da <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   11676:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1167a:	4649      	mov	r1, r9
   1167c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   11680:	f007 f840 	bl	18704 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   11684:	4581      	cmp	r9, r0
   11686:	dc2f      	bgt.n	116e8 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   11688:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1168c:	9600      	str	r6, [sp, #0]
   1168e:	9501      	str	r5, [sp, #4]
   11690:	4622      	mov	r2, r4
   11692:	4639      	mov	r1, r7
   11694:	4823      	ldr	r0, [pc, #140]	; (11724 <z_impl_k_mutex_lock+0x110>)
   11696:	f000 fa9f 	bl	11bd8 <z_pend_curr>
	if (got_mutex == 0) {
   1169a:	2800      	cmp	r0, #0
   1169c:	d0da      	beq.n	11654 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1169e:	f04f 0320 	mov.w	r3, #32
   116a2:	f3ef 8511 	mrs	r5, BASEPRI
   116a6:	f383 8812 	msr	BASEPRI_MAX, r3
   116aa:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   116ae:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116b0:	429c      	cmp	r4, r3
   116b2:	d01f      	beq.n	116f4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   116b4:	b1f3      	cbz	r3, 116f4 <z_impl_k_mutex_lock+0xe0>
   116b6:	6921      	ldr	r1, [r4, #16]
   116b8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   116bc:	f007 f822 	bl	18704 <new_prio_for_inheritance>
   116c0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   116c2:	4620      	mov	r0, r4
   116c4:	f007 f829 	bl	1871a <adjust_owner_prio>
   116c8:	b9b0      	cbnz	r0, 116f8 <z_impl_k_mutex_lock+0xe4>
   116ca:	f1b9 0f00 	cmp.w	r9, #0
   116ce:	d015      	beq.n	116fc <z_impl_k_mutex_lock+0xe8>
   116d0:	f04f 0801 	mov.w	r8, #1
   116d4:	e012      	b.n	116fc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   116d6:	6923      	ldr	r3, [r4, #16]
   116d8:	e7b1      	b.n	1163e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   116da:	f387 8811 	msr	BASEPRI, r7
   116de:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   116e2:	f06f 000f 	mvn.w	r0, #15
   116e6:	e7b5      	b.n	11654 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   116e8:	4601      	mov	r1, r0
   116ea:	4620      	mov	r0, r4
   116ec:	f007 f815 	bl	1871a <adjust_owner_prio>
   116f0:	4681      	mov	r9, r0
   116f2:	e7cb      	b.n	1168c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   116f4:	6921      	ldr	r1, [r4, #16]
   116f6:	e7e4      	b.n	116c2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   116f8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   116fc:	f1b8 0f00 	cmp.w	r8, #0
   11700:	d106      	bne.n	11710 <z_impl_k_mutex_lock+0xfc>
   11702:	f385 8811 	msr	BASEPRI, r5
   11706:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1170a:	f06f 000a 	mvn.w	r0, #10
   1170e:	e7a1      	b.n	11654 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   11710:	4629      	mov	r1, r5
   11712:	4804      	ldr	r0, [pc, #16]	; (11724 <z_impl_k_mutex_lock+0x110>)
   11714:	f000 f8fc 	bl	11910 <z_reschedule>
	return -EAGAIN;
   11718:	f06f 000a 	mvn.w	r0, #10
   1171c:	e79a      	b.n	11654 <z_impl_k_mutex_lock+0x40>
   1171e:	bf00      	nop
   11720:	20015a3c 	.word	0x20015a3c
   11724:	20015a68 	.word	0x20015a68

00011728 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   11728:	6882      	ldr	r2, [r0, #8]
   1172a:	2a00      	cmp	r2, #0
   1172c:	d035      	beq.n	1179a <z_impl_k_mutex_unlock+0x72>
{
   1172e:	b538      	push	{r3, r4, r5, lr}
   11730:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   11732:	4b1d      	ldr	r3, [pc, #116]	; (117a8 <z_impl_k_mutex_unlock+0x80>)
   11734:	689b      	ldr	r3, [r3, #8]
   11736:	429a      	cmp	r2, r3
   11738:	d132      	bne.n	117a0 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1173a:	7bda      	ldrb	r2, [r3, #15]
   1173c:	3a01      	subs	r2, #1
   1173e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   11740:	68c3      	ldr	r3, [r0, #12]
   11742:	2b01      	cmp	r3, #1
   11744:	d905      	bls.n	11752 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   11746:	3b01      	subs	r3, #1
   11748:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1174a:	f000 fafb 	bl	11d44 <k_sched_unlock>

	return 0;
   1174e:	2000      	movs	r0, #0
}
   11750:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11752:	f04f 0320 	mov.w	r3, #32
   11756:	f3ef 8511 	mrs	r5, BASEPRI
   1175a:	f383 8812 	msr	BASEPRI_MAX, r3
   1175e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11762:	6901      	ldr	r1, [r0, #16]
   11764:	f006 ffd9 	bl	1871a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   11768:	4620      	mov	r0, r4
   1176a:	f007 f8c4 	bl	188f6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1176e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11770:	b160      	cbz	r0, 1178c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   11772:	f990 300e 	ldrsb.w	r3, [r0, #14]
   11776:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11778:	2300      	movs	r3, #0
   1177a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
   1177e:	f007 f81f 	bl	187c0 <z_ready_thread>
		z_reschedule(&lock, key);
   11782:	4629      	mov	r1, r5
   11784:	4809      	ldr	r0, [pc, #36]	; (117ac <z_impl_k_mutex_unlock+0x84>)
   11786:	f000 f8c3 	bl	11910 <z_reschedule>
   1178a:	e7de      	b.n	1174a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1178c:	2300      	movs	r3, #0
   1178e:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   11790:	f385 8811 	msr	BASEPRI, r5
   11794:	f3bf 8f6f 	isb	sy
   11798:	e7d7      	b.n	1174a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1179a:	f06f 0015 	mvn.w	r0, #21
}
   1179e:	4770      	bx	lr
		return -EPERM;
   117a0:	f04f 30ff 	mov.w	r0, #4294967295
   117a4:	e7d4      	b.n	11750 <z_impl_k_mutex_unlock+0x28>
   117a6:	bf00      	nop
   117a8:	20015a3c 	.word	0x20015a3c
   117ac:	20015a68 	.word	0x20015a68

000117b0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   117b0:	b538      	push	{r3, r4, r5, lr}
   117b2:	4604      	mov	r4, r0
	__asm__ volatile(
   117b4:	f04f 0320 	mov.w	r3, #32
   117b8:	f3ef 8511 	mrs	r5, BASEPRI
   117bc:	f383 8812 	msr	BASEPRI_MAX, r3
   117c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   117c4:	f007 f897 	bl	188f6 <z_unpend_first_thread>

	if (thread != NULL) {
   117c8:	b148      	cbz	r0, 117de <z_impl_k_sem_give+0x2e>
   117ca:	2200      	movs	r2, #0
   117cc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   117d0:	f006 fff6 	bl	187c0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   117d4:	4629      	mov	r1, r5
   117d6:	4807      	ldr	r0, [pc, #28]	; (117f4 <z_impl_k_sem_give+0x44>)
   117d8:	f000 f89a 	bl	11910 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   117dc:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   117de:	68a3      	ldr	r3, [r4, #8]
   117e0:	68e2      	ldr	r2, [r4, #12]
   117e2:	4293      	cmp	r3, r2
   117e4:	d003      	beq.n	117ee <z_impl_k_sem_give+0x3e>
   117e6:	2201      	movs	r2, #1
   117e8:	4413      	add	r3, r2
   117ea:	60a3      	str	r3, [r4, #8]
}
   117ec:	e7f2      	b.n	117d4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   117ee:	2200      	movs	r2, #0
   117f0:	e7fa      	b.n	117e8 <z_impl_k_sem_give+0x38>
   117f2:	bf00      	nop
   117f4:	20015a6c 	.word	0x20015a6c

000117f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   117f8:	b530      	push	{r4, r5, lr}
   117fa:	b083      	sub	sp, #12
   117fc:	461d      	mov	r5, r3
   117fe:	f04f 0320 	mov.w	r3, #32
   11802:	f3ef 8111 	mrs	r1, BASEPRI
   11806:	f383 8812 	msr	BASEPRI_MAX, r3
   1180a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1180e:	6883      	ldr	r3, [r0, #8]
   11810:	b143      	cbz	r3, 11824 <z_impl_k_sem_take+0x2c>
		sem->count--;
   11812:	3b01      	subs	r3, #1
   11814:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   11816:	f381 8811 	msr	BASEPRI, r1
   1181a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1181e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   11820:	b003      	add	sp, #12
   11822:	bd30      	pop	{r4, r5, pc}
   11824:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11826:	ea54 0305 	orrs.w	r3, r4, r5
   1182a:	d006      	beq.n	1183a <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1182c:	e9cd 4500 	strd	r4, r5, [sp]
   11830:	4602      	mov	r2, r0
   11832:	4805      	ldr	r0, [pc, #20]	; (11848 <z_impl_k_sem_take+0x50>)
   11834:	f000 f9d0 	bl	11bd8 <z_pend_curr>
	return ret;
   11838:	e7f2      	b.n	11820 <z_impl_k_sem_take+0x28>
   1183a:	f381 8811 	msr	BASEPRI, r1
   1183e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   11842:	f06f 000f 	mvn.w	r0, #15
   11846:	e7eb      	b.n	11820 <z_impl_k_sem_take+0x28>
   11848:	20015a6c 	.word	0x20015a6c

0001184c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1184c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1184e:	f1b3 3fff 	cmp.w	r3, #4294967295
   11852:	bf08      	it	eq
   11854:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   11858:	d100      	bne.n	1185c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1185a:	bd38      	pop	{r3, r4, r5, pc}
   1185c:	4902      	ldr	r1, [pc, #8]	; (11868 <add_thread_timeout+0x1c>)
   1185e:	3018      	adds	r0, #24
   11860:	f000 fc42 	bl	120e8 <z_add_timeout>
   11864:	e7f9      	b.n	1185a <add_thread_timeout+0xe>
   11866:	bf00      	nop
   11868:	000187f9 	.word	0x000187f9

0001186c <z_reset_time_slice>:
{
   1186c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1186e:	4b08      	ldr	r3, [pc, #32]	; (11890 <z_reset_time_slice+0x24>)
   11870:	681b      	ldr	r3, [r3, #0]
   11872:	b903      	cbnz	r3, 11876 <z_reset_time_slice+0xa>
}
   11874:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   11876:	f7f4 fa45 	bl	5d04 <sys_clock_elapsed>
   1187a:	4603      	mov	r3, r0
   1187c:	4a04      	ldr	r2, [pc, #16]	; (11890 <z_reset_time_slice+0x24>)
   1187e:	6810      	ldr	r0, [r2, #0]
   11880:	4403      	add	r3, r0
   11882:	4a04      	ldr	r2, [pc, #16]	; (11894 <z_reset_time_slice+0x28>)
   11884:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   11886:	2100      	movs	r1, #0
   11888:	f007 f8ab 	bl	189e2 <z_set_timeout_expiry>
}
   1188c:	e7f2      	b.n	11874 <z_reset_time_slice+0x8>
   1188e:	bf00      	nop
   11890:	20015a7c 	.word	0x20015a7c
   11894:	20015a3c 	.word	0x20015a3c

00011898 <k_sched_time_slice_set>:
{
   11898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1189c:	4606      	mov	r6, r0
   1189e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   118a0:	2300      	movs	r3, #0
	__asm__ volatile(
   118a2:	f04f 0220 	mov.w	r2, #32
   118a6:	f3ef 8711 	mrs	r7, BASEPRI
   118aa:	f382 8812 	msr	BASEPRI_MAX, r2
   118ae:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   118b2:	e009      	b.n	118c8 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   118b4:	4b13      	ldr	r3, [pc, #76]	; (11904 <k_sched_time_slice_set+0x6c>)
   118b6:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   118ba:	f7ff ffd7 	bl	1186c <z_reset_time_slice>
	__asm__ volatile(
   118be:	f387 8811 	msr	BASEPRI, r7
   118c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   118c6:	2301      	movs	r3, #1
   118c8:	b9cb      	cbnz	r3, 118fe <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   118ca:	2300      	movs	r3, #0
   118cc:	4a0e      	ldr	r2, [pc, #56]	; (11908 <k_sched_time_slice_set+0x70>)
   118ce:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   118d0:	0c75      	lsrs	r5, r6, #17
   118d2:	03f4      	lsls	r4, r6, #15
   118d4:	f240 30e7 	movw	r0, #999	; 0x3e7
   118d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   118dc:	2300      	movs	r3, #0
   118de:	1820      	adds	r0, r4, r0
   118e0:	f04f 0100 	mov.w	r1, #0
   118e4:	eb45 0101 	adc.w	r1, r5, r1
   118e8:	f7ef fbfe 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   118ec:	4b07      	ldr	r3, [pc, #28]	; (1190c <k_sched_time_slice_set+0x74>)
   118ee:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   118f0:	2e00      	cmp	r6, #0
   118f2:	dddf      	ble.n	118b4 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   118f4:	2802      	cmp	r0, #2
   118f6:	bfb8      	it	lt
   118f8:	2002      	movlt	r0, #2
   118fa:	6018      	str	r0, [r3, #0]
   118fc:	e7da      	b.n	118b4 <k_sched_time_slice_set+0x1c>
}
   118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11902:	bf00      	nop
   11904:	20015a78 	.word	0x20015a78
   11908:	20015a3c 	.word	0x20015a3c
   1190c:	20015a7c 	.word	0x20015a7c

00011910 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   11910:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   11912:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11914:	b921      	cbnz	r1, 11920 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11916:	f3ef 8305 	mrs	r3, IPSR
   1191a:	b913      	cbnz	r3, 11922 <z_reschedule+0x12>
   1191c:	2101      	movs	r1, #1
   1191e:	e000      	b.n	11922 <z_reschedule+0x12>
   11920:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   11922:	f011 0f01 	tst.w	r1, #1
   11926:	d007      	beq.n	11938 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   11928:	4b06      	ldr	r3, [pc, #24]	; (11944 <z_reschedule+0x34>)
   1192a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1192c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1192e:	429a      	cmp	r2, r3
   11930:	d002      	beq.n	11938 <z_reschedule+0x28>
	ret = arch_swap(key);
   11932:	f7f2 fcc3 	bl	42bc <arch_swap>
		z_swap(lock, key);
   11936:	e003      	b.n	11940 <z_reschedule+0x30>
   11938:	f380 8811 	msr	BASEPRI, r0
   1193c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   11940:	bd08      	pop	{r3, pc}
   11942:	bf00      	nop
   11944:	20015a3c 	.word	0x20015a3c

00011948 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   11948:	2300      	movs	r3, #0
	__asm__ volatile(
   1194a:	f04f 0220 	mov.w	r2, #32
   1194e:	f3ef 8111 	mrs	r1, BASEPRI
   11952:	f382 8812 	msr	BASEPRI_MAX, r2
   11956:	f3bf 8f6f 	isb	sy
   1195a:	b953      	cbnz	r3, 11972 <k_sched_lock+0x2a>
   1195c:	4b05      	ldr	r3, [pc, #20]	; (11974 <k_sched_lock+0x2c>)
   1195e:	689a      	ldr	r2, [r3, #8]
   11960:	7bd3      	ldrb	r3, [r2, #15]
   11962:	3b01      	subs	r3, #1
   11964:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   11966:	f381 8811 	msr	BASEPRI, r1
   1196a:	f3bf 8f6f 	isb	sy
   1196e:	2301      	movs	r3, #1
   11970:	e7f3      	b.n	1195a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   11972:	4770      	bx	lr
   11974:	20015a3c 	.word	0x20015a3c

00011978 <update_cache>:
{
   11978:	b538      	push	{r3, r4, r5, lr}
   1197a:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1197c:	480f      	ldr	r0, [pc, #60]	; (119bc <update_cache+0x44>)
   1197e:	f006 ff18 	bl	187b2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11982:	4605      	mov	r5, r0
   11984:	b170      	cbz	r0, 119a4 <update_cache+0x2c>
	if (preempt_ok != 0) {
   11986:	b984      	cbnz	r4, 119aa <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   11988:	4b0d      	ldr	r3, [pc, #52]	; (119c0 <update_cache+0x48>)
   1198a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1198c:	7b5a      	ldrb	r2, [r3, #13]
   1198e:	f012 0f1f 	tst.w	r2, #31
   11992:	d10a      	bne.n	119aa <update_cache+0x32>
	return node->next != NULL;
   11994:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   11996:	b942      	cbnz	r2, 119aa <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   11998:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1199a:	2a7f      	cmp	r2, #127	; 0x7f
   1199c:	d905      	bls.n	119aa <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1199e:	4a08      	ldr	r2, [pc, #32]	; (119c0 <update_cache+0x48>)
   119a0:	61d3      	str	r3, [r2, #28]
   119a2:	e00a      	b.n	119ba <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   119a4:	4b06      	ldr	r3, [pc, #24]	; (119c0 <update_cache+0x48>)
   119a6:	68dd      	ldr	r5, [r3, #12]
   119a8:	e7ed      	b.n	11986 <update_cache+0xe>
		if (thread != _current) {
   119aa:	4b05      	ldr	r3, [pc, #20]	; (119c0 <update_cache+0x48>)
   119ac:	689b      	ldr	r3, [r3, #8]
   119ae:	42ab      	cmp	r3, r5
   119b0:	d001      	beq.n	119b6 <update_cache+0x3e>
			z_reset_time_slice();
   119b2:	f7ff ff5b 	bl	1186c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   119b6:	4b02      	ldr	r3, [pc, #8]	; (119c0 <update_cache+0x48>)
   119b8:	61dd      	str	r5, [r3, #28]
}
   119ba:	bd38      	pop	{r3, r4, r5, pc}
   119bc:	20015a5c 	.word	0x20015a5c
   119c0:	20015a3c 	.word	0x20015a3c

000119c4 <move_thread_to_end_of_prio_q>:
{
   119c4:	b538      	push	{r3, r4, r5, lr}
   119c6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   119c8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   119ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
   119ce:	2b00      	cmp	r3, #0
   119d0:	db28      	blt.n	11a24 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   119d2:	7b6b      	ldrb	r3, [r5, #13]
   119d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   119d8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   119da:	4b1a      	ldr	r3, [pc, #104]	; (11a44 <move_thread_to_end_of_prio_q+0x80>)
   119dc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119e0:	429c      	cmp	r4, r3
   119e2:	d02d      	beq.n	11a40 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   119e4:	b16c      	cbz	r4, 11a02 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   119e6:	4621      	mov	r1, r4
   119e8:	4628      	mov	r0, r5
   119ea:	f006 febb 	bl	18764 <z_sched_prio_cmp>
   119ee:	2800      	cmp	r0, #0
   119f0:	dc20      	bgt.n	11a34 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   119f2:	b134      	cbz	r4, 11a02 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   119f4:	4b13      	ldr	r3, [pc, #76]	; (11a44 <move_thread_to_end_of_prio_q+0x80>)
   119f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   119f8:	429c      	cmp	r4, r3
   119fa:	d002      	beq.n	11a02 <move_thread_to_end_of_prio_q+0x3e>
   119fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   119fe:	2c00      	cmp	r4, #0
   11a00:	d1f0      	bne.n	119e4 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   11a02:	4b10      	ldr	r3, [pc, #64]	; (11a44 <move_thread_to_end_of_prio_q+0x80>)
   11a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   11a06:	f103 0120 	add.w	r1, r3, #32
   11a0a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11a0c:	606a      	str	r2, [r5, #4]

	tail->next = node;
   11a0e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11a10:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   11a12:	4b0c      	ldr	r3, [pc, #48]	; (11a44 <move_thread_to_end_of_prio_q+0x80>)
   11a14:	6898      	ldr	r0, [r3, #8]
   11a16:	42a8      	cmp	r0, r5
   11a18:	bf14      	ite	ne
   11a1a:	2000      	movne	r0, #0
   11a1c:	2001      	moveq	r0, #1
   11a1e:	f7ff ffab 	bl	11978 <update_cache>
}
   11a22:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11a28:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   11a2a:	4601      	mov	r1, r0
   11a2c:	4806      	ldr	r0, [pc, #24]	; (11a48 <move_thread_to_end_of_prio_q+0x84>)
   11a2e:	f006 feb8 	bl	187a2 <z_priq_dumb_remove>
}
   11a32:	e7ce      	b.n	119d2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11a34:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   11a36:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11a38:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11a3a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11a3c:	6065      	str	r5, [r4, #4]
}
   11a3e:	e7e8      	b.n	11a12 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11a40:	2400      	movs	r4, #0
   11a42:	e7cf      	b.n	119e4 <move_thread_to_end_of_prio_q+0x20>
   11a44:	20015a3c 	.word	0x20015a3c
   11a48:	20015a5c 	.word	0x20015a5c

00011a4c <z_time_slice>:
{
   11a4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   11a4e:	f04f 0320 	mov.w	r3, #32
   11a52:	f3ef 8411 	mrs	r4, BASEPRI
   11a56:	f383 8812 	msr	BASEPRI_MAX, r3
   11a5a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   11a5e:	4b1c      	ldr	r3, [pc, #112]	; (11ad0 <z_time_slice+0x84>)
   11a60:	689b      	ldr	r3, [r3, #8]
   11a62:	4a1c      	ldr	r2, [pc, #112]	; (11ad4 <z_time_slice+0x88>)
   11a64:	6812      	ldr	r2, [r2, #0]
   11a66:	4293      	cmp	r3, r2
   11a68:	d01d      	beq.n	11aa6 <z_time_slice+0x5a>
	pending_current = NULL;
   11a6a:	4a1a      	ldr	r2, [pc, #104]	; (11ad4 <z_time_slice+0x88>)
   11a6c:	2100      	movs	r1, #0
   11a6e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   11a70:	4a19      	ldr	r2, [pc, #100]	; (11ad8 <z_time_slice+0x8c>)
   11a72:	6812      	ldr	r2, [r2, #0]
   11a74:	b322      	cbz	r2, 11ac0 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   11a76:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   11a78:	2a7f      	cmp	r2, #127	; 0x7f
   11a7a:	d821      	bhi.n	11ac0 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   11a7c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   11a7e:	f012 0f1f 	tst.w	r2, #31
   11a82:	d11d      	bne.n	11ac0 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11a84:	f993 100e 	ldrsb.w	r1, [r3, #14]
   11a88:	4a14      	ldr	r2, [pc, #80]	; (11adc <z_time_slice+0x90>)
   11a8a:	6812      	ldr	r2, [r2, #0]
   11a8c:	4291      	cmp	r1, r2
   11a8e:	db17      	blt.n	11ac0 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   11a90:	4a13      	ldr	r2, [pc, #76]	; (11ae0 <z_time_slice+0x94>)
   11a92:	4293      	cmp	r3, r2
   11a94:	d014      	beq.n	11ac0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   11a96:	4a0e      	ldr	r2, [pc, #56]	; (11ad0 <z_time_slice+0x84>)
   11a98:	6912      	ldr	r2, [r2, #16]
   11a9a:	4282      	cmp	r2, r0
   11a9c:	dd0a      	ble.n	11ab4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   11a9e:	1a10      	subs	r0, r2, r0
   11aa0:	4b0b      	ldr	r3, [pc, #44]	; (11ad0 <z_time_slice+0x84>)
   11aa2:	6118      	str	r0, [r3, #16]
   11aa4:	e00f      	b.n	11ac6 <z_time_slice+0x7a>
		z_reset_time_slice();
   11aa6:	f7ff fee1 	bl	1186c <z_reset_time_slice>
	__asm__ volatile(
   11aaa:	f384 8811 	msr	BASEPRI, r4
   11aae:	f3bf 8f6f 	isb	sy
		return;
   11ab2:	e00c      	b.n	11ace <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   11ab4:	4618      	mov	r0, r3
   11ab6:	f7ff ff85 	bl	119c4 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   11aba:	f7ff fed7 	bl	1186c <z_reset_time_slice>
   11abe:	e002      	b.n	11ac6 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   11ac0:	4b03      	ldr	r3, [pc, #12]	; (11ad0 <z_time_slice+0x84>)
   11ac2:	2200      	movs	r2, #0
   11ac4:	611a      	str	r2, [r3, #16]
   11ac6:	f384 8811 	msr	BASEPRI, r4
   11aca:	f3bf 8f6f 	isb	sy
}
   11ace:	bd10      	pop	{r4, pc}
   11ad0:	20015a3c 	.word	0x20015a3c
   11ad4:	20015a70 	.word	0x20015a70
   11ad8:	20015a7c 	.word	0x20015a7c
   11adc:	20015a78 	.word	0x20015a78
   11ae0:	20000360 	.word	0x20000360

00011ae4 <ready_thread>:
{
   11ae4:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   11ae6:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11ae8:	f990 200d 	ldrsb.w	r2, [r0, #13]
   11aec:	2a00      	cmp	r2, #0
   11aee:	db2d      	blt.n	11b4c <ready_thread+0x68>
   11af0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11af2:	f013 0f1f 	tst.w	r3, #31
   11af6:	d105      	bne.n	11b04 <ready_thread+0x20>
	return node->next != NULL;
   11af8:	6982      	ldr	r2, [r0, #24]
   11afa:	b10a      	cbz	r2, 11b00 <ready_thread+0x1c>
   11afc:	2200      	movs	r2, #0
   11afe:	e002      	b.n	11b06 <ready_thread+0x22>
   11b00:	2201      	movs	r2, #1
   11b02:	e000      	b.n	11b06 <ready_thread+0x22>
   11b04:	2200      	movs	r2, #0
   11b06:	b30a      	cbz	r2, 11b4c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   11b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11b0c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11b0e:	4b14      	ldr	r3, [pc, #80]	; (11b60 <ready_thread+0x7c>)
   11b10:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11b14:	429d      	cmp	r5, r3
   11b16:	d020      	beq.n	11b5a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b18:	b16d      	cbz	r5, 11b36 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11b1a:	4629      	mov	r1, r5
   11b1c:	4620      	mov	r0, r4
   11b1e:	f006 fe21 	bl	18764 <z_sched_prio_cmp>
   11b22:	2800      	cmp	r0, #0
   11b24:	dc13      	bgt.n	11b4e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11b26:	b135      	cbz	r5, 11b36 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   11b28:	4b0d      	ldr	r3, [pc, #52]	; (11b60 <ready_thread+0x7c>)
   11b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11b2c:	429d      	cmp	r5, r3
   11b2e:	d002      	beq.n	11b36 <ready_thread+0x52>
   11b30:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b32:	2d00      	cmp	r5, #0
   11b34:	d1f0      	bne.n	11b18 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   11b36:	4b0a      	ldr	r3, [pc, #40]	; (11b60 <ready_thread+0x7c>)
   11b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11b3a:	f103 0120 	add.w	r1, r3, #32
   11b3e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11b40:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11b42:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11b44:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   11b46:	2000      	movs	r0, #0
   11b48:	f7ff ff16 	bl	11978 <update_cache>
}
   11b4c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   11b4e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11b50:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11b52:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11b54:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11b56:	606c      	str	r4, [r5, #4]
}
   11b58:	e7f5      	b.n	11b46 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11b5a:	2500      	movs	r5, #0
   11b5c:	e7dc      	b.n	11b18 <ready_thread+0x34>
   11b5e:	bf00      	nop
   11b60:	20015a3c 	.word	0x20015a3c

00011b64 <z_sched_start>:
{
   11b64:	b510      	push	{r4, lr}
	__asm__ volatile(
   11b66:	f04f 0320 	mov.w	r3, #32
   11b6a:	f3ef 8411 	mrs	r4, BASEPRI
   11b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   11b72:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   11b76:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   11b78:	f013 0f04 	tst.w	r3, #4
   11b7c:	d104      	bne.n	11b88 <z_sched_start+0x24>
	__asm__ volatile(
   11b7e:	f384 8811 	msr	BASEPRI, r4
   11b82:	f3bf 8f6f 	isb	sy
}
   11b86:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11b88:	f023 0304 	bic.w	r3, r3, #4
   11b8c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   11b8e:	f7ff ffa9 	bl	11ae4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11b92:	4621      	mov	r1, r4
   11b94:	4801      	ldr	r0, [pc, #4]	; (11b9c <z_sched_start+0x38>)
   11b96:	f7ff febb 	bl	11910 <z_reschedule>
   11b9a:	e7f4      	b.n	11b86 <z_sched_start+0x22>
   11b9c:	20015a74 	.word	0x20015a74

00011ba0 <unready_thread>:
{
   11ba0:	b510      	push	{r4, lr}
   11ba2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   11ba4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   11ba6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   11baa:	2b00      	cmp	r3, #0
   11bac:	db08      	blt.n	11bc0 <unready_thread+0x20>
	update_cache(thread == _current);
   11bae:	4b08      	ldr	r3, [pc, #32]	; (11bd0 <unready_thread+0x30>)
   11bb0:	6898      	ldr	r0, [r3, #8]
   11bb2:	42a0      	cmp	r0, r4
   11bb4:	bf14      	ite	ne
   11bb6:	2000      	movne	r0, #0
   11bb8:	2001      	moveq	r0, #1
   11bba:	f7ff fedd 	bl	11978 <update_cache>
}
   11bbe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11bc4:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   11bc6:	4601      	mov	r1, r0
   11bc8:	4802      	ldr	r0, [pc, #8]	; (11bd4 <unready_thread+0x34>)
   11bca:	f006 fdea 	bl	187a2 <z_priq_dumb_remove>
}
   11bce:	e7ee      	b.n	11bae <unready_thread+0xe>
   11bd0:	20015a3c 	.word	0x20015a3c
   11bd4:	20015a5c 	.word	0x20015a5c

00011bd8 <z_pend_curr>:
{
   11bd8:	b510      	push	{r4, lr}
   11bda:	460c      	mov	r4, r1
   11bdc:	4611      	mov	r1, r2
	pending_current = _current;
   11bde:	4b06      	ldr	r3, [pc, #24]	; (11bf8 <z_pend_curr+0x20>)
   11be0:	6898      	ldr	r0, [r3, #8]
   11be2:	4b06      	ldr	r3, [pc, #24]	; (11bfc <z_pend_curr+0x24>)
   11be4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   11be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11bea:	f006 fe63 	bl	188b4 <pend>
   11bee:	4620      	mov	r0, r4
   11bf0:	f7f2 fb64 	bl	42bc <arch_swap>
}
   11bf4:	bd10      	pop	{r4, pc}
   11bf6:	bf00      	nop
   11bf8:	20015a3c 	.word	0x20015a3c
   11bfc:	20015a70 	.word	0x20015a70

00011c00 <z_set_prio>:
{
   11c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c04:	4604      	mov	r4, r0
   11c06:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   11c08:	2300      	movs	r3, #0
	__asm__ volatile(
   11c0a:	f04f 0220 	mov.w	r2, #32
   11c0e:	f3ef 8611 	mrs	r6, BASEPRI
   11c12:	f382 8812 	msr	BASEPRI_MAX, r2
   11c16:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   11c1a:	4698      	mov	r8, r3
   11c1c:	e008      	b.n	11c30 <z_set_prio+0x30>
		if (need_sched) {
   11c1e:	f012 0801 	ands.w	r8, r2, #1
   11c22:	d111      	bne.n	11c48 <z_set_prio+0x48>
			thread->base.prio = prio;
   11c24:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   11c26:	f386 8811 	msr	BASEPRI, r6
   11c2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11c2e:	2301      	movs	r3, #1
   11c30:	461a      	mov	r2, r3
   11c32:	2b00      	cmp	r3, #0
   11c34:	d13d      	bne.n	11cb2 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   11c36:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11c38:	f013 0f1f 	tst.w	r3, #31
   11c3c:	d1ef      	bne.n	11c1e <z_set_prio+0x1e>
	return node->next != NULL;
   11c3e:	69a1      	ldr	r1, [r4, #24]
   11c40:	2900      	cmp	r1, #0
   11c42:	d1ec      	bne.n	11c1e <z_set_prio+0x1e>
   11c44:	2201      	movs	r2, #1
   11c46:	e7ea      	b.n	11c1e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11c4c:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   11c4e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 11cbc <z_set_prio+0xbc>
   11c52:	4621      	mov	r1, r4
   11c54:	4648      	mov	r0, r9
   11c56:	f006 fda4 	bl	187a2 <z_priq_dumb_remove>
				thread->base.prio = prio;
   11c5a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11c5c:	7b63      	ldrb	r3, [r4, #13]
   11c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11c62:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   11c64:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c68:	454d      	cmp	r5, r9
   11c6a:	d020      	beq.n	11cae <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11c6c:	b16d      	cbz	r5, 11c8a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11c6e:	4629      	mov	r1, r5
   11c70:	4620      	mov	r0, r4
   11c72:	f006 fd77 	bl	18764 <z_sched_prio_cmp>
   11c76:	2800      	cmp	r0, #0
   11c78:	dc13      	bgt.n	11ca2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11c7a:	b135      	cbz	r5, 11c8a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   11c7c:	4b0e      	ldr	r3, [pc, #56]	; (11cb8 <z_set_prio+0xb8>)
   11c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11c80:	429d      	cmp	r5, r3
   11c82:	d002      	beq.n	11c8a <z_set_prio+0x8a>
   11c84:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11c86:	2d00      	cmp	r5, #0
   11c88:	d1f0      	bne.n	11c6c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   11c8a:	4b0b      	ldr	r3, [pc, #44]	; (11cb8 <z_set_prio+0xb8>)
   11c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11c8e:	f103 0120 	add.w	r1, r3, #32
   11c92:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   11c94:	6062      	str	r2, [r4, #4]
	tail->next = node;
   11c96:	6014      	str	r4, [r2, #0]
	list->tail = node;
   11c98:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   11c9a:	2001      	movs	r0, #1
   11c9c:	f7ff fe6c 	bl	11978 <update_cache>
   11ca0:	e7c1      	b.n	11c26 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   11ca2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   11ca4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   11ca6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   11ca8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11caa:	606c      	str	r4, [r5, #4]
}
   11cac:	e7f5      	b.n	11c9a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11cae:	2500      	movs	r5, #0
   11cb0:	e7dc      	b.n	11c6c <z_set_prio+0x6c>
}
   11cb2:	4640      	mov	r0, r8
   11cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11cb8:	20015a3c 	.word	0x20015a3c
   11cbc:	20015a5c 	.word	0x20015a5c

00011cc0 <z_impl_k_thread_suspend>:
{
   11cc0:	b538      	push	{r3, r4, r5, lr}
   11cc2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11cc4:	3018      	adds	r0, #24
   11cc6:	f006 fe58 	bl	1897a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   11cca:	2300      	movs	r3, #0
	__asm__ volatile(
   11ccc:	f04f 0220 	mov.w	r2, #32
   11cd0:	f3ef 8511 	mrs	r5, BASEPRI
   11cd4:	f382 8812 	msr	BASEPRI_MAX, r2
   11cd8:	f3bf 8f6f 	isb	sy
   11cdc:	e010      	b.n	11d00 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11cde:	7b63      	ldrb	r3, [r4, #13]
   11ce0:	f043 0310 	orr.w	r3, r3, #16
   11ce4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   11ce6:	4b15      	ldr	r3, [pc, #84]	; (11d3c <z_impl_k_thread_suspend+0x7c>)
   11ce8:	6898      	ldr	r0, [r3, #8]
   11cea:	42a0      	cmp	r0, r4
   11cec:	bf14      	ite	ne
   11cee:	2000      	movne	r0, #0
   11cf0:	2001      	moveq	r0, #1
   11cf2:	f7ff fe41 	bl	11978 <update_cache>
	__asm__ volatile(
   11cf6:	f385 8811 	msr	BASEPRI, r5
   11cfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11cfe:	2301      	movs	r3, #1
   11d00:	b963      	cbnz	r3, 11d1c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   11d02:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   11d04:	f994 300d 	ldrsb.w	r3, [r4, #13]
   11d08:	2b00      	cmp	r3, #0
   11d0a:	dae8      	bge.n	11cde <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11d10:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   11d12:	4621      	mov	r1, r4
   11d14:	480a      	ldr	r0, [pc, #40]	; (11d40 <z_impl_k_thread_suspend+0x80>)
   11d16:	f006 fd44 	bl	187a2 <z_priq_dumb_remove>
}
   11d1a:	e7e0      	b.n	11cde <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   11d1c:	4b07      	ldr	r3, [pc, #28]	; (11d3c <z_impl_k_thread_suspend+0x7c>)
   11d1e:	689b      	ldr	r3, [r3, #8]
   11d20:	42a3      	cmp	r3, r4
   11d22:	d000      	beq.n	11d26 <z_impl_k_thread_suspend+0x66>
}
   11d24:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11d26:	f04f 0320 	mov.w	r3, #32
   11d2a:	f3ef 8011 	mrs	r0, BASEPRI
   11d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d32:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   11d36:	f006 fd1f 	bl	18778 <z_reschedule_irqlock>
   11d3a:	e7f3      	b.n	11d24 <z_impl_k_thread_suspend+0x64>
   11d3c:	20015a3c 	.word	0x20015a3c
   11d40:	20015a5c 	.word	0x20015a5c

00011d44 <k_sched_unlock>:

void k_sched_unlock(void)
{
   11d44:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   11d46:	2300      	movs	r3, #0
   11d48:	f04f 0220 	mov.w	r2, #32
   11d4c:	f3ef 8411 	mrs	r4, BASEPRI
   11d50:	f382 8812 	msr	BASEPRI_MAX, r2
   11d54:	f3bf 8f6f 	isb	sy
   11d58:	b96b      	cbnz	r3, 11d76 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   11d5a:	4b0c      	ldr	r3, [pc, #48]	; (11d8c <k_sched_unlock+0x48>)
   11d5c:	689a      	ldr	r2, [r3, #8]
   11d5e:	7bd3      	ldrb	r3, [r2, #15]
   11d60:	3301      	adds	r3, #1
   11d62:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11d64:	2000      	movs	r0, #0
   11d66:	f7ff fe07 	bl	11978 <update_cache>
	__asm__ volatile(
   11d6a:	f384 8811 	msr	BASEPRI, r4
   11d6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   11d72:	2301      	movs	r3, #1
   11d74:	e7f0      	b.n	11d58 <k_sched_unlock+0x14>
	__asm__ volatile(
   11d76:	f04f 0320 	mov.w	r3, #32
   11d7a:	f3ef 8011 	mrs	r0, BASEPRI
   11d7e:	f383 8812 	msr	BASEPRI_MAX, r3
   11d82:	f3bf 8f6f 	isb	sy
   11d86:	f006 fcf7 	bl	18778 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   11d8a:	bd10      	pop	{r4, pc}
   11d8c:	20015a3c 	.word	0x20015a3c

00011d90 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   11d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   11d92:	7b43      	ldrb	r3, [r0, #13]
   11d94:	f013 0f08 	tst.w	r3, #8
   11d98:	d145      	bne.n	11e26 <end_thread+0x96>
   11d9a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   11d9c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11da0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11da4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   11da6:	f013 0f80 	tst.w	r3, #128	; 0x80
   11daa:	d114      	bne.n	11dd6 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   11dac:	68ab      	ldr	r3, [r5, #8]
   11dae:	b15b      	cbz	r3, 11dc8 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11db0:	4628      	mov	r0, r5
   11db2:	f006 fcd5 	bl	18760 <pended_on_thread>
   11db6:	4629      	mov	r1, r5
   11db8:	f006 fcf3 	bl	187a2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11dbc:	7b6b      	ldrb	r3, [r5, #13]
   11dbe:	f023 0302 	bic.w	r3, r3, #2
   11dc2:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   11dc4:	2300      	movs	r3, #0
   11dc6:	60ab      	str	r3, [r5, #8]
   11dc8:	f105 0018 	add.w	r0, r5, #24
   11dcc:	f006 fdd5 	bl	1897a <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   11dd0:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11dd4:	e01c      	b.n	11e10 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11dda:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   11ddc:	4601      	mov	r1, r0
   11dde:	4812      	ldr	r0, [pc, #72]	; (11e28 <end_thread+0x98>)
   11de0:	f006 fcdf 	bl	187a2 <z_priq_dumb_remove>
}
   11de4:	e7e2      	b.n	11dac <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   11de6:	4620      	mov	r0, r4
   11de8:	f006 fcba 	bl	18760 <pended_on_thread>
   11dec:	4621      	mov	r1, r4
   11dee:	f006 fcd8 	bl	187a2 <z_priq_dumb_remove>
   11df2:	7b63      	ldrb	r3, [r4, #13]
   11df4:	f023 0302 	bic.w	r3, r3, #2
   11df8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   11dfa:	2600      	movs	r6, #0
   11dfc:	60a6      	str	r6, [r4, #8]
   11dfe:	f104 0018 	add.w	r0, r4, #24
   11e02:	f006 fdba 	bl	1897a <z_abort_timeout>
   11e06:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   11e0a:	4620      	mov	r0, r4
   11e0c:	f7ff fe6a 	bl	11ae4 <ready_thread>
	return list->head == list;
   11e10:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e12:	42bc      	cmp	r4, r7
   11e14:	d001      	beq.n	11e1a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11e16:	2c00      	cmp	r4, #0
   11e18:	d1e5      	bne.n	11de6 <end_thread+0x56>
		update_cache(1);
   11e1a:	2001      	movs	r0, #1
   11e1c:	f7ff fdac 	bl	11978 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   11e20:	4628      	mov	r0, r5
   11e22:	f7ff fb05 	bl	11430 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   11e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e28:	20015a5c 	.word	0x20015a5c

00011e2c <z_sched_init>:
{
   11e2c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   11e2e:	4b05      	ldr	r3, [pc, #20]	; (11e44 <z_sched_init+0x18>)
   11e30:	f103 0220 	add.w	r2, r3, #32
   11e34:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   11e36:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   11e38:	2100      	movs	r1, #0
   11e3a:	4608      	mov	r0, r1
   11e3c:	f7ff fd2c 	bl	11898 <k_sched_time_slice_set>
}
   11e40:	bd08      	pop	{r3, pc}
   11e42:	bf00      	nop
   11e44:	20015a3c 	.word	0x20015a3c

00011e48 <z_impl_k_yield>:
{
   11e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e4a:	f04f 0320 	mov.w	r3, #32
   11e4e:	f3ef 8611 	mrs	r6, BASEPRI
   11e52:	f383 8812 	msr	BASEPRI_MAX, r3
   11e56:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   11e5a:	4c1c      	ldr	r4, [pc, #112]	; (11ecc <z_impl_k_yield+0x84>)
   11e5c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11e5e:	7b4b      	ldrb	r3, [r1, #13]
   11e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11e64:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   11e66:	f104 0720 	add.w	r7, r4, #32
   11e6a:	4638      	mov	r0, r7
   11e6c:	f006 fc99 	bl	187a2 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   11e70:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11e72:	7b6b      	ldrb	r3, [r5, #13]
   11e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11e78:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   11e7a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e7c:	42bc      	cmp	r4, r7
   11e7e:	d023      	beq.n	11ec8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11e80:	b16c      	cbz	r4, 11e9e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11e82:	4621      	mov	r1, r4
   11e84:	4628      	mov	r0, r5
   11e86:	f006 fc6d 	bl	18764 <z_sched_prio_cmp>
   11e8a:	2800      	cmp	r0, #0
   11e8c:	dc16      	bgt.n	11ebc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11e8e:	b134      	cbz	r4, 11e9e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   11e90:	4b0e      	ldr	r3, [pc, #56]	; (11ecc <z_impl_k_yield+0x84>)
   11e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11e94:	429c      	cmp	r4, r3
   11e96:	d002      	beq.n	11e9e <z_impl_k_yield+0x56>
   11e98:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11e9a:	2c00      	cmp	r4, #0
   11e9c:	d1f0      	bne.n	11e80 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   11e9e:	4b0b      	ldr	r3, [pc, #44]	; (11ecc <z_impl_k_yield+0x84>)
   11ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   11ea2:	f103 0120 	add.w	r1, r3, #32
   11ea6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   11ea8:	606a      	str	r2, [r5, #4]
	tail->next = node;
   11eaa:	6015      	str	r5, [r2, #0]
	list->tail = node;
   11eac:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   11eae:	2001      	movs	r0, #1
   11eb0:	f7ff fd62 	bl	11978 <update_cache>
   11eb4:	4630      	mov	r0, r6
   11eb6:	f7f2 fa01 	bl	42bc <arch_swap>
}
   11eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   11ebc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   11ebe:	606b      	str	r3, [r5, #4]
	node->next = successor;
   11ec0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   11ec2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   11ec4:	6065      	str	r5, [r4, #4]
}
   11ec6:	e7f2      	b.n	11eae <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11ec8:	2400      	movs	r4, #0
   11eca:	e7d9      	b.n	11e80 <z_impl_k_yield+0x38>
   11ecc:	20015a3c 	.word	0x20015a3c

00011ed0 <z_tick_sleep>:
{
   11ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ed4:	4604      	mov	r4, r0
   11ed6:	460d      	mov	r5, r1
	if (ticks == 0) {
   11ed8:	ea54 0105 	orrs.w	r1, r4, r5
   11edc:	d037      	beq.n	11f4e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   11ede:	f06f 0101 	mvn.w	r1, #1
   11ee2:	1a0a      	subs	r2, r1, r0
   11ee4:	f04f 31ff 	mov.w	r1, #4294967295
   11ee8:	eb61 0305 	sbc.w	r3, r1, r5
   11eec:	2a01      	cmp	r2, #1
   11eee:	f173 0300 	sbcs.w	r3, r3, #0
   11ef2:	db30      	blt.n	11f56 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   11ef4:	f06f 0601 	mvn.w	r6, #1
   11ef8:	1a36      	subs	r6, r6, r0
   11efa:	f04f 0320 	mov.w	r3, #32
   11efe:	f3ef 8811 	mrs	r8, BASEPRI
   11f02:	f383 8812 	msr	BASEPRI_MAX, r3
   11f06:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11f0a:	4f16      	ldr	r7, [pc, #88]	; (11f64 <z_tick_sleep+0x94>)
   11f0c:	68b8      	ldr	r0, [r7, #8]
   11f0e:	4b16      	ldr	r3, [pc, #88]	; (11f68 <z_tick_sleep+0x98>)
   11f10:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11f12:	f7ff fe45 	bl	11ba0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11f16:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11f18:	4622      	mov	r2, r4
   11f1a:	462b      	mov	r3, r5
   11f1c:	4913      	ldr	r1, [pc, #76]	; (11f6c <z_tick_sleep+0x9c>)
   11f1e:	3018      	adds	r0, #24
   11f20:	f000 f8e2 	bl	120e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11f24:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11f26:	7b53      	ldrb	r3, [r2, #13]
   11f28:	f043 0310 	orr.w	r3, r3, #16
   11f2c:	7353      	strb	r3, [r2, #13]
   11f2e:	4640      	mov	r0, r8
   11f30:	f7f2 f9c4 	bl	42bc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11f34:	2500      	movs	r5, #0
   11f36:	f006 fd7f 	bl	18a38 <sys_clock_tick_get_32>
   11f3a:	1a34      	subs	r4, r6, r0
   11f3c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   11f40:	2c01      	cmp	r4, #1
   11f42:	f175 0300 	sbcs.w	r3, r5, #0
   11f46:	da0a      	bge.n	11f5e <z_tick_sleep+0x8e>
	return 0;
   11f48:	2000      	movs	r0, #0
}
   11f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   11f4e:	f7ff ff7b 	bl	11e48 <z_impl_k_yield>
		return 0;
   11f52:	2000      	movs	r0, #0
   11f54:	e7f9      	b.n	11f4a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11f56:	f006 fd6f 	bl	18a38 <sys_clock_tick_get_32>
   11f5a:	1906      	adds	r6, r0, r4
   11f5c:	e7cd      	b.n	11efa <z_tick_sleep+0x2a>
		return ticks;
   11f5e:	4620      	mov	r0, r4
   11f60:	e7f3      	b.n	11f4a <z_tick_sleep+0x7a>
   11f62:	bf00      	nop
   11f64:	20015a3c 	.word	0x20015a3c
   11f68:	20015a70 	.word	0x20015a70
   11f6c:	000187f9 	.word	0x000187f9

00011f70 <z_impl_k_sleep>:
{
   11f70:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11f72:	f1b1 3fff 	cmp.w	r1, #4294967295
   11f76:	bf08      	it	eq
   11f78:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   11f7c:	d01a      	beq.n	11fb4 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   11f7e:	f7ff ffa7 	bl	11ed0 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   11f82:	4604      	mov	r4, r0
   11f84:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   11f86:	0169      	lsls	r1, r5, #5
   11f88:	0143      	lsls	r3, r0, #5
   11f8a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   11f8e:	1a18      	subs	r0, r3, r0
   11f90:	eb62 0305 	sbc.w	r3, r2, r5
   11f94:	009a      	lsls	r2, r3, #2
   11f96:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   11f9a:	0081      	lsls	r1, r0, #2
   11f9c:	4613      	mov	r3, r2
   11f9e:	1908      	adds	r0, r1, r4
   11fa0:	eb45 0303 	adc.w	r3, r5, r3
   11fa4:	00da      	lsls	r2, r3, #3
   11fa6:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   11faa:	00c1      	lsls	r1, r0, #3
   11fac:	0bc8      	lsrs	r0, r1, #15
   11fae:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   11fb2:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   11fb4:	4b03      	ldr	r3, [pc, #12]	; (11fc4 <z_impl_k_sleep+0x54>)
   11fb6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11fb8:	f7ff fe82 	bl	11cc0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   11fbc:	f04f 30ff 	mov.w	r0, #4294967295
   11fc0:	e7f7      	b.n	11fb2 <z_impl_k_sleep+0x42>
   11fc2:	bf00      	nop
   11fc4:	20015a3c 	.word	0x20015a3c

00011fc8 <z_impl_z_current_get>:
}
   11fc8:	4b01      	ldr	r3, [pc, #4]	; (11fd0 <z_impl_z_current_get+0x8>)
   11fca:	6898      	ldr	r0, [r3, #8]
   11fcc:	4770      	bx	lr
   11fce:	bf00      	nop
   11fd0:	20015a3c 	.word	0x20015a3c

00011fd4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   11fd4:	b538      	push	{r3, r4, r5, lr}
   11fd6:	f04f 0320 	mov.w	r3, #32
   11fda:	f3ef 8511 	mrs	r5, BASEPRI
   11fde:	f383 8812 	msr	BASEPRI_MAX, r3
   11fe2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11fe6:	7b43      	ldrb	r3, [r0, #13]
   11fe8:	f013 0f08 	tst.w	r3, #8
   11fec:	d004      	beq.n	11ff8 <z_thread_abort+0x24>
	__asm__ volatile(
   11fee:	f385 8811 	msr	BASEPRI, r5
   11ff2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11ff6:	bd38      	pop	{r3, r4, r5, pc}
   11ff8:	4604      	mov	r4, r0
	end_thread(thread);
   11ffa:	f7ff fec9 	bl	11d90 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   11ffe:	4b08      	ldr	r3, [pc, #32]	; (12020 <z_thread_abort+0x4c>)
   12000:	689b      	ldr	r3, [r3, #8]
   12002:	42a3      	cmp	r3, r4
   12004:	d004      	beq.n	12010 <z_thread_abort+0x3c>
   12006:	f385 8811 	msr	BASEPRI, r5
   1200a:	f3bf 8f6f 	isb	sy
   1200e:	e7f2      	b.n	11ff6 <z_thread_abort+0x22>
   12010:	f3ef 8305 	mrs	r3, IPSR
   12014:	2b00      	cmp	r3, #0
   12016:	d1f6      	bne.n	12006 <z_thread_abort+0x32>
   12018:	4628      	mov	r0, r5
   1201a:	f7f2 f94f 	bl	42bc <arch_swap>
	return ret;
   1201e:	e7f2      	b.n	12006 <z_thread_abort+0x32>
   12020:	20015a3c 	.word	0x20015a3c

00012024 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   12024:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   12026:	4806      	ldr	r0, [pc, #24]	; (12040 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12028:	4a06      	ldr	r2, [pc, #24]	; (12044 <z_data_copy+0x20>)
   1202a:	1a12      	subs	r2, r2, r0
   1202c:	4906      	ldr	r1, [pc, #24]	; (12048 <z_data_copy+0x24>)
   1202e:	f006 fd58 	bl	18ae2 <memcpy>
   12032:	4a06      	ldr	r2, [pc, #24]	; (1204c <z_data_copy+0x28>)
   12034:	4906      	ldr	r1, [pc, #24]	; (12050 <z_data_copy+0x2c>)
   12036:	4807      	ldr	r0, [pc, #28]	; (12054 <z_data_copy+0x30>)
   12038:	f006 fd53 	bl	18ae2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1203c:	bd08      	pop	{r3, pc}
   1203e:	bf00      	nop
   12040:	20000000 	.word	0x20000000
   12044:	20000340 	.word	0x20000340
   12048:	00035354 	.word	0x00035354
   1204c:	00000000 	.word	0x00000000
   12050:	00035354 	.word	0x00035354
   12054:	20000000 	.word	0x20000000

00012058 <first>:
	return list->head == list;
   12058:	4b03      	ldr	r3, [pc, #12]	; (12068 <first+0x10>)
   1205a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1205c:	4298      	cmp	r0, r3
   1205e:	d000      	beq.n	12062 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   12060:	4770      	bx	lr
   12062:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   12064:	e7fc      	b.n	12060 <first+0x8>
   12066:	bf00      	nop
   12068:	20000064 	.word	0x20000064

0001206c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1206c:	b130      	cbz	r0, 1207c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1206e:	4a04      	ldr	r2, [pc, #16]	; (12080 <next+0x14>)
   12070:	6852      	ldr	r2, [r2, #4]
   12072:	4290      	cmp	r0, r2
   12074:	d001      	beq.n	1207a <next+0xe>
   12076:	6800      	ldr	r0, [r0, #0]
   12078:	4770      	bx	lr
   1207a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	20000064 	.word	0x20000064

00012084 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   12084:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   12086:	4b04      	ldr	r3, [pc, #16]	; (12098 <elapsed+0x14>)
   12088:	681b      	ldr	r3, [r3, #0]
   1208a:	b10b      	cbz	r3, 12090 <elapsed+0xc>
   1208c:	2000      	movs	r0, #0
}
   1208e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   12090:	f7f3 fe38 	bl	5d04 <sys_clock_elapsed>
   12094:	e7fb      	b.n	1208e <elapsed+0xa>
   12096:	bf00      	nop
   12098:	20015a80 	.word	0x20015a80

0001209c <next_timeout>:

static int32_t next_timeout(void)
{
   1209c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1209e:	f7ff ffdb 	bl	12058 <first>
   120a2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   120a4:	f7ff ffee 	bl	12084 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   120a8:	b18c      	cbz	r4, 120ce <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   120aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   120ae:	1a12      	subs	r2, r2, r0
   120b0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   120b4:	2a01      	cmp	r2, #1
   120b6:	f173 0100 	sbcs.w	r1, r3, #0
   120ba:	db11      	blt.n	120e0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   120bc:	4610      	mov	r0, r2
   120be:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   120c2:	f173 0300 	sbcs.w	r3, r3, #0
   120c6:	db04      	blt.n	120d2 <next_timeout+0x36>
   120c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   120cc:	e001      	b.n	120d2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   120ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   120d2:	4b04      	ldr	r3, [pc, #16]	; (120e4 <next_timeout+0x48>)
   120d4:	691b      	ldr	r3, [r3, #16]
   120d6:	b113      	cbz	r3, 120de <next_timeout+0x42>
   120d8:	4283      	cmp	r3, r0
   120da:	da00      	bge.n	120de <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   120dc:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   120de:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   120e0:	2000      	movs	r0, #0
   120e2:	e7f6      	b.n	120d2 <next_timeout+0x36>
   120e4:	20015a3c 	.word	0x20015a3c

000120e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   120e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ec:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   120ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   120f2:	bf08      	it	eq
   120f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   120f8:	f000 8096 	beq.w	12228 <z_add_timeout+0x140>
   120fc:	4682      	mov	sl, r0
   120fe:	4614      	mov	r4, r2
   12100:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   12102:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   12104:	2300      	movs	r3, #0
	__asm__ volatile(
   12106:	f04f 0220 	mov.w	r2, #32
   1210a:	f3ef 8b11 	mrs	fp, BASEPRI
   1210e:	f382 8812 	msr	BASEPRI_MAX, r2
   12112:	f3bf 8f6f 	isb	sy
   12116:	e02e      	b.n	12176 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   12118:	2201      	movs	r2, #1
   1211a:	2300      	movs	r3, #0
   1211c:	e04b      	b.n	121b6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1211e:	f7ff ffb1 	bl	12084 <elapsed>
   12122:	1822      	adds	r2, r4, r0
   12124:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   12128:	3201      	adds	r2, #1
   1212a:	f143 0300 	adc.w	r3, r3, #0
   1212e:	f8ca 2010 	str.w	r2, [sl, #16]
   12132:	f8ca 3014 	str.w	r3, [sl, #20]
   12136:	e042      	b.n	121be <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   12138:	9b00      	ldr	r3, [sp, #0]
   1213a:	1ac2      	subs	r2, r0, r3
   1213c:	9b01      	ldr	r3, [sp, #4]
   1213e:	eb61 0303 	sbc.w	r3, r1, r3
   12142:	f8cc 2010 	str.w	r2, [ip, #16]
   12146:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1214a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1214e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   12152:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   12156:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1215a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1215e:	f1bc 0f00 	cmp.w	ip, #0
   12162:	d049      	beq.n	121f8 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   12164:	f7ff ff78 	bl	12058 <first>
   12168:	4582      	cmp	sl, r0
   1216a:	d050      	beq.n	1220e <z_add_timeout+0x126>
	__asm__ volatile(
   1216c:	f38b 8811 	msr	BASEPRI, fp
   12170:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   12174:	2301      	movs	r3, #1
   12176:	2b00      	cmp	r3, #0
   12178:	d156      	bne.n	12228 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1217a:	f06f 0301 	mvn.w	r3, #1
   1217e:	ebb3 0804 	subs.w	r8, r3, r4
   12182:	f04f 30ff 	mov.w	r0, #4294967295
   12186:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1218a:	f1b8 0f00 	cmp.w	r8, #0
   1218e:	f179 0300 	sbcs.w	r3, r9, #0
   12192:	dbc4      	blt.n	1211e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   12194:	4a26      	ldr	r2, [pc, #152]	; (12230 <z_add_timeout+0x148>)
   12196:	6813      	ldr	r3, [r2, #0]
   12198:	6852      	ldr	r2, [r2, #4]
   1219a:	18e3      	adds	r3, r4, r3
   1219c:	eb45 0202 	adc.w	r2, r5, r2
   121a0:	f06f 0101 	mvn.w	r1, #1
   121a4:	1ace      	subs	r6, r1, r3
   121a6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   121aa:	4632      	mov	r2, r6
   121ac:	463b      	mov	r3, r7
   121ae:	2e01      	cmp	r6, #1
   121b0:	f177 0100 	sbcs.w	r1, r7, #0
   121b4:	dbb0      	blt.n	12118 <z_add_timeout+0x30>
   121b6:	f8ca 2010 	str.w	r2, [sl, #16]
   121ba:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   121be:	f7ff ff4b 	bl	12058 <first>
   121c2:	4684      	mov	ip, r0
   121c4:	f1bc 0f00 	cmp.w	ip, #0
   121c8:	d0c9      	beq.n	1215e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   121ca:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   121ce:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   121d2:	e9cd 2300 	strd	r2, r3, [sp]
   121d6:	4282      	cmp	r2, r0
   121d8:	418b      	sbcs	r3, r1
   121da:	dbad      	blt.n	12138 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   121dc:	9b00      	ldr	r3, [sp, #0]
   121de:	1a1a      	subs	r2, r3, r0
   121e0:	9b01      	ldr	r3, [sp, #4]
   121e2:	eb63 0301 	sbc.w	r3, r3, r1
   121e6:	f8ca 2010 	str.w	r2, [sl, #16]
   121ea:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   121ee:	4660      	mov	r0, ip
   121f0:	f7ff ff3c 	bl	1206c <next>
   121f4:	4684      	mov	ip, r0
   121f6:	e7e5      	b.n	121c4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   121f8:	4b0e      	ldr	r3, [pc, #56]	; (12234 <z_add_timeout+0x14c>)
   121fa:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   121fc:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   12200:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   12204:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   12208:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1220c:	e7aa      	b.n	12164 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1220e:	f7ff ff45 	bl	1209c <next_timeout>

			if (next_time == 0 ||
   12212:	4603      	mov	r3, r0
   12214:	b118      	cbz	r0, 1221e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   12216:	4a08      	ldr	r2, [pc, #32]	; (12238 <z_add_timeout+0x150>)
   12218:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1221a:	4282      	cmp	r2, r0
   1221c:	d0a6      	beq.n	1216c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1221e:	2100      	movs	r1, #0
   12220:	4618      	mov	r0, r3
   12222:	f7f3 fd3b 	bl	5c9c <sys_clock_set_timeout>
   12226:	e7a1      	b.n	1216c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   12228:	b003      	add	sp, #12
   1222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1222e:	bf00      	nop
   12230:	200004c0 	.word	0x200004c0
   12234:	20000064 	.word	0x20000064
   12238:	20015a3c 	.word	0x20015a3c

0001223c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1223e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   12240:	f7ff fc04 	bl	11a4c <z_time_slice>
	__asm__ volatile(
   12244:	f04f 0320 	mov.w	r3, #32
   12248:	f3ef 8511 	mrs	r5, BASEPRI
   1224c:	f383 8812 	msr	BASEPRI_MAX, r3
   12250:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   12254:	4b28      	ldr	r3, [pc, #160]	; (122f8 <sys_clock_announce+0xbc>)
   12256:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   12258:	f7ff fefe 	bl	12058 <first>
   1225c:	4604      	mov	r4, r0
   1225e:	b350      	cbz	r0, 122b6 <sys_clock_announce+0x7a>
   12260:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   12264:	4b24      	ldr	r3, [pc, #144]	; (122f8 <sys_clock_announce+0xbc>)
   12266:	681b      	ldr	r3, [r3, #0]
   12268:	17d9      	asrs	r1, r3, #31
   1226a:	42b3      	cmp	r3, r6
   1226c:	eb71 0207 	sbcs.w	r2, r1, r7
   12270:	db21      	blt.n	122b6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   12272:	4a22      	ldr	r2, [pc, #136]	; (122fc <sys_clock_announce+0xc0>)
   12274:	e9d2 0100 	ldrd	r0, r1, [r2]
   12278:	1980      	adds	r0, r0, r6
   1227a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1227e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   12282:	1b9b      	subs	r3, r3, r6
   12284:	4a1c      	ldr	r2, [pc, #112]	; (122f8 <sys_clock_announce+0xbc>)
   12286:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   12288:	2200      	movs	r2, #0
   1228a:	2300      	movs	r3, #0
   1228c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   12290:	4620      	mov	r0, r4
   12292:	f006 fb5b 	bl	1894c <remove_timeout>
	__asm__ volatile(
   12296:	f385 8811 	msr	BASEPRI, r5
   1229a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1229e:	68a3      	ldr	r3, [r4, #8]
   122a0:	4620      	mov	r0, r4
   122a2:	4798      	blx	r3
	__asm__ volatile(
   122a4:	f04f 0320 	mov.w	r3, #32
   122a8:	f3ef 8511 	mrs	r5, BASEPRI
   122ac:	f383 8812 	msr	BASEPRI_MAX, r3
   122b0:	f3bf 8f6f 	isb	sy
   122b4:	e7d0      	b.n	12258 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   122b6:	b144      	cbz	r4, 122ca <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   122b8:	4b0f      	ldr	r3, [pc, #60]	; (122f8 <sys_clock_announce+0xbc>)
   122ba:	6819      	ldr	r1, [r3, #0]
   122bc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   122c0:	1a52      	subs	r2, r2, r1
   122c2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   122c6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   122ca:	480c      	ldr	r0, [pc, #48]	; (122fc <sys_clock_announce+0xc0>)
   122cc:	490a      	ldr	r1, [pc, #40]	; (122f8 <sys_clock_announce+0xbc>)
   122ce:	680c      	ldr	r4, [r1, #0]
   122d0:	e9d0 2300 	ldrd	r2, r3, [r0]
   122d4:	1912      	adds	r2, r2, r4
   122d6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   122da:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   122de:	2400      	movs	r4, #0
   122e0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   122e2:	f7ff fedb 	bl	1209c <next_timeout>
   122e6:	4621      	mov	r1, r4
   122e8:	f7f3 fcd8 	bl	5c9c <sys_clock_set_timeout>
	__asm__ volatile(
   122ec:	f385 8811 	msr	BASEPRI, r5
   122f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   122f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122f6:	bf00      	nop
   122f8:	20015a80 	.word	0x20015a80
   122fc:	200004c0 	.word	0x200004c0

00012300 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   12300:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   12302:	2100      	movs	r1, #0
	__asm__ volatile(
   12304:	f04f 0320 	mov.w	r3, #32
   12308:	f3ef 8411 	mrs	r4, BASEPRI
   1230c:	f383 8812 	msr	BASEPRI_MAX, r3
   12310:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   12314:	2200      	movs	r2, #0
   12316:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   12318:	b969      	cbnz	r1, 12336 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1231a:	f7f3 fcf3 	bl	5d04 <sys_clock_elapsed>
   1231e:	4b07      	ldr	r3, [pc, #28]	; (1233c <sys_clock_tick_get+0x3c>)
   12320:	e9d3 2300 	ldrd	r2, r3, [r3]
   12324:	1812      	adds	r2, r2, r0
   12326:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1232a:	f384 8811 	msr	BASEPRI, r4
   1232e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   12332:	2101      	movs	r1, #1
   12334:	e7f0      	b.n	12318 <sys_clock_tick_get+0x18>
	}
	return t;
}
   12336:	4610      	mov	r0, r2
   12338:	4619      	mov	r1, r3
   1233a:	bd10      	pop	{r4, pc}
   1233c:	200004c0 	.word	0x200004c0

00012340 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   12340:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12342:	4a03      	ldr	r2, [pc, #12]	; (12350 <boot_banner+0x10>)
   12344:	4903      	ldr	r1, [pc, #12]	; (12354 <boot_banner+0x14>)
   12346:	4804      	ldr	r0, [pc, #16]	; (12358 <boot_banner+0x18>)
   12348:	f001 fe5f 	bl	1400a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1234c:	bd08      	pop	{r3, pc}
   1234e:	bf00      	nop
   12350:	00031e90 	.word	0x00031e90
   12354:	00035058 	.word	0x00035058
   12358:	00035074 	.word	0x00035074

0001235c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1235c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1235e:	4c06      	ldr	r4, [pc, #24]	; (12378 <statics_init+0x1c>)
   12360:	4b06      	ldr	r3, [pc, #24]	; (1237c <statics_init+0x20>)
   12362:	429c      	cmp	r4, r3
   12364:	d206      	bcs.n	12374 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12366:	68a2      	ldr	r2, [r4, #8]
   12368:	6861      	ldr	r1, [r4, #4]
   1236a:	4620      	mov	r0, r4
   1236c:	f006 fb72 	bl	18a54 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12370:	3418      	adds	r4, #24
   12372:	e7f5      	b.n	12360 <statics_init+0x4>
		}
	}
	return 0;
}
   12374:	2000      	movs	r0, #0
   12376:	bd10      	pop	{r4, pc}
   12378:	200002b4 	.word	0x200002b4
   1237c:	200002b4 	.word	0x200002b4

00012380 <nrf_cc3xx_platform_init_no_rng>:
   12380:	b510      	push	{r4, lr}
   12382:	4c0a      	ldr	r4, [pc, #40]	; (123ac <nrf_cc3xx_platform_init_no_rng+0x2c>)
   12384:	6823      	ldr	r3, [r4, #0]
   12386:	b11b      	cbz	r3, 12390 <nrf_cc3xx_platform_init_no_rng+0x10>
   12388:	2301      	movs	r3, #1
   1238a:	2000      	movs	r0, #0
   1238c:	6023      	str	r3, [r4, #0]
   1238e:	bd10      	pop	{r4, pc}
   12390:	f000 f8d4 	bl	1253c <CC_LibInitNoRng>
   12394:	2800      	cmp	r0, #0
   12396:	d0f7      	beq.n	12388 <nrf_cc3xx_platform_init_no_rng+0x8>
   12398:	3801      	subs	r0, #1
   1239a:	2807      	cmp	r0, #7
   1239c:	d803      	bhi.n	123a6 <nrf_cc3xx_platform_init_no_rng+0x26>
   1239e:	4b04      	ldr	r3, [pc, #16]	; (123b0 <nrf_cc3xx_platform_init_no_rng+0x30>)
   123a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   123a4:	bd10      	pop	{r4, pc}
   123a6:	4803      	ldr	r0, [pc, #12]	; (123b4 <nrf_cc3xx_platform_init_no_rng+0x34>)
   123a8:	bd10      	pop	{r4, pc}
   123aa:	bf00      	nop
   123ac:	20015a84 	.word	0x20015a84
   123b0:	0003509c 	.word	0x0003509c
   123b4:	ffff8ffe 	.word	0xffff8ffe

000123b8 <nrf_cc3xx_platform_abort>:
   123b8:	f3bf 8f4f 	dsb	sy
   123bc:	4905      	ldr	r1, [pc, #20]	; (123d4 <nrf_cc3xx_platform_abort+0x1c>)
   123be:	4b06      	ldr	r3, [pc, #24]	; (123d8 <nrf_cc3xx_platform_abort+0x20>)
   123c0:	68ca      	ldr	r2, [r1, #12]
   123c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   123c6:	4313      	orrs	r3, r2
   123c8:	60cb      	str	r3, [r1, #12]
   123ca:	f3bf 8f4f 	dsb	sy
   123ce:	bf00      	nop
   123d0:	e7fd      	b.n	123ce <nrf_cc3xx_platform_abort+0x16>
   123d2:	bf00      	nop
   123d4:	e000ed00 	.word	0xe000ed00
   123d8:	05fa0004 	.word	0x05fa0004

000123dc <CC_PalAbort>:
   123dc:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   123e0:	2100      	movs	r1, #0
   123e2:	b430      	push	{r4, r5}
   123e4:	4a08      	ldr	r2, [pc, #32]	; (12408 <CC_PalAbort+0x2c>)
   123e6:	4c09      	ldr	r4, [pc, #36]	; (1240c <CC_PalAbort+0x30>)
   123e8:	4d09      	ldr	r5, [pc, #36]	; (12410 <CC_PalAbort+0x34>)
   123ea:	6023      	str	r3, [r4, #0]
   123ec:	602b      	str	r3, [r5, #0]
   123ee:	6013      	str	r3, [r2, #0]
   123f0:	60e3      	str	r3, [r4, #12]
   123f2:	60eb      	str	r3, [r5, #12]
   123f4:	60d3      	str	r3, [r2, #12]
   123f6:	61a3      	str	r3, [r4, #24]
   123f8:	4a06      	ldr	r2, [pc, #24]	; (12414 <CC_PalAbort+0x38>)
   123fa:	4c07      	ldr	r4, [pc, #28]	; (12418 <CC_PalAbort+0x3c>)
   123fc:	61ab      	str	r3, [r5, #24]
   123fe:	6863      	ldr	r3, [r4, #4]
   12400:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   12404:	bc30      	pop	{r4, r5}
   12406:	4718      	bx	r3
   12408:	50845408 	.word	0x50845408
   1240c:	50845400 	.word	0x50845400
   12410:	50845404 	.word	0x50845404
   12414:	50844000 	.word	0x50844000
   12418:	2000006c 	.word	0x2000006c

0001241c <nrf_cc3xx_platform_set_abort>:
   1241c:	4b02      	ldr	r3, [pc, #8]	; (12428 <nrf_cc3xx_platform_set_abort+0xc>)
   1241e:	e9d0 1200 	ldrd	r1, r2, [r0]
   12422:	e9c3 1200 	strd	r1, r2, [r3]
   12426:	4770      	bx	lr
   12428:	2000006c 	.word	0x2000006c

0001242c <mutex_free>:
   1242c:	b510      	push	{r4, lr}
   1242e:	4604      	mov	r4, r0
   12430:	b130      	cbz	r0, 12440 <mutex_free+0x14>
   12432:	6863      	ldr	r3, [r4, #4]
   12434:	06db      	lsls	r3, r3, #27
   12436:	d502      	bpl.n	1243e <mutex_free+0x12>
   12438:	2300      	movs	r3, #0
   1243a:	6023      	str	r3, [r4, #0]
   1243c:	6063      	str	r3, [r4, #4]
   1243e:	bd10      	pop	{r4, pc}
   12440:	4b02      	ldr	r3, [pc, #8]	; (1244c <mutex_free+0x20>)
   12442:	4803      	ldr	r0, [pc, #12]	; (12450 <mutex_free+0x24>)
   12444:	685b      	ldr	r3, [r3, #4]
   12446:	4798      	blx	r3
   12448:	e7f3      	b.n	12432 <mutex_free+0x6>
   1244a:	bf00      	nop
   1244c:	2000006c 	.word	0x2000006c
   12450:	000350bc 	.word	0x000350bc

00012454 <mutex_unlock>:
   12454:	b168      	cbz	r0, 12472 <mutex_unlock+0x1e>
   12456:	6843      	ldr	r3, [r0, #4]
   12458:	b13b      	cbz	r3, 1246a <mutex_unlock+0x16>
   1245a:	06db      	lsls	r3, r3, #27
   1245c:	d507      	bpl.n	1246e <mutex_unlock+0x1a>
   1245e:	f3bf 8f5f 	dmb	sy
   12462:	2300      	movs	r3, #0
   12464:	6003      	str	r3, [r0, #0]
   12466:	4618      	mov	r0, r3
   12468:	4770      	bx	lr
   1246a:	4803      	ldr	r0, [pc, #12]	; (12478 <mutex_unlock+0x24>)
   1246c:	4770      	bx	lr
   1246e:	4803      	ldr	r0, [pc, #12]	; (1247c <mutex_unlock+0x28>)
   12470:	4770      	bx	lr
   12472:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12476:	4770      	bx	lr
   12478:	ffff8fea 	.word	0xffff8fea
   1247c:	ffff8fe9 	.word	0xffff8fe9

00012480 <mutex_init>:
   12480:	b510      	push	{r4, lr}
   12482:	4604      	mov	r4, r0
   12484:	b120      	cbz	r0, 12490 <mutex_init+0x10>
   12486:	2200      	movs	r2, #0
   12488:	2311      	movs	r3, #17
   1248a:	6022      	str	r2, [r4, #0]
   1248c:	6063      	str	r3, [r4, #4]
   1248e:	bd10      	pop	{r4, pc}
   12490:	4801      	ldr	r0, [pc, #4]	; (12498 <mutex_init+0x18>)
   12492:	f7ff ffa3 	bl	123dc <CC_PalAbort>
   12496:	e7f6      	b.n	12486 <mutex_init+0x6>
   12498:	000350e4 	.word	0x000350e4

0001249c <mutex_lock>:
   1249c:	b1a0      	cbz	r0, 124c8 <mutex_lock+0x2c>
   1249e:	6843      	ldr	r3, [r0, #4]
   124a0:	b183      	cbz	r3, 124c4 <mutex_lock+0x28>
   124a2:	06db      	lsls	r3, r3, #27
   124a4:	d50c      	bpl.n	124c0 <mutex_lock+0x24>
   124a6:	2201      	movs	r2, #1
   124a8:	e8d0 3fef 	ldaex	r3, [r0]
   124ac:	e8c0 2fe1 	stlex	r1, r2, [r0]
   124b0:	2900      	cmp	r1, #0
   124b2:	d1f9      	bne.n	124a8 <mutex_lock+0xc>
   124b4:	2b01      	cmp	r3, #1
   124b6:	d0f7      	beq.n	124a8 <mutex_lock+0xc>
   124b8:	f3bf 8f5f 	dmb	sy
   124bc:	2000      	movs	r0, #0
   124be:	4770      	bx	lr
   124c0:	4803      	ldr	r0, [pc, #12]	; (124d0 <mutex_lock+0x34>)
   124c2:	4770      	bx	lr
   124c4:	4803      	ldr	r0, [pc, #12]	; (124d4 <mutex_lock+0x38>)
   124c6:	4770      	bx	lr
   124c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   124cc:	4770      	bx	lr
   124ce:	bf00      	nop
   124d0:	ffff8fe9 	.word	0xffff8fe9
   124d4:	ffff8fea 	.word	0xffff8fea

000124d8 <nrf_cc3xx_platform_set_mutexes>:
   124d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124dc:	4c14      	ldr	r4, [pc, #80]	; (12530 <nrf_cc3xx_platform_set_mutexes+0x58>)
   124de:	6802      	ldr	r2, [r0, #0]
   124e0:	68c3      	ldr	r3, [r0, #12]
   124e2:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   124e6:	e9c4 6302 	strd	r6, r3, [r4, #8]
   124ea:	e9c4 2500 	strd	r2, r5, [r4]
   124ee:	4b11      	ldr	r3, [pc, #68]	; (12534 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   124f0:	680e      	ldr	r6, [r1, #0]
   124f2:	6848      	ldr	r0, [r1, #4]
   124f4:	4d10      	ldr	r5, [pc, #64]	; (12538 <nrf_cc3xx_platform_set_mutexes+0x60>)
   124f6:	e9c3 6000 	strd	r6, r0, [r3]
   124fa:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   124fe:	6908      	ldr	r0, [r1, #16]
   12500:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   12504:	e9c3 7602 	strd	r7, r6, [r3, #8]
   12508:	6118      	str	r0, [r3, #16]
   1250a:	06cb      	lsls	r3, r1, #27
   1250c:	d50d      	bpl.n	1252a <nrf_cc3xx_platform_set_mutexes+0x52>
   1250e:	2300      	movs	r3, #0
   12510:	f505 7088 	add.w	r0, r5, #272	; 0x110
   12514:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   12518:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1251c:	4790      	blx	r2
   1251e:	6823      	ldr	r3, [r4, #0]
   12520:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   12524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12528:	4718      	bx	r3
   1252a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1252e:	bf00      	nop
   12530:	2000007c 	.word	0x2000007c
   12534:	2000008c 	.word	0x2000008c
   12538:	20015aac 	.word	0x20015aac

0001253c <CC_LibInitNoRng>:
   1253c:	b508      	push	{r3, lr}
   1253e:	f000 f80f 	bl	12560 <CC_HalInit>
   12542:	b928      	cbnz	r0, 12550 <CC_LibInitNoRng+0x14>
   12544:	f000 f80e 	bl	12564 <CC_PalInit>
   12548:	b930      	cbnz	r0, 12558 <CC_LibInitNoRng+0x1c>
   1254a:	4a04      	ldr	r2, [pc, #16]	; (1255c <CC_LibInitNoRng+0x20>)
   1254c:	6010      	str	r0, [r2, #0]
   1254e:	bd08      	pop	{r3, pc}
   12550:	f000 f836 	bl	125c0 <CC_PalTerminate>
   12554:	2003      	movs	r0, #3
   12556:	bd08      	pop	{r3, pc}
   12558:	2004      	movs	r0, #4
   1255a:	bd08      	pop	{r3, pc}
   1255c:	50845a0c 	.word	0x50845a0c

00012560 <CC_HalInit>:
   12560:	2000      	movs	r0, #0
   12562:	4770      	bx	lr

00012564 <CC_PalInit>:
   12564:	b510      	push	{r4, lr}
   12566:	4811      	ldr	r0, [pc, #68]	; (125ac <CC_PalInit+0x48>)
   12568:	f000 f848 	bl	125fc <CC_PalMutexCreate>
   1256c:	b100      	cbz	r0, 12570 <CC_PalInit+0xc>
   1256e:	bd10      	pop	{r4, pc}
   12570:	480f      	ldr	r0, [pc, #60]	; (125b0 <CC_PalInit+0x4c>)
   12572:	f000 f843 	bl	125fc <CC_PalMutexCreate>
   12576:	2800      	cmp	r0, #0
   12578:	d1f9      	bne.n	1256e <CC_PalInit+0xa>
   1257a:	4c0e      	ldr	r4, [pc, #56]	; (125b4 <CC_PalInit+0x50>)
   1257c:	4620      	mov	r0, r4
   1257e:	f000 f83d 	bl	125fc <CC_PalMutexCreate>
   12582:	2800      	cmp	r0, #0
   12584:	d1f3      	bne.n	1256e <CC_PalInit+0xa>
   12586:	4b0c      	ldr	r3, [pc, #48]	; (125b8 <CC_PalInit+0x54>)
   12588:	480c      	ldr	r0, [pc, #48]	; (125bc <CC_PalInit+0x58>)
   1258a:	601c      	str	r4, [r3, #0]
   1258c:	f000 f836 	bl	125fc <CC_PalMutexCreate>
   12590:	4601      	mov	r1, r0
   12592:	2800      	cmp	r0, #0
   12594:	d1eb      	bne.n	1256e <CC_PalInit+0xa>
   12596:	f000 f82d 	bl	125f4 <CC_PalDmaInit>
   1259a:	4604      	mov	r4, r0
   1259c:	b108      	cbz	r0, 125a2 <CC_PalInit+0x3e>
   1259e:	4620      	mov	r0, r4
   125a0:	bd10      	pop	{r4, pc}
   125a2:	f000 f83f 	bl	12624 <CC_PalPowerSaveModeInit>
   125a6:	4620      	mov	r0, r4
   125a8:	e7fa      	b.n	125a0 <CC_PalInit+0x3c>
   125aa:	bf00      	nop
   125ac:	200000c4 	.word	0x200000c4
   125b0:	200000b8 	.word	0x200000b8
   125b4:	200000c0 	.word	0x200000c0
   125b8:	200000c8 	.word	0x200000c8
   125bc:	200000bc 	.word	0x200000bc

000125c0 <CC_PalTerminate>:
   125c0:	b508      	push	{r3, lr}
   125c2:	4808      	ldr	r0, [pc, #32]	; (125e4 <CC_PalTerminate+0x24>)
   125c4:	f000 f824 	bl	12610 <CC_PalMutexDestroy>
   125c8:	4807      	ldr	r0, [pc, #28]	; (125e8 <CC_PalTerminate+0x28>)
   125ca:	f000 f821 	bl	12610 <CC_PalMutexDestroy>
   125ce:	4807      	ldr	r0, [pc, #28]	; (125ec <CC_PalTerminate+0x2c>)
   125d0:	f000 f81e 	bl	12610 <CC_PalMutexDestroy>
   125d4:	4806      	ldr	r0, [pc, #24]	; (125f0 <CC_PalTerminate+0x30>)
   125d6:	f000 f81b 	bl	12610 <CC_PalMutexDestroy>
   125da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   125de:	f000 b80b 	b.w	125f8 <CC_PalDmaTerminate>
   125e2:	bf00      	nop
   125e4:	200000c4 	.word	0x200000c4
   125e8:	200000b8 	.word	0x200000b8
   125ec:	200000c0 	.word	0x200000c0
   125f0:	200000bc 	.word	0x200000bc

000125f4 <CC_PalDmaInit>:
   125f4:	2000      	movs	r0, #0
   125f6:	4770      	bx	lr

000125f8 <CC_PalDmaTerminate>:
   125f8:	4770      	bx	lr
   125fa:	bf00      	nop

000125fc <CC_PalMutexCreate>:
   125fc:	b508      	push	{r3, lr}
   125fe:	4b03      	ldr	r3, [pc, #12]	; (1260c <CC_PalMutexCreate+0x10>)
   12600:	6802      	ldr	r2, [r0, #0]
   12602:	681b      	ldr	r3, [r3, #0]
   12604:	6810      	ldr	r0, [r2, #0]
   12606:	4798      	blx	r3
   12608:	2000      	movs	r0, #0
   1260a:	bd08      	pop	{r3, pc}
   1260c:	2000007c 	.word	0x2000007c

00012610 <CC_PalMutexDestroy>:
   12610:	b508      	push	{r3, lr}
   12612:	4b03      	ldr	r3, [pc, #12]	; (12620 <CC_PalMutexDestroy+0x10>)
   12614:	6802      	ldr	r2, [r0, #0]
   12616:	685b      	ldr	r3, [r3, #4]
   12618:	6810      	ldr	r0, [r2, #0]
   1261a:	4798      	blx	r3
   1261c:	2000      	movs	r0, #0
   1261e:	bd08      	pop	{r3, pc}
   12620:	2000007c 	.word	0x2000007c

00012624 <CC_PalPowerSaveModeInit>:
   12624:	b570      	push	{r4, r5, r6, lr}
   12626:	4c09      	ldr	r4, [pc, #36]	; (1264c <CC_PalPowerSaveModeInit+0x28>)
   12628:	4d09      	ldr	r5, [pc, #36]	; (12650 <CC_PalPowerSaveModeInit+0x2c>)
   1262a:	6920      	ldr	r0, [r4, #16]
   1262c:	68ab      	ldr	r3, [r5, #8]
   1262e:	4798      	blx	r3
   12630:	b118      	cbz	r0, 1263a <CC_PalPowerSaveModeInit+0x16>
   12632:	4b08      	ldr	r3, [pc, #32]	; (12654 <CC_PalPowerSaveModeInit+0x30>)
   12634:	4808      	ldr	r0, [pc, #32]	; (12658 <CC_PalPowerSaveModeInit+0x34>)
   12636:	685b      	ldr	r3, [r3, #4]
   12638:	4798      	blx	r3
   1263a:	2100      	movs	r1, #0
   1263c:	4a07      	ldr	r2, [pc, #28]	; (1265c <CC_PalPowerSaveModeInit+0x38>)
   1263e:	68eb      	ldr	r3, [r5, #12]
   12640:	6011      	str	r1, [r2, #0]
   12642:	6920      	ldr	r0, [r4, #16]
   12644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12648:	4718      	bx	r3
   1264a:	bf00      	nop
   1264c:	2000008c 	.word	0x2000008c
   12650:	2000007c 	.word	0x2000007c
   12654:	2000006c 	.word	0x2000006c
   12658:	00035108 	.word	0x00035108
   1265c:	20015a98 	.word	0x20015a98

00012660 <_ZSt15get_new_handlerv>:
   12660:	4b01      	ldr	r3, [pc, #4]	; (12668 <_ZSt15get_new_handlerv+0x8>)
   12662:	e8d3 0faf 	lda	r0, [r3]
   12666:	4770      	bx	lr
   12668:	20015a9c 	.word	0x20015a9c

0001266c <frexp>:
   1266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1266e:	f8df c064 	ldr.w	ip, [pc, #100]	; 126d4 <frexp+0x68>
   12672:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   12676:	2700      	movs	r7, #0
   12678:	4604      	mov	r4, r0
   1267a:	4563      	cmp	r3, ip
   1267c:	460d      	mov	r5, r1
   1267e:	4616      	mov	r6, r2
   12680:	6017      	str	r7, [r2, #0]
   12682:	dc20      	bgt.n	126c6 <frexp+0x5a>
   12684:	4684      	mov	ip, r0
   12686:	ea53 0c0c 	orrs.w	ip, r3, ip
   1268a:	d01c      	beq.n	126c6 <frexp+0x5a>
   1268c:	f8df c048 	ldr.w	ip, [pc, #72]	; 126d8 <frexp+0x6c>
   12690:	460a      	mov	r2, r1
   12692:	ea01 0c0c 	and.w	ip, r1, ip
   12696:	f1bc 0f00 	cmp.w	ip, #0
   1269a:	d109      	bne.n	126b0 <frexp+0x44>
   1269c:	2200      	movs	r2, #0
   1269e:	4b0b      	ldr	r3, [pc, #44]	; (126cc <frexp+0x60>)
   126a0:	f7ed ff16 	bl	4d0 <__aeabi_dmul>
   126a4:	f06f 0735 	mvn.w	r7, #53	; 0x35
   126a8:	4604      	mov	r4, r0
   126aa:	460a      	mov	r2, r1
   126ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   126b0:	4907      	ldr	r1, [pc, #28]	; (126d0 <frexp+0x64>)
   126b2:	151b      	asrs	r3, r3, #20
   126b4:	4011      	ands	r1, r2
   126b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   126ba:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
   126be:	443b      	add	r3, r7
   126c0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   126c4:	6033      	str	r3, [r6, #0]
   126c6:	4620      	mov	r0, r4
   126c8:	4629      	mov	r1, r5
   126ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126cc:	43500000 	.word	0x43500000
   126d0:	800fffff 	.word	0x800fffff
   126d4:	7fefffff 	.word	0x7fefffff
   126d8:	7ff00000 	.word	0x7ff00000

000126dc <round>:
   126dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126de:	f3c1 570a 	ubfx	r7, r1, #20, #11
   126e2:	460d      	mov	r5, r1
   126e4:	460b      	mov	r3, r1
   126e6:	4602      	mov	r2, r0
   126e8:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   126ec:	2c13      	cmp	r4, #19
   126ee:	dc12      	bgt.n	12716 <round+0x3a>
   126f0:	2c00      	cmp	r4, #0
   126f2:	db2c      	blt.n	1274e <round+0x72>
   126f4:	491b      	ldr	r1, [pc, #108]	; (12764 <round+0x88>)
   126f6:	4121      	asrs	r1, r4
   126f8:	ea05 0001 	and.w	r0, r5, r1
   126fc:	4310      	orrs	r0, r2
   126fe:	d007      	beq.n	12710 <round+0x34>
   12700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   12704:	2200      	movs	r2, #0
   12706:	4123      	asrs	r3, r4
   12708:	441d      	add	r5, r3
   1270a:	ea25 0501 	bic.w	r5, r5, r1
   1270e:	462b      	mov	r3, r5
   12710:	4610      	mov	r0, r2
   12712:	4619      	mov	r1, r3
   12714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12716:	2c33      	cmp	r4, #51	; 0x33
   12718:	dd07      	ble.n	1272a <round+0x4e>
   1271a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1271e:	d1f7      	bne.n	12710 <round+0x34>
   12720:	f7ed fd20 	bl	164 <__adddf3>
   12724:	4602      	mov	r2, r0
   12726:	460b      	mov	r3, r1
   12728:	e7f2      	b.n	12710 <round+0x34>
   1272a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1272e:	f04f 31ff 	mov.w	r1, #4294967295
   12732:	fa21 f707 	lsr.w	r7, r1, r7
   12736:	4238      	tst	r0, r7
   12738:	d0ea      	beq.n	12710 <round+0x34>
   1273a:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   1273e:	2201      	movs	r2, #1
   12740:	409a      	lsls	r2, r3
   12742:	1882      	adds	r2, r0, r2
   12744:	bf28      	it	cs
   12746:	3501      	addcs	r5, #1
   12748:	ea22 0207 	bic.w	r2, r2, r7
   1274c:	e7df      	b.n	1270e <round+0x32>
   1274e:	3401      	adds	r4, #1
   12750:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   12754:	d002      	beq.n	1275c <round+0x80>
   12756:	461d      	mov	r5, r3
   12758:	2200      	movs	r2, #0
   1275a:	e7d8      	b.n	1270e <round+0x32>
   1275c:	4d02      	ldr	r5, [pc, #8]	; (12768 <round+0x8c>)
   1275e:	2200      	movs	r2, #0
   12760:	431d      	orrs	r5, r3
   12762:	e7d4      	b.n	1270e <round+0x32>
   12764:	000fffff 	.word	0x000fffff
   12768:	3ff00000 	.word	0x3ff00000

0001276c <expf>:
   1276c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1276e:	4e33      	ldr	r6, [pc, #204]	; (1283c <expf+0xd0>)
   12770:	b08b      	sub	sp, #44	; 0x2c
   12772:	4605      	mov	r5, r0
   12774:	f000 f86e 	bl	12854 <__ieee754_expf>
   12778:	f996 3000 	ldrsb.w	r3, [r6]
   1277c:	4604      	mov	r4, r0
   1277e:	3301      	adds	r3, #1
   12780:	d00f      	beq.n	127a2 <expf+0x36>
   12782:	4628      	mov	r0, r5
   12784:	f000 f982 	bl	12a8c <finitef>
   12788:	b158      	cbz	r0, 127a2 <expf+0x36>
   1278a:	492d      	ldr	r1, [pc, #180]	; (12840 <expf+0xd4>)
   1278c:	4628      	mov	r0, r5
   1278e:	f7ee fc7b 	bl	1088 <__aeabi_fcmpgt>
   12792:	4607      	mov	r7, r0
   12794:	2800      	cmp	r0, #0
   12796:	d134      	bne.n	12802 <expf+0x96>
   12798:	492a      	ldr	r1, [pc, #168]	; (12844 <expf+0xd8>)
   1279a:	4628      	mov	r0, r5
   1279c:	f7ee fc56 	bl	104c <__aeabi_fcmplt>
   127a0:	b910      	cbnz	r0, 127a8 <expf+0x3c>
   127a2:	4620      	mov	r0, r4
   127a4:	b00b      	add	sp, #44	; 0x2c
   127a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127a8:	4b27      	ldr	r3, [pc, #156]	; (12848 <expf+0xdc>)
   127aa:	2204      	movs	r2, #4
   127ac:	4628      	mov	r0, r5
   127ae:	9708      	str	r7, [sp, #32]
   127b0:	2400      	movs	r4, #0
   127b2:	2500      	movs	r5, #0
   127b4:	e9cd 2300 	strd	r2, r3, [sp]
   127b8:	f7ed fe32 	bl	420 <__aeabi_f2d>
   127bc:	f996 3000 	ldrsb.w	r3, [r6]
   127c0:	2b02      	cmp	r3, #2
   127c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   127c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   127ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   127ce:	d013      	beq.n	127f8 <expf+0x8c>
   127d0:	4668      	mov	r0, sp
   127d2:	f000 f959 	bl	12a88 <matherr>
   127d6:	b178      	cbz	r0, 127f8 <expf+0x8c>
   127d8:	9b08      	ldr	r3, [sp, #32]
   127da:	bb4b      	cbnz	r3, 12830 <expf+0xc4>
   127dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   127e0:	f7ee f938 	bl	a54 <__aeabi_d2f>
   127e4:	4604      	mov	r4, r0
   127e6:	4620      	mov	r0, r4
   127e8:	b00b      	add	sp, #44	; 0x2c
   127ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127ec:	2000      	movs	r0, #0
   127ee:	4917      	ldr	r1, [pc, #92]	; (1284c <expf+0xe0>)
   127f0:	2b02      	cmp	r3, #2
   127f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   127f6:	d1eb      	bne.n	127d0 <expf+0x64>
   127f8:	f002 f906 	bl	14a08 <__errno>
   127fc:	2322      	movs	r3, #34	; 0x22
   127fe:	6003      	str	r3, [r0, #0]
   12800:	e7ea      	b.n	127d8 <expf+0x6c>
   12802:	2300      	movs	r3, #0
   12804:	2103      	movs	r1, #3
   12806:	4a10      	ldr	r2, [pc, #64]	; (12848 <expf+0xdc>)
   12808:	4628      	mov	r0, r5
   1280a:	9308      	str	r3, [sp, #32]
   1280c:	e9cd 1200 	strd	r1, r2, [sp]
   12810:	f7ed fe06 	bl	420 <__aeabi_f2d>
   12814:	f996 3000 	ldrsb.w	r3, [r6]
   12818:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1281c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   12820:	2b00      	cmp	r3, #0
   12822:	d1e3      	bne.n	127ec <expf+0x80>
   12824:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   12828:	4b09      	ldr	r3, [pc, #36]	; (12850 <expf+0xe4>)
   1282a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1282e:	e7cf      	b.n	127d0 <expf+0x64>
   12830:	f002 f8ea 	bl	14a08 <__errno>
   12834:	9b08      	ldr	r3, [sp, #32]
   12836:	6003      	str	r3, [r0, #0]
   12838:	e7d0      	b.n	127dc <expf+0x70>
   1283a:	bf00      	nop
   1283c:	2000029c 	.word	0x2000029c
   12840:	42b17180 	.word	0x42b17180
   12844:	c2cff1b5 	.word	0xc2cff1b5
   12848:	00035128 	.word	0x00035128
   1284c:	7ff00000 	.word	0x7ff00000
   12850:	47efffff 	.word	0x47efffff

00012854 <__ieee754_expf>:
   12854:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   12858:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   1285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12860:	4604      	mov	r4, r0
   12862:	d86e      	bhi.n	12942 <__ieee754_expf+0xee>
   12864:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   12868:	f000 80bf 	beq.w	129ea <__ieee754_expf+0x196>
   1286c:	4976      	ldr	r1, [pc, #472]	; (12a48 <__ieee754_expf+0x1f4>)
   1286e:	4288      	cmp	r0, r1
   12870:	dc6c      	bgt.n	1294c <__ieee754_expf+0xf8>
   12872:	b12d      	cbz	r5, 12880 <__ieee754_expf+0x2c>
   12874:	4b75      	ldr	r3, [pc, #468]	; (12a4c <__ieee754_expf+0x1f8>)
   12876:	429a      	cmp	r2, r3
   12878:	d902      	bls.n	12880 <__ieee754_expf+0x2c>
   1287a:	2000      	movs	r0, #0
   1287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12880:	4b73      	ldr	r3, [pc, #460]	; (12a50 <__ieee754_expf+0x1fc>)
   12882:	429a      	cmp	r2, r3
   12884:	d968      	bls.n	12958 <__ieee754_expf+0x104>
   12886:	4b73      	ldr	r3, [pc, #460]	; (12a54 <__ieee754_expf+0x200>)
   12888:	429a      	cmp	r2, r3
   1288a:	f200 80ba 	bhi.w	12a02 <__ieee754_expf+0x1ae>
   1288e:	4b72      	ldr	r3, [pc, #456]	; (12a58 <__ieee754_expf+0x204>)
   12890:	4620      	mov	r0, r4
   12892:	f1c5 0401 	rsb	r4, r5, #1
   12896:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   1289a:	f7ee f92f 	bl	afc <__aeabi_fsub>
   1289e:	4b6f      	ldr	r3, [pc, #444]	; (12a5c <__ieee754_expf+0x208>)
   128a0:	4680      	mov	r8, r0
   128a2:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   128a6:	1b65      	subs	r5, r4, r5
   128a8:	4649      	mov	r1, r9
   128aa:	4640      	mov	r0, r8
   128ac:	f7ee f926 	bl	afc <__aeabi_fsub>
   128b0:	4601      	mov	r1, r0
   128b2:	4606      	mov	r6, r0
   128b4:	4604      	mov	r4, r0
   128b6:	f7ee fa2b 	bl	d10 <__aeabi_fmul>
   128ba:	4969      	ldr	r1, [pc, #420]	; (12a60 <__ieee754_expf+0x20c>)
   128bc:	4607      	mov	r7, r0
   128be:	f7ee fa27 	bl	d10 <__aeabi_fmul>
   128c2:	4968      	ldr	r1, [pc, #416]	; (12a64 <__ieee754_expf+0x210>)
   128c4:	f7ee f91a 	bl	afc <__aeabi_fsub>
   128c8:	4639      	mov	r1, r7
   128ca:	f7ee fa21 	bl	d10 <__aeabi_fmul>
   128ce:	4966      	ldr	r1, [pc, #408]	; (12a68 <__ieee754_expf+0x214>)
   128d0:	f7ee f916 	bl	b00 <__addsf3>
   128d4:	4639      	mov	r1, r7
   128d6:	f7ee fa1b 	bl	d10 <__aeabi_fmul>
   128da:	4964      	ldr	r1, [pc, #400]	; (12a6c <__ieee754_expf+0x218>)
   128dc:	f7ee f90e 	bl	afc <__aeabi_fsub>
   128e0:	4639      	mov	r1, r7
   128e2:	f7ee fa15 	bl	d10 <__aeabi_fmul>
   128e6:	4962      	ldr	r1, [pc, #392]	; (12a70 <__ieee754_expf+0x21c>)
   128e8:	f7ee f90a 	bl	b00 <__addsf3>
   128ec:	4639      	mov	r1, r7
   128ee:	f7ee fa0f 	bl	d10 <__aeabi_fmul>
   128f2:	4601      	mov	r1, r0
   128f4:	4630      	mov	r0, r6
   128f6:	f7ee f901 	bl	afc <__aeabi_fsub>
   128fa:	4607      	mov	r7, r0
   128fc:	4682      	mov	sl, r0
   128fe:	2d00      	cmp	r5, #0
   12900:	d05c      	beq.n	129bc <__ieee754_expf+0x168>
   12902:	4639      	mov	r1, r7
   12904:	4630      	mov	r0, r6
   12906:	f7ee fa03 	bl	d10 <__aeabi_fmul>
   1290a:	4604      	mov	r4, r0
   1290c:	4639      	mov	r1, r7
   1290e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   12912:	f7ee f8f3 	bl	afc <__aeabi_fsub>
   12916:	4601      	mov	r1, r0
   12918:	4620      	mov	r0, r4
   1291a:	f7ee faad 	bl	e78 <__aeabi_fdiv>
   1291e:	4601      	mov	r1, r0
   12920:	4648      	mov	r0, r9
   12922:	f7ee f8eb 	bl	afc <__aeabi_fsub>
   12926:	4641      	mov	r1, r8
   12928:	f7ee f8e8 	bl	afc <__aeabi_fsub>
   1292c:	4601      	mov	r1, r0
   1292e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   12932:	f7ee f8e3 	bl	afc <__aeabi_fsub>
   12936:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1293a:	db5a      	blt.n	129f2 <__ieee754_expf+0x19e>
   1293c:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   12940:	e002      	b.n	12948 <__ieee754_expf+0xf4>
   12942:	4601      	mov	r1, r0
   12944:	f7ee f8dc 	bl	b00 <__addsf3>
   12948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1294c:	4949      	ldr	r1, [pc, #292]	; (12a74 <__ieee754_expf+0x220>)
   1294e:	4608      	mov	r0, r1
   12950:	f7ee f9de 	bl	d10 <__aeabi_fmul>
   12954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12958:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   1295c:	d209      	bcs.n	12972 <__ieee754_expf+0x11e>
   1295e:	4945      	ldr	r1, [pc, #276]	; (12a74 <__ieee754_expf+0x220>)
   12960:	4620      	mov	r0, r4
   12962:	f7ee f8cd 	bl	b00 <__addsf3>
   12966:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1296a:	f7ee fb8d 	bl	1088 <__aeabi_fcmpgt>
   1296e:	2800      	cmp	r0, #0
   12970:	d164      	bne.n	12a3c <__ieee754_expf+0x1e8>
   12972:	4621      	mov	r1, r4
   12974:	4620      	mov	r0, r4
   12976:	f7ee f9cb 	bl	d10 <__aeabi_fmul>
   1297a:	4939      	ldr	r1, [pc, #228]	; (12a60 <__ieee754_expf+0x20c>)
   1297c:	4605      	mov	r5, r0
   1297e:	f7ee f9c7 	bl	d10 <__aeabi_fmul>
   12982:	4938      	ldr	r1, [pc, #224]	; (12a64 <__ieee754_expf+0x210>)
   12984:	f7ee f8ba 	bl	afc <__aeabi_fsub>
   12988:	4629      	mov	r1, r5
   1298a:	f7ee f9c1 	bl	d10 <__aeabi_fmul>
   1298e:	4936      	ldr	r1, [pc, #216]	; (12a68 <__ieee754_expf+0x214>)
   12990:	f7ee f8b6 	bl	b00 <__addsf3>
   12994:	4629      	mov	r1, r5
   12996:	f7ee f9bb 	bl	d10 <__aeabi_fmul>
   1299a:	4934      	ldr	r1, [pc, #208]	; (12a6c <__ieee754_expf+0x218>)
   1299c:	f7ee f8ae 	bl	afc <__aeabi_fsub>
   129a0:	4629      	mov	r1, r5
   129a2:	f7ee f9b5 	bl	d10 <__aeabi_fmul>
   129a6:	4932      	ldr	r1, [pc, #200]	; (12a70 <__ieee754_expf+0x21c>)
   129a8:	f7ee f8aa 	bl	b00 <__addsf3>
   129ac:	4629      	mov	r1, r5
   129ae:	f7ee f9af 	bl	d10 <__aeabi_fmul>
   129b2:	4601      	mov	r1, r0
   129b4:	4620      	mov	r0, r4
   129b6:	f7ee f8a1 	bl	afc <__aeabi_fsub>
   129ba:	4682      	mov	sl, r0
   129bc:	4651      	mov	r1, sl
   129be:	4620      	mov	r0, r4
   129c0:	f7ee f9a6 	bl	d10 <__aeabi_fmul>
   129c4:	4605      	mov	r5, r0
   129c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   129ca:	4650      	mov	r0, sl
   129cc:	f7ee f896 	bl	afc <__aeabi_fsub>
   129d0:	4601      	mov	r1, r0
   129d2:	4628      	mov	r0, r5
   129d4:	f7ee fa50 	bl	e78 <__aeabi_fdiv>
   129d8:	4621      	mov	r1, r4
   129da:	f7ee f88f 	bl	afc <__aeabi_fsub>
   129de:	4601      	mov	r1, r0
   129e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   129e4:	f7ee f88a 	bl	afc <__aeabi_fsub>
   129e8:	e7ae      	b.n	12948 <__ieee754_expf+0xf4>
   129ea:	2d00      	cmp	r5, #0
   129ec:	f47f af45 	bne.w	1287a <__ieee754_expf+0x26>
   129f0:	e7aa      	b.n	12948 <__ieee754_expf+0xf4>
   129f2:	3564      	adds	r5, #100	; 0x64
   129f4:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   129f8:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   129fc:	f7ee f988 	bl	d10 <__aeabi_fmul>
   12a00:	e7a2      	b.n	12948 <__ieee754_expf+0xf4>
   12a02:	491d      	ldr	r1, [pc, #116]	; (12a78 <__ieee754_expf+0x224>)
   12a04:	4620      	mov	r0, r4
   12a06:	f7ee f983 	bl	d10 <__aeabi_fmul>
   12a0a:	4b1c      	ldr	r3, [pc, #112]	; (12a7c <__ieee754_expf+0x228>)
   12a0c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   12a10:	f7ee f876 	bl	b00 <__addsf3>
   12a14:	f7ee fb42 	bl	109c <__aeabi_f2iz>
   12a18:	4605      	mov	r5, r0
   12a1a:	f7ee f925 	bl	c68 <__aeabi_i2f>
   12a1e:	4918      	ldr	r1, [pc, #96]	; (12a80 <__ieee754_expf+0x22c>)
   12a20:	4606      	mov	r6, r0
   12a22:	f7ee f975 	bl	d10 <__aeabi_fmul>
   12a26:	4601      	mov	r1, r0
   12a28:	4620      	mov	r0, r4
   12a2a:	f7ee f867 	bl	afc <__aeabi_fsub>
   12a2e:	4915      	ldr	r1, [pc, #84]	; (12a84 <__ieee754_expf+0x230>)
   12a30:	4680      	mov	r8, r0
   12a32:	4630      	mov	r0, r6
   12a34:	f7ee f96c 	bl	d10 <__aeabi_fmul>
   12a38:	4681      	mov	r9, r0
   12a3a:	e735      	b.n	128a8 <__ieee754_expf+0x54>
   12a3c:	4620      	mov	r0, r4
   12a3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12a42:	f7ee f85d 	bl	b00 <__addsf3>
   12a46:	e77f      	b.n	12948 <__ieee754_expf+0xf4>
   12a48:	42b17217 	.word	0x42b17217
   12a4c:	42cff1b5 	.word	0x42cff1b5
   12a50:	3eb17218 	.word	0x3eb17218
   12a54:	3f851591 	.word	0x3f851591
   12a58:	00035138 	.word	0x00035138
   12a5c:	00035140 	.word	0x00035140
   12a60:	3331bb4c 	.word	0x3331bb4c
   12a64:	35ddea0e 	.word	0x35ddea0e
   12a68:	388ab355 	.word	0x388ab355
   12a6c:	3b360b61 	.word	0x3b360b61
   12a70:	3e2aaaab 	.word	0x3e2aaaab
   12a74:	7149f2ca 	.word	0x7149f2ca
   12a78:	3fb8aa3b 	.word	0x3fb8aa3b
   12a7c:	00035130 	.word	0x00035130
   12a80:	3f317180 	.word	0x3f317180
   12a84:	3717f7d1 	.word	0x3717f7d1

00012a88 <matherr>:
   12a88:	2000      	movs	r0, #0
   12a8a:	4770      	bx	lr

00012a8c <finitef>:
   12a8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   12a90:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   12a94:	bfac      	ite	ge
   12a96:	2000      	movge	r0, #0
   12a98:	2001      	movlt	r0, #1
   12a9a:	4770      	bx	lr

00012a9c <__assert_func>:
   12a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   12a9e:	4614      	mov	r4, r2
   12aa0:	461a      	mov	r2, r3
   12aa2:	4b09      	ldr	r3, [pc, #36]	; (12ac8 <__assert_func+0x2c>)
   12aa4:	4605      	mov	r5, r0
   12aa6:	681b      	ldr	r3, [r3, #0]
   12aa8:	68d8      	ldr	r0, [r3, #12]
   12aaa:	b14c      	cbz	r4, 12ac0 <__assert_func+0x24>
   12aac:	4b07      	ldr	r3, [pc, #28]	; (12acc <__assert_func+0x30>)
   12aae:	9100      	str	r1, [sp, #0]
   12ab0:	4907      	ldr	r1, [pc, #28]	; (12ad0 <__assert_func+0x34>)
   12ab2:	e9cd 3401 	strd	r3, r4, [sp, #4]
   12ab6:	462b      	mov	r3, r5
   12ab8:	f000 f80e 	bl	12ad8 <fiprintf>
   12abc:	f005 ffea 	bl	18a94 <abort>
   12ac0:	4b04      	ldr	r3, [pc, #16]	; (12ad4 <__assert_func+0x38>)
   12ac2:	461c      	mov	r4, r3
   12ac4:	e7f3      	b.n	12aae <__assert_func+0x12>
   12ac6:	bf00      	nop
   12ac8:	200000cc 	.word	0x200000cc
   12acc:	000351b8 	.word	0x000351b8
   12ad0:	000351c5 	.word	0x000351c5
   12ad4:	000351f3 	.word	0x000351f3

00012ad8 <fiprintf>:
   12ad8:	b40e      	push	{r1, r2, r3}
   12ada:	b503      	push	{r0, r1, lr}
   12adc:	ab03      	add	r3, sp, #12
   12ade:	4601      	mov	r1, r0
   12ae0:	4805      	ldr	r0, [pc, #20]	; (12af8 <fiprintf+0x20>)
   12ae2:	f853 2b04 	ldr.w	r2, [r3], #4
   12ae6:	6800      	ldr	r0, [r0, #0]
   12ae8:	9301      	str	r3, [sp, #4]
   12aea:	f000 f8bf 	bl	12c6c <_vfiprintf_r>
   12aee:	b002      	add	sp, #8
   12af0:	f85d eb04 	ldr.w	lr, [sp], #4
   12af4:	b003      	add	sp, #12
   12af6:	4770      	bx	lr
   12af8:	200000cc 	.word	0x200000cc

00012afc <malloc>:
   12afc:	4b02      	ldr	r3, [pc, #8]	; (12b08 <malloc+0xc>)
   12afe:	4601      	mov	r1, r0
   12b00:	6818      	ldr	r0, [r3, #0]
   12b02:	f000 b859 	b.w	12bb8 <_malloc_r>
   12b06:	bf00      	nop
   12b08:	200000cc 	.word	0x200000cc

00012b0c <free>:
   12b0c:	4b02      	ldr	r3, [pc, #8]	; (12b18 <free+0xc>)
   12b0e:	4601      	mov	r1, r0
   12b10:	6818      	ldr	r0, [r3, #0]
   12b12:	f000 b803 	b.w	12b1c <_free_r>
   12b16:	bf00      	nop
   12b18:	200000cc 	.word	0x200000cc

00012b1c <_free_r>:
   12b1c:	b538      	push	{r3, r4, r5, lr}
   12b1e:	4605      	mov	r5, r0
   12b20:	2900      	cmp	r1, #0
   12b22:	d045      	beq.n	12bb0 <_free_r+0x94>
   12b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12b28:	1f0c      	subs	r4, r1, #4
   12b2a:	2b00      	cmp	r3, #0
   12b2c:	bfb8      	it	lt
   12b2e:	18e4      	addlt	r4, r4, r3
   12b30:	f001 f88c 	bl	13c4c <__malloc_lock>
   12b34:	4a1f      	ldr	r2, [pc, #124]	; (12bb4 <_free_r+0x98>)
   12b36:	6813      	ldr	r3, [r2, #0]
   12b38:	4610      	mov	r0, r2
   12b3a:	b933      	cbnz	r3, 12b4a <_free_r+0x2e>
   12b3c:	6063      	str	r3, [r4, #4]
   12b3e:	6014      	str	r4, [r2, #0]
   12b40:	4628      	mov	r0, r5
   12b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b46:	f001 b887 	b.w	13c58 <__malloc_unlock>
   12b4a:	42a3      	cmp	r3, r4
   12b4c:	d90b      	bls.n	12b66 <_free_r+0x4a>
   12b4e:	6821      	ldr	r1, [r4, #0]
   12b50:	1862      	adds	r2, r4, r1
   12b52:	4293      	cmp	r3, r2
   12b54:	bf02      	ittt	eq
   12b56:	681a      	ldreq	r2, [r3, #0]
   12b58:	685b      	ldreq	r3, [r3, #4]
   12b5a:	1852      	addeq	r2, r2, r1
   12b5c:	6063      	str	r3, [r4, #4]
   12b5e:	bf08      	it	eq
   12b60:	6022      	streq	r2, [r4, #0]
   12b62:	6004      	str	r4, [r0, #0]
   12b64:	e7ec      	b.n	12b40 <_free_r+0x24>
   12b66:	461a      	mov	r2, r3
   12b68:	685b      	ldr	r3, [r3, #4]
   12b6a:	b10b      	cbz	r3, 12b70 <_free_r+0x54>
   12b6c:	42a3      	cmp	r3, r4
   12b6e:	d9fa      	bls.n	12b66 <_free_r+0x4a>
   12b70:	6811      	ldr	r1, [r2, #0]
   12b72:	1850      	adds	r0, r2, r1
   12b74:	42a0      	cmp	r0, r4
   12b76:	d10b      	bne.n	12b90 <_free_r+0x74>
   12b78:	6820      	ldr	r0, [r4, #0]
   12b7a:	4401      	add	r1, r0
   12b7c:	1850      	adds	r0, r2, r1
   12b7e:	6011      	str	r1, [r2, #0]
   12b80:	4283      	cmp	r3, r0
   12b82:	d1dd      	bne.n	12b40 <_free_r+0x24>
   12b84:	6818      	ldr	r0, [r3, #0]
   12b86:	685b      	ldr	r3, [r3, #4]
   12b88:	4401      	add	r1, r0
   12b8a:	6053      	str	r3, [r2, #4]
   12b8c:	6011      	str	r1, [r2, #0]
   12b8e:	e7d7      	b.n	12b40 <_free_r+0x24>
   12b90:	d902      	bls.n	12b98 <_free_r+0x7c>
   12b92:	230c      	movs	r3, #12
   12b94:	602b      	str	r3, [r5, #0]
   12b96:	e7d3      	b.n	12b40 <_free_r+0x24>
   12b98:	6820      	ldr	r0, [r4, #0]
   12b9a:	1821      	adds	r1, r4, r0
   12b9c:	428b      	cmp	r3, r1
   12b9e:	bf02      	ittt	eq
   12ba0:	6819      	ldreq	r1, [r3, #0]
   12ba2:	685b      	ldreq	r3, [r3, #4]
   12ba4:	1809      	addeq	r1, r1, r0
   12ba6:	6063      	str	r3, [r4, #4]
   12ba8:	bf08      	it	eq
   12baa:	6021      	streq	r1, [r4, #0]
   12bac:	6054      	str	r4, [r2, #4]
   12bae:	e7c7      	b.n	12b40 <_free_r+0x24>
   12bb0:	bd38      	pop	{r3, r4, r5, pc}
   12bb2:	bf00      	nop
   12bb4:	20015aa0 	.word	0x20015aa0

00012bb8 <_malloc_r>:
   12bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bba:	1ccd      	adds	r5, r1, #3
   12bbc:	4606      	mov	r6, r0
   12bbe:	f025 0503 	bic.w	r5, r5, #3
   12bc2:	3508      	adds	r5, #8
   12bc4:	2d0c      	cmp	r5, #12
   12bc6:	bf38      	it	cc
   12bc8:	250c      	movcc	r5, #12
   12bca:	2d00      	cmp	r5, #0
   12bcc:	db01      	blt.n	12bd2 <_malloc_r+0x1a>
   12bce:	42a9      	cmp	r1, r5
   12bd0:	d903      	bls.n	12bda <_malloc_r+0x22>
   12bd2:	230c      	movs	r3, #12
   12bd4:	6033      	str	r3, [r6, #0]
   12bd6:	2000      	movs	r0, #0
   12bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12bda:	f001 f837 	bl	13c4c <__malloc_lock>
   12bde:	4921      	ldr	r1, [pc, #132]	; (12c64 <_malloc_r+0xac>)
   12be0:	680a      	ldr	r2, [r1, #0]
   12be2:	4614      	mov	r4, r2
   12be4:	b99c      	cbnz	r4, 12c0e <_malloc_r+0x56>
   12be6:	4f20      	ldr	r7, [pc, #128]	; (12c68 <_malloc_r+0xb0>)
   12be8:	683b      	ldr	r3, [r7, #0]
   12bea:	b923      	cbnz	r3, 12bf6 <_malloc_r+0x3e>
   12bec:	4621      	mov	r1, r4
   12bee:	4630      	mov	r0, r6
   12bf0:	f000 fcbc 	bl	1356c <_sbrk_r>
   12bf4:	6038      	str	r0, [r7, #0]
   12bf6:	4629      	mov	r1, r5
   12bf8:	4630      	mov	r0, r6
   12bfa:	f000 fcb7 	bl	1356c <_sbrk_r>
   12bfe:	1c43      	adds	r3, r0, #1
   12c00:	d123      	bne.n	12c4a <_malloc_r+0x92>
   12c02:	230c      	movs	r3, #12
   12c04:	4630      	mov	r0, r6
   12c06:	6033      	str	r3, [r6, #0]
   12c08:	f001 f826 	bl	13c58 <__malloc_unlock>
   12c0c:	e7e3      	b.n	12bd6 <_malloc_r+0x1e>
   12c0e:	6823      	ldr	r3, [r4, #0]
   12c10:	1b5b      	subs	r3, r3, r5
   12c12:	d417      	bmi.n	12c44 <_malloc_r+0x8c>
   12c14:	2b0b      	cmp	r3, #11
   12c16:	d903      	bls.n	12c20 <_malloc_r+0x68>
   12c18:	6023      	str	r3, [r4, #0]
   12c1a:	441c      	add	r4, r3
   12c1c:	6025      	str	r5, [r4, #0]
   12c1e:	e004      	b.n	12c2a <_malloc_r+0x72>
   12c20:	6863      	ldr	r3, [r4, #4]
   12c22:	42a2      	cmp	r2, r4
   12c24:	bf0c      	ite	eq
   12c26:	600b      	streq	r3, [r1, #0]
   12c28:	6053      	strne	r3, [r2, #4]
   12c2a:	4630      	mov	r0, r6
   12c2c:	f001 f814 	bl	13c58 <__malloc_unlock>
   12c30:	f104 000b 	add.w	r0, r4, #11
   12c34:	1d23      	adds	r3, r4, #4
   12c36:	f020 0007 	bic.w	r0, r0, #7
   12c3a:	1ac2      	subs	r2, r0, r3
   12c3c:	d0cc      	beq.n	12bd8 <_malloc_r+0x20>
   12c3e:	1a1b      	subs	r3, r3, r0
   12c40:	50a3      	str	r3, [r4, r2]
   12c42:	e7c9      	b.n	12bd8 <_malloc_r+0x20>
   12c44:	4622      	mov	r2, r4
   12c46:	6864      	ldr	r4, [r4, #4]
   12c48:	e7cc      	b.n	12be4 <_malloc_r+0x2c>
   12c4a:	1cc4      	adds	r4, r0, #3
   12c4c:	f024 0403 	bic.w	r4, r4, #3
   12c50:	42a0      	cmp	r0, r4
   12c52:	d0e3      	beq.n	12c1c <_malloc_r+0x64>
   12c54:	1a21      	subs	r1, r4, r0
   12c56:	4630      	mov	r0, r6
   12c58:	f000 fc88 	bl	1356c <_sbrk_r>
   12c5c:	3001      	adds	r0, #1
   12c5e:	d1dd      	bne.n	12c1c <_malloc_r+0x64>
   12c60:	e7cf      	b.n	12c02 <_malloc_r+0x4a>
   12c62:	bf00      	nop
   12c64:	20015aa0 	.word	0x20015aa0
   12c68:	20015aa4 	.word	0x20015aa4

00012c6c <_vfiprintf_r>:
   12c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c70:	460d      	mov	r5, r1
   12c72:	b09d      	sub	sp, #116	; 0x74
   12c74:	4614      	mov	r4, r2
   12c76:	4698      	mov	r8, r3
   12c78:	4606      	mov	r6, r0
   12c7a:	b118      	cbz	r0, 12c84 <_vfiprintf_r+0x18>
   12c7c:	6983      	ldr	r3, [r0, #24]
   12c7e:	b90b      	cbnz	r3, 12c84 <_vfiprintf_r+0x18>
   12c80:	f000 ff22 	bl	13ac8 <__sinit>
   12c84:	4b89      	ldr	r3, [pc, #548]	; (12eac <_vfiprintf_r+0x240>)
   12c86:	429d      	cmp	r5, r3
   12c88:	d11b      	bne.n	12cc2 <_vfiprintf_r+0x56>
   12c8a:	6875      	ldr	r5, [r6, #4]
   12c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12c8e:	07d9      	lsls	r1, r3, #31
   12c90:	d405      	bmi.n	12c9e <_vfiprintf_r+0x32>
   12c92:	89ab      	ldrh	r3, [r5, #12]
   12c94:	059a      	lsls	r2, r3, #22
   12c96:	d402      	bmi.n	12c9e <_vfiprintf_r+0x32>
   12c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12c9a:	f001 fea9 	bl	149f0 <__retarget_lock_acquire_recursive>
   12c9e:	89ab      	ldrh	r3, [r5, #12]
   12ca0:	071b      	lsls	r3, r3, #28
   12ca2:	d501      	bpl.n	12ca8 <_vfiprintf_r+0x3c>
   12ca4:	692b      	ldr	r3, [r5, #16]
   12ca6:	b9eb      	cbnz	r3, 12ce4 <_vfiprintf_r+0x78>
   12ca8:	4629      	mov	r1, r5
   12caa:	4630      	mov	r0, r6
   12cac:	f000 fd9c 	bl	137e8 <__swsetup_r>
   12cb0:	b1c0      	cbz	r0, 12ce4 <_vfiprintf_r+0x78>
   12cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12cb4:	07dc      	lsls	r4, r3, #31
   12cb6:	d50e      	bpl.n	12cd6 <_vfiprintf_r+0x6a>
   12cb8:	f04f 30ff 	mov.w	r0, #4294967295
   12cbc:	b01d      	add	sp, #116	; 0x74
   12cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc2:	4b7b      	ldr	r3, [pc, #492]	; (12eb0 <_vfiprintf_r+0x244>)
   12cc4:	429d      	cmp	r5, r3
   12cc6:	d101      	bne.n	12ccc <_vfiprintf_r+0x60>
   12cc8:	68b5      	ldr	r5, [r6, #8]
   12cca:	e7df      	b.n	12c8c <_vfiprintf_r+0x20>
   12ccc:	4b79      	ldr	r3, [pc, #484]	; (12eb4 <_vfiprintf_r+0x248>)
   12cce:	429d      	cmp	r5, r3
   12cd0:	bf08      	it	eq
   12cd2:	68f5      	ldreq	r5, [r6, #12]
   12cd4:	e7da      	b.n	12c8c <_vfiprintf_r+0x20>
   12cd6:	89ab      	ldrh	r3, [r5, #12]
   12cd8:	0598      	lsls	r0, r3, #22
   12cda:	d4ed      	bmi.n	12cb8 <_vfiprintf_r+0x4c>
   12cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12cde:	f001 fe8f 	bl	14a00 <__retarget_lock_release_recursive>
   12ce2:	e7e9      	b.n	12cb8 <_vfiprintf_r+0x4c>
   12ce4:	2300      	movs	r3, #0
   12ce6:	f8cd 800c 	str.w	r8, [sp, #12]
   12cea:	f04f 0901 	mov.w	r9, #1
   12cee:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 12eb8 <_vfiprintf_r+0x24c>
   12cf2:	9309      	str	r3, [sp, #36]	; 0x24
   12cf4:	2320      	movs	r3, #32
   12cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   12cfa:	2330      	movs	r3, #48	; 0x30
   12cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   12d00:	4623      	mov	r3, r4
   12d02:	469a      	mov	sl, r3
   12d04:	f813 2b01 	ldrb.w	r2, [r3], #1
   12d08:	b10a      	cbz	r2, 12d0e <_vfiprintf_r+0xa2>
   12d0a:	2a25      	cmp	r2, #37	; 0x25
   12d0c:	d1f9      	bne.n	12d02 <_vfiprintf_r+0x96>
   12d0e:	ebba 0b04 	subs.w	fp, sl, r4
   12d12:	d00b      	beq.n	12d2c <_vfiprintf_r+0xc0>
   12d14:	465b      	mov	r3, fp
   12d16:	4622      	mov	r2, r4
   12d18:	4629      	mov	r1, r5
   12d1a:	4630      	mov	r0, r6
   12d1c:	f005 ff0b 	bl	18b36 <__sfputs_r>
   12d20:	3001      	adds	r0, #1
   12d22:	f000 80aa 	beq.w	12e7a <_vfiprintf_r+0x20e>
   12d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d28:	445a      	add	r2, fp
   12d2a:	9209      	str	r2, [sp, #36]	; 0x24
   12d2c:	f89a 3000 	ldrb.w	r3, [sl]
   12d30:	2b00      	cmp	r3, #0
   12d32:	f000 80a2 	beq.w	12e7a <_vfiprintf_r+0x20e>
   12d36:	2300      	movs	r3, #0
   12d38:	f04f 32ff 	mov.w	r2, #4294967295
   12d3c:	f10a 0a01 	add.w	sl, sl, #1
   12d40:	9304      	str	r3, [sp, #16]
   12d42:	9307      	str	r3, [sp, #28]
   12d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   12d48:	931a      	str	r3, [sp, #104]	; 0x68
   12d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12d4e:	4654      	mov	r4, sl
   12d50:	2205      	movs	r2, #5
   12d52:	4859      	ldr	r0, [pc, #356]	; (12eb8 <_vfiprintf_r+0x24c>)
   12d54:	f814 1b01 	ldrb.w	r1, [r4], #1
   12d58:	f005 fea7 	bl	18aaa <memchr>
   12d5c:	9a04      	ldr	r2, [sp, #16]
   12d5e:	b9d8      	cbnz	r0, 12d98 <_vfiprintf_r+0x12c>
   12d60:	06d1      	lsls	r1, r2, #27
   12d62:	bf44      	itt	mi
   12d64:	2320      	movmi	r3, #32
   12d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12d6a:	0713      	lsls	r3, r2, #28
   12d6c:	bf44      	itt	mi
   12d6e:	232b      	movmi	r3, #43	; 0x2b
   12d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   12d74:	f89a 3000 	ldrb.w	r3, [sl]
   12d78:	2b2a      	cmp	r3, #42	; 0x2a
   12d7a:	d015      	beq.n	12da8 <_vfiprintf_r+0x13c>
   12d7c:	9a07      	ldr	r2, [sp, #28]
   12d7e:	4654      	mov	r4, sl
   12d80:	2000      	movs	r0, #0
   12d82:	f04f 0c0a 	mov.w	ip, #10
   12d86:	4621      	mov	r1, r4
   12d88:	f811 3b01 	ldrb.w	r3, [r1], #1
   12d8c:	3b30      	subs	r3, #48	; 0x30
   12d8e:	2b09      	cmp	r3, #9
   12d90:	d94e      	bls.n	12e30 <_vfiprintf_r+0x1c4>
   12d92:	b1b0      	cbz	r0, 12dc2 <_vfiprintf_r+0x156>
   12d94:	9207      	str	r2, [sp, #28]
   12d96:	e014      	b.n	12dc2 <_vfiprintf_r+0x156>
   12d98:	eba0 0308 	sub.w	r3, r0, r8
   12d9c:	46a2      	mov	sl, r4
   12d9e:	fa09 f303 	lsl.w	r3, r9, r3
   12da2:	4313      	orrs	r3, r2
   12da4:	9304      	str	r3, [sp, #16]
   12da6:	e7d2      	b.n	12d4e <_vfiprintf_r+0xe2>
   12da8:	9b03      	ldr	r3, [sp, #12]
   12daa:	1d19      	adds	r1, r3, #4
   12dac:	681b      	ldr	r3, [r3, #0]
   12dae:	2b00      	cmp	r3, #0
   12db0:	9103      	str	r1, [sp, #12]
   12db2:	bfbb      	ittet	lt
   12db4:	425b      	neglt	r3, r3
   12db6:	f042 0202 	orrlt.w	r2, r2, #2
   12dba:	9307      	strge	r3, [sp, #28]
   12dbc:	9307      	strlt	r3, [sp, #28]
   12dbe:	bfb8      	it	lt
   12dc0:	9204      	strlt	r2, [sp, #16]
   12dc2:	7823      	ldrb	r3, [r4, #0]
   12dc4:	2b2e      	cmp	r3, #46	; 0x2e
   12dc6:	d10c      	bne.n	12de2 <_vfiprintf_r+0x176>
   12dc8:	7863      	ldrb	r3, [r4, #1]
   12dca:	2b2a      	cmp	r3, #42	; 0x2a
   12dcc:	d135      	bne.n	12e3a <_vfiprintf_r+0x1ce>
   12dce:	9b03      	ldr	r3, [sp, #12]
   12dd0:	3402      	adds	r4, #2
   12dd2:	1d1a      	adds	r2, r3, #4
   12dd4:	681b      	ldr	r3, [r3, #0]
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	9203      	str	r2, [sp, #12]
   12dda:	bfb8      	it	lt
   12ddc:	f04f 33ff 	movlt.w	r3, #4294967295
   12de0:	9305      	str	r3, [sp, #20]
   12de2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12ec8 <_vfiprintf_r+0x25c>
   12de6:	2203      	movs	r2, #3
   12de8:	7821      	ldrb	r1, [r4, #0]
   12dea:	4650      	mov	r0, sl
   12dec:	f005 fe5d 	bl	18aaa <memchr>
   12df0:	b140      	cbz	r0, 12e04 <_vfiprintf_r+0x198>
   12df2:	2340      	movs	r3, #64	; 0x40
   12df4:	eba0 000a 	sub.w	r0, r0, sl
   12df8:	3401      	adds	r4, #1
   12dfa:	fa03 f000 	lsl.w	r0, r3, r0
   12dfe:	9b04      	ldr	r3, [sp, #16]
   12e00:	4303      	orrs	r3, r0
   12e02:	9304      	str	r3, [sp, #16]
   12e04:	f814 1b01 	ldrb.w	r1, [r4], #1
   12e08:	2206      	movs	r2, #6
   12e0a:	482c      	ldr	r0, [pc, #176]	; (12ebc <_vfiprintf_r+0x250>)
   12e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   12e10:	f005 fe4b 	bl	18aaa <memchr>
   12e14:	2800      	cmp	r0, #0
   12e16:	d03f      	beq.n	12e98 <_vfiprintf_r+0x22c>
   12e18:	4b29      	ldr	r3, [pc, #164]	; (12ec0 <_vfiprintf_r+0x254>)
   12e1a:	bb1b      	cbnz	r3, 12e64 <_vfiprintf_r+0x1f8>
   12e1c:	9b03      	ldr	r3, [sp, #12]
   12e1e:	3307      	adds	r3, #7
   12e20:	f023 0307 	bic.w	r3, r3, #7
   12e24:	3308      	adds	r3, #8
   12e26:	9303      	str	r3, [sp, #12]
   12e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e2a:	443b      	add	r3, r7
   12e2c:	9309      	str	r3, [sp, #36]	; 0x24
   12e2e:	e767      	b.n	12d00 <_vfiprintf_r+0x94>
   12e30:	fb0c 3202 	mla	r2, ip, r2, r3
   12e34:	460c      	mov	r4, r1
   12e36:	2001      	movs	r0, #1
   12e38:	e7a5      	b.n	12d86 <_vfiprintf_r+0x11a>
   12e3a:	2300      	movs	r3, #0
   12e3c:	3401      	adds	r4, #1
   12e3e:	f04f 0c0a 	mov.w	ip, #10
   12e42:	4619      	mov	r1, r3
   12e44:	9305      	str	r3, [sp, #20]
   12e46:	4620      	mov	r0, r4
   12e48:	f810 2b01 	ldrb.w	r2, [r0], #1
   12e4c:	3a30      	subs	r2, #48	; 0x30
   12e4e:	2a09      	cmp	r2, #9
   12e50:	d903      	bls.n	12e5a <_vfiprintf_r+0x1ee>
   12e52:	2b00      	cmp	r3, #0
   12e54:	d0c5      	beq.n	12de2 <_vfiprintf_r+0x176>
   12e56:	9105      	str	r1, [sp, #20]
   12e58:	e7c3      	b.n	12de2 <_vfiprintf_r+0x176>
   12e5a:	fb0c 2101 	mla	r1, ip, r1, r2
   12e5e:	4604      	mov	r4, r0
   12e60:	2301      	movs	r3, #1
   12e62:	e7f0      	b.n	12e46 <_vfiprintf_r+0x1da>
   12e64:	ab03      	add	r3, sp, #12
   12e66:	462a      	mov	r2, r5
   12e68:	a904      	add	r1, sp, #16
   12e6a:	4630      	mov	r0, r6
   12e6c:	9300      	str	r3, [sp, #0]
   12e6e:	4b15      	ldr	r3, [pc, #84]	; (12ec4 <_vfiprintf_r+0x258>)
   12e70:	f000 f82c 	bl	12ecc <_printf_float>
   12e74:	4607      	mov	r7, r0
   12e76:	1c78      	adds	r0, r7, #1
   12e78:	d1d6      	bne.n	12e28 <_vfiprintf_r+0x1bc>
   12e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   12e7c:	07d9      	lsls	r1, r3, #31
   12e7e:	d405      	bmi.n	12e8c <_vfiprintf_r+0x220>
   12e80:	89ab      	ldrh	r3, [r5, #12]
   12e82:	059a      	lsls	r2, r3, #22
   12e84:	d402      	bmi.n	12e8c <_vfiprintf_r+0x220>
   12e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
   12e88:	f001 fdba 	bl	14a00 <__retarget_lock_release_recursive>
   12e8c:	89ab      	ldrh	r3, [r5, #12]
   12e8e:	065b      	lsls	r3, r3, #25
   12e90:	f53f af12 	bmi.w	12cb8 <_vfiprintf_r+0x4c>
   12e94:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e96:	e711      	b.n	12cbc <_vfiprintf_r+0x50>
   12e98:	ab03      	add	r3, sp, #12
   12e9a:	462a      	mov	r2, r5
   12e9c:	a904      	add	r1, sp, #16
   12e9e:	4630      	mov	r0, r6
   12ea0:	9300      	str	r3, [sp, #0]
   12ea2:	4b08      	ldr	r3, [pc, #32]	; (12ec4 <_vfiprintf_r+0x258>)
   12ea4:	f000 fa3c 	bl	13320 <_printf_i>
   12ea8:	e7e4      	b.n	12e74 <_vfiprintf_r+0x208>
   12eaa:	bf00      	nop
   12eac:	0003516c 	.word	0x0003516c
   12eb0:	0003518c 	.word	0x0003518c
   12eb4:	0003514c 	.word	0x0003514c
   12eb8:	000352f5 	.word	0x000352f5
   12ebc:	000352ff 	.word	0x000352ff
   12ec0:	00012ecd 	.word	0x00012ecd
   12ec4:	00018b37 	.word	0x00018b37
   12ec8:	000352fb 	.word	0x000352fb

00012ecc <_printf_float>:
   12ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed0:	b091      	sub	sp, #68	; 0x44
   12ed2:	460c      	mov	r4, r1
   12ed4:	4616      	mov	r6, r2
   12ed6:	461f      	mov	r7, r3
   12ed8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   12edc:	4605      	mov	r5, r0
   12ede:	f000 fe71 	bl	13bc4 <_localeconv_r>
   12ee2:	6803      	ldr	r3, [r0, #0]
   12ee4:	4618      	mov	r0, r3
   12ee6:	9309      	str	r3, [sp, #36]	; 0x24
   12ee8:	f7ee faf4 	bl	14d4 <strlen>
   12eec:	2300      	movs	r3, #0
   12eee:	900a      	str	r0, [sp, #40]	; 0x28
   12ef0:	930e      	str	r3, [sp, #56]	; 0x38
   12ef2:	f8d8 3000 	ldr.w	r3, [r8]
   12ef6:	f894 9018 	ldrb.w	r9, [r4, #24]
   12efa:	3307      	adds	r3, #7
   12efc:	f8d4 b000 	ldr.w	fp, [r4]
   12f00:	f023 0307 	bic.w	r3, r3, #7
   12f04:	f103 0208 	add.w	r2, r3, #8
   12f08:	f8c8 2000 	str.w	r2, [r8]
   12f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   12f14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   12f18:	f04f 32ff 	mov.w	r2, #4294967295
   12f1c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   12f20:	4640      	mov	r0, r8
   12f22:	930b      	str	r3, [sp, #44]	; 0x2c
   12f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f26:	4b9b      	ldr	r3, [pc, #620]	; (13194 <_printf_float+0x2c8>)
   12f28:	f7ee fab4 	bl	1494 <__aeabi_dcmpun>
   12f2c:	bb70      	cbnz	r0, 12f8c <_printf_float+0xc0>
   12f2e:	f04f 32ff 	mov.w	r2, #4294967295
   12f32:	4b98      	ldr	r3, [pc, #608]	; (13194 <_printf_float+0x2c8>)
   12f34:	4640      	mov	r0, r8
   12f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12f38:	f7ed fd46 	bl	9c8 <__aeabi_dcmple>
   12f3c:	bb30      	cbnz	r0, 12f8c <_printf_float+0xc0>
   12f3e:	2200      	movs	r2, #0
   12f40:	2300      	movs	r3, #0
   12f42:	4640      	mov	r0, r8
   12f44:	4651      	mov	r1, sl
   12f46:	f7ed fd35 	bl	9b4 <__aeabi_dcmplt>
   12f4a:	b110      	cbz	r0, 12f52 <_printf_float+0x86>
   12f4c:	232d      	movs	r3, #45	; 0x2d
   12f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   12f52:	4b91      	ldr	r3, [pc, #580]	; (13198 <_printf_float+0x2cc>)
   12f54:	4891      	ldr	r0, [pc, #580]	; (1319c <_printf_float+0x2d0>)
   12f56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   12f5a:	bf94      	ite	ls
   12f5c:	4698      	movls	r8, r3
   12f5e:	4680      	movhi	r8, r0
   12f60:	2303      	movs	r3, #3
   12f62:	f04f 0a00 	mov.w	sl, #0
   12f66:	6123      	str	r3, [r4, #16]
   12f68:	f02b 0304 	bic.w	r3, fp, #4
   12f6c:	6023      	str	r3, [r4, #0]
   12f6e:	4633      	mov	r3, r6
   12f70:	aa0f      	add	r2, sp, #60	; 0x3c
   12f72:	4621      	mov	r1, r4
   12f74:	4628      	mov	r0, r5
   12f76:	9700      	str	r7, [sp, #0]
   12f78:	f005 fe8d 	bl	18c96 <_printf_common>
   12f7c:	3001      	adds	r0, #1
   12f7e:	f040 808f 	bne.w	130a0 <_printf_float+0x1d4>
   12f82:	f04f 30ff 	mov.w	r0, #4294967295
   12f86:	b011      	add	sp, #68	; 0x44
   12f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8c:	4642      	mov	r2, r8
   12f8e:	4653      	mov	r3, sl
   12f90:	4640      	mov	r0, r8
   12f92:	4651      	mov	r1, sl
   12f94:	f7ee fa7e 	bl	1494 <__aeabi_dcmpun>
   12f98:	b140      	cbz	r0, 12fac <_printf_float+0xe0>
   12f9a:	f1ba 0f00 	cmp.w	sl, #0
   12f9e:	4880      	ldr	r0, [pc, #512]	; (131a0 <_printf_float+0x2d4>)
   12fa0:	bfbc      	itt	lt
   12fa2:	232d      	movlt	r3, #45	; 0x2d
   12fa4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   12fa8:	4b7e      	ldr	r3, [pc, #504]	; (131a4 <_printf_float+0x2d8>)
   12faa:	e7d4      	b.n	12f56 <_printf_float+0x8a>
   12fac:	6863      	ldr	r3, [r4, #4]
   12fae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   12fb2:	1c5a      	adds	r2, r3, #1
   12fb4:	d142      	bne.n	1303c <_printf_float+0x170>
   12fb6:	2306      	movs	r3, #6
   12fb8:	6063      	str	r3, [r4, #4]
   12fba:	2200      	movs	r2, #0
   12fbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   12fc0:	4628      	mov	r0, r5
   12fc2:	910b      	str	r1, [sp, #44]	; 0x2c
   12fc4:	9206      	str	r2, [sp, #24]
   12fc6:	aa0e      	add	r2, sp, #56	; 0x38
   12fc8:	6023      	str	r3, [r4, #0]
   12fca:	e9cd 9204 	strd	r9, r2, [sp, #16]
   12fce:	aa0d      	add	r2, sp, #52	; 0x34
   12fd0:	9203      	str	r2, [sp, #12]
   12fd2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   12fd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12fda:	6863      	ldr	r3, [r4, #4]
   12fdc:	4642      	mov	r2, r8
   12fde:	9300      	str	r3, [sp, #0]
   12fe0:	4653      	mov	r3, sl
   12fe2:	f005 fdba 	bl	18b5a <__cvt>
   12fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12fe8:	4680      	mov	r8, r0
   12fea:	2947      	cmp	r1, #71	; 0x47
   12fec:	990d      	ldr	r1, [sp, #52]	; 0x34
   12fee:	d108      	bne.n	13002 <_printf_float+0x136>
   12ff0:	1cc8      	adds	r0, r1, #3
   12ff2:	db02      	blt.n	12ffa <_printf_float+0x12e>
   12ff4:	6863      	ldr	r3, [r4, #4]
   12ff6:	4299      	cmp	r1, r3
   12ff8:	dd40      	ble.n	1307c <_printf_float+0x1b0>
   12ffa:	f1a9 0902 	sub.w	r9, r9, #2
   12ffe:	fa5f f989 	uxtb.w	r9, r9
   13002:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   13006:	d81f      	bhi.n	13048 <_printf_float+0x17c>
   13008:	3901      	subs	r1, #1
   1300a:	464a      	mov	r2, r9
   1300c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13010:	910d      	str	r1, [sp, #52]	; 0x34
   13012:	f005 fe02 	bl	18c1a <__exponent>
   13016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13018:	4682      	mov	sl, r0
   1301a:	1813      	adds	r3, r2, r0
   1301c:	2a01      	cmp	r2, #1
   1301e:	6123      	str	r3, [r4, #16]
   13020:	dc02      	bgt.n	13028 <_printf_float+0x15c>
   13022:	6822      	ldr	r2, [r4, #0]
   13024:	07d2      	lsls	r2, r2, #31
   13026:	d501      	bpl.n	1302c <_printf_float+0x160>
   13028:	3301      	adds	r3, #1
   1302a:	6123      	str	r3, [r4, #16]
   1302c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   13030:	2b00      	cmp	r3, #0
   13032:	d09c      	beq.n	12f6e <_printf_float+0xa2>
   13034:	232d      	movs	r3, #45	; 0x2d
   13036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1303a:	e798      	b.n	12f6e <_printf_float+0xa2>
   1303c:	2947      	cmp	r1, #71	; 0x47
   1303e:	d1bc      	bne.n	12fba <_printf_float+0xee>
   13040:	2b00      	cmp	r3, #0
   13042:	d1ba      	bne.n	12fba <_printf_float+0xee>
   13044:	2301      	movs	r3, #1
   13046:	e7b7      	b.n	12fb8 <_printf_float+0xec>
   13048:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   1304c:	d118      	bne.n	13080 <_printf_float+0x1b4>
   1304e:	2900      	cmp	r1, #0
   13050:	6863      	ldr	r3, [r4, #4]
   13052:	dd0b      	ble.n	1306c <_printf_float+0x1a0>
   13054:	6121      	str	r1, [r4, #16]
   13056:	b913      	cbnz	r3, 1305e <_printf_float+0x192>
   13058:	6822      	ldr	r2, [r4, #0]
   1305a:	07d0      	lsls	r0, r2, #31
   1305c:	d502      	bpl.n	13064 <_printf_float+0x198>
   1305e:	3301      	adds	r3, #1
   13060:	440b      	add	r3, r1
   13062:	6123      	str	r3, [r4, #16]
   13064:	f04f 0a00 	mov.w	sl, #0
   13068:	65a1      	str	r1, [r4, #88]	; 0x58
   1306a:	e7df      	b.n	1302c <_printf_float+0x160>
   1306c:	b913      	cbnz	r3, 13074 <_printf_float+0x1a8>
   1306e:	6822      	ldr	r2, [r4, #0]
   13070:	07d2      	lsls	r2, r2, #31
   13072:	d501      	bpl.n	13078 <_printf_float+0x1ac>
   13074:	3302      	adds	r3, #2
   13076:	e7f4      	b.n	13062 <_printf_float+0x196>
   13078:	2301      	movs	r3, #1
   1307a:	e7f2      	b.n	13062 <_printf_float+0x196>
   1307c:	f04f 0967 	mov.w	r9, #103	; 0x67
   13080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13082:	4299      	cmp	r1, r3
   13084:	db05      	blt.n	13092 <_printf_float+0x1c6>
   13086:	6823      	ldr	r3, [r4, #0]
   13088:	6121      	str	r1, [r4, #16]
   1308a:	07d8      	lsls	r0, r3, #31
   1308c:	d5ea      	bpl.n	13064 <_printf_float+0x198>
   1308e:	1c4b      	adds	r3, r1, #1
   13090:	e7e7      	b.n	13062 <_printf_float+0x196>
   13092:	2900      	cmp	r1, #0
   13094:	bfd4      	ite	le
   13096:	f1c1 0202 	rsble	r2, r1, #2
   1309a:	2201      	movgt	r2, #1
   1309c:	4413      	add	r3, r2
   1309e:	e7e0      	b.n	13062 <_printf_float+0x196>
   130a0:	6823      	ldr	r3, [r4, #0]
   130a2:	055a      	lsls	r2, r3, #21
   130a4:	d407      	bmi.n	130b6 <_printf_float+0x1ea>
   130a6:	6923      	ldr	r3, [r4, #16]
   130a8:	4642      	mov	r2, r8
   130aa:	4631      	mov	r1, r6
   130ac:	4628      	mov	r0, r5
   130ae:	47b8      	blx	r7
   130b0:	3001      	adds	r0, #1
   130b2:	d12b      	bne.n	1310c <_printf_float+0x240>
   130b4:	e765      	b.n	12f82 <_printf_float+0xb6>
   130b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   130ba:	f240 80dc 	bls.w	13276 <_printf_float+0x3aa>
   130be:	2200      	movs	r2, #0
   130c0:	2300      	movs	r3, #0
   130c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   130c6:	f7ed fc6b 	bl	9a0 <__aeabi_dcmpeq>
   130ca:	2800      	cmp	r0, #0
   130cc:	d033      	beq.n	13136 <_printf_float+0x26a>
   130ce:	2301      	movs	r3, #1
   130d0:	4a35      	ldr	r2, [pc, #212]	; (131a8 <_printf_float+0x2dc>)
   130d2:	4631      	mov	r1, r6
   130d4:	4628      	mov	r0, r5
   130d6:	47b8      	blx	r7
   130d8:	3001      	adds	r0, #1
   130da:	f43f af52 	beq.w	12f82 <_printf_float+0xb6>
   130de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   130e2:	429a      	cmp	r2, r3
   130e4:	db02      	blt.n	130ec <_printf_float+0x220>
   130e6:	6823      	ldr	r3, [r4, #0]
   130e8:	07d8      	lsls	r0, r3, #31
   130ea:	d50f      	bpl.n	1310c <_printf_float+0x240>
   130ec:	4631      	mov	r1, r6
   130ee:	4628      	mov	r0, r5
   130f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   130f4:	47b8      	blx	r7
   130f6:	3001      	adds	r0, #1
   130f8:	f43f af43 	beq.w	12f82 <_printf_float+0xb6>
   130fc:	f04f 0800 	mov.w	r8, #0
   13100:	f104 091a 	add.w	r9, r4, #26
   13104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13106:	3b01      	subs	r3, #1
   13108:	4543      	cmp	r3, r8
   1310a:	dc09      	bgt.n	13120 <_printf_float+0x254>
   1310c:	6823      	ldr	r3, [r4, #0]
   1310e:	079b      	lsls	r3, r3, #30
   13110:	f100 8101 	bmi.w	13316 <_printf_float+0x44a>
   13114:	68e0      	ldr	r0, [r4, #12]
   13116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13118:	4298      	cmp	r0, r3
   1311a:	bfb8      	it	lt
   1311c:	4618      	movlt	r0, r3
   1311e:	e732      	b.n	12f86 <_printf_float+0xba>
   13120:	2301      	movs	r3, #1
   13122:	464a      	mov	r2, r9
   13124:	4631      	mov	r1, r6
   13126:	4628      	mov	r0, r5
   13128:	47b8      	blx	r7
   1312a:	3001      	adds	r0, #1
   1312c:	f43f af29 	beq.w	12f82 <_printf_float+0xb6>
   13130:	f108 0801 	add.w	r8, r8, #1
   13134:	e7e6      	b.n	13104 <_printf_float+0x238>
   13136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13138:	2b00      	cmp	r3, #0
   1313a:	dc37      	bgt.n	131ac <_printf_float+0x2e0>
   1313c:	2301      	movs	r3, #1
   1313e:	4a1a      	ldr	r2, [pc, #104]	; (131a8 <_printf_float+0x2dc>)
   13140:	4631      	mov	r1, r6
   13142:	4628      	mov	r0, r5
   13144:	47b8      	blx	r7
   13146:	3001      	adds	r0, #1
   13148:	f43f af1b 	beq.w	12f82 <_printf_float+0xb6>
   1314c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   13150:	4313      	orrs	r3, r2
   13152:	d102      	bne.n	1315a <_printf_float+0x28e>
   13154:	6823      	ldr	r3, [r4, #0]
   13156:	07d9      	lsls	r1, r3, #31
   13158:	d5d8      	bpl.n	1310c <_printf_float+0x240>
   1315a:	4631      	mov	r1, r6
   1315c:	4628      	mov	r0, r5
   1315e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13162:	47b8      	blx	r7
   13164:	3001      	adds	r0, #1
   13166:	f43f af0c 	beq.w	12f82 <_printf_float+0xb6>
   1316a:	f04f 0900 	mov.w	r9, #0
   1316e:	f104 0a1a 	add.w	sl, r4, #26
   13172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13174:	425b      	negs	r3, r3
   13176:	454b      	cmp	r3, r9
   13178:	dc01      	bgt.n	1317e <_printf_float+0x2b2>
   1317a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1317c:	e794      	b.n	130a8 <_printf_float+0x1dc>
   1317e:	2301      	movs	r3, #1
   13180:	4652      	mov	r2, sl
   13182:	4631      	mov	r1, r6
   13184:	4628      	mov	r0, r5
   13186:	47b8      	blx	r7
   13188:	3001      	adds	r0, #1
   1318a:	f43f aefa 	beq.w	12f82 <_printf_float+0xb6>
   1318e:	f109 0901 	add.w	r9, r9, #1
   13192:	e7ee      	b.n	13172 <_printf_float+0x2a6>
   13194:	7fefffff 	.word	0x7fefffff
   13198:	00035306 	.word	0x00035306
   1319c:	0003530a 	.word	0x0003530a
   131a0:	00035312 	.word	0x00035312
   131a4:	0003530e 	.word	0x0003530e
   131a8:	00035316 	.word	0x00035316
   131ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
   131b0:	429a      	cmp	r2, r3
   131b2:	bfa8      	it	ge
   131b4:	461a      	movge	r2, r3
   131b6:	2a00      	cmp	r2, #0
   131b8:	4691      	mov	r9, r2
   131ba:	dc37      	bgt.n	1322c <_printf_float+0x360>
   131bc:	f04f 0b00 	mov.w	fp, #0
   131c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   131c4:	f104 021a 	add.w	r2, r4, #26
   131c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   131cc:	ebaa 0309 	sub.w	r3, sl, r9
   131d0:	455b      	cmp	r3, fp
   131d2:	dc33      	bgt.n	1323c <_printf_float+0x370>
   131d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   131d8:	429a      	cmp	r2, r3
   131da:	db3b      	blt.n	13254 <_printf_float+0x388>
   131dc:	6823      	ldr	r3, [r4, #0]
   131de:	07da      	lsls	r2, r3, #31
   131e0:	d438      	bmi.n	13254 <_printf_float+0x388>
   131e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131e4:	990d      	ldr	r1, [sp, #52]	; 0x34
   131e6:	eba2 030a 	sub.w	r3, r2, sl
   131ea:	eba2 0901 	sub.w	r9, r2, r1
   131ee:	4599      	cmp	r9, r3
   131f0:	bfa8      	it	ge
   131f2:	4699      	movge	r9, r3
   131f4:	f1b9 0f00 	cmp.w	r9, #0
   131f8:	dc34      	bgt.n	13264 <_printf_float+0x398>
   131fa:	f04f 0800 	mov.w	r8, #0
   131fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   13202:	f104 0a1a 	add.w	sl, r4, #26
   13206:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   1320a:	1a9b      	subs	r3, r3, r2
   1320c:	eba3 0309 	sub.w	r3, r3, r9
   13210:	4543      	cmp	r3, r8
   13212:	f77f af7b 	ble.w	1310c <_printf_float+0x240>
   13216:	2301      	movs	r3, #1
   13218:	4652      	mov	r2, sl
   1321a:	4631      	mov	r1, r6
   1321c:	4628      	mov	r0, r5
   1321e:	47b8      	blx	r7
   13220:	3001      	adds	r0, #1
   13222:	f43f aeae 	beq.w	12f82 <_printf_float+0xb6>
   13226:	f108 0801 	add.w	r8, r8, #1
   1322a:	e7ec      	b.n	13206 <_printf_float+0x33a>
   1322c:	4613      	mov	r3, r2
   1322e:	4631      	mov	r1, r6
   13230:	4642      	mov	r2, r8
   13232:	4628      	mov	r0, r5
   13234:	47b8      	blx	r7
   13236:	3001      	adds	r0, #1
   13238:	d1c0      	bne.n	131bc <_printf_float+0x2f0>
   1323a:	e6a2      	b.n	12f82 <_printf_float+0xb6>
   1323c:	2301      	movs	r3, #1
   1323e:	4631      	mov	r1, r6
   13240:	4628      	mov	r0, r5
   13242:	920b      	str	r2, [sp, #44]	; 0x2c
   13244:	47b8      	blx	r7
   13246:	3001      	adds	r0, #1
   13248:	f43f ae9b 	beq.w	12f82 <_printf_float+0xb6>
   1324c:	f10b 0b01 	add.w	fp, fp, #1
   13250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13252:	e7b9      	b.n	131c8 <_printf_float+0x2fc>
   13254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13258:	4631      	mov	r1, r6
   1325a:	4628      	mov	r0, r5
   1325c:	47b8      	blx	r7
   1325e:	3001      	adds	r0, #1
   13260:	d1bf      	bne.n	131e2 <_printf_float+0x316>
   13262:	e68e      	b.n	12f82 <_printf_float+0xb6>
   13264:	464b      	mov	r3, r9
   13266:	eb08 020a 	add.w	r2, r8, sl
   1326a:	4631      	mov	r1, r6
   1326c:	4628      	mov	r0, r5
   1326e:	47b8      	blx	r7
   13270:	3001      	adds	r0, #1
   13272:	d1c2      	bne.n	131fa <_printf_float+0x32e>
   13274:	e685      	b.n	12f82 <_printf_float+0xb6>
   13276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13278:	2a01      	cmp	r2, #1
   1327a:	dc01      	bgt.n	13280 <_printf_float+0x3b4>
   1327c:	07db      	lsls	r3, r3, #31
   1327e:	d537      	bpl.n	132f0 <_printf_float+0x424>
   13280:	2301      	movs	r3, #1
   13282:	4642      	mov	r2, r8
   13284:	4631      	mov	r1, r6
   13286:	4628      	mov	r0, r5
   13288:	47b8      	blx	r7
   1328a:	3001      	adds	r0, #1
   1328c:	f43f ae79 	beq.w	12f82 <_printf_float+0xb6>
   13290:	4631      	mov	r1, r6
   13292:	4628      	mov	r0, r5
   13294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   13298:	47b8      	blx	r7
   1329a:	3001      	adds	r0, #1
   1329c:	f43f ae71 	beq.w	12f82 <_printf_float+0xb6>
   132a0:	2200      	movs	r2, #0
   132a2:	2300      	movs	r3, #0
   132a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   132a8:	f7ed fb7a 	bl	9a0 <__aeabi_dcmpeq>
   132ac:	b9d8      	cbnz	r0, 132e6 <_printf_float+0x41a>
   132ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   132b0:	f108 0201 	add.w	r2, r8, #1
   132b4:	3b01      	subs	r3, #1
   132b6:	4631      	mov	r1, r6
   132b8:	4628      	mov	r0, r5
   132ba:	47b8      	blx	r7
   132bc:	3001      	adds	r0, #1
   132be:	d10e      	bne.n	132de <_printf_float+0x412>
   132c0:	e65f      	b.n	12f82 <_printf_float+0xb6>
   132c2:	2301      	movs	r3, #1
   132c4:	464a      	mov	r2, r9
   132c6:	4631      	mov	r1, r6
   132c8:	4628      	mov	r0, r5
   132ca:	47b8      	blx	r7
   132cc:	3001      	adds	r0, #1
   132ce:	f43f ae58 	beq.w	12f82 <_printf_float+0xb6>
   132d2:	f108 0801 	add.w	r8, r8, #1
   132d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   132d8:	3b01      	subs	r3, #1
   132da:	4543      	cmp	r3, r8
   132dc:	dcf1      	bgt.n	132c2 <_printf_float+0x3f6>
   132de:	4653      	mov	r3, sl
   132e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   132e4:	e6e1      	b.n	130aa <_printf_float+0x1de>
   132e6:	f04f 0800 	mov.w	r8, #0
   132ea:	f104 091a 	add.w	r9, r4, #26
   132ee:	e7f2      	b.n	132d6 <_printf_float+0x40a>
   132f0:	2301      	movs	r3, #1
   132f2:	4642      	mov	r2, r8
   132f4:	e7df      	b.n	132b6 <_printf_float+0x3ea>
   132f6:	2301      	movs	r3, #1
   132f8:	464a      	mov	r2, r9
   132fa:	4631      	mov	r1, r6
   132fc:	4628      	mov	r0, r5
   132fe:	47b8      	blx	r7
   13300:	3001      	adds	r0, #1
   13302:	f43f ae3e 	beq.w	12f82 <_printf_float+0xb6>
   13306:	f108 0801 	add.w	r8, r8, #1
   1330a:	68e3      	ldr	r3, [r4, #12]
   1330c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1330e:	1a5b      	subs	r3, r3, r1
   13310:	4543      	cmp	r3, r8
   13312:	dcf0      	bgt.n	132f6 <_printf_float+0x42a>
   13314:	e6fe      	b.n	13114 <_printf_float+0x248>
   13316:	f04f 0800 	mov.w	r8, #0
   1331a:	f104 0919 	add.w	r9, r4, #25
   1331e:	e7f4      	b.n	1330a <_printf_float+0x43e>

00013320 <_printf_i>:
   13320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13324:	460c      	mov	r4, r1
   13326:	4691      	mov	r9, r2
   13328:	4680      	mov	r8, r0
   1332a:	469a      	mov	sl, r3
   1332c:	7e27      	ldrb	r7, [r4, #24]
   1332e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13332:	990c      	ldr	r1, [sp, #48]	; 0x30
   13334:	2f78      	cmp	r7, #120	; 0x78
   13336:	d807      	bhi.n	13348 <_printf_i+0x28>
   13338:	2f62      	cmp	r7, #98	; 0x62
   1333a:	d80a      	bhi.n	13352 <_printf_i+0x32>
   1333c:	2f00      	cmp	r7, #0
   1333e:	f000 80d8 	beq.w	134f2 <_printf_i+0x1d2>
   13342:	2f58      	cmp	r7, #88	; 0x58
   13344:	f000 80a3 	beq.w	1348e <_printf_i+0x16e>
   13348:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1334c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   13350:	e03a      	b.n	133c8 <_printf_i+0xa8>
   13352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   13356:	2b15      	cmp	r3, #21
   13358:	d8f6      	bhi.n	13348 <_printf_i+0x28>
   1335a:	a001      	add	r0, pc, #4	; (adr r0, 13360 <_printf_i+0x40>)
   1335c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13360:	000133b9 	.word	0x000133b9
   13364:	000133cd 	.word	0x000133cd
   13368:	00013349 	.word	0x00013349
   1336c:	00013349 	.word	0x00013349
   13370:	00013349 	.word	0x00013349
   13374:	00013349 	.word	0x00013349
   13378:	000133cd 	.word	0x000133cd
   1337c:	00013349 	.word	0x00013349
   13380:	00013349 	.word	0x00013349
   13384:	00013349 	.word	0x00013349
   13388:	00013349 	.word	0x00013349
   1338c:	000134d9 	.word	0x000134d9
   13390:	000133fd 	.word	0x000133fd
   13394:	000134bb 	.word	0x000134bb
   13398:	00013349 	.word	0x00013349
   1339c:	00013349 	.word	0x00013349
   133a0:	000134fb 	.word	0x000134fb
   133a4:	00013349 	.word	0x00013349
   133a8:	000133fd 	.word	0x000133fd
   133ac:	00013349 	.word	0x00013349
   133b0:	00013349 	.word	0x00013349
   133b4:	000134c3 	.word	0x000134c3
   133b8:	680b      	ldr	r3, [r1, #0]
   133ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
   133be:	1d1a      	adds	r2, r3, #4
   133c0:	681b      	ldr	r3, [r3, #0]
   133c2:	600a      	str	r2, [r1, #0]
   133c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   133c8:	2301      	movs	r3, #1
   133ca:	e0a3      	b.n	13514 <_printf_i+0x1f4>
   133cc:	6825      	ldr	r5, [r4, #0]
   133ce:	6808      	ldr	r0, [r1, #0]
   133d0:	062e      	lsls	r6, r5, #24
   133d2:	f100 0304 	add.w	r3, r0, #4
   133d6:	d50a      	bpl.n	133ee <_printf_i+0xce>
   133d8:	6805      	ldr	r5, [r0, #0]
   133da:	600b      	str	r3, [r1, #0]
   133dc:	2d00      	cmp	r5, #0
   133de:	da03      	bge.n	133e8 <_printf_i+0xc8>
   133e0:	232d      	movs	r3, #45	; 0x2d
   133e2:	426d      	negs	r5, r5
   133e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   133e8:	485e      	ldr	r0, [pc, #376]	; (13564 <_printf_i+0x244>)
   133ea:	230a      	movs	r3, #10
   133ec:	e019      	b.n	13422 <_printf_i+0x102>
   133ee:	f015 0f40 	tst.w	r5, #64	; 0x40
   133f2:	6805      	ldr	r5, [r0, #0]
   133f4:	600b      	str	r3, [r1, #0]
   133f6:	bf18      	it	ne
   133f8:	b22d      	sxthne	r5, r5
   133fa:	e7ef      	b.n	133dc <_printf_i+0xbc>
   133fc:	680b      	ldr	r3, [r1, #0]
   133fe:	6825      	ldr	r5, [r4, #0]
   13400:	1d18      	adds	r0, r3, #4
   13402:	6008      	str	r0, [r1, #0]
   13404:	0628      	lsls	r0, r5, #24
   13406:	d501      	bpl.n	1340c <_printf_i+0xec>
   13408:	681d      	ldr	r5, [r3, #0]
   1340a:	e002      	b.n	13412 <_printf_i+0xf2>
   1340c:	0669      	lsls	r1, r5, #25
   1340e:	d5fb      	bpl.n	13408 <_printf_i+0xe8>
   13410:	881d      	ldrh	r5, [r3, #0]
   13412:	2f6f      	cmp	r7, #111	; 0x6f
   13414:	4853      	ldr	r0, [pc, #332]	; (13564 <_printf_i+0x244>)
   13416:	bf0c      	ite	eq
   13418:	2308      	moveq	r3, #8
   1341a:	230a      	movne	r3, #10
   1341c:	2100      	movs	r1, #0
   1341e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13422:	6866      	ldr	r6, [r4, #4]
   13424:	2e00      	cmp	r6, #0
   13426:	60a6      	str	r6, [r4, #8]
   13428:	bfa2      	ittt	ge
   1342a:	6821      	ldrge	r1, [r4, #0]
   1342c:	f021 0104 	bicge.w	r1, r1, #4
   13430:	6021      	strge	r1, [r4, #0]
   13432:	b90d      	cbnz	r5, 13438 <_printf_i+0x118>
   13434:	2e00      	cmp	r6, #0
   13436:	d04d      	beq.n	134d4 <_printf_i+0x1b4>
   13438:	4616      	mov	r6, r2
   1343a:	fbb5 f1f3 	udiv	r1, r5, r3
   1343e:	fb03 5711 	mls	r7, r3, r1, r5
   13442:	5dc7      	ldrb	r7, [r0, r7]
   13444:	f806 7d01 	strb.w	r7, [r6, #-1]!
   13448:	462f      	mov	r7, r5
   1344a:	460d      	mov	r5, r1
   1344c:	42bb      	cmp	r3, r7
   1344e:	d9f4      	bls.n	1343a <_printf_i+0x11a>
   13450:	2b08      	cmp	r3, #8
   13452:	d10b      	bne.n	1346c <_printf_i+0x14c>
   13454:	6823      	ldr	r3, [r4, #0]
   13456:	07df      	lsls	r7, r3, #31
   13458:	d508      	bpl.n	1346c <_printf_i+0x14c>
   1345a:	6923      	ldr	r3, [r4, #16]
   1345c:	6861      	ldr	r1, [r4, #4]
   1345e:	4299      	cmp	r1, r3
   13460:	bfde      	ittt	le
   13462:	2330      	movle	r3, #48	; 0x30
   13464:	f806 3c01 	strble.w	r3, [r6, #-1]
   13468:	f106 36ff 	addle.w	r6, r6, #4294967295
   1346c:	1b92      	subs	r2, r2, r6
   1346e:	6122      	str	r2, [r4, #16]
   13470:	464b      	mov	r3, r9
   13472:	aa03      	add	r2, sp, #12
   13474:	4621      	mov	r1, r4
   13476:	4640      	mov	r0, r8
   13478:	f8cd a000 	str.w	sl, [sp]
   1347c:	f005 fc0b 	bl	18c96 <_printf_common>
   13480:	3001      	adds	r0, #1
   13482:	d14c      	bne.n	1351e <_printf_i+0x1fe>
   13484:	f04f 30ff 	mov.w	r0, #4294967295
   13488:	b004      	add	sp, #16
   1348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1348e:	4835      	ldr	r0, [pc, #212]	; (13564 <_printf_i+0x244>)
   13490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   13494:	6823      	ldr	r3, [r4, #0]
   13496:	680e      	ldr	r6, [r1, #0]
   13498:	061f      	lsls	r7, r3, #24
   1349a:	f856 5b04 	ldr.w	r5, [r6], #4
   1349e:	600e      	str	r6, [r1, #0]
   134a0:	d514      	bpl.n	134cc <_printf_i+0x1ac>
   134a2:	07d9      	lsls	r1, r3, #31
   134a4:	bf44      	itt	mi
   134a6:	f043 0320 	orrmi.w	r3, r3, #32
   134aa:	6023      	strmi	r3, [r4, #0]
   134ac:	b91d      	cbnz	r5, 134b6 <_printf_i+0x196>
   134ae:	6823      	ldr	r3, [r4, #0]
   134b0:	f023 0320 	bic.w	r3, r3, #32
   134b4:	6023      	str	r3, [r4, #0]
   134b6:	2310      	movs	r3, #16
   134b8:	e7b0      	b.n	1341c <_printf_i+0xfc>
   134ba:	6823      	ldr	r3, [r4, #0]
   134bc:	f043 0320 	orr.w	r3, r3, #32
   134c0:	6023      	str	r3, [r4, #0]
   134c2:	2378      	movs	r3, #120	; 0x78
   134c4:	4828      	ldr	r0, [pc, #160]	; (13568 <_printf_i+0x248>)
   134c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   134ca:	e7e3      	b.n	13494 <_printf_i+0x174>
   134cc:	065e      	lsls	r6, r3, #25
   134ce:	bf48      	it	mi
   134d0:	b2ad      	uxthmi	r5, r5
   134d2:	e7e6      	b.n	134a2 <_printf_i+0x182>
   134d4:	4616      	mov	r6, r2
   134d6:	e7bb      	b.n	13450 <_printf_i+0x130>
   134d8:	680b      	ldr	r3, [r1, #0]
   134da:	6826      	ldr	r6, [r4, #0]
   134dc:	1d1d      	adds	r5, r3, #4
   134de:	6960      	ldr	r0, [r4, #20]
   134e0:	600d      	str	r5, [r1, #0]
   134e2:	0635      	lsls	r5, r6, #24
   134e4:	681b      	ldr	r3, [r3, #0]
   134e6:	d501      	bpl.n	134ec <_printf_i+0x1cc>
   134e8:	6018      	str	r0, [r3, #0]
   134ea:	e002      	b.n	134f2 <_printf_i+0x1d2>
   134ec:	0671      	lsls	r1, r6, #25
   134ee:	d5fb      	bpl.n	134e8 <_printf_i+0x1c8>
   134f0:	8018      	strh	r0, [r3, #0]
   134f2:	2300      	movs	r3, #0
   134f4:	4616      	mov	r6, r2
   134f6:	6123      	str	r3, [r4, #16]
   134f8:	e7ba      	b.n	13470 <_printf_i+0x150>
   134fa:	680b      	ldr	r3, [r1, #0]
   134fc:	1d1a      	adds	r2, r3, #4
   134fe:	600a      	str	r2, [r1, #0]
   13500:	2100      	movs	r1, #0
   13502:	681e      	ldr	r6, [r3, #0]
   13504:	6862      	ldr	r2, [r4, #4]
   13506:	4630      	mov	r0, r6
   13508:	f005 facf 	bl	18aaa <memchr>
   1350c:	b108      	cbz	r0, 13512 <_printf_i+0x1f2>
   1350e:	1b80      	subs	r0, r0, r6
   13510:	6060      	str	r0, [r4, #4]
   13512:	6863      	ldr	r3, [r4, #4]
   13514:	6123      	str	r3, [r4, #16]
   13516:	2300      	movs	r3, #0
   13518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1351c:	e7a8      	b.n	13470 <_printf_i+0x150>
   1351e:	6923      	ldr	r3, [r4, #16]
   13520:	4632      	mov	r2, r6
   13522:	4649      	mov	r1, r9
   13524:	4640      	mov	r0, r8
   13526:	47d0      	blx	sl
   13528:	3001      	adds	r0, #1
   1352a:	d0ab      	beq.n	13484 <_printf_i+0x164>
   1352c:	6823      	ldr	r3, [r4, #0]
   1352e:	079b      	lsls	r3, r3, #30
   13530:	d413      	bmi.n	1355a <_printf_i+0x23a>
   13532:	68e0      	ldr	r0, [r4, #12]
   13534:	9b03      	ldr	r3, [sp, #12]
   13536:	4298      	cmp	r0, r3
   13538:	bfb8      	it	lt
   1353a:	4618      	movlt	r0, r3
   1353c:	e7a4      	b.n	13488 <_printf_i+0x168>
   1353e:	2301      	movs	r3, #1
   13540:	4632      	mov	r2, r6
   13542:	4649      	mov	r1, r9
   13544:	4640      	mov	r0, r8
   13546:	47d0      	blx	sl
   13548:	3001      	adds	r0, #1
   1354a:	d09b      	beq.n	13484 <_printf_i+0x164>
   1354c:	3501      	adds	r5, #1
   1354e:	68e3      	ldr	r3, [r4, #12]
   13550:	9903      	ldr	r1, [sp, #12]
   13552:	1a5b      	subs	r3, r3, r1
   13554:	42ab      	cmp	r3, r5
   13556:	dcf2      	bgt.n	1353e <_printf_i+0x21e>
   13558:	e7eb      	b.n	13532 <_printf_i+0x212>
   1355a:	2500      	movs	r5, #0
   1355c:	f104 0619 	add.w	r6, r4, #25
   13560:	e7f5      	b.n	1354e <_printf_i+0x22e>
   13562:	bf00      	nop
   13564:	00035318 	.word	0x00035318
   13568:	00035329 	.word	0x00035329

0001356c <_sbrk_r>:
   1356c:	b538      	push	{r3, r4, r5, lr}
   1356e:	2300      	movs	r3, #0
   13570:	4d05      	ldr	r5, [pc, #20]	; (13588 <_sbrk_r+0x1c>)
   13572:	4604      	mov	r4, r0
   13574:	4608      	mov	r0, r1
   13576:	602b      	str	r3, [r5, #0]
   13578:	f7f1 faf8 	bl	4b6c <_sbrk>
   1357c:	1c43      	adds	r3, r0, #1
   1357e:	d102      	bne.n	13586 <_sbrk_r+0x1a>
   13580:	682b      	ldr	r3, [r5, #0]
   13582:	b103      	cbz	r3, 13586 <_sbrk_r+0x1a>
   13584:	6023      	str	r3, [r4, #0]
   13586:	bd38      	pop	{r3, r4, r5, pc}
   13588:	20015c68 	.word	0x20015c68

0001358c <raise>:
   1358c:	4b02      	ldr	r3, [pc, #8]	; (13598 <raise+0xc>)
   1358e:	4601      	mov	r1, r0
   13590:	6818      	ldr	r0, [r3, #0]
   13592:	f005 bbf0 	b.w	18d76 <_raise_r>
   13596:	bf00      	nop
   13598:	200000cc 	.word	0x200000cc

0001359c <_kill_r>:
   1359c:	b538      	push	{r3, r4, r5, lr}
   1359e:	2300      	movs	r3, #0
   135a0:	4d06      	ldr	r5, [pc, #24]	; (135bc <_kill_r+0x20>)
   135a2:	4604      	mov	r4, r0
   135a4:	4608      	mov	r0, r1
   135a6:	4611      	mov	r1, r2
   135a8:	602b      	str	r3, [r5, #0]
   135aa:	f001 fa0f 	bl	149cc <_kill>
   135ae:	1c43      	adds	r3, r0, #1
   135b0:	d102      	bne.n	135b8 <_kill_r+0x1c>
   135b2:	682b      	ldr	r3, [r5, #0]
   135b4:	b103      	cbz	r3, 135b8 <_kill_r+0x1c>
   135b6:	6023      	str	r3, [r4, #0]
   135b8:	bd38      	pop	{r3, r4, r5, pc}
   135ba:	bf00      	nop
   135bc:	20015c68 	.word	0x20015c68

000135c0 <strtok>:
   135c0:	4b13      	ldr	r3, [pc, #76]	; (13610 <strtok+0x50>)
   135c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   135c6:	681f      	ldr	r7, [r3, #0]
   135c8:	4605      	mov	r5, r0
   135ca:	460e      	mov	r6, r1
   135cc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   135ce:	b9b4      	cbnz	r4, 135fe <strtok+0x3e>
   135d0:	2050      	movs	r0, #80	; 0x50
   135d2:	f7ff fa93 	bl	12afc <malloc>
   135d6:	65b8      	str	r0, [r7, #88]	; 0x58
   135d8:	6184      	str	r4, [r0, #24]
   135da:	7704      	strb	r4, [r0, #28]
   135dc:	6244      	str	r4, [r0, #36]	; 0x24
   135de:	e9c0 4400 	strd	r4, r4, [r0]
   135e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   135e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
   135ea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   135ee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   135f2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   135f6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   135fa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   135fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
   13600:	4631      	mov	r1, r6
   13602:	4628      	mov	r0, r5
   13604:	2301      	movs	r3, #1
   13606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1360a:	f005 bc10 	b.w	18e2e <__strtok_r>
   1360e:	bf00      	nop
   13610:	200000cc 	.word	0x200000cc

00013614 <_strtol_l.isra.0>:
   13614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13618:	468c      	mov	ip, r1
   1361a:	4686      	mov	lr, r0
   1361c:	4e38      	ldr	r6, [pc, #224]	; (13700 <_strtol_l.isra.0+0xec>)
   1361e:	4660      	mov	r0, ip
   13620:	f81c 4b01 	ldrb.w	r4, [ip], #1
   13624:	5da5      	ldrb	r5, [r4, r6]
   13626:	f015 0508 	ands.w	r5, r5, #8
   1362a:	d1f8      	bne.n	1361e <_strtol_l.isra.0+0xa>
   1362c:	2c2d      	cmp	r4, #45	; 0x2d
   1362e:	d133      	bne.n	13698 <_strtol_l.isra.0+0x84>
   13630:	f89c 4000 	ldrb.w	r4, [ip]
   13634:	f04f 0801 	mov.w	r8, #1
   13638:	f100 0c02 	add.w	ip, r0, #2
   1363c:	2b00      	cmp	r3, #0
   1363e:	d05b      	beq.n	136f8 <_strtol_l.isra.0+0xe4>
   13640:	2b10      	cmp	r3, #16
   13642:	d10c      	bne.n	1365e <_strtol_l.isra.0+0x4a>
   13644:	2c30      	cmp	r4, #48	; 0x30
   13646:	d10a      	bne.n	1365e <_strtol_l.isra.0+0x4a>
   13648:	f89c 0000 	ldrb.w	r0, [ip]
   1364c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   13650:	2858      	cmp	r0, #88	; 0x58
   13652:	d14c      	bne.n	136ee <_strtol_l.isra.0+0xda>
   13654:	f89c 4001 	ldrb.w	r4, [ip, #1]
   13658:	2310      	movs	r3, #16
   1365a:	f10c 0c02 	add.w	ip, ip, #2
   1365e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   13662:	2600      	movs	r6, #0
   13664:	3f01      	subs	r7, #1
   13666:	4630      	mov	r0, r6
   13668:	fbb7 f9f3 	udiv	r9, r7, r3
   1366c:	fb03 7a19 	mls	sl, r3, r9, r7
   13670:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   13674:	2d09      	cmp	r5, #9
   13676:	d817      	bhi.n	136a8 <_strtol_l.isra.0+0x94>
   13678:	462c      	mov	r4, r5
   1367a:	42a3      	cmp	r3, r4
   1367c:	dd23      	ble.n	136c6 <_strtol_l.isra.0+0xb2>
   1367e:	1c75      	adds	r5, r6, #1
   13680:	d007      	beq.n	13692 <_strtol_l.isra.0+0x7e>
   13682:	4581      	cmp	r9, r0
   13684:	d31c      	bcc.n	136c0 <_strtol_l.isra.0+0xac>
   13686:	d101      	bne.n	1368c <_strtol_l.isra.0+0x78>
   13688:	45a2      	cmp	sl, r4
   1368a:	db19      	blt.n	136c0 <_strtol_l.isra.0+0xac>
   1368c:	fb00 4003 	mla	r0, r0, r3, r4
   13690:	2601      	movs	r6, #1
   13692:	f81c 4b01 	ldrb.w	r4, [ip], #1
   13696:	e7eb      	b.n	13670 <_strtol_l.isra.0+0x5c>
   13698:	2c2b      	cmp	r4, #43	; 0x2b
   1369a:	46a8      	mov	r8, r5
   1369c:	bf04      	itt	eq
   1369e:	f89c 4000 	ldrbeq.w	r4, [ip]
   136a2:	f100 0c02 	addeq.w	ip, r0, #2
   136a6:	e7c9      	b.n	1363c <_strtol_l.isra.0+0x28>
   136a8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   136ac:	2d19      	cmp	r5, #25
   136ae:	d801      	bhi.n	136b4 <_strtol_l.isra.0+0xa0>
   136b0:	3c37      	subs	r4, #55	; 0x37
   136b2:	e7e2      	b.n	1367a <_strtol_l.isra.0+0x66>
   136b4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   136b8:	2d19      	cmp	r5, #25
   136ba:	d804      	bhi.n	136c6 <_strtol_l.isra.0+0xb2>
   136bc:	3c57      	subs	r4, #87	; 0x57
   136be:	e7dc      	b.n	1367a <_strtol_l.isra.0+0x66>
   136c0:	f04f 36ff 	mov.w	r6, #4294967295
   136c4:	e7e5      	b.n	13692 <_strtol_l.isra.0+0x7e>
   136c6:	1c73      	adds	r3, r6, #1
   136c8:	d106      	bne.n	136d8 <_strtol_l.isra.0+0xc4>
   136ca:	2322      	movs	r3, #34	; 0x22
   136cc:	4638      	mov	r0, r7
   136ce:	f8ce 3000 	str.w	r3, [lr]
   136d2:	b942      	cbnz	r2, 136e6 <_strtol_l.isra.0+0xd2>
   136d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136d8:	f1b8 0f00 	cmp.w	r8, #0
   136dc:	d000      	beq.n	136e0 <_strtol_l.isra.0+0xcc>
   136de:	4240      	negs	r0, r0
   136e0:	2a00      	cmp	r2, #0
   136e2:	d0f7      	beq.n	136d4 <_strtol_l.isra.0+0xc0>
   136e4:	b10e      	cbz	r6, 136ea <_strtol_l.isra.0+0xd6>
   136e6:	f10c 31ff 	add.w	r1, ip, #4294967295
   136ea:	6011      	str	r1, [r2, #0]
   136ec:	e7f2      	b.n	136d4 <_strtol_l.isra.0+0xc0>
   136ee:	2430      	movs	r4, #48	; 0x30
   136f0:	2b00      	cmp	r3, #0
   136f2:	d1b4      	bne.n	1365e <_strtol_l.isra.0+0x4a>
   136f4:	2308      	movs	r3, #8
   136f6:	e7b2      	b.n	1365e <_strtol_l.isra.0+0x4a>
   136f8:	2c30      	cmp	r4, #48	; 0x30
   136fa:	d0a5      	beq.n	13648 <_strtol_l.isra.0+0x34>
   136fc:	230a      	movs	r3, #10
   136fe:	e7ae      	b.n	1365e <_strtol_l.isra.0+0x4a>
   13700:	000351f5 	.word	0x000351f5

00013704 <strtol>:
   13704:	4613      	mov	r3, r2
   13706:	460a      	mov	r2, r1
   13708:	4601      	mov	r1, r0
   1370a:	4802      	ldr	r0, [pc, #8]	; (13714 <strtol+0x10>)
   1370c:	6800      	ldr	r0, [r0, #0]
   1370e:	f7ff bf81 	b.w	13614 <_strtol_l.isra.0>
   13712:	bf00      	nop
   13714:	200000cc 	.word	0x200000cc

00013718 <viprintf>:
   13718:	4b09      	ldr	r3, [pc, #36]	; (13740 <viprintf+0x28>)
   1371a:	b570      	push	{r4, r5, r6, lr}
   1371c:	681c      	ldr	r4, [r3, #0]
   1371e:	4605      	mov	r5, r0
   13720:	460e      	mov	r6, r1
   13722:	b124      	cbz	r4, 1372e <viprintf+0x16>
   13724:	69a3      	ldr	r3, [r4, #24]
   13726:	b913      	cbnz	r3, 1372e <viprintf+0x16>
   13728:	4620      	mov	r0, r4
   1372a:	f000 f9cd 	bl	13ac8 <__sinit>
   1372e:	4633      	mov	r3, r6
   13730:	462a      	mov	r2, r5
   13732:	68a1      	ldr	r1, [r4, #8]
   13734:	4620      	mov	r0, r4
   13736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1373a:	f7ff ba97 	b.w	12c6c <_vfiprintf_r>
   1373e:	bf00      	nop
   13740:	200000cc 	.word	0x200000cc

00013744 <__swbuf_r>:
   13744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13746:	460e      	mov	r6, r1
   13748:	4614      	mov	r4, r2
   1374a:	4605      	mov	r5, r0
   1374c:	b118      	cbz	r0, 13756 <__swbuf_r+0x12>
   1374e:	6983      	ldr	r3, [r0, #24]
   13750:	b90b      	cbnz	r3, 13756 <__swbuf_r+0x12>
   13752:	f000 f9b9 	bl	13ac8 <__sinit>
   13756:	4b21      	ldr	r3, [pc, #132]	; (137dc <__swbuf_r+0x98>)
   13758:	429c      	cmp	r4, r3
   1375a:	d12b      	bne.n	137b4 <__swbuf_r+0x70>
   1375c:	686c      	ldr	r4, [r5, #4]
   1375e:	69a3      	ldr	r3, [r4, #24]
   13760:	60a3      	str	r3, [r4, #8]
   13762:	89a3      	ldrh	r3, [r4, #12]
   13764:	071a      	lsls	r2, r3, #28
   13766:	d52f      	bpl.n	137c8 <__swbuf_r+0x84>
   13768:	6923      	ldr	r3, [r4, #16]
   1376a:	b36b      	cbz	r3, 137c8 <__swbuf_r+0x84>
   1376c:	6923      	ldr	r3, [r4, #16]
   1376e:	b2f6      	uxtb	r6, r6
   13770:	6820      	ldr	r0, [r4, #0]
   13772:	4637      	mov	r7, r6
   13774:	1ac0      	subs	r0, r0, r3
   13776:	6963      	ldr	r3, [r4, #20]
   13778:	4283      	cmp	r3, r0
   1377a:	dc04      	bgt.n	13786 <__swbuf_r+0x42>
   1377c:	4621      	mov	r1, r4
   1377e:	4628      	mov	r0, r5
   13780:	f000 f924 	bl	139cc <_fflush_r>
   13784:	bb30      	cbnz	r0, 137d4 <__swbuf_r+0x90>
   13786:	68a3      	ldr	r3, [r4, #8]
   13788:	3001      	adds	r0, #1
   1378a:	3b01      	subs	r3, #1
   1378c:	60a3      	str	r3, [r4, #8]
   1378e:	6823      	ldr	r3, [r4, #0]
   13790:	1c5a      	adds	r2, r3, #1
   13792:	6022      	str	r2, [r4, #0]
   13794:	701e      	strb	r6, [r3, #0]
   13796:	6963      	ldr	r3, [r4, #20]
   13798:	4283      	cmp	r3, r0
   1379a:	d004      	beq.n	137a6 <__swbuf_r+0x62>
   1379c:	89a3      	ldrh	r3, [r4, #12]
   1379e:	07db      	lsls	r3, r3, #31
   137a0:	d506      	bpl.n	137b0 <__swbuf_r+0x6c>
   137a2:	2e0a      	cmp	r6, #10
   137a4:	d104      	bne.n	137b0 <__swbuf_r+0x6c>
   137a6:	4621      	mov	r1, r4
   137a8:	4628      	mov	r0, r5
   137aa:	f000 f90f 	bl	139cc <_fflush_r>
   137ae:	b988      	cbnz	r0, 137d4 <__swbuf_r+0x90>
   137b0:	4638      	mov	r0, r7
   137b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137b4:	4b0a      	ldr	r3, [pc, #40]	; (137e0 <__swbuf_r+0x9c>)
   137b6:	429c      	cmp	r4, r3
   137b8:	d101      	bne.n	137be <__swbuf_r+0x7a>
   137ba:	68ac      	ldr	r4, [r5, #8]
   137bc:	e7cf      	b.n	1375e <__swbuf_r+0x1a>
   137be:	4b09      	ldr	r3, [pc, #36]	; (137e4 <__swbuf_r+0xa0>)
   137c0:	429c      	cmp	r4, r3
   137c2:	bf08      	it	eq
   137c4:	68ec      	ldreq	r4, [r5, #12]
   137c6:	e7ca      	b.n	1375e <__swbuf_r+0x1a>
   137c8:	4621      	mov	r1, r4
   137ca:	4628      	mov	r0, r5
   137cc:	f000 f80c 	bl	137e8 <__swsetup_r>
   137d0:	2800      	cmp	r0, #0
   137d2:	d0cb      	beq.n	1376c <__swbuf_r+0x28>
   137d4:	f04f 37ff 	mov.w	r7, #4294967295
   137d8:	e7ea      	b.n	137b0 <__swbuf_r+0x6c>
   137da:	bf00      	nop
   137dc:	0003516c 	.word	0x0003516c
   137e0:	0003518c 	.word	0x0003518c
   137e4:	0003514c 	.word	0x0003514c

000137e8 <__swsetup_r>:
   137e8:	4b32      	ldr	r3, [pc, #200]	; (138b4 <__swsetup_r+0xcc>)
   137ea:	b570      	push	{r4, r5, r6, lr}
   137ec:	681d      	ldr	r5, [r3, #0]
   137ee:	4606      	mov	r6, r0
   137f0:	460c      	mov	r4, r1
   137f2:	b125      	cbz	r5, 137fe <__swsetup_r+0x16>
   137f4:	69ab      	ldr	r3, [r5, #24]
   137f6:	b913      	cbnz	r3, 137fe <__swsetup_r+0x16>
   137f8:	4628      	mov	r0, r5
   137fa:	f000 f965 	bl	13ac8 <__sinit>
   137fe:	4b2e      	ldr	r3, [pc, #184]	; (138b8 <__swsetup_r+0xd0>)
   13800:	429c      	cmp	r4, r3
   13802:	d10f      	bne.n	13824 <__swsetup_r+0x3c>
   13804:	686c      	ldr	r4, [r5, #4]
   13806:	89a3      	ldrh	r3, [r4, #12]
   13808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1380c:	0719      	lsls	r1, r3, #28
   1380e:	d42c      	bmi.n	1386a <__swsetup_r+0x82>
   13810:	06dd      	lsls	r5, r3, #27
   13812:	d411      	bmi.n	13838 <__swsetup_r+0x50>
   13814:	2309      	movs	r3, #9
   13816:	6033      	str	r3, [r6, #0]
   13818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   1381c:	f04f 30ff 	mov.w	r0, #4294967295
   13820:	81a3      	strh	r3, [r4, #12]
   13822:	e03e      	b.n	138a2 <__swsetup_r+0xba>
   13824:	4b25      	ldr	r3, [pc, #148]	; (138bc <__swsetup_r+0xd4>)
   13826:	429c      	cmp	r4, r3
   13828:	d101      	bne.n	1382e <__swsetup_r+0x46>
   1382a:	68ac      	ldr	r4, [r5, #8]
   1382c:	e7eb      	b.n	13806 <__swsetup_r+0x1e>
   1382e:	4b24      	ldr	r3, [pc, #144]	; (138c0 <__swsetup_r+0xd8>)
   13830:	429c      	cmp	r4, r3
   13832:	bf08      	it	eq
   13834:	68ec      	ldreq	r4, [r5, #12]
   13836:	e7e6      	b.n	13806 <__swsetup_r+0x1e>
   13838:	0758      	lsls	r0, r3, #29
   1383a:	d512      	bpl.n	13862 <__swsetup_r+0x7a>
   1383c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1383e:	b141      	cbz	r1, 13852 <__swsetup_r+0x6a>
   13840:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13844:	4299      	cmp	r1, r3
   13846:	d002      	beq.n	1384e <__swsetup_r+0x66>
   13848:	4630      	mov	r0, r6
   1384a:	f7ff f967 	bl	12b1c <_free_r>
   1384e:	2300      	movs	r3, #0
   13850:	6363      	str	r3, [r4, #52]	; 0x34
   13852:	89a3      	ldrh	r3, [r4, #12]
   13854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13858:	81a3      	strh	r3, [r4, #12]
   1385a:	2300      	movs	r3, #0
   1385c:	6063      	str	r3, [r4, #4]
   1385e:	6923      	ldr	r3, [r4, #16]
   13860:	6023      	str	r3, [r4, #0]
   13862:	89a3      	ldrh	r3, [r4, #12]
   13864:	f043 0308 	orr.w	r3, r3, #8
   13868:	81a3      	strh	r3, [r4, #12]
   1386a:	6923      	ldr	r3, [r4, #16]
   1386c:	b94b      	cbnz	r3, 13882 <__swsetup_r+0x9a>
   1386e:	89a3      	ldrh	r3, [r4, #12]
   13870:	f403 7320 	and.w	r3, r3, #640	; 0x280
   13874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13878:	d003      	beq.n	13882 <__swsetup_r+0x9a>
   1387a:	4621      	mov	r1, r4
   1387c:	4630      	mov	r0, r6
   1387e:	f000 f9a5 	bl	13bcc <__smakebuf_r>
   13882:	89a0      	ldrh	r0, [r4, #12]
   13884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13888:	f010 0301 	ands.w	r3, r0, #1
   1388c:	d00a      	beq.n	138a4 <__swsetup_r+0xbc>
   1388e:	2300      	movs	r3, #0
   13890:	60a3      	str	r3, [r4, #8]
   13892:	6963      	ldr	r3, [r4, #20]
   13894:	425b      	negs	r3, r3
   13896:	61a3      	str	r3, [r4, #24]
   13898:	6923      	ldr	r3, [r4, #16]
   1389a:	b943      	cbnz	r3, 138ae <__swsetup_r+0xc6>
   1389c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   138a0:	d1ba      	bne.n	13818 <__swsetup_r+0x30>
   138a2:	bd70      	pop	{r4, r5, r6, pc}
   138a4:	0781      	lsls	r1, r0, #30
   138a6:	bf58      	it	pl
   138a8:	6963      	ldrpl	r3, [r4, #20]
   138aa:	60a3      	str	r3, [r4, #8]
   138ac:	e7f4      	b.n	13898 <__swsetup_r+0xb0>
   138ae:	2000      	movs	r0, #0
   138b0:	e7f7      	b.n	138a2 <__swsetup_r+0xba>
   138b2:	bf00      	nop
   138b4:	200000cc 	.word	0x200000cc
   138b8:	0003516c 	.word	0x0003516c
   138bc:	0003518c 	.word	0x0003518c
   138c0:	0003514c 	.word	0x0003514c

000138c4 <__sflush_r>:
   138c4:	898a      	ldrh	r2, [r1, #12]
   138c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138ca:	4605      	mov	r5, r0
   138cc:	0710      	lsls	r0, r2, #28
   138ce:	460c      	mov	r4, r1
   138d0:	d458      	bmi.n	13984 <__sflush_r+0xc0>
   138d2:	684b      	ldr	r3, [r1, #4]
   138d4:	2b00      	cmp	r3, #0
   138d6:	dc05      	bgt.n	138e4 <__sflush_r+0x20>
   138d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   138da:	2b00      	cmp	r3, #0
   138dc:	dc02      	bgt.n	138e4 <__sflush_r+0x20>
   138de:	2000      	movs	r0, #0
   138e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   138e6:	2e00      	cmp	r6, #0
   138e8:	d0f9      	beq.n	138de <__sflush_r+0x1a>
   138ea:	2300      	movs	r3, #0
   138ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   138f0:	682f      	ldr	r7, [r5, #0]
   138f2:	602b      	str	r3, [r5, #0]
   138f4:	d032      	beq.n	1395c <__sflush_r+0x98>
   138f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   138f8:	89a3      	ldrh	r3, [r4, #12]
   138fa:	075a      	lsls	r2, r3, #29
   138fc:	d505      	bpl.n	1390a <__sflush_r+0x46>
   138fe:	6863      	ldr	r3, [r4, #4]
   13900:	1ac0      	subs	r0, r0, r3
   13902:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13904:	b10b      	cbz	r3, 1390a <__sflush_r+0x46>
   13906:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13908:	1ac0      	subs	r0, r0, r3
   1390a:	2300      	movs	r3, #0
   1390c:	4602      	mov	r2, r0
   1390e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13910:	4628      	mov	r0, r5
   13912:	6a21      	ldr	r1, [r4, #32]
   13914:	47b0      	blx	r6
   13916:	1c43      	adds	r3, r0, #1
   13918:	89a3      	ldrh	r3, [r4, #12]
   1391a:	d106      	bne.n	1392a <__sflush_r+0x66>
   1391c:	6829      	ldr	r1, [r5, #0]
   1391e:	291d      	cmp	r1, #29
   13920:	d82c      	bhi.n	1397c <__sflush_r+0xb8>
   13922:	4a29      	ldr	r2, [pc, #164]	; (139c8 <__sflush_r+0x104>)
   13924:	40ca      	lsrs	r2, r1
   13926:	07d6      	lsls	r6, r2, #31
   13928:	d528      	bpl.n	1397c <__sflush_r+0xb8>
   1392a:	2200      	movs	r2, #0
   1392c:	04d9      	lsls	r1, r3, #19
   1392e:	6062      	str	r2, [r4, #4]
   13930:	6922      	ldr	r2, [r4, #16]
   13932:	6022      	str	r2, [r4, #0]
   13934:	d504      	bpl.n	13940 <__sflush_r+0x7c>
   13936:	1c42      	adds	r2, r0, #1
   13938:	d101      	bne.n	1393e <__sflush_r+0x7a>
   1393a:	682b      	ldr	r3, [r5, #0]
   1393c:	b903      	cbnz	r3, 13940 <__sflush_r+0x7c>
   1393e:	6560      	str	r0, [r4, #84]	; 0x54
   13940:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13942:	602f      	str	r7, [r5, #0]
   13944:	2900      	cmp	r1, #0
   13946:	d0ca      	beq.n	138de <__sflush_r+0x1a>
   13948:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1394c:	4299      	cmp	r1, r3
   1394e:	d002      	beq.n	13956 <__sflush_r+0x92>
   13950:	4628      	mov	r0, r5
   13952:	f7ff f8e3 	bl	12b1c <_free_r>
   13956:	2000      	movs	r0, #0
   13958:	6360      	str	r0, [r4, #52]	; 0x34
   1395a:	e7c1      	b.n	138e0 <__sflush_r+0x1c>
   1395c:	6a21      	ldr	r1, [r4, #32]
   1395e:	2301      	movs	r3, #1
   13960:	4628      	mov	r0, r5
   13962:	47b0      	blx	r6
   13964:	1c41      	adds	r1, r0, #1
   13966:	d1c7      	bne.n	138f8 <__sflush_r+0x34>
   13968:	682b      	ldr	r3, [r5, #0]
   1396a:	2b00      	cmp	r3, #0
   1396c:	d0c4      	beq.n	138f8 <__sflush_r+0x34>
   1396e:	2b1d      	cmp	r3, #29
   13970:	d001      	beq.n	13976 <__sflush_r+0xb2>
   13972:	2b16      	cmp	r3, #22
   13974:	d101      	bne.n	1397a <__sflush_r+0xb6>
   13976:	602f      	str	r7, [r5, #0]
   13978:	e7b1      	b.n	138de <__sflush_r+0x1a>
   1397a:	89a3      	ldrh	r3, [r4, #12]
   1397c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13980:	81a3      	strh	r3, [r4, #12]
   13982:	e7ad      	b.n	138e0 <__sflush_r+0x1c>
   13984:	690f      	ldr	r7, [r1, #16]
   13986:	2f00      	cmp	r7, #0
   13988:	d0a9      	beq.n	138de <__sflush_r+0x1a>
   1398a:	0793      	lsls	r3, r2, #30
   1398c:	680e      	ldr	r6, [r1, #0]
   1398e:	600f      	str	r7, [r1, #0]
   13990:	bf0c      	ite	eq
   13992:	694b      	ldreq	r3, [r1, #20]
   13994:	2300      	movne	r3, #0
   13996:	eba6 0807 	sub.w	r8, r6, r7
   1399a:	608b      	str	r3, [r1, #8]
   1399c:	f1b8 0f00 	cmp.w	r8, #0
   139a0:	dd9d      	ble.n	138de <__sflush_r+0x1a>
   139a2:	4643      	mov	r3, r8
   139a4:	463a      	mov	r2, r7
   139a6:	6a21      	ldr	r1, [r4, #32]
   139a8:	4628      	mov	r0, r5
   139aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   139ac:	47b0      	blx	r6
   139ae:	2800      	cmp	r0, #0
   139b0:	dc06      	bgt.n	139c0 <__sflush_r+0xfc>
   139b2:	89a3      	ldrh	r3, [r4, #12]
   139b4:	f04f 30ff 	mov.w	r0, #4294967295
   139b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139bc:	81a3      	strh	r3, [r4, #12]
   139be:	e78f      	b.n	138e0 <__sflush_r+0x1c>
   139c0:	4407      	add	r7, r0
   139c2:	eba8 0800 	sub.w	r8, r8, r0
   139c6:	e7e9      	b.n	1399c <__sflush_r+0xd8>
   139c8:	20400001 	.word	0x20400001

000139cc <_fflush_r>:
   139cc:	b538      	push	{r3, r4, r5, lr}
   139ce:	690b      	ldr	r3, [r1, #16]
   139d0:	4605      	mov	r5, r0
   139d2:	460c      	mov	r4, r1
   139d4:	b913      	cbnz	r3, 139dc <_fflush_r+0x10>
   139d6:	2500      	movs	r5, #0
   139d8:	4628      	mov	r0, r5
   139da:	bd38      	pop	{r3, r4, r5, pc}
   139dc:	b118      	cbz	r0, 139e6 <_fflush_r+0x1a>
   139de:	6983      	ldr	r3, [r0, #24]
   139e0:	b90b      	cbnz	r3, 139e6 <_fflush_r+0x1a>
   139e2:	f000 f871 	bl	13ac8 <__sinit>
   139e6:	4b14      	ldr	r3, [pc, #80]	; (13a38 <_fflush_r+0x6c>)
   139e8:	429c      	cmp	r4, r3
   139ea:	d11b      	bne.n	13a24 <_fflush_r+0x58>
   139ec:	686c      	ldr	r4, [r5, #4]
   139ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   139f2:	2b00      	cmp	r3, #0
   139f4:	d0ef      	beq.n	139d6 <_fflush_r+0xa>
   139f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   139f8:	07d0      	lsls	r0, r2, #31
   139fa:	d404      	bmi.n	13a06 <_fflush_r+0x3a>
   139fc:	0599      	lsls	r1, r3, #22
   139fe:	d402      	bmi.n	13a06 <_fflush_r+0x3a>
   13a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a02:	f000 fff5 	bl	149f0 <__retarget_lock_acquire_recursive>
   13a06:	4628      	mov	r0, r5
   13a08:	4621      	mov	r1, r4
   13a0a:	f7ff ff5b 	bl	138c4 <__sflush_r>
   13a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13a10:	4605      	mov	r5, r0
   13a12:	07da      	lsls	r2, r3, #31
   13a14:	d4e0      	bmi.n	139d8 <_fflush_r+0xc>
   13a16:	89a3      	ldrh	r3, [r4, #12]
   13a18:	059b      	lsls	r3, r3, #22
   13a1a:	d4dd      	bmi.n	139d8 <_fflush_r+0xc>
   13a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13a1e:	f000 ffef 	bl	14a00 <__retarget_lock_release_recursive>
   13a22:	e7d9      	b.n	139d8 <_fflush_r+0xc>
   13a24:	4b05      	ldr	r3, [pc, #20]	; (13a3c <_fflush_r+0x70>)
   13a26:	429c      	cmp	r4, r3
   13a28:	d101      	bne.n	13a2e <_fflush_r+0x62>
   13a2a:	68ac      	ldr	r4, [r5, #8]
   13a2c:	e7df      	b.n	139ee <_fflush_r+0x22>
   13a2e:	4b04      	ldr	r3, [pc, #16]	; (13a40 <_fflush_r+0x74>)
   13a30:	429c      	cmp	r4, r3
   13a32:	bf08      	it	eq
   13a34:	68ec      	ldreq	r4, [r5, #12]
   13a36:	e7da      	b.n	139ee <_fflush_r+0x22>
   13a38:	0003516c 	.word	0x0003516c
   13a3c:	0003518c 	.word	0x0003518c
   13a40:	0003514c 	.word	0x0003514c

00013a44 <std>:
   13a44:	2300      	movs	r3, #0
   13a46:	b510      	push	{r4, lr}
   13a48:	4604      	mov	r4, r0
   13a4a:	6083      	str	r3, [r0, #8]
   13a4c:	8181      	strh	r1, [r0, #12]
   13a4e:	4619      	mov	r1, r3
   13a50:	6643      	str	r3, [r0, #100]	; 0x64
   13a52:	81c2      	strh	r2, [r0, #14]
   13a54:	2208      	movs	r2, #8
   13a56:	6183      	str	r3, [r0, #24]
   13a58:	e9c0 3300 	strd	r3, r3, [r0]
   13a5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   13a60:	305c      	adds	r0, #92	; 0x5c
   13a62:	f005 f84b 	bl	18afc <memset>
   13a66:	4b05      	ldr	r3, [pc, #20]	; (13a7c <std+0x38>)
   13a68:	6224      	str	r4, [r4, #32]
   13a6a:	6263      	str	r3, [r4, #36]	; 0x24
   13a6c:	4b04      	ldr	r3, [pc, #16]	; (13a80 <std+0x3c>)
   13a6e:	62a3      	str	r3, [r4, #40]	; 0x28
   13a70:	4b04      	ldr	r3, [pc, #16]	; (13a84 <std+0x40>)
   13a72:	62e3      	str	r3, [r4, #44]	; 0x2c
   13a74:	4b04      	ldr	r3, [pc, #16]	; (13a88 <std+0x44>)
   13a76:	6323      	str	r3, [r4, #48]	; 0x30
   13a78:	bd10      	pop	{r4, pc}
   13a7a:	bf00      	nop
   13a7c:	000195ef 	.word	0x000195ef
   13a80:	00019611 	.word	0x00019611
   13a84:	00019649 	.word	0x00019649
   13a88:	0001966d 	.word	0x0001966d

00013a8c <_cleanup_r>:
   13a8c:	4901      	ldr	r1, [pc, #4]	; (13a94 <_cleanup_r+0x8>)
   13a8e:	f005 ba9b 	b.w	18fc8 <_fwalk_reent>
   13a92:	bf00      	nop
   13a94:	000139cd 	.word	0x000139cd

00013a98 <__sfp_lock_acquire>:
   13a98:	4801      	ldr	r0, [pc, #4]	; (13aa0 <__sfp_lock_acquire+0x8>)
   13a9a:	f000 bfa9 	b.w	149f0 <__retarget_lock_acquire_recursive>
   13a9e:	bf00      	nop
   13aa0:	200002c8 	.word	0x200002c8

00013aa4 <__sfp_lock_release>:
   13aa4:	4801      	ldr	r0, [pc, #4]	; (13aac <__sfp_lock_release+0x8>)
   13aa6:	f000 bfab 	b.w	14a00 <__retarget_lock_release_recursive>
   13aaa:	bf00      	nop
   13aac:	200002c8 	.word	0x200002c8

00013ab0 <__sinit_lock_acquire>:
   13ab0:	4801      	ldr	r0, [pc, #4]	; (13ab8 <__sinit_lock_acquire+0x8>)
   13ab2:	f000 bf9d 	b.w	149f0 <__retarget_lock_acquire_recursive>
   13ab6:	bf00      	nop
   13ab8:	200002dc 	.word	0x200002dc

00013abc <__sinit_lock_release>:
   13abc:	4801      	ldr	r0, [pc, #4]	; (13ac4 <__sinit_lock_release+0x8>)
   13abe:	f000 bf9f 	b.w	14a00 <__retarget_lock_release_recursive>
   13ac2:	bf00      	nop
   13ac4:	200002dc 	.word	0x200002dc

00013ac8 <__sinit>:
   13ac8:	b510      	push	{r4, lr}
   13aca:	4604      	mov	r4, r0
   13acc:	f7ff fff0 	bl	13ab0 <__sinit_lock_acquire>
   13ad0:	69a3      	ldr	r3, [r4, #24]
   13ad2:	b11b      	cbz	r3, 13adc <__sinit+0x14>
   13ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ad8:	f7ff bff0 	b.w	13abc <__sinit_lock_release>
   13adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   13ae0:	6523      	str	r3, [r4, #80]	; 0x50
   13ae2:	4620      	mov	r0, r4
   13ae4:	4b12      	ldr	r3, [pc, #72]	; (13b30 <__sinit+0x68>)
   13ae6:	4a13      	ldr	r2, [pc, #76]	; (13b34 <__sinit+0x6c>)
   13ae8:	681b      	ldr	r3, [r3, #0]
   13aea:	62a2      	str	r2, [r4, #40]	; 0x28
   13aec:	42a3      	cmp	r3, r4
   13aee:	bf04      	itt	eq
   13af0:	2301      	moveq	r3, #1
   13af2:	61a3      	streq	r3, [r4, #24]
   13af4:	f000 f820 	bl	13b38 <__sfp>
   13af8:	6060      	str	r0, [r4, #4]
   13afa:	4620      	mov	r0, r4
   13afc:	f000 f81c 	bl	13b38 <__sfp>
   13b00:	60a0      	str	r0, [r4, #8]
   13b02:	4620      	mov	r0, r4
   13b04:	f000 f818 	bl	13b38 <__sfp>
   13b08:	2200      	movs	r2, #0
   13b0a:	2104      	movs	r1, #4
   13b0c:	60e0      	str	r0, [r4, #12]
   13b0e:	6860      	ldr	r0, [r4, #4]
   13b10:	f7ff ff98 	bl	13a44 <std>
   13b14:	2201      	movs	r2, #1
   13b16:	2109      	movs	r1, #9
   13b18:	68a0      	ldr	r0, [r4, #8]
   13b1a:	f7ff ff93 	bl	13a44 <std>
   13b1e:	2202      	movs	r2, #2
   13b20:	2112      	movs	r1, #18
   13b22:	68e0      	ldr	r0, [r4, #12]
   13b24:	f7ff ff8e 	bl	13a44 <std>
   13b28:	2301      	movs	r3, #1
   13b2a:	61a3      	str	r3, [r4, #24]
   13b2c:	e7d2      	b.n	13ad4 <__sinit+0xc>
   13b2e:	bf00      	nop
   13b30:	00035148 	.word	0x00035148
   13b34:	00013a8d 	.word	0x00013a8d

00013b38 <__sfp>:
   13b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b3a:	4607      	mov	r7, r0
   13b3c:	f7ff ffac 	bl	13a98 <__sfp_lock_acquire>
   13b40:	4b1e      	ldr	r3, [pc, #120]	; (13bbc <__sfp+0x84>)
   13b42:	681e      	ldr	r6, [r3, #0]
   13b44:	69b3      	ldr	r3, [r6, #24]
   13b46:	b913      	cbnz	r3, 13b4e <__sfp+0x16>
   13b48:	4630      	mov	r0, r6
   13b4a:	f7ff ffbd 	bl	13ac8 <__sinit>
   13b4e:	3648      	adds	r6, #72	; 0x48
   13b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   13b54:	3b01      	subs	r3, #1
   13b56:	d503      	bpl.n	13b60 <__sfp+0x28>
   13b58:	6833      	ldr	r3, [r6, #0]
   13b5a:	b30b      	cbz	r3, 13ba0 <__sfp+0x68>
   13b5c:	6836      	ldr	r6, [r6, #0]
   13b5e:	e7f7      	b.n	13b50 <__sfp+0x18>
   13b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   13b64:	b9d5      	cbnz	r5, 13b9c <__sfp+0x64>
   13b66:	4b16      	ldr	r3, [pc, #88]	; (13bc0 <__sfp+0x88>)
   13b68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   13b6c:	6665      	str	r5, [r4, #100]	; 0x64
   13b6e:	60e3      	str	r3, [r4, #12]
   13b70:	f000 ff35 	bl	149de <__retarget_lock_init_recursive>
   13b74:	f7ff ff96 	bl	13aa4 <__sfp_lock_release>
   13b78:	2208      	movs	r2, #8
   13b7a:	4629      	mov	r1, r5
   13b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13b80:	6025      	str	r5, [r4, #0]
   13b82:	61a5      	str	r5, [r4, #24]
   13b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
   13b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13b8c:	f004 ffb6 	bl	18afc <memset>
   13b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   13b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13b98:	4620      	mov	r0, r4
   13b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b9c:	3468      	adds	r4, #104	; 0x68
   13b9e:	e7d9      	b.n	13b54 <__sfp+0x1c>
   13ba0:	2104      	movs	r1, #4
   13ba2:	4638      	mov	r0, r7
   13ba4:	f005 f9fa 	bl	18f9c <__sfmoreglue>
   13ba8:	4604      	mov	r4, r0
   13baa:	6030      	str	r0, [r6, #0]
   13bac:	2800      	cmp	r0, #0
   13bae:	d1d5      	bne.n	13b5c <__sfp+0x24>
   13bb0:	f7ff ff78 	bl	13aa4 <__sfp_lock_release>
   13bb4:	230c      	movs	r3, #12
   13bb6:	603b      	str	r3, [r7, #0]
   13bb8:	e7ee      	b.n	13b98 <__sfp+0x60>
   13bba:	bf00      	nop
   13bbc:	00035148 	.word	0x00035148
   13bc0:	ffff0001 	.word	0xffff0001

00013bc4 <_localeconv_r>:
   13bc4:	4800      	ldr	r0, [pc, #0]	; (13bc8 <_localeconv_r+0x4>)
   13bc6:	4770      	bx	lr
   13bc8:	20000220 	.word	0x20000220

00013bcc <__smakebuf_r>:
   13bcc:	898b      	ldrh	r3, [r1, #12]
   13bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13bd0:	079d      	lsls	r5, r3, #30
   13bd2:	4606      	mov	r6, r0
   13bd4:	460c      	mov	r4, r1
   13bd6:	d507      	bpl.n	13be8 <__smakebuf_r+0x1c>
   13bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
   13bdc:	6023      	str	r3, [r4, #0]
   13bde:	6123      	str	r3, [r4, #16]
   13be0:	2301      	movs	r3, #1
   13be2:	6163      	str	r3, [r4, #20]
   13be4:	b002      	add	sp, #8
   13be6:	bd70      	pop	{r4, r5, r6, pc}
   13be8:	ab01      	add	r3, sp, #4
   13bea:	466a      	mov	r2, sp
   13bec:	f005 fa0b 	bl	19006 <__swhatbuf_r>
   13bf0:	9900      	ldr	r1, [sp, #0]
   13bf2:	4605      	mov	r5, r0
   13bf4:	4630      	mov	r0, r6
   13bf6:	f7fe ffdf 	bl	12bb8 <_malloc_r>
   13bfa:	b948      	cbnz	r0, 13c10 <__smakebuf_r+0x44>
   13bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c00:	059a      	lsls	r2, r3, #22
   13c02:	d4ef      	bmi.n	13be4 <__smakebuf_r+0x18>
   13c04:	f023 0303 	bic.w	r3, r3, #3
   13c08:	f043 0302 	orr.w	r3, r3, #2
   13c0c:	81a3      	strh	r3, [r4, #12]
   13c0e:	e7e3      	b.n	13bd8 <__smakebuf_r+0xc>
   13c10:	4b0d      	ldr	r3, [pc, #52]	; (13c48 <__smakebuf_r+0x7c>)
   13c12:	62b3      	str	r3, [r6, #40]	; 0x28
   13c14:	89a3      	ldrh	r3, [r4, #12]
   13c16:	6020      	str	r0, [r4, #0]
   13c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13c1c:	6120      	str	r0, [r4, #16]
   13c1e:	81a3      	strh	r3, [r4, #12]
   13c20:	9b00      	ldr	r3, [sp, #0]
   13c22:	6163      	str	r3, [r4, #20]
   13c24:	9b01      	ldr	r3, [sp, #4]
   13c26:	b15b      	cbz	r3, 13c40 <__smakebuf_r+0x74>
   13c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13c2c:	4630      	mov	r0, r6
   13c2e:	f000 f89b 	bl	13d68 <_isatty_r>
   13c32:	b128      	cbz	r0, 13c40 <__smakebuf_r+0x74>
   13c34:	89a3      	ldrh	r3, [r4, #12]
   13c36:	f023 0303 	bic.w	r3, r3, #3
   13c3a:	f043 0301 	orr.w	r3, r3, #1
   13c3e:	81a3      	strh	r3, [r4, #12]
   13c40:	89a0      	ldrh	r0, [r4, #12]
   13c42:	4305      	orrs	r5, r0
   13c44:	81a5      	strh	r5, [r4, #12]
   13c46:	e7cd      	b.n	13be4 <__smakebuf_r+0x18>
   13c48:	00013a8d 	.word	0x00013a8d

00013c4c <__malloc_lock>:
   13c4c:	4801      	ldr	r0, [pc, #4]	; (13c54 <__malloc_lock+0x8>)
   13c4e:	f000 becf 	b.w	149f0 <__retarget_lock_acquire_recursive>
   13c52:	bf00      	nop
   13c54:	200002b4 	.word	0x200002b4

00013c58 <__malloc_unlock>:
   13c58:	4801      	ldr	r0, [pc, #4]	; (13c60 <__malloc_unlock+0x8>)
   13c5a:	f000 bed1 	b.w	14a00 <__retarget_lock_release_recursive>
   13c5e:	bf00      	nop
   13c60:	200002b4 	.word	0x200002b4

00013c64 <__pow5mult>:
   13c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c68:	4615      	mov	r5, r2
   13c6a:	f012 0203 	ands.w	r2, r2, #3
   13c6e:	4606      	mov	r6, r0
   13c70:	460f      	mov	r7, r1
   13c72:	d007      	beq.n	13c84 <__pow5mult+0x20>
   13c74:	3a01      	subs	r2, #1
   13c76:	4c21      	ldr	r4, [pc, #132]	; (13cfc <__pow5mult+0x98>)
   13c78:	2300      	movs	r3, #0
   13c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   13c7e:	f005 fa31 	bl	190e4 <__multadd>
   13c82:	4607      	mov	r7, r0
   13c84:	10ad      	asrs	r5, r5, #2
   13c86:	d035      	beq.n	13cf4 <__pow5mult+0x90>
   13c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
   13c8a:	b93c      	cbnz	r4, 13c9c <__pow5mult+0x38>
   13c8c:	2010      	movs	r0, #16
   13c8e:	f7fe ff35 	bl	12afc <malloc>
   13c92:	6270      	str	r0, [r6, #36]	; 0x24
   13c94:	6004      	str	r4, [r0, #0]
   13c96:	60c4      	str	r4, [r0, #12]
   13c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   13c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   13ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   13ca4:	b94c      	cbnz	r4, 13cba <__pow5mult+0x56>
   13ca6:	f240 2171 	movw	r1, #625	; 0x271
   13caa:	4630      	mov	r0, r6
   13cac:	f005 faa7 	bl	191fe <__i2b>
   13cb0:	2300      	movs	r3, #0
   13cb2:	4604      	mov	r4, r0
   13cb4:	f8c8 0008 	str.w	r0, [r8, #8]
   13cb8:	6003      	str	r3, [r0, #0]
   13cba:	f04f 0900 	mov.w	r9, #0
   13cbe:	07eb      	lsls	r3, r5, #31
   13cc0:	d50a      	bpl.n	13cd8 <__pow5mult+0x74>
   13cc2:	4639      	mov	r1, r7
   13cc4:	4622      	mov	r2, r4
   13cc6:	4630      	mov	r0, r6
   13cc8:	f005 faa2 	bl	19210 <__multiply>
   13ccc:	4680      	mov	r8, r0
   13cce:	4639      	mov	r1, r7
   13cd0:	4630      	mov	r0, r6
   13cd2:	4647      	mov	r7, r8
   13cd4:	f005 f9ef 	bl	190b6 <_Bfree>
   13cd8:	106d      	asrs	r5, r5, #1
   13cda:	d00b      	beq.n	13cf4 <__pow5mult+0x90>
   13cdc:	6820      	ldr	r0, [r4, #0]
   13cde:	b938      	cbnz	r0, 13cf0 <__pow5mult+0x8c>
   13ce0:	4622      	mov	r2, r4
   13ce2:	4621      	mov	r1, r4
   13ce4:	4630      	mov	r0, r6
   13ce6:	f005 fa93 	bl	19210 <__multiply>
   13cea:	6020      	str	r0, [r4, #0]
   13cec:	f8c0 9000 	str.w	r9, [r0]
   13cf0:	4604      	mov	r4, r0
   13cf2:	e7e4      	b.n	13cbe <__pow5mult+0x5a>
   13cf4:	4638      	mov	r0, r7
   13cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13cfa:	bf00      	nop
   13cfc:	000351ac 	.word	0x000351ac

00013d00 <_write_r>:
   13d00:	b538      	push	{r3, r4, r5, lr}
   13d02:	4604      	mov	r4, r0
   13d04:	4d06      	ldr	r5, [pc, #24]	; (13d20 <_write_r+0x20>)
   13d06:	4608      	mov	r0, r1
   13d08:	4611      	mov	r1, r2
   13d0a:	2200      	movs	r2, #0
   13d0c:	602a      	str	r2, [r5, #0]
   13d0e:	461a      	mov	r2, r3
   13d10:	f000 fe4c 	bl	149ac <_write>
   13d14:	1c43      	adds	r3, r0, #1
   13d16:	d102      	bne.n	13d1e <_write_r+0x1e>
   13d18:	682b      	ldr	r3, [r5, #0]
   13d1a:	b103      	cbz	r3, 13d1e <_write_r+0x1e>
   13d1c:	6023      	str	r3, [r4, #0]
   13d1e:	bd38      	pop	{r3, r4, r5, pc}
   13d20:	20015c68 	.word	0x20015c68

00013d24 <_close_r>:
   13d24:	b538      	push	{r3, r4, r5, lr}
   13d26:	2300      	movs	r3, #0
   13d28:	4d05      	ldr	r5, [pc, #20]	; (13d40 <_close_r+0x1c>)
   13d2a:	4604      	mov	r4, r0
   13d2c:	4608      	mov	r0, r1
   13d2e:	602b      	str	r3, [r5, #0]
   13d30:	f000 fe42 	bl	149b8 <_close>
   13d34:	1c43      	adds	r3, r0, #1
   13d36:	d102      	bne.n	13d3e <_close_r+0x1a>
   13d38:	682b      	ldr	r3, [r5, #0]
   13d3a:	b103      	cbz	r3, 13d3e <_close_r+0x1a>
   13d3c:	6023      	str	r3, [r4, #0]
   13d3e:	bd38      	pop	{r3, r4, r5, pc}
   13d40:	20015c68 	.word	0x20015c68

00013d44 <_fstat_r>:
   13d44:	b538      	push	{r3, r4, r5, lr}
   13d46:	2300      	movs	r3, #0
   13d48:	4d06      	ldr	r5, [pc, #24]	; (13d64 <_fstat_r+0x20>)
   13d4a:	4604      	mov	r4, r0
   13d4c:	4608      	mov	r0, r1
   13d4e:	4611      	mov	r1, r2
   13d50:	602b      	str	r3, [r5, #0]
   13d52:	f000 fe3f 	bl	149d4 <_fstat>
   13d56:	1c43      	adds	r3, r0, #1
   13d58:	d102      	bne.n	13d60 <_fstat_r+0x1c>
   13d5a:	682b      	ldr	r3, [r5, #0]
   13d5c:	b103      	cbz	r3, 13d60 <_fstat_r+0x1c>
   13d5e:	6023      	str	r3, [r4, #0]
   13d60:	bd38      	pop	{r3, r4, r5, pc}
   13d62:	bf00      	nop
   13d64:	20015c68 	.word	0x20015c68

00013d68 <_isatty_r>:
   13d68:	b538      	push	{r3, r4, r5, lr}
   13d6a:	2300      	movs	r3, #0
   13d6c:	4d05      	ldr	r5, [pc, #20]	; (13d84 <_isatty_r+0x1c>)
   13d6e:	4604      	mov	r4, r0
   13d70:	4608      	mov	r0, r1
   13d72:	602b      	str	r3, [r5, #0]
   13d74:	f000 fe25 	bl	149c2 <_isatty>
   13d78:	1c43      	adds	r3, r0, #1
   13d7a:	d102      	bne.n	13d82 <_isatty_r+0x1a>
   13d7c:	682b      	ldr	r3, [r5, #0]
   13d7e:	b103      	cbz	r3, 13d82 <_isatty_r+0x1a>
   13d80:	6023      	str	r3, [r4, #0]
   13d82:	bd38      	pop	{r3, r4, r5, pc}
   13d84:	20015c68 	.word	0x20015c68

00013d88 <_lseek_r>:
   13d88:	b538      	push	{r3, r4, r5, lr}
   13d8a:	4604      	mov	r4, r0
   13d8c:	4d06      	ldr	r5, [pc, #24]	; (13da8 <_lseek_r+0x20>)
   13d8e:	4608      	mov	r0, r1
   13d90:	4611      	mov	r1, r2
   13d92:	2200      	movs	r2, #0
   13d94:	602a      	str	r2, [r5, #0]
   13d96:	461a      	mov	r2, r3
   13d98:	f000 fe11 	bl	149be <_lseek>
   13d9c:	1c43      	adds	r3, r0, #1
   13d9e:	d102      	bne.n	13da6 <_lseek_r+0x1e>
   13da0:	682b      	ldr	r3, [r5, #0]
   13da2:	b103      	cbz	r3, 13da6 <_lseek_r+0x1e>
   13da4:	6023      	str	r3, [r4, #0]
   13da6:	bd38      	pop	{r3, r4, r5, pc}
   13da8:	20015c68 	.word	0x20015c68

00013dac <_read_r>:
   13dac:	b538      	push	{r3, r4, r5, lr}
   13dae:	4604      	mov	r4, r0
   13db0:	4d06      	ldr	r5, [pc, #24]	; (13dcc <_read_r+0x20>)
   13db2:	4608      	mov	r0, r1
   13db4:	4611      	mov	r1, r2
   13db6:	2200      	movs	r2, #0
   13db8:	602a      	str	r2, [r5, #0]
   13dba:	461a      	mov	r2, r3
   13dbc:	f000 fdf0 	bl	149a0 <_read>
   13dc0:	1c43      	adds	r3, r0, #1
   13dc2:	d102      	bne.n	13dca <_read_r+0x1e>
   13dc4:	682b      	ldr	r3, [r5, #0]
   13dc6:	b103      	cbz	r3, 13dca <_read_r+0x1e>
   13dc8:	6023      	str	r3, [r4, #0]
   13dca:	bd38      	pop	{r3, r4, r5, pc}
   13dcc:	20015c68 	.word	0x20015c68

00013dd0 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   13dd0:	4601      	mov	r1, r0
  long ret = 0;
   13dd2:	2000      	movs	r0, #0
   13dd4:	e007      	b.n	13de6 <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   13dd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   13dda:	b2d2      	uxtb	r2, r2
   13ddc:	2a05      	cmp	r2, #5
   13dde:	d80e      	bhi.n	13dfe <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   13de0:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   13de2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   13de6:	780b      	ldrb	r3, [r1, #0]
   13de8:	b193      	cbz	r3, 13e10 <_Z9ee_hexdecPc+0x40>
   13dea:	2800      	cmp	r0, #0
   13dec:	db10      	blt.n	13e10 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   13dee:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   13df0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13df4:	b2d2      	uxtb	r2, r2
   13df6:	2a09      	cmp	r2, #9
   13df8:	d8ed      	bhi.n	13dd6 <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   13dfa:	3b30      	subs	r3, #48	; 0x30
   13dfc:	e7f1      	b.n	13de2 <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   13dfe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   13e02:	b2d2      	uxtb	r2, r2
   13e04:	2a05      	cmp	r2, #5
   13e06:	d801      	bhi.n	13e0c <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   13e08:	3b37      	subs	r3, #55	; 0x37
   13e0a:	e7ea      	b.n	13de2 <_Z9ee_hexdecPc+0x12>
      return -1;
   13e0c:	f04f 30ff 	mov.w	r0, #4294967295
}
   13e10:	4770      	bx	lr

00013e12 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   13e12:	2200      	movs	r2, #0
   13e14:	6002      	str	r2, [r0, #0]
   13e16:	6042      	str	r2, [r0, #4]
   13e18:	6082      	str	r2, [r0, #8]
  }
   13e1a:	4770      	bx	lr

00013e1c <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   13e1c:	2001      	movs	r0, #1
   13e1e:	4770      	bx	lr

00013e20 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   13e20:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   13e22:	6803      	ldr	r3, [r0, #0]
   13e24:	699b      	ldr	r3, [r3, #24]
   13e26:	4798      	blx	r3
  }
   13e28:	bd08      	pop	{r3, pc}

00013e2a <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   13e2a:	b508      	push	{r3, lr}
    return FindOp(op);
   13e2c:	6803      	ldr	r3, [r0, #0]
   13e2e:	69db      	ldr	r3, [r3, #28]
   13e30:	4798      	blx	r3
  }
   13e32:	bd08      	pop	{r3, pc}

00013e34 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13e34:	2920      	cmp	r1, #32
   13e36:	d00e      	beq.n	13e56 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   13e38:	b410      	push	{r4}
   13e3a:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13e3c:	2300      	movs	r3, #0
   13e3e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   13e42:	429a      	cmp	r2, r3
   13e44:	d909      	bls.n	13e5a <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   13e46:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   13e4a:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   13e4c:	6992      	ldr	r2, [r2, #24]
   13e4e:	428a      	cmp	r2, r1
   13e50:	d004      	beq.n	13e5c <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13e52:	3301      	adds	r3, #1
   13e54:	e7f3      	b.n	13e3e <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   13e56:	2000      	movs	r0, #0
  }
   13e58:	4770      	bx	lr
    return nullptr;
   13e5a:	2000      	movs	r0, #0
  }
   13e5c:	bc10      	pop	{r4}
   13e5e:	4770      	bx	lr

00013e60 <_ZN6tflite22MicroMutableOpResolverILj7EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   13e60:	4770      	bx	lr

00013e62 <_ZN6tflite16MicroModelRunnerIaaLi7EED1Ev>:
class MicroModelRunner {
   13e62:	b510      	push	{r4, lr}
   13e64:	4604      	mov	r4, r0
   13e66:	300c      	adds	r0, #12
   13e68:	f001 fc84 	bl	15774 <_ZN6tflite16MicroInterpreterD1Ev>
   13e6c:	4620      	mov	r0, r4
   13e6e:	bd10      	pop	{r4, pc}

00013e70 <_ZN6tflite22MicroMutableOpResolverILj7EED0Ev>:
   13e70:	b510      	push	{r4, lr}
   13e72:	4604      	mov	r4, r0
   13e74:	f004 fdf7 	bl	18a66 <_ZdlPv>
   13e78:	4620      	mov	r0, r4
   13e7a:	bd10      	pop	{r4, pc}

00013e7c <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   13e7c:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13e7e:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   13e82:	2c07      	cmp	r4, #7
   13e84:	d801      	bhi.n	13e8a <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13e86:	2300      	movs	r3, #0
   13e88:	e002      	b.n	13e90 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   13e8a:	f004 fe03 	bl	18a94 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   13e8e:	3301      	adds	r3, #1
   13e90:	429c      	cmp	r4, r3
   13e92:	d908      	bls.n	13ea6 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   13e94:	18c2      	adds	r2, r0, r3
   13e96:	f892 20e8 	ldrb.w	r2, [r2, #232]	; 0xe8
   13e9a:	428a      	cmp	r2, r1
   13e9c:	d1f7      	bne.n	13e8e <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   13e9e:	333c      	adds	r3, #60	; 0x3c
   13ea0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   13ea4:	e000      	b.n	13ea8 <_ZNK6tflite22MicroMutableOpResolverILj7EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   13ea6:	2000      	movs	r0, #0
  }
   13ea8:	bd10      	pop	{r4, pc}

00013eaa <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   13eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13eac:	4605      	mov	r5, r0
   13eae:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   13eb0:	2400      	movs	r4, #0
   13eb2:	e000      	b.n	13eb6 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xc>
   13eb4:	3401      	adds	r4, #1
   13eb6:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   13eba:	42a3      	cmp	r3, r4
   13ebc:	d90e      	bls.n	13edc <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   13ebe:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13ec2:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13ec4:	699b      	ldr	r3, [r3, #24]
   13ec6:	2b20      	cmp	r3, #32
   13ec8:	d1f4      	bne.n	13eb4 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   13eca:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   13ece:	4639      	mov	r1, r7
   13ed0:	69d8      	ldr	r0, [r3, #28]
   13ed2:	f7ed faf5 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   13ed6:	2800      	cmp	r0, #0
   13ed8:	d1ec      	bne.n	13eb4 <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0xa>
   13eda:	e000      	b.n	13ede <_ZNK6tflite22MicroMutableOpResolverILj7EE6FindOpEPKc+0x34>
    return nullptr;
   13edc:	2600      	movs	r6, #0
  }
   13ede:	4630      	mov	r0, r6
   13ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013ee2 <_Z6th_prev>:
void th_pre() {}
   13ee2:	4770      	bx	lr

00013ee4 <_Z7th_postv>:
void th_post() {}
   13ee4:	4770      	bx	lr

00013ee6 <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   13ee6:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   13ee8:	f7ee fd48 	bl	297c <_Z33ee_serial_command_parser_callbackPc>
}
   13eec:	bd08      	pop	{r3, pc}

00013eee <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   13eee:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   13ef0:	f004 ff90 	bl	18e14 <strnlen>
}
   13ef4:	bd08      	pop	{r3, pc}

00013ef6 <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   13ef6:	b508      	push	{r3, lr}
   13ef8:	f7ff fc0e 	bl	13718 <viprintf>
   13efc:	bd08      	pop	{r3, pc}

00013efe <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   13efe:	b40f      	push	{r0, r1, r2, r3}
   13f00:	b500      	push	{lr}
   13f02:	b083      	sub	sp, #12
   13f04:	a904      	add	r1, sp, #16
   13f06:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   13f0a:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   13f0c:	f7ff fff3 	bl	13ef6 <_Z10th_vprintfPKcSt9__va_list>
}
   13f10:	b003      	add	sp, #12
   13f12:	f85d eb04 	ldr.w	lr, [sp], #4
   13f16:	b004      	add	sp, #16
   13f18:	4770      	bx	lr

00013f1a <_Z24th_serialport_initializev>:
}
   13f1a:	4770      	bx	lr

00013f1c <main>:





int main(int argc, char *argv[]) {
   13f1c:	b508      	push	{r3, lr}
console_init();
   13f1e:	f7ef ff85 	bl	3e2c <console_init>



//  Enable 128 MHz clock:
nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
   13f22:	2100      	movs	r1, #0
   13f24:	2001      	movs	r0, #1
   13f26:	f7f2 f975 	bl	6214 <nrfx_clock_divider_set>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13f2a:	2001      	movs	r0, #1
   13f2c:	f7f2 f83c 	bl	5fa8 <nrfx_clock_start>
}
   13f30:	e003      	b.n	13f3a <main+0x1e>
                return true;
   13f32:	2301      	movs	r3, #1
   13f34:	e00d      	b.n	13f52 <main+0x36>

NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running(void)
{
    nrf_clock_hfclk_t clk_src;
    bool ret = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src);
    return (ret && (clk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY));
   13f36:	2300      	movs	r3, #0


nrfx_clock_hfclk_start();
while (!nrfx_clock_hfclk_is_running()) { }
   13f38:	b98b      	cbnz	r3, 13f5e <main+0x42>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13f3a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13f3e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   13f42:	f002 0201 	and.w	r2, r2, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13f46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   13f4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13f4e:	d1f0      	bne.n	13f32 <main+0x16>
    return false;
   13f50:	2300      	movs	r3, #0
   13f52:	2b00      	cmp	r3, #0
   13f54:	d0ef      	beq.n	13f36 <main+0x1a>
   13f56:	2a00      	cmp	r2, #0
   13f58:	d1ee      	bne.n	13f38 <main+0x1c>
   13f5a:	2300      	movs	r3, #0
   13f5c:	e7ec      	b.n	13f38 <main+0x1c>



ee_benchmark_initialize();
   13f5e:	f7ee fb4f 	bl	2600 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
   13f62:	f7ef ff63 	bl	3e2c <console_init>


    while (1) {
    int c;

    c = console_getchar();
   13f66:	f7ef ff4f 	bl	3e08 <console_getchar>
    if (c < 0) {
   13f6a:	2800      	cmp	r0, #0
   13f6c:	dbfb      	blt.n	13f66 <main+0x4a>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   13f6e:	b2c0      	uxtb	r0, r0
   13f70:	f7ee fb26 	bl	25c0 <_Z18ee_serial_callbackc>
   13f74:	e7f7      	b.n	13f66 <main+0x4a>

00013f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   13f76:	4770      	bx	lr

00013f78 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   13f78:	b510      	push	{r4, lr}
   13f7a:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   13f7c:	6800      	ldr	r0, [r0, #0]
   13f7e:	f7ff fffa 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   13f82:	4420      	add	r0, r4
   13f84:	bd10      	pop	{r4, pc}

00013f86 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   13f86:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   13f88:	f7ff fff6 	bl	13f78 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   13f8c:	bd08      	pop	{r3, pc}

00013f8e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   13f8e:	4602      	mov	r2, r0
   13f90:	b158      	cbz	r0, 13faa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13f92:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13f94:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   13f98:	2b01      	cmp	r3, #1
   13f9a:	d003      	beq.n	13fa4 <sys_notify_validate+0x16>
   13f9c:	2b03      	cmp	r3, #3
   13f9e:	d107      	bne.n	13fb0 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   13fa0:	6803      	ldr	r3, [r0, #0]
   13fa2:	b143      	cbz	r3, 13fb6 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   13fa4:	2000      	movs	r0, #0
   13fa6:	6090      	str	r0, [r2, #8]
   13fa8:	4770      	bx	lr
		return -EINVAL;
   13faa:	f06f 0015 	mvn.w	r0, #21
   13fae:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   13fb0:	f06f 0015 	mvn.w	r0, #21
   13fb4:	4770      	bx	lr
			rv = -EINVAL;
   13fb6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   13fba:	4770      	bx	lr

00013fbc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   13fbc:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13fbe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   13fc0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   13fc4:	6081      	str	r1, [r0, #8]
	switch (method) {
   13fc6:	2a03      	cmp	r2, #3
   13fc8:	d103      	bne.n	13fd2 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   13fca:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   13fcc:	2200      	movs	r2, #0
   13fce:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   13fd0:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   13fd2:	2000      	movs	r0, #0
   13fd4:	e7fa      	b.n	13fcc <sys_notify_finalize+0x10>

00013fd6 <arch_printk_char_out>:
}
   13fd6:	2000      	movs	r0, #0
   13fd8:	4770      	bx	lr

00013fda <str_out>:
{
   13fda:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   13fdc:	680c      	ldr	r4, [r1, #0]
   13fde:	b154      	cbz	r4, 13ff6 <str_out+0x1c>
   13fe0:	688a      	ldr	r2, [r1, #8]
   13fe2:	684b      	ldr	r3, [r1, #4]
   13fe4:	429a      	cmp	r2, r3
   13fe6:	da06      	bge.n	13ff6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   13fe8:	3b01      	subs	r3, #1
   13fea:	429a      	cmp	r2, r3
   13fec:	d008      	beq.n	14000 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   13fee:	1c53      	adds	r3, r2, #1
   13ff0:	608b      	str	r3, [r1, #8]
   13ff2:	54a0      	strb	r0, [r4, r2]
   13ff4:	e002      	b.n	13ffc <str_out+0x22>
		ctx->count++;
   13ff6:	688b      	ldr	r3, [r1, #8]
   13ff8:	3301      	adds	r3, #1
   13ffa:	608b      	str	r3, [r1, #8]
}
   13ffc:	bc10      	pop	{r4}
   13ffe:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   14000:	1c53      	adds	r3, r2, #1
   14002:	608b      	str	r3, [r1, #8]
   14004:	2300      	movs	r3, #0
   14006:	54a3      	strb	r3, [r4, r2]
   14008:	e7f8      	b.n	13ffc <str_out+0x22>

0001400a <printk>:
{
   1400a:	b40f      	push	{r0, r1, r2, r3}
   1400c:	b500      	push	{lr}
   1400e:	b083      	sub	sp, #12
   14010:	a904      	add	r1, sp, #16
   14012:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   14016:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   14018:	f7ef f81e 	bl	3058 <vprintk>
}
   1401c:	b003      	add	sp, #12
   1401e:	f85d eb04 	ldr.w	lr, [sp], #4
   14022:	b004      	add	sp, #16
   14024:	4770      	bx	lr

00014026 <snprintk>:
{
   14026:	b40c      	push	{r2, r3}
   14028:	b500      	push	{lr}
   1402a:	b083      	sub	sp, #12
   1402c:	ab04      	add	r3, sp, #16
   1402e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   14032:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   14034:	f7ef f820 	bl	3078 <vsnprintk>
}
   14038:	b003      	add	sp, #12
   1403a:	f85d eb04 	ldr.w	lr, [sp], #4
   1403e:	b002      	add	sp, #8
   14040:	4770      	bx	lr

00014042 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   14042:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14046:	8b81      	ldrh	r1, [r0, #28]
   14048:	f021 0107 	bic.w	r1, r1, #7
   1404c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1404e:	8381      	strh	r1, [r0, #28]
}
   14050:	4770      	bx	lr

00014052 <notify_monitors>:
{
   14052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14056:	4606      	mov	r6, r0
   14058:	460f      	mov	r7, r1
   1405a:	4690      	mov	r8, r2
	return list->head;
   1405c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1405e:	b119      	cbz	r1, 14068 <notify_monitors+0x16>
   14060:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14062:	b131      	cbz	r1, 14072 <notify_monitors+0x20>
	return node->next;
   14064:	680c      	ldr	r4, [r1, #0]
   14066:	e004      	b.n	14072 <notify_monitors+0x20>
   14068:	460c      	mov	r4, r1
   1406a:	e002      	b.n	14072 <notify_monitors+0x20>
   1406c:	4623      	mov	r3, r4
   1406e:	4621      	mov	r1, r4
   14070:	461c      	mov	r4, r3
   14072:	b159      	cbz	r1, 1408c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   14074:	684d      	ldr	r5, [r1, #4]
   14076:	4643      	mov	r3, r8
   14078:	463a      	mov	r2, r7
   1407a:	4630      	mov	r0, r6
   1407c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1407e:	2c00      	cmp	r4, #0
   14080:	d0f4      	beq.n	1406c <notify_monitors+0x1a>
   14082:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   14084:	2c00      	cmp	r4, #0
   14086:	d0f2      	beq.n	1406e <notify_monitors+0x1c>
	return node->next;
   14088:	6823      	ldr	r3, [r4, #0]
   1408a:	e7f0      	b.n	1406e <notify_monitors+0x1c>
}
   1408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014090 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14090:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   14092:	f013 0307 	ands.w	r3, r3, #7
   14096:	d103      	bne.n	140a0 <process_recheck+0x10>
	return list->head;
   14098:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1409a:	b10a      	cbz	r2, 140a0 <process_recheck+0x10>
		evt = EVT_START;
   1409c:	2003      	movs	r0, #3
   1409e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   140a0:	2b02      	cmp	r3, #2
   140a2:	d003      	beq.n	140ac <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   140a4:	2b01      	cmp	r3, #1
   140a6:	d006      	beq.n	140b6 <process_recheck+0x26>
	int evt = EVT_NOP;
   140a8:	2000      	movs	r0, #0
   140aa:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   140ac:	8bc2      	ldrh	r2, [r0, #30]
   140ae:	2a00      	cmp	r2, #0
   140b0:	d1f8      	bne.n	140a4 <process_recheck+0x14>
		evt = EVT_STOP;
   140b2:	2004      	movs	r0, #4
   140b4:	4770      	bx	lr
   140b6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   140b8:	b10b      	cbz	r3, 140be <process_recheck+0x2e>
		evt = EVT_RESET;
   140ba:	2005      	movs	r0, #5
}
   140bc:	4770      	bx	lr
	int evt = EVT_NOP;
   140be:	2000      	movs	r0, #0
   140c0:	4770      	bx	lr

000140c2 <process_complete>:
{
   140c2:	b538      	push	{r3, r4, r5, lr}
   140c4:	4604      	mov	r4, r0
   140c6:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   140c8:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   140ca:	2a00      	cmp	r2, #0
   140cc:	db07      	blt.n	140de <process_complete+0x1c>
   140ce:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   140d2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   140d4:	2a01      	cmp	r2, #1
   140d6:	d90e      	bls.n	140f6 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   140d8:	2b04      	cmp	r3, #4
   140da:	d032      	beq.n	14142 <process_complete+0x80>
}
   140dc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   140de:	e9d0 0100 	ldrd	r0, r1, [r0]
   140e2:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   140e6:	2300      	movs	r3, #0
   140e8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   140ea:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   140ec:	2101      	movs	r1, #1
   140ee:	4620      	mov	r0, r4
   140f0:	f7ff ffa7 	bl	14042 <set_state>
   140f4:	e7f2      	b.n	140dc <process_complete+0x1a>
		*clients = mgr->clients;
   140f6:	e9d0 0100 	ldrd	r0, r1, [r0]
   140fa:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   140fe:	2200      	movs	r2, #0
   14100:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   14102:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   14104:	2b06      	cmp	r3, #6
   14106:	d117      	bne.n	14138 <process_complete+0x76>
	return list->head;
   14108:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1410a:	b13b      	cbz	r3, 1411c <process_complete+0x5a>
				mgr->refs += 1U;
   1410c:	8be2      	ldrh	r2, [r4, #30]
   1410e:	3201      	adds	r2, #1
   14110:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   14112:	2b00      	cmp	r3, #0
   14114:	d0f9      	beq.n	1410a <process_complete+0x48>
	return node->next;
   14116:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14118:	2b00      	cmp	r3, #0
   1411a:	d1f6      	bne.n	1410a <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1411c:	2102      	movs	r1, #2
   1411e:	4620      	mov	r0, r4
   14120:	f7ff ff8f 	bl	14042 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14124:	4620      	mov	r0, r4
   14126:	f7ff ffb3 	bl	14090 <process_recheck>
   1412a:	2800      	cmp	r0, #0
   1412c:	d0d6      	beq.n	140dc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1412e:	8ba3      	ldrh	r3, [r4, #28]
   14130:	f043 0320 	orr.w	r3, r3, #32
   14134:	83a3      	strh	r3, [r4, #28]
   14136:	e7d1      	b.n	140dc <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   14138:	2100      	movs	r1, #0
   1413a:	4620      	mov	r0, r4
   1413c:	f7ff ff81 	bl	14042 <set_state>
   14140:	e7f0      	b.n	14124 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   14142:	2100      	movs	r1, #0
   14144:	f7ff ff7d 	bl	14042 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14148:	4620      	mov	r0, r4
   1414a:	f7ff ffa1 	bl	14090 <process_recheck>
   1414e:	2800      	cmp	r0, #0
   14150:	d0c4      	beq.n	140dc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14152:	8ba3      	ldrh	r3, [r4, #28]
   14154:	f043 0320 	orr.w	r3, r3, #32
   14158:	83a3      	strh	r3, [r4, #28]
}
   1415a:	e7bf      	b.n	140dc <process_complete+0x1a>

0001415c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1415c:	b158      	cbz	r0, 14176 <validate_args+0x1a>
{
   1415e:	b510      	push	{r4, lr}
   14160:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   14162:	b159      	cbz	r1, 1417c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   14164:	1d08      	adds	r0, r1, #4
   14166:	f7ff ff12 	bl	13f8e <sys_notify_validate>
	if ((rv == 0)
   1416a:	b918      	cbnz	r0, 14174 <validate_args+0x18>
	    && ((cli->notify.flags
   1416c:	68a3      	ldr	r3, [r4, #8]
   1416e:	f033 0303 	bics.w	r3, r3, #3
   14172:	d106      	bne.n	14182 <validate_args+0x26>
}
   14174:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14176:	f06f 0015 	mvn.w	r0, #21
}
   1417a:	4770      	bx	lr
		return -EINVAL;
   1417c:	f06f 0015 	mvn.w	r0, #21
   14180:	e7f8      	b.n	14174 <validate_args+0x18>
		rv = -EINVAL;
   14182:	f06f 0015 	mvn.w	r0, #21
   14186:	e7f5      	b.n	14174 <validate_args+0x18>

00014188 <notify_one>:
{
   14188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1418c:	4607      	mov	r7, r0
   1418e:	460c      	mov	r4, r1
   14190:	4616      	mov	r6, r2
   14192:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14194:	4619      	mov	r1, r3
   14196:	1d20      	adds	r0, r4, #4
   14198:	f7ff ff10 	bl	13fbc <sys_notify_finalize>
	if (cb) {
   1419c:	b128      	cbz	r0, 141aa <notify_one+0x22>
   1419e:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   141a0:	462b      	mov	r3, r5
   141a2:	4632      	mov	r2, r6
   141a4:	4621      	mov	r1, r4
   141a6:	4638      	mov	r0, r7
   141a8:	47c0      	blx	r8
}
   141aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000141ae <notify_all>:
{
   141ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   141b2:	4681      	mov	r9, r0
   141b4:	460c      	mov	r4, r1
   141b6:	4690      	mov	r8, r2
   141b8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   141ba:	e005      	b.n	141c8 <notify_all+0x1a>
	list->tail = node;
   141bc:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   141be:	463b      	mov	r3, r7
   141c0:	4642      	mov	r2, r8
   141c2:	4648      	mov	r0, r9
   141c4:	f7ff ffe0 	bl	14188 <notify_one>
	return list->head;
   141c8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   141ca:	b129      	cbz	r1, 141d8 <notify_all+0x2a>
	return node->next;
   141cc:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   141ce:	6025      	str	r5, [r4, #0]
	return list->tail;
   141d0:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   141d2:	428e      	cmp	r6, r1
   141d4:	d1f3      	bne.n	141be <notify_all+0x10>
   141d6:	e7f1      	b.n	141bc <notify_all+0xe>
}
   141d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000141dc <transition_complete>:
{
   141dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   141de:	f04f 0420 	mov.w	r4, #32
   141e2:	f3ef 8211 	mrs	r2, BASEPRI
   141e6:	f384 8812 	msr	BASEPRI_MAX, r4
   141ea:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   141ee:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   141f0:	2101      	movs	r1, #1
   141f2:	f7ee ff57 	bl	30a4 <process_event>
}
   141f6:	bd10      	pop	{r4, pc}

000141f8 <onoff_manager_init>:
	if ((mgr == NULL)
   141f8:	b170      	cbz	r0, 14218 <onoff_manager_init+0x20>
{
   141fa:	b538      	push	{r3, r4, r5, lr}
   141fc:	460c      	mov	r4, r1
   141fe:	4605      	mov	r5, r0
	    || (transitions == NULL)
   14200:	b169      	cbz	r1, 1421e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   14202:	680b      	ldr	r3, [r1, #0]
   14204:	b173      	cbz	r3, 14224 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   14206:	684b      	ldr	r3, [r1, #4]
   14208:	b17b      	cbz	r3, 1422a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1420a:	2220      	movs	r2, #32
   1420c:	2100      	movs	r1, #0
   1420e:	f004 fc75 	bl	18afc <memset>
   14212:	612c      	str	r4, [r5, #16]
	return 0;
   14214:	2000      	movs	r0, #0
}
   14216:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14218:	f06f 0015 	mvn.w	r0, #21
}
   1421c:	4770      	bx	lr
		return -EINVAL;
   1421e:	f06f 0015 	mvn.w	r0, #21
   14222:	e7f8      	b.n	14216 <onoff_manager_init+0x1e>
   14224:	f06f 0015 	mvn.w	r0, #21
   14228:	e7f5      	b.n	14216 <onoff_manager_init+0x1e>
   1422a:	f06f 0015 	mvn.w	r0, #21
   1422e:	e7f2      	b.n	14216 <onoff_manager_init+0x1e>

00014230 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   14230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14232:	4604      	mov	r4, r0
   14234:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14236:	f7ff ff91 	bl	1415c <validate_args>

	if (rv < 0) {
   1423a:	1e06      	subs	r6, r0, #0
   1423c:	db37      	blt.n	142ae <onoff_request+0x7e>
   1423e:	f04f 0320 	mov.w	r3, #32
   14242:	f3ef 8211 	mrs	r2, BASEPRI
   14246:	f383 8812 	msr	BASEPRI_MAX, r3
   1424a:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1424e:	8ba5      	ldrh	r5, [r4, #28]
   14250:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14254:	8be3      	ldrh	r3, [r4, #30]
   14256:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1425a:	428b      	cmp	r3, r1
   1425c:	d02f      	beq.n	142be <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1425e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   14260:	2d02      	cmp	r5, #2
   14262:	d00c      	beq.n	1427e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   14264:	b18d      	cbz	r5, 1428a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   14266:	2d04      	cmp	r5, #4
   14268:	d00f      	beq.n	1428a <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1426a:	2d06      	cmp	r5, #6
   1426c:	d00d      	beq.n	1428a <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1426e:	2d05      	cmp	r5, #5
   14270:	d01f      	beq.n	142b2 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   14272:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   14276:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   14278:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1427a:	4608      	mov	r0, r1
   1427c:	e00a      	b.n	14294 <onoff_request+0x64>
		mgr->refs += 1U;
   1427e:	3301      	adds	r3, #1
   14280:	83e3      	strh	r3, [r4, #30]
		notify = true;
   14282:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   14284:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   14286:	4618      	mov	r0, r3
   14288:	e004      	b.n	14294 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1428a:	fab5 f385 	clz	r3, r5
   1428e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   14290:	2100      	movs	r1, #0
		add_client = true;
   14292:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   14294:	b128      	cbz	r0, 142a2 <onoff_request+0x72>
	parent->next = child;
   14296:	2000      	movs	r0, #0
   14298:	6038      	str	r0, [r7, #0]
	return list->tail;
   1429a:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1429c:	b1a8      	cbz	r0, 142ca <onoff_request+0x9a>
	parent->next = child;
   1429e:	6007      	str	r7, [r0, #0]
	list->tail = node;
   142a0:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   142a2:	b9ab      	cbnz	r3, 142d0 <onoff_request+0xa0>
	__asm__ volatile(
   142a4:	f382 8811 	msr	BASEPRI, r2
   142a8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   142ac:	b9a9      	cbnz	r1, 142da <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   142ae:	4630      	mov	r0, r6
   142b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   142b2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   142b6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   142b8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   142ba:	4608      	mov	r0, r1
   142bc:	e7ea      	b.n	14294 <onoff_request+0x64>
		rv = -EAGAIN;
   142be:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   142c2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   142c4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   142c6:	4608      	mov	r0, r1
   142c8:	e7e4      	b.n	14294 <onoff_request+0x64>
   142ca:	6067      	str	r7, [r4, #4]
	list->head = node;
   142cc:	6027      	str	r7, [r4, #0]
}
   142ce:	e7e8      	b.n	142a2 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   142d0:	2102      	movs	r1, #2
   142d2:	4620      	mov	r0, r4
   142d4:	f7ee fee6 	bl	30a4 <process_event>
   142d8:	e7e9      	b.n	142ae <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   142da:	2300      	movs	r3, #0
   142dc:	462a      	mov	r2, r5
   142de:	4639      	mov	r1, r7
   142e0:	4620      	mov	r0, r4
   142e2:	f7ff ff51 	bl	14188 <notify_one>
   142e6:	e7e2      	b.n	142ae <onoff_request+0x7e>

000142e8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   142e8:	b508      	push	{r3, lr}
   142ea:	4604      	mov	r4, r0
   142ec:	4608      	mov	r0, r1
   142ee:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   142f0:	461a      	mov	r2, r3
   142f2:	47a0      	blx	r4
	return z_impl_z_current_get();
   142f4:	f7fd fe68 	bl	11fc8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   142f8:	f7f0 fa4a 	bl	4790 <z_impl_k_thread_abort>

000142fc <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   142fc:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   142fe:	1d13      	adds	r3, r2, #4
   14300:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14304:	b9d3      	cbnz	r3, 1433c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   14306:	2301      	movs	r3, #1
   14308:	fa03 f402 	lsl.w	r4, r3, r2
   1430c:	68c3      	ldr	r3, [r0, #12]
   1430e:	4323      	orrs	r3, r4
   14310:	60c3      	str	r3, [r0, #12]
		b->next = c;
   14312:	3204      	adds	r2, #4
   14314:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   14318:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1431c:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   1431e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   14322:	d307      	bcc.n	14334 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   14324:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   14326:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   14328:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1432c:	d304      	bcc.n	14338 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1432e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   14330:	bc70      	pop	{r4, r5, r6}
   14332:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   14334:	8099      	strh	r1, [r3, #4]
   14336:	e7f6      	b.n	14326 <free_list_add_bidx+0x2a>
   14338:	80d9      	strh	r1, [r3, #6]
   1433a:	e7f9      	b.n	14330 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1433c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   14340:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   14342:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14346:	d318      	bcc.n	1437a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   14348:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1434a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1434e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   14352:	d314      	bcc.n	1437e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   14354:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   14356:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   14358:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1435c:	d311      	bcc.n	14382 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1435e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   14360:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   14364:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1436a:	d30c      	bcc.n	14386 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1436c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1436e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   14370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14374:	d309      	bcc.n	1438a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   14376:	60a1      	str	r1, [r4, #8]
   14378:	e7da      	b.n	14330 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1437a:	88a2      	ldrh	r2, [r4, #4]
   1437c:	e7e5      	b.n	1434a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1437e:	80aa      	strh	r2, [r5, #4]
   14380:	e7e9      	b.n	14356 <free_list_add_bidx+0x5a>
   14382:	80eb      	strh	r3, [r5, #6]
   14384:	e7ec      	b.n	14360 <free_list_add_bidx+0x64>
   14386:	80d1      	strh	r1, [r2, #6]
   14388:	e7f1      	b.n	1436e <free_list_add_bidx+0x72>
   1438a:	80a1      	strh	r1, [r4, #4]
   1438c:	e7d0      	b.n	14330 <free_list_add_bidx+0x34>

0001438e <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1438e:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   14390:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   14392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14396:	d307      	bcc.n	143a8 <free_list_add+0x1a>
	void *cmem = &buf[c];
   14398:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1439c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1439e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   143a0:	2a01      	cmp	r2, #1
   143a2:	d002      	beq.n	143aa <free_list_add+0x1c>
   143a4:	2200      	movs	r2, #0
   143a6:	e000      	b.n	143aa <free_list_add+0x1c>
   143a8:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   143aa:	b9a2      	cbnz	r2, 143d6 <free_list_add+0x48>
	void *cmem = &buf[c];
   143ac:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   143b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   143b4:	d310      	bcc.n	143d8 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   143b6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   143b8:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   143ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   143be:	d30d      	bcc.n	143dc <free_list_add+0x4e>
   143c0:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   143c2:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   143c4:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   143c8:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   143ca:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   143ce:	f1c2 021f 	rsb	r2, r2, #31
   143d2:	f7ff ff93 	bl	142fc <free_list_add_bidx>
	}
}
   143d6:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   143d8:	8852      	ldrh	r2, [r2, #2]
   143da:	e7ed      	b.n	143b8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   143dc:	2304      	movs	r3, #4
   143de:	e7f0      	b.n	143c2 <free_list_add+0x34>

000143e0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   143e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143e2:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   143e4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   143e8:	d32a      	bcc.n	14440 <sys_heap_init+0x60>
   143ea:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   143ec:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   143ee:	1dc8      	adds	r0, r1, #7
   143f0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   143f4:	440d      	add	r5, r1
   143f6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   143fa:	1a2d      	subs	r5, r5, r0
   143fc:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   143fe:	4606      	mov	r6, r0
	heap->heap = h;
   14400:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   14402:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   14404:	2300      	movs	r3, #0
   14406:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   14408:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1440c:	d31a      	bcc.n	14444 <sys_heap_init+0x64>
   1440e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14410:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   14412:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   14416:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   14418:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1441c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   14420:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   14424:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   14426:	f103 0e07 	add.w	lr, r3, #7
   1442a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1442e:	2300      	movs	r3, #0
   14430:	4563      	cmp	r3, ip
   14432:	da09      	bge.n	14448 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   14434:	1d1a      	adds	r2, r3, #4
   14436:	2400      	movs	r4, #0
   14438:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1443c:	3301      	adds	r3, #1
   1443e:	e7f7      	b.n	14430 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   14440:	2504      	movs	r5, #4
   14442:	e7d3      	b.n	143ec <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   14444:	2304      	movs	r3, #4
   14446:	e7e3      	b.n	14410 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14448:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1444a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1444e:	d333      	bcc.n	144b8 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   14450:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   14452:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14456:	d331      	bcc.n	144bc <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   14458:	2300      	movs	r3, #0
   1445a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1445c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14460:	d32f      	bcc.n	144c2 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   14462:	6843      	ldr	r3, [r0, #4]
   14464:	f043 0301 	orr.w	r3, r3, #1
   14468:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1446a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1446c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1446e:	f02e 0307 	bic.w	r3, lr, #7
   14472:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   14474:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   14478:	d328      	bcc.n	144cc <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1447a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1447c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1447e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   14482:	d325      	bcc.n	144d0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   14484:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   14486:	f025 0307 	bic.w	r3, r5, #7
   1448a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   1448c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1448e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   14492:	d31f      	bcc.n	144d4 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   14494:	2400      	movs	r4, #0
   14496:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   14498:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1449a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1449e:	d31c      	bcc.n	144da <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   144a0:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   144a2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   144a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   144a8:	d319      	bcc.n	144de <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   144aa:	686b      	ldr	r3, [r5, #4]
   144ac:	f043 0301 	orr.w	r3, r3, #1
   144b0:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   144b2:	f7ff ff6c 	bl	1438e <free_list_add>
}
   144b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   144b8:	8043      	strh	r3, [r0, #2]
   144ba:	e7ca      	b.n	14452 <sys_heap_init+0x72>
   144bc:	2300      	movs	r3, #0
   144be:	8003      	strh	r3, [r0, #0]
   144c0:	e7cc      	b.n	1445c <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   144c2:	8843      	ldrh	r3, [r0, #2]
   144c4:	f043 0301 	orr.w	r3, r3, #1
   144c8:	8043      	strh	r3, [r0, #2]
   144ca:	e7ce      	b.n	1446a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   144cc:	8066      	strh	r6, [r4, #2]
   144ce:	e7d5      	b.n	1447c <sys_heap_init+0x9c>
   144d0:	52c1      	strh	r1, [r0, r3]
   144d2:	e7d8      	b.n	14486 <sys_heap_init+0xa6>
   144d4:	2400      	movs	r4, #0
   144d6:	806c      	strh	r4, [r5, #2]
   144d8:	e7de      	b.n	14498 <sys_heap_init+0xb8>
   144da:	52c2      	strh	r2, [r0, r3]
   144dc:	e7e1      	b.n	144a2 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   144de:	886b      	ldrh	r3, [r5, #2]
   144e0:	f043 0301 	orr.w	r3, r3, #1
   144e4:	806b      	strh	r3, [r5, #2]
   144e6:	e7e4      	b.n	144b2 <sys_heap_init+0xd2>

000144e8 <outs>:
{
   144e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144ec:	4607      	mov	r7, r0
   144ee:	460e      	mov	r6, r1
   144f0:	4614      	mov	r4, r2
   144f2:	4698      	mov	r8, r3
	size_t count = 0;
   144f4:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   144f6:	e006      	b.n	14506 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   144f8:	4631      	mov	r1, r6
   144fa:	f814 0b01 	ldrb.w	r0, [r4], #1
   144fe:	47b8      	blx	r7
		if (rc < 0) {
   14500:	2800      	cmp	r0, #0
   14502:	db09      	blt.n	14518 <outs+0x30>
		++count;
   14504:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   14506:	4544      	cmp	r4, r8
   14508:	d3f6      	bcc.n	144f8 <outs+0x10>
   1450a:	f1b8 0f00 	cmp.w	r8, #0
   1450e:	d102      	bne.n	14516 <outs+0x2e>
   14510:	7823      	ldrb	r3, [r4, #0]
   14512:	2b00      	cmp	r3, #0
   14514:	d1f0      	bne.n	144f8 <outs+0x10>
	return (int)count;
   14516:	4628      	mov	r0, r5
}
   14518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001451c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1451c:	4770      	bx	lr

0001451e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1451e:	b084      	sub	sp, #16
   14520:	ab04      	add	r3, sp, #16
   14522:	e903 0007 	stmdb	r3, {r0, r1, r2}
   14526:	2300      	movs	r3, #0
   14528:	f383 8811 	msr	BASEPRI, r3
   1452c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   14530:	b004      	add	sp, #16
   14532:	4770      	bx	lr

00014534 <tty_putchar>:
{
   14534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14538:	4604      	mov	r4, r0
   1453a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1453c:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   14540:	f004 f8b9 	bl	186b6 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   14544:	b330      	cbz	r0, 14594 <tty_putchar+0x60>
   14546:	2200      	movs	r2, #0
   14548:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   1454a:	4630      	mov	r0, r6
   1454c:	f7fd f954 	bl	117f8 <z_impl_k_sem_take>
	if (res < 0) {
   14550:	2800      	cmp	r0, #0
   14552:	db1d      	blt.n	14590 <tty_putchar+0x5c>
	__asm__ volatile(
   14554:	f04f 0320 	mov.w	r3, #32
   14558:	f3ef 8111 	mrs	r1, BASEPRI
   1455c:	f383 8812 	msr	BASEPRI_MAX, r3
   14560:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   14564:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   14566:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   14568:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1456a:	4298      	cmp	r0, r3
   1456c:	d800      	bhi.n	14570 <tty_putchar+0x3c>
		tx_next = 0;
   1456e:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   14570:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   14572:	4298      	cmp	r0, r3
   14574:	d02e      	beq.n	145d4 <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   14576:	6b60      	ldr	r0, [r4, #52]	; 0x34
   14578:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   1457a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   1457c:	f381 8811 	msr	BASEPRI, r1
   14580:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   14584:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   14586:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   14588:	69db      	ldr	r3, [r3, #28]
   1458a:	b353      	cbz	r3, 145e2 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   1458c:	4798      	blx	r3
	return 0;
   1458e:	2000      	movs	r0, #0
}
   14590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   14594:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   14596:	f1b3 3fff 	cmp.w	r3, #4294967295
   1459a:	d017      	beq.n	145cc <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1459c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   145a0:	ea4f 79e3 	mov.w	r9, r3, asr #31
   145a4:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   145a8:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   145ac:	03d8      	lsls	r0, r3, #15
   145ae:	f240 37e7 	movw	r7, #999	; 0x3e7
   145b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145b6:	2300      	movs	r3, #0
   145b8:	19c0      	adds	r0, r0, r7
   145ba:	f04f 0700 	mov.w	r7, #0
   145be:	eb47 0101 	adc.w	r1, r7, r1
   145c2:	f7ec fd91 	bl	10e8 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   145c6:	4602      	mov	r2, r0
   145c8:	460b      	mov	r3, r1
   145ca:	e7be      	b.n	1454a <tty_putchar+0x16>
   145cc:	f04f 32ff 	mov.w	r2, #4294967295
   145d0:	4613      	mov	r3, r2
   145d2:	e7ba      	b.n	1454a <tty_putchar+0x16>
   145d4:	f381 8811 	msr	BASEPRI, r1
   145d8:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   145dc:	f06f 001b 	mvn.w	r0, #27
   145e0:	e7d6      	b.n	14590 <tty_putchar+0x5c>
	return 0;
   145e2:	2000      	movs	r0, #0
   145e4:	e7d4      	b.n	14590 <tty_putchar+0x5c>

000145e6 <tty_getchar>:
{
   145e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145e8:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   145ea:	1d05      	adds	r5, r0, #4
   145ec:	6a03      	ldr	r3, [r0, #32]
   145ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   145f2:	d031      	beq.n	14658 <tty_getchar+0x72>
   145f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   145f8:	17df      	asrs	r7, r3, #31
   145fa:	03f9      	lsls	r1, r7, #15
   145fc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   14600:	03d8      	lsls	r0, r3, #15
   14602:	f240 36e7 	movw	r6, #999	; 0x3e7
   14606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1460a:	2300      	movs	r3, #0
   1460c:	1980      	adds	r0, r0, r6
   1460e:	f04f 0600 	mov.w	r6, #0
   14612:	eb46 0101 	adc.w	r1, r6, r1
   14616:	f7ec fd67 	bl	10e8 <__aeabi_uldivmod>
   1461a:	4602      	mov	r2, r0
   1461c:	460b      	mov	r3, r1
   1461e:	4628      	mov	r0, r5
   14620:	f7fd f8ea 	bl	117f8 <z_impl_k_sem_take>
	if (res < 0) {
   14624:	2800      	cmp	r0, #0
   14626:	db16      	blt.n	14656 <tty_getchar+0x70>
	__asm__ volatile(
   14628:	f04f 0320 	mov.w	r3, #32
   1462c:	f3ef 8111 	mrs	r1, BASEPRI
   14630:	f383 8812 	msr	BASEPRI_MAX, r3
   14634:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   14638:	6960      	ldr	r0, [r4, #20]
   1463a:	8ba2      	ldrh	r2, [r4, #28]
   1463c:	1c53      	adds	r3, r2, #1
   1463e:	b29b      	uxth	r3, r3
   14640:	83a3      	strh	r3, [r4, #28]
   14642:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   14644:	69a2      	ldr	r2, [r4, #24]
   14646:	4293      	cmp	r3, r2
   14648:	d301      	bcc.n	1464e <tty_getchar+0x68>
		tty->rx_get = 0U;
   1464a:	2300      	movs	r3, #0
   1464c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   1464e:	f381 8811 	msr	BASEPRI, r1
   14652:	f3bf 8f6f 	isb	sy
}
   14656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   14658:	f04f 32ff 	mov.w	r2, #4294967295
   1465c:	4613      	mov	r3, r2
   1465e:	e7de      	b.n	1461e <tty_getchar+0x38>

00014660 <tty_read_unbuf>:
{
   14660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14664:	b083      	sub	sp, #12
   14666:	4681      	mov	r9, r0
   14668:	460e      	mov	r6, r1
   1466a:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   1466c:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   1466e:	f04f 0800 	mov.w	r8, #0
	while (size) {
   14672:	e01a      	b.n	146aa <tty_read_unbuf+0x4a>
		return -ENOSYS;
   14674:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   14678:	f1b8 0f00 	cmp.w	r8, #0
   1467c:	d003      	beq.n	14686 <tty_read_unbuf+0x26>
	return out_size;
   1467e:	4640      	mov	r0, r8
}
   14680:	b003      	add	sp, #12
   14682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   14686:	f000 f9bf 	bl	14a08 <__errno>
   1468a:	6004      	str	r4, [r0, #0]
				return -1;
   1468c:	f04f 30ff 	mov.w	r0, #4294967295
   14690:	e7f6      	b.n	14680 <tty_read_unbuf+0x20>
		if (size == 0 ||
   14692:	2d00      	cmp	r5, #0
   14694:	d0f3      	beq.n	1467e <tty_read_unbuf+0x1e>
   14696:	f1b7 3fff 	cmp.w	r7, #4294967295
   1469a:	d003      	beq.n	146a4 <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   1469c:	1e7b      	subs	r3, r7, #1
   1469e:	2f00      	cmp	r7, #0
   146a0:	d0ed      	beq.n	1467e <tty_read_unbuf+0x1e>
   146a2:	461f      	mov	r7, r3
		if (res == -1) {
   146a4:	f1b4 3fff 	cmp.w	r4, #4294967295
   146a8:	d018      	beq.n	146dc <tty_read_unbuf+0x7c>
	while (size) {
   146aa:	2d00      	cmp	r5, #0
   146ac:	d0e7      	beq.n	1467e <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   146ae:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   146b2:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	2b00      	cmp	r3, #0
   146b8:	d0dc      	beq.n	14674 <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   146ba:	f10d 0107 	add.w	r1, sp, #7
   146be:	4798      	blx	r3
   146c0:	4604      	mov	r4, r0
		if (res <= -2) {
   146c2:	f1b0 3fff 	cmp.w	r0, #4294967295
   146c6:	dbd7      	blt.n	14678 <tty_read_unbuf+0x18>
		if (res == 0) {
   146c8:	2800      	cmp	r0, #0
   146ca:	d1e2      	bne.n	14692 <tty_read_unbuf+0x32>
			*p++ = c;
   146cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   146d0:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   146d4:	f108 0801 	add.w	r8, r8, #1
			size--;
   146d8:	3d01      	subs	r5, #1
   146da:	e7da      	b.n	14692 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   146dc:	2021      	movs	r0, #33	; 0x21
   146de:	2100      	movs	r1, #0
   146e0:	f7fd fc46 	bl	11f70 <z_impl_k_sleep>
   146e4:	e7e1      	b.n	146aa <tty_read_unbuf+0x4a>

000146e6 <tty_irq_input_hook>:
{
   146e6:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   146e8:	8bc2      	ldrh	r2, [r0, #30]
   146ea:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   146ec:	6984      	ldr	r4, [r0, #24]
   146ee:	429c      	cmp	r4, r3
   146f0:	d800      	bhi.n	146f4 <tty_irq_input_hook+0xe>
		rx_next = 0;
   146f2:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   146f4:	8b84      	ldrh	r4, [r0, #28]
   146f6:	429c      	cmp	r4, r3
   146f8:	d007      	beq.n	1470a <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   146fa:	6944      	ldr	r4, [r0, #20]
   146fc:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   146fe:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   14700:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14702:	f7fd f855 	bl	117b0 <z_impl_k_sem_give>
}
   14706:	2001      	movs	r0, #1
   14708:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   1470a:	217e      	movs	r1, #126	; 0x7e
   1470c:	f7ff ff12 	bl	14534 <tty_putchar>
		return 1;
   14710:	e7f9      	b.n	14706 <tty_irq_input_hook+0x20>

00014712 <tty_uart_isr>:
{
   14712:	b530      	push	{r4, r5, lr}
   14714:	b083      	sub	sp, #12
   14716:	4604      	mov	r4, r0
   14718:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   1471a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   1471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1471e:	b103      	cbz	r3, 14722 <tty_uart_isr+0x10>
	return api->irq_update(dev);
   14720:	4798      	blx	r3
	const struct uart_driver_api *api =
   14722:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   14724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14726:	b143      	cbz	r3, 1473a <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   14728:	4620      	mov	r0, r4
   1472a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1472c:	b180      	cbz	r0, 14750 <tty_uart_isr+0x3e>
   1472e:	e004      	b.n	1473a <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   14730:	f89d 1007 	ldrb.w	r1, [sp, #7]
   14734:	4628      	mov	r0, r5
   14736:	f7ff ffd6 	bl	146e6 <tty_irq_input_hook>
	const struct uart_driver_api *api =
   1473a:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   1473c:	699b      	ldr	r3, [r3, #24]
   1473e:	2b00      	cmp	r3, #0
   14740:	d0f6      	beq.n	14730 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   14742:	2201      	movs	r2, #1
   14744:	f10d 0107 	add.w	r1, sp, #7
   14748:	4620      	mov	r0, r4
   1474a:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1474c:	2800      	cmp	r0, #0
   1474e:	d1ef      	bne.n	14730 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   14750:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   14752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14754:	b113      	cbz	r3, 1475c <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   14756:	4620      	mov	r0, r4
   14758:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1475a:	b1b8      	cbz	r0, 1478c <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   1475c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   1475e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   14760:	4299      	cmp	r1, r3
   14762:	d015      	beq.n	14790 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   14764:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14766:	1c4a      	adds	r2, r1, #1
   14768:	87aa      	strh	r2, [r5, #60]	; 0x3c
   1476a:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   1476c:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   1476e:	695b      	ldr	r3, [r3, #20]
   14770:	b113      	cbz	r3, 14778 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   14772:	2201      	movs	r2, #1
   14774:	4620      	mov	r0, r4
   14776:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   14778:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   1477a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1477c:	429a      	cmp	r2, r3
   1477e:	d301      	bcc.n	14784 <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   14780:	2300      	movs	r3, #0
   14782:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   14784:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14788:	f7fd f812 	bl	117b0 <z_impl_k_sem_give>
}
   1478c:	b003      	add	sp, #12
   1478e:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   14790:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   14792:	6a1b      	ldr	r3, [r3, #32]
   14794:	2b00      	cmp	r3, #0
   14796:	d0f9      	beq.n	1478c <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   14798:	4620      	mov	r0, r4
   1479a:	4798      	blx	r3
   1479c:	e7f6      	b.n	1478c <tty_uart_isr+0x7a>

0001479e <tty_read>:
{
   1479e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147a2:	4607      	mov	r7, r0
   147a4:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   147a6:	6983      	ldr	r3, [r0, #24]
   147a8:	b17b      	cbz	r3, 147ca <tty_read+0x2c>
	size_t out_size = 0;
   147aa:	2600      	movs	r6, #0
	while (size--) {
   147ac:	f102 38ff 	add.w	r8, r2, #4294967295
   147b0:	b1ba      	cbz	r2, 147e2 <tty_read+0x44>
		res = tty_getchar(tty);
   147b2:	4638      	mov	r0, r7
   147b4:	f7ff ff17 	bl	145e6 <tty_getchar>
		if (res < 0) {
   147b8:	1e04      	subs	r4, r0, #0
   147ba:	db0a      	blt.n	147d2 <tty_read+0x34>
		*p++ = (uint8_t)res;
   147bc:	4629      	mov	r1, r5
   147be:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   147c2:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   147c4:	460d      	mov	r5, r1
	while (size--) {
   147c6:	4642      	mov	r2, r8
   147c8:	e7f0      	b.n	147ac <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   147ca:	f7ff ff49 	bl	14660 <tty_read_unbuf>
   147ce:	4604      	mov	r4, r0
   147d0:	e008      	b.n	147e4 <tty_read+0x46>
			if (out_size == 0) {
   147d2:	b10e      	cbz	r6, 147d8 <tty_read+0x3a>
			return out_size;
   147d4:	4634      	mov	r4, r6
   147d6:	e005      	b.n	147e4 <tty_read+0x46>
				errno = -res;
   147d8:	f000 f916 	bl	14a08 <__errno>
   147dc:	4263      	negs	r3, r4
   147de:	6003      	str	r3, [r0, #0]
				return res;
   147e0:	e000      	b.n	147e4 <tty_read+0x46>
	return out_size;
   147e2:	4634      	mov	r4, r6
}
   147e4:	4620      	mov	r0, r4
   147e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000147ea <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   147ea:	b570      	push	{r4, r5, r6, lr}
   147ec:	4604      	mov	r4, r0
   147ee:	460e      	mov	r6, r1
   147f0:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   147f2:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   147f4:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   147f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   147f8:	b103      	cbz	r3, 147fc <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   147fa:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   147fc:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   147fe:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   14800:	b90d      	cbnz	r5, 14806 <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   14802:	2000      	movs	r0, #0
   14804:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   14806:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   14808:	f04f 32ff 	mov.w	r2, #4294967295
   1480c:	2100      	movs	r1, #0
   1480e:	f003 ff96 	bl	1873e <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   14812:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   14814:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   14816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14818:	2b00      	cmp	r3, #0
   1481a:	d0f2      	beq.n	14802 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   1481c:	4798      	blx	r3
   1481e:	e7f0      	b.n	14802 <tty_set_rx_buf+0x18>

00014820 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   14820:	b570      	push	{r4, r5, r6, lr}
   14822:	4604      	mov	r4, r0
   14824:	460e      	mov	r6, r1
   14826:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   14828:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   1482a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   1482c:	6a1b      	ldr	r3, [r3, #32]
   1482e:	b103      	cbz	r3, 14832 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   14830:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   14832:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   14834:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   14836:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1483a:	1e69      	subs	r1, r5, #1
   1483c:	f04f 32ff 	mov.w	r2, #4294967295
   14840:	f003 ff7d 	bl	1873e <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   14844:	2000      	movs	r0, #0
   14846:	bd70      	pop	{r4, r5, r6, pc}

00014848 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   14848:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   1484a:	f7ef fb27 	bl	3e9c <__do_global_ctors_aux>
	__do_init_array_aux();
   1484e:	f7ef fb17 	bl	3e80 <__do_init_array_aux>
}
   14852:	bd08      	pop	{r3, pc}

00014854 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   14854:	2000      	movs	r0, #0
   14856:	4770      	bx	lr

00014858 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14858:	2200      	movs	r2, #0
   1485a:	6002      	str	r2, [r0, #0]
   1485c:	6042      	str	r2, [r0, #4]
   1485e:	6082      	str	r2, [r0, #8]
}
   14860:	4770      	bx	lr

00014862 <abort_function>:
{
   14862:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   14864:	2000      	movs	r0, #0
   14866:	f7ef fa39 	bl	3cdc <sys_reboot>

0001486a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1486a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1486c:	f003 feab 	bl	185c6 <z_fatal_error>
}
   14870:	bd08      	pop	{r3, pc}

00014872 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   14872:	b508      	push	{r3, lr}
   14874:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   14876:	6800      	ldr	r0, [r0, #0]
   14878:	f7ff fff7 	bl	1486a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1487c:	bd08      	pop	{r3, pc}

0001487e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1487e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   14880:	2100      	movs	r1, #0
   14882:	2001      	movs	r0, #1
   14884:	f7ff fff1 	bl	1486a <z_arm_fatal_error>
}
   14888:	bd08      	pop	{r3, pc}

0001488a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1488a:	b508      	push	{r3, lr}
	handler();
   1488c:	f7ef fcf6 	bl	427c <z_SysNmiOnReset>
	z_arm_int_exit();
   14890:	f7ef fdc4 	bl	441c <z_arm_exc_exit>
}
   14894:	bd08      	pop	{r3, pc}

00014896 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   14896:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1489a:	f383 880b 	msr	PSPLIM, r3
}
   1489e:	4770      	bx	lr

000148a0 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   148a0:	b508      	push	{r3, lr}
   148a2:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   148a4:	4601      	mov	r1, r0
   148a6:	4618      	mov	r0, r3
   148a8:	f7ff ffd4 	bl	14854 <__cxa_atexit>
}
   148ac:	bd08      	pop	{r3, pc}

000148ae <memory_fault_recoverable>:
}
   148ae:	2000      	movs	r0, #0
   148b0:	4770      	bx	lr

000148b2 <debug_monitor>:
	*recoverable = false;
   148b2:	2300      	movs	r3, #0
   148b4:	700b      	strb	r3, [r1, #0]
}
   148b6:	4770      	bx	lr

000148b8 <fault_handle>:
{
   148b8:	b508      	push	{r3, lr}
	*recoverable = false;
   148ba:	2300      	movs	r3, #0
   148bc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   148be:	1ecb      	subs	r3, r1, #3
   148c0:	2b09      	cmp	r3, #9
   148c2:	d81a      	bhi.n	148fa <fault_handle+0x42>
   148c4:	e8df f003 	tbb	[pc, r3]
   148c8:	110d0905 	.word	0x110d0905
   148cc:	19191919 	.word	0x19191919
   148d0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   148d2:	4611      	mov	r1, r2
   148d4:	f7ef fe1e 	bl	4514 <hard_fault>
		break;
   148d8:	e010      	b.n	148fc <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   148da:	2100      	movs	r1, #0
   148dc:	f7ef fdac 	bl	4438 <mem_manage_fault>
		break;
   148e0:	e00c      	b.n	148fc <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   148e2:	2100      	movs	r1, #0
   148e4:	f7ef fdd4 	bl	4490 <bus_fault>
		break;
   148e8:	e008      	b.n	148fc <fault_handle+0x44>
		reason = usage_fault(esf);
   148ea:	f7ef fdfb 	bl	44e4 <usage_fault>
		break;
   148ee:	e005      	b.n	148fc <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   148f0:	4611      	mov	r1, r2
   148f2:	f7ff ffde 	bl	148b2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   148f6:	2000      	movs	r0, #0
		break;
   148f8:	e000      	b.n	148fc <fault_handle+0x44>
	*recoverable = false;
   148fa:	2000      	movs	r0, #0
}
   148fc:	bd08      	pop	{r3, pc}

000148fe <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   148fe:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   14902:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   14906:	d001      	beq.n	1490c <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   14908:	b2c0      	uxtb	r0, r0
   1490a:	4770      	bx	lr
	}

	return -EINVAL;
   1490c:	f06f 0015 	mvn.w	r0, #21
}
   14910:	4770      	bx	lr

00014912 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   14912:	6843      	ldr	r3, [r0, #4]
		&&
   14914:	2b1f      	cmp	r3, #31
   14916:	d90a      	bls.n	1492e <mpu_partition_is_valid+0x1c>
		&&
   14918:	f013 0f1f 	tst.w	r3, #31
   1491c:	d001      	beq.n	14922 <mpu_partition_is_valid+0x10>
		&&
   1491e:	2000      	movs	r0, #0
   14920:	4770      	bx	lr
		((part->start &
   14922:	6803      	ldr	r3, [r0, #0]
		&&
   14924:	f013 0f1f 	tst.w	r3, #31
   14928:	d003      	beq.n	14932 <mpu_partition_is_valid+0x20>
   1492a:	2000      	movs	r0, #0
   1492c:	4770      	bx	lr
   1492e:	2000      	movs	r0, #0
   14930:	4770      	bx	lr
   14932:	2001      	movs	r0, #1
}
   14934:	4770      	bx	lr

00014936 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   14936:	2807      	cmp	r0, #7
   14938:	d805      	bhi.n	14946 <region_allocate_and_init+0x10>
{
   1493a:	b510      	push	{r4, lr}
   1493c:	4604      	mov	r4, r0
	region_init(index, region_conf);
   1493e:	f7ef ff63 	bl	4808 <region_init>
	return index;
   14942:	4620      	mov	r0, r4
}
   14944:	bd10      	pop	{r4, pc}
		return -EINVAL;
   14946:	f06f 0015 	mvn.w	r0, #21
}
   1494a:	4770      	bx	lr

0001494c <mpu_configure_region>:
{
   1494c:	b530      	push	{r4, r5, lr}
   1494e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   14950:	680b      	ldr	r3, [r1, #0]
   14952:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14954:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   14956:	890d      	ldrh	r5, [r1, #8]
   14958:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1495c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   14960:	7a89      	ldrb	r1, [r1, #10]
   14962:	f361 1247 	bfi	r2, r1, #5, #3
   14966:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1496a:	f023 031f 	bic.w	r3, r3, #31
   1496e:	4423      	add	r3, r4
   14970:	3b01      	subs	r3, #1
   14972:	f023 031f 	bic.w	r3, r3, #31
   14976:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   14978:	4669      	mov	r1, sp
   1497a:	f7ff ffdc 	bl	14936 <region_allocate_and_init>
}
   1497e:	b005      	add	sp, #20
   14980:	bd30      	pop	{r4, r5, pc}

00014982 <arm_core_mpu_configure_static_mpu_regions>:
{
   14982:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14984:	f7f0 f81e 	bl	49c4 <mpu_configure_static_mpu_regions>
}
   14988:	bd08      	pop	{r3, pc}

0001498a <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1498a:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1498c:	f7f0 f824 	bl	49d8 <mpu_mark_areas_for_dynamic_regions>
}
   14990:	bd08      	pop	{r3, pc}

00014992 <malloc_prepare>:
}
   14992:	2000      	movs	r0, #0
   14994:	4770      	bx	lr

00014996 <_stdout_hook_default>:
}
   14996:	f04f 30ff 	mov.w	r0, #4294967295
   1499a:	4770      	bx	lr

0001499c <_stdin_hook_default>:
}
   1499c:	2000      	movs	r0, #0
   1499e:	4770      	bx	lr

000149a0 <_read>:
{
   149a0:	b508      	push	{r3, lr}
   149a2:	4608      	mov	r0, r1
   149a4:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   149a6:	f7f0 f8a7 	bl	4af8 <z_impl_zephyr_read_stdin>
}
   149aa:	bd08      	pop	{r3, pc}

000149ac <_write>:
{
   149ac:	b508      	push	{r3, lr}
   149ae:	4608      	mov	r0, r1
   149b0:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   149b2:	f7f0 f8b7 	bl	4b24 <z_impl_zephyr_write_stdout>
}
   149b6:	bd08      	pop	{r3, pc}

000149b8 <_close>:
}
   149b8:	f04f 30ff 	mov.w	r0, #4294967295
   149bc:	4770      	bx	lr

000149be <_lseek>:
}
   149be:	2000      	movs	r0, #0
   149c0:	4770      	bx	lr

000149c2 <_isatty>:
}
   149c2:	2802      	cmp	r0, #2
   149c4:	bfcc      	ite	gt
   149c6:	2000      	movgt	r0, #0
   149c8:	2001      	movle	r0, #1
   149ca:	4770      	bx	lr

000149cc <_kill>:
}
   149cc:	2000      	movs	r0, #0
   149ce:	4770      	bx	lr

000149d0 <_getpid>:
}
   149d0:	2000      	movs	r0, #0
   149d2:	4770      	bx	lr

000149d4 <_fstat>:
	st->st_mode = S_IFCHR;
   149d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   149d8:	604b      	str	r3, [r1, #4]
}
   149da:	2000      	movs	r0, #0
   149dc:	4770      	bx	lr

000149de <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   149de:	b510      	push	{r4, lr}
   149e0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   149e2:	2014      	movs	r0, #20
   149e4:	f7fe f88a 	bl	12afc <malloc>
   149e8:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   149ea:	f003 fea1 	bl	18730 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   149ee:	bd10      	pop	{r4, pc}

000149f0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   149f0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   149f2:	f04f 32ff 	mov.w	r2, #4294967295
   149f6:	f04f 33ff 	mov.w	r3, #4294967295
   149fa:	f7fc fe0b 	bl	11614 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   149fe:	bd08      	pop	{r3, pc}

00014a00 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   14a00:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   14a02:	f7fc fe91 	bl	11728 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   14a06:	bd08      	pop	{r3, pc}

00014a08 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   14a08:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   14a0a:	f7fc fbcf 	bl	111ac <z_impl_z_errno>
	return z_errno();
}
   14a0e:	bd08      	pop	{r3, pc}

00014a10 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   14a10:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   14a12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14a16:	0089      	lsls	r1, r1, #2
   14a18:	3180      	adds	r1, #128	; 0x80
}
   14a1a:	4408      	add	r0, r1
   14a1c:	4770      	bx	lr

00014a1e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   14a1e:	6840      	ldr	r0, [r0, #4]
}
   14a20:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   14a24:	4770      	bx	lr

00014a26 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   14a26:	6900      	ldr	r0, [r0, #16]
}
   14a28:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   14a2c:	4770      	bx	lr

00014a2e <get_status>:
{
   14a2e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   14a30:	b2c9      	uxtb	r1, r1
   14a32:	f7ff ffed 	bl	14a10 <get_sub_data>
   14a36:	6880      	ldr	r0, [r0, #8]
}
   14a38:	f000 0007 	and.w	r0, r0, #7
   14a3c:	bd08      	pop	{r3, pc}

00014a3e <set_off_state>:
	__asm__ volatile(
   14a3e:	f04f 0320 	mov.w	r3, #32
   14a42:	f3ef 8211 	mrs	r2, BASEPRI
   14a46:	f383 8812 	msr	BASEPRI_MAX, r3
   14a4a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14a4e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   14a50:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   14a54:	d001      	beq.n	14a5a <set_off_state+0x1c>
   14a56:	428b      	cmp	r3, r1
   14a58:	d107      	bne.n	14a6a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   14a5a:	2301      	movs	r3, #1
   14a5c:	6003      	str	r3, [r0, #0]
	int err = 0;
   14a5e:	2000      	movs	r0, #0
	__asm__ volatile(
   14a60:	f382 8811 	msr	BASEPRI, r2
   14a64:	f3bf 8f6f 	isb	sy
}
   14a68:	4770      	bx	lr
		err = -EPERM;
   14a6a:	f04f 30ff 	mov.w	r0, #4294967295
   14a6e:	e7f7      	b.n	14a60 <set_off_state+0x22>

00014a70 <set_starting_state>:
{
   14a70:	b410      	push	{r4}
	__asm__ volatile(
   14a72:	f04f 0320 	mov.w	r3, #32
   14a76:	f3ef 8211 	mrs	r2, BASEPRI
   14a7a:	f383 8812 	msr	BASEPRI_MAX, r3
   14a7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14a82:	6803      	ldr	r3, [r0, #0]
   14a84:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   14a88:	f003 0307 	and.w	r3, r3, #7
   14a8c:	2b01      	cmp	r3, #1
   14a8e:	d009      	beq.n	14aa4 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   14a90:	428c      	cmp	r4, r1
   14a92:	d00a      	beq.n	14aaa <set_starting_state+0x3a>
		err = -EPERM;
   14a94:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   14a98:	f382 8811 	msr	BASEPRI, r2
   14a9c:	f3bf 8f6f 	isb	sy
}
   14aa0:	bc10      	pop	{r4}
   14aa2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   14aa4:	6001      	str	r1, [r0, #0]
	int err = 0;
   14aa6:	2000      	movs	r0, #0
   14aa8:	e7f6      	b.n	14a98 <set_starting_state+0x28>
		err = -EALREADY;
   14aaa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14aae:	e7f3      	b.n	14a98 <set_starting_state+0x28>

00014ab0 <set_on_state>:
	__asm__ volatile(
   14ab0:	f04f 0320 	mov.w	r3, #32
   14ab4:	f3ef 8211 	mrs	r2, BASEPRI
   14ab8:	f383 8812 	msr	BASEPRI_MAX, r3
   14abc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   14ac0:	6803      	ldr	r3, [r0, #0]
   14ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14ac6:	f043 0302 	orr.w	r3, r3, #2
   14aca:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   14acc:	f382 8811 	msr	BASEPRI, r2
   14ad0:	f3bf 8f6f 	isb	sy
}
   14ad4:	4770      	bx	lr

00014ad6 <clkstarted_handle>:
{
   14ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ad8:	4606      	mov	r6, r0
   14ada:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   14adc:	f7ff ff98 	bl	14a10 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   14ae0:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   14ae2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   14ae4:	2300      	movs	r3, #0
   14ae6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   14aea:	f7ff ffe1 	bl	14ab0 <set_on_state>
	if (callback) {
   14aee:	b11d      	cbz	r5, 14af8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14af0:	463a      	mov	r2, r7
   14af2:	4621      	mov	r1, r4
   14af4:	4630      	mov	r0, r6
   14af6:	47a8      	blx	r5
}
   14af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014afa <stop>:
{
   14afa:	b570      	push	{r4, r5, r6, lr}
   14afc:	4606      	mov	r6, r0
   14afe:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14b00:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14b02:	4621      	mov	r1, r4
   14b04:	f7ff ff84 	bl	14a10 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   14b08:	4629      	mov	r1, r5
   14b0a:	3008      	adds	r0, #8
   14b0c:	f7ff ff97 	bl	14a3e <set_off_state>
	if (err < 0) {
   14b10:	2800      	cmp	r0, #0
   14b12:	db06      	blt.n	14b22 <stop+0x28>
	get_sub_config(dev, type)->stop();
   14b14:	4621      	mov	r1, r4
   14b16:	4630      	mov	r0, r6
   14b18:	f7ff ff81 	bl	14a1e <get_sub_config>
   14b1c:	6843      	ldr	r3, [r0, #4]
   14b1e:	4798      	blx	r3
	return 0;
   14b20:	2000      	movs	r0, #0
}
   14b22:	bd70      	pop	{r4, r5, r6, pc}

00014b24 <api_stop>:
{
   14b24:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   14b26:	2280      	movs	r2, #128	; 0x80
   14b28:	f7ff ffe7 	bl	14afa <stop>
}
   14b2c:	bd08      	pop	{r3, pc}

00014b2e <async_start>:
{
   14b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b32:	4606      	mov	r6, r0
   14b34:	4690      	mov	r8, r2
   14b36:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14b38:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14b3a:	4629      	mov	r1, r5
   14b3c:	f7ff ff68 	bl	14a10 <get_sub_data>
   14b40:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   14b42:	9906      	ldr	r1, [sp, #24]
   14b44:	3008      	adds	r0, #8
   14b46:	f7ff ff93 	bl	14a70 <set_starting_state>
	if (err < 0) {
   14b4a:	2800      	cmp	r0, #0
   14b4c:	db09      	blt.n	14b62 <async_start+0x34>
	subdata->cb = cb;
   14b4e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   14b52:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   14b54:	4629      	mov	r1, r5
   14b56:	4630      	mov	r0, r6
   14b58:	f7ff ff61 	bl	14a1e <get_sub_config>
   14b5c:	6803      	ldr	r3, [r0, #0]
   14b5e:	4798      	blx	r3
	return 0;
   14b60:	2000      	movs	r0, #0
}
   14b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014b66 <api_start>:
{
   14b66:	b510      	push	{r4, lr}
   14b68:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   14b6a:	2480      	movs	r4, #128	; 0x80
   14b6c:	9400      	str	r4, [sp, #0]
   14b6e:	f7ff ffde 	bl	14b2e <async_start>
}
   14b72:	b002      	add	sp, #8
   14b74:	bd10      	pop	{r4, pc}

00014b76 <onoff_started_callback>:
{
   14b76:	b510      	push	{r4, lr}
   14b78:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   14b7a:	b2c9      	uxtb	r1, r1
   14b7c:	f7ff ff53 	bl	14a26 <get_onoff_manager>
	notify(mgr, 0);
   14b80:	2100      	movs	r1, #0
   14b82:	47a0      	blx	r4
}
   14b84:	bd10      	pop	{r4, pc}

00014b86 <hfclk_start>:
{
   14b86:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14b88:	2001      	movs	r0, #1
   14b8a:	f7f1 fa0d 	bl	5fa8 <nrfx_clock_start>
}
   14b8e:	bd08      	pop	{r3, pc}

00014b90 <hfclkaudio_start>:
{
   14b90:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   14b92:	2003      	movs	r0, #3
   14b94:	f7f1 fa08 	bl	5fa8 <nrfx_clock_start>
}
   14b98:	bd08      	pop	{r3, pc}

00014b9a <hfclk192m_start>:
{
   14b9a:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   14b9c:	2002      	movs	r0, #2
   14b9e:	f7f1 fa03 	bl	5fa8 <nrfx_clock_start>
}
   14ba2:	bd08      	pop	{r3, pc}

00014ba4 <lfclk_start>:
{
   14ba4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   14ba6:	2000      	movs	r0, #0
   14ba8:	f7f1 f9fe 	bl	5fa8 <nrfx_clock_start>
}
   14bac:	bd08      	pop	{r3, pc}

00014bae <hfclk_stop>:
{
   14bae:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14bb0:	2001      	movs	r0, #1
   14bb2:	f7f1 fa53 	bl	605c <nrfx_clock_stop>
}
   14bb6:	bd08      	pop	{r3, pc}

00014bb8 <hfclkaudio_stop>:
{
   14bb8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   14bba:	2003      	movs	r0, #3
   14bbc:	f7f1 fa4e 	bl	605c <nrfx_clock_stop>
}
   14bc0:	bd08      	pop	{r3, pc}

00014bc2 <hfclk192m_stop>:
{
   14bc2:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   14bc4:	2002      	movs	r0, #2
   14bc6:	f7f1 fa49 	bl	605c <nrfx_clock_stop>
}
   14bca:	bd08      	pop	{r3, pc}

00014bcc <lfclk_stop>:
{
   14bcc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   14bce:	2000      	movs	r0, #0
   14bd0:	f7f1 fa44 	bl	605c <nrfx_clock_stop>
}
   14bd4:	bd08      	pop	{r3, pc}

00014bd6 <blocking_start_callback>:
{
   14bd6:	b508      	push	{r3, lr}
   14bd8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   14bda:	f7fc fde9 	bl	117b0 <z_impl_k_sem_give>
}
   14bde:	bd08      	pop	{r3, pc}

00014be0 <debug_hook_out_nop>:
}
   14be0:	2000      	movs	r0, #0
   14be2:	4770      	bx	lr

00014be4 <gpio_nrfx_port_get_raw>:
	return port->config;
   14be4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14be6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   14be8:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   14bea:	600b      	str	r3, [r1, #0]
}
   14bec:	2000      	movs	r0, #0
   14bee:	4770      	bx	lr

00014bf0 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   14bf0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14bf2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   14bf4:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   14bf6:	4042      	eors	r2, r0
   14bf8:	400a      	ands	r2, r1
   14bfa:	4042      	eors	r2, r0
    p_reg->OUT = value;
   14bfc:	605a      	str	r2, [r3, #4]
}
   14bfe:	2000      	movs	r0, #0
   14c00:	4770      	bx	lr

00014c02 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   14c02:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c04:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   14c06:	6099      	str	r1, [r3, #8]
}
   14c08:	2000      	movs	r0, #0
   14c0a:	4770      	bx	lr

00014c0c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   14c0c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c0e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   14c10:	60d9      	str	r1, [r3, #12]
}
   14c12:	2000      	movs	r0, #0
   14c14:	4770      	bx	lr

00014c16 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   14c16:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14c18:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   14c1a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   14c1c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   14c1e:	6053      	str	r3, [r2, #4]
}
   14c20:	2000      	movs	r0, #0
   14c22:	4770      	bx	lr

00014c24 <gpio_nrfx_manage_callback>:
{
   14c24:	b470      	push	{r4, r5, r6}
	return port->data;
   14c26:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14c28:	1d05      	adds	r5, r0, #4
	return list->head;
   14c2a:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   14c2c:	b1db      	cbz	r3, 14c66 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   14c2e:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c30:	2400      	movs	r4, #0
   14c32:	e00a      	b.n	14c4a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   14c34:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   14c36:	6043      	str	r3, [r0, #4]
	return list->tail;
   14c38:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14c3a:	42a1      	cmp	r1, r4
   14c3c:	d10f      	bne.n	14c5e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14c3e:	606b      	str	r3, [r5, #4]
}
   14c40:	e00d      	b.n	14c5e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   14c42:	606c      	str	r4, [r5, #4]
}
   14c44:	e00b      	b.n	14c5e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c46:	461c      	mov	r4, r3
   14c48:	681b      	ldr	r3, [r3, #0]
   14c4a:	b15b      	cbz	r3, 14c64 <gpio_nrfx_manage_callback+0x40>
   14c4c:	429e      	cmp	r6, r3
   14c4e:	d1fa      	bne.n	14c46 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   14c50:	2c00      	cmp	r4, #0
   14c52:	d0ef      	beq.n	14c34 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   14c54:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   14c56:	6023      	str	r3, [r4, #0]
	return list->tail;
   14c58:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14c5a:	4299      	cmp	r1, r3
   14c5c:	d0f1      	beq.n	14c42 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   14c5e:	2300      	movs	r3, #0
   14c60:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14c62:	e000      	b.n	14c66 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   14c64:	b152      	cbz	r2, 14c7c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   14c66:	b162      	cbz	r2, 14c82 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   14c68:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   14c6a:	600b      	str	r3, [r1, #0]
	list->head = node;
   14c6c:	6041      	str	r1, [r0, #4]
	return list->tail;
   14c6e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14c70:	b10b      	cbz	r3, 14c76 <gpio_nrfx_manage_callback+0x52>
	return 0;
   14c72:	2000      	movs	r0, #0
   14c74:	e006      	b.n	14c84 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   14c76:	6069      	str	r1, [r5, #4]
   14c78:	2000      	movs	r0, #0
}
   14c7a:	e003      	b.n	14c84 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   14c7c:	f06f 0015 	mvn.w	r0, #21
   14c80:	e000      	b.n	14c84 <gpio_nrfx_manage_callback+0x60>
	return 0;
   14c82:	2000      	movs	r0, #0
}
   14c84:	bc70      	pop	{r4, r5, r6}
   14c86:	4770      	bx	lr

00014c88 <endtx_isr>:
	return dev->config;
   14c88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14c8a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   14c8c:	f04f 0120 	mov.w	r1, #32
   14c90:	f3ef 8211 	mrs	r2, BASEPRI
   14c94:	f381 8812 	msr	BASEPRI_MAX, r1
   14c98:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14c9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14ca0:	b131      	cbz	r1, 14cb0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14ca2:	2100      	movs	r1, #0
   14ca4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   14ca8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14cac:	2101      	movs	r1, #1
   14cae:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   14cb0:	f382 8811 	msr	BASEPRI, r2
   14cb4:	f3bf 8f6f 	isb	sy
}
   14cb8:	4770      	bx	lr

00014cba <uarte_nrfx_isr_int>:
{
   14cba:	b538      	push	{r3, r4, r5, lr}
   14cbc:	4604      	mov	r4, r0
	return dev->config;
   14cbe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14cc0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   14cc2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   14cc6:	f413 7f80 	tst.w	r3, #256	; 0x100
   14cca:	d003      	beq.n	14cd4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ccc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d139      	bne.n	14d48 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   14cd4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14cd6:	685b      	ldr	r3, [r3, #4]
   14cd8:	f013 0f10 	tst.w	r3, #16
   14cdc:	d01a      	beq.n	14d14 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   14cde:	f04f 0320 	mov.w	r3, #32
   14ce2:	f3ef 8211 	mrs	r2, BASEPRI
   14ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   14cea:	f3bf 8f6f 	isb	sy
   14cee:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14cf2:	b113      	cbz	r3, 14cfa <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14cf4:	2300      	movs	r3, #0
   14cf6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   14cfa:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   14cfc:	68db      	ldr	r3, [r3, #12]
   14cfe:	b10b      	cbz	r3, 14d04 <uarte_nrfx_isr_int+0x4a>
   14d00:	691b      	ldr	r3, [r3, #16]
   14d02:	b91b      	cbnz	r3, 14d0c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   14d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14d08:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   14d0c:	f382 8811 	msr	BASEPRI, r2
   14d10:	f3bf 8f6f 	isb	sy
	return dev->data;
   14d14:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   14d16:	68da      	ldr	r2, [r3, #12]
   14d18:	b1aa      	cbz	r2, 14d46 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14d1a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   14d1e:	b121      	cbz	r1, 14d2a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   14d20:	2100      	movs	r1, #0
   14d22:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   14d24:	68da      	ldr	r2, [r3, #12]
   14d26:	7b92      	ldrb	r2, [r2, #14]
   14d28:	b98a      	cbnz	r2, 14d4e <uarte_nrfx_isr_int+0x94>
   14d2a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   14d2e:	b122      	cbz	r2, 14d3a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d30:	2200      	movs	r2, #0
   14d32:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   14d36:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   14d3a:	68da      	ldr	r2, [r3, #12]
   14d3c:	6813      	ldr	r3, [r2, #0]
   14d3e:	b113      	cbz	r3, 14d46 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   14d40:	6851      	ldr	r1, [r2, #4]
   14d42:	4620      	mov	r0, r4
   14d44:	4798      	blx	r3
}
   14d46:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   14d48:	f7ff ff9e 	bl	14c88 <endtx_isr>
   14d4c:	e7c2      	b.n	14cd4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   14d4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   14d52:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   14d56:	68db      	ldr	r3, [r3, #12]
   14d58:	7399      	strb	r1, [r3, #14]
			return;
   14d5a:	e7f4      	b.n	14d46 <uarte_nrfx_isr_int+0x8c>

00014d5c <uarte_nrfx_configure>:
{
   14d5c:	b530      	push	{r4, r5, lr}
   14d5e:	b083      	sub	sp, #12
   14d60:	4605      	mov	r5, r0
   14d62:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   14d64:	794b      	ldrb	r3, [r1, #5]
   14d66:	2b01      	cmp	r3, #1
   14d68:	d006      	beq.n	14d78 <uarte_nrfx_configure+0x1c>
   14d6a:	2b03      	cmp	r3, #3
   14d6c:	d011      	beq.n	14d92 <uarte_nrfx_configure+0x36>
   14d6e:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   14d72:	4610      	mov	r0, r2
   14d74:	b003      	add	sp, #12
   14d76:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   14d78:	2300      	movs	r3, #0
   14d7a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14d7e:	79a3      	ldrb	r3, [r4, #6]
   14d80:	2b03      	cmp	r3, #3
   14d82:	d14f      	bne.n	14e24 <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
   14d84:	79e3      	ldrb	r3, [r4, #7]
   14d86:	b143      	cbz	r3, 14d9a <uarte_nrfx_configure+0x3e>
   14d88:	2b01      	cmp	r3, #1
   14d8a:	d015      	beq.n	14db8 <uarte_nrfx_configure+0x5c>
   14d8c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14d90:	e7ef      	b.n	14d72 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14d92:	2310      	movs	r3, #16
   14d94:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   14d98:	e7f1      	b.n	14d7e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   14d9a:	2300      	movs	r3, #0
   14d9c:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   14da0:	2300      	movs	r3, #0
   14da2:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   14da6:	7923      	ldrb	r3, [r4, #4]
   14da8:	2b01      	cmp	r3, #1
   14daa:	d033      	beq.n	14e14 <uarte_nrfx_configure+0xb8>
   14dac:	2b02      	cmp	r3, #2
   14dae:	d02d      	beq.n	14e0c <uarte_nrfx_configure+0xb0>
   14db0:	b173      	cbz	r3, 14dd0 <uarte_nrfx_configure+0x74>
   14db2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14db6:	e7dc      	b.n	14d72 <uarte_nrfx_configure+0x16>
	return dev->config;
   14db8:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   14dba:	685b      	ldr	r3, [r3, #4]
   14dbc:	f003 0201 	and.w	r2, r3, #1
   14dc0:	f003 0302 	and.w	r3, r3, #2
   14dc4:	4313      	orrs	r3, r2
   14dc6:	d030      	beq.n	14e2a <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   14dc8:	2301      	movs	r3, #1
   14dca:	f88d 3000 	strb.w	r3, [sp]
		break;
   14dce:	e7e7      	b.n	14da0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   14dd0:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14dd4:	6821      	ldr	r1, [r4, #0]
   14dd6:	4628      	mov	r0, r5
   14dd8:	f7f0 fb94 	bl	5504 <baudrate_set>
   14ddc:	4602      	mov	r2, r0
   14dde:	bb38      	cbnz	r0, 14e30 <uarte_nrfx_configure+0xd4>
	return dev->config;
   14de0:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   14de2:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14de4:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   14de8:	f89d 0002 	ldrb.w	r0, [sp, #2]
   14dec:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   14dee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   14df2:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   14df4:	f89d 0000 	ldrb.w	r0, [sp]
   14df8:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   14dfa:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   14dfe:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   14e00:	3304      	adds	r3, #4
   14e02:	e894 0003 	ldmia.w	r4, {r0, r1}
   14e06:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   14e0a:	e7b2      	b.n	14d72 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14e0c:	230e      	movs	r3, #14
   14e0e:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   14e12:	e7df      	b.n	14dd4 <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14e14:	230e      	movs	r3, #14
   14e16:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   14e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
   14e1e:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   14e22:	e7d7      	b.n	14dd4 <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
   14e24:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e28:	e7a3      	b.n	14d72 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   14e2a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e2e:	e7a0      	b.n	14d72 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   14e30:	f06f 0285 	mvn.w	r2, #133	; 0x85
   14e34:	e79d      	b.n	14d72 <uarte_nrfx_configure+0x16>

00014e36 <uarte_nrfx_config_get>:
{
   14e36:	460b      	mov	r3, r1
	return dev->data;
   14e38:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   14e3a:	6891      	ldr	r1, [r2, #8]
   14e3c:	6850      	ldr	r0, [r2, #4]
   14e3e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   14e42:	2000      	movs	r0, #0
   14e44:	4770      	bx	lr

00014e46 <uarte_nrfx_err_check>:
	return dev->config;
   14e46:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e48:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   14e4a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   14e4e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   14e52:	4770      	bx	lr

00014e54 <is_tx_ready>:
	return dev->config;
   14e54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e56:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   14e58:	685b      	ldr	r3, [r3, #4]
   14e5a:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14e5e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   14e62:	b929      	cbnz	r1, 14e70 <is_tx_ready+0x1c>
   14e64:	b933      	cbnz	r3, 14e74 <is_tx_ready+0x20>
   14e66:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   14e6a:	b92b      	cbnz	r3, 14e78 <is_tx_ready+0x24>
   14e6c:	2000      	movs	r0, #0
   14e6e:	4770      	bx	lr
   14e70:	2001      	movs	r0, #1
   14e72:	4770      	bx	lr
   14e74:	2000      	movs	r0, #0
   14e76:	4770      	bx	lr
   14e78:	2001      	movs	r0, #1
}
   14e7a:	4770      	bx	lr

00014e7c <uarte_enable>:
	return dev->config;
   14e7c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e7e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14e80:	2208      	movs	r2, #8
   14e82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   14e86:	4770      	bx	lr

00014e88 <tx_start>:
{
   14e88:	b510      	push	{r4, lr}
	return dev->config;
   14e8a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14e8c:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14e8e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14e92:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e96:	2300      	movs	r3, #0
   14e98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14e9c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   14ea0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   14ea4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   14ea8:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14eaa:	685b      	ldr	r3, [r3, #4]
   14eac:	f013 0f10 	tst.w	r3, #16
   14eb0:	d102      	bne.n	14eb8 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14eb2:	2301      	movs	r3, #1
   14eb4:	60a3      	str	r3, [r4, #8]
}
   14eb6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   14eb8:	2101      	movs	r1, #1
   14eba:	f7ff ffdf 	bl	14e7c <uarte_enable>
    p_reg->INTENSET = mask;
   14ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   14ec2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   14ec6:	e7f4      	b.n	14eb2 <tx_start+0x2a>

00014ec8 <uarte_nrfx_poll_in>:
{
   14ec8:	b410      	push	{r4}
	return dev->data;
   14eca:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   14ecc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14ece:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14ed0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14ed4:	b152      	cbz	r2, 14eec <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   14ed6:	7d62      	ldrb	r2, [r4, #21]
   14ed8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14eda:	2000      	movs	r0, #0
   14edc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   14ee0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ee4:	2201      	movs	r2, #1
   14ee6:	601a      	str	r2, [r3, #0]
}
   14ee8:	bc10      	pop	{r4}
   14eea:	4770      	bx	lr
		return -1;
   14eec:	f04f 30ff 	mov.w	r0, #4294967295
   14ef0:	e7fa      	b.n	14ee8 <uarte_nrfx_poll_in+0x20>

00014ef2 <uarte_nrfx_fifo_fill>:
{
   14ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ef6:	4680      	mov	r8, r0
	return dev->data;
   14ef8:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   14efa:	68fb      	ldr	r3, [r7, #12]
   14efc:	899e      	ldrh	r6, [r3, #12]
   14efe:	4296      	cmp	r6, r2
   14f00:	bfa8      	it	ge
   14f02:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   14f04:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14f06:	2201      	movs	r2, #1
   14f08:	e8d3 0fef 	ldaex	r0, [r3]
   14f0c:	2800      	cmp	r0, #0
   14f0e:	d103      	bne.n	14f18 <uarte_nrfx_fifo_fill+0x26>
   14f10:	e8c3 2fe4 	stlex	r4, r2, [r3]
   14f14:	2c00      	cmp	r4, #0
   14f16:	d1f7      	bne.n	14f08 <uarte_nrfx_fifo_fill+0x16>
   14f18:	d101      	bne.n	14f1e <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   14f1a:	2300      	movs	r3, #0
   14f1c:	e006      	b.n	14f2c <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   14f1e:	2600      	movs	r6, #0
   14f20:	e019      	b.n	14f56 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   14f22:	68fc      	ldr	r4, [r7, #12]
   14f24:	68a4      	ldr	r4, [r4, #8]
   14f26:	5ccd      	ldrb	r5, [r1, r3]
   14f28:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   14f2a:	3301      	adds	r3, #1
   14f2c:	42b3      	cmp	r3, r6
   14f2e:	dbf8      	blt.n	14f22 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   14f30:	f04f 0320 	mov.w	r3, #32
   14f34:	f3ef 8411 	mrs	r4, BASEPRI
   14f38:	f383 8812 	msr	BASEPRI_MAX, r3
   14f3c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   14f40:	4640      	mov	r0, r8
   14f42:	f7ff ff87 	bl	14e54 <is_tx_ready>
   14f46:	b948      	cbnz	r0, 14f5c <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   14f48:	68fb      	ldr	r3, [r7, #12]
   14f4a:	2600      	movs	r6, #0
   14f4c:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   14f4e:	f384 8811 	msr	BASEPRI, r4
   14f52:	f3bf 8f6f 	isb	sy
}
   14f56:	4630      	mov	r0, r6
   14f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   14f5c:	68fb      	ldr	r3, [r7, #12]
   14f5e:	4632      	mov	r2, r6
   14f60:	6899      	ldr	r1, [r3, #8]
   14f62:	4640      	mov	r0, r8
   14f64:	f7ff ff90 	bl	14e88 <tx_start>
   14f68:	e7f1      	b.n	14f4e <uarte_nrfx_fifo_fill+0x5c>

00014f6a <uarte_nrfx_fifo_read>:
	return dev->config;
   14f6a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14f6c:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   14f6e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14f70:	2a00      	cmp	r2, #0
   14f72:	dd0c      	ble.n	14f8e <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f74:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14f78:	b15a      	cbz	r2, 14f92 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14f7a:	2200      	movs	r2, #0
   14f7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   14f80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   14f84:	7d42      	ldrb	r2, [r0, #21]
   14f86:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14f88:	2001      	movs	r0, #1
   14f8a:	6018      	str	r0, [r3, #0]
}
   14f8c:	4770      	bx	lr
	int num_rx = 0;
   14f8e:	2000      	movs	r0, #0
   14f90:	4770      	bx	lr
   14f92:	2000      	movs	r0, #0
}
   14f94:	4770      	bx	lr

00014f96 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   14f96:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14f98:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   14f9a:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   14f9c:	f04f 0020 	mov.w	r0, #32
   14fa0:	f3ef 8311 	mrs	r3, BASEPRI
   14fa4:	f380 8812 	msr	BASEPRI_MAX, r0
   14fa8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   14fac:	68c9      	ldr	r1, [r1, #12]
   14fae:	2000      	movs	r0, #0
   14fb0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   14fb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14fb6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   14fba:	f383 8811 	msr	BASEPRI, r3
   14fbe:	f3bf 8f6f 	isb	sy
}
   14fc2:	4770      	bx	lr

00014fc4 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   14fc4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   14fc6:	68db      	ldr	r3, [r3, #12]
   14fc8:	2201      	movs	r2, #1
   14fca:	739a      	strb	r2, [r3, #14]
}
   14fcc:	4770      	bx	lr

00014fce <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   14fce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14fd0:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   14fd2:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   14fd4:	68db      	ldr	r3, [r3, #12]
   14fd6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14fd8:	b94a      	cbnz	r2, 14fee <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fda:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   14fde:	b15a      	cbz	r2, 14ff8 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   14fe0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14fe4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   14fe8:	d008      	beq.n	14ffc <uarte_nrfx_irq_tx_ready_complete+0x2e>
   14fea:	2001      	movs	r0, #1
   14fec:	e000      	b.n	14ff0 <uarte_nrfx_irq_tx_ready_complete+0x22>
   14fee:	2000      	movs	r0, #0
	if (ready) {
   14ff0:	b108      	cbz	r0, 14ff6 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   14ff2:	2200      	movs	r2, #0
   14ff4:	611a      	str	r2, [r3, #16]
}
   14ff6:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14ff8:	2000      	movs	r0, #0
   14ffa:	e7f9      	b.n	14ff0 <uarte_nrfx_irq_tx_ready_complete+0x22>
   14ffc:	2000      	movs	r0, #0
   14ffe:	e7f7      	b.n	14ff0 <uarte_nrfx_irq_tx_ready_complete+0x22>

00015000 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   15000:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15002:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15004:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   15008:	3800      	subs	r0, #0
   1500a:	bf18      	it	ne
   1500c:	2001      	movne	r0, #1
   1500e:	4770      	bx	lr

00015010 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   15010:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15012:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   15014:	2210      	movs	r2, #16
   15016:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1501a:	4770      	bx	lr

0001501c <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   1501c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1501e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   15020:	2210      	movs	r2, #16
   15022:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15026:	4770      	bx	lr

00015028 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   15028:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1502a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1502c:	f44f 7200 	mov.w	r2, #512	; 0x200
   15030:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   15034:	4770      	bx	lr

00015036 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   15036:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   15038:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1503a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1503e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15042:	4770      	bx	lr

00015044 <uarte_nrfx_irq_is_pending>:
{
   15044:	b538      	push	{r3, r4, r5, lr}
   15046:	4604      	mov	r4, r0
	return dev->config;
   15048:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1504a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1504c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   15050:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   15054:	d106      	bne.n	15064 <uarte_nrfx_irq_is_pending+0x20>
   15056:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1505a:	f013 0f10 	tst.w	r3, #16
   1505e:	d107      	bne.n	15070 <uarte_nrfx_irq_is_pending+0x2c>
   15060:	2000      	movs	r0, #0
}
   15062:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   15064:	f7ff ffb3 	bl	14fce <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   15068:	2800      	cmp	r0, #0
   1506a:	d0f4      	beq.n	15056 <uarte_nrfx_irq_is_pending+0x12>
		||
   1506c:	2001      	movs	r0, #1
   1506e:	e7f8      	b.n	15062 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   15070:	4620      	mov	r0, r4
   15072:	f7ff ffc5 	bl	15000 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   15076:	2800      	cmp	r0, #0
   15078:	d0f3      	beq.n	15062 <uarte_nrfx_irq_is_pending+0x1e>
		||
   1507a:	2001      	movs	r0, #1
   1507c:	e7f1      	b.n	15062 <uarte_nrfx_irq_is_pending+0x1e>

0001507e <uarte_nrfx_irq_update>:
}
   1507e:	2001      	movs	r0, #1
   15080:	4770      	bx	lr

00015082 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   15082:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   15084:	68d8      	ldr	r0, [r3, #12]
   15086:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   15088:	68db      	ldr	r3, [r3, #12]
   1508a:	605a      	str	r2, [r3, #4]
}
   1508c:	4770      	bx	lr

0001508e <wait_tx_ready>:
{
   1508e:	b570      	push	{r4, r5, r6, lr}
   15090:	4606      	mov	r6, r0
   15092:	e014      	b.n	150be <wait_tx_ready+0x30>
		if (res) {
   15094:	b17d      	cbz	r5, 150b6 <wait_tx_ready+0x28>
	__asm__ volatile(
   15096:	f04f 0320 	mov.w	r3, #32
   1509a:	f3ef 8411 	mrs	r4, BASEPRI
   1509e:	f383 8812 	msr	BASEPRI_MAX, r3
   150a2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   150a6:	4630      	mov	r0, r6
   150a8:	f7ff fed4 	bl	14e54 <is_tx_ready>
   150ac:	b9a0      	cbnz	r0, 150d8 <wait_tx_ready+0x4a>
	__asm__ volatile(
   150ae:	f384 8811 	msr	BASEPRI, r4
   150b2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   150b6:	2021      	movs	r0, #33	; 0x21
   150b8:	2100      	movs	r1, #0
   150ba:	f7fc ff59 	bl	11f70 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   150be:	2464      	movs	r4, #100	; 0x64
   150c0:	4630      	mov	r0, r6
   150c2:	f7ff fec7 	bl	14e54 <is_tx_ready>
   150c6:	4605      	mov	r5, r0
   150c8:	2800      	cmp	r0, #0
   150ca:	d1e3      	bne.n	15094 <wait_tx_ready+0x6>
   150cc:	2001      	movs	r0, #1
   150ce:	f000 f8a1 	bl	15214 <nrfx_busy_wait>
   150d2:	3c01      	subs	r4, #1
   150d4:	d1f4      	bne.n	150c0 <wait_tx_ready+0x32>
   150d6:	e7dd      	b.n	15094 <wait_tx_ready+0x6>
}
   150d8:	4620      	mov	r0, r4
   150da:	bd70      	pop	{r4, r5, r6, pc}

000150dc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   150dc:	b510      	push	{r4, lr}
   150de:	4604      	mov	r4, r0
   150e0:	2200      	movs	r2, #0
   150e2:	2101      	movs	r1, #1
   150e4:	2008      	movs	r0, #8
   150e6:	f7ef f8b3 	bl	4250 <z_arm_irq_priority_set>
   150ea:	2008      	movs	r0, #8
   150ec:	f7ef f892 	bl	4214 <arch_irq_enable>
   150f0:	2101      	movs	r1, #1
   150f2:	4620      	mov	r0, r4
   150f4:	f7f0 fb06 	bl	5704 <uarte_instance_init>
   150f8:	bd10      	pop	{r4, pc}

000150fa <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   150fa:	4770      	bx	lr

000150fc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   150fc:	4770      	bx	lr

000150fe <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   150fe:	4770      	bx	lr

00015100 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   15100:	1a40      	subs	r0, r0, r1
}
   15102:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15106:	4770      	bx	lr

00015108 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15108:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1510c:	009b      	lsls	r3, r3, #2
   1510e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15110:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   15114:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   15118:	2200      	movs	r2, #0
   1511a:	601a      	str	r2, [r3, #0]
   1511c:	681b      	ldr	r3, [r3, #0]
}
   1511e:	4770      	bx	lr

00015120 <absolute_time_to_cc>:
}
   15120:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   15124:	4770      	bx	lr

00015126 <full_int_lock>:
	__asm__ volatile(
   15126:	f04f 0320 	mov.w	r3, #32
   1512a:	f3ef 8011 	mrs	r0, BASEPRI
   1512e:	f383 8812 	msr	BASEPRI_MAX, r3
   15132:	f3bf 8f6f 	isb	sy
}
   15136:	4770      	bx	lr

00015138 <full_int_unlock>:
	__asm__ volatile(
   15138:	f380 8811 	msr	BASEPRI, r0
   1513c:	f3bf 8f6f 	isb	sy
}
   15140:	4770      	bx	lr

00015142 <set_absolute_alarm>:
{
   15142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15144:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   15146:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1514a:	f7f0 fbad 	bl	58a8 <get_comparator>
   1514e:	4607      	mov	r7, r0
   15150:	e019      	b.n	15186 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   15152:	2013      	movs	r0, #19
   15154:	f003 fc78 	bl	18a48 <z_impl_k_busy_wait>
}
   15158:	e022      	b.n	151a0 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1515a:	4630      	mov	r0, r6
   1515c:	f7ff ffd4 	bl	15108 <event_clear>
		event_enable(chan);
   15160:	4630      	mov	r0, r6
   15162:	f7f0 fba9 	bl	58b8 <event_enable>
		set_comparator(chan, cc_val);
   15166:	4629      	mov	r1, r5
   15168:	4630      	mov	r0, r6
   1516a:	f7f0 fb93 	bl	5894 <set_comparator>
		now2 = counter();
   1516e:	f7f0 fbb7 	bl	58e0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   15172:	4284      	cmp	r4, r0
   15174:	d01e      	beq.n	151b4 <set_absolute_alarm+0x72>
   15176:	1c81      	adds	r1, r0, #2
   15178:	4628      	mov	r0, r5
   1517a:	f7ff ffc1 	bl	15100 <counter_sub>
	} while ((now2 != now) &&
   1517e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15182:	d917      	bls.n	151b4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   15184:	462f      	mov	r7, r5
		now = counter();
   15186:	f7f0 fbab 	bl	58e0 <counter>
   1518a:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1518c:	4601      	mov	r1, r0
   1518e:	4630      	mov	r0, r6
   15190:	f7f0 fb80 	bl	5894 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   15194:	4621      	mov	r1, r4
   15196:	4638      	mov	r0, r7
   15198:	f7ff ffb2 	bl	15100 <counter_sub>
   1519c:	2801      	cmp	r0, #1
   1519e:	d0d8      	beq.n	15152 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   151a0:	1ca7      	adds	r7, r4, #2
   151a2:	4639      	mov	r1, r7
   151a4:	4628      	mov	r0, r5
   151a6:	f7ff ffab 	bl	15100 <counter_sub>
   151aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   151ae:	d9d4      	bls.n	1515a <set_absolute_alarm+0x18>
			cc_val = now + 2;
   151b0:	463d      	mov	r5, r7
   151b2:	e7d2      	b.n	1515a <set_absolute_alarm+0x18>
}
   151b4:	4628      	mov	r0, r5
   151b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000151b8 <compare_set>:
{
   151b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   151ba:	b083      	sub	sp, #12
   151bc:	4604      	mov	r4, r0
   151be:	4617      	mov	r7, r2
   151c0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   151c2:	f7f0 fb93 	bl	58ec <compare_int_lock>
   151c6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   151c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151ca:	9301      	str	r3, [sp, #4]
   151cc:	9b08      	ldr	r3, [sp, #32]
   151ce:	9300      	str	r3, [sp, #0]
   151d0:	463a      	mov	r2, r7
   151d2:	462b      	mov	r3, r5
   151d4:	4620      	mov	r0, r4
   151d6:	f7f0 fc67 	bl	5aa8 <compare_set_nolocks>
   151da:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   151dc:	4631      	mov	r1, r6
   151de:	4620      	mov	r0, r4
   151e0:	f7f0 fbde 	bl	59a0 <compare_int_unlock>
}
   151e4:	4628      	mov	r0, r5
   151e6:	b003      	add	sp, #12
   151e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000151ea <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   151ea:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   151ec:	2000      	movs	r0, #0
   151ee:	f7ef fa83 	bl	46f8 <sys_arch_reboot>

000151f2 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   151f2:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   151f4:	f7fd f8c4 	bl	12380 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   151f8:	bd08      	pop	{r3, pc}

000151fa <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   151fa:	b510      	push	{r4, lr}
   151fc:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   151fe:	f7ee ff01 	bl	4004 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15202:	f7ee ffd5 	bl	41b0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   15206:	4620      	mov	r0, r4
   15208:	f7ff fff3 	bl	151f2 <hw_cc3xx_init_internal>
	return res;
}
   1520c:	bd10      	pop	{r4, pc}

0001520e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1520e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   15210:	4780      	blx	r0
}
   15212:	bd08      	pop	{r3, pc}

00015214 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   15214:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   15216:	f003 fc17 	bl	18a48 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1521a:	bd08      	pop	{r3, pc}

0001521c <nrfx_clock_enable>:
{
   1521c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1521e:	2005      	movs	r0, #5
   15220:	f7ef f808 	bl	4234 <arch_irq_is_enabled>
   15224:	b138      	cbz	r0, 15236 <nrfx_clock_enable+0x1a>
    p_reg->HFCLKSRC = (uint32_t)(source);
   15226:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1522a:	2201      	movs	r2, #1
   1522c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15230:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   15234:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15236:	2005      	movs	r0, #5
   15238:	f7ee ffec 	bl	4214 <arch_irq_enable>
   1523c:	e7f3      	b.n	15226 <nrfx_clock_enable+0xa>

0001523e <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1523e:	2301      	movs	r3, #1
   15240:	4083      	lsls	r3, r0
   15242:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   15246:	bf14      	ite	ne
   15248:	2001      	movne	r0, #1
   1524a:	2000      	moveq	r0, #0
   1524c:	4770      	bx	lr

0001524e <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   1524e:	4770      	bx	lr

00015250 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   15250:	6903      	ldr	r3, [r0, #16]
   15252:	6183      	str	r3, [r0, #24]
   15254:	4770      	bx	lr

00015256 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   15256:	b510      	push	{r4, lr}
   15258:	4604      	mov	r4, r0
   1525a:	f003 fc04 	bl	18a66 <_ZdlPv>
   1525e:	4620      	mov	r0, r4
   15260:	bd10      	pop	{r4, pc}

00015262 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   15262:	b510      	push	{r4, lr}
   15264:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   15266:	4413      	add	r3, r2
   15268:	f7f1 f9b4 	bl	65d4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   1526c:	4620      	mov	r0, r4
   1526e:	bd10      	pop	{r4, pc}

00015270 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   15270:	6880      	ldr	r0, [r0, #8]
   15272:	4770      	bx	lr

00015274 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   15274:	b570      	push	{r4, r5, r6, lr}
   15276:	4604      	mov	r4, r0
   15278:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   1527a:	6980      	ldr	r0, [r0, #24]
   1527c:	f000 f823 	bl	152c6 <_ZN6tflite14AlignPointerUpEPhj>
   15280:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   15282:	4631      	mov	r1, r6
   15284:	6960      	ldr	r0, [r4, #20]
   15286:	f000 f825 	bl	152d4 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   1528a:	1b40      	subs	r0, r0, r5
   1528c:	bd70      	pop	{r4, r5, r6, pc}

0001528e <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   1528e:	4770      	bx	lr

00015290 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   15290:	b508      	push	{r3, lr}
   15292:	4608      	mov	r0, r1
  Log(format, args);
   15294:	4611      	mov	r1, r2
   15296:	f7f1 f9e3 	bl	6660 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   1529a:	2000      	movs	r0, #0
   1529c:	bd08      	pop	{r3, pc}

0001529e <_ZN6tflite18MicroErrorReporterD0Ev>:
   1529e:	b510      	push	{r4, lr}
   152a0:	4604      	mov	r4, r0
   152a2:	f003 fbe0 	bl	18a66 <_ZdlPv>
   152a6:	4620      	mov	r0, r4
   152a8:	bd10      	pop	{r4, pc}

000152aa <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   152aa:	b40f      	push	{r0, r1, r2, r3}
   152ac:	b500      	push	{lr}
   152ae:	b083      	sub	sp, #12
   152b0:	a904      	add	r1, sp, #16
   152b2:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   152b6:	9101      	str	r1, [sp, #4]
  Log(format, args);
   152b8:	f7f1 f9d2 	bl	6660 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   152bc:	b003      	add	sp, #12
   152be:	f85d eb04 	ldr.w	lr, [sp], #4
   152c2:	b004      	add	sp, #16
   152c4:	4770      	bx	lr

000152c6 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   152c6:	4408      	add	r0, r1
   152c8:	3801      	subs	r0, #1
   152ca:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152ce:	fb01 f000 	mul.w	r0, r1, r0
   152d2:	4770      	bx	lr

000152d4 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   152d4:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152d8:	fb01 f000 	mul.w	r0, r1, r0
   152dc:	4770      	bx	lr

000152de <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   152de:	4408      	add	r0, r1
   152e0:	3801      	subs	r0, #1
   152e2:	fbb0 f0f1 	udiv	r0, r0, r1
}
   152e6:	fb01 f000 	mul.w	r0, r1, r0
   152ea:	4770      	bx	lr

000152ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   152ec:	3801      	subs	r0, #1
   152ee:	280f      	cmp	r0, #15
   152f0:	d83d      	bhi.n	1536e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   152f2:	e8df f000 	tbb	[pc, r0]
   152f6:	180c      	.short	0x180c
   152f8:	303c2820 	.word	0x303c2820
   152fc:	08243414 	.word	0x08243414
   15300:	3c2c3810 	.word	0x3c2c3810
   15304:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
   15306:	2302      	movs	r3, #2
   15308:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1530a:	2000      	movs	r0, #0
      break;
   1530c:	4770      	bx	lr
      *size = sizeof(float);
   1530e:	2304      	movs	r3, #4
   15310:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15312:	2000      	movs	r0, #0
      break;
   15314:	4770      	bx	lr
      *size = sizeof(double);
   15316:	2308      	movs	r3, #8
   15318:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1531a:	2000      	movs	r0, #0
      break;
   1531c:	4770      	bx	lr
      *size = sizeof(int16_t);
   1531e:	2302      	movs	r3, #2
   15320:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15322:	2000      	movs	r0, #0
      break;
   15324:	4770      	bx	lr
      *size = sizeof(int32_t);
   15326:	2304      	movs	r3, #4
   15328:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1532a:	2000      	movs	r0, #0
      break;
   1532c:	4770      	bx	lr
      *size = sizeof(uint32_t);
   1532e:	2304      	movs	r3, #4
   15330:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15332:	2000      	movs	r0, #0
      break;
   15334:	4770      	bx	lr
      *size = sizeof(uint8_t);
   15336:	2301      	movs	r3, #1
   15338:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1533a:	2000      	movs	r0, #0
      break;
   1533c:	4770      	bx	lr
      *size = sizeof(int8_t);
   1533e:	2301      	movs	r3, #1
   15340:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15342:	2000      	movs	r0, #0
      break;
   15344:	4770      	bx	lr
      *size = sizeof(int64_t);
   15346:	2308      	movs	r3, #8
   15348:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1534a:	2000      	movs	r0, #0
      break;
   1534c:	4770      	bx	lr
      *size = sizeof(uint64_t);
   1534e:	2308      	movs	r3, #8
   15350:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15352:	2000      	movs	r0, #0
      break;
   15354:	4770      	bx	lr
      *size = sizeof(bool);
   15356:	2301      	movs	r3, #1
   15358:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1535a:	2000      	movs	r0, #0
      break;
   1535c:	4770      	bx	lr
      *size = sizeof(float) * 2;
   1535e:	2308      	movs	r3, #8
   15360:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   15362:	2000      	movs	r0, #0
      break;
   15364:	4770      	bx	lr
      *size = sizeof(double) * 2;
   15366:	2310      	movs	r3, #16
   15368:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1536a:	2000      	movs	r0, #0
      break;
   1536c:	4770      	bx	lr
  return kTfLiteOk;
   1536e:	2001      	movs	r0, #1
}
   15370:	4770      	bx	lr

00015372 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   15372:	b530      	push	{r4, r5, lr}
   15374:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   15376:	b129      	cbz	r1, 15384 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   15378:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   1537a:	6842      	ldr	r2, [r0, #4]
   1537c:	b1c2      	cbz	r2, 153b0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   1537e:	2300      	movs	r3, #0
  int element_count = 1;
   15380:	2401      	movs	r4, #1
   15382:	e007      	b.n	15394 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   15384:	f003 fb86 	bl	18a94 <abort>
      element_count *= eval_tensor->dims->data[n];
   15388:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1538c:	6849      	ldr	r1, [r1, #4]
   1538e:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   15392:	3301      	adds	r3, #1
   15394:	6811      	ldr	r1, [r2, #0]
   15396:	4299      	cmp	r1, r3
   15398:	dcf6      	bgt.n	15388 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   1539a:	a901      	add	r1, sp, #4
   1539c:	7a00      	ldrb	r0, [r0, #8]
   1539e:	f7ff ffa5 	bl	152ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   153a2:	b918      	cbnz	r0, 153ac <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   153a4:	9b01      	ldr	r3, [sp, #4]
   153a6:	fb03 f404 	mul.w	r4, r3, r4
   153aa:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   153ac:	b003      	add	sp, #12
   153ae:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   153b0:	2401      	movs	r4, #1
   153b2:	e7f2      	b.n	1539a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

000153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   153b4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153b6:	6800      	ldr	r0, [r0, #0]
   153b8:	f7fe fddd 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   153bc:	bd08      	pop	{r3, pc}

000153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   153be:	4770      	bx	lr

000153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   153c0:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153c2:	6800      	ldr	r0, [r0, #0]
   153c4:	f7ff fffb 	bl	153be <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   153c8:	bd08      	pop	{r3, pc}

000153ca <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   153ca:	4770      	bx	lr

000153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   153cc:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153ce:	8800      	ldrh	r0, [r0, #0]
   153d0:	f7ff fffb 	bl	153ca <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   153d4:	bd08      	pop	{r3, pc}

000153d6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   153d6:	4770      	bx	lr

000153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   153d8:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   153da:	f990 0000 	ldrsb.w	r0, [r0]
   153de:	f7ff fffa 	bl	153d6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   153e2:	bd08      	pop	{r3, pc}

000153e4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   153e4:	4770      	bx	lr

000153e6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   153e6:	3901      	subs	r1, #1
  char* p1 = start;
   153e8:	4603      	mov	r3, r0
  while (p1 < p2) {
   153ea:	4288      	cmp	r0, r1
   153ec:	d20a      	bcs.n	15404 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   153ee:	b410      	push	{r4}
    char tmp = *p1;
   153f0:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   153f2:	780c      	ldrb	r4, [r1, #0]
   153f4:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   153f8:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   153fc:	428b      	cmp	r3, r1
   153fe:	d3f7      	bcc.n	153f0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   15400:	bc10      	pop	{r4}
   15402:	4770      	bx	lr
   15404:	4770      	bx	lr

00015406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   15406:	b410      	push	{r4}
   15408:	4604      	mov	r4, r0
  while (*current != 0) {
   1540a:	7803      	ldrb	r3, [r0, #0]
   1540c:	b10b      	cbz	r3, 15412 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   1540e:	3001      	adds	r0, #1
  while (*current != 0) {
   15410:	e7fb      	b.n	1540a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   15412:	3901      	subs	r1, #1
   15414:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   15416:	7813      	ldrb	r3, [r2, #0]
   15418:	b12b      	cbz	r3, 15426 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   1541a:	4288      	cmp	r0, r1
   1541c:	d203      	bcs.n	15426 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   1541e:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   15422:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   15424:	e7f7      	b.n	15416 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   15426:	2300      	movs	r3, #0
   15428:	7003      	strb	r3, [r0, #0]
}
   1542a:	bc10      	pop	{r4}
   1542c:	4770      	bx	lr

0001542e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   1542e:	b538      	push	{r3, r4, r5, lr}
   15430:	4605      	mov	r5, r0
   15432:	4608      	mov	r0, r1
   15434:	460c      	mov	r4, r1
   15436:	e008      	b.n	1544a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   15438:	3330      	adds	r3, #48	; 0x30
   1543a:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   1543c:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   15440:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   15444:	42aa      	cmp	r2, r5
   15446:	d809      	bhi.n	1545c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   15448:	461d      	mov	r5, r3
    int32_t digit = i % base;
   1544a:	fbb5 f3f2 	udiv	r3, r5, r2
   1544e:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   15452:	2b09      	cmp	r3, #9
   15454:	ddf0      	ble.n	15438 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   15456:	3357      	adds	r3, #87	; 0x57
   15458:	b2db      	uxtb	r3, r3
   1545a:	e7ef      	b.n	1543c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   1545c:	2300      	movs	r3, #0
   1545e:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   15460:	4621      	mov	r1, r4
   15462:	f7ff ffc0 	bl	153e6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   15466:	4620      	mov	r0, r4
   15468:	bd38      	pop	{r3, r4, r5, pc}

0001546a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   1546a:	b508      	push	{r3, lr}
  if (i < 0) {
   1546c:	2800      	cmp	r0, #0
   1546e:	db03      	blt.n	15478 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   15470:	220a      	movs	r2, #10
   15472:	f7ff ffdc 	bl	1542e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   15476:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   15478:	222d      	movs	r2, #45	; 0x2d
   1547a:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   1547e:	4240      	negs	r0, r0
   15480:	e7f6      	b.n	15470 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

00015482 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   15482:	b530      	push	{r4, r5, lr}
   15484:	b08d      	sub	sp, #52	; 0x34
   15486:	4604      	mov	r4, r0
   15488:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   1548a:	4669      	mov	r1, sp
   1548c:	4610      	mov	r0, r2
   1548e:	f7ff ffec 	bl	1546a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   15492:	466a      	mov	r2, sp
   15494:	4629      	mov	r1, r5
   15496:	4620      	mov	r0, r4
   15498:	f7ff ffb5 	bl	15406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   1549c:	b00d      	add	sp, #52	; 0x34
   1549e:	bd30      	pop	{r4, r5, pc}

000154a0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   154a0:	b530      	push	{r4, r5, lr}
   154a2:	b08d      	sub	sp, #52	; 0x34
   154a4:	4604      	mov	r4, r0
   154a6:	460d      	mov	r5, r1
   154a8:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   154aa:	461a      	mov	r2, r3
   154ac:	4669      	mov	r1, sp
   154ae:	f7ff ffbe 	bl	1542e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   154b2:	466a      	mov	r2, sp
   154b4:	4629      	mov	r1, r5
   154b6:	4620      	mov	r0, r4
   154b8:	f7ff ffa5 	bl	15406 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   154bc:	b00d      	add	sp, #52	; 0x34
   154be:	bd30      	pop	{r4, r5, pc}

000154c0 <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   154c0:	b510      	push	{r4, lr}
   154c2:	4604      	mov	r4, r0
   154c4:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   154c6:	4621      	mov	r1, r4
   154c8:	f7ff ffcf 	bl	1546a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   154cc:	1b00      	subs	r0, r0, r4
   154ce:	bd10      	pop	{r4, pc}

000154d0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   154d0:	b510      	push	{r4, lr}
   154d2:	4604      	mov	r4, r0
   154d4:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   154d6:	220a      	movs	r2, #10
   154d8:	4621      	mov	r1, r4
   154da:	f7ff ffa8 	bl	1542e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   154de:	1b00      	subs	r0, r0, r4
   154e0:	bd10      	pop	{r4, pc}

000154e2 <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   154e2:	b510      	push	{r4, lr}
   154e4:	4604      	mov	r4, r0
   154e6:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   154e8:	2210      	movs	r2, #16
   154ea:	4621      	mov	r1, r4
   154ec:	f7ff ff9f 	bl	1542e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   154f0:	1b00      	subs	r0, r0, r4
   154f2:	bd10      	pop	{r4, pc}

000154f4 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   154f4:	b510      	push	{r4, lr}
   154f6:	4604      	mov	r4, r0
   154f8:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   154fa:	4621      	mov	r1, r4
   154fc:	f7f1 f94a 	bl	6794 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   15500:	1b00      	subs	r0, r0, r4
   15502:	bd10      	pop	{r4, pc}

00015504 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   15504:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   15506:	2300      	movs	r3, #0
  int result = 1;
   15508:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   1550a:	6811      	ldr	r1, [r2, #0]
   1550c:	4299      	cmp	r1, r3
   1550e:	dd06      	ble.n	1551e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   15510:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   15514:	6849      	ldr	r1, [r1, #4]
   15516:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   1551a:	3301      	adds	r3, #1
   1551c:	e7f5      	b.n	1550a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   1551e:	4770      	bx	lr

00015520 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   15520:	b538      	push	{r3, r4, r5, lr}
   15522:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   15524:	f7ff ff4c 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15528:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   1552a:	4628      	mov	r0, r5
   1552c:	f7ff ff4e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15530:	280a      	cmp	r0, #10
   15532:	d90e      	bls.n	15552 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   15534:	f105 000a 	add.w	r0, r5, #10
   15538:	f7ff ff48 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   1553c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1553e:	b150      	cbz	r0, 15556 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   15540:	4620      	mov	r0, r4
   15542:	f7ff ff37 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   15546:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   15548:	b138      	cbz	r0, 1555a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   1554a:	6800      	ldr	r0, [r0, #0]
   1554c:	f7fe fd13 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   15550:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15552:	2000      	movs	r0, #0
   15554:	e7f2      	b.n	1553c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15556:	2000      	movs	r0, #0
   15558:	e7f6      	b.n	15548 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   1555a:	2000      	movs	r0, #0
   1555c:	e7f8      	b.n	15550 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0001555e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   1555e:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   15560:	7800      	ldrb	r0, [r0, #0]
   15562:	f7ff ff3f 	bl	153e4 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   15566:	bd08      	pop	{r3, pc}

00015568 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   15568:	4770      	bx	lr

0001556a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   1556a:	4770      	bx	lr

0001556c <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   1556c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1556e:	6800      	ldr	r0, [r0, #0]
   15570:	f7ff fffb 	bl	1556a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   15574:	bd08      	pop	{r3, pc}

00015576 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   15576:	4770      	bx	lr

00015578 <_ZN6tflite10MicroGraphD0Ev>:
   15578:	b510      	push	{r4, lr}
   1557a:	4604      	mov	r4, r0
   1557c:	f003 fa73 	bl	18a66 <_ZdlPv>
   15580:	4620      	mov	r0, r4
   15582:	bd10      	pop	{r4, pc}

00015584 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   15584:	6101      	str	r1, [r0, #16]
}
   15586:	4770      	bx	lr

00015588 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   15588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1558c:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   1558e:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   15592:	2700      	movs	r7, #0
   15594:	e017      	b.n	155c6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   15596:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   15598:	2200      	movs	r2, #0
      if (registration->init) {
   1559a:	681b      	ldr	r3, [r3, #0]
   1559c:	b113      	cbz	r3, 155a4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   1559e:	6870      	ldr	r0, [r6, #4]
   155a0:	4798      	blx	r3
        node->user_data =
   155a2:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   155a4:	3501      	adds	r5, #1
   155a6:	4545      	cmp	r5, r8
   155a8:	d20c      	bcs.n	155c4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   155aa:	6933      	ldr	r3, [r6, #16]
   155ac:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   155b0:	242c      	movs	r4, #44	; 0x2c
   155b2:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   155b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   155b8:	695a      	ldr	r2, [r3, #20]
   155ba:	2a20      	cmp	r2, #32
   155bc:	d1eb      	bne.n	15596 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   155be:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   155c0:	69e2      	ldr	r2, [r4, #28]
   155c2:	e7ea      	b.n	1559a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   155c4:	3701      	adds	r7, #1
   155c6:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   155c8:	6818      	ldr	r0, [r3, #0]
   155ca:	f7fe fcd4 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   155ce:	4287      	cmp	r7, r0
   155d0:	d207      	bcs.n	155e2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   155d2:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   155d4:	4639      	mov	r1, r7
   155d6:	68b0      	ldr	r0, [r6, #8]
   155d8:	f7f1 fa32 	bl	6a40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   155dc:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   155de:	2500      	movs	r5, #0
   155e0:	e7e1      	b.n	155a6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   155e2:	f8c6 9014 	str.w	r9, [r6, #20]
}
   155e6:	2000      	movs	r0, #0
   155e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000155ec <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   155ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155f0:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   155f2:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   155f6:	2600      	movs	r6, #0
   155f8:	e013      	b.n	15622 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   155fa:	3401      	adds	r4, #1
   155fc:	42bc      	cmp	r4, r7
   155fe:	d20f      	bcs.n	15620 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   15600:	692b      	ldr	r3, [r5, #16]
   15602:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   15606:	232c      	movs	r3, #44	; 0x2c
   15608:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   1560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   1560e:	2a00      	cmp	r2, #0
   15610:	d0f3      	beq.n	155fa <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   15612:	6852      	ldr	r2, [r2, #4]
   15614:	2a00      	cmp	r2, #0
   15616:	d0f0      	beq.n	155fa <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   15618:	6919      	ldr	r1, [r3, #16]
   1561a:	6868      	ldr	r0, [r5, #4]
   1561c:	4790      	blx	r2
   1561e:	e7ec      	b.n	155fa <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   15620:	3601      	adds	r6, #1
   15622:	69ab      	ldr	r3, [r5, #24]
   15624:	6818      	ldr	r0, [r3, #0]
   15626:	f7fe fca6 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   1562a:	4286      	cmp	r6, r0
   1562c:	d207      	bcs.n	1563e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   1562e:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   15630:	4631      	mov	r1, r6
   15632:	68a8      	ldr	r0, [r5, #8]
   15634:	f7f1 fa04 	bl	6a40 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   15638:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   1563a:	2400      	movs	r4, #0
   1563c:	e7de      	b.n	155fc <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   1563e:	f8c5 8014 	str.w	r8, [r5, #20]
}
   15642:	2000      	movs	r0, #0
   15644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015648 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   15648:	b538      	push	{r3, r4, r5, lr}
   1564a:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   1564c:	4620      	mov	r0, r4
   1564e:	f7ff feb7 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15652:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15654:	4628      	mov	r0, r5
   15656:	f7ff feb9 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1565a:	2808      	cmp	r0, #8
   1565c:	d90d      	bls.n	1567a <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   1565e:	f105 0008 	add.w	r0, r5, #8
   15662:	f7ff feb3 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   15666:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   15668:	b148      	cbz	r0, 1567e <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   1566a:	4620      	mov	r0, r4
   1566c:	f7ff fea2 	bl	153b4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   15670:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   15672:	6820      	ldr	r0, [r4, #0]
   15674:	f7fe fc7f 	bl	13f76 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   15678:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1567a:	2000      	movs	r0, #0
   1567c:	e7f3      	b.n	15666 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1567e:	2400      	movs	r4, #0
   15680:	e7f7      	b.n	15672 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

00015682 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   15682:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   15684:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   15686:	6e98      	ldr	r0, [r3, #104]	; 0x68
   15688:	6803      	ldr	r3, [r0, #0]
   1568a:	68db      	ldr	r3, [r3, #12]
   1568c:	4798      	blx	r3
}
   1568e:	bd08      	pop	{r3, pc}

00015690 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   15690:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   15692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   15696:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1569a:	4770      	bx	lr

0001569c <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   1569c:	b570      	push	{r4, r5, r6, lr}
   1569e:	b082      	sub	sp, #8
   156a0:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   156a2:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   156a4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   156a6:	6802      	ldr	r2, [r0, #0]
   156a8:	6855      	ldr	r5, [r2, #4]
   156aa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   156ac:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   156b0:	6821      	ldr	r1, [r4, #0]
   156b2:	9600      	str	r6, [sp, #0]
   156b4:	47a8      	blx	r5
}
   156b6:	b002      	add	sp, #8
   156b8:	bd70      	pop	{r4, r5, r6, pc}

000156ba <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   156ba:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   156bc:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   156be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   156c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   156c6:	6858      	ldr	r0, [r3, #4]
   156c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   156cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   156d0:	4770      	bx	lr

000156d2 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   156d2:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   156d4:	336c      	adds	r3, #108	; 0x6c
   156d6:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   156d8:	2000      	movs	r0, #0
   156da:	4770      	bx	lr

000156dc <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   156dc:	b508      	push	{r3, lr}
   156de:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   156e0:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   156e2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   156e6:	6e80      	ldr	r0, [r0, #104]	; 0x68
   156e8:	f7f2 fb48 	bl	7d7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   156ec:	bd08      	pop	{r3, pc}

000156ee <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   156ee:	b40e      	push	{r1, r2, r3}
   156f0:	b500      	push	{lr}
   156f2:	b082      	sub	sp, #8
   156f4:	aa03      	add	r2, sp, #12
   156f6:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   156fa:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   156fc:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   156fe:	6898      	ldr	r0, [r3, #8]
   15700:	6803      	ldr	r3, [r0, #0]
   15702:	689b      	ldr	r3, [r3, #8]
   15704:	4798      	blx	r3
}
   15706:	b002      	add	sp, #8
   15708:	f85d eb04 	ldr.w	lr, [sp], #4
   1570c:	b003      	add	sp, #12
   1570e:	4770      	bx	lr

00015710 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   15710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15714:	4604      	mov	r4, r0
   15716:	460d      	mov	r5, r1
   15718:	461e      	mov	r6, r3
   1571a:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   1571e:	6001      	str	r1, [r0, #0]
   15720:	6042      	str	r2, [r0, #4]
   15722:	f8c0 8008 	str.w	r8, [r0, #8]
   15726:	f100 070c 	add.w	r7, r0, #12
   1572a:	225c      	movs	r2, #92	; 0x5c
   1572c:	2100      	movs	r1, #0
   1572e:	4638      	mov	r0, r7
   15730:	f003 f9e4 	bl	18afc <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   15734:	4642      	mov	r2, r8
   15736:	9906      	ldr	r1, [sp, #24]
   15738:	4630      	mov	r0, r6
   1573a:	f000 f90a 	bl	15952 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   1573e:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   15740:	66a0      	str	r0, [r4, #104]	; 0x68
   15742:	462a      	mov	r2, r5
   15744:	4639      	mov	r1, r7
   15746:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1574a:	f7f1 fa6f 	bl	6c2c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   1574e:	2300      	movs	r3, #0
   15750:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   15754:	2201      	movs	r2, #1
   15756:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   1575a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1575e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   15762:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   15766:	9908      	ldr	r1, [sp, #32]
   15768:	4620      	mov	r0, r4
   1576a:	f7f1 fcef 	bl	714c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   1576e:	4620      	mov	r0, r4
   15770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015774 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   15774:	b510      	push	{r4, lr}
   15776:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   15778:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   1577a:	b113      	cbz	r3, 15782 <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   1577c:	306c      	adds	r0, #108	; 0x6c
   1577e:	f7ff ff35 	bl	155ec <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   15782:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   15786:	f7ff fef6 	bl	15576 <_ZN6tflite10MicroGraphD1Ev>
}
   1578a:	4620      	mov	r0, r4
   1578c:	bd10      	pop	{r4, pc}

0001578e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   1578e:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   15790:	306c      	adds	r0, #108	; 0x6c
   15792:	f7f1 fbe7 	bl	6f64 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   15796:	bd08      	pop	{r3, pc}

00015798 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   15798:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   1579a:	6840      	ldr	r0, [r0, #4]
   1579c:	6803      	ldr	r3, [r0, #0]
   1579e:	68db      	ldr	r3, [r3, #12]
   157a0:	4798      	blx	r3
  }
   157a2:	bd08      	pop	{r3, pc}

000157a4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   157a4:	4770      	bx	lr

000157a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   157a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   157a8:	6844      	ldr	r4, [r0, #4]
   157aa:	6843      	ldr	r3, [r0, #4]
   157ac:	6885      	ldr	r5, [r0, #8]
   157ae:	441d      	add	r5, r3
   157b0:	42a5      	cmp	r5, r4
   157b2:	d91a      	bls.n	157ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   157b4:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   157b6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   157ba:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   157be:	6806      	ldr	r6, [r0, #0]
   157c0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   157c4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   157c8:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   157cc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   157d0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   157d4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   157d8:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   157da:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   157dc:	f04f 33ff 	mov.w	r3, #4294967295
   157e0:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   157e2:	2301      	movs	r3, #1
   157e4:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   157e6:	441c      	add	r4, r3
   157e8:	e7df      	b.n	157aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   157ea:	2000      	movs	r0, #0
   157ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000157ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   157ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f2:	b085      	sub	sp, #20
   157f4:	9001      	str	r0, [sp, #4]
   157f6:	4688      	mov	r8, r1
   157f8:	4693      	mov	fp, r2
   157fa:	461f      	mov	r7, r3
   157fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   15800:	2400      	movs	r4, #0
  int planner_index = 0;
   15802:	4626      	mov	r6, r4
   15804:	e000      	b.n	15808 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   15806:	3401      	adds	r4, #1
   15808:	454c      	cmp	r4, r9
   1580a:	d21a      	bcs.n	15842 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   1580c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   15810:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   15814:	7d2b      	ldrb	r3, [r5, #20]
   15816:	2b00      	cmp	r3, #0
   15818:	d0f5      	beq.n	15806 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   1581a:	f04f 33ff 	mov.w	r3, #4294967295
   1581e:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   15820:	f8d8 3000 	ldr.w	r3, [r8]
   15824:	f8d3 a014 	ldr.w	sl, [r3, #20]
   15828:	ab03      	add	r3, sp, #12
   1582a:	4632      	mov	r2, r6
   1582c:	9901      	ldr	r1, [sp, #4]
   1582e:	4640      	mov	r0, r8
   15830:	47d0      	blx	sl
   15832:	4603      	mov	r3, r0
   15834:	b930      	cbnz	r0, 15844 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   15836:	686a      	ldr	r2, [r5, #4]
   15838:	9b03      	ldr	r3, [sp, #12]
   1583a:	445b      	add	r3, fp
   1583c:	6013      	str	r3, [r2, #0]
      ++planner_index;
   1583e:	3601      	adds	r6, #1
   15840:	e7e1      	b.n	15806 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   15842:	2300      	movs	r3, #0
}
   15844:	4618      	mov	r0, r3
   15846:	b005      	add	sp, #20
   15848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001584c <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1584c:	4770      	bx	lr

0001584e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   1584e:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   15850:	6840      	ldr	r0, [r0, #4]
   15852:	6803      	ldr	r3, [r0, #0]
   15854:	68db      	ldr	r3, [r3, #12]
   15856:	2210      	movs	r2, #16
   15858:	4798      	blx	r3
}
   1585a:	bd08      	pop	{r3, pc}

0001585c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   1585c:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   1585e:	6840      	ldr	r0, [r0, #4]
   15860:	6803      	ldr	r3, [r0, #0]
   15862:	695b      	ldr	r3, [r3, #20]
   15864:	4798      	blx	r3
}
   15866:	bd08      	pop	{r3, pc}

00015868 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   15868:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1586a:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   1586c:	6803      	ldr	r3, [r0, #0]
   1586e:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   15870:	2204      	movs	r2, #4
   15872:	2140      	movs	r1, #64	; 0x40
   15874:	4798      	blx	r3
}
   15876:	bd08      	pop	{r3, pc}

00015878 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   15878:	4770      	bx	lr

0001587a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   1587a:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   1587c:	b161      	cbz	r1, 15898 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   1587e:	4613      	mov	r3, r2
   15880:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   15882:	6942      	ldr	r2, [r0, #20]
   15884:	b132      	cbz	r2, 15894 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   15886:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   15888:	6802      	ldr	r2, [r0, #0]
   1588a:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   1588c:	2204      	movs	r2, #4
   1588e:	0099      	lsls	r1, r3, #2
   15890:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   15892:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   15894:	2000      	movs	r0, #0
   15896:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   15898:	f003 f8fc 	bl	18a94 <abort>

0001589c <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   1589c:	b510      	push	{r4, lr}
   1589e:	4604      	mov	r4, r0
   158a0:	f003 f8e1 	bl	18a66 <_ZdlPv>
   158a4:	4620      	mov	r0, r4
   158a6:	bd10      	pop	{r4, pc}

000158a8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   158a8:	b510      	push	{r4, lr}
   158aa:	4604      	mov	r4, r0
   158ac:	f003 f8db 	bl	18a66 <_ZdlPv>
   158b0:	4620      	mov	r0, r4
   158b2:	bd10      	pop	{r4, pc}

000158b4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   158b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158b8:	b082      	sub	sp, #8
   158ba:	4682      	mov	sl, r0
   158bc:	4689      	mov	r9, r1
   158be:	4617      	mov	r7, r2
   158c0:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   158c2:	2500      	movs	r5, #0
   158c4:	e00a      	b.n	158dc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   158c6:	68e1      	ldr	r1, [r4, #12]
   158c8:	9301      	str	r3, [sp, #4]
   158ca:	9100      	str	r1, [sp, #0]
   158cc:	68a3      	ldr	r3, [r4, #8]
   158ce:	4651      	mov	r1, sl
   158d0:	4648      	mov	r0, r9
   158d2:	f000 f8c9 	bl	15a68 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   158d6:	4603      	mov	r3, r0
   158d8:	bb08      	cbnz	r0, 1591e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   158da:	3501      	adds	r5, #1
   158dc:	4545      	cmp	r5, r8
   158de:	d21d      	bcs.n	1591c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   158e0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   158e4:	00e3      	lsls	r3, r4, #3
   158e6:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   158ea:	7d26      	ldrb	r6, [r4, #20]
   158ec:	2e00      	cmp	r6, #0
   158ee:	d0f4      	beq.n	158da <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   158f0:	2110      	movs	r1, #16
   158f2:	58f8      	ldr	r0, [r7, r3]
   158f4:	f7ff fcf3 	bl	152de <_ZN6tflite11AlignSizeUpEjj>
   158f8:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   158fa:	6923      	ldr	r3, [r4, #16]
   158fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   15900:	d1e1      	bne.n	158c6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   15902:	f8d9 3000 	ldr.w	r3, [r9]
   15906:	689e      	ldr	r6, [r3, #8]
   15908:	68e3      	ldr	r3, [r4, #12]
   1590a:	9300      	str	r3, [sp, #0]
   1590c:	68a3      	ldr	r3, [r4, #8]
   1590e:	4651      	mov	r1, sl
   15910:	4648      	mov	r0, r9
   15912:	47b0      	blx	r6
   15914:	4603      	mov	r3, r0
   15916:	2800      	cmp	r0, #0
   15918:	d0df      	beq.n	158da <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   1591a:	e000      	b.n	1591e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   1591c:	2300      	movs	r3, #0
}
   1591e:	4618      	mov	r0, r3
   15920:	b002      	add	sp, #8
   15922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00015926 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   15926:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   15928:	b178      	cbz	r0, 1594a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   1592a:	460c      	mov	r4, r1
   1592c:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   1592e:	b171      	cbz	r1, 1594e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   15930:	6803      	ldr	r3, [r0, #0]
   15932:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   15934:	2204      	movs	r2, #4
   15936:	211c      	movs	r1, #28
   15938:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   1593a:	4606      	mov	r6, r0
   1593c:	b118      	cbz	r0, 15946 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   1593e:	4622      	mov	r2, r4
   15940:	4629      	mov	r1, r5
   15942:	f7f2 fa0d 	bl	7d60 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   15946:	4630      	mov	r0, r6
   15948:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   1594a:	f003 f8a3 	bl	18a94 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1594e:	f003 f8a1 	bl	18a94 <abort>

00015952 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   15952:	b570      	push	{r4, r5, r6, lr}
   15954:	4604      	mov	r4, r0
   15956:	460e      	mov	r6, r1
   15958:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1595a:	2110      	movs	r1, #16
   1595c:	f7ff fcb3 	bl	152c6 <_ZN6tflite14AlignPointerUpEPhj>
   15960:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   15962:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   15964:	1a22      	subs	r2, r4, r0
   15966:	4628      	mov	r0, r5
   15968:	f7f0 fe42 	bl	65f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   1596c:	4629      	mov	r1, r5
   1596e:	f7ff ffda 	bl	15926 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   15972:	bd70      	pop	{r4, r5, r6, pc}

00015974 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   15974:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   15976:	2300      	movs	r3, #0
   15978:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   1597a:	6840      	ldr	r0, [r0, #4]
   1597c:	6803      	ldr	r3, [r0, #0]
   1597e:	689b      	ldr	r3, [r3, #8]
   15980:	2204      	movs	r2, #4
   15982:	2160      	movs	r1, #96	; 0x60
   15984:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   15986:	bd08      	pop	{r3, pc}

00015988 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   15988:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   1598a:	6840      	ldr	r0, [r0, #4]
   1598c:	f7ff fc70 	bl	15270 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   15990:	2104      	movs	r1, #4
   15992:	f7ff fc98 	bl	152c6 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   15996:	bd08      	pop	{r3, pc}

00015998 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   15998:	b570      	push	{r4, r5, r6, lr}
   1599a:	4605      	mov	r5, r0
   1599c:	460e      	mov	r6, r1
  ResetTempAllocations();
   1599e:	6803      	ldr	r3, [r0, #0]
   159a0:	689b      	ldr	r3, [r3, #8]
   159a2:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   159a4:	4628      	mov	r0, r5
   159a6:	f7ff ffef 	bl	15988 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   159aa:	2300      	movs	r3, #0
   159ac:	e000      	b.n	159b0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   159ae:	3301      	adds	r3, #1
   159b0:	6969      	ldr	r1, [r5, #20]
   159b2:	4299      	cmp	r1, r3
   159b4:	d907      	bls.n	159c6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   159b6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   159ba:	6854      	ldr	r4, [r2, #4]
   159bc:	f1b4 3fff 	cmp.w	r4, #4294967295
   159c0:	d1f5      	bne.n	159ae <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   159c2:	6056      	str	r6, [r2, #4]
   159c4:	e7f3      	b.n	159ae <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   159c6:	6868      	ldr	r0, [r5, #4]
   159c8:	6803      	ldr	r3, [r0, #0]
   159ca:	689b      	ldr	r3, [r3, #8]
   159cc:	310c      	adds	r1, #12
   159ce:	2204      	movs	r2, #4
   159d0:	00c9      	lsls	r1, r1, #3
   159d2:	4798      	blx	r3
}
   159d4:	bd70      	pop	{r4, r5, r6, pc}

000159d6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   159d6:	6880      	ldr	r0, [r0, #8]
   159d8:	4770      	bx	lr

000159da <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   159da:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   159dc:	b119      	cbz	r1, 159e6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   159de:	b122      	cbz	r2, 159ea <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   159e0:	601a      	str	r2, [r3, #0]
}
   159e2:	2000      	movs	r0, #0
   159e4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   159e6:	f003 f855 	bl	18a94 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   159ea:	f003 f853 	bl	18a94 <abort>

000159ee <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   159ee:	b508      	push	{r3, lr}
   159f0:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   159f2:	460a      	mov	r2, r1
   159f4:	68c1      	ldr	r1, [r0, #12]
   159f6:	6840      	ldr	r0, [r0, #4]
   159f8:	f7ff ffef 	bl	159da <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   159fc:	bd08      	pop	{r3, pc}

000159fe <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   159fe:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   15a00:	b119      	cbz	r1, 15a0a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   15a02:	b122      	cbz	r2, 15a0e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   15a04:	601a      	str	r2, [r3, #0]
}
   15a06:	2000      	movs	r0, #0
   15a08:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   15a0a:	f003 f843 	bl	18a94 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   15a0e:	f003 f841 	bl	18a94 <abort>

00015a12 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   15a12:	4770      	bx	lr

00015a14 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   15a14:	6880      	ldr	r0, [r0, #8]
   15a16:	4770      	bx	lr

00015a18 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   15a18:	b510      	push	{r4, lr}
   15a1a:	4604      	mov	r4, r0
}
   15a1c:	f003 f823 	bl	18a66 <_ZdlPv>
   15a20:	4620      	mov	r0, r4
   15a22:	bd10      	pop	{r4, pc}

00015a24 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   15a24:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   15a26:	2301      	movs	r3, #1
    any_swapped = false;
   15a28:	2700      	movs	r7, #0
   15a2a:	e000      	b.n	15a2e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   15a2c:	3301      	adds	r3, #1
   15a2e:	4293      	cmp	r3, r2
   15a30:	da16      	bge.n	15a60 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   15a32:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   15a36:	3c01      	subs	r4, #1
   15a38:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   15a3c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   15a40:	42b5      	cmp	r5, r6
   15a42:	daf3      	bge.n	15a2c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   15a44:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   15a48:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   15a4c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   15a50:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   15a54:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   15a58:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   15a5c:	2701      	movs	r7, #1
   15a5e:	e7e5      	b.n	15a2c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   15a60:	2f00      	cmp	r7, #0
   15a62:	d1e0      	bne.n	15a26 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   15a64:	bcf0      	pop	{r4, r5, r6, r7}
   15a66:	4770      	bx	lr

00015a68 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   15a68:	b570      	push	{r4, r5, r6, lr}
   15a6a:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   15a6c:	68c5      	ldr	r5, [r0, #12]
   15a6e:	6886      	ldr	r6, [r0, #8]
   15a70:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   15a74:	6804      	ldr	r4, [r0, #0]
   15a76:	68a4      	ldr	r4, [r4, #8]
   15a78:	9e06      	ldr	r6, [sp, #24]
   15a7a:	9600      	str	r6, [sp, #0]
   15a7c:	47a0      	blx	r4
   15a7e:	b918      	cbnz	r0, 15a88 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   15a80:	9b07      	ldr	r3, [sp, #28]
   15a82:	606b      	str	r3, [r5, #4]
}
   15a84:	b002      	add	sp, #8
   15a86:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   15a88:	2001      	movs	r0, #1
   15a8a:	e7fb      	b.n	15a84 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00015a8c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   15a8c:	68c0      	ldr	r0, [r0, #12]
   15a8e:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   15a90:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   15a94:	6888      	ldr	r0, [r1, #8]
   15a96:	4298      	cmp	r0, r3
   15a98:	dc04      	bgt.n	15aa4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   15a9a:	68cb      	ldr	r3, [r1, #12]
   15a9c:	4293      	cmp	r3, r2
   15a9e:	db03      	blt.n	15aa8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   15aa0:	2001      	movs	r0, #1
   15aa2:	4770      	bx	lr
    return false;
   15aa4:	2000      	movs	r0, #0
   15aa6:	4770      	bx	lr
    return false;
   15aa8:	2000      	movs	r0, #0
}
   15aaa:	4770      	bx	lr

00015aac <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   15aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15aae:	4605      	mov	r5, r0
   15ab0:	4616      	mov	r6, r2
   15ab2:	461f      	mov	r7, r3
  if (start == nullptr) {
   15ab4:	b1c9      	cbz	r1, 15aea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   15ab6:	688b      	ldr	r3, [r1, #8]
   15ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
   15abc:	d01c      	beq.n	15af8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   15abe:	6984      	ldr	r4, [r0, #24]
   15ac0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15ac4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   15ac8:	463b      	mov	r3, r7
   15aca:	4632      	mov	r2, r6
   15acc:	4621      	mov	r1, r4
   15ace:	4628      	mov	r0, r5
   15ad0:	f7ff ffdc 	bl	15a8c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   15ad4:	b998      	cbnz	r0, 15afe <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   15ad6:	68a4      	ldr	r4, [r4, #8]
   15ad8:	f1b4 3fff 	cmp.w	r4, #4294967295
   15adc:	d00e      	beq.n	15afc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   15ade:	69a9      	ldr	r1, [r5, #24]
   15ae0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   15ae4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   15ae8:	e7ee      	b.n	15ac8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   15aea:	6984      	ldr	r4, [r0, #24]
   15aec:	6a03      	ldr	r3, [r0, #32]
   15aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15af2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   15af6:	e7e7      	b.n	15ac8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   15af8:	2400      	movs	r4, #0
   15afa:	e000      	b.n	15afe <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   15afc:	2400      	movs	r4, #0
}
   15afe:	4620      	mov	r0, r4
   15b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015b02 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   15b02:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   15b06:	2b00      	cmp	r3, #0
   15b08:	f000 80d5 	beq.w	15cb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   15b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b10:	b083      	sub	sp, #12
   15b12:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   15b14:	6886      	ldr	r6, [r0, #8]
   15b16:	2e00      	cmp	r6, #0
   15b18:	f000 80ca 	beq.w	15cb0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   15b1c:	2000      	movs	r0, #0
   15b1e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   15b22:	4603      	mov	r3, r0
   15b24:	e00e      	b.n	15b44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   15b26:	6925      	ldr	r5, [r4, #16]
   15b28:	5852      	ldr	r2, [r2, r1]
   15b2a:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   15b2e:	6962      	ldr	r2, [r4, #20]
   15b30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   15b34:	68e2      	ldr	r2, [r4, #12]
   15b36:	4411      	add	r1, r2
   15b38:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b3a:	6849      	ldr	r1, [r1, #4]
   15b3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   15b40:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   15b42:	3301      	adds	r3, #1
   15b44:	68a2      	ldr	r2, [r4, #8]
   15b46:	429a      	cmp	r2, r3
   15b48:	dd15      	ble.n	15b76 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   15b4a:	68e2      	ldr	r2, [r4, #12]
   15b4c:	0119      	lsls	r1, r3, #4
   15b4e:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   15b52:	686d      	ldr	r5, [r5, #4]
   15b54:	f1b5 3fff 	cmp.w	r5, #4294967295
   15b58:	d1e5      	bne.n	15b26 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   15b5a:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   15b5c:	6925      	ldr	r5, [r4, #16]
   15b5e:	5852      	ldr	r2, [r2, r1]
   15b60:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   15b64:	6962      	ldr	r2, [r4, #20]
   15b66:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   15b6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15b6c:	f04f 31ff 	mov.w	r1, #4294967295
   15b70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15b74:	e7e5      	b.n	15b42 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15b76:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   15b78:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   15b7a:	1a12      	subs	r2, r2, r0
   15b7c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   15b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15b84:	f7ff ff4e 	bl	15a24 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   15b88:	2300      	movs	r3, #0
   15b8a:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   15b8c:	2301      	movs	r3, #1
   15b8e:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   15b90:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   15b94:	f04f 33ff 	mov.w	r3, #4294967295
   15b98:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   15b9c:	6963      	ldr	r3, [r4, #20]
   15b9e:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   15ba0:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   15ba4:	68e2      	ldr	r2, [r4, #12]
   15ba6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15baa:	6852      	ldr	r2, [r2, #4]
   15bac:	f1b2 3fff 	cmp.w	r2, #4294967295
   15bb0:	d007      	beq.n	15bc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   15bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bb8:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   15bbc:	f04f 0901 	mov.w	r9, #1
   15bc0:	e036      	b.n	15c30 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   15bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15bc4:	2100      	movs	r1, #0
   15bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   15bca:	e7f2      	b.n	15bb2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   15bcc:	2100      	movs	r1, #0
    int candidate_offset = 0;
   15bce:	460d      	mov	r5, r1
   15bd0:	f8cd a000 	str.w	sl, [sp]
   15bd4:	f8cd 9004 	str.w	r9, [sp, #4]
   15bd8:	4681      	mov	r9, r0
   15bda:	4692      	mov	sl, r2
   15bdc:	e004      	b.n	15be8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   15bde:	b1d9      	cbz	r1, 15c18 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   15be0:	680b      	ldr	r3, [r1, #0]
   15be2:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   15be4:	459b      	cmp	fp, r3
   15be6:	dd12      	ble.n	15c0e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   15be8:	460e      	mov	r6, r1
   15bea:	4653      	mov	r3, sl
   15bec:	464a      	mov	r2, r9
   15bee:	4620      	mov	r0, r4
   15bf0:	f7ff ff5c 	bl	15aac <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   15bf4:	4601      	mov	r1, r0
        if (prior_entry) {
   15bf6:	2e00      	cmp	r6, #0
   15bf8:	d0f1      	beq.n	15bde <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   15bfa:	6873      	ldr	r3, [r6, #4]
   15bfc:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   15bfe:	6833      	ldr	r3, [r6, #0]
   15c00:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   15c04:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   15c06:	429d      	cmp	r5, r3
   15c08:	dae9      	bge.n	15bde <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   15c0a:	461d      	mov	r5, r3
   15c0c:	e7e7      	b.n	15bde <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   15c0e:	f8dd a000 	ldr.w	sl, [sp]
   15c12:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15c16:	e01f      	b.n	15c58 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   15c18:	f8dd a000 	ldr.w	sl, [sp]
   15c1c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   15c20:	e01a      	b.n	15c58 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   15c22:	6a23      	ldr	r3, [r4, #32]
   15c24:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   15c28:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   15c2a:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   15c2c:	f109 0901 	add.w	r9, r9, #1
   15c30:	68a3      	ldr	r3, [r4, #8]
   15c32:	454b      	cmp	r3, r9
   15c34:	dd3c      	ble.n	15cb0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   15c36:	6963      	ldr	r3, [r4, #20]
   15c38:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   15c3c:	f8d4 800c 	ldr.w	r8, [r4, #12]
   15c40:	013a      	lsls	r2, r7, #4
   15c42:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   15c46:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   15c4a:	689a      	ldr	r2, [r3, #8]
   15c4c:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   15c4e:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   15c50:	685d      	ldr	r5, [r3, #4]
   15c52:	f1b5 3fff 	cmp.w	r5, #4294967295
   15c56:	d0b9      	beq.n	15bcc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   15c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c5a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   15c5e:	69a2      	ldr	r2, [r4, #24]
   15c60:	69e3      	ldr	r3, [r4, #28]
   15c62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15c66:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   15c6a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   15c6e:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   15c72:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   15c74:	1c7b      	adds	r3, r7, #1
   15c76:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   15c78:	f8da 3000 	ldr.w	r3, [sl]
   15c7c:	42ab      	cmp	r3, r5
   15c7e:	dcd0      	bgt.n	15c22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   15c80:	4650      	mov	r0, sl
   15c82:	e000      	b.n	15c86 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   15c84:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   15c86:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   15c88:	f1b3 3fff 	cmp.w	r3, #4294967295
   15c8c:	d00c      	beq.n	15ca8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   15c8e:	69a2      	ldr	r2, [r4, #24]
   15c90:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15c94:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   15c98:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   15c9c:	42aa      	cmp	r2, r5
   15c9e:	ddf1      	ble.n	15c84 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   15ca0:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   15ca4:	6087      	str	r7, [r0, #8]
          break;
   15ca6:	e7c1      	b.n	15c2c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   15ca8:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   15caa:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   15cae:	e7bd      	b.n	15c2c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   15cb0:	b003      	add	sp, #12
   15cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb6:	4770      	bx	lr

00015cb8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   15cb8:	b570      	push	{r4, r5, r6, lr}
   15cba:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   15cbc:	f7ff ff21 	bl	15b02 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   15cc0:	68a3      	ldr	r3, [r4, #8]
   15cc2:	b1d3      	cbz	r3, 15cfa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   15cc4:	69a6      	ldr	r6, [r4, #24]
   15cc6:	6a23      	ldr	r3, [r4, #32]
   15cc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15ccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   15cd0:	2000      	movs	r0, #0
   15cd2:	e007      	b.n	15ce4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   15cd4:	689b      	ldr	r3, [r3, #8]
   15cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   15cda:	d00f      	beq.n	15cfc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   15cdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15ce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   15ce4:	b153      	cbz	r3, 15cfc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   15ce6:	68e5      	ldr	r5, [r4, #12]
   15ce8:	685a      	ldr	r2, [r3, #4]
   15cea:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   15cec:	681a      	ldr	r2, [r3, #0]
   15cee:	5869      	ldr	r1, [r5, r1]
   15cf0:	440a      	add	r2, r1
    if (current_size > max_size) {
   15cf2:	4290      	cmp	r0, r2
   15cf4:	d2ee      	bcs.n	15cd4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   15cf6:	4610      	mov	r0, r2
   15cf8:	e7ec      	b.n	15cd4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   15cfa:	2000      	movs	r0, #0
}
   15cfc:	bd70      	pop	{r4, r5, r6, pc}

00015cfe <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   15cfe:	3001      	adds	r0, #1
}
   15d00:	0080      	lsls	r0, r0, #2
   15d02:	4770      	bx	lr

00015d04 <TfLiteIntArrayEqualsArray>:
  if (a == NULL) return (b_size == 0);
   15d04:	b180      	cbz	r0, 15d28 <TfLiteIntArrayEqualsArray+0x24>
                              const int b_data[]) {
   15d06:	b430      	push	{r4, r5}
   15d08:	4605      	mov	r5, r0
  if (a->size != b_size) return 0;
   15d0a:	6804      	ldr	r4, [r0, #0]
   15d0c:	428c      	cmp	r4, r1
   15d0e:	d111      	bne.n	15d34 <TfLiteIntArrayEqualsArray+0x30>
  int i = 0;
   15d10:	2300      	movs	r3, #0
  for (; i < a->size; i++)
   15d12:	429c      	cmp	r4, r3
   15d14:	dd0c      	ble.n	15d30 <TfLiteIntArrayEqualsArray+0x2c>
    if (a->data[i] != b_data[i]) return 0;
   15d16:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   15d1a:	6848      	ldr	r0, [r1, #4]
   15d1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   15d20:	4288      	cmp	r0, r1
   15d22:	d10a      	bne.n	15d3a <TfLiteIntArrayEqualsArray+0x36>
  for (; i < a->size; i++)
   15d24:	3301      	adds	r3, #1
   15d26:	e7f4      	b.n	15d12 <TfLiteIntArrayEqualsArray+0xe>
  if (a == NULL) return (b_size == 0);
   15d28:	fab1 f081 	clz	r0, r1
   15d2c:	0940      	lsrs	r0, r0, #5
}
   15d2e:	4770      	bx	lr
  return 1;
   15d30:	2001      	movs	r0, #1
   15d32:	e000      	b.n	15d36 <TfLiteIntArrayEqualsArray+0x32>
  if (a->size != b_size) return 0;
   15d34:	2000      	movs	r0, #0
}
   15d36:	bc30      	pop	{r4, r5}
   15d38:	4770      	bx	lr
    if (a->data[i] != b_data[i]) return 0;
   15d3a:	2000      	movs	r0, #0
   15d3c:	e7fb      	b.n	15d36 <TfLiteIntArrayEqualsArray+0x32>

00015d3e <TfLiteIntArrayEqual>:
  if (a == b) return 1;
   15d3e:	4288      	cmp	r0, r1
   15d40:	d008      	beq.n	15d54 <TfLiteIntArrayEqual+0x16>
  if (a == NULL || b == NULL) return 0;
   15d42:	b148      	cbz	r0, 15d58 <TfLiteIntArrayEqual+0x1a>
   15d44:	b151      	cbz	r1, 15d5c <TfLiteIntArrayEqual+0x1e>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
   15d46:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
   15d48:	460a      	mov	r2, r1
   15d4a:	f852 1b04 	ldr.w	r1, [r2], #4
   15d4e:	f7ff ffd9 	bl	15d04 <TfLiteIntArrayEqualsArray>
}
   15d52:	bd08      	pop	{r3, pc}
  if (a == b) return 1;
   15d54:	2001      	movs	r0, #1
   15d56:	4770      	bx	lr
  if (a == NULL || b == NULL) return 0;
   15d58:	2000      	movs	r0, #0
   15d5a:	4770      	bx	lr
   15d5c:	2000      	movs	r0, #0
}
   15d5e:	4770      	bx	lr

00015d60 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   15d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15d64:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   15d66:	2401      	movs	r4, #1
   15d68:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   15d6c:	1a12      	subs	r2, r2, r0
   15d6e:	f1a2 0120 	sub.w	r1, r2, #32
   15d72:	f1c2 0320 	rsb	r3, r2, #32
   15d76:	fa04 f101 	lsl.w	r1, r4, r1
   15d7a:	fa24 f303 	lsr.w	r3, r4, r3
   15d7e:	ea41 0703 	orr.w	r7, r1, r3
   15d82:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   15d86:	f10c 30ff 	add.w	r0, ip, #4294967295
   15d8a:	f7ea fb37 	bl	3fc <__aeabi_i2d>
   15d8e:	4680      	mov	r8, r0
   15d90:	4689      	mov	r9, r1
   15d92:	4628      	mov	r0, r5
   15d94:	4639      	mov	r1, r7
   15d96:	f7ea fb6d 	bl	474 <__aeabi_l2d>
   15d9a:	4602      	mov	r2, r0
   15d9c:	460b      	mov	r3, r1
   15d9e:	4640      	mov	r0, r8
   15da0:	4649      	mov	r1, r9
   15da2:	f7ea fb95 	bl	4d0 <__aeabi_dmul>
   15da6:	4680      	mov	r8, r0
   15da8:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   15daa:	f1a6 0120 	sub.w	r1, r6, #32
   15dae:	f1c6 0320 	rsb	r3, r6, #32
   15db2:	fa04 f101 	lsl.w	r1, r4, r1
   15db6:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   15dba:	fa04 f006 	lsl.w	r0, r4, r6
   15dbe:	4319      	orrs	r1, r3
   15dc0:	f7ea fb58 	bl	474 <__aeabi_l2d>
   15dc4:	4602      	mov	r2, r0
   15dc6:	460b      	mov	r3, r1
  const double max_input_rescaled =
   15dc8:	4640      	mov	r0, r8
   15dca:	4649      	mov	r1, r9
   15dcc:	f7ea fcaa 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   15dd0:	f7eb fdaa 	bl	1928 <floor>
   15dd4:	f7ea fe16 	bl	a04 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   15dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   15ddc:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15dde:	680b      	ldr	r3, [r1, #0]
   15de0:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15de4:	2a00      	cmp	r2, #0
   15de6:	db10      	blt.n	15e0a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   15de8:	428a      	cmp	r2, r1
   15dea:	da10      	bge.n	15e0e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15df0:	f1b1 3fff 	cmp.w	r1, #4294967295
   15df4:	d00d      	beq.n	15e12 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15df6:	2900      	cmp	r1, #0
   15df8:	db0d      	blt.n	15e16 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15dfa:	6883      	ldr	r3, [r0, #8]
   15dfc:	b113      	cbz	r3, 15e04 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15dfe:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15e02:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15e04:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15e06:	4798      	blx	r3
   15e08:	e7fb      	b.n	15e02 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15e0a:	2000      	movs	r0, #0
   15e0c:	e7f9      	b.n	15e02 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e0e:	2000      	movs	r0, #0
   15e10:	e7f7      	b.n	15e02 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e12:	2000      	movs	r0, #0
   15e14:	e7f5      	b.n	15e02 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   15e16:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   15e18:	e7f3      	b.n	15e02 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00015e1a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   15e1a:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   15e1c:	684b      	ldr	r3, [r1, #4]
   15e1e:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   15e22:	2a00      	cmp	r2, #0
   15e24:	db10      	blt.n	15e48 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   15e26:	4291      	cmp	r1, r2
   15e28:	dd10      	ble.n	15e4c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   15e2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   15e2e:	f1b1 3fff 	cmp.w	r1, #4294967295
   15e32:	d00d      	beq.n	15e50 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   15e34:	2900      	cmp	r1, #0
   15e36:	db0d      	blt.n	15e54 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   15e38:	6883      	ldr	r3, [r0, #8]
   15e3a:	b113      	cbz	r3, 15e42 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   15e3c:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   15e40:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   15e42:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15e44:	4798      	blx	r3
   15e46:	e7fb      	b.n	15e40 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   15e48:	2000      	movs	r0, #0
   15e4a:	e7f9      	b.n	15e40 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e4c:	2000      	movs	r0, #0
   15e4e:	e7f7      	b.n	15e40 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e50:	2000      	movs	r0, #0
   15e52:	e7f5      	b.n	15e40 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   15e54:	2000      	movs	r0, #0
   15e56:	e7f3      	b.n	15e40 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00015e58 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   15e58:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   15e5a:	f7ff ffbf 	bl	15ddc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   15e5e:	bd08      	pop	{r3, pc}

00015e60 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   15e60:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   15e62:	6889      	ldr	r1, [r1, #8]
   15e64:	6880      	ldr	r0, [r0, #8]
   15e66:	f7ff ff6a 	bl	15d3e <TfLiteIntArrayEqual>
}
   15e6a:	3800      	subs	r0, #0
   15e6c:	bf18      	it	ne
   15e6e:	2001      	movne	r0, #1
   15e70:	bd08      	pop	{r3, pc}

00015e72 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   15e72:	1e43      	subs	r3, r0, #1
   15e74:	2b04      	cmp	r3, #4
   15e76:	d804      	bhi.n	15e82 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   15e78:	e8df f003 	tbb	[pc, r3]
   15e7c:	04040404 	.word	0x04040404
   15e80:	04          	.byte	0x04
   15e81:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   15e82:	2000      	movs	r0, #0
}
   15e84:	4770      	bx	lr

00015e86 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   15e86:	b118      	cbz	r0, 15e90 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   15e88:	2801      	cmp	r0, #1
   15e8a:	d103      	bne.n	15e94 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   15e8c:	2002      	movs	r0, #2
   15e8e:	4770      	bx	lr
  switch (padding) {
   15e90:	2001      	movs	r0, #1
   15e92:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   15e94:	2000      	movs	r0, #0
}
   15e96:	4770      	bx	lr

00015e98 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   15e98:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   15e9a:	b118      	cbz	r0, 15ea4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   15e9c:	b121      	cbz	r1, 15ea8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   15e9e:	b12a      	cbz	r2, 15eac <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   15ea0:	b133      	cbz	r3, 15eb0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   15ea2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   15ea4:	f002 fdf6 	bl	18a94 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   15ea8:	f002 fdf4 	bl	18a94 <abort>
  TFLITE_DCHECK(allocator != nullptr);
   15eac:	f002 fdf2 	bl	18a94 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   15eb0:	f002 fdf0 	bl	18a94 <abort>

00015eb4 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   15eb4:	b40e      	push	{r1, r2, r3}
   15eb6:	b500      	push	{lr}
   15eb8:	b082      	sub	sp, #8
   15eba:	aa03      	add	r2, sp, #12
   15ebc:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15ec0:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15ec2:	6803      	ldr	r3, [r0, #0]
   15ec4:	689b      	ldr	r3, [r3, #8]
   15ec6:	4798      	blx	r3
  va_end(args);
  return code;
}
   15ec8:	b002      	add	sp, #8
   15eca:	f85d eb04 	ldr.w	lr, [sp], #4
   15ece:	b003      	add	sp, #12
   15ed0:	4770      	bx	lr

00015ed2 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   15ed2:	b40c      	push	{r2, r3}
   15ed4:	b500      	push	{lr}
   15ed6:	b083      	sub	sp, #12
   15ed8:	aa04      	add	r2, sp, #16
   15eda:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   15ede:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   15ee0:	6803      	ldr	r3, [r0, #0]
   15ee2:	689b      	ldr	r3, [r3, #8]
   15ee4:	4798      	blx	r3
  va_end(args);
  return code;
}
   15ee6:	b003      	add	sp, #12
   15ee8:	f85d eb04 	ldr.w	lr, [sp], #4
   15eec:	b002      	add	sp, #8
   15eee:	4770      	bx	lr

00015ef0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   15ef0:	b570      	push	{r4, r5, r6, lr}
   15ef2:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   15ef4:	b368      	cbz	r0, 15f52 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   15ef6:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   15ef8:	f7ff fa62 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15efc:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15efe:	4628      	mov	r0, r5
   15f00:	f7ff fa64 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f04:	280a      	cmp	r0, #10
   15f06:	d926      	bls.n	15f56 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   15f08:	f105 000a 	add.w	r0, r5, #10
   15f0c:	f7ff fa5e 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f10:	b318      	cbz	r0, 15f5a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   15f12:	4420      	add	r0, r4
   15f14:	f7ff fa54 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   15f18:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   15f1a:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   15f1e:	4620      	mov	r0, r4
   15f20:	f7ff fa4e 	bl	153c0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   15f24:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   15f26:	4630      	mov	r0, r6
   15f28:	f7ff fa50 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f2c:	2804      	cmp	r0, #4
   15f2e:	d916      	bls.n	15f5e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   15f30:	1d30      	adds	r0, r6, #4
   15f32:	f7ff fa4b 	bl	153cc <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f36:	b1a0      	cbz	r0, 15f62 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   15f38:	4420      	add	r0, r4
   15f3a:	f7ff fa4d 	bl	153d8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   15f3e:	b2c0      	uxtb	r0, r0
   15f40:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   15f44:	42a8      	cmp	r0, r5
   15f46:	d80e      	bhi.n	15f66 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   15f48:	f10d 0306 	add.w	r3, sp, #6
}
   15f4c:	7818      	ldrb	r0, [r3, #0]
   15f4e:	b002      	add	sp, #8
   15f50:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   15f52:	f002 fd9f 	bl	18a94 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f56:	2000      	movs	r0, #0
   15f58:	e7da      	b.n	15f10 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f5a:	2000      	movs	r0, #0
   15f5c:	e7dc      	b.n	15f18 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   15f5e:	2000      	movs	r0, #0
   15f60:	e7e9      	b.n	15f36 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   15f62:	2000      	movs	r0, #0
   15f64:	e7eb      	b.n	15f3e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   15f66:	f10d 0307 	add.w	r3, sp, #7
   15f6a:	e7ef      	b.n	15f4c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00015f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15f6c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15f6e:	b108      	cbz	r0, 15f74 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   15f70:	6800      	ldr	r0, [r0, #0]
   15f72:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15f74:	f002 fd8e 	bl	18a94 <abort>

00015f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15f78:	b108      	cbz	r0, 15f7e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   15f7a:	6800      	ldr	r0, [r0, #0]
   15f7c:	4770      	bx	lr
}
   15f7e:	4770      	bx	lr

00015f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   15f80:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   15f82:	b108      	cbz	r0, 15f88 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   15f84:	6800      	ldr	r0, [r0, #0]
   15f86:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   15f88:	f002 fd84 	bl	18a94 <abort>

00015f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   15f8c:	b108      	cbz	r0, 15f92 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   15f8e:	6800      	ldr	r0, [r0, #0]
   15f90:	4770      	bx	lr
}
   15f92:	4770      	bx	lr

00015f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   15f94:	4770      	bx	lr

00015f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   15f96:	4008      	ands	r0, r1
   15f98:	4770      	bx	lr

00015f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   15f9a:	4108      	asrs	r0, r1
   15f9c:	4770      	bx	lr

00015f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   15f9e:	4408      	add	r0, r1
   15fa0:	4770      	bx	lr

00015fa2 <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   15fa2:	43c0      	mvns	r0, r0
   15fa4:	4770      	bx	lr

00015fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   15fa6:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   15fa8:	b110      	cbz	r0, 15fb0 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   15faa:	2000      	movs	r0, #0
   15fac:	f7ff fff9 	bl	15fa2 <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   15fb0:	bd08      	pop	{r3, pc}

00015fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   15fb2:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   15fb4:	4288      	cmp	r0, r1
   15fb6:	bfac      	ite	ge
   15fb8:	2000      	movge	r0, #0
   15fba:	2001      	movlt	r0, #1
   15fbc:	f7ff fff3 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15fc0:	bd08      	pop	{r3, pc}

00015fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   15fc2:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   15fc4:	4288      	cmp	r0, r1
   15fc6:	bfd4      	ite	le
   15fc8:	2000      	movle	r0, #0
   15fca:	2001      	movgt	r0, #1
   15fcc:	f7ff ffeb 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   15fd0:	bd08      	pop	{r3, pc}

00015fd2 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   15fd2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15fd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15fd6:	b113      	cbz	r3, 15fde <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   15fd8:	213c      	movs	r1, #60	; 0x3c
   15fda:	4798      	blx	r3
}
   15fdc:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15fde:	f002 fd59 	bl	18a94 <abort>

00015fe2 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
                             OpData* data) {
   15fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fe6:	b089      	sub	sp, #36	; 0x24
   15fe8:	9003      	str	r0, [sp, #12]
   15fea:	4688      	mov	r8, r1
   15fec:	4616      	mov	r6, r2
   15fee:	461d      	mov	r5, r3
   15ff0:	9f12      	ldr	r7, [sp, #72]	; 0x48
   15ff2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   15ff4:	4619      	mov	r1, r3
   15ff6:	4610      	mov	r0, r2
   15ff8:	f7ff ff32 	bl	15e60 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   15ffc:	f080 0001 	eor.w	r0, r0, #1
   16000:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   16002:	783b      	ldrb	r3, [r7, #0]
   16004:	2b09      	cmp	r3, #9
   16006:	d005      	beq.n	16014 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
   16008:	2b07      	cmp	r3, #7
   1600a:	d003      	beq.n	16014 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x32>
  } else if (output->type == kTfLiteFloat32) {
   1600c:	2b01      	cmp	r3, #1
   1600e:	d077      	beq.n	16100 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x11e>
  return kTfLiteOk;
   16010:	2000      	movs	r0, #0
   16012:	e06f      	b.n	160f4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>
    data->input1_offset = -input1->params.zero_point;
   16014:	6933      	ldr	r3, [r6, #16]
   16016:	425b      	negs	r3, r3
   16018:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   1601a:	692b      	ldr	r3, [r5, #16]
   1601c:	425b      	negs	r3, r3
   1601e:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   16020:	693b      	ldr	r3, [r7, #16]
   16022:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   16024:	783b      	ldrb	r3, [r7, #0]
   16026:	2b07      	cmp	r3, #7
   16028:	d067      	beq.n	160fa <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x118>
   1602a:	f04f 0914 	mov.w	r9, #20
   1602e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
                std::max(input1->params.scale, input2->params.scale));
   16032:	f106 0b0c 	add.w	fp, r6, #12
   16036:	f105 0a0c 	add.w	sl, r5, #12
      if (__a < __b)
   1603a:	68f6      	ldr	r6, [r6, #12]
   1603c:	68ed      	ldr	r5, [r5, #12]
   1603e:	4629      	mov	r1, r5
   16040:	4630      	mov	r0, r6
   16042:	f7eb f803 	bl	104c <__aeabi_fcmplt>
   16046:	b900      	cbnz	r0, 1604a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x68>
      return __a;
   16048:	46da      	mov	sl, fp
        2 * static_cast<double>(
   1604a:	f8da 0000 	ldr.w	r0, [sl]
   1604e:	f7ea f9e7 	bl	420 <__aeabi_f2d>
   16052:	4602      	mov	r2, r0
   16054:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   16056:	f7ea f885 	bl	164 <__adddf3>
   1605a:	4682      	mov	sl, r0
   1605c:	468b      	mov	fp, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   1605e:	4630      	mov	r0, r6
   16060:	f7ea f9de 	bl	420 <__aeabi_f2d>
    const double real_input1_multiplier =
   16064:	4652      	mov	r2, sl
   16066:	465b      	mov	r3, fp
   16068:	f7ea fb5c 	bl	724 <__aeabi_ddiv>
   1606c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   16070:	4628      	mov	r0, r5
   16072:	f7ea f9d5 	bl	420 <__aeabi_f2d>
    const double real_input2_multiplier =
   16076:	4652      	mov	r2, sl
   16078:	465b      	mov	r3, fp
   1607a:	f7ea fb53 	bl	724 <__aeabi_ddiv>
   1607e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   16082:	2301      	movs	r3, #1
   16084:	fa03 f909 	lsl.w	r9, r3, r9
   16088:	68f8      	ldr	r0, [r7, #12]
   1608a:	f7ea f9c9 	bl	420 <__aeabi_f2d>
   1608e:	4605      	mov	r5, r0
   16090:	460e      	mov	r6, r1
   16092:	4648      	mov	r0, r9
   16094:	f7ea f9b2 	bl	3fc <__aeabi_i2d>
   16098:	462a      	mov	r2, r5
   1609a:	4633      	mov	r3, r6
   1609c:	f7ea fa18 	bl	4d0 <__aeabi_dmul>
   160a0:	4602      	mov	r2, r0
   160a2:	460b      	mov	r3, r1
    const double real_output_multiplier =
   160a4:	4650      	mov	r0, sl
   160a6:	4659      	mov	r1, fp
   160a8:	f7ea fb3c 	bl	724 <__aeabi_ddiv>
   160ac:	4682      	mov	sl, r0
   160ae:	468b      	mov	fp, r1
    QuantizeMultiplierSmallerThanOneExp(
   160b0:	1d23      	adds	r3, r4, #4
   160b2:	f104 0214 	add.w	r2, r4, #20
   160b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   160ba:	f7f3 fa25 	bl	9508 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   160be:	f104 0308 	add.w	r3, r4, #8
   160c2:	f104 0218 	add.w	r2, r4, #24
   160c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   160ca:	f7f3 fa1d 	bl	9508 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    QuantizeMultiplierSmallerThanOneExp(
   160ce:	f104 0320 	add.w	r3, r4, #32
   160d2:	f104 021c 	add.w	r2, r4, #28
   160d6:	4650      	mov	r0, sl
   160d8:	4659      	mov	r1, fp
   160da:	f7f3 fa15 	bl	9508 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   160de:	f104 0310 	add.w	r3, r4, #16
   160e2:	9300      	str	r3, [sp, #0]
   160e4:	f104 030c 	add.w	r3, r4, #12
   160e8:	463a      	mov	r2, r7
   160ea:	f898 1000 	ldrb.w	r1, [r8]
   160ee:	9803      	ldr	r0, [sp, #12]
   160f0:	f7f3 fb90 	bl	9814 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   160f4:	b009      	add	sp, #36	; 0x24
   160f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   160fa:	f04f 090f 	mov.w	r9, #15
   160fe:	e796      	b.n	1602e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x4c>
    CalculateActivationRange(params->activation,
   16100:	f104 0238 	add.w	r2, r4, #56	; 0x38
   16104:	f104 0134 	add.w	r1, r4, #52	; 0x34
   16108:	f898 0000 	ldrb.w	r0, [r8]
   1610c:	f7f4 fb8c 	bl	a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  return kTfLiteOk;
   16110:	2000      	movs	r0, #0
   16112:	e7ef      	b.n	160f4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x112>

00016114 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
   16114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16118:	b0e1      	sub	sp, #388	; 0x184
   1611a:	9e6a      	ldr	r6, [sp, #424]	; 0x1a8
   1611c:	9d6b      	ldr	r5, [sp, #428]	; 0x1ac
   1611e:	9c6c      	ldr	r4, [sp, #432]	; 0x1b0
  SetActivationParams(data->output_activation_min_f32,
   16120:	6b59      	ldr	r1, [r3, #52]	; 0x34
                      data->output_activation_max_f32, &op_params);
   16122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  params->float_activation_min = min;
   16124:	912f      	str	r1, [sp, #188]	; 0xbc
  params->float_activation_max = max;
   16126:	9230      	str	r2, [sp, #192]	; 0xc0
  if (data->requires_broadcast) {
   16128:	781b      	ldrb	r3, [r3, #0]
   1612a:	2b00      	cmp	r3, #0
   1612c:	f000 8294 	beq.w	16658 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x544>
        op_params, tflite::micro::GetTensorShape(input1),
   16130:	4631      	mov	r1, r6
   16132:	a83c      	add	r0, sp, #240	; 0xf0
   16134:	f001 f8d9 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16138:	4630      	mov	r0, r6
   1613a:	f7ff ff17 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1613e:	9001      	str	r0, [sp, #4]
        tflite::micro::GetTensorShape(input2),
   16140:	4629      	mov	r1, r5
   16142:	a842      	add	r0, sp, #264	; 0x108
   16144:	f001 f8d1 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16148:	4628      	mov	r0, r5
   1614a:	f7ff ff0f 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1614e:	9002      	str	r0, [sp, #8]
        tflite::micro::GetTensorShape(output),
   16150:	4621      	mov	r1, r4
   16152:	a848      	add	r0, sp, #288	; 0x120
   16154:	f001 f8c9 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::BroadcastAdd4DSlow(
   16158:	4620      	mov	r0, r4
   1615a:	f7ff ff0d 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   1615e:	9003      	str	r0, [sp, #12]
      : size_(0) {
   16160:	2300      	movs	r3, #0
   16162:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   16164:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   16166:	2b04      	cmp	r3, #4
   16168:	dc0c      	bgt.n	16184 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x70>
    if (size_ > kMaxSmallSize) {
   1616a:	9b06      	ldr	r3, [sp, #24]
   1616c:	2b05      	cmp	r3, #5
   1616e:	dd03      	ble.n	16178 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
      delete[] dims_pointer_;
   16170:	9807      	ldr	r0, [sp, #28]
   16172:	b108      	cbz	r0, 16178 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x64>
   16174:	f002 fc79 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
   16178:	2304      	movs	r3, #4
   1617a:	9306      	str	r3, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   1617c:	983c      	ldr	r0, [sp, #240]	; 0xf0
    const int size_increase = new_shape_size - shape.DimensionsCount();
   1617e:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   16180:	2300      	movs	r3, #0
   16182:	e00b      	b.n	1619c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x88>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   16184:	f002 fc86 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   16188:	f002 fc84 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1618c:	f002 fc82 	bl	18a94 <abort>
      dims_[i] = val;
   16190:	aa06      	add	r2, sp, #24
   16192:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16196:	2101      	movs	r1, #1
   16198:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   1619a:	3301      	adds	r3, #1
   1619c:	4298      	cmp	r0, r3
   1619e:	dd0b      	ble.n	161b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xa4>
    TFLITE_DCHECK_GE(i, 0);
   161a0:	2b00      	cmp	r3, #0
   161a2:	dbf1      	blt.n	16188 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x74>
    TFLITE_DCHECK_LT(i, size_);
   161a4:	9a06      	ldr	r2, [sp, #24]
   161a6:	4293      	cmp	r3, r2
   161a8:	daf0      	bge.n	1618c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x78>
    if (size_ > kMaxSmallSize) {
   161aa:	2a05      	cmp	r2, #5
   161ac:	ddf0      	ble.n	16190 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x7c>
      dims_pointer_[i] = val;
   161ae:	9a07      	ldr	r2, [sp, #28]
   161b0:	2101      	movs	r1, #1
   161b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   161b6:	e7f0      	b.n	1619a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x86>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161b8:	9b06      	ldr	r3, [sp, #24]
   161ba:	2b05      	cmp	r3, #5
   161bc:	dd1b      	ble.n	161f6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe2>
   161be:	9b07      	ldr	r3, [sp, #28]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   161c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161c4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   161c6:	2a05      	cmp	r2, #5
   161c8:	dd17      	ble.n	161fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xe6>
   161ca:	993d      	ldr	r1, [sp, #244]	; 0xf4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   161cc:	0092      	lsls	r2, r2, #2
   161ce:	f002 fc88 	bl	18ae2 <memcpy>
      : size_(0) {
   161d2:	2300      	movs	r3, #0
   161d4:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161d6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   161d8:	2b04      	cmp	r3, #4
   161da:	dc10      	bgt.n	161fe <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xea>
    if (size_ > kMaxSmallSize) {
   161dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   161de:	2b05      	cmp	r3, #5
   161e0:	dd03      	ble.n	161ea <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
      delete[] dims_pointer_;
   161e2:	980d      	ldr	r0, [sp, #52]	; 0x34
   161e4:	b108      	cbz	r0, 161ea <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xd6>
   161e6:	f002 fc40 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
   161ea:	2304      	movs	r3, #4
   161ec:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   161ee:	9842      	ldr	r0, [sp, #264]	; 0x108
    const int size_increase = new_shape_size - shape.DimensionsCount();
   161f0:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   161f2:	2300      	movs	r3, #0
   161f4:	e00f      	b.n	16216 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161f6:	ab07      	add	r3, sp, #28
   161f8:	e7e2      	b.n	161c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   161fa:	a93d      	add	r1, sp, #244	; 0xf4
   161fc:	e7e6      	b.n	161cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xb8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   161fe:	f002 fc49 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   16202:	f002 fc47 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16206:	f002 fc45 	bl	18a94 <abort>
      dims_[i] = val;
   1620a:	aa0c      	add	r2, sp, #48	; 0x30
   1620c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16210:	2101      	movs	r1, #1
   16212:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   16214:	3301      	adds	r3, #1
   16216:	4298      	cmp	r0, r3
   16218:	dd0b      	ble.n	16232 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x11e>
    TFLITE_DCHECK_GE(i, 0);
   1621a:	2b00      	cmp	r3, #0
   1621c:	dbf1      	blt.n	16202 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xee>
    TFLITE_DCHECK_LT(i, size_);
   1621e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16220:	4293      	cmp	r3, r2
   16222:	daf0      	bge.n	16206 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf2>
    if (size_ > kMaxSmallSize) {
   16224:	2a05      	cmp	r2, #5
   16226:	ddf0      	ble.n	1620a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xf6>
      dims_pointer_[i] = val;
   16228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1622a:	2101      	movs	r1, #1
   1622c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   16230:	e7f0      	b.n	16214 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x100>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16234:	2b05      	cmp	r3, #5
   16236:	dd0c      	ble.n	16252 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x13e>
   16238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   1623a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1623e:	9a42      	ldr	r2, [sp, #264]	; 0x108
   16240:	2a05      	cmp	r2, #5
   16242:	dd08      	ble.n	16256 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x142>
   16244:	9943      	ldr	r1, [sp, #268]	; 0x10c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16246:	0092      	lsls	r2, r2, #2
   16248:	f002 fc4b 	bl	18ae2 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
   1624c:	2303      	movs	r3, #3
  int desc_stride = 1;
   1624e:	2101      	movs	r1, #1
  }
   16250:	e017      	b.n	16282 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16252:	ab0d      	add	r3, sp, #52	; 0x34
   16254:	e7f1      	b.n	1623a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x126>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16256:	a943      	add	r1, sp, #268	; 0x10c
   16258:	e7f5      	b.n	16246 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x132>
    TFLITE_DCHECK_GE(i, 0);
   1625a:	f002 fc1b 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1625e:	f002 fc19 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16262:	aa06      	add	r2, sp, #24
   16264:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16268:	6850      	ldr	r0, [r2, #4]
   1626a:	e015      	b.n	16298 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x184>
    TFLITE_DCHECK_GE(i, 0);
   1626c:	f002 fc12 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16270:	f002 fc10 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16274:	aa06      	add	r2, sp, #24
   16276:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1627a:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   1627c:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   16280:	3b01      	subs	r3, #1
   16282:	2b00      	cmp	r3, #0
   16284:	db19      	blt.n	162ba <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1a6>
    TFLITE_DCHECK_GE(i, 0);
   16286:	dbe8      	blt.n	1625a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x146>
    TFLITE_DCHECK_LT(i, size_);
   16288:	9a06      	ldr	r2, [sp, #24]
   1628a:	4293      	cmp	r3, r2
   1628c:	dae7      	bge.n	1625e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1628e:	2a05      	cmp	r2, #5
   16290:	dde7      	ble.n	16262 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14e>
   16292:	9a07      	ldr	r2, [sp, #28]
   16294:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   16298:	aa12      	add	r2, sp, #72	; 0x48
   1629a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   1629e:	1d18      	adds	r0, r3, #4
   162a0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   162a4:	2b00      	cmp	r3, #0
   162a6:	dbe1      	blt.n	1626c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x158>
    TFLITE_DCHECK_LT(i, size_);
   162a8:	9a06      	ldr	r2, [sp, #24]
   162aa:	4293      	cmp	r3, r2
   162ac:	dae0      	bge.n	16270 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162ae:	2a05      	cmp	r2, #5
   162b0:	dde0      	ble.n	16274 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x160>
   162b2:	9a07      	ldr	r2, [sp, #28]
   162b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   162b8:	e7e0      	b.n	1627c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x168>
  for (int i = N - 1; i >= 0; --i) {
   162ba:	2303      	movs	r3, #3
  int desc_stride = 1;
   162bc:	2101      	movs	r1, #1
   162be:	e013      	b.n	162e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1d4>
    TFLITE_DCHECK_GE(i, 0);
   162c0:	f002 fbe8 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   162c4:	f002 fbe6 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162c8:	aa0c      	add	r2, sp, #48	; 0x30
   162ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   162ce:	6850      	ldr	r0, [r2, #4]
   162d0:	e015      	b.n	162fe <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ea>
    TFLITE_DCHECK_GE(i, 0);
   162d2:	f002 fbdf 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   162d6:	f002 fbdd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162da:	aa0c      	add	r2, sp, #48	; 0x30
   162dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   162e0:	6852      	ldr	r2, [r2, #4]
    desc_stride *= input_shape.Dims(i);
   162e2:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = N - 1; i >= 0; --i) {
   162e6:	3b01      	subs	r3, #1
   162e8:	2b00      	cmp	r3, #0
   162ea:	db19      	blt.n	16320 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x20c>
    TFLITE_DCHECK_GE(i, 0);
   162ec:	dbe8      	blt.n	162c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ac>
    TFLITE_DCHECK_LT(i, size_);
   162ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   162f0:	4293      	cmp	r3, r2
   162f2:	dae7      	bge.n	162c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   162f4:	2a05      	cmp	r2, #5
   162f6:	dde7      	ble.n	162c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1b4>
   162f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   162fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    desc_out->extents[i] = input_shape.Dims(i);
   162fe:	aa1a      	add	r2, sp, #104	; 0x68
   16300:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    desc_out->strides[i] = desc_stride;
   16304:	1d18      	adds	r0, r3, #4
   16306:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   1630a:	2b00      	cmp	r3, #0
   1630c:	dbe1      	blt.n	162d2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1be>
    TFLITE_DCHECK_LT(i, size_);
   1630e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16310:	4293      	cmp	r3, r2
   16312:	dae0      	bge.n	162d6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16314:	2a05      	cmp	r2, #5
   16316:	dde0      	ble.n	162da <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c6>
   16318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1631a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1631e:	e7e0      	b.n	162e2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1ce>
  for (int i = 0; i < N; ++i) {
   16320:	2300      	movs	r3, #0
   16322:	e019      	b.n	16358 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x244>
    TFLITE_DCHECK_GE(i, 0);
   16324:	f002 fbb6 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16328:	f002 fbb4 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1632c:	aa06      	add	r2, sp, #24
   1632e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16332:	6852      	ldr	r2, [r2, #4]
   16334:	e01c      	b.n	16370 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x25c>
    TFLITE_DCHECK_GE(i, 0);
   16336:	f002 fbad 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1633a:	f002 fbab 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1633e:	a90c      	add	r1, sp, #48	; 0x30
   16340:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   16344:	6849      	ldr	r1, [r1, #4]
   16346:	e01d      	b.n	16384 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x270>
        desc0_out->strides[i] = 0;
   16348:	a812      	add	r0, sp, #72	; 0x48
   1634a:	1d1a      	adds	r2, r3, #4
   1634c:	2400      	movs	r4, #0
   1634e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        desc0_out->extents[i] = extent1;
   16352:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  for (int i = 0; i < N; ++i) {
   16356:	3301      	adds	r3, #1
   16358:	2b03      	cmp	r3, #3
   1635a:	dc23      	bgt.n	163a4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x290>
    TFLITE_DCHECK_GE(i, 0);
   1635c:	2b00      	cmp	r3, #0
   1635e:	dbe1      	blt.n	16324 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x210>
    TFLITE_DCHECK_LT(i, size_);
   16360:	9a06      	ldr	r2, [sp, #24]
   16362:	4293      	cmp	r3, r2
   16364:	dae0      	bge.n	16328 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x214>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16366:	2a05      	cmp	r2, #5
   16368:	dde0      	ble.n	1632c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x218>
   1636a:	9a07      	ldr	r2, [sp, #28]
   1636c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
   16370:	2b00      	cmp	r3, #0
   16372:	dbe0      	blt.n	16336 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x222>
    TFLITE_DCHECK_LT(i, size_);
   16374:	990c      	ldr	r1, [sp, #48]	; 0x30
   16376:	428b      	cmp	r3, r1
   16378:	dadf      	bge.n	1633a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1637a:	2905      	cmp	r1, #5
   1637c:	dddf      	ble.n	1633e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x22a>
   1637e:	990d      	ldr	r1, [sp, #52]	; 0x34
   16380:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    if (extent0 != extent1) {
   16384:	4291      	cmp	r1, r2
   16386:	d0e6      	beq.n	16356 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
      if (extent0 == 1) {
   16388:	2a01      	cmp	r2, #1
   1638a:	d0dd      	beq.n	16348 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x234>
        TFLITE_DCHECK_EQ(extent1, 1);
   1638c:	2901      	cmp	r1, #1
   1638e:	d107      	bne.n	163a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x28c>
        desc1_out->strides[i] = 0;
   16390:	a81a      	add	r0, sp, #104	; 0x68
   16392:	1d19      	adds	r1, r3, #4
   16394:	2400      	movs	r4, #0
   16396:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        desc1_out->extents[i] = extent0;
   1639a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
   1639e:	e7da      	b.n	16356 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x242>
        TFLITE_DCHECK_EQ(extent1, 1);
   163a0:	f002 fb78 	bl	18a94 <abort>
    if (size_ > kMaxSmallSize) {
   163a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163a6:	2b05      	cmp	r3, #5
   163a8:	dd03      	ble.n	163b2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
      delete[] dims_pointer_;
   163aa:	980d      	ldr	r0, [sp, #52]	; 0x34
   163ac:	b108      	cbz	r0, 163b2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x29e>
   163ae:	f002 fb5c 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   163b2:	9b06      	ldr	r3, [sp, #24]
   163b4:	2b05      	cmp	r3, #5
   163b6:	dd03      	ble.n	163c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
      delete[] dims_pointer_;
   163b8:	9807      	ldr	r0, [sp, #28]
   163ba:	b108      	cbz	r0, 163c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ac>
   163bc:	f002 fb55 	bl	18a6a <_ZdaPv>
      : size_(0) {
   163c0:	2300      	movs	r3, #0
   163c2:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   163c4:	9b48      	ldr	r3, [sp, #288]	; 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   163c6:	2b04      	cmp	r3, #4
   163c8:	dc0c      	bgt.n	163e4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d0>
    if (size_ > kMaxSmallSize) {
   163ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163cc:	2b05      	cmp	r3, #5
   163ce:	dd03      	ble.n	163d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
      delete[] dims_pointer_;
   163d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   163d2:	b108      	cbz	r0, 163d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2c4>
   163d4:	f002 fb49 	bl	18a6a <_ZdaPv>
    size_ = dimensions_count;
   163d8:	2304      	movs	r3, #4
   163da:	930c      	str	r3, [sp, #48]	; 0x30
  inline int32_t DimensionsCount() const { return size_; }
   163dc:	9848      	ldr	r0, [sp, #288]	; 0x120
    const int size_increase = new_shape_size - shape.DimensionsCount();
   163de:	1a18      	subs	r0, r3, r0
    for (int i = 0; i < size_increase; ++i) {
   163e0:	2300      	movs	r3, #0
   163e2:	e00b      	b.n	163fc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e8>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   163e4:	f002 fb56 	bl	18a94 <abort>
    TFLITE_DCHECK_GE(i, 0);
   163e8:	f002 fb54 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   163ec:	f002 fb52 	bl	18a94 <abort>
      dims_[i] = val;
   163f0:	aa0c      	add	r2, sp, #48	; 0x30
   163f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   163f6:	2101      	movs	r1, #1
   163f8:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < size_increase; ++i) {
   163fa:	3301      	adds	r3, #1
   163fc:	4298      	cmp	r0, r3
   163fe:	dd0b      	ble.n	16418 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x304>
    TFLITE_DCHECK_GE(i, 0);
   16400:	2b00      	cmp	r3, #0
   16402:	dbf1      	blt.n	163e8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d4>
    TFLITE_DCHECK_LT(i, size_);
   16404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16406:	4293      	cmp	r3, r2
   16408:	daf0      	bge.n	163ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2d8>
    if (size_ > kMaxSmallSize) {
   1640a:	2a05      	cmp	r2, #5
   1640c:	ddf0      	ble.n	163f0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2dc>
      dims_pointer_[i] = val;
   1640e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16410:	2101      	movs	r1, #1
   16412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   16416:	e7f0      	b.n	163fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2e6>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1641a:	2b05      	cmp	r3, #5
   1641c:	dd01      	ble.n	16422 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x30e>
   1641e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16420:	e000      	b.n	16424 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x310>
   16422:	ab0d      	add	r3, sp, #52	; 0x34
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16428:	9a48      	ldr	r2, [sp, #288]	; 0x120
   1642a:	2a05      	cmp	r2, #5
   1642c:	dd01      	ble.n	16432 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x31e>
   1642e:	9949      	ldr	r1, [sp, #292]	; 0x124
   16430:	e000      	b.n	16434 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x320>
   16432:	a949      	add	r1, sp, #292	; 0x124
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   16434:	0092      	lsls	r2, r2, #2
   16436:	f002 fb54 	bl	18ae2 <memcpy>
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
   1643a:	f8dd b0bc 	ldr.w	fp, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   1643e:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   16442:	2700      	movs	r7, #0
    TFLITE_DCHECK_LT(i, size_);
   16444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16446:	2b00      	cmp	r3, #0
   16448:	dd08      	ble.n	1645c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x348>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1644a:	2b05      	cmp	r3, #5
   1644c:	dd08      	ble.n	16460 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x34c>
   1644e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16450:	681b      	ldr	r3, [r3, #0]
   16452:	429f      	cmp	r7, r3
   16454:	f280 80e0 	bge.w	16618 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x504>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   16458:	2600      	movs	r6, #0
   1645a:	e0ce      	b.n	165fa <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e6>
    TFLITE_DCHECK_LT(i, size_);
   1645c:	f002 fb1a 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16462:	e7f6      	b.n	16452 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x33e>
    TFLITE_DCHECK_LT(i, size_);
   16464:	f002 fb16 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1646a:	e0cf      	b.n	1660c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4f8>
    TFLITE_DCHECK_LT(i, size_);
   1646c:	f002 fb12 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16472:	e0bd      	b.n	165f0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4dc>
    TFLITE_DCHECK_LT(i, size_);
   16474:	f002 fb0e 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16478:	9b10      	ldr	r3, [sp, #64]	; 0x40
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   1647a:	429d      	cmp	r5, r3
   1647c:	f280 80ae 	bge.w	165dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c8>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   16480:	2f00      	cmp	r7, #0
   16482:	f2c0 808b 	blt.w	1659c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
   16486:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16488:	429f      	cmp	r7, r3
   1648a:	f280 8087 	bge.w	1659c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x488>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   1648e:	2e00      	cmp	r6, #0
   16490:	f2c0 8086 	blt.w	165a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
   16494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16496:	429e      	cmp	r6, r3
   16498:	f280 8082 	bge.w	165a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x48c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   1649c:	2c00      	cmp	r4, #0
   1649e:	f2c0 8081 	blt.w	165a4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
   164a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   164a4:	429c      	cmp	r4, r3
   164a6:	da7d      	bge.n	165a4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x490>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   164a8:	2d00      	cmp	r5, #0
   164aa:	db7d      	blt.n	165a8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
   164ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   164ae:	429d      	cmp	r5, r3
   164b0:	da7a      	bge.n	165a8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x494>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   164b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   164b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   164b6:	fb02 f206 	mul.w	r2, r2, r6
   164ba:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   164be:	9a19      	ldr	r2, [sp, #100]	; 0x64
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   164c0:	9918      	ldr	r1, [sp, #96]	; 0x60
   164c2:	fb01 f104 	mul.w	r1, r1, r4
   164c6:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   164ca:	4413      	add	r3, r2
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   164cc:	9a01      	ldr	r2, [sp, #4]
   164ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   164d2:	2f00      	cmp	r7, #0
   164d4:	db6a      	blt.n	165ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
   164d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   164d8:	429f      	cmp	r7, r3
   164da:	da67      	bge.n	165ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x498>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   164dc:	2e00      	cmp	r6, #0
   164de:	db67      	blt.n	165b0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
   164e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   164e2:	429e      	cmp	r6, r3
   164e4:	da64      	bge.n	165b0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x49c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   164e6:	2c00      	cmp	r4, #0
   164e8:	db64      	blt.n	165b4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
   164ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   164ec:	429c      	cmp	r4, r3
   164ee:	da61      	bge.n	165b4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a0>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   164f0:	2d00      	cmp	r5, #0
   164f2:	db61      	blt.n	165b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
   164f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   164f6:	429d      	cmp	r5, r3
   164f8:	da5e      	bge.n	165b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a4>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   164fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   164fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   164fe:	fb02 f206 	mul.w	r2, r2, r6
   16502:	fb03 2307 	mla	r3, r3, r7, r2
         i3 * desc.strides[3];
   16506:	9a21      	ldr	r2, [sp, #132]	; 0x84
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   16508:	9920      	ldr	r1, [sp, #128]	; 0x80
   1650a:	fb01 f104 	mul.w	r1, r1, r4
   1650e:	fb02 1205 	mla	r2, r2, r5, r1
         i3 * desc.strides[3];
   16512:	4413      	add	r3, r2
              ActivationFunctionWithMinMax<T>(
   16514:	9a02      	ldr	r2, [sp, #8]
   16516:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1651a:	f7ea faf1 	bl	b00 <__addsf3>
   1651e:	4601      	mov	r1, r0
  inline int32_t DimensionsCount() const { return size_; }
   16520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16522:	2b04      	cmp	r3, #4
   16524:	d14a      	bne.n	165bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16526:	2f00      	cmp	r7, #0
   16528:	db4a      	blt.n	165c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
   1652a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1652c:	429f      	cmp	r7, r3
   1652e:	da47      	bge.n	165c0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16530:	2e00      	cmp	r6, #0
   16532:	db47      	blt.n	165c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
   16534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16536:	4296      	cmp	r6, r2
   16538:	da44      	bge.n	165c4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1653a:	2c00      	cmp	r4, #0
   1653c:	db44      	blt.n	165c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
   1653e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16540:	429c      	cmp	r4, r3
   16542:	da41      	bge.n	165c8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16544:	2d00      	cmp	r5, #0
   16546:	db41      	blt.n	165cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
   16548:	9810      	ldr	r0, [sp, #64]	; 0x40
   1654a:	4285      	cmp	r5, r0
   1654c:	da3e      	bge.n	165cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1654e:	fb02 6207 	mla	r2, r2, r7, r6
   16552:	fb02 4303 	mla	r3, r2, r3, r4
   16556:	fb03 5800 	mla	r8, r3, r0, r5
   1655a:	9106      	str	r1, [sp, #24]
   1655c:	f8cd b014 	str.w	fp, [sp, #20]
   16560:	f8cd a010 	str.w	sl, [sp, #16]
      if (__a < __b)
   16564:	4658      	mov	r0, fp
   16566:	f7ea fd8f 	bl	1088 <__aeabi_fcmpgt>
   1656a:	bb88      	cbnz	r0, 165d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4bc>
      return __a;
   1656c:	f10d 0918 	add.w	r9, sp, #24
      if (__b < __a)
   16570:	f8d9 1000 	ldr.w	r1, [r9]
   16574:	4650      	mov	r0, sl
   16576:	f7ea fd69 	bl	104c <__aeabi_fcmplt>
   1657a:	bb60      	cbnz	r0, 165d6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4c2>
  return min(max(x, output_activation_min), output_activation_max);
   1657c:	f8d9 3000 	ldr.w	r3, [r9]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   16580:	9a03      	ldr	r2, [sp, #12]
   16582:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   16586:	3501      	adds	r5, #1
    TFLITE_DCHECK_LT(i, size_);
   16588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1658a:	2b03      	cmp	r3, #3
   1658c:	f77f af72 	ble.w	16474 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x360>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16590:	2b05      	cmp	r3, #5
   16592:	f77f af71 	ble.w	16478 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x364>
   16596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16598:	68db      	ldr	r3, [r3, #12]
   1659a:	e76e      	b.n	1647a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x366>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   1659c:	f002 fa7a 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   165a0:	f002 fa78 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   165a4:	f002 fa76 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   165a8:	f002 fa74 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   165ac:	f002 fa72 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   165b0:	f002 fa70 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   165b4:	f002 fa6e 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   165b8:	f002 fa6c 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   165bc:	f002 fa6a 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   165c0:	f002 fa68 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   165c4:	f002 fa66 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   165c8:	f002 fa64 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   165cc:	f002 fa62 	bl	18a94 <abort>
	return __b;
   165d0:	f10d 0914 	add.w	r9, sp, #20
   165d4:	e7cc      	b.n	16570 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x45c>
	return __b;
   165d6:	f10d 0910 	add.w	r9, sp, #16
   165da:	e7cf      	b.n	1657c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x468>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   165dc:	3401      	adds	r4, #1
    TFLITE_DCHECK_LT(i, size_);
   165de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165e0:	2b02      	cmp	r3, #2
   165e2:	f77f af43 	ble.w	1646c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x358>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   165e6:	2b05      	cmp	r3, #5
   165e8:	f77f af42 	ble.w	16470 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x35c>
   165ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   165ee:	689b      	ldr	r3, [r3, #8]
   165f0:	429c      	cmp	r4, r3
   165f2:	da01      	bge.n	165f8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4e4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   165f4:	2500      	movs	r5, #0
   165f6:	e7c7      	b.n	16588 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x474>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   165f8:	3601      	adds	r6, #1
    TFLITE_DCHECK_LT(i, size_);
   165fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   165fc:	2b01      	cmp	r3, #1
   165fe:	f77f af31 	ble.w	16464 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x350>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16602:	2b05      	cmp	r3, #5
   16604:	f77f af30 	ble.w	16468 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x354>
   16608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1660a:	685b      	ldr	r3, [r3, #4]
   1660c:	429e      	cmp	r6, r3
   1660e:	da01      	bge.n	16614 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x500>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   16610:	2400      	movs	r4, #0
   16612:	e7e4      	b.n	165de <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x4ca>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   16614:	3701      	adds	r7, #1
   16616:	e715      	b.n	16444 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x330>
    if (size_ > kMaxSmallSize) {
   16618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1661a:	2b05      	cmp	r3, #5
   1661c:	dd03      	ble.n	16626 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
      delete[] dims_pointer_;
   1661e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16620:	b108      	cbz	r0, 16626 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x512>
   16622:	f002 fa22 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16626:	9b48      	ldr	r3, [sp, #288]	; 0x120
   16628:	2b05      	cmp	r3, #5
   1662a:	dd03      	ble.n	16634 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
      delete[] dims_pointer_;
   1662c:	9849      	ldr	r0, [sp, #292]	; 0x124
   1662e:	b108      	cbz	r0, 16634 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x520>
   16630:	f002 fa1b 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16634:	9b42      	ldr	r3, [sp, #264]	; 0x108
   16636:	2b05      	cmp	r3, #5
   16638:	dd03      	ble.n	16642 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
      delete[] dims_pointer_;
   1663a:	9843      	ldr	r0, [sp, #268]	; 0x10c
   1663c:	b108      	cbz	r0, 16642 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x52e>
   1663e:	f002 fa14 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   16642:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16644:	2b05      	cmp	r3, #5
   16646:	f340 8097 	ble.w	16778 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   1664a:	983d      	ldr	r0, [sp, #244]	; 0xf4
   1664c:	2800      	cmp	r0, #0
   1664e:	f000 8093 	beq.w	16778 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   16652:	f002 fa0a 	bl	18a6a <_ZdaPv>
   16656:	e08f      	b.n	16778 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16658:	4631      	mov	r1, r6
   1665a:	a84e      	add	r0, sp, #312	; 0x138
   1665c:	f000 fe45 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   16660:	4630      	mov	r0, r6
   16662:	f7ff fc83 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16666:	9001      	str	r0, [sp, #4]
                       tflite::micro::GetTensorShape(input2),
   16668:	4629      	mov	r1, r5
   1666a:	a854      	add	r0, sp, #336	; 0x150
   1666c:	f000 fe3d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16670:	4628      	mov	r0, r5
   16672:	f7ff fc7b 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   16676:	4607      	mov	r7, r0
                       tflite::micro::GetTensorShape(output),
   16678:	4621      	mov	r1, r4
   1667a:	a85a      	add	r0, sp, #360	; 0x168
   1667c:	f000 fe35 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   16680:	4620      	mov	r0, r4
   16682:	f7ff fc79 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   16686:	4680      	mov	r8, r0
  *min = params.float_activation_min;
   16688:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
  *max = params.float_activation_max;
   1668c:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16690:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   16692:	2a05      	cmp	r2, #5
   16694:	dd03      	ble.n	1669e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58a>
   16696:	984f      	ldr	r0, [sp, #316]	; 0x13c
    for (int i = 0; i < size_; i++) {
   16698:	2300      	movs	r3, #0
    int buffer_size = 1;
   1669a:	2601      	movs	r6, #1
   1669c:	e006      	b.n	166ac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x598>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1669e:	a84f      	add	r0, sp, #316	; 0x13c
   166a0:	e7fa      	b.n	16698 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x584>
      buffer_size *= dims_data[i];
   166a2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   166a6:	fb01 f606 	mul.w	r6, r1, r6
    for (int i = 0; i < size_; i++) {
   166aa:	3301      	adds	r3, #1
   166ac:	429a      	cmp	r2, r3
   166ae:	dcf8      	bgt.n	166a2 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x58e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166b0:	9954      	ldr	r1, [sp, #336]	; 0x150
   166b2:	2905      	cmp	r1, #5
   166b4:	dd0a      	ble.n	166cc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5b8>
   166b6:	9c55      	ldr	r4, [sp, #340]	; 0x154
    for (int i = 0; i < size_; i++) {
   166b8:	2300      	movs	r3, #0
    int buffer_size = 1;
   166ba:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
   166bc:	4299      	cmp	r1, r3
   166be:	dd07      	ble.n	166d0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5bc>
      buffer_size *= dims_data[i];
   166c0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   166c4:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
   166c8:	3301      	adds	r3, #1
   166ca:	e7f7      	b.n	166bc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166cc:	ac55      	add	r4, sp, #340	; 0x154
   166ce:	e7f3      	b.n	166b8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5a4>
   166d0:	9c5a      	ldr	r4, [sp, #360]	; 0x168
   166d2:	2c05      	cmp	r4, #5
   166d4:	dd0a      	ble.n	166ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5d8>
   166d6:	9d5b      	ldr	r5, [sp, #364]	; 0x16c
    for (int i = 0; i < size_; i++) {
   166d8:	2300      	movs	r3, #0
    int buffer_size = 1;
   166da:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   166dc:	429c      	cmp	r4, r3
   166de:	dd07      	ble.n	166f0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5dc>
      buffer_size *= dims_data[i];
   166e0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   166e4:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   166e8:	3301      	adds	r3, #1
   166ea:	e7f7      	b.n	166dc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   166ec:	ad5b      	add	r5, sp, #364	; 0x16c
   166ee:	e7f3      	b.n	166d8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5c4>
  TFLITE_CHECK_EQ(size_1, size_2);
   166f0:	4296      	cmp	r6, r2
   166f2:	d103      	bne.n	166fc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5e8>
  TFLITE_CHECK_EQ(size_2, size_3);
   166f4:	428a      	cmp	r2, r1
   166f6:	d103      	bne.n	16700 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5ec>
  for (int i = 0; i < flat_size; ++i) {
   166f8:	2400      	movs	r4, #0
   166fa:	e009      	b.n	16710 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5fc>
  TFLITE_CHECK_EQ(size_1, size_2);
   166fc:	f002 f9ca 	bl	18a94 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   16700:	f002 f9c8 	bl	18a94 <abort>
	return __b;
   16704:	ad12      	add	r5, sp, #72	; 0x48
   16706:	e01a      	b.n	1673e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x62a>
  return min(max(x, output_activation_min), output_activation_max);
   16708:	682b      	ldr	r3, [r5, #0]
    output_data[i] = ActivationFunctionWithMinMax(
   1670a:	f848 300b 	str.w	r3, [r8, fp]
  for (int i = 0; i < flat_size; ++i) {
   1670e:	3401      	adds	r4, #1
   16710:	42b4      	cmp	r4, r6
   16712:	da1c      	bge.n	1674e <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x63a>
        input1_data[i] + input2_data[i], activation_min, activation_max);
   16714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
   16718:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   1671c:	9b01      	ldr	r3, [sp, #4]
   1671e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16722:	f7ea f9ed 	bl	b00 <__addsf3>
   16726:	4601      	mov	r1, r0
   16728:	901a      	str	r0, [sp, #104]	; 0x68
   1672a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   1672e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
      if (__a < __b)
   16732:	4648      	mov	r0, r9
   16734:	f7ea fca8 	bl	1088 <__aeabi_fcmpgt>
   16738:	2800      	cmp	r0, #0
   1673a:	d1e3      	bne.n	16704 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f0>
      return __a;
   1673c:	ad1a      	add	r5, sp, #104	; 0x68
      if (__b < __a)
   1673e:	6829      	ldr	r1, [r5, #0]
   16740:	4650      	mov	r0, sl
   16742:	f7ea fc83 	bl	104c <__aeabi_fcmplt>
   16746:	2800      	cmp	r0, #0
   16748:	d0de      	beq.n	16708 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
	return __b;
   1674a:	ad0c      	add	r5, sp, #48	; 0x30
   1674c:	e7dc      	b.n	16708 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x5f4>
    if (size_ > kMaxSmallSize) {
   1674e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   16750:	2b05      	cmp	r3, #5
   16752:	dd03      	ble.n	1675c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
      delete[] dims_pointer_;
   16754:	985b      	ldr	r0, [sp, #364]	; 0x16c
   16756:	b108      	cbz	r0, 1675c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x648>
   16758:	f002 f987 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1675c:	9b54      	ldr	r3, [sp, #336]	; 0x150
   1675e:	2b05      	cmp	r3, #5
   16760:	dd03      	ble.n	1676a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
      delete[] dims_pointer_;
   16762:	9855      	ldr	r0, [sp, #340]	; 0x154
   16764:	b108      	cbz	r0, 1676a <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x656>
   16766:	f002 f980 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1676a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
   1676c:	2b05      	cmp	r3, #5
   1676e:	dd03      	ble.n	16778 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
      delete[] dims_pointer_;
   16770:	984f      	ldr	r0, [sp, #316]	; 0x13c
   16772:	b108      	cbz	r0, 16778 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x664>
   16774:	f002 f979 	bl	18a6a <_ZdaPv>
}
   16778:	b061      	add	sp, #388	; 0x184
   1677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001677e <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   1677e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   16780:	b108      	cbz	r0, 16786 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   16782:	6800      	ldr	r0, [r0, #0]
   16784:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   16786:	f002 f985 	bl	18a94 <abort>

0001678a <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1678a:	b108      	cbz	r0, 16790 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   1678c:	6800      	ldr	r0, [r0, #0]
   1678e:	4770      	bx	lr
}
   16790:	4770      	bx	lr

00016792 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   16792:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   16794:	b108      	cbz	r0, 1679a <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   16796:	6800      	ldr	r0, [r0, #0]
   16798:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   1679a:	f002 f97b 	bl	18a94 <abort>

0001679e <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   1679e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   167a0:	b108      	cbz	r0, 167a6 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   167a2:	6800      	ldr	r0, [r0, #0]
   167a4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   167a6:	f002 f975 	bl	18a94 <abort>

000167aa <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   167aa:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   167ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
   167ae:	b113      	cbz	r3, 167b6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   167b0:	2134      	movs	r1, #52	; 0x34
   167b2:	4798      	blx	r3
}
   167b4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   167b6:	f002 f96d 	bl	18a94 <abort>

000167ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   167ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167be:	b0a3      	sub	sp, #140	; 0x8c
   167c0:	9217      	str	r2, [sp, #92]	; 0x5c
   167c2:	461e      	mov	r6, r3
   167c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   167c6:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   167c8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   167cc:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   167ce:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   167d2:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   167d4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   167d8:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   167da:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   167de:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   167e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   167e4:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   167e6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   167ea:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   167ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
   167ee:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   167f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
   167f2:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   167f4:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   167f6:	2a04      	cmp	r2, #4
   167f8:	d173      	bne.n	168e2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   167fa:	468b      	mov	fp, r1
   167fc:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   167fe:	2a04      	cmp	r2, #4
   16800:	d171      	bne.n	168e6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   16802:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16804:	2a04      	cmp	r2, #4
   16806:	d170      	bne.n	168ea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   16808:	680a      	ldr	r2, [r1, #0]
   1680a:	2a00      	cmp	r2, #0
   1680c:	dd6f      	ble.n	168ee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1680e:	2a05      	cmp	r2, #5
   16810:	dd6f      	ble.n	168f2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   16812:	684a      	ldr	r2, [r1, #4]
   16814:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16816:	6839      	ldr	r1, [r7, #0]
   16818:	2900      	cmp	r1, #0
   1681a:	dd6c      	ble.n	168f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1681c:	2905      	cmp	r1, #5
   1681e:	dd6c      	ble.n	168fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   16820:	6879      	ldr	r1, [r7, #4]
   16822:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16824:	4291      	cmp	r1, r2
   16826:	d16a      	bne.n	168fe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16828:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   1682a:	6839      	ldr	r1, [r7, #0]
   1682c:	2900      	cmp	r1, #0
   1682e:	dd68      	ble.n	16902 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16830:	2905      	cmp	r1, #5
   16832:	dd68      	ble.n	16906 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   16834:	6879      	ldr	r1, [r7, #4]
   16836:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16838:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   1683a:	428a      	cmp	r2, r1
   1683c:	dc65      	bgt.n	1690a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   1683e:	aa21      	add	r2, sp, #132	; 0x84
   16840:	6812      	ldr	r2, [r2, #0]
   16842:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   16844:	f8db 2000 	ldr.w	r2, [fp]
   16848:	2a03      	cmp	r2, #3
   1684a:	dd60      	ble.n	1690e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1684c:	2a05      	cmp	r2, #5
   1684e:	dd60      	ble.n	16912 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   16850:	f8db 2004 	ldr.w	r2, [fp, #4]
   16854:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16856:	6831      	ldr	r1, [r6, #0]
   16858:	2903      	cmp	r1, #3
   1685a:	dd5d      	ble.n	16918 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1685c:	2905      	cmp	r1, #5
   1685e:	dd5d      	ble.n	1691c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   16860:	6871      	ldr	r1, [r6, #4]
   16862:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16864:	4291      	cmp	r1, r2
   16866:	d15b      	bne.n	16920 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16868:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   1686a:	6831      	ldr	r1, [r6, #0]
   1686c:	2903      	cmp	r1, #3
   1686e:	dd59      	ble.n	16924 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16870:	2905      	cmp	r1, #5
   16872:	dd59      	ble.n	16928 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   16874:	6871      	ldr	r1, [r6, #4]
   16876:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16878:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   1687a:	428a      	cmp	r2, r1
   1687c:	dc56      	bgt.n	1692c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   1687e:	aa1f      	add	r2, sp, #124	; 0x7c
   16880:	6812      	ldr	r2, [r2, #0]
   16882:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   16884:	6832      	ldr	r2, [r6, #0]
   16886:	2a00      	cmp	r2, #0
   16888:	dd52      	ble.n	16930 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1688a:	2a05      	cmp	r2, #5
   1688c:	dd52      	ble.n	16934 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   1688e:	6872      	ldr	r2, [r6, #4]
   16890:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16892:	6839      	ldr	r1, [r7, #0]
   16894:	2903      	cmp	r1, #3
   16896:	dd4f      	ble.n	16938 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16898:	2905      	cmp	r1, #5
   1689a:	dd4f      	ble.n	1693c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   1689c:	6879      	ldr	r1, [r7, #4]
   1689e:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   168a0:	4291      	cmp	r1, r2
   168a2:	d14d      	bne.n	16940 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   168a4:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   168a6:	6839      	ldr	r1, [r7, #0]
   168a8:	2903      	cmp	r1, #3
   168aa:	dd4b      	ble.n	16944 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   168ac:	2905      	cmp	r1, #5
   168ae:	dd4b      	ble.n	16948 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   168b0:	6879      	ldr	r1, [r7, #4]
   168b2:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   168b4:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   168b6:	428a      	cmp	r2, r1
   168b8:	dc48      	bgt.n	1694c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   168ba:	aa1d      	add	r2, sp, #116	; 0x74
   168bc:	6812      	ldr	r2, [r2, #0]
   168be:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   168c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   168c2:	2a00      	cmp	r2, #0
   168c4:	d049      	beq.n	1695a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   168c6:	681c      	ldr	r4, [r3, #0]
   168c8:	2c05      	cmp	r4, #5
   168ca:	dd41      	ble.n	16950 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   168cc:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   168ce:	2200      	movs	r2, #0
    int buffer_size = 1;
   168d0:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   168d2:	42a2      	cmp	r2, r4
   168d4:	da3e      	bge.n	16954 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   168d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   168da:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   168de:	3201      	adds	r2, #1
   168e0:	e7f7      	b.n	168d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   168e2:	f002 f8d7 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   168e6:	f002 f8d5 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   168ea:	f002 f8d3 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   168ee:	f002 f8d1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   168f2:	684a      	ldr	r2, [r1, #4]
   168f4:	e78f      	b.n	16816 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   168f6:	f002 f8cd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   168fa:	6879      	ldr	r1, [r7, #4]
   168fc:	e792      	b.n	16824 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   168fe:	f002 f8c9 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16902:	f002 f8c7 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16906:	6879      	ldr	r1, [r7, #4]
   16908:	e796      	b.n	16838 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   1690a:	aa20      	add	r2, sp, #128	; 0x80
   1690c:	e798      	b.n	16840 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   1690e:	f002 f8c1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16912:	f8db 2010 	ldr.w	r2, [fp, #16]
   16916:	e79e      	b.n	16856 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   16918:	f002 f8bc 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1691c:	6931      	ldr	r1, [r6, #16]
   1691e:	e7a1      	b.n	16864 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16920:	f002 f8b8 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16924:	f002 f8b6 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16928:	6931      	ldr	r1, [r6, #16]
   1692a:	e7a5      	b.n	16878 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   1692c:	aa1e      	add	r2, sp, #120	; 0x78
   1692e:	e7a7      	b.n	16880 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   16930:	f002 f8b0 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16934:	6872      	ldr	r2, [r6, #4]
   16936:	e7ac      	b.n	16892 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   16938:	f002 f8ac 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1693c:	6939      	ldr	r1, [r7, #16]
   1693e:	e7af      	b.n	168a0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16940:	f002 f8a8 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16944:	f002 f8a6 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16948:	6939      	ldr	r1, [r7, #16]
   1694a:	e7b3      	b.n	168b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   1694c:	aa1c      	add	r2, sp, #112	; 0x70
   1694e:	e7b5      	b.n	168bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16950:	3304      	adds	r3, #4
   16952:	e7bc      	b.n	168ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16954:	9b05      	ldr	r3, [sp, #20]
   16956:	4299      	cmp	r1, r3
   16958:	d161      	bne.n	16a1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   1695a:	f8db 3000 	ldr.w	r3, [fp]
   1695e:	2b01      	cmp	r3, #1
   16960:	dd5f      	ble.n	16a22 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16962:	2b05      	cmp	r3, #5
   16964:	dd5f      	ble.n	16a26 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   16966:	f8db 3004 	ldr.w	r3, [fp, #4]
   1696a:	685b      	ldr	r3, [r3, #4]
   1696c:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1696e:	f8db 3000 	ldr.w	r3, [fp]
   16972:	2b02      	cmp	r3, #2
   16974:	dd5b      	ble.n	16a2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16976:	2b05      	cmp	r3, #5
   16978:	dd5b      	ble.n	16a32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   1697a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1697e:	689b      	ldr	r3, [r3, #8]
   16980:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   16982:	6833      	ldr	r3, [r6, #0]
   16984:	2b01      	cmp	r3, #1
   16986:	dd58      	ble.n	16a3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16988:	2b05      	cmp	r3, #5
   1698a:	dd58      	ble.n	16a3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   1698c:	6873      	ldr	r3, [r6, #4]
   1698e:	685b      	ldr	r3, [r3, #4]
   16990:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   16992:	6833      	ldr	r3, [r6, #0]
   16994:	2b02      	cmp	r3, #2
   16996:	dd55      	ble.n	16a44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16998:	2b05      	cmp	r3, #5
   1699a:	dd55      	ble.n	16a48 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   1699c:	6873      	ldr	r3, [r6, #4]
   1699e:	689b      	ldr	r3, [r3, #8]
   169a0:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   169a2:	683b      	ldr	r3, [r7, #0]
   169a4:	2b01      	cmp	r3, #1
   169a6:	dd52      	ble.n	16a4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   169a8:	2b05      	cmp	r3, #5
   169aa:	dd52      	ble.n	16a52 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   169ac:	687b      	ldr	r3, [r7, #4]
   169ae:	685b      	ldr	r3, [r3, #4]
   169b0:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   169b2:	683b      	ldr	r3, [r7, #0]
   169b4:	2b02      	cmp	r3, #2
   169b6:	dd4f      	ble.n	16a58 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   169b8:	2b05      	cmp	r3, #5
   169ba:	dd4f      	ble.n	16a5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   169bc:	687b      	ldr	r3, [r7, #4]
   169be:	689b      	ldr	r3, [r3, #8]
   169c0:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   169c2:	f04f 0a00 	mov.w	sl, #0
   169c6:	46d1      	mov	r9, sl
   169c8:	46da      	mov	sl, fp
   169ca:	46b3      	mov	fp, r6
   169cc:	463e      	mov	r6, r7
   169ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
   169d0:	4599      	cmp	r9, r3
   169d2:	f280 8143 	bge.w	16c5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   169d6:	2300      	movs	r3, #0
   169d8:	9300      	str	r3, [sp, #0]
   169da:	46c8      	mov	r8, r9
   169dc:	46d9      	mov	r9, fp
   169de:	46d3      	mov	fp, sl
   169e0:	46b2      	mov	sl, r6
   169e2:	9b00      	ldr	r3, [sp, #0]
   169e4:	9907      	ldr	r1, [sp, #28]
   169e6:	428b      	cmp	r3, r1
   169e8:	f280 8132 	bge.w	16c50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   169ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   169ee:	fb02 f303 	mul.w	r3, r2, r3
   169f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   169f4:	1a9b      	subs	r3, r3, r2
   169f6:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   169f8:	2300      	movs	r3, #0
   169fa:	9301      	str	r3, [sp, #4]
   169fc:	4647      	mov	r7, r8
   169fe:	46d8      	mov	r8, fp
   16a00:	9b01      	ldr	r3, [sp, #4]
   16a02:	9906      	ldr	r1, [sp, #24]
   16a04:	428b      	cmp	r3, r1
   16a06:	f280 811d 	bge.w	16c44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   16a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16a0c:	fb02 f303 	mul.w	r3, r2, r3
   16a10:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16a12:	1a9b      	subs	r3, r3, r2
   16a14:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16a16:	f04f 0b00 	mov.w	fp, #0
   16a1a:	463e      	mov	r6, r7
   16a1c:	e0f3      	b.n	16c06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16a1e:	f002 f839 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16a22:	f002 f837 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a26:	f8db 3008 	ldr.w	r3, [fp, #8]
   16a2a:	930b      	str	r3, [sp, #44]	; 0x2c
   16a2c:	e79f      	b.n	1696e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   16a2e:	f002 f831 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a32:	f8db 300c 	ldr.w	r3, [fp, #12]
   16a36:	930a      	str	r3, [sp, #40]	; 0x28
   16a38:	e7a3      	b.n	16982 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   16a3a:	f002 f82b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a3e:	68b3      	ldr	r3, [r6, #8]
   16a40:	9309      	str	r3, [sp, #36]	; 0x24
   16a42:	e7a6      	b.n	16992 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   16a44:	f002 f826 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a48:	68f3      	ldr	r3, [r6, #12]
   16a4a:	9308      	str	r3, [sp, #32]
   16a4c:	e7a9      	b.n	169a2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   16a4e:	f002 f821 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a52:	68bb      	ldr	r3, [r7, #8]
   16a54:	9307      	str	r3, [sp, #28]
   16a56:	e7ac      	b.n	169b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   16a58:	f002 f81c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16a5c:	68fb      	ldr	r3, [r7, #12]
   16a5e:	9306      	str	r3, [sp, #24]
   16a60:	e7af      	b.n	169c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16a62:	f002 f817 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16a66:	f002 f815 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16a6a:	f002 f813 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16a6e:	f002 f811 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16a72:	f002 f80f 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16a76:	f002 f80d 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16a7a:	f002 f80b 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16a7e:	f002 f809 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16a82:	f002 f807 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16a86:	f002 f805 	bl	18a94 <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16a8a:	3501      	adds	r5, #1
   16a8c:	9b08      	ldr	r3, [sp, #32]
   16a8e:	429d      	cmp	r5, r3
   16a90:	da69      	bge.n	16b66 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   16a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16a94:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16a96:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   16a9a:	f1ba 0f00 	cmp.w	sl, #0
   16a9e:	dbf4      	blt.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16aa2:	459a      	cmp	sl, r3
   16aa4:	daf1      	bge.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16aa6:	2e00      	cmp	r6, #0
   16aa8:	dbef      	blt.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16aac:	429e      	cmp	r6, r3
   16aae:	daec      	bge.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   16ab0:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   16ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16ab4:	429c      	cmp	r4, r3
   16ab6:	dae8      	bge.n	16a8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   16ab8:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16abc:	2b04      	cmp	r3, #4
   16abe:	d1d0      	bne.n	16a62 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16ac0:	9a03      	ldr	r2, [sp, #12]
   16ac2:	2a00      	cmp	r2, #0
   16ac4:	dbcf      	blt.n	16a66 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   16ac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16aca:	429a      	cmp	r2, r3
   16acc:	dacb      	bge.n	16a66 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16ace:	2e00      	cmp	r6, #0
   16ad0:	dbcb      	blt.n	16a6a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   16ad2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   16ad6:	428e      	cmp	r6, r1
   16ad8:	dac7      	bge.n	16a6a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16ada:	f1ba 0f00 	cmp.w	sl, #0
   16ade:	dbc6      	blt.n	16a6e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   16ae0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   16ae4:	4592      	cmp	sl, r2
   16ae6:	dac2      	bge.n	16a6e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16ae8:	2c00      	cmp	r4, #0
   16aea:	dbc2      	blt.n	16a72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   16aec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   16af0:	429c      	cmp	r4, r3
   16af2:	dabe      	bge.n	16a72 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16af4:	9803      	ldr	r0, [sp, #12]
   16af6:	fb01 6100 	mla	r1, r1, r0, r6
   16afa:	fb01 a202 	mla	r2, r1, r2, sl
   16afe:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   16b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16b04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   16b08:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16b0c:	2b04      	cmp	r3, #4
   16b0e:	d1b2      	bne.n	16a76 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16b10:	f1bb 0f00 	cmp.w	fp, #0
   16b14:	dbb1      	blt.n	16a7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   16b16:	f8d9 3004 	ldr.w	r3, [r9, #4]
   16b1a:	459b      	cmp	fp, r3
   16b1c:	daad      	bge.n	16a7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16b1e:	2f00      	cmp	r7, #0
   16b20:	dbad      	blt.n	16a7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   16b22:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16b26:	428f      	cmp	r7, r1
   16b28:	daa9      	bge.n	16a7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16b2a:	2d00      	cmp	r5, #0
   16b2c:	dba9      	blt.n	16a82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   16b2e:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16b32:	4295      	cmp	r5, r2
   16b34:	daa5      	bge.n	16a82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16b36:	2c00      	cmp	r4, #0
   16b38:	dba5      	blt.n	16a86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   16b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   16b3e:	429c      	cmp	r4, r3
   16b40:	daa1      	bge.n	16a86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16b42:	fb01 710b 	mla	r1, r1, fp, r7
   16b46:	fb01 5202 	mla	r2, r1, r2, r5
   16b4a:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   16b4e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   16b50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   16b54:	f7ea f8dc 	bl	d10 <__aeabi_fmul>
   16b58:	4601      	mov	r1, r0
   16b5a:	9802      	ldr	r0, [sp, #8]
   16b5c:	f7e9 ffd0 	bl	b00 <__addsf3>
   16b60:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   16b62:	3401      	adds	r4, #1
   16b64:	e7a5      	b.n	16ab2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16b66:	3701      	adds	r7, #1
   16b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b6a:	429f      	cmp	r7, r3
   16b6c:	da05      	bge.n	16b7a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   16b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16b72:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16b76:	2500      	movs	r5, #0
   16b78:	e788      	b.n	16a8c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   16b7a:	9e03      	ldr	r6, [sp, #12]
   16b7c:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   16b80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   16b82:	2b00      	cmp	r3, #0
   16b84:	d049      	beq.n	16c1a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   16b86:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   16b8a:	9802      	ldr	r0, [sp, #8]
   16b8c:	f7e9 ffb8 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   16b90:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16b94:	2b04      	cmp	r3, #4
   16b96:	d142      	bne.n	16c1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16b98:	2e00      	cmp	r6, #0
   16b9a:	db42      	blt.n	16c22 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   16b9c:	f8da 3004 	ldr.w	r3, [sl, #4]
   16ba0:	429e      	cmp	r6, r3
   16ba2:	da3e      	bge.n	16c22 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16ba4:	9b00      	ldr	r3, [sp, #0]
   16ba6:	2b00      	cmp	r3, #0
   16ba8:	db3d      	blt.n	16c26 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   16baa:	f8da 2008 	ldr.w	r2, [sl, #8]
   16bae:	4293      	cmp	r3, r2
   16bb0:	da39      	bge.n	16c26 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16bb2:	9901      	ldr	r1, [sp, #4]
   16bb4:	2900      	cmp	r1, #0
   16bb6:	db38      	blt.n	16c2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   16bb8:	f8da 300c 	ldr.w	r3, [sl, #12]
   16bbc:	4299      	cmp	r1, r3
   16bbe:	da34      	bge.n	16c2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16bc0:	f1bb 0f00 	cmp.w	fp, #0
   16bc4:	db33      	blt.n	16c2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   16bc6:	f8da 4010 	ldr.w	r4, [sl, #16]
   16bca:	45a3      	cmp	fp, r4
   16bcc:	da2f      	bge.n	16c2e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   16bce:	9900      	ldr	r1, [sp, #0]
   16bd0:	fb02 1206 	mla	r2, r2, r6, r1
   16bd4:	9901      	ldr	r1, [sp, #4]
   16bd6:	fb02 1303 	mla	r3, r2, r3, r1
   16bda:	fb03 b404 	mla	r4, r3, r4, fp
   16bde:	9019      	str	r0, [sp, #100]	; 0x64
   16be0:	9912      	ldr	r1, [sp, #72]	; 0x48
   16be2:	911a      	str	r1, [sp, #104]	; 0x68
   16be4:	9b04      	ldr	r3, [sp, #16]
   16be6:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   16be8:	f7ea fa30 	bl	104c <__aeabi_fcmplt>
   16bec:	bb08      	cbnz	r0, 16c32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   16bee:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   16bf0:	6829      	ldr	r1, [r5, #0]
   16bf2:	9804      	ldr	r0, [sp, #16]
   16bf4:	f7ea fa2a 	bl	104c <__aeabi_fcmplt>
   16bf8:	b9e8      	cbnz	r0, 16c36 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
   16bfa:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   16bfc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   16bfe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   16c02:	f10b 0b01 	add.w	fp, fp, #1
   16c06:	9b05      	ldr	r3, [sp, #20]
   16c08:	459b      	cmp	fp, r3
   16c0a:	da16      	bge.n	16c3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   16c0c:	2700      	movs	r7, #0
          float total = 0.f;
   16c0e:	2300      	movs	r3, #0
   16c10:	9302      	str	r3, [sp, #8]
   16c12:	9603      	str	r6, [sp, #12]
   16c14:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   16c18:	e7a6      	b.n	16b68 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   16c1a:	2100      	movs	r1, #0
   16c1c:	e7b5      	b.n	16b8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16c1e:	f001 ff39 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16c22:	f001 ff37 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16c26:	f001 ff35 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16c2a:	f001 ff33 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16c2e:	f001 ff31 	bl	18a94 <abort>
	return __b;
   16c32:	ad1a      	add	r5, sp, #104	; 0x68
   16c34:	e7dc      	b.n	16bf0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   16c36:	ad1b      	add	r5, sp, #108	; 0x6c
   16c38:	e7df      	b.n	16bfa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   16c3a:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16c3c:	9b01      	ldr	r3, [sp, #4]
   16c3e:	3301      	adds	r3, #1
   16c40:	9301      	str	r3, [sp, #4]
   16c42:	e6dd      	b.n	16a00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   16c44:	46c3      	mov	fp, r8
   16c46:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16c48:	9b00      	ldr	r3, [sp, #0]
   16c4a:	3301      	adds	r3, #1
   16c4c:	9300      	str	r3, [sp, #0]
   16c4e:	e6c8      	b.n	169e2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   16c50:	4656      	mov	r6, sl
   16c52:	46da      	mov	sl, fp
   16c54:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   16c56:	f108 0901 	add.w	r9, r8, #1
   16c5a:	e6b8      	b.n	169ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   16c5c:	b023      	add	sp, #140	; 0x8c
   16c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016c62 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   16c62:	b570      	push	{r4, r5, r6, lr}
   16c64:	4604      	mov	r4, r0
   16c66:	460e      	mov	r6, r1
   16c68:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   16c6a:	6913      	ldr	r3, [r2, #16]
   16c6c:	425b      	negs	r3, r3
   16c6e:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   16c70:	6953      	ldr	r3, [r2, #20]
   16c72:	425b      	negs	r3, r3
   16c74:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   16c76:	6993      	ldr	r3, [r2, #24]
   16c78:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   16c7a:	69d3      	ldr	r3, [r2, #28]
   16c7c:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   16c7e:	6a13      	ldr	r3, [r2, #32]
   16c80:	425b      	negs	r3, r3
   16c82:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16c84:	7808      	ldrb	r0, [r1, #0]
   16c86:	f000 fb54 	bl	17332 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16c8a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   16c8c:	686b      	ldr	r3, [r5, #4]
   16c8e:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   16c90:	682b      	ldr	r3, [r5, #0]
   16c92:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   16c94:	68b3      	ldr	r3, [r6, #8]
   16c96:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   16c98:	6873      	ldr	r3, [r6, #4]
   16c9a:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16c9c:	6973      	ldr	r3, [r6, #20]
   16c9e:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16ca0:	6933      	ldr	r3, [r6, #16]
   16ca2:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   16ca4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16ca6:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   16ca8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   16caa:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   16cac:	4620      	mov	r0, r4
   16cae:	bd70      	pop	{r4, r5, r6, pc}

00016cb0 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   16cb0:	b570      	push	{r4, r5, r6, lr}
   16cb2:	4604      	mov	r4, r0
   16cb4:	460d      	mov	r5, r1
   16cb6:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   16cb8:	f100 0234 	add.w	r2, r0, #52	; 0x34
   16cbc:	f100 0130 	add.w	r1, r0, #48	; 0x30
   16cc0:	7b28      	ldrb	r0, [r5, #12]
   16cc2:	f7f3 fdb1 	bl	a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   16cc6:	7828      	ldrb	r0, [r5, #0]
   16cc8:	f000 fb33 	bl	17332 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   16ccc:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   16cce:	6833      	ldr	r3, [r6, #0]
   16cd0:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   16cd2:	6873      	ldr	r3, [r6, #4]
   16cd4:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   16cd6:	686b      	ldr	r3, [r5, #4]
   16cd8:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   16cda:	68ab      	ldr	r3, [r5, #8]
   16cdc:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   16cde:	692b      	ldr	r3, [r5, #16]
   16ce0:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   16ce2:	696b      	ldr	r3, [r5, #20]
   16ce4:	8223      	strh	r3, [r4, #16]
}
   16ce6:	4620      	mov	r0, r4
   16ce8:	bd70      	pop	{r4, r5, r6, pc}

00016cea <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   16cea:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16cec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16cee:	b113      	cbz	r3, 16cf6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   16cf0:	2134      	movs	r1, #52	; 0x34
   16cf2:	4798      	blx	r3
}
   16cf4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   16cf6:	f001 fecd 	bl	18a94 <abort>

00016cfa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   16cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cfe:	b0a1      	sub	sp, #132	; 0x84
   16d00:	9217      	str	r2, [sp, #92]	; 0x5c
   16d02:	461e      	mov	r6, r3
   16d04:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   16d06:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   16d0a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   16d0e:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   16d10:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   16d14:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   16d16:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   16d1a:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   16d1c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   16d20:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   16d22:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   16d26:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   16d28:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   16d2c:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   16d2e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   16d32:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   16d34:	6b02      	ldr	r2, [r0, #48]	; 0x30
   16d36:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   16d38:	6b42      	ldr	r2, [r0, #52]	; 0x34
   16d3a:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   16d3c:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16d3e:	2a04      	cmp	r2, #4
   16d40:	f040 80b2 	bne.w	16ea8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   16d44:	468b      	mov	fp, r1
   16d46:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16d48:	2a04      	cmp	r2, #4
   16d4a:	f040 80af 	bne.w	16eac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   16d4e:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16d52:	2a04      	cmp	r2, #4
   16d54:	f040 80ac 	bne.w	16eb0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   16d58:	680a      	ldr	r2, [r1, #0]
   16d5a:	2a00      	cmp	r2, #0
   16d5c:	f340 80aa 	ble.w	16eb4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d60:	2a05      	cmp	r2, #5
   16d62:	f340 80a9 	ble.w	16eb8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   16d66:	684a      	ldr	r2, [r1, #4]
   16d68:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16d6a:	f8d9 1000 	ldr.w	r1, [r9]
   16d6e:	2900      	cmp	r1, #0
   16d70:	f340 80a4 	ble.w	16ebc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d74:	2905      	cmp	r1, #5
   16d76:	f340 80a3 	ble.w	16ec0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   16d7a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16d7e:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16d80:	4291      	cmp	r1, r2
   16d82:	f040 80a0 	bne.w	16ec6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16d86:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   16d88:	f8d9 1000 	ldr.w	r1, [r9]
   16d8c:	2900      	cmp	r1, #0
   16d8e:	f340 809c 	ble.w	16eca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16d92:	2905      	cmp	r1, #5
   16d94:	f340 809b 	ble.w	16ece <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   16d98:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16d9c:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16d9e:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   16da0:	428a      	cmp	r2, r1
   16da2:	f300 8097 	bgt.w	16ed4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   16da6:	aa1f      	add	r2, sp, #124	; 0x7c
   16da8:	6812      	ldr	r2, [r2, #0]
   16daa:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   16dac:	6832      	ldr	r2, [r6, #0]
   16dae:	2a03      	cmp	r2, #3
   16db0:	f340 8092 	ble.w	16ed8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16db4:	2a05      	cmp	r2, #5
   16db6:	f340 8091 	ble.w	16edc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   16dba:	6872      	ldr	r2, [r6, #4]
   16dbc:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   16dbe:	f8d9 1000 	ldr.w	r1, [r9]
   16dc2:	2903      	cmp	r1, #3
   16dc4:	f340 808c 	ble.w	16ee0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16dc8:	2905      	cmp	r1, #5
   16dca:	f340 808b 	ble.w	16ee4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   16dce:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16dd2:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16dd4:	4291      	cmp	r1, r2
   16dd6:	f040 8088 	bne.w	16eea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16dda:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   16ddc:	f8d9 1000 	ldr.w	r1, [r9]
   16de0:	2903      	cmp	r1, #3
   16de2:	f340 8084 	ble.w	16eee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16de6:	2905      	cmp	r1, #5
   16de8:	f340 8083 	ble.w	16ef2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   16dec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16df0:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   16df2:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   16df4:	428a      	cmp	r2, r1
   16df6:	dc7f      	bgt.n	16ef8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   16df8:	aa1d      	add	r2, sp, #116	; 0x74
   16dfa:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   16dfc:	f8db 2000 	ldr.w	r2, [fp]
   16e00:	2a01      	cmp	r2, #1
   16e02:	dd7b      	ble.n	16efc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e04:	2a05      	cmp	r2, #5
   16e06:	dd7b      	ble.n	16f00 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   16e08:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e0c:	6852      	ldr	r2, [r2, #4]
   16e0e:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   16e10:	f8db 2000 	ldr.w	r2, [fp]
   16e14:	2a02      	cmp	r2, #2
   16e16:	dd77      	ble.n	16f08 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e18:	2a05      	cmp	r2, #5
   16e1a:	dd77      	ble.n	16f0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   16e1c:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e20:	6892      	ldr	r2, [r2, #8]
   16e22:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   16e24:	f8db 2000 	ldr.w	r2, [fp]
   16e28:	2a03      	cmp	r2, #3
   16e2a:	dd73      	ble.n	16f14 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e2c:	2a05      	cmp	r2, #5
   16e2e:	dd73      	ble.n	16f18 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   16e30:	f8db 2004 	ldr.w	r2, [fp, #4]
   16e34:	68d2      	ldr	r2, [r2, #12]
   16e36:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   16e38:	6832      	ldr	r2, [r6, #0]
   16e3a:	2a01      	cmp	r2, #1
   16e3c:	dd70      	ble.n	16f20 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e3e:	2a05      	cmp	r2, #5
   16e40:	dd70      	ble.n	16f24 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   16e42:	6872      	ldr	r2, [r6, #4]
   16e44:	6852      	ldr	r2, [r2, #4]
   16e46:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   16e48:	6832      	ldr	r2, [r6, #0]
   16e4a:	2a02      	cmp	r2, #2
   16e4c:	dd6d      	ble.n	16f2a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e4e:	2a05      	cmp	r2, #5
   16e50:	dd6d      	ble.n	16f2e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   16e52:	6872      	ldr	r2, [r6, #4]
   16e54:	6892      	ldr	r2, [r2, #8]
   16e56:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   16e58:	f8d9 2000 	ldr.w	r2, [r9]
   16e5c:	2a01      	cmp	r2, #1
   16e5e:	dd69      	ble.n	16f34 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e60:	2a05      	cmp	r2, #5
   16e62:	dd69      	ble.n	16f38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   16e64:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16e68:	6852      	ldr	r2, [r2, #4]
   16e6a:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   16e6c:	f8d9 2000 	ldr.w	r2, [r9]
   16e70:	2a02      	cmp	r2, #2
   16e72:	dd65      	ble.n	16f40 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16e74:	2a05      	cmp	r2, #5
   16e76:	dd65      	ble.n	16f44 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   16e78:	f8d9 2004 	ldr.w	r2, [r9, #4]
   16e7c:	6892      	ldr	r2, [r2, #8]
   16e7e:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16e80:	9a04      	ldr	r2, [sp, #16]
   16e82:	9805      	ldr	r0, [sp, #20]
   16e84:	fb02 f200 	mul.w	r2, r2, r0
   16e88:	428a      	cmp	r2, r1
   16e8a:	d15f      	bne.n	16f4c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16e8c:	681c      	ldr	r4, [r3, #0]
   16e8e:	2c05      	cmp	r4, #5
   16e90:	dd5e      	ble.n	16f50 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   16e92:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   16e94:	2200      	movs	r2, #0
    int buffer_size = 1;
   16e96:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   16e98:	42a2      	cmp	r2, r4
   16e9a:	da5b      	bge.n	16f54 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   16e9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   16ea0:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   16ea4:	3201      	adds	r2, #1
   16ea6:	e7f7      	b.n	16e98 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   16ea8:	f001 fdf4 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   16eac:	f001 fdf2 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   16eb0:	f001 fdf0 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16eb4:	f001 fdee 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16eb8:	684a      	ldr	r2, [r1, #4]
   16eba:	e756      	b.n	16d6a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   16ebc:	f001 fdea 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ec0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16ec4:	e75c      	b.n	16d80 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16ec6:	f001 fde5 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16eca:	f001 fde3 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ece:	f8d9 1004 	ldr.w	r1, [r9, #4]
   16ed2:	e764      	b.n	16d9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   16ed4:	aa1e      	add	r2, sp, #120	; 0x78
   16ed6:	e767      	b.n	16da8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   16ed8:	f001 fddc 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16edc:	6932      	ldr	r2, [r6, #16]
   16ede:	e76e      	b.n	16dbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   16ee0:	f001 fdd8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ee4:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16ee8:	e774      	b.n	16dd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   16eea:	f001 fdd3 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   16eee:	f001 fdd1 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16ef2:	f8d9 1010 	ldr.w	r1, [r9, #16]
   16ef6:	e77c      	b.n	16df2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   16ef8:	aa1c      	add	r2, sp, #112	; 0x70
   16efa:	e77e      	b.n	16dfa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   16efc:	f001 fdca 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f00:	f8db 2008 	ldr.w	r2, [fp, #8]
   16f04:	920c      	str	r2, [sp, #48]	; 0x30
   16f06:	e783      	b.n	16e10 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   16f08:	f001 fdc4 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f0c:	f8db 200c 	ldr.w	r2, [fp, #12]
   16f10:	920b      	str	r2, [sp, #44]	; 0x2c
   16f12:	e787      	b.n	16e24 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   16f14:	f001 fdbe 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f18:	f8db 2010 	ldr.w	r2, [fp, #16]
   16f1c:	9204      	str	r2, [sp, #16]
   16f1e:	e78b      	b.n	16e38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   16f20:	f001 fdb8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f24:	68b2      	ldr	r2, [r6, #8]
   16f26:	920a      	str	r2, [sp, #40]	; 0x28
   16f28:	e78e      	b.n	16e48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   16f2a:	f001 fdb3 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f2e:	68f2      	ldr	r2, [r6, #12]
   16f30:	9209      	str	r2, [sp, #36]	; 0x24
   16f32:	e791      	b.n	16e58 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   16f34:	f001 fdae 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f38:	f8d9 2008 	ldr.w	r2, [r9, #8]
   16f3c:	9208      	str	r2, [sp, #32]
   16f3e:	e795      	b.n	16e6c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   16f40:	f001 fda8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   16f44:	f8d9 200c 	ldr.w	r2, [r9, #12]
   16f48:	9207      	str	r2, [sp, #28]
   16f4a:	e799      	b.n	16e80 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   16f4c:	f001 fda2 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   16f50:	3304      	adds	r3, #4
   16f52:	e79f      	b.n	16e94 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16f54:	428d      	cmp	r5, r1
   16f56:	d11e      	bne.n	16f96 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   16f58:	f04f 0a00 	mov.w	sl, #0
   16f5c:	464c      	mov	r4, r9
   16f5e:	46d1      	mov	r9, sl
   16f60:	46b2      	mov	sl, r6
   16f62:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16f64:	4599      	cmp	r9, r3
   16f66:	f280 811a 	bge.w	1719e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   16f6a:	2300      	movs	r3, #0
   16f6c:	9300      	str	r3, [sp, #0]
   16f6e:	46c8      	mov	r8, r9
   16f70:	46d1      	mov	r9, sl
   16f72:	46a2      	mov	sl, r4
   16f74:	9b00      	ldr	r3, [sp, #0]
   16f76:	9a08      	ldr	r2, [sp, #32]
   16f78:	4293      	cmp	r3, r2
   16f7a:	f280 810b 	bge.w	17194 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   16f7e:	2300      	movs	r3, #0
   16f80:	9301      	str	r3, [sp, #4]
   16f82:	4647      	mov	r7, r8
   16f84:	46d0      	mov	r8, sl
   16f86:	9b01      	ldr	r3, [sp, #4]
   16f88:	9a07      	ldr	r2, [sp, #28]
   16f8a:	4293      	cmp	r3, r2
   16f8c:	f280 80fc 	bge.w	17188 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   16f90:	f04f 0a00 	mov.w	sl, #0
   16f94:	e0ee      	b.n	17174 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   16f96:	f001 fd7d 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16f9a:	f001 fd7b 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16f9e:	f001 fd79 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16fa2:	f001 fd77 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16fa6:	f001 fd75 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16faa:	f001 fd73 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16fae:	f001 fd71 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16fb2:	f001 fd6f 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   16fb6:	f001 fd6d 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   16fba:	f001 fd6b 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   16fbe:	f001 fd69 	bl	18a94 <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   16fc2:	3601      	adds	r6, #1
   16fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16fc6:	429e      	cmp	r6, r3
   16fc8:	da60      	bge.n	1708c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   16fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16fcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16fce:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   16fd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   16fd4:	9915      	ldr	r1, [sp, #84]	; 0x54
   16fd6:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   16fda:	2b00      	cmp	r3, #0
   16fdc:	dbf1      	blt.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16fe0:	428b      	cmp	r3, r1
   16fe2:	daee      	bge.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16fe4:	2a00      	cmp	r2, #0
   16fe6:	dbec      	blt.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   16fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
   16fea:	428a      	cmp	r2, r1
   16fec:	dae9      	bge.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   16fee:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   16ff2:	2904      	cmp	r1, #4
   16ff4:	d1d1      	bne.n	16f9a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   16ff6:	2f00      	cmp	r7, #0
   16ff8:	dbd1      	blt.n	16f9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   16ffa:	f8db 1004 	ldr.w	r1, [fp, #4]
   16ffe:	428f      	cmp	r7, r1
   17000:	dacd      	bge.n	16f9e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17002:	2a00      	cmp	r2, #0
   17004:	dbcd      	blt.n	16fa2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   17006:	f8db c008 	ldr.w	ip, [fp, #8]
   1700a:	4562      	cmp	r2, ip
   1700c:	dac9      	bge.n	16fa2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1700e:	2b00      	cmp	r3, #0
   17010:	dbc9      	blt.n	16fa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   17012:	f8db 000c 	ldr.w	r0, [fp, #12]
   17016:	4283      	cmp	r3, r0
   17018:	dac5      	bge.n	16fa6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1701a:	f1ba 0f00 	cmp.w	sl, #0
   1701e:	dbc4      	blt.n	16faa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   17020:	f8db 1010 	ldr.w	r1, [fp, #16]
   17024:	458a      	cmp	sl, r1
   17026:	dac0      	bge.n	16faa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17028:	fb0c 2207 	mla	r2, ip, r7, r2
   1702c:	fb02 3300 	mla	r3, r2, r0, r3
   17030:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   17034:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17036:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   1703a:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1703e:	2b04      	cmp	r3, #4
   17040:	d1b5      	bne.n	16fae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17042:	f8d9 3004 	ldr.w	r3, [r9, #4]
   17046:	2b00      	cmp	r3, #0
   17048:	ddb3      	ble.n	16fb2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1704a:	2d00      	cmp	r5, #0
   1704c:	dbb3      	blt.n	16fb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   1704e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17052:	429d      	cmp	r5, r3
   17054:	daaf      	bge.n	16fb6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17056:	2e00      	cmp	r6, #0
   17058:	dbaf      	blt.n	16fba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   1705a:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1705e:	4296      	cmp	r6, r2
   17060:	daab      	bge.n	16fba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17062:	2c00      	cmp	r4, #0
   17064:	dbab      	blt.n	16fbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   17066:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1706a:	429c      	cmp	r4, r3
   1706c:	daa7      	bge.n	16fbe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1706e:	fb02 6205 	mla	r2, r2, r5, r6
   17072:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   17076:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   17078:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1707c:	f7e9 fe48 	bl	d10 <__aeabi_fmul>
   17080:	4601      	mov	r1, r0
   17082:	9803      	ldr	r0, [sp, #12]
   17084:	f7e9 fd3c 	bl	b00 <__addsf3>
   17088:	9003      	str	r0, [sp, #12]
   1708a:	e79a      	b.n	16fc2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1708c:	3501      	adds	r5, #1
   1708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17090:	429d      	cmp	r5, r3
   17092:	da01      	bge.n	17098 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   17094:	2600      	movs	r6, #0
   17096:	e795      	b.n	16fc4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   17098:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1709a:	2b00      	cmp	r3, #0
   1709c:	d058      	beq.n	17150 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   1709e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   170a2:	9803      	ldr	r0, [sp, #12]
   170a4:	f7e9 fd2c 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   170a8:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   170ac:	2b04      	cmp	r3, #4
   170ae:	d151      	bne.n	17154 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   170b0:	2f00      	cmp	r7, #0
   170b2:	db51      	blt.n	17158 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   170b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   170b8:	429f      	cmp	r7, r3
   170ba:	da4d      	bge.n	17158 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   170bc:	9b00      	ldr	r3, [sp, #0]
   170be:	2b00      	cmp	r3, #0
   170c0:	db4c      	blt.n	1715c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   170c2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   170c6:	4293      	cmp	r3, r2
   170c8:	da48      	bge.n	1715c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   170ca:	9901      	ldr	r1, [sp, #4]
   170cc:	2900      	cmp	r1, #0
   170ce:	db47      	blt.n	17160 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   170d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   170d4:	4299      	cmp	r1, r3
   170d6:	da43      	bge.n	17160 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   170d8:	2c00      	cmp	r4, #0
   170da:	db43      	blt.n	17164 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   170dc:	f8d8 1010 	ldr.w	r1, [r8, #16]
   170e0:	428c      	cmp	r4, r1
   170e2:	da3f      	bge.n	17164 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   170e4:	9d00      	ldr	r5, [sp, #0]
   170e6:	fb02 5207 	mla	r2, r2, r7, r5
   170ea:	9d01      	ldr	r5, [sp, #4]
   170ec:	fb02 5303 	mla	r3, r2, r3, r5
   170f0:	fb03 4401 	mla	r4, r3, r1, r4
   170f4:	9019      	str	r0, [sp, #100]	; 0x64
   170f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   170f8:	911a      	str	r1, [sp, #104]	; 0x68
   170fa:	9b06      	ldr	r3, [sp, #24]
   170fc:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   170fe:	f7e9 ffa5 	bl	104c <__aeabi_fcmplt>
   17102:	2800      	cmp	r0, #0
   17104:	d130      	bne.n	17168 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   17106:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   17108:	6829      	ldr	r1, [r5, #0]
   1710a:	9806      	ldr	r0, [sp, #24]
   1710c:	f7e9 ff9e 	bl	104c <__aeabi_fcmplt>
   17110:	bb60      	cbnz	r0, 1716c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   17112:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   17114:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   17116:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   1711a:	9b02      	ldr	r3, [sp, #8]
   1711c:	3301      	adds	r3, #1
   1711e:	9302      	str	r3, [sp, #8]
   17120:	9902      	ldr	r1, [sp, #8]
   17122:	9b05      	ldr	r3, [sp, #20]
   17124:	4299      	cmp	r1, r3
   17126:	da23      	bge.n	17170 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   17128:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   1712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1712e:	9a01      	ldr	r2, [sp, #4]
   17130:	fb03 f302 	mul.w	r3, r3, r2
   17134:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17136:	1a9b      	subs	r3, r3, r2
   17138:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   1713a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1713c:	9a00      	ldr	r2, [sp, #0]
   1713e:	fb03 f302 	mul.w	r3, r3, r2
   17142:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17144:	1a9b      	subs	r3, r3, r2
   17146:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   17148:	2500      	movs	r5, #0
            float total = 0.f;
   1714a:	2300      	movs	r3, #0
   1714c:	9303      	str	r3, [sp, #12]
   1714e:	e79e      	b.n	1708e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   17150:	2100      	movs	r1, #0
   17152:	e7a6      	b.n	170a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17154:	f001 fc9e 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17158:	f001 fc9c 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1715c:	f001 fc9a 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17160:	f001 fc98 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17164:	f001 fc96 	bl	18a94 <abort>
	return __b;
   17168:	ad1a      	add	r5, sp, #104	; 0x68
   1716a:	e7cd      	b.n	17108 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   1716c:	ad1b      	add	r5, sp, #108	; 0x6c
   1716e:	e7d0      	b.n	17112 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   17170:	f10a 0a01 	add.w	sl, sl, #1
   17174:	9b04      	ldr	r3, [sp, #16]
   17176:	459a      	cmp	sl, r3
   17178:	da02      	bge.n	17180 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   1717a:	2300      	movs	r3, #0
   1717c:	9302      	str	r3, [sp, #8]
   1717e:	e7cf      	b.n	17120 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17180:	9b01      	ldr	r3, [sp, #4]
   17182:	3301      	adds	r3, #1
   17184:	9301      	str	r3, [sp, #4]
   17186:	e6fe      	b.n	16f86 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   17188:	46c2      	mov	sl, r8
   1718a:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1718c:	9b00      	ldr	r3, [sp, #0]
   1718e:	3301      	adds	r3, #1
   17190:	9300      	str	r3, [sp, #0]
   17192:	e6ef      	b.n	16f74 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   17194:	4654      	mov	r4, sl
   17196:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   17198:	f108 0901 	add.w	r9, r8, #1
   1719c:	e6e1      	b.n	16f62 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   1719e:	b021      	add	sp, #132	; 0x84
   171a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000171a4 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   171a4:	b570      	push	{r4, r5, r6, lr}
   171a6:	4604      	mov	r4, r0
   171a8:	460e      	mov	r6, r1
   171aa:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   171ac:	6913      	ldr	r3, [r2, #16]
   171ae:	425b      	negs	r3, r3
   171b0:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   171b2:	6953      	ldr	r3, [r2, #20]
   171b4:	425b      	negs	r3, r3
   171b6:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   171b8:	6993      	ldr	r3, [r2, #24]
   171ba:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   171bc:	69d3      	ldr	r3, [r2, #28]
   171be:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   171c0:	6a13      	ldr	r3, [r2, #32]
   171c2:	425b      	negs	r3, r3
   171c4:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   171c6:	7808      	ldrb	r0, [r1, #0]
   171c8:	f000 f8b3 	bl	17332 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   171cc:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   171ce:	686b      	ldr	r3, [r5, #4]
   171d0:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   171d2:	682b      	ldr	r3, [r5, #0]
   171d4:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   171d6:	68b3      	ldr	r3, [r6, #8]
   171d8:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   171da:	6873      	ldr	r3, [r6, #4]
   171dc:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   171de:	69b3      	ldr	r3, [r6, #24]
   171e0:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   171e2:	6973      	ldr	r3, [r6, #20]
   171e4:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   171e6:	68f3      	ldr	r3, [r6, #12]
   171e8:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   171ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   171ec:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   171ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   171f0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   171f2:	4620      	mov	r0, r4
   171f4:	bd70      	pop	{r4, r5, r6, pc}

000171f6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   171f6:	b570      	push	{r4, r5, r6, lr}
   171f8:	4604      	mov	r4, r0
   171fa:	460d      	mov	r5, r1
   171fc:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   171fe:	f100 0234 	add.w	r2, r0, #52	; 0x34
   17202:	f100 0130 	add.w	r1, r0, #48	; 0x30
   17206:	7c28      	ldrb	r0, [r5, #16]
   17208:	f7f3 fb0e 	bl	a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   1720c:	7828      	ldrb	r0, [r5, #0]
   1720e:	f000 f890 	bl	17332 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   17212:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   17214:	6833      	ldr	r3, [r6, #0]
   17216:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   17218:	6873      	ldr	r3, [r6, #4]
   1721a:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   1721c:	686b      	ldr	r3, [r5, #4]
   1721e:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   17220:	68ab      	ldr	r3, [r5, #8]
   17222:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   17224:	696b      	ldr	r3, [r5, #20]
   17226:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   17228:	69ab      	ldr	r3, [r5, #24]
   1722a:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   1722c:	68eb      	ldr	r3, [r5, #12]
   1722e:	8263      	strh	r3, [r4, #18]
}
   17230:	4620      	mov	r0, r4
   17232:	bd70      	pop	{r4, r5, r6, pc}

00017234 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   17234:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   17236:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17238:	b113      	cbz	r3, 17240 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   1723a:	2120      	movs	r1, #32
   1723c:	4798      	blx	r3
}
   1723e:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   17240:	f001 fc28 	bl	18a94 <abort>

00017244 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   17244:	694a      	ldr	r2, [r1, #20]
   17246:	4252      	negs	r2, r2
   17248:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   1724a:	698a      	ldr	r2, [r1, #24]
   1724c:	4252      	negs	r2, r2
   1724e:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   17250:	69ca      	ldr	r2, [r1, #28]
   17252:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   17254:	680a      	ldr	r2, [r1, #0]
   17256:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   17258:	684a      	ldr	r2, [r1, #4]
   1725a:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   1725c:	688a      	ldr	r2, [r1, #8]
   1725e:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   17260:	68ca      	ldr	r2, [r1, #12]
   17262:	6182      	str	r2, [r0, #24]
  return op_params;
}
   17264:	4770      	bx	lr

00017266 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   17266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1726a:	b084      	sub	sp, #16
   1726c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1726e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   17270:	2a01      	cmp	r2, #1
   17272:	d103      	bne.n	1727c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   17274:	2000      	movs	r0, #0
}
   17276:	b004      	add	sp, #16
   17278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1727c:	4604      	mov	r4, r0
   1727e:	4688      	mov	r8, r1
   17280:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   17282:	2200      	movs	r2, #0
   17284:	2300      	movs	r3, #0
   17286:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1728a:	ab02      	add	r3, sp, #8
   1728c:	9301      	str	r3, [sp, #4]
   1728e:	9600      	str	r6, [sp, #0]
   17290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17294:	4639      	mov	r1, r7
   17296:	f7ea f953 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   1729a:	2800      	cmp	r0, #0
   1729c:	d1eb      	bne.n	17276 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1729e:	1d2b      	adds	r3, r5, #4
   172a0:	462a      	mov	r2, r5
   172a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   172a6:	f7f2 f8c7 	bl	9438 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   172aa:	693b      	ldr	r3, [r7, #16]
   172ac:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   172ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   172b0:	691b      	ldr	r3, [r3, #16]
   172b2:	b96b      	cbnz	r3, 172d0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   172b4:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   172b6:	6933      	ldr	r3, [r6, #16]
   172b8:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   172ba:	f105 030c 	add.w	r3, r5, #12
   172be:	9300      	str	r3, [sp, #0]
   172c0:	f105 0308 	add.w	r3, r5, #8
   172c4:	4632      	mov	r2, r6
   172c6:	4641      	mov	r1, r8
   172c8:	4620      	mov	r0, r4
   172ca:	f7f2 faa3 	bl	9814 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   172ce:	e7d2      	b.n	17276 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   172d0:	f001 fbe0 	bl	18a94 <abort>

000172d4 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   172d4:	b510      	push	{r4, lr}
   172d6:	4604      	mov	r4, r0
   172d8:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   172da:	f104 0220 	add.w	r2, r4, #32
   172de:	f104 011c 	add.w	r1, r4, #28
   172e2:	f7f3 faa1 	bl	a828 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   172e6:	4620      	mov	r0, r4
   172e8:	bd10      	pop	{r4, pc}

000172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   172ea:	b570      	push	{r4, r5, r6, lr}
   172ec:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   172ee:	b1b9      	cbz	r1, 17320 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   172f0:	684d      	ldr	r5, [r1, #4]
   172f2:	b1ad      	cbz	r5, 17320 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   172f4:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   172f8:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   172fa:	2e05      	cmp	r6, #5
   172fc:	dd07      	ble.n	1730e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   172fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   17302:	429e      	cmp	r6, r3
   17304:	d210      	bcs.n	17328 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   17306:	00b0      	lsls	r0, r6, #2
   17308:	f001 fbc2 	bl	18a90 <_Znaj>
   1730c:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1730e:	6823      	ldr	r3, [r4, #0]
   17310:	2b05      	cmp	r3, #5
   17312:	dd0c      	ble.n	1732e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   17314:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   17316:	00b2      	lsls	r2, r6, #2
   17318:	4629      	mov	r1, r5
   1731a:	f001 fbe2 	bl	18ae2 <memcpy>
  }
   1731e:	e001      	b.n	17324 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   17320:	2300      	movs	r3, #0
   17322:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   17324:	4620      	mov	r0, r4
   17326:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   17328:	f04f 30ff 	mov.w	r0, #4294967295
   1732c:	e7ec      	b.n	17308 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1732e:	1d20      	adds	r0, r4, #4
   17330:	e7f1      	b.n	17316 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

00017332 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   17332:	2801      	cmp	r0, #1
   17334:	d002      	beq.n	1733c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   17336:	2802      	cmp	r0, #2
   17338:	d000      	beq.n	1733c <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   1733a:	2000      	movs	r0, #0
  }
}
   1733c:	4770      	bx	lr

0001733e <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   1733e:	b110      	cbz	r0, 17346 <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   17340:	fab0 f080 	clz	r0, r0
   17344:	4770      	bx	lr
   17346:	2020      	movs	r0, #32
}
   17348:	4770      	bx	lr

0001734a <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   1734a:	1a40      	subs	r0, r0, r1
   1734c:	4770      	bx	lr

0001734e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1734e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17352:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   17354:	2001      	movs	r0, #1
   17356:	f7fe fe1d 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1735a:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1735c:	2000      	movs	r0, #0
   1735e:	f7fe fe19 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17362:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   17364:	2001      	movs	r0, #1
   17366:	f7fe fe15 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1736a:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   1736c:	4631      	mov	r1, r6
   1736e:	4620      	mov	r0, r4
   17370:	f7fe fe11 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17374:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17376:	2101      	movs	r1, #1
   17378:	4630      	mov	r0, r6
   1737a:	f7fe fe0e 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1737e:	4606      	mov	r6, r0
   17380:	4641      	mov	r1, r8
   17382:	4620      	mov	r0, r4
   17384:	f7fe fe15 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17388:	4629      	mov	r1, r5
   1738a:	f7fe fe04 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1738e:	4601      	mov	r1, r0
   17390:	4630      	mov	r0, r6
   17392:	f7fe fe04 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17396:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   17398:	2101      	movs	r1, #1
   1739a:	4620      	mov	r0, r4
   1739c:	f7fe fdfd 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   173a0:	4604      	mov	r4, r0
   173a2:	4631      	mov	r1, r6
   173a4:	4638      	mov	r0, r7
   173a6:	f7fe fe0c 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   173aa:	4629      	mov	r1, r5
   173ac:	f7fe fdf3 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   173b0:	4601      	mov	r1, r0
   173b2:	4620      	mov	r0, r4
   173b4:	f7fe fdf3 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   173b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000173bc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   173bc:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   173be:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   173c0:	2301      	movs	r3, #1
   173c2:	fa03 f101 	lsl.w	r1, r3, r1
   173c6:	17cd      	asrs	r5, r1, #31
   173c8:	fb01 f307 	mul.w	r3, r1, r7
   173cc:	fb00 3305 	mla	r3, r0, r5, r3
   173d0:	fba1 0100 	umull	r0, r1, r1, r0
   173d4:	4419      	add	r1, r3
             ? min
   173d6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   173da:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   173de:	db06      	blt.n	173ee <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   173e0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   173e4:	f171 0300 	sbcs.w	r3, r1, #0
   173e8:	da04      	bge.n	173f4 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   173ea:	bcf0      	pop	{r4, r5, r6, r7}
   173ec:	4770      	bx	lr
             ? min
   173ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   173f2:	e7fa      	b.n	173ea <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   173f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   173f8:	e7f7      	b.n	173ea <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

000173fa <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   173fa:	4048      	eors	r0, r1
   173fc:	4770      	bx	lr

000173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   173fe:	b570      	push	{r4, r5, r6, lr}
   17400:	4606      	mov	r6, r0
   17402:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   17404:	f7fe fdc7 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17408:	4604      	mov	r4, r0
   1740a:	4630      	mov	r0, r6
   1740c:	f7fe fdc9 	bl	15fa2 <_ZN8gemmlowp6BitNotIiEET_S1_>
   17410:	4629      	mov	r1, r5
   17412:	f7fe fdc0 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17416:	4601      	mov	r1, r0
   17418:	4620      	mov	r0, r4
   1741a:	f7ff ffee 	bl	173fa <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   1741e:	bd70      	pop	{r4, r5, r6, pc}

00017420 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   17420:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   17422:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   17424:	180a      	adds	r2, r1, r0
   17426:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1742a:	2a00      	cmp	r2, #0
   1742c:	f173 0100 	sbcs.w	r1, r3, #0
   17430:	db0d      	blt.n	1744e <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   17432:	2101      	movs	r1, #1
   17434:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   17436:	1854      	adds	r4, r2, r1
   17438:	eb43 0500 	adc.w	r5, r3, r0
   1743c:	0feb      	lsrs	r3, r5, #31
   1743e:	18e4      	adds	r4, r4, r3
   17440:	f145 0500 	adc.w	r5, r5, #0
   17444:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   17446:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   1744a:	bc30      	pop	{r4, r5}
   1744c:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1744e:	f04f 31ff 	mov.w	r1, #4294967295
   17452:	4608      	mov	r0, r1
   17454:	e7ef      	b.n	17436 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

00017456 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17456:	b508      	push	{r3, lr}
   17458:	f7fe fda1 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1745c:	bd08      	pop	{r3, pc}

0001745e <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   1745e:	4770      	bx	lr

00017460 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   17460:	b508      	push	{r3, lr}
   17462:	f7ff ff72 	bl	1734a <_ZN8gemmlowp3SubIiEET_S1_S1_>
   17466:	bd08      	pop	{r3, pc}

00017468 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   17468:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   1746a:	fab0 f080 	clz	r0, r0
   1746e:	0940      	lsrs	r0, r0, #5
   17470:	f7fe fd99 	bl	15fa6 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   17474:	bd08      	pop	{r3, pc}

00017476 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   17476:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   17478:	f7f7 fd24 	bl	eec4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   1747c:	bd08      	pop	{r3, pc}

0001747e <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   1747e:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   17480:	f7f7 fd50 	bl	ef24 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   17484:	bd08      	pop	{r3, pc}

00017486 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   17486:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17488:	f7ff ffb9 	bl	173fe <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   1748c:	bd08      	pop	{r3, pc}

0001748e <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   1748e:	b508      	push	{r3, lr}
   17490:	f7fe fd85 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17494:	bd08      	pop	{r3, pc}

00017496 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   17496:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   17498:	f7ff ff59 	bl	1734e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   1749c:	bd08      	pop	{r3, pc}

0001749e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1749e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174a2:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   174a4:	2003      	movs	r0, #3
   174a6:	f7fe fd75 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174aa:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   174ac:	2000      	movs	r0, #0
   174ae:	f7fe fd71 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174b2:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   174b4:	2001      	movs	r0, #1
   174b6:	f7fe fd6d 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   174ba:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   174bc:	4631      	mov	r1, r6
   174be:	4620      	mov	r0, r4
   174c0:	f7fe fd69 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   174c4:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   174c6:	2101      	movs	r1, #1
   174c8:	4630      	mov	r0, r6
   174ca:	f7fe fd66 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   174ce:	4606      	mov	r6, r0
   174d0:	4641      	mov	r1, r8
   174d2:	4620      	mov	r0, r4
   174d4:	f7fe fd6d 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   174d8:	4629      	mov	r1, r5
   174da:	f7fe fd5c 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   174de:	4601      	mov	r1, r0
   174e0:	4630      	mov	r0, r6
   174e2:	f7fe fd5c 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   174e6:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   174e8:	2102      	movs	r1, #2
   174ea:	4620      	mov	r0, r4
   174ec:	f7fe fd55 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   174f0:	4604      	mov	r4, r0
   174f2:	4631      	mov	r1, r6
   174f4:	4638      	mov	r0, r7
   174f6:	f7fe fd64 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   174fa:	4629      	mov	r1, r5
   174fc:	f7fe fd4b 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17500:	4601      	mov	r1, r0
   17502:	4620      	mov	r0, r4
   17504:	f7fe fd4b 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   17508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001750c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   1750c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   1750e:	f7ff ffc6 	bl	1749e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   17512:	bd08      	pop	{r3, pc}

00017514 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   17514:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   17516:	f7fe fd42 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   1751a:	bd08      	pop	{r3, pc}

0001751c <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   1751c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   1751e:	f7ff fff9 	bl	17514 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   17522:	bd08      	pop	{r3, pc}

00017524 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   17524:	b508      	push	{r3, lr}
   17526:	f7fe fd3a 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   1752a:	bd08      	pop	{r3, pc}

0001752c <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   1752c:	b508      	push	{r3, lr}
   1752e:	f7ff ff0c 	bl	1734a <_ZN8gemmlowp3SubIiEET_S1_S1_>
   17532:	bd08      	pop	{r3, pc}

00017534 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   17534:	b508      	push	{r3, lr}
   17536:	f7fe fd2e 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1753a:	bd08      	pop	{r3, pc}

0001753c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1753c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17540:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   17542:	f640 70ff 	movw	r0, #4095	; 0xfff
   17546:	f7fe fd25 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1754a:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1754c:	2000      	movs	r0, #0
   1754e:	f7fe fd21 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   17552:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   17554:	2001      	movs	r0, #1
   17556:	f7fe fd1d 	bl	15f94 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   1755a:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   1755c:	4631      	mov	r1, r6
   1755e:	4620      	mov	r0, r4
   17560:	f7fe fd19 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   17564:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   17566:	2101      	movs	r1, #1
   17568:	4630      	mov	r0, r6
   1756a:	f7fe fd16 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1756e:	4606      	mov	r6, r0
   17570:	4641      	mov	r1, r8
   17572:	4620      	mov	r0, r4
   17574:	f7fe fd1d 	bl	15fb2 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   17578:	4629      	mov	r1, r5
   1757a:	f7fe fd0c 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1757e:	4601      	mov	r1, r0
   17580:	4630      	mov	r0, r6
   17582:	f7fe fd0c 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
   17586:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   17588:	210c      	movs	r1, #12
   1758a:	4620      	mov	r0, r4
   1758c:	f7fe fd05 	bl	15f9a <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   17590:	4604      	mov	r4, r0
   17592:	4631      	mov	r1, r6
   17594:	4638      	mov	r0, r7
   17596:	f7fe fd14 	bl	15fc2 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   1759a:	4629      	mov	r1, r5
   1759c:	f7fe fcfb 	bl	15f96 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   175a0:	4601      	mov	r1, r0
   175a2:	4620      	mov	r0, r4
   175a4:	f7fe fcfb 	bl	15f9e <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000175ac <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   175ac:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   175ae:	f7ff ffc5 	bl	1753c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   175b2:	bd08      	pop	{r3, pc}

000175b4 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   175b4:	b508      	push	{r3, lr}
   175b6:	f7ff ff57 	bl	17468 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   175ba:	bd08      	pop	{r3, pc}

000175bc <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   175bc:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   175be:	f7f7 fe67 	bl	f290 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   175c2:	bd08      	pop	{r3, pc}

000175c4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   175c4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   175c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   175c8:	b113      	cbz	r3, 175d0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   175ca:	2120      	movs	r1, #32
   175cc:	4798      	blx	r3
}
   175ce:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   175d0:	f001 fa60 	bl	18a94 <abort>

000175d4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   175d4:	b4f0      	push	{r4, r5, r6, r7}
   175d6:	b084      	sub	sp, #16
  return t->dims->data[dim];
   175d8:	6893      	ldr	r3, [r2, #8]
   175da:	689e      	ldr	r6, [r3, #8]
   175dc:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   175de:	688a      	ldr	r2, [r1, #8]
   175e0:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   175e2:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   175e4:	68cd      	ldr	r5, [r1, #12]
   175e6:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   175e8:	b17b      	cbz	r3, 1760a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   175ea:	2801      	cmp	r0, #1
   175ec:	d003      	beq.n	175f6 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   175ee:	2802      	cmp	r0, #2
   175f0:	d006      	beq.n	17600 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   175f2:	2100      	movs	r1, #0
   175f4:	e00a      	b.n	1760c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   175f6:	1919      	adds	r1, r3, r4
   175f8:	3901      	subs	r1, #1
   175fa:	fb91 f1f3 	sdiv	r1, r1, r3
   175fe:	e005      	b.n	1760c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   17600:	1919      	adds	r1, r3, r4
   17602:	1b49      	subs	r1, r1, r5
   17604:	fb91 f1f3 	sdiv	r1, r1, r3
   17608:	e000      	b.n	1760c <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   1760a:	4619      	mov	r1, r3
   1760c:	b17a      	cbz	r2, 1762e <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   1760e:	2801      	cmp	r0, #1
   17610:	d003      	beq.n	1761a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   17612:	2802      	cmp	r0, #2
   17614:	d006      	beq.n	17624 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   17616:	2000      	movs	r0, #0
   17618:	e00a      	b.n	17630 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   1761a:	1990      	adds	r0, r2, r6
   1761c:	3801      	subs	r0, #1
   1761e:	fb90 f0f2 	sdiv	r0, r0, r2
   17622:	e005      	b.n	17630 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   17624:	1990      	adds	r0, r2, r6
   17626:	1bc0      	subs	r0, r0, r7
   17628:	fb90 f0f2 	sdiv	r0, r0, r2
   1762c:	e000      	b.n	17630 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   1762e:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   17630:	3801      	subs	r0, #1
   17632:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   17636:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   17638:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   1763c:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   17640:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   17644:	1052      	asrs	r2, r2, #1
  padding_values.height =
   17646:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   17648:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1764a:	3901      	subs	r1, #1
   1764c:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   17650:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   17652:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   17656:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   1765a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1765e:	105b      	asrs	r3, r3, #1
  padding_values.width =
   17660:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   17662:	9202      	str	r2, [sp, #8]
   17664:	ab04      	add	r3, sp, #16
   17666:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1766a:	9c08      	ldr	r4, [sp, #32]
   1766c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   17670:	2000      	movs	r0, #0
   17672:	b004      	add	sp, #16
   17674:	bcf0      	pop	{r4, r5, r6, r7}
   17676:	4770      	bx	lr

00017678 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   17678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1767c:	b0b5      	sub	sp, #212	; 0xd4
   1767e:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   17680:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   17682:	6891      	ldr	r1, [r2, #8]
   17684:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17686:	6851      	ldr	r1, [r2, #4]
   17688:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   1768a:	6911      	ldr	r1, [r2, #16]
   1768c:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   1768e:	68d2      	ldr	r2, [r2, #12]
   17690:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   17692:	685a      	ldr	r2, [r3, #4]
   17694:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   17698:	681a      	ldr	r2, [r3, #0]
   1769a:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   1769e:	699a      	ldr	r2, [r3, #24]
   176a0:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   176a2:	69db      	ldr	r3, [r3, #28]
   176a4:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   176a6:	4629      	mov	r1, r5
   176a8:	a81e      	add	r0, sp, #120	; 0x78
   176aa:	f7ff fe1e 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   176ae:	4628      	mov	r0, r5
   176b0:	f7fe fc5c 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   176b4:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   176b6:	4621      	mov	r1, r4
   176b8:	a824      	add	r0, sp, #144	; 0x90
   176ba:	f7ff fe16 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   176be:	4620      	mov	r0, r4
   176c0:	f7fe fc5a 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   176c4:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   176c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   176c8:	2b04      	cmp	r3, #4
   176ca:	d17b      	bne.n	177c4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   176cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   176ce:	2b04      	cmp	r3, #4
   176d0:	d17a      	bne.n	177c8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   176d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   176d4:	2b00      	cmp	r3, #0
   176d6:	dd79      	ble.n	177cc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   176d8:	2b05      	cmp	r3, #5
   176da:	dd79      	ble.n	177d0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   176dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   176de:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   176e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   176e2:	2a00      	cmp	r2, #0
   176e4:	dd76      	ble.n	177d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   176e6:	2a05      	cmp	r2, #5
   176e8:	dd76      	ble.n	177d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   176ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
   176ec:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   176ee:	429a      	cmp	r2, r3
   176f0:	d174      	bne.n	177dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   176f2:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   176f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   176f6:	2a00      	cmp	r2, #0
   176f8:	dd72      	ble.n	177e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   176fa:	2a05      	cmp	r2, #5
   176fc:	dd72      	ble.n	177e4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   176fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17700:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17702:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   17704:	4293      	cmp	r3, r2
   17706:	dc6f      	bgt.n	177e8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   17708:	ab33      	add	r3, sp, #204	; 0xcc
   1770a:	681b      	ldr	r3, [r3, #0]
   1770c:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   1770e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17710:	2b03      	cmp	r3, #3
   17712:	dd6b      	ble.n	177ec <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17714:	2b05      	cmp	r3, #5
   17716:	dd6b      	ble.n	177f0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   17718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1771a:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1771c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1771e:	2a03      	cmp	r2, #3
   17720:	dd68      	ble.n	177f4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17722:	2a05      	cmp	r2, #5
   17724:	dd68      	ble.n	177f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   17726:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17728:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1772a:	429a      	cmp	r2, r3
   1772c:	d166      	bne.n	177fc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1772e:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   17730:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17732:	2a03      	cmp	r2, #3
   17734:	dd64      	ble.n	17800 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17736:	2a05      	cmp	r2, #5
   17738:	dd64      	ble.n	17804 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   1773a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1773c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1773e:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   17740:	4293      	cmp	r3, r2
   17742:	dc61      	bgt.n	17808 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   17744:	ab31      	add	r3, sp, #196	; 0xc4
   17746:	681b      	ldr	r3, [r3, #0]
   17748:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   1774a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1774c:	2b01      	cmp	r3, #1
   1774e:	dd5d      	ble.n	1780c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17750:	2b05      	cmp	r3, #5
   17752:	dd5d      	ble.n	17810 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   17754:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17756:	685b      	ldr	r3, [r3, #4]
   17758:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   1775a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1775c:	2b02      	cmp	r3, #2
   1775e:	dd5a      	ble.n	17816 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17760:	2b05      	cmp	r3, #5
   17762:	dd5a      	ble.n	1781a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   17764:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17766:	689b      	ldr	r3, [r3, #8]
   17768:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   1776a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1776c:	2b01      	cmp	r3, #1
   1776e:	dd57      	ble.n	17820 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17770:	2b05      	cmp	r3, #5
   17772:	dd57      	ble.n	17824 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   17774:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17776:	685b      	ldr	r3, [r3, #4]
   17778:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   1777a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1777c:	2b02      	cmp	r3, #2
   1777e:	dd54      	ble.n	1782a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17780:	2b05      	cmp	r3, #5
   17782:	dd54      	ble.n	1782e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   17784:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17786:	689b      	ldr	r3, [r3, #8]
   17788:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   1778a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1778c:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   1778e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17790:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   17792:	f04f 0b00 	mov.w	fp, #0
   17796:	9b08      	ldr	r3, [sp, #32]
   17798:	459b      	cmp	fp, r3
   1779a:	f280 812d 	bge.w	179f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1779e:	f04f 0a00 	mov.w	sl, #0
   177a2:	46d1      	mov	r9, sl
   177a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   177a6:	4599      	cmp	r9, r3
   177a8:	f280 8123 	bge.w	179f2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   177ac:	f04f 0a00 	mov.w	sl, #0
   177b0:	46d8      	mov	r8, fp
   177b2:	46cb      	mov	fp, r9
   177b4:	46d1      	mov	r9, sl
   177b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   177b8:	4599      	cmp	r9, r3
   177ba:	f280 8115 	bge.w	179e8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   177be:	f04f 0a00 	mov.w	sl, #0
   177c2:	e0c6      	b.n	17952 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   177c4:	f001 f966 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   177c8:	f001 f964 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   177cc:	f001 f962 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   177d2:	e785      	b.n	176e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   177d4:	f001 f95e 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   177da:	e788      	b.n	176ee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   177dc:	f001 f95a 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   177e0:	f001 f958 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   177e6:	e78c      	b.n	17702 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   177e8:	ab32      	add	r3, sp, #200	; 0xc8
   177ea:	e78e      	b.n	1770a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   177ec:	f001 f952 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   177f2:	e793      	b.n	1771c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   177f4:	f001 f94e 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   177f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   177fa:	e796      	b.n	1772a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   177fc:	f001 f94a 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17800:	f001 f948 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17804:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17806:	e79a      	b.n	1773e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   17808:	ab30      	add	r3, sp, #192	; 0xc0
   1780a:	e79c      	b.n	17746 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   1780c:	f001 f942 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17810:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17812:	930f      	str	r3, [sp, #60]	; 0x3c
   17814:	e7a1      	b.n	1775a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   17816:	f001 f93d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1781a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1781c:	930e      	str	r3, [sp, #56]	; 0x38
   1781e:	e7a4      	b.n	1776a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   17820:	f001 f938 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17824:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17826:	930d      	str	r3, [sp, #52]	; 0x34
   17828:	e7a7      	b.n	1777a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   1782a:	f001 f933 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1782e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17830:	930c      	str	r3, [sp, #48]	; 0x30
   17832:	e7aa      	b.n	1778a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   17834:	a92e      	add	r1, sp, #184	; 0xb8
   17836:	e0a5      	b.n	17984 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   17838:	aa2d      	add	r2, sp, #180	; 0xb4
   1783a:	e0ad      	b.n	17998 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   1783c:	aa2b      	add	r2, sp, #172	; 0xac
   1783e:	e0b5      	b.n	179ac <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   17840:	ab2a      	add	r3, sp, #168	; 0xa8
   17842:	e0bc      	b.n	179be <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17844:	f001 f926 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17848:	f001 f924 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1784c:	f001 f922 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17850:	f001 f920 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17854:	f001 f91e 	bl	18a94 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17858:	3601      	adds	r6, #1
   1785a:	42b5      	cmp	r5, r6
   1785c:	dd37      	ble.n	178ce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1785e:	9f06      	ldr	r7, [sp, #24]
   17860:	9b07      	ldr	r3, [sp, #28]
   17862:	42bb      	cmp	r3, r7
   17864:	ddf8      	ble.n	17858 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17866:	9b04      	ldr	r3, [sp, #16]
   17868:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   1786a:	9b05      	ldr	r3, [sp, #20]
   1786c:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   17870:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17872:	2b04      	cmp	r3, #4
   17874:	d1e6      	bne.n	17844 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17876:	f1b8 0f00 	cmp.w	r8, #0
   1787a:	dbe5      	blt.n	17848 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   1787c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1787e:	4598      	cmp	r8, r3
   17880:	dae2      	bge.n	17848 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17882:	f1bc 0f00 	cmp.w	ip, #0
   17886:	dbe1      	blt.n	1784c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   17888:	9920      	ldr	r1, [sp, #128]	; 0x80
   1788a:	458c      	cmp	ip, r1
   1788c:	dade      	bge.n	1784c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1788e:	2800      	cmp	r0, #0
   17890:	dbde      	blt.n	17850 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   17892:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17894:	4290      	cmp	r0, r2
   17896:	dadb      	bge.n	17850 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17898:	f1ba 0f00 	cmp.w	sl, #0
   1789c:	dbda      	blt.n	17854 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   1789e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   178a0:	459a      	cmp	sl, r3
   178a2:	dad7      	bge.n	17854 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   178a4:	fb01 c108 	mla	r1, r1, r8, ip
   178a8:	fb01 0202 	mla	r2, r1, r2, r0
   178ac:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   178b0:	9a02      	ldr	r2, [sp, #8]
   178b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   178b6:	9801      	ldr	r0, [sp, #4]
   178b8:	f7e9 f922 	bl	b00 <__addsf3>
   178bc:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   178be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   178c2:	4620      	mov	r0, r4
   178c4:	f7e9 f91c 	bl	b00 <__addsf3>
   178c8:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   178ca:	3701      	adds	r7, #1
   178cc:	e7c8      	b.n	17860 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   178ce:	2100      	movs	r1, #0
   178d0:	4620      	mov	r0, r4
   178d2:	f7e9 fbb1 	bl	1038 <__aeabi_fcmpeq>
   178d6:	2800      	cmp	r0, #0
   178d8:	f040 808e 	bne.w	179f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   178dc:	4621      	mov	r1, r4
   178de:	9801      	ldr	r0, [sp, #4]
   178e0:	f7e9 faca 	bl	e78 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   178e4:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   178e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   178e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   178ea:	2b04      	cmp	r3, #4
   178ec:	d16b      	bne.n	179c6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   178ee:	f1b8 0f00 	cmp.w	r8, #0
   178f2:	db6a      	blt.n	179ca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   178f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   178f6:	4598      	cmp	r8, r3
   178f8:	da67      	bge.n	179ca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   178fa:	f1bb 0f00 	cmp.w	fp, #0
   178fe:	db66      	blt.n	179ce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   17900:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17902:	4593      	cmp	fp, r2
   17904:	da63      	bge.n	179ce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17906:	f1b9 0f00 	cmp.w	r9, #0
   1790a:	db62      	blt.n	179d2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   1790c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1790e:	4599      	cmp	r9, r3
   17910:	da5f      	bge.n	179d2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17912:	f1ba 0f00 	cmp.w	sl, #0
   17916:	db5e      	blt.n	179d6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   17918:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1791a:	45a2      	cmp	sl, r4
   1791c:	da5b      	bge.n	179d6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1791e:	fb02 b208 	mla	r2, r2, r8, fp
   17922:	fb02 9303 	mla	r3, r2, r3, r9
   17926:	fb03 a404 	mla	r4, r3, r4, sl
   1792a:	9012      	str	r0, [sp, #72]	; 0x48
   1792c:	9111      	str	r1, [sp, #68]	; 0x44
   1792e:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   17930:	f7e9 fb8c 	bl	104c <__aeabi_fcmplt>
   17934:	2800      	cmp	r0, #0
   17936:	d150      	bne.n	179da <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   17938:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   1793a:	6829      	ldr	r1, [r5, #0]
   1793c:	4630      	mov	r0, r6
   1793e:	f7e9 fb85 	bl	104c <__aeabi_fcmplt>
   17942:	2800      	cmp	r0, #0
   17944:	d14b      	bne.n	179de <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   17946:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17948:	9a03      	ldr	r2, [sp, #12]
   1794a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   1794e:	f10a 0a01 	add.w	sl, sl, #1
   17952:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17954:	459a      	cmp	sl, r3
   17956:	da44      	bge.n	179e2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   17958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1795a:	fb09 f203 	mul.w	r2, r9, r3
   1795e:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   17962:	1a53      	subs	r3, r2, r1
   17964:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   17966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17968:	fb0b f003 	mul.w	r0, fp, r3
   1796c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   17970:	1ac4      	subs	r4, r0, r3
   17972:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   17974:	2400      	movs	r4, #0
   17976:	942f      	str	r4, [sp, #188]	; 0xbc
   17978:	1a8a      	subs	r2, r1, r2
   1797a:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   1797c:	42a2      	cmp	r2, r4
   1797e:	f73f af59 	bgt.w	17834 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   17982:	a92f      	add	r1, sp, #188	; 0xbc
   17984:	6809      	ldr	r1, [r1, #0]
   17986:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   17988:	990e      	ldr	r1, [sp, #56]	; 0x38
   1798a:	440a      	add	r2, r1
   1798c:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   1798e:	9919      	ldr	r1, [sp, #100]	; 0x64
   17990:	428a      	cmp	r2, r1
   17992:	f6ff af51 	blt.w	17838 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   17996:	aa19      	add	r2, sp, #100	; 0x64
   17998:	6812      	ldr	r2, [r2, #0]
   1799a:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   1799c:	2200      	movs	r2, #0
   1799e:	922c      	str	r2, [sp, #176]	; 0xb0
   179a0:	1a1b      	subs	r3, r3, r0
   179a2:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   179a4:	4293      	cmp	r3, r2
   179a6:	f73f af49 	bgt.w	1783c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   179aa:	aa2c      	add	r2, sp, #176	; 0xb0
   179ac:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   179ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   179b0:	4413      	add	r3, r2
   179b2:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   179b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   179b6:	4293      	cmp	r3, r2
   179b8:	f6ff af42 	blt.w	17840 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   179bc:	ab18      	add	r3, sp, #96	; 0x60
   179be:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   179c0:	2400      	movs	r4, #0
          float total = 0.f;
   179c2:	9401      	str	r4, [sp, #4]
   179c4:	e749      	b.n	1785a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   179c6:	f001 f865 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   179ca:	f001 f863 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   179ce:	f001 f861 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   179d2:	f001 f85f 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   179d6:	f001 f85d 	bl	18a94 <abort>
	return __b;
   179da:	ad11      	add	r5, sp, #68	; 0x44
   179dc:	e7ad      	b.n	1793a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   179de:	ad10      	add	r5, sp, #64	; 0x40
   179e0:	e7b1      	b.n	17946 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   179e2:	f109 0901 	add.w	r9, r9, #1
   179e6:	e6e6      	b.n	177b6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   179e8:	46d9      	mov	r9, fp
   179ea:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   179ec:	f109 0901 	add.w	r9, r9, #1
   179f0:	e6d8      	b.n	177a4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   179f2:	f10b 0b01 	add.w	fp, fp, #1
   179f6:	e6ce      	b.n	17796 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   179f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   179fa:	2b05      	cmp	r3, #5
   179fc:	dd03      	ble.n	17a06 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   179fe:	9825      	ldr	r0, [sp, #148]	; 0x94
   17a00:	b108      	cbz	r0, 17a06 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   17a02:	f001 f832 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17a06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17a08:	2b05      	cmp	r3, #5
   17a0a:	dd03      	ble.n	17a14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   17a0c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17a0e:	b108      	cbz	r0, 17a14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   17a10:	f001 f82b 	bl	18a6a <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   17a14:	b035      	add	sp, #212	; 0xd4
   17a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017a1a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   17a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a1e:	b0b5      	sub	sp, #212	; 0xd4
   17a20:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   17a22:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   17a24:	6891      	ldr	r1, [r2, #8]
   17a26:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   17a28:	6851      	ldr	r1, [r2, #4]
   17a2a:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   17a2c:	6911      	ldr	r1, [r2, #16]
   17a2e:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   17a30:	68d2      	ldr	r2, [r2, #12]
   17a32:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   17a34:	685a      	ldr	r2, [r3, #4]
   17a36:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   17a3a:	681a      	ldr	r2, [r3, #0]
   17a3c:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   17a40:	699a      	ldr	r2, [r3, #24]
   17a42:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   17a44:	69db      	ldr	r3, [r3, #28]
   17a46:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   17a48:	4629      	mov	r1, r5
   17a4a:	a81e      	add	r0, sp, #120	; 0x78
   17a4c:	f7ff fc4d 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   17a50:	4628      	mov	r0, r5
   17a52:	f7fe fa8b 	bl	15f6c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   17a56:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   17a58:	4621      	mov	r1, r4
   17a5a:	a824      	add	r0, sp, #144	; 0x90
   17a5c:	f7ff fc45 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   17a60:	4620      	mov	r0, r4
   17a62:	f7fe fa89 	bl	15f78 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   17a66:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   17a68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17a6a:	2b04      	cmp	r3, #4
   17a6c:	f040 8081 	bne.w	17b72 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   17a70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17a72:	2b04      	cmp	r3, #4
   17a74:	d17f      	bne.n	17b76 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   17a76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17a78:	2b00      	cmp	r3, #0
   17a7a:	dd7e      	ble.n	17b7a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17a7c:	2b05      	cmp	r3, #5
   17a7e:	dd7e      	ble.n	17b7e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   17a80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17a82:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17a84:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17a86:	2a00      	cmp	r2, #0
   17a88:	dd7b      	ble.n	17b82 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17a8a:	2a05      	cmp	r2, #5
   17a8c:	dd7b      	ble.n	17b86 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   17a8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17a90:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17a92:	429a      	cmp	r2, r3
   17a94:	d179      	bne.n	17b8a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17a96:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   17a98:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17a9a:	2a00      	cmp	r2, #0
   17a9c:	dd77      	ble.n	17b8e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17a9e:	2a05      	cmp	r2, #5
   17aa0:	dd77      	ble.n	17b92 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   17aa2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17aa4:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17aa6:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   17aa8:	4293      	cmp	r3, r2
   17aaa:	dc74      	bgt.n	17b96 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   17aac:	ab33      	add	r3, sp, #204	; 0xcc
   17aae:	681b      	ldr	r3, [r3, #0]
   17ab0:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   17ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17ab4:	2b03      	cmp	r3, #3
   17ab6:	dd70      	ble.n	17b9a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ab8:	2b05      	cmp	r3, #5
   17aba:	dd70      	ble.n	17b9e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   17abc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17abe:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17ac0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17ac2:	2a03      	cmp	r2, #3
   17ac4:	dd6d      	ble.n	17ba2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ac6:	2a05      	cmp	r2, #5
   17ac8:	dd6d      	ble.n	17ba6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   17aca:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17acc:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17ace:	429a      	cmp	r2, r3
   17ad0:	d16b      	bne.n	17baa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17ad2:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   17ad4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17ad6:	2a03      	cmp	r2, #3
   17ad8:	dd69      	ble.n	17bae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ada:	2a05      	cmp	r2, #5
   17adc:	dd69      	ble.n	17bb2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   17ade:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17ae0:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17ae2:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   17ae4:	4293      	cmp	r3, r2
   17ae6:	dc66      	bgt.n	17bb6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   17ae8:	ab31      	add	r3, sp, #196	; 0xc4
   17aea:	681b      	ldr	r3, [r3, #0]
   17aec:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   17aee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17af0:	2b01      	cmp	r3, #1
   17af2:	dd62      	ble.n	17bba <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17af4:	2b05      	cmp	r3, #5
   17af6:	dd62      	ble.n	17bbe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   17af8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17afa:	685b      	ldr	r3, [r3, #4]
   17afc:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   17afe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17b00:	2b02      	cmp	r3, #2
   17b02:	dd5f      	ble.n	17bc4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b04:	2b05      	cmp	r3, #5
   17b06:	dd5f      	ble.n	17bc8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   17b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17b0a:	689b      	ldr	r3, [r3, #8]
   17b0c:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   17b0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17b10:	2b01      	cmp	r3, #1
   17b12:	dd5c      	ble.n	17bce <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b14:	2b05      	cmp	r3, #5
   17b16:	dd5c      	ble.n	17bd2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   17b18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17b1a:	685b      	ldr	r3, [r3, #4]
   17b1c:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   17b1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17b20:	2b02      	cmp	r3, #2
   17b22:	dd59      	ble.n	17bd8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b24:	2b05      	cmp	r3, #5
   17b26:	dd59      	ble.n	17bdc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   17b28:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17b2a:	689b      	ldr	r3, [r3, #8]
   17b2c:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17b2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17b30:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   17b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17b34:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   17b36:	f04f 0b00 	mov.w	fp, #0
   17b3a:	46d9      	mov	r9, fp
   17b3c:	46d3      	mov	fp, sl
   17b3e:	9b06      	ldr	r3, [sp, #24]
   17b40:	4599      	cmp	r9, r3
   17b42:	f280 8127 	bge.w	17d94 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17b46:	f04f 0a00 	mov.w	sl, #0
   17b4a:	46d8      	mov	r8, fp
   17b4c:	46cb      	mov	fp, r9
   17b4e:	46d1      	mov	r9, sl
   17b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17b52:	4599      	cmp	r9, r3
   17b54:	f280 8119 	bge.w	17d8a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17b58:	f04f 0a00 	mov.w	sl, #0
   17b5c:	464f      	mov	r7, r9
   17b5e:	4653      	mov	r3, sl
   17b60:	46c2      	mov	sl, r8
   17b62:	4698      	mov	r8, r3
   17b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17b66:	4598      	cmp	r8, r3
   17b68:	f280 810b 	bge.w	17d82 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   17b6c:	f04f 0900 	mov.w	r9, #0
   17b70:	e0ba      	b.n	17ce8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17b72:	f000 ff8f 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17b76:	f000 ff8d 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17b7a:	f000 ff8b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17b80:	e780      	b.n	17a84 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   17b82:	f000 ff87 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b86:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17b88:	e783      	b.n	17a92 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17b8a:	f000 ff83 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17b8e:	f000 ff81 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b92:	9a25      	ldr	r2, [sp, #148]	; 0x94
   17b94:	e787      	b.n	17aa6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   17b96:	ab32      	add	r3, sp, #200	; 0xc8
   17b98:	e789      	b.n	17aae <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   17b9a:	f000 ff7b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17b9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17ba0:	e78e      	b.n	17ac0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   17ba2:	f000 ff77 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ba6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17ba8:	e791      	b.n	17ace <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17baa:	f000 ff73 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17bae:	f000 ff71 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bb2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   17bb4:	e795      	b.n	17ae2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   17bb6:	ab30      	add	r3, sp, #192	; 0xc0
   17bb8:	e797      	b.n	17aea <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   17bba:	f000 ff6b 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17bc0:	930d      	str	r3, [sp, #52]	; 0x34
   17bc2:	e79c      	b.n	17afe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   17bc4:	f000 ff66 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17bca:	930c      	str	r3, [sp, #48]	; 0x30
   17bcc:	e79f      	b.n	17b0e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   17bce:	f000 ff61 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17bd4:	930b      	str	r3, [sp, #44]	; 0x2c
   17bd6:	e7a2      	b.n	17b1e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   17bd8:	f000 ff5c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17bdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17bde:	930a      	str	r3, [sp, #40]	; 0x28
   17be0:	e7a5      	b.n	17b2e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   17be2:	a92e      	add	r1, sp, #184	; 0xb8
   17be4:	e099      	b.n	17d1a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   17be6:	aa2d      	add	r2, sp, #180	; 0xb4
   17be8:	e0a1      	b.n	17d2e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   17bea:	aa2b      	add	r2, sp, #172	; 0xac
   17bec:	e0a9      	b.n	17d42 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   17bee:	ab2a      	add	r3, sp, #168	; 0xa8
   17bf0:	e0b0      	b.n	17d54 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17bf2:	f000 ff4f 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17bf6:	f000 ff4d 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17bfa:	f000 ff4b 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17bfe:	f000 ff49 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17c02:	f000 ff47 	bl	18a94 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   17c06:	6833      	ldr	r3, [r6, #0]
   17c08:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17c0a:	3501      	adds	r5, #1
   17c0c:	9b04      	ldr	r3, [sp, #16]
   17c0e:	42ab      	cmp	r3, r5
   17c10:	dd2d      	ble.n	17c6e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   17c12:	9b01      	ldr	r3, [sp, #4]
   17c14:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   17c16:	9b02      	ldr	r3, [sp, #8]
   17c18:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   17c1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17c1c:	2b04      	cmp	r3, #4
   17c1e:	d1e8      	bne.n	17bf2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17c20:	f1bb 0f00 	cmp.w	fp, #0
   17c24:	dbe7      	blt.n	17bf6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   17c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17c28:	459b      	cmp	fp, r3
   17c2a:	dae4      	bge.n	17bf6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17c2c:	2e00      	cmp	r6, #0
   17c2e:	dbe4      	blt.n	17bfa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   17c30:	9920      	ldr	r1, [sp, #128]	; 0x80
   17c32:	428e      	cmp	r6, r1
   17c34:	dae1      	bge.n	17bfa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17c36:	2800      	cmp	r0, #0
   17c38:	dbe1      	blt.n	17bfe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   17c3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17c3c:	4290      	cmp	r0, r2
   17c3e:	dade      	bge.n	17bfe <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17c40:	f1b9 0f00 	cmp.w	r9, #0
   17c44:	dbdd      	blt.n	17c02 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   17c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17c48:	4599      	cmp	r9, r3
   17c4a:	dada      	bge.n	17c02 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17c4c:	fb01 610b 	mla	r1, r1, fp, r6
   17c50:	fb01 0202 	mla	r2, r1, r2, r0
   17c54:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   17c58:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   17c5c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   17c60:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17c62:	f7e9 f9f3 	bl	104c <__aeabi_fcmplt>
   17c66:	2800      	cmp	r0, #0
   17c68:	d1cd      	bne.n	17c06 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   17c6a:	ae0f      	add	r6, sp, #60	; 0x3c
   17c6c:	e7cb      	b.n	17c06 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17c6e:	3401      	adds	r4, #1
   17c70:	9b05      	ldr	r3, [sp, #20]
   17c72:	42a3      	cmp	r3, r4
   17c74:	dd01      	ble.n	17c7a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17c76:	9d03      	ldr	r5, [sp, #12]
   17c78:	e7c8      	b.n	17c0c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   17c7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17c7c:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   17c7e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   17c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17c82:	2b04      	cmp	r3, #4
   17c84:	d16c      	bne.n	17d60 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17c86:	f1bb 0f00 	cmp.w	fp, #0
   17c8a:	db6b      	blt.n	17d64 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   17c8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17c8e:	459b      	cmp	fp, r3
   17c90:	da68      	bge.n	17d64 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17c92:	2f00      	cmp	r7, #0
   17c94:	db68      	blt.n	17d68 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   17c96:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17c98:	4297      	cmp	r7, r2
   17c9a:	da65      	bge.n	17d68 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17c9c:	f1b8 0f00 	cmp.w	r8, #0
   17ca0:	db64      	blt.n	17d6c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   17ca2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   17ca4:	4598      	cmp	r8, r3
   17ca6:	da61      	bge.n	17d6c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17ca8:	f1b9 0f00 	cmp.w	r9, #0
   17cac:	db60      	blt.n	17d70 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   17cae:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   17cb0:	45a1      	cmp	r9, r4
   17cb2:	da5d      	bge.n	17d70 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17cb4:	fb02 720b 	mla	r2, r2, fp, r7
   17cb8:	fb02 8303 	mla	r3, r2, r3, r8
   17cbc:	fb03 9404 	mla	r4, r3, r4, r9
   17cc0:	9012      	str	r0, [sp, #72]	; 0x48
   17cc2:	9111      	str	r1, [sp, #68]	; 0x44
   17cc4:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   17cc6:	f7e9 f9c1 	bl	104c <__aeabi_fcmplt>
   17cca:	2800      	cmp	r0, #0
   17ccc:	d152      	bne.n	17d74 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   17cce:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   17cd0:	6829      	ldr	r1, [r5, #0]
   17cd2:	4630      	mov	r0, r6
   17cd4:	f7e9 f9ba 	bl	104c <__aeabi_fcmplt>
   17cd8:	2800      	cmp	r0, #0
   17cda:	d14d      	bne.n	17d78 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   17cdc:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   17cde:	9a00      	ldr	r2, [sp, #0]
   17ce0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   17ce4:	f109 0901 	add.w	r9, r9, #1
   17ce8:	9b07      	ldr	r3, [sp, #28]
   17cea:	4599      	cmp	r9, r3
   17cec:	da46      	bge.n	17d7c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   17cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cf0:	fb08 f203 	mul.w	r2, r8, r3
   17cf4:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   17cf8:	1a53      	subs	r3, r2, r1
   17cfa:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   17cfc:	9b08      	ldr	r3, [sp, #32]
   17cfe:	fb07 f003 	mul.w	r0, r7, r3
   17d02:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   17d06:	1ac4      	subs	r4, r0, r3
   17d08:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   17d0a:	2400      	movs	r4, #0
   17d0c:	942f      	str	r4, [sp, #188]	; 0xbc
   17d0e:	1a8a      	subs	r2, r1, r2
   17d10:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   17d12:	42a2      	cmp	r2, r4
   17d14:	f73f af65 	bgt.w	17be2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   17d18:	a92f      	add	r1, sp, #188	; 0xbc
   17d1a:	6809      	ldr	r1, [r1, #0]
   17d1c:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   17d1e:	990c      	ldr	r1, [sp, #48]	; 0x30
   17d20:	440a      	add	r2, r1
   17d22:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   17d24:	9919      	ldr	r1, [sp, #100]	; 0x64
   17d26:	428a      	cmp	r2, r1
   17d28:	f6ff af5d 	blt.w	17be6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   17d2c:	aa19      	add	r2, sp, #100	; 0x64
   17d2e:	6812      	ldr	r2, [r2, #0]
   17d30:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   17d32:	2200      	movs	r2, #0
   17d34:	922c      	str	r2, [sp, #176]	; 0xb0
   17d36:	1a1b      	subs	r3, r3, r0
   17d38:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   17d3a:	4293      	cmp	r3, r2
   17d3c:	f73f af55 	bgt.w	17bea <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   17d40:	aa2c      	add	r2, sp, #176	; 0xb0
   17d42:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   17d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17d46:	4413      	add	r3, r2
   17d48:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   17d4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17d4c:	4293      	cmp	r3, r2
   17d4e:	f6ff af4e 	blt.w	17bee <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   17d52:	ab18      	add	r3, sp, #96	; 0x60
   17d54:	681b      	ldr	r3, [r3, #0]
   17d56:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   17d58:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   17d5c:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17d5e:	e787      	b.n	17c70 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17d60:	f000 fe98 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17d64:	f000 fe96 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17d68:	f000 fe94 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17d6c:	f000 fe92 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17d70:	f000 fe90 	bl	18a94 <abort>
	return __b;
   17d74:	ad11      	add	r5, sp, #68	; 0x44
   17d76:	e7ab      	b.n	17cd0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   17d78:	ad10      	add	r5, sp, #64	; 0x40
   17d7a:	e7af      	b.n	17cdc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17d7c:	f108 0801 	add.w	r8, r8, #1
   17d80:	e6f0      	b.n	17b64 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   17d82:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17d84:	f107 0901 	add.w	r9, r7, #1
   17d88:	e6e2      	b.n	17b50 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   17d8a:	46d9      	mov	r9, fp
   17d8c:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   17d8e:	f109 0901 	add.w	r9, r9, #1
   17d92:	e6d4      	b.n	17b3e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   17d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   17d96:	2b05      	cmp	r3, #5
   17d98:	dd03      	ble.n	17da2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   17d9a:	9825      	ldr	r0, [sp, #148]	; 0x94
   17d9c:	b108      	cbz	r0, 17da2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   17d9e:	f000 fe64 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   17da2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17da4:	2b05      	cmp	r3, #5
   17da6:	dd03      	ble.n	17db0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   17da8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   17daa:	b108      	cbz	r0, 17db0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   17dac:	f000 fe5d 	bl	18a6a <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   17db0:	b035      	add	sp, #212	; 0xd4
   17db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017db6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   17db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dba:	b0b1      	sub	sp, #196	; 0xc4
   17dbc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   17dbe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17dc0:	7a21      	ldrb	r1, [r4, #8]
   17dc2:	2909      	cmp	r1, #9
   17dc4:	f040 80a0 	bne.w	17f08 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   17dc8:	6891      	ldr	r1, [r2, #8]
   17dca:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   17dcc:	6851      	ldr	r1, [r2, #4]
   17dce:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   17dd0:	6911      	ldr	r1, [r2, #16]
   17dd2:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   17dd4:	68d2      	ldr	r2, [r2, #12]
   17dd6:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   17dd8:	685a      	ldr	r2, [r3, #4]
   17dda:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   17dde:	681a      	ldr	r2, [r3, #0]
   17de0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   17de4:	691a      	ldr	r2, [r3, #16]
   17de6:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   17de8:	695b      	ldr	r3, [r3, #20]
   17dea:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   17dec:	4621      	mov	r1, r4
   17dee:	a81a      	add	r0, sp, #104	; 0x68
   17df0:	f7ff fa7b 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17df4:	4620      	mov	r0, r4
   17df6:	f7fe f8c3 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   17dfa:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   17dfc:	4629      	mov	r1, r5
   17dfe:	a820      	add	r0, sp, #128	; 0x80
   17e00:	f7ff fa73 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   17e04:	4628      	mov	r0, r5
   17e06:	f7fe f8c1 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   17e0a:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17e0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17e0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17e10:	429a      	cmp	r2, r3
   17e12:	dc7b      	bgt.n	17f0c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   17e14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17e16:	2b04      	cmp	r3, #4
   17e18:	d17a      	bne.n	17f10 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   17e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17e1c:	2b04      	cmp	r3, #4
   17e1e:	d179      	bne.n	17f14 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   17e20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e22:	2b00      	cmp	r3, #0
   17e24:	dd78      	ble.n	17f18 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e26:	2b05      	cmp	r3, #5
   17e28:	dd78      	ble.n	17f1c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   17e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17e2c:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   17e2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e30:	2a00      	cmp	r2, #0
   17e32:	dd75      	ble.n	17f20 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e34:	2a05      	cmp	r2, #5
   17e36:	dd75      	ble.n	17f24 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   17e38:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e3a:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17e3c:	429a      	cmp	r2, r3
   17e3e:	d173      	bne.n	17f28 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e40:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   17e42:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e44:	2a00      	cmp	r2, #0
   17e46:	dd71      	ble.n	17f2c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e48:	2a05      	cmp	r2, #5
   17e4a:	dd71      	ble.n	17f30 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   17e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e4e:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e50:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   17e52:	4293      	cmp	r3, r2
   17e54:	dc6e      	bgt.n	17f34 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   17e56:	ab2f      	add	r3, sp, #188	; 0xbc
   17e58:	681b      	ldr	r3, [r3, #0]
   17e5a:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   17e5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e5e:	2b03      	cmp	r3, #3
   17e60:	dd6a      	ble.n	17f38 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e62:	2b05      	cmp	r3, #5
   17e64:	dd6a      	ble.n	17f3c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   17e66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17e68:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   17e6a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e6c:	2a03      	cmp	r2, #3
   17e6e:	dd67      	ble.n	17f40 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e70:	2a05      	cmp	r2, #5
   17e72:	dd67      	ble.n	17f44 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   17e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e76:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17e78:	429a      	cmp	r2, r3
   17e7a:	d165      	bne.n	17f48 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e7c:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   17e7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17e80:	2a03      	cmp	r2, #3
   17e82:	dd63      	ble.n	17f4c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e84:	2a05      	cmp	r2, #5
   17e86:	dd63      	ble.n	17f50 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   17e88:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17e8a:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   17e8c:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   17e8e:	4293      	cmp	r3, r2
   17e90:	dc60      	bgt.n	17f54 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   17e92:	ab2d      	add	r3, sp, #180	; 0xb4
   17e94:	681b      	ldr	r3, [r3, #0]
   17e96:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   17e98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17e9a:	2b01      	cmp	r3, #1
   17e9c:	dd5c      	ble.n	17f58 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17e9e:	2b05      	cmp	r3, #5
   17ea0:	dd5c      	ble.n	17f5c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   17ea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17ea4:	685b      	ldr	r3, [r3, #4]
   17ea6:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   17ea8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17eaa:	2b02      	cmp	r3, #2
   17eac:	dd59      	ble.n	17f62 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17eae:	2b05      	cmp	r3, #5
   17eb0:	dd59      	ble.n	17f66 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   17eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17eb4:	689b      	ldr	r3, [r3, #8]
   17eb6:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   17eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17eba:	2b01      	cmp	r3, #1
   17ebc:	dd56      	ble.n	17f6c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ebe:	2b05      	cmp	r3, #5
   17ec0:	dd56      	ble.n	17f70 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   17ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17ec4:	685b      	ldr	r3, [r3, #4]
   17ec6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   17ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   17eca:	2b02      	cmp	r3, #2
   17ecc:	dd53      	ble.n	17f76 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17ece:	2b05      	cmp	r3, #5
   17ed0:	dd53      	ble.n	17f7a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   17ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   17ed4:	689b      	ldr	r3, [r3, #8]
   17ed6:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   17ed8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17eda:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   17edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17ede:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   17ee0:	f04f 0800 	mov.w	r8, #0
   17ee4:	9b06      	ldr	r3, [sp, #24]
   17ee6:	4598      	cmp	r8, r3
   17ee8:	f280 8123 	bge.w	18132 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   17eec:	2700      	movs	r7, #0
   17eee:	46c6      	mov	lr, r8
   17ef0:	46b8      	mov	r8, r7
   17ef2:	9b08      	ldr	r3, [sp, #32]
   17ef4:	4598      	cmp	r8, r3
   17ef6:	f280 8119 	bge.w	1812c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   17efa:	2600      	movs	r6, #0
   17efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17efe:	429e      	cmp	r6, r3
   17f00:	f280 8111 	bge.w	18126 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   17f04:	2200      	movs	r2, #0
   17f06:	e0bc      	b.n	18082 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   17f08:	f000 fdc4 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   17f0c:	f000 fdc2 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   17f10:	f000 fdc0 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   17f14:	f000 fdbe 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f18:	f000 fdbc 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17f1e:	e786      	b.n	17e2e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   17f20:	f000 fdb8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17f26:	e789      	b.n	17e3c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17f28:	f000 fdb4 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f2c:	f000 fdb2 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f30:	9a21      	ldr	r2, [sp, #132]	; 0x84
   17f32:	e78d      	b.n	17e50 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   17f34:	ab2e      	add	r3, sp, #184	; 0xb8
   17f36:	e78f      	b.n	17e58 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   17f38:	f000 fdac 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   17f3e:	e794      	b.n	17e6a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   17f40:	f000 fda8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f44:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17f46:	e797      	b.n	17e78 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   17f48:	f000 fda4 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   17f4c:	f000 fda2 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f50:	9a24      	ldr	r2, [sp, #144]	; 0x90
   17f52:	e79b      	b.n	17e8c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   17f54:	ab2c      	add	r3, sp, #176	; 0xb0
   17f56:	e79d      	b.n	17e94 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   17f58:	f000 fd9c 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17f5e:	930a      	str	r3, [sp, #40]	; 0x28
   17f60:	e7a2      	b.n	17ea8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   17f62:	f000 fd97 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17f68:	9309      	str	r3, [sp, #36]	; 0x24
   17f6a:	e7a5      	b.n	17eb8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   17f6c:	f000 fd92 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f70:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17f72:	9308      	str	r3, [sp, #32]
   17f74:	e7a8      	b.n	17ec8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   17f76:	f000 fd8d 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   17f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17f7c:	930d      	str	r3, [sp, #52]	; 0x34
   17f7e:	e7ab      	b.n	17ed8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   17f80:	a82a      	add	r0, sp, #168	; 0xa8
   17f82:	e097      	b.n	180b4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   17f84:	a929      	add	r1, sp, #164	; 0xa4
   17f86:	e09f      	b.n	180c8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   17f88:	a927      	add	r1, sp, #156	; 0x9c
   17f8a:	e0a7      	b.n	180dc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   17f8c:	ab26      	add	r3, sp, #152	; 0x98
   17f8e:	e0ae      	b.n	180ee <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17f90:	f000 fd80 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17f94:	f000 fd7e 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17f98:	f000 fd7c 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17f9c:	f000 fd7a 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17fa0:	f000 fd78 	bl	18a94 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   17fa4:	3101      	adds	r1, #1
   17fa6:	9803      	ldr	r0, [sp, #12]
   17fa8:	4288      	cmp	r0, r1
   17faa:	dd2f      	ble.n	1800c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   17fac:	9801      	ldr	r0, [sp, #4]
   17fae:	9c02      	ldr	r4, [sp, #8]
   17fb0:	4284      	cmp	r4, r0
   17fb2:	ddf7      	ble.n	17fa4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   17fb4:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   17fb8:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   17fbc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   17fbe:	2d04      	cmp	r5, #4
   17fc0:	d1e6      	bne.n	17f90 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   17fc2:	f1be 0f00 	cmp.w	lr, #0
   17fc6:	dbe5      	blt.n	17f94 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   17fc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   17fca:	45ae      	cmp	lr, r5
   17fcc:	dae2      	bge.n	17f94 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   17fce:	f1ba 0f00 	cmp.w	sl, #0
   17fd2:	dbe1      	blt.n	17f98 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   17fd4:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   17fd8:	45da      	cmp	sl, fp
   17fda:	dadd      	bge.n	17f98 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   17fdc:	2f00      	cmp	r7, #0
   17fde:	dbdd      	blt.n	17f9c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   17fe0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   17fe2:	42af      	cmp	r7, r5
   17fe4:	dada      	bge.n	17f9c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   17fe6:	2a00      	cmp	r2, #0
   17fe8:	dbda      	blt.n	17fa0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   17fea:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   17fec:	42a2      	cmp	r2, r4
   17fee:	dad7      	bge.n	17fa0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   17ff0:	fb0b aa0e 	mla	sl, fp, lr, sl
   17ff4:	fb0a 7705 	mla	r7, sl, r5, r7
   17ff8:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   17ffc:	9d04      	ldr	r5, [sp, #16]
   17ffe:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   18000:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18002:	442c      	add	r4, r5
   18004:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   18006:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   18008:	3001      	adds	r0, #1
   1800a:	e7d0      	b.n	17fae <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   1800c:	2b00      	cmp	r3, #0
   1800e:	f000 8090 	beq.w	18132 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   18012:	990e      	ldr	r1, [sp, #56]	; 0x38
   18014:	2900      	cmp	r1, #0
   18016:	dd6f      	ble.n	180f8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   18018:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   1801c:	eb01 0160 	add.w	r1, r1, r0, asr #1
   18020:	fb91 f3f3 	sdiv	r3, r1, r3
   18024:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   18026:	9916      	ldr	r1, [sp, #88]	; 0x58
   18028:	428b      	cmp	r3, r1
   1802a:	db6c      	blt.n	18106 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   1802c:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   1802e:	681b      	ldr	r3, [r3, #0]
   18030:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   18032:	9917      	ldr	r1, [sp, #92]	; 0x5c
   18034:	428b      	cmp	r3, r1
   18036:	dc68      	bgt.n	1810a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   18038:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   1803a:	681c      	ldr	r4, [r3, #0]
   1803c:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   1803e:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18040:	2b04      	cmp	r3, #4
   18042:	d164      	bne.n	1810e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18044:	f1be 0f00 	cmp.w	lr, #0
   18048:	db63      	blt.n	18112 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   1804a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1804c:	459e      	cmp	lr, r3
   1804e:	da60      	bge.n	18112 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18050:	f1b8 0f00 	cmp.w	r8, #0
   18054:	db5f      	blt.n	18116 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   18056:	9822      	ldr	r0, [sp, #136]	; 0x88
   18058:	4580      	cmp	r8, r0
   1805a:	da5c      	bge.n	18116 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1805c:	2e00      	cmp	r6, #0
   1805e:	db5c      	blt.n	1811a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   18060:	9923      	ldr	r1, [sp, #140]	; 0x8c
   18062:	428e      	cmp	r6, r1
   18064:	da59      	bge.n	1811a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18066:	2a00      	cmp	r2, #0
   18068:	db59      	blt.n	1811e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   1806a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1806c:	429a      	cmp	r2, r3
   1806e:	da56      	bge.n	1811e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18070:	fb00 800e 	mla	r0, r0, lr, r8
   18074:	fb00 6101 	mla	r1, r0, r1, r6
   18078:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1807c:	9905      	ldr	r1, [sp, #20]
   1807e:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   18080:	3201      	adds	r2, #1
   18082:	9b07      	ldr	r3, [sp, #28]
   18084:	429a      	cmp	r2, r3
   18086:	da4c      	bge.n	18122 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   18088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1808a:	fb06 f103 	mul.w	r1, r6, r3
   1808e:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   18092:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   18096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18098:	fb08 f403 	mul.w	r4, r8, r3
   1809c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   180a0:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   180a4:	2500      	movs	r5, #0
   180a6:	952b      	str	r5, [sp, #172]	; 0xac
   180a8:	1a41      	subs	r1, r0, r1
   180aa:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   180ac:	42a9      	cmp	r1, r5
   180ae:	f73f af67 	bgt.w	17f80 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   180b2:	a82b      	add	r0, sp, #172	; 0xac
   180b4:	6800      	ldr	r0, [r0, #0]
   180b6:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   180b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   180ba:	4401      	add	r1, r0
   180bc:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   180be:	9815      	ldr	r0, [sp, #84]	; 0x54
   180c0:	4281      	cmp	r1, r0
   180c2:	f6ff af5f 	blt.w	17f84 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   180c6:	a915      	add	r1, sp, #84	; 0x54
   180c8:	6809      	ldr	r1, [r1, #0]
   180ca:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   180cc:	2100      	movs	r1, #0
   180ce:	9128      	str	r1, [sp, #160]	; 0xa0
   180d0:	1b1b      	subs	r3, r3, r4
   180d2:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   180d4:	428b      	cmp	r3, r1
   180d6:	f73f af57 	bgt.w	17f88 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   180da:	a928      	add	r1, sp, #160	; 0xa0
   180dc:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   180de:	980a      	ldr	r0, [sp, #40]	; 0x28
   180e0:	4403      	add	r3, r0
   180e2:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   180e4:	9814      	ldr	r0, [sp, #80]	; 0x50
   180e6:	4283      	cmp	r3, r0
   180e8:	f6ff af50 	blt.w	17f8c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   180ec:	ab14      	add	r3, sp, #80	; 0x50
   180ee:	681b      	ldr	r3, [r3, #0]
   180f0:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   180f2:	2300      	movs	r3, #0
   180f4:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   180f6:	e756      	b.n	17fa6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   180f8:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   180fc:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   18100:	fb91 f3f3 	sdiv	r3, r1, r3
   18104:	e78e      	b.n	18024 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   18106:	ab16      	add	r3, sp, #88	; 0x58
   18108:	e791      	b.n	1802e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   1810a:	ab17      	add	r3, sp, #92	; 0x5c
   1810c:	e795      	b.n	1803a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1810e:	f000 fcc1 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18112:	f000 fcbf 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18116:	f000 fcbd 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1811a:	f000 fcbb 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1811e:	f000 fcb9 	bl	18a94 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   18122:	3601      	adds	r6, #1
   18124:	e6ea      	b.n	17efc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   18126:	f108 0801 	add.w	r8, r8, #1
   1812a:	e6e2      	b.n	17ef2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   1812c:	f10e 0801 	add.w	r8, lr, #1
   18130:	e6d8      	b.n	17ee4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   18132:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18134:	2b05      	cmp	r3, #5
   18136:	dd03      	ble.n	18140 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   18138:	9821      	ldr	r0, [sp, #132]	; 0x84
   1813a:	b108      	cbz	r0, 18140 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   1813c:	f000 fc95 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   18140:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18142:	2b05      	cmp	r3, #5
   18144:	dd03      	ble.n	1814e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   18146:	981b      	ldr	r0, [sp, #108]	; 0x6c
   18148:	b108      	cbz	r0, 1814e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   1814a:	f000 fc8e 	bl	18a6a <_ZdaPv>
}
   1814e:	b031      	add	sp, #196	; 0xc4
   18150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018154 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   18154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18158:	b0b1      	sub	sp, #196	; 0xc4
   1815a:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   1815c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1815e:	6891      	ldr	r1, [r2, #8]
   18160:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   18162:	6851      	ldr	r1, [r2, #4]
   18164:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   18166:	6911      	ldr	r1, [r2, #16]
   18168:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   1816a:	68d2      	ldr	r2, [r2, #12]
   1816c:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   1816e:	685a      	ldr	r2, [r3, #4]
   18170:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   18174:	681a      	ldr	r2, [r3, #0]
   18176:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   1817a:	691a      	ldr	r2, [r3, #16]
   1817c:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   1817e:	695b      	ldr	r3, [r3, #20]
   18180:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   18182:	4629      	mov	r1, r5
   18184:	a819      	add	r0, sp, #100	; 0x64
   18186:	f7ff f8b0 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   1818a:	4628      	mov	r0, r5
   1818c:	f7fd fef8 	bl	15f80 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   18190:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   18192:	4621      	mov	r1, r4
   18194:	a81f      	add	r0, sp, #124	; 0x7c
   18196:	f7ff f8a8 	bl	172ea <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   1819a:	4620      	mov	r0, r4
   1819c:	f7fd fef6 	bl	15f8c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   181a0:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   181a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   181a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   181a6:	429a      	cmp	r2, r3
   181a8:	f300 8081 	bgt.w	182ae <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   181ac:	f112 0f80 	cmn.w	r2, #128	; 0x80
   181b0:	db7f      	blt.n	182b2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   181b2:	2b7f      	cmp	r3, #127	; 0x7f
   181b4:	dc7f      	bgt.n	182b6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   181b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   181b8:	2b04      	cmp	r3, #4
   181ba:	d17e      	bne.n	182ba <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   181bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   181be:	2b04      	cmp	r3, #4
   181c0:	d17d      	bne.n	182be <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   181c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   181c4:	2b00      	cmp	r3, #0
   181c6:	dd7c      	ble.n	182c2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181c8:	2b05      	cmp	r3, #5
   181ca:	dd7c      	ble.n	182c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   181cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   181ce:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   181d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   181d2:	2a00      	cmp	r2, #0
   181d4:	dd79      	ble.n	182ca <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181d6:	2a05      	cmp	r2, #5
   181d8:	dd79      	ble.n	182ce <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   181da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   181dc:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   181de:	429a      	cmp	r2, r3
   181e0:	d177      	bne.n	182d2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   181e2:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   181e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   181e6:	2a00      	cmp	r2, #0
   181e8:	dd75      	ble.n	182d6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   181ea:	2a05      	cmp	r2, #5
   181ec:	dd75      	ble.n	182da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   181ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
   181f0:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   181f2:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   181f4:	4293      	cmp	r3, r2
   181f6:	dc72      	bgt.n	182de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   181f8:	ab2f      	add	r3, sp, #188	; 0xbc
   181fa:	681b      	ldr	r3, [r3, #0]
   181fc:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   181fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18200:	2b03      	cmp	r3, #3
   18202:	dd6e      	ble.n	182e2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18204:	2b05      	cmp	r3, #5
   18206:	dd6e      	ble.n	182e6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   18208:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1820a:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1820c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1820e:	2a03      	cmp	r2, #3
   18210:	dd6b      	ble.n	182ea <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18212:	2a05      	cmp	r2, #5
   18214:	dd6b      	ble.n	182ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   18216:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18218:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1821a:	429a      	cmp	r2, r3
   1821c:	d169      	bne.n	182f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1821e:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   18220:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   18222:	2a03      	cmp	r2, #3
   18224:	dd67      	ble.n	182f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18226:	2a05      	cmp	r2, #5
   18228:	dd67      	ble.n	182fa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   1822a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1822c:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1822e:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   18230:	4293      	cmp	r3, r2
   18232:	dc64      	bgt.n	182fe <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   18234:	ab2d      	add	r3, sp, #180	; 0xb4
   18236:	681b      	ldr	r3, [r3, #0]
   18238:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   1823a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1823c:	2b01      	cmp	r3, #1
   1823e:	dd60      	ble.n	18302 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18240:	2b05      	cmp	r3, #5
   18242:	dd60      	ble.n	18306 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   18244:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18246:	685b      	ldr	r3, [r3, #4]
   18248:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   1824a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1824c:	2b02      	cmp	r3, #2
   1824e:	dd5d      	ble.n	1830c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18250:	2b05      	cmp	r3, #5
   18252:	dd5d      	ble.n	18310 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   18254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18256:	689b      	ldr	r3, [r3, #8]
   18258:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   1825a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1825c:	2b01      	cmp	r3, #1
   1825e:	dd5a      	ble.n	18316 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18260:	2b05      	cmp	r3, #5
   18262:	dd5a      	ble.n	1831a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   18264:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18266:	685b      	ldr	r3, [r3, #4]
   18268:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1826a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1826c:	2b02      	cmp	r3, #2
   1826e:	dd57      	ble.n	18320 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18270:	2b05      	cmp	r3, #5
   18272:	dd57      	ble.n	18324 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   18274:	9b20      	ldr	r3, [sp, #128]	; 0x80
   18276:	689b      	ldr	r3, [r3, #8]
   18278:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   1827a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1827c:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   1827e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18280:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   18282:	f04f 0c00 	mov.w	ip, #0
   18286:	46c8      	mov	r8, r9
   18288:	46e1      	mov	r9, ip
   1828a:	9b04      	ldr	r3, [sp, #16]
   1828c:	4599      	cmp	r9, r3
   1828e:	f280 812b 	bge.w	184e8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x394>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   18292:	2700      	movs	r7, #0
   18294:	46c6      	mov	lr, r8
   18296:	46b8      	mov	r8, r7
   18298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1829a:	4598      	cmp	r8, r3
   1829c:	f280 8120 	bge.w	184e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x38c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   182a0:	2600      	movs	r6, #0
   182a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182a4:	429e      	cmp	r6, r3
   182a6:	f280 8118 	bge.w	184da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x386>
        for (int channel = 0; channel < depth; ++channel) {
   182aa:	2300      	movs	r3, #0
   182ac:	e0c7      	b.n	1843e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ea>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   182ae:	f000 fbf1 	bl	18a94 <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   182b2:	f000 fbef 	bl	18a94 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   182b6:	f000 fbed 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   182ba:	f000 fbeb 	bl	18a94 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   182be:	f000 fbe9 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   182c2:	f000 fbe7 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   182c8:	e782      	b.n	181d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   182ca:	f000 fbe3 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
   182d0:	e785      	b.n	181de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   182d2:	f000 fbdf 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   182d6:	f000 fbdd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   182dc:	e789      	b.n	181f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   182de:	ab2e      	add	r3, sp, #184	; 0xb8
   182e0:	e78b      	b.n	181fa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   182e2:	f000 fbd7 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   182e8:	e790      	b.n	1820c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   182ea:	f000 fbd3 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182ee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   182f0:	e793      	b.n	1821a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   182f2:	f000 fbcf 	bl	18a94 <abort>
    TFLITE_DCHECK_LT(i, size_);
   182f6:	f000 fbcd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   182fa:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   182fc:	e797      	b.n	1822e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   182fe:	ab2c      	add	r3, sp, #176	; 0xb0
   18300:	e799      	b.n	18236 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   18302:	f000 fbc7 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18308:	9306      	str	r3, [sp, #24]
   1830a:	e79e      	b.n	1824a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   1830c:	f000 fbc2 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18310:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18312:	9305      	str	r3, [sp, #20]
   18314:	e7a1      	b.n	1825a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   18316:	f000 fbbd 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1831a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1831c:	930b      	str	r3, [sp, #44]	; 0x2c
   1831e:	e7a4      	b.n	1826a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   18320:	f000 fbb8 	bl	18a94 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   18324:	9b22      	ldr	r3, [sp, #136]	; 0x88
   18326:	930a      	str	r3, [sp, #40]	; 0x28
   18328:	e7a7      	b.n	1827a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   1832a:	aa2a      	add	r2, sp, #168	; 0xa8
   1832c:	e0a0      	b.n	18470 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x31c>
	return __b;
   1832e:	aa29      	add	r2, sp, #164	; 0xa4
   18330:	e0a8      	b.n	18484 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x330>
	return __b;
   18332:	a927      	add	r1, sp, #156	; 0x9c
   18334:	e0b0      	b.n	18498 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x344>
	return __b;
   18336:	aa26      	add	r2, sp, #152	; 0x98
   18338:	e0b7      	b.n	184aa <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1833a:	f000 fbab 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1833e:	f000 fba9 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18342:	f000 fba7 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18346:	f000 fba5 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1834a:	f000 fba3 	bl	18a94 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   1834e:	f994 2000 	ldrsb.w	r2, [r4]
   18352:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   18356:	3001      	adds	r0, #1
   18358:	9a02      	ldr	r2, [sp, #8]
   1835a:	4282      	cmp	r2, r0
   1835c:	dd2d      	ble.n	183ba <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x266>
              const int in_x = in_x_origin + filter_x;
   1835e:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   18362:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   18366:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   18368:	2d04      	cmp	r5, #4
   1836a:	d1e6      	bne.n	1833a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1836c:	f1b9 0f00 	cmp.w	r9, #0
   18370:	dbe5      	blt.n	1833e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   18372:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   18374:	45a9      	cmp	r9, r5
   18376:	dae2      	bge.n	1833e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   18378:	2f00      	cmp	r7, #0
   1837a:	dbe2      	blt.n	18342 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   1837c:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   18380:	455f      	cmp	r7, fp
   18382:	dade      	bge.n	18342 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18384:	2c00      	cmp	r4, #0
   18386:	dbde      	blt.n	18346 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   18388:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1838a:	42ac      	cmp	r4, r5
   1838c:	dadb      	bge.n	18346 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1838e:	2b00      	cmp	r3, #0
   18390:	dbdb      	blt.n	1834a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   18392:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   18394:	4293      	cmp	r3, r2
   18396:	dad8      	bge.n	1834a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   18398:	fb0b 7709 	mla	r7, fp, r9, r7
   1839c:	fb07 4405 	mla	r4, r7, r5, r4
   183a0:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   183a4:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   183a8:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   183ac:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   183b0:	4295      	cmp	r5, r2
   183b2:	dbcc      	blt.n	1834e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
      return __a;
   183b4:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   183b8:	e7c9      	b.n	1834e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   183ba:	3101      	adds	r1, #1
   183bc:	9a03      	ldr	r2, [sp, #12]
   183be:	428a      	cmp	r2, r1
   183c0:	dd01      	ble.n	183c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x272>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   183c2:	9801      	ldr	r0, [sp, #4]
   183c4:	e7c8      	b.n	18358 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x204>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   183c6:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   183ca:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   183ce:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   183d2:	428a      	cmp	r2, r1
   183d4:	dc6f      	bgt.n	184b6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
      return __a;
   183d6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   183da:	f992 1000 	ldrsb.w	r1, [r2]
   183de:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   183e2:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   183e6:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   183ea:	4291      	cmp	r1, r2
   183ec:	dc66      	bgt.n	184bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
      return __a;
   183ee:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   183f2:	f992 4000 	ldrsb.w	r4, [r2]
   183f6:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   183fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   183fc:	2a04      	cmp	r2, #4
   183fe:	d160      	bne.n	184c2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   18400:	f1b9 0f00 	cmp.w	r9, #0
   18404:	db5f      	blt.n	184c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
   18406:	9a20      	ldr	r2, [sp, #128]	; 0x80
   18408:	4591      	cmp	r9, r2
   1840a:	da5c      	bge.n	184c6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1840c:	f1b8 0f00 	cmp.w	r8, #0
   18410:	db5b      	blt.n	184ca <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
   18412:	9821      	ldr	r0, [sp, #132]	; 0x84
   18414:	4580      	cmp	r8, r0
   18416:	da58      	bge.n	184ca <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   18418:	2e00      	cmp	r6, #0
   1841a:	db58      	blt.n	184ce <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
   1841c:	9922      	ldr	r1, [sp, #136]	; 0x88
   1841e:	428e      	cmp	r6, r1
   18420:	da55      	bge.n	184ce <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   18422:	2b00      	cmp	r3, #0
   18424:	db55      	blt.n	184d2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
   18426:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   18428:	4293      	cmp	r3, r2
   1842a:	da52      	bge.n	184d2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1842c:	fb00 8009 	mla	r0, r0, r9, r8
   18430:	fb00 6101 	mla	r1, r0, r1, r6
   18434:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   18438:	9900      	ldr	r1, [sp, #0]
   1843a:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   1843c:	3301      	adds	r3, #1
   1843e:	9a07      	ldr	r2, [sp, #28]
   18440:	4293      	cmp	r3, r2
   18442:	da48      	bge.n	184d6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x382>
              (out_x * stride_width) - params.padding_values.width;
   18444:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18446:	fb06 f002 	mul.w	r0, r6, r2
   1844a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   1844e:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   18452:	9908      	ldr	r1, [sp, #32]
   18454:	fb08 f401 	mul.w	r4, r8, r1
   18458:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   1845c:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   18460:	2500      	movs	r5, #0
   18462:	952b      	str	r5, [sp, #172]	; 0xac
   18464:	1a10      	subs	r0, r2, r0
   18466:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   18468:	42a8      	cmp	r0, r5
   1846a:	f73f af5e 	bgt.w	1832a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   1846e:	aa2b      	add	r2, sp, #172	; 0xac
   18470:	6812      	ldr	r2, [r2, #0]
   18472:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   18474:	9a05      	ldr	r2, [sp, #20]
   18476:	4410      	add	r0, r2
   18478:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   1847a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1847c:	4290      	cmp	r0, r2
   1847e:	f6ff af56 	blt.w	1832e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   18482:	aa14      	add	r2, sp, #80	; 0x50
   18484:	6812      	ldr	r2, [r2, #0]
   18486:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   18488:	2200      	movs	r2, #0
   1848a:	9228      	str	r2, [sp, #160]	; 0xa0
   1848c:	1b0a      	subs	r2, r1, r4
   1848e:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   18490:	2a00      	cmp	r2, #0
   18492:	f73f af4e 	bgt.w	18332 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   18496:	a928      	add	r1, sp, #160	; 0xa0
   18498:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   1849a:	9806      	ldr	r0, [sp, #24]
   1849c:	4402      	add	r2, r0
   1849e:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   184a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   184a2:	4282      	cmp	r2, r0
   184a4:	f6ff af47 	blt.w	18336 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   184a8:	aa13      	add	r2, sp, #76	; 0x4c
   184aa:	6812      	ldr	r2, [r2, #0]
   184ac:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   184ae:	2280      	movs	r2, #128	; 0x80
   184b0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   184b4:	e782      	b.n	183bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x268>
	return __b;
   184b6:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   184ba:	e78e      	b.n	183da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x286>
	return __b;
   184bc:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   184c0:	e797      	b.n	183f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x29e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   184c2:	f000 fae7 	bl	18a94 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   184c6:	f000 fae5 	bl	18a94 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   184ca:	f000 fae3 	bl	18a94 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   184ce:	f000 fae1 	bl	18a94 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   184d2:	f000 fadf 	bl	18a94 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   184d6:	3601      	adds	r6, #1
   184d8:	e6e3      	b.n	182a2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   184da:	f108 0801 	add.w	r8, r8, #1
   184de:	e6db      	b.n	18298 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   184e0:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   184e2:	f109 0901 	add.w	r9, r9, #1
   184e6:	e6d0      	b.n	1828a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   184e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   184ea:	2b05      	cmp	r3, #5
   184ec:	dd03      	ble.n	184f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
      delete[] dims_pointer_;
   184ee:	9820      	ldr	r0, [sp, #128]	; 0x80
   184f0:	b108      	cbz	r0, 184f6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
   184f2:	f000 faba 	bl	18a6a <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   184f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   184f8:	2b05      	cmp	r3, #5
   184fa:	dd03      	ble.n	18504 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
      delete[] dims_pointer_;
   184fc:	981a      	ldr	r0, [sp, #104]	; 0x68
   184fe:	b108      	cbz	r0, 18504 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
   18500:	f000 fab3 	bl	18a6a <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   18504:	b031      	add	sp, #196	; 0xc4
   18506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001850a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1850a:	b570      	push	{r4, r5, r6, lr}
   1850c:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   1850e:	b1c0      	cbz	r0, 18542 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   18510:	460d      	mov	r5, r1
   18512:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   18514:	b1b9      	cbz	r1, 18546 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   18516:	6d43      	ldr	r3, [r0, #84]	; 0x54
   18518:	680a      	ldr	r2, [r1, #0]
   1851a:	6851      	ldr	r1, [r2, #4]
   1851c:	4798      	blx	r3
   1851e:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   18520:	b19e      	cbz	r6, 1854a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   18522:	b1a5      	cbz	r5, 1854e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   18524:	6d73      	ldr	r3, [r6, #84]	; 0x54
   18526:	686a      	ldr	r2, [r5, #4]
   18528:	6851      	ldr	r1, [r2, #4]
   1852a:	4630      	mov	r0, r6
   1852c:	4798      	blx	r3
   1852e:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   18530:	a901      	add	r1, sp, #4
   18532:	7a20      	ldrb	r0, [r4, #8]
   18534:	f7fc feda 	bl	152ec <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   18538:	4606      	mov	r6, r0
   1853a:	b150      	cbz	r0, 18552 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   1853c:	4630      	mov	r0, r6
   1853e:	b002      	add	sp, #8
   18540:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   18542:	f000 faa7 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
   18546:	f000 faa5 	bl	18a94 <abort>
  TFLITE_DCHECK(context != nullptr);
   1854a:	f000 faa3 	bl	18a94 <abort>
  TFLITE_DCHECK(node != nullptr);
   1854e:	f000 faa1 	bl	18a94 <abort>
  input_bytes *= ElementCount(*input->dims);
   18552:	6860      	ldr	r0, [r4, #4]
   18554:	f7fc ffd6 	bl	15504 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   18558:	9b01      	ldr	r3, [sp, #4]
   1855a:	fb00 f003 	mul.w	r0, r0, r3
   1855e:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   18560:	6822      	ldr	r2, [r4, #0]
   18562:	682b      	ldr	r3, [r5, #0]
   18564:	429a      	cmp	r2, r3
   18566:	d0e9      	beq.n	1853c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   18568:	2300      	movs	r3, #0
   1856a:	e004      	b.n	18576 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   1856c:	6821      	ldr	r1, [r4, #0]
   1856e:	682a      	ldr	r2, [r5, #0]
   18570:	5cc9      	ldrb	r1, [r1, r3]
   18572:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   18574:	3301      	adds	r3, #1
   18576:	9a01      	ldr	r2, [sp, #4]
   18578:	429a      	cmp	r2, r3
   1857a:	d8f7      	bhi.n	1856c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   1857c:	e7de      	b.n	1853c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

0001857e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   1857e:	b508      	push	{r3, lr}
   18580:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   18584:	f7e8 fabc 	bl	b00 <__addsf3>
   18588:	4601      	mov	r1, r0
   1858a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   1858e:	f7e8 fc73 	bl	e78 <__aeabi_fdiv>
   18592:	bd08      	pop	{r3, pc}

00018594 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   18594:	b508      	push	{r3, lr}
   18596:	f7fa f8e9 	bl	1276c <expf>
   1859a:	bd08      	pop	{r3, pc}

0001859c <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   1859c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1859e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   185a0:	b113      	cbz	r3, 185a8 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   185a2:	2138      	movs	r1, #56	; 0x38
   185a4:	4798      	blx	r3
}
   185a6:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   185a8:	f000 fa74 	bl	18a94 <abort>

000185ac <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   185ac:	b148      	cbz	r0, 185c2 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   185ae:	68c3      	ldr	r3, [r0, #12]
   185b0:	8818      	ldrh	r0, [r3, #0]
   185b2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   185b6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   185ba:	bf14      	ite	ne
   185bc:	2000      	movne	r0, #0
   185be:	2001      	moveq	r0, #1
   185c0:	4770      	bx	lr
		return false;
   185c2:	2000      	movs	r0, #0
}
   185c4:	4770      	bx	lr

000185c6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   185c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185c8:	4605      	mov	r5, r0
   185ca:	460e      	mov	r6, r1
	__asm__ volatile(
   185cc:	f04f 0320 	mov.w	r3, #32
   185d0:	f3ef 8711 	mrs	r7, BASEPRI
   185d4:	f383 8812 	msr	BASEPRI_MAX, r3
   185d8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   185dc:	f7f9 fcf4 	bl	11fc8 <z_impl_z_current_get>
   185e0:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   185e2:	4631      	mov	r1, r6
   185e4:	4628      	mov	r0, r5
   185e6:	f7fc fe00 	bl	151ea <k_sys_fatal_error_handler>
	__asm__ volatile(
   185ea:	f387 8811 	msr	BASEPRI, r7
   185ee:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   185f2:	4620      	mov	r0, r4
   185f4:	f7ec f8cc 	bl	4790 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   185f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000185fa <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   185fa:	6902      	ldr	r2, [r0, #16]
   185fc:	6943      	ldr	r3, [r0, #20]
   185fe:	431a      	orrs	r2, r3
   18600:	f012 0203 	ands.w	r2, r2, #3
   18604:	d10d      	bne.n	18622 <create_free_list+0x28>
	slab->free_list = NULL;
   18606:	2100      	movs	r1, #0
   18608:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1860a:	e005      	b.n	18618 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1860c:	6981      	ldr	r1, [r0, #24]
   1860e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   18610:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   18612:	6901      	ldr	r1, [r0, #16]
   18614:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18616:	3201      	adds	r2, #1
   18618:	68c1      	ldr	r1, [r0, #12]
   1861a:	4291      	cmp	r1, r2
   1861c:	d8f6      	bhi.n	1860c <create_free_list+0x12>
	return 0;
   1861e:	2000      	movs	r0, #0
   18620:	4770      	bx	lr
		return -EINVAL;
   18622:	f06f 0015 	mvn.w	r0, #21
}
   18626:	4770      	bx	lr

00018628 <k_mem_slab_init>:
{
   18628:	b510      	push	{r4, lr}
   1862a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1862c:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   1862e:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   18630:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   18632:	2300      	movs	r3, #0
   18634:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   18636:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   18638:	f7ff ffdf 	bl	185fa <create_free_list>
	if (rc < 0) {
   1863c:	2800      	cmp	r0, #0
   1863e:	db01      	blt.n	18644 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   18640:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   18642:	6064      	str	r4, [r4, #4]
}
   18644:	bd10      	pop	{r4, pc}

00018646 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18648:	4604      	mov	r4, r0
   1864a:	460d      	mov	r5, r1
	__asm__ volatile(
   1864c:	f04f 0320 	mov.w	r3, #32
   18650:	f3ef 8611 	mrs	r6, BASEPRI
   18654:	f383 8812 	msr	BASEPRI_MAX, r3
   18658:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1865c:	6983      	ldr	r3, [r0, #24]
   1865e:	b163      	cbz	r3, 1867a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   18660:	682b      	ldr	r3, [r5, #0]
   18662:	69a2      	ldr	r2, [r4, #24]
   18664:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18666:	682b      	ldr	r3, [r5, #0]
   18668:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1866a:	69e3      	ldr	r3, [r4, #28]
   1866c:	3b01      	subs	r3, #1
   1866e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18670:	f386 8811 	msr	BASEPRI, r6
   18674:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   18678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1867a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1867e:	f000 f93a 	bl	188f6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   18682:	2800      	cmp	r0, #0
   18684:	d0ec      	beq.n	18660 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18686:	682a      	ldr	r2, [r5, #0]
   18688:	2100      	movs	r1, #0
   1868a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1868e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   18690:	f000 f896 	bl	187c0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   18694:	4631      	mov	r1, r6
   18696:	4638      	mov	r0, r7
   18698:	f7f9 f93a 	bl	11910 <z_reschedule>
			return;
   1869c:	e7ec      	b.n	18678 <k_mem_slab_free+0x32>

0001869e <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1869e:	3207      	adds	r2, #7
   186a0:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   186a4:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   186a8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   186ac:	2300      	movs	r3, #0
   186ae:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   186b2:	1888      	adds	r0, r1, r2
   186b4:	4770      	bx	lr

000186b6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   186b6:	f3ef 8005 	mrs	r0, IPSR
}
   186ba:	3800      	subs	r0, #0
   186bc:	bf18      	it	ne
   186be:	2001      	movne	r0, #1
   186c0:	4770      	bx	lr

000186c2 <z_impl_k_thread_start>:
{
   186c2:	b508      	push	{r3, lr}
	z_sched_start(thread);
   186c4:	f7f9 fa4e 	bl	11b64 <z_sched_start>
}
   186c8:	bd08      	pop	{r3, pc}

000186ca <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   186ca:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   186cc:	2400      	movs	r4, #0
   186ce:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   186d0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   186d2:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   186d4:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   186d6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   186d8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   186da:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   186dc:	bc10      	pop	{r4}
   186de:	4770      	bx	lr

000186e0 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   186e0:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   186e2:	f7eb fbeb 	bl	3ebc <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   186e6:	f7fc fd09 	bl	150fc <sys_clock_idle_exit>
}
   186ea:	bd08      	pop	{r3, pc}

000186ec <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   186ec:	b508      	push	{r3, lr}
	__asm__ volatile(
   186ee:	f04f 0220 	mov.w	r2, #32
   186f2:	f3ef 8311 	mrs	r3, BASEPRI
   186f6:	f382 8812 	msr	BASEPRI_MAX, r2
   186fa:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   186fe:	f7f8 ff7b 	bl	115f8 <pm_save_idle>
   18702:	e7f4      	b.n	186ee <idle+0x2>

00018704 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   18704:	4288      	cmp	r0, r1
   18706:	da00      	bge.n	1870a <new_prio_for_inheritance+0x6>
   18708:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1870a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1870e:	db01      	blt.n	18714 <new_prio_for_inheritance+0x10>
   18710:	4608      	mov	r0, r1
   18712:	4770      	bx	lr
   18714:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   18718:	4770      	bx	lr

0001871a <adjust_owner_prio>:
{
   1871a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1871c:	6880      	ldr	r0, [r0, #8]
   1871e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18722:	428b      	cmp	r3, r1
   18724:	d101      	bne.n	1872a <adjust_owner_prio+0x10>
	return false;
   18726:	2000      	movs	r0, #0
}
   18728:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1872a:	f7f9 fa69 	bl	11c00 <z_set_prio>
   1872e:	e7fb      	b.n	18728 <adjust_owner_prio+0xe>

00018730 <z_impl_k_mutex_init>:
{
   18730:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18732:	2000      	movs	r0, #0
   18734:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   18736:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   18738:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1873a:	605b      	str	r3, [r3, #4]
}
   1873c:	4770      	bx	lr

0001873e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1873e:	b13a      	cbz	r2, 18750 <z_impl_k_sem_init+0x12>
   18740:	428a      	cmp	r2, r1
   18742:	d308      	bcc.n	18756 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   18744:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   18746:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   18748:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1874a:	6040      	str	r0, [r0, #4]
	return 0;
   1874c:	2000      	movs	r0, #0
   1874e:	4770      	bx	lr
		return -EINVAL;
   18750:	f06f 0015 	mvn.w	r0, #21
   18754:	4770      	bx	lr
   18756:	f06f 0015 	mvn.w	r0, #21
}
   1875a:	4770      	bx	lr

0001875c <thread_active_elsewhere>:
}
   1875c:	2000      	movs	r0, #0
   1875e:	4770      	bx	lr

00018760 <pended_on_thread>:
}
   18760:	6880      	ldr	r0, [r0, #8]
   18762:	4770      	bx	lr

00018764 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   18764:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18768:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1876c:	4283      	cmp	r3, r0
   1876e:	d001      	beq.n	18774 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   18770:	1ac0      	subs	r0, r0, r3
   18772:	4770      	bx	lr
	return 0;
   18774:	2000      	movs	r0, #0
}
   18776:	4770      	bx	lr

00018778 <z_reschedule_irqlock>:
{
   18778:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1877a:	4603      	mov	r3, r0
   1877c:	b920      	cbnz	r0, 18788 <z_reschedule_irqlock+0x10>
   1877e:	f3ef 8205 	mrs	r2, IPSR
   18782:	b942      	cbnz	r2, 18796 <z_reschedule_irqlock+0x1e>
   18784:	2201      	movs	r2, #1
   18786:	e000      	b.n	1878a <z_reschedule_irqlock+0x12>
   18788:	2200      	movs	r2, #0
	if (resched(key)) {
   1878a:	b932      	cbnz	r2, 1879a <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   1878c:	f383 8811 	msr	BASEPRI, r3
   18790:	f3bf 8f6f 	isb	sy
}
   18794:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18796:	2200      	movs	r2, #0
   18798:	e7f7      	b.n	1878a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1879a:	4618      	mov	r0, r3
   1879c:	f7eb fd8e 	bl	42bc <arch_swap>
	return ret;
   187a0:	e7f8      	b.n	18794 <z_reschedule_irqlock+0x1c>

000187a2 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   187a2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   187a4:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   187a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   187a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   187aa:	2300      	movs	r3, #0
   187ac:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   187ae:	604b      	str	r3, [r1, #4]
}
   187b0:	4770      	bx	lr

000187b2 <z_priq_dumb_best>:
{
   187b2:	4603      	mov	r3, r0
	return list->head == list;
   187b4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   187b6:	4283      	cmp	r3, r0
   187b8:	d000      	beq.n	187bc <z_priq_dumb_best+0xa>
}
   187ba:	4770      	bx	lr
	struct k_thread *thread = NULL;
   187bc:	2000      	movs	r0, #0
	return thread;
   187be:	e7fc      	b.n	187ba <z_priq_dumb_best+0x8>

000187c0 <z_ready_thread>:
{
   187c0:	b538      	push	{r3, r4, r5, lr}
   187c2:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   187c4:	2300      	movs	r3, #0
	__asm__ volatile(
   187c6:	f04f 0220 	mov.w	r2, #32
   187ca:	f3ef 8511 	mrs	r5, BASEPRI
   187ce:	f382 8812 	msr	BASEPRI_MAX, r2
   187d2:	f3bf 8f6f 	isb	sy
   187d6:	e007      	b.n	187e8 <z_ready_thread+0x28>
			ready_thread(thread);
   187d8:	4620      	mov	r0, r4
   187da:	f7f9 f983 	bl	11ae4 <ready_thread>
	__asm__ volatile(
   187de:	f385 8811 	msr	BASEPRI, r5
   187e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   187e6:	2301      	movs	r3, #1
   187e8:	b92b      	cbnz	r3, 187f6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   187ea:	4620      	mov	r0, r4
   187ec:	f7ff ffb6 	bl	1875c <thread_active_elsewhere>
   187f0:	2800      	cmp	r0, #0
   187f2:	d1f4      	bne.n	187de <z_ready_thread+0x1e>
   187f4:	e7f0      	b.n	187d8 <z_ready_thread+0x18>
}
   187f6:	bd38      	pop	{r3, r4, r5, pc}

000187f8 <z_thread_timeout>:
{
   187f8:	b570      	push	{r4, r5, r6, lr}
   187fa:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   187fc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   18800:	2300      	movs	r3, #0
	__asm__ volatile(
   18802:	f04f 0220 	mov.w	r2, #32
   18806:	f3ef 8611 	mrs	r6, BASEPRI
   1880a:	f382 8812 	msr	BASEPRI_MAX, r2
   1880e:	f3bf 8f6f 	isb	sy
   18812:	e019      	b.n	18848 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18814:	4628      	mov	r0, r5
   18816:	f7ff ffa3 	bl	18760 <pended_on_thread>
   1881a:	4629      	mov	r1, r5
   1881c:	f7ff ffc1 	bl	187a2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18820:	7b6b      	ldrb	r3, [r5, #13]
   18822:	f023 0302 	bic.w	r3, r3, #2
   18826:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   18828:	2300      	movs	r3, #0
   1882a:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1882c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18830:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   18834:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   18838:	4628      	mov	r0, r5
   1883a:	f7f9 f953 	bl	11ae4 <ready_thread>
	__asm__ volatile(
   1883e:	f386 8811 	msr	BASEPRI, r6
   18842:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18846:	2301      	movs	r3, #1
   18848:	b94b      	cbnz	r3, 1885e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1884a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1884e:	f013 0f28 	tst.w	r3, #40	; 0x28
   18852:	d1f4      	bne.n	1883e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   18854:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18858:	2b00      	cmp	r3, #0
   1885a:	d1db      	bne.n	18814 <z_thread_timeout+0x1c>
   1885c:	e7e6      	b.n	1882c <z_thread_timeout+0x34>
}
   1885e:	bd70      	pop	{r4, r5, r6, pc}

00018860 <add_to_waitq_locked>:
{
   18860:	b570      	push	{r4, r5, r6, lr}
   18862:	4605      	mov	r5, r0
   18864:	460e      	mov	r6, r1
	unready_thread(thread);
   18866:	f7f9 f99b 	bl	11ba0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1886a:	7b6b      	ldrb	r3, [r5, #13]
   1886c:	f043 0302 	orr.w	r3, r3, #2
   18870:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   18872:	b1b6      	cbz	r6, 188a2 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   18874:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   18876:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18878:	42a6      	cmp	r6, r4
   1887a:	d019      	beq.n	188b0 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1887c:	b164      	cbz	r4, 18898 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1887e:	4621      	mov	r1, r4
   18880:	4628      	mov	r0, r5
   18882:	f7ff ff6f 	bl	18764 <z_sched_prio_cmp>
   18886:	2800      	cmp	r0, #0
   18888:	dc0c      	bgt.n	188a4 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1888a:	b12c      	cbz	r4, 18898 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1888c:	6873      	ldr	r3, [r6, #4]
   1888e:	429c      	cmp	r4, r3
   18890:	d002      	beq.n	18898 <add_to_waitq_locked+0x38>
   18892:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18894:	2c00      	cmp	r4, #0
   18896:	d1f1      	bne.n	1887c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   18898:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1889a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1889c:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1889e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   188a0:	6075      	str	r5, [r6, #4]
}
   188a2:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   188a4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   188a6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   188a8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   188aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   188ac:	6065      	str	r5, [r4, #4]
}
   188ae:	e7f8      	b.n	188a2 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188b0:	2400      	movs	r4, #0
   188b2:	e7e3      	b.n	1887c <add_to_waitq_locked+0x1c>

000188b4 <pend>:
{
   188b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   188b8:	4605      	mov	r5, r0
   188ba:	460f      	mov	r7, r1
   188bc:	4691      	mov	r9, r2
   188be:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   188c0:	2400      	movs	r4, #0
	__asm__ volatile(
   188c2:	f04f 0320 	mov.w	r3, #32
   188c6:	f3ef 8611 	mrs	r6, BASEPRI
   188ca:	f383 8812 	msr	BASEPRI_MAX, r3
   188ce:	f3bf 8f6f 	isb	sy
   188d2:	b94c      	cbnz	r4, 188e8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   188d4:	4639      	mov	r1, r7
   188d6:	4628      	mov	r0, r5
   188d8:	f7ff ffc2 	bl	18860 <add_to_waitq_locked>
	__asm__ volatile(
   188dc:	f386 8811 	msr	BASEPRI, r6
   188e0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   188e4:	2401      	movs	r4, #1
   188e6:	e7f4      	b.n	188d2 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   188e8:	464a      	mov	r2, r9
   188ea:	4643      	mov	r3, r8
   188ec:	4628      	mov	r0, r5
   188ee:	f7f8 ffad 	bl	1184c <add_thread_timeout>
}
   188f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000188f6 <z_unpend_first_thread>:
{
   188f6:	b570      	push	{r4, r5, r6, lr}
   188f8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   188fa:	2300      	movs	r3, #0
	__asm__ volatile(
   188fc:	f04f 0220 	mov.w	r2, #32
   18900:	f3ef 8511 	mrs	r5, BASEPRI
   18904:	f382 8812 	msr	BASEPRI_MAX, r2
   18908:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1890c:	461c      	mov	r4, r3
   1890e:	e013      	b.n	18938 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   18910:	f7ff ff26 	bl	18760 <pended_on_thread>
   18914:	4621      	mov	r1, r4
   18916:	f7ff ff44 	bl	187a2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1891a:	7b63      	ldrb	r3, [r4, #13]
   1891c:	f023 0302 	bic.w	r3, r3, #2
   18920:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   18922:	2300      	movs	r3, #0
   18924:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   18926:	f104 0018 	add.w	r0, r4, #24
   1892a:	f000 f826 	bl	1897a <z_abort_timeout>
	__asm__ volatile(
   1892e:	f385 8811 	msr	BASEPRI, r5
   18932:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   18936:	2301      	movs	r3, #1
   18938:	b933      	cbnz	r3, 18948 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1893a:	4630      	mov	r0, r6
   1893c:	f7ff ff39 	bl	187b2 <z_priq_dumb_best>
		if (thread != NULL) {
   18940:	4604      	mov	r4, r0
   18942:	2800      	cmp	r0, #0
   18944:	d1e4      	bne.n	18910 <z_unpend_first_thread+0x1a>
   18946:	e7f2      	b.n	1892e <z_unpend_first_thread+0x38>
}
   18948:	4620      	mov	r0, r4
   1894a:	bd70      	pop	{r4, r5, r6, pc}

0001894c <remove_timeout>:
{
   1894c:	b538      	push	{r3, r4, r5, lr}
   1894e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   18950:	f7f9 fb8c 	bl	1206c <next>
   18954:	b148      	cbz	r0, 1896a <remove_timeout+0x1e>
   18956:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   18958:	6920      	ldr	r0, [r4, #16]
   1895a:	6965      	ldr	r5, [r4, #20]
   1895c:	6913      	ldr	r3, [r2, #16]
   1895e:	6951      	ldr	r1, [r2, #20]
   18960:	181b      	adds	r3, r3, r0
   18962:	eb45 0101 	adc.w	r1, r5, r1
   18966:	6113      	str	r3, [r2, #16]
   18968:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1896a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1896c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1896e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18970:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18972:	2300      	movs	r3, #0
   18974:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   18976:	6063      	str	r3, [r4, #4]
}
   18978:	bd38      	pop	{r3, r4, r5, pc}

0001897a <z_abort_timeout>:
{
   1897a:	b570      	push	{r4, r5, r6, lr}
   1897c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1897e:	2300      	movs	r3, #0
	__asm__ volatile(
   18980:	f04f 0220 	mov.w	r2, #32
   18984:	f3ef 8611 	mrs	r6, BASEPRI
   18988:	f382 8812 	msr	BASEPRI_MAX, r2
   1898c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   18990:	f06f 0015 	mvn.w	r0, #21
   18994:	e008      	b.n	189a8 <z_abort_timeout+0x2e>
			remove_timeout(to);
   18996:	4620      	mov	r0, r4
   18998:	f7ff ffd8 	bl	1894c <remove_timeout>
			ret = 0;
   1899c:	4628      	mov	r0, r5
	__asm__ volatile(
   1899e:	f386 8811 	msr	BASEPRI, r6
   189a2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   189a6:	2301      	movs	r3, #1
   189a8:	461d      	mov	r5, r3
   189aa:	b91b      	cbnz	r3, 189b4 <z_abort_timeout+0x3a>
	return node->next != NULL;
   189ac:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   189ae:	2b00      	cmp	r3, #0
   189b0:	d1f1      	bne.n	18996 <z_abort_timeout+0x1c>
   189b2:	e7f4      	b.n	1899e <z_abort_timeout+0x24>
}
   189b4:	bd70      	pop	{r4, r5, r6, pc}

000189b6 <z_get_next_timeout_expiry>:
{
   189b6:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   189b8:	2300      	movs	r3, #0
	__asm__ volatile(
   189ba:	f04f 0220 	mov.w	r2, #32
   189be:	f3ef 8411 	mrs	r4, BASEPRI
   189c2:	f382 8812 	msr	BASEPRI_MAX, r2
   189c6:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   189ca:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   189ce:	b93b      	cbnz	r3, 189e0 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   189d0:	f7f9 fb64 	bl	1209c <next_timeout>
	__asm__ volatile(
   189d4:	f384 8811 	msr	BASEPRI, r4
   189d8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   189dc:	2301      	movs	r3, #1
   189de:	e7f6      	b.n	189ce <z_get_next_timeout_expiry+0x18>
}
   189e0:	bd10      	pop	{r4, pc}

000189e2 <z_set_timeout_expiry>:
{
   189e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189e4:	4606      	mov	r6, r0
   189e6:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   189e8:	2300      	movs	r3, #0
	__asm__ volatile(
   189ea:	f04f 0220 	mov.w	r2, #32
   189ee:	f3ef 8511 	mrs	r5, BASEPRI
   189f2:	f382 8812 	msr	BASEPRI_MAX, r2
   189f6:	f3bf 8f6f 	isb	sy
   189fa:	e00a      	b.n	18a12 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   189fc:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   189fe:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18a02:	2801      	cmp	r0, #1
   18a04:	dd00      	ble.n	18a08 <z_set_timeout_expiry+0x26>
   18a06:	b97c      	cbnz	r4, 18a28 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   18a08:	f385 8811 	msr	BASEPRI, r5
   18a0c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   18a10:	2301      	movs	r3, #1
   18a12:	461c      	mov	r4, r3
   18a14:	b97b      	cbnz	r3, 18a36 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   18a16:	f7f9 fb41 	bl	1209c <next_timeout>
			      || (ticks <= next_to);
   18a1a:	f1b0 3fff 	cmp.w	r0, #4294967295
   18a1e:	d0ed      	beq.n	189fc <z_set_timeout_expiry+0x1a>
   18a20:	42b0      	cmp	r0, r6
   18a22:	dbec      	blt.n	189fe <z_set_timeout_expiry+0x1c>
   18a24:	2401      	movs	r4, #1
   18a26:	e7ea      	b.n	189fe <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   18a28:	4639      	mov	r1, r7
   18a2a:	42b0      	cmp	r0, r6
   18a2c:	bfa8      	it	ge
   18a2e:	4630      	movge	r0, r6
   18a30:	f7ed f934 	bl	5c9c <sys_clock_set_timeout>
   18a34:	e7e8      	b.n	18a08 <z_set_timeout_expiry+0x26>
}
   18a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a38 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18a38:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18a3a:	f7f9 fc61 	bl	12300 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   18a3e:	bd08      	pop	{r3, pc}

00018a40 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   18a40:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   18a42:	f7f9 fc5d 	bl	12300 <sys_clock_tick_get>
}
   18a46:	bd08      	pop	{r3, pc}

00018a48 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   18a48:	b900      	cbnz	r0, 18a4c <z_impl_k_busy_wait+0x4>
   18a4a:	4770      	bx	lr
{
   18a4c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   18a4e:	f7eb f98b 	bl	3d68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18a52:	bd08      	pop	{r3, pc}

00018a54 <k_heap_init>:
{
   18a54:	b510      	push	{r4, lr}
   18a56:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   18a5a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   18a5c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   18a5e:	f7fb fcbf 	bl	143e0 <sys_heap_init>
}
   18a62:	bd10      	pop	{r4, pc}

00018a64 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   18a64:	4770      	bx	lr

00018a66 <_ZdlPv>:
   18a66:	f7fa b851 	b.w	12b0c <free>

00018a6a <_ZdaPv>:
   18a6a:	f7ff bffc 	b.w	18a66 <_ZdlPv>

00018a6e <_Znwj>:
   18a6e:	2801      	cmp	r0, #1
   18a70:	bf38      	it	cc
   18a72:	2001      	movcc	r0, #1
   18a74:	b510      	push	{r4, lr}
   18a76:	4604      	mov	r4, r0
   18a78:	4620      	mov	r0, r4
   18a7a:	f7fa f83f 	bl	12afc <malloc>
   18a7e:	b930      	cbnz	r0, 18a8e <_Znwj+0x20>
   18a80:	f7f9 fdee 	bl	12660 <_ZSt15get_new_handlerv>
   18a84:	b908      	cbnz	r0, 18a8a <_Znwj+0x1c>
   18a86:	f000 f805 	bl	18a94 <abort>
   18a8a:	4780      	blx	r0
   18a8c:	e7f4      	b.n	18a78 <_Znwj+0xa>
   18a8e:	bd10      	pop	{r4, pc}

00018a90 <_Znaj>:
   18a90:	f7ff bfed 	b.w	18a6e <_Znwj>

00018a94 <abort>:
   18a94:	2006      	movs	r0, #6
   18a96:	b508      	push	{r3, lr}
   18a98:	f7fa fd78 	bl	1358c <raise>
   18a9c:	2001      	movs	r0, #1
   18a9e:	f7ec f85b 	bl	4b58 <_exit>

00018aa2 <atoi>:
   18aa2:	220a      	movs	r2, #10
   18aa4:	2100      	movs	r1, #0
   18aa6:	f7fa be2d 	b.w	13704 <strtol>

00018aaa <memchr>:
   18aaa:	b2c9      	uxtb	r1, r1
   18aac:	4603      	mov	r3, r0
   18aae:	4402      	add	r2, r0
   18ab0:	b510      	push	{r4, lr}
   18ab2:	4293      	cmp	r3, r2
   18ab4:	4618      	mov	r0, r3
   18ab6:	d101      	bne.n	18abc <memchr+0x12>
   18ab8:	2000      	movs	r0, #0
   18aba:	e003      	b.n	18ac4 <memchr+0x1a>
   18abc:	7804      	ldrb	r4, [r0, #0]
   18abe:	3301      	adds	r3, #1
   18ac0:	428c      	cmp	r4, r1
   18ac2:	d1f6      	bne.n	18ab2 <memchr+0x8>
   18ac4:	bd10      	pop	{r4, pc}

00018ac6 <memcmp>:
   18ac6:	b530      	push	{r4, r5, lr}
   18ac8:	3901      	subs	r1, #1
   18aca:	2400      	movs	r4, #0
   18acc:	42a2      	cmp	r2, r4
   18ace:	d101      	bne.n	18ad4 <memcmp+0xe>
   18ad0:	2000      	movs	r0, #0
   18ad2:	e005      	b.n	18ae0 <memcmp+0x1a>
   18ad4:	5d03      	ldrb	r3, [r0, r4]
   18ad6:	3401      	adds	r4, #1
   18ad8:	5d0d      	ldrb	r5, [r1, r4]
   18ada:	42ab      	cmp	r3, r5
   18adc:	d0f6      	beq.n	18acc <memcmp+0x6>
   18ade:	1b58      	subs	r0, r3, r5
   18ae0:	bd30      	pop	{r4, r5, pc}

00018ae2 <memcpy>:
   18ae2:	440a      	add	r2, r1
   18ae4:	1e43      	subs	r3, r0, #1
   18ae6:	4291      	cmp	r1, r2
   18ae8:	d100      	bne.n	18aec <memcpy+0xa>
   18aea:	4770      	bx	lr
   18aec:	b510      	push	{r4, lr}
   18aee:	f811 4b01 	ldrb.w	r4, [r1], #1
   18af2:	4291      	cmp	r1, r2
   18af4:	f803 4f01 	strb.w	r4, [r3, #1]!
   18af8:	d1f9      	bne.n	18aee <memcpy+0xc>
   18afa:	bd10      	pop	{r4, pc}

00018afc <memset>:
   18afc:	4402      	add	r2, r0
   18afe:	4603      	mov	r3, r0
   18b00:	4293      	cmp	r3, r2
   18b02:	d100      	bne.n	18b06 <memset+0xa>
   18b04:	4770      	bx	lr
   18b06:	f803 1b01 	strb.w	r1, [r3], #1
   18b0a:	e7f9      	b.n	18b00 <memset+0x4>

00018b0c <__sfputc_r>:
   18b0c:	6893      	ldr	r3, [r2, #8]
   18b0e:	3b01      	subs	r3, #1
   18b10:	2b00      	cmp	r3, #0
   18b12:	6093      	str	r3, [r2, #8]
   18b14:	b410      	push	{r4}
   18b16:	da07      	bge.n	18b28 <__sfputc_r+0x1c>
   18b18:	6994      	ldr	r4, [r2, #24]
   18b1a:	42a3      	cmp	r3, r4
   18b1c:	db01      	blt.n	18b22 <__sfputc_r+0x16>
   18b1e:	290a      	cmp	r1, #10
   18b20:	d102      	bne.n	18b28 <__sfputc_r+0x1c>
   18b22:	bc10      	pop	{r4}
   18b24:	f7fa be0e 	b.w	13744 <__swbuf_r>
   18b28:	6813      	ldr	r3, [r2, #0]
   18b2a:	1c58      	adds	r0, r3, #1
   18b2c:	6010      	str	r0, [r2, #0]
   18b2e:	4608      	mov	r0, r1
   18b30:	7019      	strb	r1, [r3, #0]
   18b32:	bc10      	pop	{r4}
   18b34:	4770      	bx	lr

00018b36 <__sfputs_r>:
   18b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b38:	4606      	mov	r6, r0
   18b3a:	460f      	mov	r7, r1
   18b3c:	4614      	mov	r4, r2
   18b3e:	18d5      	adds	r5, r2, r3
   18b40:	42ac      	cmp	r4, r5
   18b42:	d101      	bne.n	18b48 <__sfputs_r+0x12>
   18b44:	2000      	movs	r0, #0
   18b46:	e007      	b.n	18b58 <__sfputs_r+0x22>
   18b48:	463a      	mov	r2, r7
   18b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   18b4e:	4630      	mov	r0, r6
   18b50:	f7ff ffdc 	bl	18b0c <__sfputc_r>
   18b54:	1c43      	adds	r3, r0, #1
   18b56:	d1f3      	bne.n	18b40 <__sfputs_r+0xa>
   18b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018b5a <__cvt>:
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b60:	461f      	mov	r7, r3
   18b62:	b088      	sub	sp, #32
   18b64:	bfb4      	ite	lt
   18b66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   18b6a:	2300      	movge	r3, #0
   18b6c:	4614      	mov	r4, r2
   18b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18b70:	bfbc      	itt	lt
   18b72:	461f      	movlt	r7, r3
   18b74:	232d      	movlt	r3, #45	; 0x2d
   18b76:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18b78:	7013      	strb	r3, [r2, #0]
   18b7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18b7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   18b80:	f023 0820 	bic.w	r8, r3, #32
   18b84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18b88:	d005      	beq.n	18b96 <__cvt+0x3c>
   18b8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   18b8e:	d100      	bne.n	18b92 <__cvt+0x38>
   18b90:	3501      	adds	r5, #1
   18b92:	2302      	movs	r3, #2
   18b94:	e000      	b.n	18b98 <__cvt+0x3e>
   18b96:	2303      	movs	r3, #3
   18b98:	aa07      	add	r2, sp, #28
   18b9a:	9204      	str	r2, [sp, #16]
   18b9c:	aa06      	add	r2, sp, #24
   18b9e:	e9cd 3500 	strd	r3, r5, [sp]
   18ba2:	e9cd a202 	strd	sl, r2, [sp, #8]
   18ba6:	463b      	mov	r3, r7
   18ba8:	4622      	mov	r2, r4
   18baa:	f7e8 ff39 	bl	1a20 <_dtoa_r>
   18bae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   18bb2:	4606      	mov	r6, r0
   18bb4:	d102      	bne.n	18bbc <__cvt+0x62>
   18bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18bb8:	07db      	lsls	r3, r3, #31
   18bba:	d522      	bpl.n	18c02 <__cvt+0xa8>
   18bbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   18bc0:	eb06 0905 	add.w	r9, r6, r5
   18bc4:	d110      	bne.n	18be8 <__cvt+0x8e>
   18bc6:	7833      	ldrb	r3, [r6, #0]
   18bc8:	2b30      	cmp	r3, #48	; 0x30
   18bca:	d10a      	bne.n	18be2 <__cvt+0x88>
   18bcc:	2200      	movs	r2, #0
   18bce:	2300      	movs	r3, #0
   18bd0:	4620      	mov	r0, r4
   18bd2:	4639      	mov	r1, r7
   18bd4:	f7e7 fee4 	bl	9a0 <__aeabi_dcmpeq>
   18bd8:	b918      	cbnz	r0, 18be2 <__cvt+0x88>
   18bda:	f1c5 0501 	rsb	r5, r5, #1
   18bde:	f8ca 5000 	str.w	r5, [sl]
   18be2:	f8da 3000 	ldr.w	r3, [sl]
   18be6:	4499      	add	r9, r3
   18be8:	2200      	movs	r2, #0
   18bea:	2300      	movs	r3, #0
   18bec:	4620      	mov	r0, r4
   18bee:	4639      	mov	r1, r7
   18bf0:	f7e7 fed6 	bl	9a0 <__aeabi_dcmpeq>
   18bf4:	b108      	cbz	r0, 18bfa <__cvt+0xa0>
   18bf6:	f8cd 901c 	str.w	r9, [sp, #28]
   18bfa:	2230      	movs	r2, #48	; 0x30
   18bfc:	9b07      	ldr	r3, [sp, #28]
   18bfe:	454b      	cmp	r3, r9
   18c00:	d307      	bcc.n	18c12 <__cvt+0xb8>
   18c02:	9b07      	ldr	r3, [sp, #28]
   18c04:	4630      	mov	r0, r6
   18c06:	9a15      	ldr	r2, [sp, #84]	; 0x54
   18c08:	1b9b      	subs	r3, r3, r6
   18c0a:	6013      	str	r3, [r2, #0]
   18c0c:	b008      	add	sp, #32
   18c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18c12:	1c59      	adds	r1, r3, #1
   18c14:	9107      	str	r1, [sp, #28]
   18c16:	701a      	strb	r2, [r3, #0]
   18c18:	e7f0      	b.n	18bfc <__cvt+0xa2>

00018c1a <__exponent>:
   18c1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c1c:	2900      	cmp	r1, #0
   18c1e:	4603      	mov	r3, r0
   18c20:	bfb8      	it	lt
   18c22:	4249      	neglt	r1, r1
   18c24:	f803 2b02 	strb.w	r2, [r3], #2
   18c28:	bfb4      	ite	lt
   18c2a:	222d      	movlt	r2, #45	; 0x2d
   18c2c:	222b      	movge	r2, #43	; 0x2b
   18c2e:	2909      	cmp	r1, #9
   18c30:	7042      	strb	r2, [r0, #1]
   18c32:	dd2a      	ble.n	18c8a <__exponent+0x70>
   18c34:	f10d 0407 	add.w	r4, sp, #7
   18c38:	270a      	movs	r7, #10
   18c3a:	46a4      	mov	ip, r4
   18c3c:	460a      	mov	r2, r1
   18c3e:	46a6      	mov	lr, r4
   18c40:	3c01      	subs	r4, #1
   18c42:	2a63      	cmp	r2, #99	; 0x63
   18c44:	fb91 f6f7 	sdiv	r6, r1, r7
   18c48:	fb07 1516 	mls	r5, r7, r6, r1
   18c4c:	4631      	mov	r1, r6
   18c4e:	f105 0530 	add.w	r5, r5, #48	; 0x30
   18c52:	f80e 5c01 	strb.w	r5, [lr, #-1]
   18c56:	dcf1      	bgt.n	18c3c <__exponent+0x22>
   18c58:	3130      	adds	r1, #48	; 0x30
   18c5a:	f1ae 0502 	sub.w	r5, lr, #2
   18c5e:	f804 1c01 	strb.w	r1, [r4, #-1]
   18c62:	1c44      	adds	r4, r0, #1
   18c64:	4629      	mov	r1, r5
   18c66:	4561      	cmp	r1, ip
   18c68:	d30a      	bcc.n	18c80 <__exponent+0x66>
   18c6a:	f10d 0209 	add.w	r2, sp, #9
   18c6e:	eba2 020e 	sub.w	r2, r2, lr
   18c72:	4565      	cmp	r5, ip
   18c74:	bf88      	it	hi
   18c76:	2200      	movhi	r2, #0
   18c78:	4413      	add	r3, r2
   18c7a:	1a18      	subs	r0, r3, r0
   18c7c:	b003      	add	sp, #12
   18c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c80:	f811 2b01 	ldrb.w	r2, [r1], #1
   18c84:	f804 2f01 	strb.w	r2, [r4, #1]!
   18c88:	e7ed      	b.n	18c66 <__exponent+0x4c>
   18c8a:	2330      	movs	r3, #48	; 0x30
   18c8c:	3130      	adds	r1, #48	; 0x30
   18c8e:	7083      	strb	r3, [r0, #2]
   18c90:	1d03      	adds	r3, r0, #4
   18c92:	70c1      	strb	r1, [r0, #3]
   18c94:	e7f1      	b.n	18c7a <__exponent+0x60>

00018c96 <_printf_common>:
   18c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c9a:	4616      	mov	r6, r2
   18c9c:	4699      	mov	r9, r3
   18c9e:	688a      	ldr	r2, [r1, #8]
   18ca0:	4607      	mov	r7, r0
   18ca2:	690b      	ldr	r3, [r1, #16]
   18ca4:	460c      	mov	r4, r1
   18ca6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   18caa:	4293      	cmp	r3, r2
   18cac:	bfb8      	it	lt
   18cae:	4613      	movlt	r3, r2
   18cb0:	6033      	str	r3, [r6, #0]
   18cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   18cb6:	b10a      	cbz	r2, 18cbc <_printf_common+0x26>
   18cb8:	3301      	adds	r3, #1
   18cba:	6033      	str	r3, [r6, #0]
   18cbc:	6823      	ldr	r3, [r4, #0]
   18cbe:	0699      	lsls	r1, r3, #26
   18cc0:	bf42      	ittt	mi
   18cc2:	6833      	ldrmi	r3, [r6, #0]
   18cc4:	3302      	addmi	r3, #2
   18cc6:	6033      	strmi	r3, [r6, #0]
   18cc8:	6825      	ldr	r5, [r4, #0]
   18cca:	f015 0506 	ands.w	r5, r5, #6
   18cce:	d106      	bne.n	18cde <_printf_common+0x48>
   18cd0:	f104 0a19 	add.w	sl, r4, #25
   18cd4:	68e3      	ldr	r3, [r4, #12]
   18cd6:	6832      	ldr	r2, [r6, #0]
   18cd8:	1a9b      	subs	r3, r3, r2
   18cda:	42ab      	cmp	r3, r5
   18cdc:	dc29      	bgt.n	18d32 <_printf_common+0x9c>
   18cde:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   18ce2:	1e13      	subs	r3, r2, #0
   18ce4:	6822      	ldr	r2, [r4, #0]
   18ce6:	bf18      	it	ne
   18ce8:	2301      	movne	r3, #1
   18cea:	0692      	lsls	r2, r2, #26
   18cec:	d42e      	bmi.n	18d4c <_printf_common+0xb6>
   18cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
   18cf2:	4649      	mov	r1, r9
   18cf4:	4638      	mov	r0, r7
   18cf6:	47c0      	blx	r8
   18cf8:	3001      	adds	r0, #1
   18cfa:	d021      	beq.n	18d40 <_printf_common+0xaa>
   18cfc:	6823      	ldr	r3, [r4, #0]
   18cfe:	341a      	adds	r4, #26
   18d00:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   18d04:	f003 0306 	and.w	r3, r3, #6
   18d08:	6832      	ldr	r2, [r6, #0]
   18d0a:	2600      	movs	r6, #0
   18d0c:	2b04      	cmp	r3, #4
   18d0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
   18d12:	bf08      	it	eq
   18d14:	1aad      	subeq	r5, r5, r2
   18d16:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   18d1a:	bf14      	ite	ne
   18d1c:	2500      	movne	r5, #0
   18d1e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   18d22:	4293      	cmp	r3, r2
   18d24:	bfc4      	itt	gt
   18d26:	1a9b      	subgt	r3, r3, r2
   18d28:	18ed      	addgt	r5, r5, r3
   18d2a:	42b5      	cmp	r5, r6
   18d2c:	d11a      	bne.n	18d64 <_printf_common+0xce>
   18d2e:	2000      	movs	r0, #0
   18d30:	e008      	b.n	18d44 <_printf_common+0xae>
   18d32:	2301      	movs	r3, #1
   18d34:	4652      	mov	r2, sl
   18d36:	4649      	mov	r1, r9
   18d38:	4638      	mov	r0, r7
   18d3a:	47c0      	blx	r8
   18d3c:	3001      	adds	r0, #1
   18d3e:	d103      	bne.n	18d48 <_printf_common+0xb2>
   18d40:	f04f 30ff 	mov.w	r0, #4294967295
   18d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d48:	3501      	adds	r5, #1
   18d4a:	e7c3      	b.n	18cd4 <_printf_common+0x3e>
   18d4c:	18e1      	adds	r1, r4, r3
   18d4e:	1c5a      	adds	r2, r3, #1
   18d50:	2030      	movs	r0, #48	; 0x30
   18d52:	3302      	adds	r3, #2
   18d54:	4422      	add	r2, r4
   18d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   18d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   18d5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   18d62:	e7c4      	b.n	18cee <_printf_common+0x58>
   18d64:	2301      	movs	r3, #1
   18d66:	4622      	mov	r2, r4
   18d68:	4649      	mov	r1, r9
   18d6a:	4638      	mov	r0, r7
   18d6c:	47c0      	blx	r8
   18d6e:	3001      	adds	r0, #1
   18d70:	d0e6      	beq.n	18d40 <_printf_common+0xaa>
   18d72:	3601      	adds	r6, #1
   18d74:	e7d9      	b.n	18d2a <_printf_common+0x94>

00018d76 <_raise_r>:
   18d76:	291f      	cmp	r1, #31
   18d78:	b538      	push	{r3, r4, r5, lr}
   18d7a:	4604      	mov	r4, r0
   18d7c:	460d      	mov	r5, r1
   18d7e:	d904      	bls.n	18d8a <_raise_r+0x14>
   18d80:	2316      	movs	r3, #22
   18d82:	6003      	str	r3, [r0, #0]
   18d84:	f04f 30ff 	mov.w	r0, #4294967295
   18d88:	bd38      	pop	{r3, r4, r5, pc}
   18d8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18d8c:	b112      	cbz	r2, 18d94 <_raise_r+0x1e>
   18d8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18d92:	b94b      	cbnz	r3, 18da8 <_raise_r+0x32>
   18d94:	4620      	mov	r0, r4
   18d96:	f000 f816 	bl	18dc6 <_getpid_r>
   18d9a:	462a      	mov	r2, r5
   18d9c:	4601      	mov	r1, r0
   18d9e:	4620      	mov	r0, r4
   18da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18da4:	f7fa bbfa 	b.w	1359c <_kill_r>
   18da8:	2b01      	cmp	r3, #1
   18daa:	d00a      	beq.n	18dc2 <_raise_r+0x4c>
   18dac:	1c59      	adds	r1, r3, #1
   18dae:	d103      	bne.n	18db8 <_raise_r+0x42>
   18db0:	2316      	movs	r3, #22
   18db2:	6003      	str	r3, [r0, #0]
   18db4:	2001      	movs	r0, #1
   18db6:	e7e7      	b.n	18d88 <_raise_r+0x12>
   18db8:	2400      	movs	r4, #0
   18dba:	4628      	mov	r0, r5
   18dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   18dc0:	4798      	blx	r3
   18dc2:	2000      	movs	r0, #0
   18dc4:	e7e0      	b.n	18d88 <_raise_r+0x12>

00018dc6 <_getpid_r>:
   18dc6:	f7fb be03 	b.w	149d0 <_getpid>

00018dca <strncmp>:
   18dca:	b510      	push	{r4, lr}
   18dcc:	b16a      	cbz	r2, 18dea <strncmp+0x20>
   18dce:	3901      	subs	r1, #1
   18dd0:	1884      	adds	r4, r0, r2
   18dd2:	f810 3b01 	ldrb.w	r3, [r0], #1
   18dd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18dda:	4293      	cmp	r3, r2
   18ddc:	d103      	bne.n	18de6 <strncmp+0x1c>
   18dde:	42a0      	cmp	r0, r4
   18de0:	d001      	beq.n	18de6 <strncmp+0x1c>
   18de2:	2b00      	cmp	r3, #0
   18de4:	d1f5      	bne.n	18dd2 <strncmp+0x8>
   18de6:	1a98      	subs	r0, r3, r2
   18de8:	bd10      	pop	{r4, pc}
   18dea:	4610      	mov	r0, r2
   18dec:	e7fc      	b.n	18de8 <strncmp+0x1e>

00018dee <strncpy>:
   18dee:	3901      	subs	r1, #1
   18df0:	4603      	mov	r3, r0
   18df2:	b510      	push	{r4, lr}
   18df4:	b132      	cbz	r2, 18e04 <strncpy+0x16>
   18df6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18dfa:	3a01      	subs	r2, #1
   18dfc:	f803 4b01 	strb.w	r4, [r3], #1
   18e00:	2c00      	cmp	r4, #0
   18e02:	d1f7      	bne.n	18df4 <strncpy+0x6>
   18e04:	441a      	add	r2, r3
   18e06:	2100      	movs	r1, #0
   18e08:	4293      	cmp	r3, r2
   18e0a:	d100      	bne.n	18e0e <strncpy+0x20>
   18e0c:	bd10      	pop	{r4, pc}
   18e0e:	f803 1b01 	strb.w	r1, [r3], #1
   18e12:	e7f9      	b.n	18e08 <strncpy+0x1a>

00018e14 <strnlen>:
   18e14:	4602      	mov	r2, r0
   18e16:	4401      	add	r1, r0
   18e18:	b510      	push	{r4, lr}
   18e1a:	428a      	cmp	r2, r1
   18e1c:	4613      	mov	r3, r2
   18e1e:	d101      	bne.n	18e24 <strnlen+0x10>
   18e20:	1a18      	subs	r0, r3, r0
   18e22:	bd10      	pop	{r4, pc}
   18e24:	781c      	ldrb	r4, [r3, #0]
   18e26:	3201      	adds	r2, #1
   18e28:	2c00      	cmp	r4, #0
   18e2a:	d1f6      	bne.n	18e1a <strnlen+0x6>
   18e2c:	e7f8      	b.n	18e20 <strnlen+0xc>

00018e2e <__strtok_r>:
   18e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e30:	b908      	cbnz	r0, 18e36 <__strtok_r+0x8>
   18e32:	6810      	ldr	r0, [r2, #0]
   18e34:	b188      	cbz	r0, 18e5a <__strtok_r+0x2c>
   18e36:	4604      	mov	r4, r0
   18e38:	4620      	mov	r0, r4
   18e3a:	460f      	mov	r7, r1
   18e3c:	f814 5b01 	ldrb.w	r5, [r4], #1
   18e40:	f817 6b01 	ldrb.w	r6, [r7], #1
   18e44:	b91e      	cbnz	r6, 18e4e <__strtok_r+0x20>
   18e46:	b965      	cbnz	r5, 18e62 <__strtok_r+0x34>
   18e48:	4628      	mov	r0, r5
   18e4a:	6015      	str	r5, [r2, #0]
   18e4c:	e005      	b.n	18e5a <__strtok_r+0x2c>
   18e4e:	42b5      	cmp	r5, r6
   18e50:	d1f6      	bne.n	18e40 <__strtok_r+0x12>
   18e52:	2b00      	cmp	r3, #0
   18e54:	d1f0      	bne.n	18e38 <__strtok_r+0xa>
   18e56:	6014      	str	r4, [r2, #0]
   18e58:	7003      	strb	r3, [r0, #0]
   18e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e5c:	461c      	mov	r4, r3
   18e5e:	e00c      	b.n	18e7a <__strtok_r+0x4c>
   18e60:	b915      	cbnz	r5, 18e68 <__strtok_r+0x3a>
   18e62:	f814 3b01 	ldrb.w	r3, [r4], #1
   18e66:	460e      	mov	r6, r1
   18e68:	f816 5b01 	ldrb.w	r5, [r6], #1
   18e6c:	42ab      	cmp	r3, r5
   18e6e:	d1f7      	bne.n	18e60 <__strtok_r+0x32>
   18e70:	2b00      	cmp	r3, #0
   18e72:	d0f3      	beq.n	18e5c <__strtok_r+0x2e>
   18e74:	2300      	movs	r3, #0
   18e76:	f804 3c01 	strb.w	r3, [r4, #-1]
   18e7a:	6014      	str	r4, [r2, #0]
   18e7c:	e7ed      	b.n	18e5a <__strtok_r+0x2c>

00018e7e <quorem>:
   18e7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e82:	6903      	ldr	r3, [r0, #16]
   18e84:	4607      	mov	r7, r0
   18e86:	690c      	ldr	r4, [r1, #16]
   18e88:	42a3      	cmp	r3, r4
   18e8a:	f2c0 8085 	blt.w	18f98 <quorem+0x11a>
   18e8e:	3c01      	subs	r4, #1
   18e90:	f100 0514 	add.w	r5, r0, #20
   18e94:	f101 0814 	add.w	r8, r1, #20
   18e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18ea0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   18ea4:	9301      	str	r3, [sp, #4]
   18ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   18eaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   18eae:	3301      	adds	r3, #1
   18eb0:	429a      	cmp	r2, r3
   18eb2:	fbb2 f6f3 	udiv	r6, r2, r3
   18eb6:	d333      	bcc.n	18f20 <quorem+0xa2>
   18eb8:	f04f 0e00 	mov.w	lr, #0
   18ebc:	4640      	mov	r0, r8
   18ebe:	46ac      	mov	ip, r5
   18ec0:	46f2      	mov	sl, lr
   18ec2:	f850 2b04 	ldr.w	r2, [r0], #4
   18ec6:	b293      	uxth	r3, r2
   18ec8:	4581      	cmp	r9, r0
   18eca:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18ece:	fb06 e303 	mla	r3, r6, r3, lr
   18ed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   18ed6:	b29b      	uxth	r3, r3
   18ed8:	fb06 e202 	mla	r2, r6, r2, lr
   18edc:	ebaa 0303 	sub.w	r3, sl, r3
   18ee0:	f8dc a000 	ldr.w	sl, [ip]
   18ee4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   18ee8:	fa1f fa8a 	uxth.w	sl, sl
   18eec:	4453      	add	r3, sl
   18eee:	fa1f fa82 	uxth.w	sl, r2
   18ef2:	f8dc 2000 	ldr.w	r2, [ip]
   18ef6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   18efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18efe:	b29b      	uxth	r3, r3
   18f00:	ea4f 4a22 	mov.w	sl, r2, asr #16
   18f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18f08:	f84c 3b04 	str.w	r3, [ip], #4
   18f0c:	d2d9      	bcs.n	18ec2 <quorem+0x44>
   18f0e:	f855 300b 	ldr.w	r3, [r5, fp]
   18f12:	b92b      	cbnz	r3, 18f20 <quorem+0xa2>
   18f14:	9b01      	ldr	r3, [sp, #4]
   18f16:	3b04      	subs	r3, #4
   18f18:	429d      	cmp	r5, r3
   18f1a:	461a      	mov	r2, r3
   18f1c:	d330      	bcc.n	18f80 <quorem+0x102>
   18f1e:	613c      	str	r4, [r7, #16]
   18f20:	4638      	mov	r0, r7
   18f22:	f000 fa6f 	bl	19404 <__mcmp>
   18f26:	2800      	cmp	r0, #0
   18f28:	db26      	blt.n	18f78 <quorem+0xfa>
   18f2a:	3601      	adds	r6, #1
   18f2c:	4628      	mov	r0, r5
   18f2e:	f04f 0c00 	mov.w	ip, #0
   18f32:	f858 1b04 	ldr.w	r1, [r8], #4
   18f36:	f8d0 e000 	ldr.w	lr, [r0]
   18f3a:	b28b      	uxth	r3, r1
   18f3c:	45c1      	cmp	r9, r8
   18f3e:	fa1f f28e 	uxth.w	r2, lr
   18f42:	ebac 0303 	sub.w	r3, ip, r3
   18f46:	4413      	add	r3, r2
   18f48:	ea4f 4211 	mov.w	r2, r1, lsr #16
   18f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   18f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
   18f54:	b29b      	uxth	r3, r3
   18f56:	ea4f 4c22 	mov.w	ip, r2, asr #16
   18f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   18f5e:	f840 3b04 	str.w	r3, [r0], #4
   18f62:	d2e6      	bcs.n	18f32 <quorem+0xb4>
   18f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   18f68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   18f6c:	b922      	cbnz	r2, 18f78 <quorem+0xfa>
   18f6e:	3b04      	subs	r3, #4
   18f70:	429d      	cmp	r5, r3
   18f72:	461a      	mov	r2, r3
   18f74:	d30a      	bcc.n	18f8c <quorem+0x10e>
   18f76:	613c      	str	r4, [r7, #16]
   18f78:	4630      	mov	r0, r6
   18f7a:	b003      	add	sp, #12
   18f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f80:	6812      	ldr	r2, [r2, #0]
   18f82:	3b04      	subs	r3, #4
   18f84:	2a00      	cmp	r2, #0
   18f86:	d1ca      	bne.n	18f1e <quorem+0xa0>
   18f88:	3c01      	subs	r4, #1
   18f8a:	e7c5      	b.n	18f18 <quorem+0x9a>
   18f8c:	6812      	ldr	r2, [r2, #0]
   18f8e:	3b04      	subs	r3, #4
   18f90:	2a00      	cmp	r2, #0
   18f92:	d1f0      	bne.n	18f76 <quorem+0xf8>
   18f94:	3c01      	subs	r4, #1
   18f96:	e7eb      	b.n	18f70 <quorem+0xf2>
   18f98:	2000      	movs	r0, #0
   18f9a:	e7ee      	b.n	18f7a <quorem+0xfc>

00018f9c <__sfmoreglue>:
   18f9c:	b570      	push	{r4, r5, r6, lr}
   18f9e:	1e4a      	subs	r2, r1, #1
   18fa0:	2568      	movs	r5, #104	; 0x68
   18fa2:	460e      	mov	r6, r1
   18fa4:	4355      	muls	r5, r2
   18fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   18faa:	f7f9 fe05 	bl	12bb8 <_malloc_r>
   18fae:	4604      	mov	r4, r0
   18fb0:	b140      	cbz	r0, 18fc4 <__sfmoreglue+0x28>
   18fb2:	2100      	movs	r1, #0
   18fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   18fb8:	e9c0 1600 	strd	r1, r6, [r0]
   18fbc:	300c      	adds	r0, #12
   18fbe:	60a0      	str	r0, [r4, #8]
   18fc0:	f7ff fd9c 	bl	18afc <memset>
   18fc4:	4620      	mov	r0, r4
   18fc6:	bd70      	pop	{r4, r5, r6, pc}

00018fc8 <_fwalk_reent>:
   18fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18fcc:	4606      	mov	r6, r0
   18fce:	4688      	mov	r8, r1
   18fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   18fd4:	2700      	movs	r7, #0
   18fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   18fda:	f1b9 0901 	subs.w	r9, r9, #1
   18fde:	d505      	bpl.n	18fec <_fwalk_reent+0x24>
   18fe0:	6824      	ldr	r4, [r4, #0]
   18fe2:	2c00      	cmp	r4, #0
   18fe4:	d1f7      	bne.n	18fd6 <_fwalk_reent+0xe>
   18fe6:	4638      	mov	r0, r7
   18fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18fec:	89ab      	ldrh	r3, [r5, #12]
   18fee:	2b01      	cmp	r3, #1
   18ff0:	d907      	bls.n	19002 <_fwalk_reent+0x3a>
   18ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   18ff6:	3301      	adds	r3, #1
   18ff8:	d003      	beq.n	19002 <_fwalk_reent+0x3a>
   18ffa:	4629      	mov	r1, r5
   18ffc:	4630      	mov	r0, r6
   18ffe:	47c0      	blx	r8
   19000:	4307      	orrs	r7, r0
   19002:	3568      	adds	r5, #104	; 0x68
   19004:	e7e9      	b.n	18fda <_fwalk_reent+0x12>

00019006 <__swhatbuf_r>:
   19006:	b570      	push	{r4, r5, r6, lr}
   19008:	460e      	mov	r6, r1
   1900a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1900e:	b096      	sub	sp, #88	; 0x58
   19010:	4614      	mov	r4, r2
   19012:	2900      	cmp	r1, #0
   19014:	461d      	mov	r5, r3
   19016:	da07      	bge.n	19028 <__swhatbuf_r+0x22>
   19018:	2300      	movs	r3, #0
   1901a:	602b      	str	r3, [r5, #0]
   1901c:	89b3      	ldrh	r3, [r6, #12]
   1901e:	061a      	lsls	r2, r3, #24
   19020:	d410      	bmi.n	19044 <__swhatbuf_r+0x3e>
   19022:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19026:	e00e      	b.n	19046 <__swhatbuf_r+0x40>
   19028:	466a      	mov	r2, sp
   1902a:	f7fa fe8b 	bl	13d44 <_fstat_r>
   1902e:	2800      	cmp	r0, #0
   19030:	dbf2      	blt.n	19018 <__swhatbuf_r+0x12>
   19032:	9a01      	ldr	r2, [sp, #4]
   19034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   19038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1903c:	425a      	negs	r2, r3
   1903e:	415a      	adcs	r2, r3
   19040:	602a      	str	r2, [r5, #0]
   19042:	e7ee      	b.n	19022 <__swhatbuf_r+0x1c>
   19044:	2340      	movs	r3, #64	; 0x40
   19046:	2000      	movs	r0, #0
   19048:	6023      	str	r3, [r4, #0]
   1904a:	b016      	add	sp, #88	; 0x58
   1904c:	bd70      	pop	{r4, r5, r6, pc}

0001904e <_Balloc>:
   1904e:	b570      	push	{r4, r5, r6, lr}
   19050:	6a46      	ldr	r6, [r0, #36]	; 0x24
   19052:	4604      	mov	r4, r0
   19054:	460d      	mov	r5, r1
   19056:	b93e      	cbnz	r6, 19068 <_Balloc+0x1a>
   19058:	2010      	movs	r0, #16
   1905a:	f7f9 fd4f 	bl	12afc <malloc>
   1905e:	6260      	str	r0, [r4, #36]	; 0x24
   19060:	6006      	str	r6, [r0, #0]
   19062:	60c6      	str	r6, [r0, #12]
   19064:	e9c0 6601 	strd	r6, r6, [r0, #4]
   19068:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1906a:	68f3      	ldr	r3, [r6, #12]
   1906c:	b183      	cbz	r3, 19090 <_Balloc+0x42>
   1906e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19070:	68db      	ldr	r3, [r3, #12]
   19072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   19076:	b9b8      	cbnz	r0, 190a8 <_Balloc+0x5a>
   19078:	2101      	movs	r1, #1
   1907a:	4620      	mov	r0, r4
   1907c:	fa01 f605 	lsl.w	r6, r1, r5
   19080:	1d72      	adds	r2, r6, #5
   19082:	0092      	lsls	r2, r2, #2
   19084:	f000 faa5 	bl	195d2 <_calloc_r>
   19088:	b160      	cbz	r0, 190a4 <_Balloc+0x56>
   1908a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   1908e:	e00e      	b.n	190ae <_Balloc+0x60>
   19090:	2221      	movs	r2, #33	; 0x21
   19092:	2104      	movs	r1, #4
   19094:	4620      	mov	r0, r4
   19096:	f000 fa9c 	bl	195d2 <_calloc_r>
   1909a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1909c:	60f0      	str	r0, [r6, #12]
   1909e:	68db      	ldr	r3, [r3, #12]
   190a0:	2b00      	cmp	r3, #0
   190a2:	d1e4      	bne.n	1906e <_Balloc+0x20>
   190a4:	2000      	movs	r0, #0
   190a6:	bd70      	pop	{r4, r5, r6, pc}
   190a8:	6802      	ldr	r2, [r0, #0]
   190aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   190ae:	2300      	movs	r3, #0
   190b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   190b4:	e7f7      	b.n	190a6 <_Balloc+0x58>

000190b6 <_Bfree>:
   190b6:	b570      	push	{r4, r5, r6, lr}
   190b8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   190ba:	4605      	mov	r5, r0
   190bc:	460c      	mov	r4, r1
   190be:	b93e      	cbnz	r6, 190d0 <_Bfree+0x1a>
   190c0:	2010      	movs	r0, #16
   190c2:	f7f9 fd1b 	bl	12afc <malloc>
   190c6:	6268      	str	r0, [r5, #36]	; 0x24
   190c8:	6006      	str	r6, [r0, #0]
   190ca:	60c6      	str	r6, [r0, #12]
   190cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   190d0:	b13c      	cbz	r4, 190e2 <_Bfree+0x2c>
   190d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   190d4:	6862      	ldr	r2, [r4, #4]
   190d6:	68db      	ldr	r3, [r3, #12]
   190d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   190dc:	6021      	str	r1, [r4, #0]
   190de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   190e2:	bd70      	pop	{r4, r5, r6, pc}

000190e4 <__multadd>:
   190e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190e8:	4607      	mov	r7, r0
   190ea:	4698      	mov	r8, r3
   190ec:	460c      	mov	r4, r1
   190ee:	690e      	ldr	r6, [r1, #16]
   190f0:	f101 0014 	add.w	r0, r1, #20
   190f4:	2300      	movs	r3, #0
   190f6:	6805      	ldr	r5, [r0, #0]
   190f8:	3301      	adds	r3, #1
   190fa:	b2a9      	uxth	r1, r5
   190fc:	429e      	cmp	r6, r3
   190fe:	ea4f 4515 	mov.w	r5, r5, lsr #16
   19102:	fb02 8101 	mla	r1, r2, r1, r8
   19106:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1910a:	b289      	uxth	r1, r1
   1910c:	fb02 c505 	mla	r5, r2, r5, ip
   19110:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   19114:	ea4f 4815 	mov.w	r8, r5, lsr #16
   19118:	f840 1b04 	str.w	r1, [r0], #4
   1911c:	dceb      	bgt.n	190f6 <__multadd+0x12>
   1911e:	f1b8 0f00 	cmp.w	r8, #0
   19122:	d01b      	beq.n	1915c <__multadd+0x78>
   19124:	68a3      	ldr	r3, [r4, #8]
   19126:	42b3      	cmp	r3, r6
   19128:	dc12      	bgt.n	19150 <__multadd+0x6c>
   1912a:	6861      	ldr	r1, [r4, #4]
   1912c:	4638      	mov	r0, r7
   1912e:	3101      	adds	r1, #1
   19130:	f7ff ff8d 	bl	1904e <_Balloc>
   19134:	6922      	ldr	r2, [r4, #16]
   19136:	4605      	mov	r5, r0
   19138:	f104 010c 	add.w	r1, r4, #12
   1913c:	3202      	adds	r2, #2
   1913e:	300c      	adds	r0, #12
   19140:	0092      	lsls	r2, r2, #2
   19142:	f7ff fcce 	bl	18ae2 <memcpy>
   19146:	4621      	mov	r1, r4
   19148:	462c      	mov	r4, r5
   1914a:	4638      	mov	r0, r7
   1914c:	f7ff ffb3 	bl	190b6 <_Bfree>
   19150:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   19154:	3601      	adds	r6, #1
   19156:	f8c3 8014 	str.w	r8, [r3, #20]
   1915a:	6126      	str	r6, [r4, #16]
   1915c:	4620      	mov	r0, r4
   1915e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019162 <__hi0bits>:
   19162:	0c02      	lsrs	r2, r0, #16
   19164:	4603      	mov	r3, r0
   19166:	0412      	lsls	r2, r2, #16
   19168:	b9ca      	cbnz	r2, 1919e <__hi0bits+0x3c>
   1916a:	0403      	lsls	r3, r0, #16
   1916c:	2010      	movs	r0, #16
   1916e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   19172:	bf04      	itt	eq
   19174:	021b      	lsleq	r3, r3, #8
   19176:	3008      	addeq	r0, #8
   19178:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1917c:	bf04      	itt	eq
   1917e:	011b      	lsleq	r3, r3, #4
   19180:	3004      	addeq	r0, #4
   19182:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   19186:	bf04      	itt	eq
   19188:	009b      	lsleq	r3, r3, #2
   1918a:	3002      	addeq	r0, #2
   1918c:	2b00      	cmp	r3, #0
   1918e:	db05      	blt.n	1919c <__hi0bits+0x3a>
   19190:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   19194:	f100 0001 	add.w	r0, r0, #1
   19198:	bf08      	it	eq
   1919a:	2020      	moveq	r0, #32
   1919c:	4770      	bx	lr
   1919e:	2000      	movs	r0, #0
   191a0:	e7e5      	b.n	1916e <__hi0bits+0xc>

000191a2 <__lo0bits>:
   191a2:	6803      	ldr	r3, [r0, #0]
   191a4:	4602      	mov	r2, r0
   191a6:	f013 0007 	ands.w	r0, r3, #7
   191aa:	d00b      	beq.n	191c4 <__lo0bits+0x22>
   191ac:	07d9      	lsls	r1, r3, #31
   191ae:	d422      	bmi.n	191f6 <__lo0bits+0x54>
   191b0:	0798      	lsls	r0, r3, #30
   191b2:	bf47      	ittee	mi
   191b4:	085b      	lsrmi	r3, r3, #1
   191b6:	2001      	movmi	r0, #1
   191b8:	089b      	lsrpl	r3, r3, #2
   191ba:	2002      	movpl	r0, #2
   191bc:	bf4c      	ite	mi
   191be:	6013      	strmi	r3, [r2, #0]
   191c0:	6013      	strpl	r3, [r2, #0]
   191c2:	4770      	bx	lr
   191c4:	b299      	uxth	r1, r3
   191c6:	b909      	cbnz	r1, 191cc <__lo0bits+0x2a>
   191c8:	0c1b      	lsrs	r3, r3, #16
   191ca:	2010      	movs	r0, #16
   191cc:	f013 0fff 	tst.w	r3, #255	; 0xff
   191d0:	bf04      	itt	eq
   191d2:	0a1b      	lsreq	r3, r3, #8
   191d4:	3008      	addeq	r0, #8
   191d6:	0719      	lsls	r1, r3, #28
   191d8:	bf04      	itt	eq
   191da:	091b      	lsreq	r3, r3, #4
   191dc:	3004      	addeq	r0, #4
   191de:	0799      	lsls	r1, r3, #30
   191e0:	bf04      	itt	eq
   191e2:	089b      	lsreq	r3, r3, #2
   191e4:	3002      	addeq	r0, #2
   191e6:	07d9      	lsls	r1, r3, #31
   191e8:	d403      	bmi.n	191f2 <__lo0bits+0x50>
   191ea:	085b      	lsrs	r3, r3, #1
   191ec:	f100 0001 	add.w	r0, r0, #1
   191f0:	d003      	beq.n	191fa <__lo0bits+0x58>
   191f2:	6013      	str	r3, [r2, #0]
   191f4:	4770      	bx	lr
   191f6:	2000      	movs	r0, #0
   191f8:	4770      	bx	lr
   191fa:	2020      	movs	r0, #32
   191fc:	4770      	bx	lr

000191fe <__i2b>:
   191fe:	b510      	push	{r4, lr}
   19200:	460c      	mov	r4, r1
   19202:	2101      	movs	r1, #1
   19204:	f7ff ff23 	bl	1904e <_Balloc>
   19208:	2201      	movs	r2, #1
   1920a:	6144      	str	r4, [r0, #20]
   1920c:	6102      	str	r2, [r0, #16]
   1920e:	bd10      	pop	{r4, pc}

00019210 <__multiply>:
   19210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19214:	4615      	mov	r5, r2
   19216:	690a      	ldr	r2, [r1, #16]
   19218:	460c      	mov	r4, r1
   1921a:	b085      	sub	sp, #20
   1921c:	692b      	ldr	r3, [r5, #16]
   1921e:	429a      	cmp	r2, r3
   19220:	bfbe      	ittt	lt
   19222:	460b      	movlt	r3, r1
   19224:	462c      	movlt	r4, r5
   19226:	461d      	movlt	r5, r3
   19228:	6927      	ldr	r7, [r4, #16]
   1922a:	68a3      	ldr	r3, [r4, #8]
   1922c:	f8d5 9010 	ldr.w	r9, [r5, #16]
   19230:	6861      	ldr	r1, [r4, #4]
   19232:	eb07 0609 	add.w	r6, r7, r9
   19236:	42b3      	cmp	r3, r6
   19238:	bfb8      	it	lt
   1923a:	3101      	addlt	r1, #1
   1923c:	f7ff ff07 	bl	1904e <_Balloc>
   19240:	f100 0114 	add.w	r1, r0, #20
   19244:	2200      	movs	r2, #0
   19246:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   1924a:	460b      	mov	r3, r1
   1924c:	4543      	cmp	r3, r8
   1924e:	d31d      	bcc.n	1928c <__multiply+0x7c>
   19250:	f104 0314 	add.w	r3, r4, #20
   19254:	f105 0214 	add.w	r2, r5, #20
   19258:	f104 0515 	add.w	r5, r4, #21
   1925c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   19260:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   19264:	9302      	str	r3, [sp, #8]
   19266:	1b3b      	subs	r3, r7, r4
   19268:	3b15      	subs	r3, #21
   1926a:	f023 0303 	bic.w	r3, r3, #3
   1926e:	3304      	adds	r3, #4
   19270:	42af      	cmp	r7, r5
   19272:	bf38      	it	cc
   19274:	2304      	movcc	r3, #4
   19276:	9301      	str	r3, [sp, #4]
   19278:	9b02      	ldr	r3, [sp, #8]
   1927a:	9203      	str	r2, [sp, #12]
   1927c:	4293      	cmp	r3, r2
   1927e:	d808      	bhi.n	19292 <__multiply+0x82>
   19280:	2e00      	cmp	r6, #0
   19282:	dc5a      	bgt.n	1933a <__multiply+0x12a>
   19284:	6106      	str	r6, [r0, #16]
   19286:	b005      	add	sp, #20
   19288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1928c:	f843 2b04 	str.w	r2, [r3], #4
   19290:	e7dc      	b.n	1924c <__multiply+0x3c>
   19292:	f8b2 a000 	ldrh.w	sl, [r2]
   19296:	f1ba 0f00 	cmp.w	sl, #0
   1929a:	d024      	beq.n	192e6 <__multiply+0xd6>
   1929c:	f104 0e14 	add.w	lr, r4, #20
   192a0:	4689      	mov	r9, r1
   192a2:	f04f 0c00 	mov.w	ip, #0
   192a6:	f85e 5b04 	ldr.w	r5, [lr], #4
   192aa:	f8d9 b000 	ldr.w	fp, [r9]
   192ae:	b2ab      	uxth	r3, r5
   192b0:	4577      	cmp	r7, lr
   192b2:	fa1f fb8b 	uxth.w	fp, fp
   192b6:	fb0a b303 	mla	r3, sl, r3, fp
   192ba:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   192be:	f8d9 5000 	ldr.w	r5, [r9]
   192c2:	4463      	add	r3, ip
   192c4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   192c8:	fb0a c50b 	mla	r5, sl, fp, ip
   192cc:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   192d0:	b29b      	uxth	r3, r3
   192d2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   192d6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   192da:	f849 3b04 	str.w	r3, [r9], #4
   192de:	d8e2      	bhi.n	192a6 <__multiply+0x96>
   192e0:	9b01      	ldr	r3, [sp, #4]
   192e2:	f841 c003 	str.w	ip, [r1, r3]
   192e6:	9b03      	ldr	r3, [sp, #12]
   192e8:	3204      	adds	r2, #4
   192ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   192ee:	f1b9 0f00 	cmp.w	r9, #0
   192f2:	d020      	beq.n	19336 <__multiply+0x126>
   192f4:	680b      	ldr	r3, [r1, #0]
   192f6:	f104 0c14 	add.w	ip, r4, #20
   192fa:	468e      	mov	lr, r1
   192fc:	f04f 0a00 	mov.w	sl, #0
   19300:	f8bc 5000 	ldrh.w	r5, [ip]
   19304:	b29b      	uxth	r3, r3
   19306:	f8be b002 	ldrh.w	fp, [lr, #2]
   1930a:	fb09 b505 	mla	r5, r9, r5, fp
   1930e:	44aa      	add	sl, r5
   19310:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   19314:	f84e 3b04 	str.w	r3, [lr], #4
   19318:	f85c 3b04 	ldr.w	r3, [ip], #4
   1931c:	f8be 5000 	ldrh.w	r5, [lr]
   19320:	0c1b      	lsrs	r3, r3, #16
   19322:	4567      	cmp	r7, ip
   19324:	fb09 5303 	mla	r3, r9, r3, r5
   19328:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   1932c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   19330:	d8e6      	bhi.n	19300 <__multiply+0xf0>
   19332:	9d01      	ldr	r5, [sp, #4]
   19334:	514b      	str	r3, [r1, r5]
   19336:	3104      	adds	r1, #4
   19338:	e79e      	b.n	19278 <__multiply+0x68>
   1933a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   1933e:	2b00      	cmp	r3, #0
   19340:	d1a0      	bne.n	19284 <__multiply+0x74>
   19342:	3e01      	subs	r6, #1
   19344:	e79c      	b.n	19280 <__multiply+0x70>

00019346 <__lshift>:
   19346:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1934a:	460c      	mov	r4, r1
   1934c:	4607      	mov	r7, r0
   1934e:	4691      	mov	r9, r2
   19350:	ea4f 1a62 	mov.w	sl, r2, asr #5
   19354:	6923      	ldr	r3, [r4, #16]
   19356:	6849      	ldr	r1, [r1, #4]
   19358:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1935c:	68a3      	ldr	r3, [r4, #8]
   1935e:	f108 0601 	add.w	r6, r8, #1
   19362:	42b3      	cmp	r3, r6
   19364:	db3f      	blt.n	193e6 <__lshift+0xa0>
   19366:	4638      	mov	r0, r7
   19368:	f7ff fe71 	bl	1904e <_Balloc>
   1936c:	2300      	movs	r3, #0
   1936e:	4605      	mov	r5, r0
   19370:	f100 0114 	add.w	r1, r0, #20
   19374:	f100 0210 	add.w	r2, r0, #16
   19378:	4618      	mov	r0, r3
   1937a:	4553      	cmp	r3, sl
   1937c:	db36      	blt.n	193ec <__lshift+0xa6>
   1937e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   19382:	f104 0314 	add.w	r3, r4, #20
   19386:	6920      	ldr	r0, [r4, #16]
   19388:	f019 091f 	ands.w	r9, r9, #31
   1938c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   19390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   19394:	d02e      	beq.n	193f4 <__lshift+0xae>
   19396:	f1c9 0e20 	rsb	lr, r9, #32
   1939a:	468a      	mov	sl, r1
   1939c:	2200      	movs	r2, #0
   1939e:	6818      	ldr	r0, [r3, #0]
   193a0:	fa00 f009 	lsl.w	r0, r0, r9
   193a4:	4302      	orrs	r2, r0
   193a6:	f84a 2b04 	str.w	r2, [sl], #4
   193aa:	f853 2b04 	ldr.w	r2, [r3], #4
   193ae:	459c      	cmp	ip, r3
   193b0:	fa22 f20e 	lsr.w	r2, r2, lr
   193b4:	d8f3      	bhi.n	1939e <__lshift+0x58>
   193b6:	ebac 0304 	sub.w	r3, ip, r4
   193ba:	f104 0015 	add.w	r0, r4, #21
   193be:	3b15      	subs	r3, #21
   193c0:	f023 0303 	bic.w	r3, r3, #3
   193c4:	3304      	adds	r3, #4
   193c6:	4560      	cmp	r0, ip
   193c8:	bf88      	it	hi
   193ca:	2304      	movhi	r3, #4
   193cc:	50ca      	str	r2, [r1, r3]
   193ce:	b10a      	cbz	r2, 193d4 <__lshift+0x8e>
   193d0:	f108 0602 	add.w	r6, r8, #2
   193d4:	3e01      	subs	r6, #1
   193d6:	4638      	mov	r0, r7
   193d8:	4621      	mov	r1, r4
   193da:	612e      	str	r6, [r5, #16]
   193dc:	f7ff fe6b 	bl	190b6 <_Bfree>
   193e0:	4628      	mov	r0, r5
   193e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   193e6:	3101      	adds	r1, #1
   193e8:	005b      	lsls	r3, r3, #1
   193ea:	e7ba      	b.n	19362 <__lshift+0x1c>
   193ec:	3301      	adds	r3, #1
   193ee:	f842 0f04 	str.w	r0, [r2, #4]!
   193f2:	e7c2      	b.n	1937a <__lshift+0x34>
   193f4:	3904      	subs	r1, #4
   193f6:	f853 2b04 	ldr.w	r2, [r3], #4
   193fa:	459c      	cmp	ip, r3
   193fc:	f841 2f04 	str.w	r2, [r1, #4]!
   19400:	d8f9      	bhi.n	193f6 <__lshift+0xb0>
   19402:	e7e7      	b.n	193d4 <__lshift+0x8e>

00019404 <__mcmp>:
   19404:	4603      	mov	r3, r0
   19406:	690a      	ldr	r2, [r1, #16]
   19408:	6900      	ldr	r0, [r0, #16]
   1940a:	1a80      	subs	r0, r0, r2
   1940c:	b530      	push	{r4, r5, lr}
   1940e:	d10d      	bne.n	1942c <__mcmp+0x28>
   19410:	3314      	adds	r3, #20
   19412:	3114      	adds	r1, #20
   19414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   19418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1941c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   19420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   19424:	4295      	cmp	r5, r2
   19426:	d002      	beq.n	1942e <__mcmp+0x2a>
   19428:	d304      	bcc.n	19434 <__mcmp+0x30>
   1942a:	2001      	movs	r0, #1
   1942c:	bd30      	pop	{r4, r5, pc}
   1942e:	42a3      	cmp	r3, r4
   19430:	d3f4      	bcc.n	1941c <__mcmp+0x18>
   19432:	e7fb      	b.n	1942c <__mcmp+0x28>
   19434:	f04f 30ff 	mov.w	r0, #4294967295
   19438:	e7f8      	b.n	1942c <__mcmp+0x28>

0001943a <__mdiff>:
   1943a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1943e:	460c      	mov	r4, r1
   19440:	4606      	mov	r6, r0
   19442:	4611      	mov	r1, r2
   19444:	4692      	mov	sl, r2
   19446:	4620      	mov	r0, r4
   19448:	f7ff ffdc 	bl	19404 <__mcmp>
   1944c:	1e05      	subs	r5, r0, #0
   1944e:	d108      	bne.n	19462 <__mdiff+0x28>
   19450:	4629      	mov	r1, r5
   19452:	4630      	mov	r0, r6
   19454:	f7ff fdfb 	bl	1904e <_Balloc>
   19458:	2301      	movs	r3, #1
   1945a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1945e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19462:	bfa3      	ittte	ge
   19464:	4653      	movge	r3, sl
   19466:	46a2      	movge	sl, r4
   19468:	2500      	movge	r5, #0
   1946a:	2501      	movlt	r5, #1
   1946c:	bfa8      	it	ge
   1946e:	461c      	movge	r4, r3
   19470:	f8da 1004 	ldr.w	r1, [sl, #4]
   19474:	4630      	mov	r0, r6
   19476:	f7ff fdea 	bl	1904e <_Balloc>
   1947a:	f104 0914 	add.w	r9, r4, #20
   1947e:	f8da 7010 	ldr.w	r7, [sl, #16]
   19482:	f100 0814 	add.w	r8, r0, #20
   19486:	6926      	ldr	r6, [r4, #16]
   19488:	f10a 0210 	add.w	r2, sl, #16
   1948c:	60c5      	str	r5, [r0, #12]
   1948e:	f10a 0514 	add.w	r5, sl, #20
   19492:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   19496:	46c2      	mov	sl, r8
   19498:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   1949c:	f04f 0c00 	mov.w	ip, #0
   194a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   194a4:	f859 3b04 	ldr.w	r3, [r9], #4
   194a8:	fa1f f18b 	uxth.w	r1, fp
   194ac:	454e      	cmp	r6, r9
   194ae:	4461      	add	r1, ip
   194b0:	fa1f fc83 	uxth.w	ip, r3
   194b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
   194b8:	eba1 010c 	sub.w	r1, r1, ip
   194bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   194c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
   194c4:	b289      	uxth	r1, r1
   194c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
   194ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   194ce:	f84a 3b04 	str.w	r3, [sl], #4
   194d2:	d8e5      	bhi.n	194a0 <__mdiff+0x66>
   194d4:	1b33      	subs	r3, r6, r4
   194d6:	3415      	adds	r4, #21
   194d8:	3b15      	subs	r3, #21
   194da:	f023 0303 	bic.w	r3, r3, #3
   194de:	3304      	adds	r3, #4
   194e0:	42a6      	cmp	r6, r4
   194e2:	bf38      	it	cc
   194e4:	2304      	movcc	r3, #4
   194e6:	441d      	add	r5, r3
   194e8:	4443      	add	r3, r8
   194ea:	462c      	mov	r4, r5
   194ec:	461e      	mov	r6, r3
   194ee:	4574      	cmp	r4, lr
   194f0:	d30e      	bcc.n	19510 <__mdiff+0xd6>
   194f2:	f10e 0203 	add.w	r2, lr, #3
   194f6:	1b52      	subs	r2, r2, r5
   194f8:	3d03      	subs	r5, #3
   194fa:	f022 0203 	bic.w	r2, r2, #3
   194fe:	45ae      	cmp	lr, r5
   19500:	bf38      	it	cc
   19502:	2200      	movcc	r2, #0
   19504:	441a      	add	r2, r3
   19506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1950a:	b18b      	cbz	r3, 19530 <__mdiff+0xf6>
   1950c:	6107      	str	r7, [r0, #16]
   1950e:	e7a6      	b.n	1945e <__mdiff+0x24>
   19510:	f854 8b04 	ldr.w	r8, [r4], #4
   19514:	fa1f f288 	uxth.w	r2, r8
   19518:	4462      	add	r2, ip
   1951a:	1411      	asrs	r1, r2, #16
   1951c:	b292      	uxth	r2, r2
   1951e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   19522:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19526:	ea4f 4c21 	mov.w	ip, r1, asr #16
   1952a:	f846 2b04 	str.w	r2, [r6], #4
   1952e:	e7de      	b.n	194ee <__mdiff+0xb4>
   19530:	3f01      	subs	r7, #1
   19532:	e7e8      	b.n	19506 <__mdiff+0xcc>

00019534 <__d2b>:
   19534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19538:	461c      	mov	r4, r3
   1953a:	2101      	movs	r1, #1
   1953c:	4690      	mov	r8, r2
   1953e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   19542:	f7ff fd84 	bl	1904e <_Balloc>
   19546:	f3c4 0313 	ubfx	r3, r4, #0, #20
   1954a:	f3c4 540a 	ubfx	r4, r4, #20, #11
   1954e:	4607      	mov	r7, r0
   19550:	bb2c      	cbnz	r4, 1959e <__d2b+0x6a>
   19552:	9301      	str	r3, [sp, #4]
   19554:	f1b8 0300 	subs.w	r3, r8, #0
   19558:	d026      	beq.n	195a8 <__d2b+0x74>
   1955a:	4668      	mov	r0, sp
   1955c:	9300      	str	r3, [sp, #0]
   1955e:	f7ff fe20 	bl	191a2 <__lo0bits>
   19562:	9900      	ldr	r1, [sp, #0]
   19564:	b1f0      	cbz	r0, 195a4 <__d2b+0x70>
   19566:	9a01      	ldr	r2, [sp, #4]
   19568:	f1c0 0320 	rsb	r3, r0, #32
   1956c:	fa02 f303 	lsl.w	r3, r2, r3
   19570:	40c2      	lsrs	r2, r0
   19572:	430b      	orrs	r3, r1
   19574:	9201      	str	r2, [sp, #4]
   19576:	617b      	str	r3, [r7, #20]
   19578:	9b01      	ldr	r3, [sp, #4]
   1957a:	2b00      	cmp	r3, #0
   1957c:	61bb      	str	r3, [r7, #24]
   1957e:	bf14      	ite	ne
   19580:	2102      	movne	r1, #2
   19582:	2101      	moveq	r1, #1
   19584:	6139      	str	r1, [r7, #16]
   19586:	b1c4      	cbz	r4, 195ba <__d2b+0x86>
   19588:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   1958c:	4404      	add	r4, r0
   1958e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   19592:	6034      	str	r4, [r6, #0]
   19594:	6028      	str	r0, [r5, #0]
   19596:	4638      	mov	r0, r7
   19598:	b002      	add	sp, #8
   1959a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1959e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   195a2:	e7d6      	b.n	19552 <__d2b+0x1e>
   195a4:	6179      	str	r1, [r7, #20]
   195a6:	e7e7      	b.n	19578 <__d2b+0x44>
   195a8:	a801      	add	r0, sp, #4
   195aa:	f7ff fdfa 	bl	191a2 <__lo0bits>
   195ae:	9b01      	ldr	r3, [sp, #4]
   195b0:	2101      	movs	r1, #1
   195b2:	3020      	adds	r0, #32
   195b4:	617b      	str	r3, [r7, #20]
   195b6:	6139      	str	r1, [r7, #16]
   195b8:	e7e5      	b.n	19586 <__d2b+0x52>
   195ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   195be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   195c2:	6030      	str	r0, [r6, #0]
   195c4:	6918      	ldr	r0, [r3, #16]
   195c6:	f7ff fdcc 	bl	19162 <__hi0bits>
   195ca:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   195ce:	6029      	str	r1, [r5, #0]
   195d0:	e7e1      	b.n	19596 <__d2b+0x62>

000195d2 <_calloc_r>:
   195d2:	b538      	push	{r3, r4, r5, lr}
   195d4:	fb02 f501 	mul.w	r5, r2, r1
   195d8:	4629      	mov	r1, r5
   195da:	f7f9 faed 	bl	12bb8 <_malloc_r>
   195de:	4604      	mov	r4, r0
   195e0:	b118      	cbz	r0, 195ea <_calloc_r+0x18>
   195e2:	462a      	mov	r2, r5
   195e4:	2100      	movs	r1, #0
   195e6:	f7ff fa89 	bl	18afc <memset>
   195ea:	4620      	mov	r0, r4
   195ec:	bd38      	pop	{r3, r4, r5, pc}

000195ee <__sread>:
   195ee:	b510      	push	{r4, lr}
   195f0:	460c      	mov	r4, r1
   195f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   195f6:	f7fa fbd9 	bl	13dac <_read_r>
   195fa:	2800      	cmp	r0, #0
   195fc:	bfab      	itete	ge
   195fe:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   19600:	89a3      	ldrhlt	r3, [r4, #12]
   19602:	181b      	addge	r3, r3, r0
   19604:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   19608:	bfac      	ite	ge
   1960a:	6563      	strge	r3, [r4, #84]	; 0x54
   1960c:	81a3      	strhlt	r3, [r4, #12]
   1960e:	bd10      	pop	{r4, pc}

00019610 <__swrite>:
   19610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19614:	461f      	mov	r7, r3
   19616:	898b      	ldrh	r3, [r1, #12]
   19618:	4605      	mov	r5, r0
   1961a:	460c      	mov	r4, r1
   1961c:	05db      	lsls	r3, r3, #23
   1961e:	4616      	mov	r6, r2
   19620:	d505      	bpl.n	1962e <__swrite+0x1e>
   19622:	2302      	movs	r3, #2
   19624:	2200      	movs	r2, #0
   19626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1962a:	f7fa fbad 	bl	13d88 <_lseek_r>
   1962e:	89a3      	ldrh	r3, [r4, #12]
   19630:	4632      	mov	r2, r6
   19632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19636:	4628      	mov	r0, r5
   19638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1963c:	81a3      	strh	r3, [r4, #12]
   1963e:	463b      	mov	r3, r7
   19640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19644:	f7fa bb5c 	b.w	13d00 <_write_r>

00019648 <__sseek>:
   19648:	b510      	push	{r4, lr}
   1964a:	460c      	mov	r4, r1
   1964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19650:	f7fa fb9a 	bl	13d88 <_lseek_r>
   19654:	1c43      	adds	r3, r0, #1
   19656:	89a3      	ldrh	r3, [r4, #12]
   19658:	bf15      	itete	ne
   1965a:	6560      	strne	r0, [r4, #84]	; 0x54
   1965c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   19660:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   19664:	81a3      	strheq	r3, [r4, #12]
   19666:	bf18      	it	ne
   19668:	81a3      	strhne	r3, [r4, #12]
   1966a:	bd10      	pop	{r4, pc}

0001966c <__sclose>:
   1966c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19670:	f7fa bb58 	b.w	13d24 <_close_r>

00019674 <__ascii_mbtowc>:
   19674:	b082      	sub	sp, #8
   19676:	b901      	cbnz	r1, 1967a <__ascii_mbtowc+0x6>
   19678:	a901      	add	r1, sp, #4
   1967a:	b142      	cbz	r2, 1968e <__ascii_mbtowc+0x1a>
   1967c:	b14b      	cbz	r3, 19692 <__ascii_mbtowc+0x1e>
   1967e:	7813      	ldrb	r3, [r2, #0]
   19680:	600b      	str	r3, [r1, #0]
   19682:	7812      	ldrb	r2, [r2, #0]
   19684:	1e10      	subs	r0, r2, #0
   19686:	bf18      	it	ne
   19688:	2001      	movne	r0, #1
   1968a:	b002      	add	sp, #8
   1968c:	4770      	bx	lr
   1968e:	4610      	mov	r0, r2
   19690:	e7fb      	b.n	1968a <__ascii_mbtowc+0x16>
   19692:	f06f 0001 	mvn.w	r0, #1
   19696:	e7f8      	b.n	1968a <__ascii_mbtowc+0x16>

00019698 <__ascii_wctomb>:
   19698:	4603      	mov	r3, r0
   1969a:	4608      	mov	r0, r1
   1969c:	b141      	cbz	r1, 196b0 <__ascii_wctomb+0x18>
   1969e:	2aff      	cmp	r2, #255	; 0xff
   196a0:	d904      	bls.n	196ac <__ascii_wctomb+0x14>
   196a2:	228a      	movs	r2, #138	; 0x8a
   196a4:	f04f 30ff 	mov.w	r0, #4294967295
   196a8:	601a      	str	r2, [r3, #0]
   196aa:	4770      	bx	lr
   196ac:	2001      	movs	r0, #1
   196ae:	700a      	strb	r2, [r1, #0]
   196b0:	4770      	bx	lr
	...

000196b4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   196b4:	f7ec bbc6 	b.w	5e44 <SystemInit>
