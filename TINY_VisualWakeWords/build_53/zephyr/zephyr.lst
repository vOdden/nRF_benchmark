
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20028c48 	.word	0x20028c48
   4:	00004609 	.word	0x00004609
   8:	00012673 	.word	0x00012673
   c:	000045c1 	.word	0x000045c1
  10:	000045c1 	.word	0x000045c1
  14:	000045c1 	.word	0x000045c1
  18:	000045c1 	.word	0x000045c1
  1c:	000045c1 	.word	0x000045c1
	...
  2c:	000042c1 	.word	0x000042c1
  30:	000045c1 	.word	0x000045c1
  34:	00000000 	.word	0x00000000
  38:	00004265 	.word	0x00004265
  3c:	00012ee3 	.word	0x00012ee3

00000040 <_irq_vector_table>:
  40:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  50:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  60:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  70:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  80:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  90:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  a0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  b0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  c0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  d0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  e0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
  f0:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 100:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 110:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 120:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 130:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 140:	0000434d 0000434d 0000434d 0000434d     MC..MC..MC..MC..
 150:	0000434d                                MC..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <__data_size+0xb5>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <CONFIG_SRAM_SIZE+0x14>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <__data_size+0xa1>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x56>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x74>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x8a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0xb0>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <__data_size+0x107>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0xb0>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <__data_size+0x35>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <__data_size+0x31>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <__data_size+0x4b>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <__data_size+0x99>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <__data_size+0x81>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <CONFIG_SRAM_SIZE+0x30>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <__data_size+0x115>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <__data_size+0xd9>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <__data_size+0xf7>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x8a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x8a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    14e8:	b530      	push	{r4, r5, lr}
    14ea:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14ec:	f7fe fff0 	bl	4d0 <__aeabi_dmul>
    14f0:	4604      	mov	r4, r0
    14f2:	460d      	mov	r5, r1
    14f4:	9b08      	ldr	r3, [sp, #32]
    14f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    14fa:	40d8      	lsrs	r0, r3
    14fc:	f7fe ff7e 	bl	3fc <__aeabi_i2d>
    1500:	4622      	mov	r2, r4
    1502:	462b      	mov	r3, r5
    1504:	f7fe ffe4 	bl	4d0 <__aeabi_dmul>
    1508:	4602      	mov	r2, r0
    150a:	460b      	mov	r3, r1
    150c:	e9cd 2300 	strd	r2, r3, [sp]
    1510:	a309      	add	r3, pc, #36	; (adr r3, 1538 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1512:	e9d3 2300 	ldrd	r2, r3, [r3]
    1516:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    151a:	f7ff fa69 	bl	9f0 <__aeabi_dcmpgt>
    151e:	b940      	cbnz	r0, 1532 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1520:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1524:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1526:	e9d1 0100 	ldrd	r0, r1, [r1]
    152a:	f007 fefb 	bl	9324 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    152e:	b005      	add	sp, #20
    1530:	bd30      	pop	{r4, r5, pc}
	return __b;
    1532:	a902      	add	r1, sp, #8
    1534:	e7f5      	b.n	1522 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1536:	bf00      	nop
    1538:	ffc00000 	.word	0xffc00000
    153c:	41dfffff 	.word	0x41dfffff

00001540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1544:	b082      	sub	sp, #8
    1546:	4607      	mov	r7, r0
    1548:	460d      	mov	r5, r1
    154a:	4616      	mov	r6, r2
    154c:	461c      	mov	r4, r3
    154e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1552:	68c8      	ldr	r0, [r1, #12]
    1554:	f7fe ff64 	bl	420 <__aeabi_f2d>
    1558:	4680      	mov	r8, r0
    155a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    155c:	68f0      	ldr	r0, [r6, #12]
    155e:	f7fe ff5f 	bl	420 <__aeabi_f2d>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1566:	4640      	mov	r0, r8
    1568:	4649      	mov	r1, r9
    156a:	f7fe ffb1 	bl	4d0 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    156e:	b1ec      	cbz	r4, 15ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1570:	4680      	mov	r8, r0
    1572:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1574:	68e0      	ldr	r0, [r4, #12]
    1576:	f7fe ff53 	bl	420 <__aeabi_f2d>
    157a:	4602      	mov	r2, r0
    157c:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    157e:	4640      	mov	r0, r8
    1580:	4649      	mov	r1, r9
    1582:	f7fe fded 	bl	160 <__aeabi_dsub>
    1586:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1588:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    158c:	f8da 000c 	ldr.w	r0, [sl, #12]
    1590:	f7fe ff46 	bl	420 <__aeabi_f2d>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1598:	4640      	mov	r0, r8
    159a:	4621      	mov	r1, r4
    159c:	f7ff f8c2 	bl	724 <__aeabi_ddiv>
    15a0:	a30d      	add	r3, pc, #52	; (adr r3, 15d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15a6:	f7ff fa0f 	bl	9c8 <__aeabi_dcmple>
    15aa:	b150      	cbz	r0, 15c2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	4653      	mov	r3, sl
    15b2:	4632      	mov	r2, r6
    15b4:	4629      	mov	r1, r5
    15b6:	4638      	mov	r0, r7
    15b8:	f007 fff8 	bl	95ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15bc:	b002      	add	sp, #8
    15be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15c2:	697c      	ldr	r4, [r7, #20]
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15cc:	4a05      	ldr	r2, [pc, #20]	; (15e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    15ce:	4906      	ldr	r1, [pc, #24]	; (15e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15d0:	4638      	mov	r0, r7
    15d2:	47a0      	blx	r4
    15d4:	2001      	movs	r0, #1
    15d6:	e7f1      	b.n	15bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    15d8:	47ae147b 	.word	0x47ae147b
    15dc:	3f947ae1 	.word	0x3f947ae1
    15e0:	0006ac60 	.word	0x0006ac60
    15e4:	0006abd0 	.word	0x0006abd0
    15e8:	0006a9cc 	.word	0x0006a9cc
    15ec:	00000000 	.word	0x00000000

000015f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    15f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f4:	b088      	sub	sp, #32
    15f6:	4605      	mov	r5, r0
    15f8:	460e      	mov	r6, r1
    15fa:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15fc:	780c      	ldrb	r4, [r1, #0]
    15fe:	2c09      	cmp	r4, #9
    1600:	d013      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1602:	2c07      	cmp	r4, #7
    1604:	d011      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1606:	2c01      	cmp	r4, #1
    1608:	f040 8133 	bne.w	1872 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    160c:	7810      	ldrb	r0, [r2, #0]
    160e:	2801      	cmp	r0, #1
    1610:	f040 8144 	bne.w	189c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1614:	6818      	ldr	r0, [r3, #0]
    1616:	f7fe ff03 	bl	420 <__aeabi_f2d>
    161a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    161c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1620:	2400      	movs	r4, #0
}
    1622:	4620      	mov	r0, r4
    1624:	b008      	add	sp, #32
    1626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    162a:	2c07      	cmp	r4, #7
    162c:	d01e      	beq.n	166c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    162e:	2c09      	cmp	r4, #9
    1630:	f040 8086 	bne.w	1740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1634:	7810      	ldrb	r0, [r2, #0]
    1636:	2807      	cmp	r0, #7
    1638:	f000 8097 	beq.w	176a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    163c:	2809      	cmp	r0, #9
    163e:	f040 80d5 	bne.w	17ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1642:	6913      	ldr	r3, [r2, #16]
    1644:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1648:	f000 80e4 	beq.w	1814 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    164c:	696c      	ldr	r4, [r5, #20]
    164e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1652:	9203      	str	r2, [sp, #12]
    1654:	9302      	str	r3, [sp, #8]
    1656:	4b9e      	ldr	r3, [pc, #632]	; (18d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1658:	9301      	str	r3, [sp, #4]
    165a:	4b9e      	ldr	r3, [pc, #632]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    165c:	9300      	str	r3, [sp, #0]
    165e:	2330      	movs	r3, #48	; 0x30
    1660:	4a9d      	ldr	r2, [pc, #628]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1662:	499e      	ldr	r1, [pc, #632]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1664:	4628      	mov	r0, r5
    1666:	47a0      	blx	r4
    1668:	2401      	movs	r4, #1
    166a:	e7da      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    166c:	6913      	ldr	r3, [r2, #16]
    166e:	2b00      	cmp	r3, #0
    1670:	d13b      	bne.n	16ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1672:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1676:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    167a:	4640      	mov	r0, r8
    167c:	f7ff fd04 	bl	1088 <__aeabi_fcmpgt>
    1680:	2800      	cmp	r0, #0
    1682:	d041      	beq.n	1708 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    1684:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    1688:	4640      	mov	r0, r8
    168a:	f7ff fa37 	bl	afc <__aeabi_fsub>
    168e:	4994      	ldr	r1, [pc, #592]	; (18e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    1690:	f7ff fcfa 	bl	1088 <__aeabi_fcmpgt>
    1694:	2800      	cmp	r0, #0
    1696:	d13d      	bne.n	1714 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    1698:	2c07      	cmp	r4, #7
    169a:	f000 80cd 	beq.w	1838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    169e:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16a0:	68f0      	ldr	r0, [r6, #12]
    16a2:	f7fe febd 	bl	420 <__aeabi_f2d>
    16a6:	4604      	mov	r4, r0
    16a8:	460d      	mov	r5, r1
    16aa:	4638      	mov	r0, r7
    16ac:	f7fe feb8 	bl	420 <__aeabi_f2d>
    16b0:	ab07      	add	r3, sp, #28
    16b2:	9302      	str	r3, [sp, #8]
    16b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16b6:	3308      	adds	r3, #8
    16b8:	9301      	str	r3, [sp, #4]
    16ba:	2605      	movs	r6, #5
    16bc:	9600      	str	r6, [sp, #0]
    16be:	4622      	mov	r2, r4
    16c0:	462b      	mov	r3, r5
    16c2:	f7ff ff11 	bl	14e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    16c6:	9907      	ldr	r1, [sp, #28]
    16c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16ca:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    16cc:	221f      	movs	r2, #31
    16ce:	4630      	mov	r0, r6
    16d0:	f012 fa0c 	bl	13aec <_ZN6tflite20CalculateInputRadiusEiii>
    16d4:	f7fe fe92 	bl	3fc <__aeabi_i2d>
      op_data->diff_min =
    16d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    16dc:	4619      	mov	r1, r3
    16de:	f7ff f991 	bl	a04 <__aeabi_d2iz>
    16e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16e4:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    16e6:	2400      	movs	r4, #0
    16e8:	e79b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ea:	696c      	ldr	r4, [r5, #20]
    16ec:	2200      	movs	r2, #0
    16ee:	9203      	str	r2, [sp, #12]
    16f0:	9302      	str	r3, [sp, #8]
    16f2:	4b7c      	ldr	r3, [pc, #496]	; (18e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    16f4:	9301      	str	r3, [sp, #4]
    16f6:	4b77      	ldr	r3, [pc, #476]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    16f8:	9300      	str	r3, [sp, #0]
    16fa:	2325      	movs	r3, #37	; 0x25
    16fc:	4a76      	ldr	r2, [pc, #472]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16fe:	4977      	ldr	r1, [pc, #476]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1700:	4628      	mov	r0, r5
    1702:	47a0      	blx	r4
    1704:	2401      	movs	r4, #1
    1706:	e78c      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1708:	4641      	mov	r1, r8
    170a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    170e:	f7ff f9f5 	bl	afc <__aeabi_fsub>
    1712:	e7bc      	b.n	168e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1714:	696c      	ldr	r4, [r5, #20]
    1716:	2200      	movs	r2, #0
    1718:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    171c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1720:	4640      	mov	r0, r8
    1722:	f7fe fe7d 	bl	420 <__aeabi_f2d>
    1726:	e9cd 0102 	strd	r0, r1, [sp, #8]
    172a:	4b6f      	ldr	r3, [pc, #444]	; (18e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    172c:	9301      	str	r3, [sp, #4]
    172e:	4b6f      	ldr	r3, [pc, #444]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1730:	9300      	str	r3, [sp, #0]
    1732:	2326      	movs	r3, #38	; 0x26
    1734:	4a68      	ldr	r2, [pc, #416]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1736:	496e      	ldr	r1, [pc, #440]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1738:	4628      	mov	r0, r5
    173a:	47a0      	blx	r4
    173c:	2401      	movs	r4, #1
    173e:	e770      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1740:	696e      	ldr	r6, [r5, #20]
    1742:	4620      	mov	r0, r4
    1744:	f007 fd4a 	bl	91dc <TfLiteTypeGetName>
    1748:	4604      	mov	r4, r0
    174a:	2009      	movs	r0, #9
    174c:	f007 fd46 	bl	91dc <TfLiteTypeGetName>
    1750:	9003      	str	r0, [sp, #12]
    1752:	9402      	str	r4, [sp, #8]
    1754:	4b67      	ldr	r3, [pc, #412]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1756:	9301      	str	r3, [sp, #4]
    1758:	4b67      	ldr	r3, [pc, #412]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    175a:	9300      	str	r3, [sp, #0]
    175c:	2329      	movs	r3, #41	; 0x29
    175e:	4a5e      	ldr	r2, [pc, #376]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1760:	4966      	ldr	r1, [pc, #408]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1762:	4628      	mov	r0, r5
    1764:	47b0      	blx	r6
    1766:	2401      	movs	r4, #1
    1768:	e75b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    176a:	6913      	ldr	r3, [r2, #16]
    176c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1770:	d00e      	beq.n	1790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    1772:	696c      	ldr	r4, [r5, #20]
    1774:	4a62      	ldr	r2, [pc, #392]	; (1900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    1776:	9203      	str	r2, [sp, #12]
    1778:	9302      	str	r3, [sp, #8]
    177a:	4b62      	ldr	r3, [pc, #392]	; (1904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    177c:	9301      	str	r3, [sp, #4]
    177e:	4b55      	ldr	r3, [pc, #340]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1780:	9300      	str	r3, [sp, #0]
    1782:	232b      	movs	r3, #43	; 0x2b
    1784:	4a54      	ldr	r2, [pc, #336]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1786:	4955      	ldr	r1, [pc, #340]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1788:	4628      	mov	r0, r5
    178a:	47a0      	blx	r4
    178c:	2401      	movs	r4, #1
    178e:	e748      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1790:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1794:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1798:	4640      	mov	r0, r8
    179a:	f7ff fc75 	bl	1088 <__aeabi_fcmpgt>
    179e:	b1f8      	cbz	r0, 17e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17a0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17a4:	4640      	mov	r0, r8
    17a6:	f7ff f9a9 	bl	afc <__aeabi_fsub>
    17aa:	4957      	ldr	r1, [pc, #348]	; (1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ac:	f7ff fc6c 	bl	1088 <__aeabi_fcmpgt>
    17b0:	2800      	cmp	r0, #0
    17b2:	f43f af71 	beq.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17b6:	696c      	ldr	r4, [r5, #20]
    17b8:	2200      	movs	r2, #0
    17ba:	4b54      	ldr	r3, [pc, #336]	; (190c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17c0:	4640      	mov	r0, r8
    17c2:	f7fe fe2d 	bl	420 <__aeabi_f2d>
    17c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    17ca:	4b51      	ldr	r3, [pc, #324]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	4b47      	ldr	r3, [pc, #284]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	232c      	movs	r3, #44	; 0x2c
    17d4:	4a40      	ldr	r2, [pc, #256]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17d6:	4946      	ldr	r1, [pc, #280]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    17d8:	4628      	mov	r0, r5
    17da:	47a0      	blx	r4
    17dc:	2401      	movs	r4, #1
    17de:	e720      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    17e0:	4641      	mov	r1, r8
    17e2:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    17e6:	f7ff f989 	bl	afc <__aeabi_fsub>
    17ea:	e7de      	b.n	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    17ec:	696e      	ldr	r6, [r5, #20]
    17ee:	f007 fcf5 	bl	91dc <TfLiteTypeGetName>
    17f2:	4604      	mov	r4, r0
    17f4:	2009      	movs	r0, #9
    17f6:	f007 fcf1 	bl	91dc <TfLiteTypeGetName>
    17fa:	9003      	str	r0, [sp, #12]
    17fc:	9402      	str	r4, [sp, #8]
    17fe:	4b3d      	ldr	r3, [pc, #244]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1800:	9301      	str	r3, [sp, #4]
    1802:	4b44      	ldr	r3, [pc, #272]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1804:	9300      	str	r3, [sp, #0]
    1806:	232f      	movs	r3, #47	; 0x2f
    1808:	4a33      	ldr	r2, [pc, #204]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    180a:	493c      	ldr	r1, [pc, #240]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    180c:	4628      	mov	r0, r5
    180e:	47b0      	blx	r6
    1810:	2401      	movs	r4, #1
    1812:	e706      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1814:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1818:	68d0      	ldr	r0, [r2, #12]
    181a:	f7ff fc0d 	bl	1038 <__aeabi_fcmpeq>
    181e:	2800      	cmp	r0, #0
    1820:	f47f af3a 	bne.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1824:	696c      	ldr	r4, [r5, #20]
    1826:	4b3c      	ldr	r3, [pc, #240]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1828:	9300      	str	r3, [sp, #0]
    182a:	2331      	movs	r3, #49	; 0x31
    182c:	4a2a      	ldr	r2, [pc, #168]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    182e:	493b      	ldr	r1, [pc, #236]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1830:	4628      	mov	r0, r5
    1832:	47a0      	blx	r4
    1834:	2401      	movs	r4, #1
    1836:	e6f4      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1838:	68f0      	ldr	r0, [r6, #12]
    183a:	f7fe fdf1 	bl	420 <__aeabi_f2d>
    183e:	4604      	mov	r4, r0
    1840:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1842:	6838      	ldr	r0, [r7, #0]
    1844:	f7fe fdec 	bl	420 <__aeabi_f2d>
    1848:	4602      	mov	r2, r0
    184a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    184c:	4620      	mov	r0, r4
    184e:	4629      	mov	r1, r5
    1850:	f7fe fe3e 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1854:	a31c      	add	r3, pc, #112	; (adr r3, 18c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7fe ff63 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    185e:	ab07      	add	r3, sp, #28
    1860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1862:	3208      	adds	r2, #8
    1864:	f007 fd10 	bl	9288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    1868:	9b07      	ldr	r3, [sp, #28]
    186a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    186c:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    186e:	2400      	movs	r4, #0
    1870:	e6d7      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1872:	6946      	ldr	r6, [r0, #20]
    1874:	4620      	mov	r0, r4
    1876:	f007 fcb1 	bl	91dc <TfLiteTypeGetName>
    187a:	4604      	mov	r4, r0
    187c:	2001      	movs	r0, #1
    187e:	f007 fcad 	bl	91dc <TfLiteTypeGetName>
    1882:	9003      	str	r0, [sp, #12]
    1884:	9402      	str	r4, [sp, #8]
    1886:	4b26      	ldr	r3, [pc, #152]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    1888:	9301      	str	r3, [sp, #4]
    188a:	4b1b      	ldr	r3, [pc, #108]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    188c:	9300      	str	r3, [sp, #0]
    188e:	234e      	movs	r3, #78	; 0x4e
    1890:	4a11      	ldr	r2, [pc, #68]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1892:	491a      	ldr	r1, [pc, #104]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1894:	4628      	mov	r0, r5
    1896:	47b0      	blx	r6
    1898:	2401      	movs	r4, #1
    189a:	e6c2      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    189c:	696f      	ldr	r7, [r5, #20]
    189e:	f007 fc9d 	bl	91dc <TfLiteTypeGetName>
    18a2:	4606      	mov	r6, r0
    18a4:	2001      	movs	r0, #1
    18a6:	f007 fc99 	bl	91dc <TfLiteTypeGetName>
    18aa:	9003      	str	r0, [sp, #12]
    18ac:	9602      	str	r6, [sp, #8]
    18ae:	4b1c      	ldr	r3, [pc, #112]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	234f      	movs	r3, #79	; 0x4f
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18ba:	4910      	ldr	r1, [pc, #64]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18bc:	4628      	mov	r0, r5
    18be:	47b8      	blx	r7
    18c0:	e6af      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    18c2:	bf00      	nop
    18c4:	f3af 8000 	nop.w
    18c8:	00140014 	.word	0x00140014
    18cc:	3f240014 	.word	0x3f240014
    18d0:	0006b9b0 	.word	0x0006b9b0
    18d4:	0006b93c 	.word	0x0006b93c
    18d8:	0006b8e4 	.word	0x0006b8e4
    18dc:	0006ac8c 	.word	0x0006ac8c
    18e0:	3303126f 	.word	0x3303126f
    18e4:	0006b078 	.word	0x0006b078
    18e8:	0006b978 	.word	0x0006b978
    18ec:	0006b984 	.word	0x0006b984
    18f0:	0006b958 	.word	0x0006b958
    18f4:	0006ad68 	.word	0x0006ad68
    18f8:	0006b2b0 	.word	0x0006b2b0
    18fc:	0006b618 	.word	0x0006b618
    1900:	ffff8000 	.word	0xffff8000
    1904:	0006b99c 	.word	0x0006b99c
    1908:	3283126f 	.word	0x3283126f
    190c:	3ef00000 	.word	0x3ef00000
    1910:	0006b9a4 	.word	0x0006b9a4
    1914:	0006b2a0 	.word	0x0006b2a0
    1918:	0006b9b8 	.word	0x0006b9b8
    191c:	0006a9cc 	.word	0x0006a9cc
    1920:	0006b9dc 	.word	0x0006b9dc
    1924:	00000000 	.word	0x00000000

00001928 <floor>:
    1928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    192e:	460b      	mov	r3, r1
    1930:	4602      	mov	r2, r0
    1932:	460c      	mov	r4, r1
    1934:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1938:	4606      	mov	r6, r0
    193a:	2d13      	cmp	r5, #19
    193c:	dc20      	bgt.n	1980 <floor+0x58>
    193e:	2d00      	cmp	r5, #0
    1940:	db40      	blt.n	19c4 <floor+0x9c>
    1942:	4f35      	ldr	r7, [pc, #212]	; (1a18 <floor+0xf0>)
    1944:	412f      	asrs	r7, r5
    1946:	ea01 0c07 	and.w	ip, r1, r7
    194a:	ea5c 0c00 	orrs.w	ip, ip, r0
    194e:	d014      	beq.n	197a <floor+0x52>
    1950:	a32f      	add	r3, pc, #188	; (adr r3, 1a10 <floor+0xe8>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	f7fe fc05 	bl	164 <__adddf3>
    195a:	2200      	movs	r2, #0
    195c:	2300      	movs	r3, #0
    195e:	f7ff f847 	bl	9f0 <__aeabi_dcmpgt>
    1962:	b140      	cbz	r0, 1976 <floor+0x4e>
    1964:	2c00      	cmp	r4, #0
    1966:	da03      	bge.n	1970 <floor+0x48>
    1968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    196c:	412b      	asrs	r3, r5
    196e:	441c      	add	r4, r3
    1970:	ea24 0407 	bic.w	r4, r4, r7
    1974:	2600      	movs	r6, #0
    1976:	4632      	mov	r2, r6
    1978:	4623      	mov	r3, r4
    197a:	4610      	mov	r0, r2
    197c:	4619      	mov	r1, r3
    197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1980:	2d33      	cmp	r5, #51	; 0x33
    1982:	dd07      	ble.n	1994 <floor+0x6c>
    1984:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1988:	d1f7      	bne.n	197a <floor+0x52>
    198a:	f7fe fbeb 	bl	164 <__adddf3>
    198e:	4602      	mov	r2, r0
    1990:	460b      	mov	r3, r1
    1992:	e7f2      	b.n	197a <floor+0x52>
    1994:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    1998:	f04f 3cff 	mov.w	ip, #4294967295
    199c:	fa2c f707 	lsr.w	r7, ip, r7
    19a0:	4207      	tst	r7, r0
    19a2:	d0ea      	beq.n	197a <floor+0x52>
    19a4:	a31a      	add	r3, pc, #104	; (adr r3, 1a10 <floor+0xe8>)
    19a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19aa:	f7fe fbdb 	bl	164 <__adddf3>
    19ae:	2200      	movs	r2, #0
    19b0:	2300      	movs	r3, #0
    19b2:	f7ff f81d 	bl	9f0 <__aeabi_dcmpgt>
    19b6:	2800      	cmp	r0, #0
    19b8:	d0dd      	beq.n	1976 <floor+0x4e>
    19ba:	2c00      	cmp	r4, #0
    19bc:	db1b      	blt.n	19f6 <floor+0xce>
    19be:	ea26 0607 	bic.w	r6, r6, r7
    19c2:	e7d8      	b.n	1976 <floor+0x4e>
    19c4:	a312      	add	r3, pc, #72	; (adr r3, 1a10 <floor+0xe8>)
    19c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ca:	f7fe fbcb 	bl	164 <__adddf3>
    19ce:	2200      	movs	r2, #0
    19d0:	2300      	movs	r3, #0
    19d2:	f7ff f80d 	bl	9f0 <__aeabi_dcmpgt>
    19d6:	2800      	cmp	r0, #0
    19d8:	d0cd      	beq.n	1976 <floor+0x4e>
    19da:	2c00      	cmp	r4, #0
    19dc:	db02      	blt.n	19e4 <floor+0xbc>
    19de:	2600      	movs	r6, #0
    19e0:	4634      	mov	r4, r6
    19e2:	e7c8      	b.n	1976 <floor+0x4e>
    19e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    19e8:	4a0c      	ldr	r2, [pc, #48]	; (1a1c <floor+0xf4>)
    19ea:	4333      	orrs	r3, r6
    19ec:	2600      	movs	r6, #0
    19ee:	42b3      	cmp	r3, r6
    19f0:	bf18      	it	ne
    19f2:	4614      	movne	r4, r2
    19f4:	e7bf      	b.n	1976 <floor+0x4e>
    19f6:	2d14      	cmp	r5, #20
    19f8:	d008      	beq.n	1a0c <floor+0xe4>
    19fa:	2201      	movs	r2, #1
    19fc:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a00:	fa02 f303 	lsl.w	r3, r2, r3
    1a04:	199e      	adds	r6, r3, r6
    1a06:	bf28      	it	cs
    1a08:	18a4      	addcs	r4, r4, r2
    1a0a:	e7d8      	b.n	19be <floor+0x96>
    1a0c:	3401      	adds	r4, #1
    1a0e:	e7d6      	b.n	19be <floor+0x96>
    1a10:	8800759c 	.word	0x8800759c
    1a14:	7e37e43c 	.word	0x7e37e43c
    1a18:	000fffff 	.word	0x000fffff
    1a1c:	bff00000 	.word	0xbff00000

00001a20 <_dtoa_r>:
    1a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a24:	4616      	mov	r6, r2
    1a26:	b099      	sub	sp, #100	; 0x64
    1a28:	461f      	mov	r7, r3
    1a2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a2c:	4605      	mov	r5, r0
    1a2e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a32:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a36:	b93c      	cbnz	r4, 1a48 <_dtoa_r+0x28>
    1a38:	2010      	movs	r0, #16
    1a3a:	f00e ff71 	bl	10920 <malloc>
    1a3e:	6268      	str	r0, [r5, #36]	; 0x24
    1a40:	6004      	str	r4, [r0, #0]
    1a42:	60c4      	str	r4, [r0, #12]
    1a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a4a:	6819      	ldr	r1, [r3, #0]
    1a4c:	b151      	cbz	r1, 1a64 <_dtoa_r+0x44>
    1a4e:	685a      	ldr	r2, [r3, #4]
    1a50:	2301      	movs	r3, #1
    1a52:	4628      	mov	r0, r5
    1a54:	4093      	lsls	r3, r2
    1a56:	604a      	str	r2, [r1, #4]
    1a58:	608b      	str	r3, [r1, #8]
    1a5a:	f014 fe05 	bl	16668 <_Bfree>
    1a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a60:	2200      	movs	r2, #0
    1a62:	601a      	str	r2, [r3, #0]
    1a64:	1e3b      	subs	r3, r7, #0
    1a66:	bfb7      	itett	lt
    1a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1a6c:	2300      	movge	r3, #0
    1a6e:	2201      	movlt	r2, #1
    1a70:	9305      	strlt	r3, [sp, #20]
    1a72:	bfa8      	it	ge
    1a74:	f8c8 3000 	strge.w	r3, [r8]
    1a78:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1a7c:	4bac      	ldr	r3, [pc, #688]	; (1d30 <_dtoa_r+0x310>)
    1a7e:	bfb8      	it	lt
    1a80:	f8c8 2000 	strlt.w	r2, [r8]
    1a84:	ea33 0309 	bics.w	r3, r3, r9
    1a88:	d119      	bne.n	1abe <_dtoa_r+0x9e>
    1a8a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1a90:	6013      	str	r3, [r2, #0]
    1a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1a96:	4333      	orrs	r3, r6
    1a98:	f000 856a 	beq.w	2570 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x570>
    1a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1a9e:	b953      	cbnz	r3, 1ab6 <_dtoa_r+0x96>
    1aa0:	4ba4      	ldr	r3, [pc, #656]	; (1d34 <_dtoa_r+0x314>)
    1aa2:	e023      	b.n	1aec <_dtoa_r+0xcc>
    1aa4:	4ba4      	ldr	r3, [pc, #656]	; (1d38 <_dtoa_r+0x318>)
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	3308      	adds	r3, #8
    1aaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aac:	6013      	str	r3, [r2, #0]
    1aae:	9803      	ldr	r0, [sp, #12]
    1ab0:	b019      	add	sp, #100	; 0x64
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	4b9f      	ldr	r3, [pc, #636]	; (1d34 <_dtoa_r+0x314>)
    1ab8:	9303      	str	r3, [sp, #12]
    1aba:	3303      	adds	r3, #3
    1abc:	e7f5      	b.n	1aaa <_dtoa_r+0x8a>
    1abe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1ac2:	2200      	movs	r2, #0
    1ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1acc:	2300      	movs	r3, #0
    1ace:	f7fe ff67 	bl	9a0 <__aeabi_dcmpeq>
    1ad2:	4680      	mov	r8, r0
    1ad4:	b160      	cbz	r0, 1af0 <_dtoa_r+0xd0>
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1ada:	6013      	str	r3, [r2, #0]
    1adc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f000 8543 	beq.w	256a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56a>
    1ae4:	4b95      	ldr	r3, [pc, #596]	; (1d3c <_dtoa_r+0x31c>)
    1ae6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ae8:	6013      	str	r3, [r2, #0]
    1aea:	3b01      	subs	r3, #1
    1aec:	9303      	str	r3, [sp, #12]
    1aee:	e7de      	b.n	1aae <_dtoa_r+0x8e>
    1af0:	ab16      	add	r3, sp, #88	; 0x58
    1af2:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1af6:	4628      	mov	r0, r5
    1af8:	9301      	str	r3, [sp, #4]
    1afa:	ab17      	add	r3, sp, #92	; 0x5c
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b02:	f014 fff0 	bl	16ae6 <__d2b>
    1b06:	4683      	mov	fp, r0
    1b08:	2c00      	cmp	r4, #0
    1b0a:	d07c      	beq.n	1c06 <_dtoa_r+0x1e6>
    1b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b12:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b26:	2200      	movs	r2, #0
    1b28:	4b85      	ldr	r3, [pc, #532]	; (1d40 <_dtoa_r+0x320>)
    1b2a:	f7fe fb19 	bl	160 <__aeabi_dsub>
    1b2e:	a37a      	add	r3, pc, #488	; (adr r3, 1d18 <_dtoa_r+0x2f8>)
    1b30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b34:	f7fe fccc 	bl	4d0 <__aeabi_dmul>
    1b38:	a379      	add	r3, pc, #484	; (adr r3, 1d20 <_dtoa_r+0x300>)
    1b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b3e:	f7fe fb11 	bl	164 <__adddf3>
    1b42:	4606      	mov	r6, r0
    1b44:	460f      	mov	r7, r1
    1b46:	4620      	mov	r0, r4
    1b48:	f7fe fc58 	bl	3fc <__aeabi_i2d>
    1b4c:	a376      	add	r3, pc, #472	; (adr r3, 1d28 <_dtoa_r+0x308>)
    1b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b52:	f7fe fcbd 	bl	4d0 <__aeabi_dmul>
    1b56:	4602      	mov	r2, r0
    1b58:	460b      	mov	r3, r1
    1b5a:	4630      	mov	r0, r6
    1b5c:	4639      	mov	r1, r7
    1b5e:	f7fe fb01 	bl	164 <__adddf3>
    1b62:	4606      	mov	r6, r0
    1b64:	460f      	mov	r7, r1
    1b66:	f7fe ff4d 	bl	a04 <__aeabi_d2iz>
    1b6a:	2200      	movs	r2, #0
    1b6c:	4682      	mov	sl, r0
    1b6e:	2300      	movs	r3, #0
    1b70:	4630      	mov	r0, r6
    1b72:	4639      	mov	r1, r7
    1b74:	f7fe ff1e 	bl	9b4 <__aeabi_dcmplt>
    1b78:	b148      	cbz	r0, 1b8e <_dtoa_r+0x16e>
    1b7a:	4650      	mov	r0, sl
    1b7c:	f7fe fc3e 	bl	3fc <__aeabi_i2d>
    1b80:	4632      	mov	r2, r6
    1b82:	463b      	mov	r3, r7
    1b84:	f7fe ff0c 	bl	9a0 <__aeabi_dcmpeq>
    1b88:	b908      	cbnz	r0, 1b8e <_dtoa_r+0x16e>
    1b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    1b8e:	f1ba 0f16 	cmp.w	sl, #22
    1b92:	d856      	bhi.n	1c42 <_dtoa_r+0x222>
    1b94:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <_dtoa_r+0x324>)
    1b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba2:	f7fe ff07 	bl	9b4 <__aeabi_dcmplt>
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d04d      	beq.n	1c46 <_dtoa_r+0x226>
    1baa:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bae:	2300      	movs	r3, #0
    1bb0:	930f      	str	r3, [sp, #60]	; 0x3c
    1bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bb4:	1b1c      	subs	r4, r3, r4
    1bb6:	1e63      	subs	r3, r4, #1
    1bb8:	9309      	str	r3, [sp, #36]	; 0x24
    1bba:	bf49      	itett	mi
    1bbc:	f1c4 0301 	rsbmi	r3, r4, #1
    1bc0:	2300      	movpl	r3, #0
    1bc2:	9306      	strmi	r3, [sp, #24]
    1bc4:	2300      	movmi	r3, #0
    1bc6:	bf54      	ite	pl
    1bc8:	9306      	strpl	r3, [sp, #24]
    1bca:	9309      	strmi	r3, [sp, #36]	; 0x24
    1bcc:	f1ba 0f00 	cmp.w	sl, #0
    1bd0:	db3b      	blt.n	1c4a <_dtoa_r+0x22a>
    1bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1bd8:	4453      	add	r3, sl
    1bda:	9309      	str	r3, [sp, #36]	; 0x24
    1bdc:	2300      	movs	r3, #0
    1bde:	930a      	str	r3, [sp, #40]	; 0x28
    1be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1be2:	2b09      	cmp	r3, #9
    1be4:	f200 80b4 	bhi.w	1d50 <_dtoa_r+0x330>
    1be8:	2b05      	cmp	r3, #5
    1bea:	bfc5      	ittet	gt
    1bec:	3b04      	subgt	r3, #4
    1bee:	2400      	movgt	r4, #0
    1bf0:	2401      	movle	r4, #1
    1bf2:	9322      	strgt	r3, [sp, #136]	; 0x88
    1bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bf6:	3b02      	subs	r3, #2
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	f200 80b5 	bhi.w	1d68 <_dtoa_r+0x348>
    1bfe:	e8df f003 	tbb	[pc, r3]
    1c02:	7d2e      	.short	0x7d2e
    1c04:	a57b      	.short	0xa57b
    1c06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c0a:	441c      	add	r4, r3
    1c0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c10:	2b20      	cmp	r3, #32
    1c12:	bfc6      	itte	gt
    1c14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c1c:	f1c3 0320 	rsble	r3, r3, #32
    1c20:	f104 34ff 	add.w	r4, r4, #4294967295
    1c24:	bfc5      	ittet	gt
    1c26:	fa09 f303 	lslgt.w	r3, r9, r3
    1c2a:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c2e:	fa06 f003 	lslle.w	r0, r6, r3
    1c32:	4318      	orrgt	r0, r3
    1c34:	f7fe fbd2 	bl	3dc <__aeabi_ui2d>
    1c38:	2301      	movs	r3, #1
    1c3a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c3e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c40:	e771      	b.n	1b26 <_dtoa_r+0x106>
    1c42:	2301      	movs	r3, #1
    1c44:	e7b4      	b.n	1bb0 <_dtoa_r+0x190>
    1c46:	900f      	str	r0, [sp, #60]	; 0x3c
    1c48:	e7b3      	b.n	1bb2 <_dtoa_r+0x192>
    1c4a:	9b06      	ldr	r3, [sp, #24]
    1c4c:	eba3 030a 	sub.w	r3, r3, sl
    1c50:	9306      	str	r3, [sp, #24]
    1c52:	f1ca 0300 	rsb	r3, sl, #0
    1c56:	930a      	str	r3, [sp, #40]	; 0x28
    1c58:	2300      	movs	r3, #0
    1c5a:	930e      	str	r3, [sp, #56]	; 0x38
    1c5c:	e7c0      	b.n	1be0 <_dtoa_r+0x1c0>
    1c5e:	2300      	movs	r3, #0
    1c60:	930b      	str	r3, [sp, #44]	; 0x2c
    1c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c64:	2b00      	cmp	r3, #0
    1c66:	f300 8082 	bgt.w	1d6e <_dtoa_r+0x34e>
    1c6a:	f04f 0901 	mov.w	r9, #1
    1c6e:	464b      	mov	r3, r9
    1c70:	f8cd 9020 	str.w	r9, [sp, #32]
    1c74:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1c78:	2200      	movs	r2, #0
    1c7a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1c7c:	6072      	str	r2, [r6, #4]
    1c7e:	2204      	movs	r2, #4
    1c80:	f102 0014 	add.w	r0, r2, #20
    1c84:	6871      	ldr	r1, [r6, #4]
    1c86:	4298      	cmp	r0, r3
    1c88:	d977      	bls.n	1d7a <_dtoa_r+0x35a>
    1c8a:	4628      	mov	r0, r5
    1c8c:	f014 fcb8 	bl	16600 <_Balloc>
    1c90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c92:	6030      	str	r0, [r6, #0]
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	9303      	str	r3, [sp, #12]
    1c98:	9b08      	ldr	r3, [sp, #32]
    1c9a:	2b0e      	cmp	r3, #14
    1c9c:	f200 80ee 	bhi.w	1e7c <_dtoa_r+0x45c>
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	f000 80eb 	beq.w	1e7c <_dtoa_r+0x45c>
    1ca6:	f1ba 0f00 	cmp.w	sl, #0
    1caa:	dd7a      	ble.n	1da2 <_dtoa_r+0x382>
    1cac:	f00a 030f 	and.w	r3, sl, #15
    1cb0:	4a24      	ldr	r2, [pc, #144]	; (1d44 <_dtoa_r+0x324>)
    1cb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cba:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cbe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1cc2:	ea4f 142a 	mov.w	r4, sl, asr #4
    1cc6:	d05c      	beq.n	1d82 <_dtoa_r+0x362>
    1cc8:	4b1f      	ldr	r3, [pc, #124]	; (1d48 <_dtoa_r+0x328>)
    1cca:	f004 040f 	and.w	r4, r4, #15
    1cce:	2703      	movs	r7, #3
    1cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1cd8:	f7fe fd24 	bl	724 <__aeabi_ddiv>
    1cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1ce0:	4e19      	ldr	r6, [pc, #100]	; (1d48 <_dtoa_r+0x328>)
    1ce2:	2c00      	cmp	r4, #0
    1ce4:	d14f      	bne.n	1d86 <_dtoa_r+0x366>
    1ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1cee:	f7fe fd19 	bl	724 <__aeabi_ddiv>
    1cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1cf6:	e06e      	b.n	1dd6 <_dtoa_r+0x3b6>
    1cf8:	2301      	movs	r3, #1
    1cfa:	e7b1      	b.n	1c60 <_dtoa_r+0x240>
    1cfc:	2300      	movs	r3, #0
    1cfe:	930b      	str	r3, [sp, #44]	; 0x2c
    1d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d02:	eb0a 0903 	add.w	r9, sl, r3
    1d06:	f109 0301 	add.w	r3, r9, #1
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	9308      	str	r3, [sp, #32]
    1d0e:	bfb8      	it	lt
    1d10:	2301      	movlt	r3, #1
    1d12:	e7b1      	b.n	1c78 <_dtoa_r+0x258>
    1d14:	f3af 8000 	nop.w
    1d18:	636f4361 	.word	0x636f4361
    1d1c:	3fd287a7 	.word	0x3fd287a7
    1d20:	8b60c8b3 	.word	0x8b60c8b3
    1d24:	3fc68a28 	.word	0x3fc68a28
    1d28:	509f79fb 	.word	0x509f79fb
    1d2c:	3fd34413 	.word	0x3fd34413
    1d30:	7ff00000 	.word	0x7ff00000
    1d34:	0006bd77 	.word	0x0006bd77
    1d38:	0006bd6e 	.word	0x0006bd6e
    1d3c:	0006bd4b 	.word	0x0006bd4b
    1d40:	3ff80000 	.word	0x3ff80000
    1d44:	000686d8 	.word	0x000686d8
    1d48:	000686b0 	.word	0x000686b0
    1d4c:	2301      	movs	r3, #1
    1d4e:	e7d6      	b.n	1cfe <_dtoa_r+0x2de>
    1d50:	2401      	movs	r4, #1
    1d52:	2300      	movs	r3, #0
    1d54:	940b      	str	r4, [sp, #44]	; 0x2c
    1d56:	9322      	str	r3, [sp, #136]	; 0x88
    1d58:	f04f 39ff 	mov.w	r9, #4294967295
    1d5c:	2200      	movs	r2, #0
    1d5e:	2312      	movs	r3, #18
    1d60:	f8cd 9020 	str.w	r9, [sp, #32]
    1d64:	9223      	str	r2, [sp, #140]	; 0x8c
    1d66:	e787      	b.n	1c78 <_dtoa_r+0x258>
    1d68:	2301      	movs	r3, #1
    1d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    1d6c:	e7f4      	b.n	1d58 <_dtoa_r+0x338>
    1d6e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1d72:	464b      	mov	r3, r9
    1d74:	f8cd 9020 	str.w	r9, [sp, #32]
    1d78:	e77e      	b.n	1c78 <_dtoa_r+0x258>
    1d7a:	3101      	adds	r1, #1
    1d7c:	0052      	lsls	r2, r2, #1
    1d7e:	6071      	str	r1, [r6, #4]
    1d80:	e77e      	b.n	1c80 <_dtoa_r+0x260>
    1d82:	2702      	movs	r7, #2
    1d84:	e7ac      	b.n	1ce0 <_dtoa_r+0x2c0>
    1d86:	07e1      	lsls	r1, r4, #31
    1d88:	d508      	bpl.n	1d9c <_dtoa_r+0x37c>
    1d8a:	3701      	adds	r7, #1
    1d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1d90:	e9d6 2300 	ldrd	r2, r3, [r6]
    1d94:	f7fe fb9c 	bl	4d0 <__aeabi_dmul>
    1d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1d9c:	1064      	asrs	r4, r4, #1
    1d9e:	3608      	adds	r6, #8
    1da0:	e79f      	b.n	1ce2 <_dtoa_r+0x2c2>
    1da2:	f000 80a5 	beq.w	1ef0 <_dtoa_r+0x4d0>
    1da6:	f1ca 0400 	rsb	r4, sl, #0
    1daa:	4ba3      	ldr	r3, [pc, #652]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1dac:	4ea3      	ldr	r6, [pc, #652]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    1dae:	2702      	movs	r7, #2
    1db0:	f004 020f 	and.w	r2, r4, #15
    1db4:	1124      	asrs	r4, r4, #4
    1db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dc2:	f7fe fb85 	bl	4d0 <__aeabi_dmul>
    1dc6:	2300      	movs	r3, #0
    1dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1dcc:	2c00      	cmp	r4, #0
    1dce:	f040 8084 	bne.w	1eda <_dtoa_r+0x4ba>
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d18d      	bne.n	1cf2 <_dtoa_r+0x2d2>
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	2b00      	cmp	r3, #0
    1dda:	f000 808b 	beq.w	1ef4 <_dtoa_r+0x4d4>
    1dde:	2200      	movs	r2, #0
    1de0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dec:	4b94      	ldr	r3, [pc, #592]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1dee:	f7fe fde1 	bl	9b4 <__aeabi_dcmplt>
    1df2:	2800      	cmp	r0, #0
    1df4:	d07e      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1df6:	9b08      	ldr	r3, [sp, #32]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d07b      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1dfc:	f1b9 0f00 	cmp.w	r9, #0
    1e00:	dd38      	ble.n	1e74 <_dtoa_r+0x454>
    1e02:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e06:	3701      	adds	r7, #1
    1e08:	464c      	mov	r4, r9
    1e0a:	2200      	movs	r2, #0
    1e0c:	4b8d      	ldr	r3, [pc, #564]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e12:	f7fe fb5d 	bl	4d0 <__aeabi_dmul>
    1e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e1a:	4638      	mov	r0, r7
    1e1c:	f7fe faee 	bl	3fc <__aeabi_i2d>
    1e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e24:	f7fe fb54 	bl	4d0 <__aeabi_dmul>
    1e28:	2200      	movs	r2, #0
    1e2a:	4b87      	ldr	r3, [pc, #540]	; (2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>)
    1e2c:	f7fe f99a 	bl	164 <__adddf3>
    1e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e38:	9611      	str	r6, [sp, #68]	; 0x44
    1e3a:	2c00      	cmp	r4, #0
    1e3c:	d15d      	bne.n	1efa <_dtoa_r+0x4da>
    1e3e:	2200      	movs	r2, #0
    1e40:	4b82      	ldr	r3, [pc, #520]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e46:	f7fe f98b 	bl	160 <__aeabi_dsub>
    1e4a:	4602      	mov	r2, r0
    1e4c:	460b      	mov	r3, r1
    1e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e54:	4633      	mov	r3, r6
    1e56:	f7fe fdcb 	bl	9f0 <__aeabi_dcmpgt>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f040 8294 	bne.w	2388 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x388>
    1e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e6a:	f7fe fda3 	bl	9b4 <__aeabi_dcmplt>
    1e6e:	2800      	cmp	r0, #0
    1e70:	f040 8288 	bne.w	2384 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x384>
    1e74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1e7e:	2b00      	cmp	r3, #0
    1e80:	f2c0 814f 	blt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e84:	f1ba 0f0e 	cmp.w	sl, #14
    1e88:	f300 814b 	bgt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e8c:	4b6a      	ldr	r3, [pc, #424]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1e92:	e9d3 3400 	ldrd	r3, r4, [r3]
    1e96:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	f280 80d9 	bge.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1ea2:	9b08      	ldr	r3, [sp, #32]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f300 80d5 	bgt.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1eaa:	f040 826a 	bne.w	2382 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x382>
    1eae:	2200      	movs	r2, #0
    1eb0:	4b66      	ldr	r3, [pc, #408]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1eb6:	f7fe fb0b 	bl	4d0 <__aeabi_dmul>
    1eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ebe:	f7fe fd8d 	bl	9dc <__aeabi_dcmpge>
    1ec2:	9c08      	ldr	r4, [sp, #32]
    1ec4:	4626      	mov	r6, r4
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f040 8240 	bne.w	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    1ecc:	9f03      	ldr	r7, [sp, #12]
    1ece:	2331      	movs	r3, #49	; 0x31
    1ed0:	f10a 0a01 	add.w	sl, sl, #1
    1ed4:	f807 3b01 	strb.w	r3, [r7], #1
    1ed8:	e23c      	b.n	2354 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x354>
    1eda:	07e2      	lsls	r2, r4, #31
    1edc:	d505      	bpl.n	1eea <_dtoa_r+0x4ca>
    1ede:	3701      	adds	r7, #1
    1ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
    1ee4:	f7fe faf4 	bl	4d0 <__aeabi_dmul>
    1ee8:	2301      	movs	r3, #1
    1eea:	1064      	asrs	r4, r4, #1
    1eec:	3608      	adds	r6, #8
    1eee:	e76d      	b.n	1dcc <_dtoa_r+0x3ac>
    1ef0:	2702      	movs	r7, #2
    1ef2:	e770      	b.n	1dd6 <_dtoa_r+0x3b6>
    1ef4:	46d0      	mov	r8, sl
    1ef6:	9c08      	ldr	r4, [sp, #32]
    1ef8:	e78f      	b.n	1e1a <_dtoa_r+0x3fa>
    1efa:	9903      	ldr	r1, [sp, #12]
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1efe:	4421      	add	r1, r4
    1f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f04:	9112      	str	r1, [sp, #72]	; 0x48
    1f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f10:	2900      	cmp	r1, #0
    1f12:	d046      	beq.n	1fa2 <_dtoa_r+0x582>
    1f14:	2000      	movs	r0, #0
    1f16:	494e      	ldr	r1, [pc, #312]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1f18:	f7fe fc04 	bl	724 <__aeabi_ddiv>
    1f1c:	463b      	mov	r3, r7
    1f1e:	4632      	mov	r2, r6
    1f20:	f7fe f91e 	bl	160 <__aeabi_dsub>
    1f24:	9f03      	ldr	r7, [sp, #12]
    1f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f2e:	f7fe fd69 	bl	a04 <__aeabi_d2iz>
    1f32:	4604      	mov	r4, r0
    1f34:	f7fe fa62 	bl	3fc <__aeabi_i2d>
    1f38:	4602      	mov	r2, r0
    1f3a:	460b      	mov	r3, r1
    1f3c:	3430      	adds	r4, #48	; 0x30
    1f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f42:	f7fe f90d 	bl	160 <__aeabi_dsub>
    1f46:	4602      	mov	r2, r0
    1f48:	460b      	mov	r3, r1
    1f4a:	f807 4b01 	strb.w	r4, [r7], #1
    1f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f56:	f7fe fd2d 	bl	9b4 <__aeabi_dcmplt>
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d164      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    1f5e:	2000      	movs	r0, #0
    1f60:	4937      	ldr	r1, [pc, #220]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f66:	f7fe f8fb 	bl	160 <__aeabi_dsub>
    1f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f6e:	f7fe fd21 	bl	9b4 <__aeabi_dcmplt>
    1f72:	2800      	cmp	r0, #0
    1f74:	f040 80b4 	bne.w	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    1f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f7a:	429f      	cmp	r7, r3
    1f7c:	f43f af7a 	beq.w	1e74 <_dtoa_r+0x454>
    1f80:	2200      	movs	r2, #0
    1f82:	4b30      	ldr	r3, [pc, #192]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f88:	f7fe faa2 	bl	4d0 <__aeabi_dmul>
    1f8c:	2200      	movs	r2, #0
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f98:	f7fe fa9a 	bl	4d0 <__aeabi_dmul>
    1f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fa0:	e7c3      	b.n	1f2a <_dtoa_r+0x50a>
    1fa2:	4630      	mov	r0, r6
    1fa4:	4639      	mov	r1, r7
    1fa6:	f7fe fa93 	bl	4d0 <__aeabi_dmul>
    1faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fac:	9c03      	ldr	r4, [sp, #12]
    1fae:	9314      	str	r3, [sp, #80]	; 0x50
    1fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fb8:	f7fe fd24 	bl	a04 <__aeabi_d2iz>
    1fbc:	9015      	str	r0, [sp, #84]	; 0x54
    1fbe:	f7fe fa1d 	bl	3fc <__aeabi_i2d>
    1fc2:	4602      	mov	r2, r0
    1fc4:	460b      	mov	r3, r1
    1fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fca:	f7fe f8c9 	bl	160 <__aeabi_dsub>
    1fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1fd0:	4606      	mov	r6, r0
    1fd2:	460f      	mov	r7, r1
    1fd4:	3330      	adds	r3, #48	; 0x30
    1fd6:	2200      	movs	r2, #0
    1fd8:	f804 3b01 	strb.w	r3, [r4], #1
    1fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fde:	429c      	cmp	r4, r3
    1fe0:	d124      	bne.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fe8:	f7fe f8bc 	bl	164 <__adddf3>
    1fec:	4602      	mov	r2, r0
    1fee:	460b      	mov	r3, r1
    1ff0:	4630      	mov	r0, r6
    1ff2:	4639      	mov	r1, r7
    1ff4:	f7fe fcfc 	bl	9f0 <__aeabi_dcmpgt>
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d170      	bne.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
    1ffc:	2000      	movs	r0, #0
    1ffe:	4914      	ldr	r1, [pc, #80]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    2000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2004:	f7fe f8ac 	bl	160 <__aeabi_dsub>
    2008:	4602      	mov	r2, r0
    200a:	460b      	mov	r3, r1
    200c:	4630      	mov	r0, r6
    200e:	4639      	mov	r1, r7
    2010:	f7fe fcd0 	bl	9b4 <__aeabi_dcmplt>
    2014:	2800      	cmp	r0, #0
    2016:	f43f af2d 	beq.w	1e74 <_dtoa_r+0x454>
    201a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    201c:	1e7b      	subs	r3, r7, #1
    201e:	9314      	str	r3, [sp, #80]	; 0x50
    2020:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2024:	2b30      	cmp	r3, #48	; 0x30
    2026:	d0f8      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    2028:	46c2      	mov	sl, r8
    202a:	e048      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    202e:	f7fe fa4f 	bl	4d0 <__aeabi_dmul>
    2032:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2036:	e7bd      	b.n	1fb4 <_dtoa_r+0x594>
    2038:	000686d8 	.word	0x000686d8
    203c:	000686b0 	.word	0x000686b0
    2040:	3ff00000 	.word	0x3ff00000
    2044:	40240000 	.word	0x40240000
    2048:	401c0000 	.word	0x401c0000
    204c:	40140000 	.word	0x40140000
    2050:	3fe00000 	.word	0x3fe00000
    2054:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2058:	9f03      	ldr	r7, [sp, #12]
    205a:	4640      	mov	r0, r8
    205c:	4649      	mov	r1, r9
    205e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2062:	f7fe fb5f 	bl	724 <__aeabi_ddiv>
    2066:	f7fe fccd 	bl	a04 <__aeabi_d2iz>
    206a:	4604      	mov	r4, r0
    206c:	f7fe f9c6 	bl	3fc <__aeabi_i2d>
    2070:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2078:	f7fe fa2a 	bl	4d0 <__aeabi_dmul>
    207c:	460b      	mov	r3, r1
    207e:	4602      	mov	r2, r0
    2080:	4649      	mov	r1, r9
    2082:	4640      	mov	r0, r8
    2084:	f7fe f86c 	bl	160 <__aeabi_dsub>
    2088:	f807 6b01 	strb.w	r6, [r7], #1
    208c:	9e03      	ldr	r6, [sp, #12]
    208e:	9b08      	ldr	r3, [sp, #32]
    2090:	1bbe      	subs	r6, r7, r6
    2092:	42b3      	cmp	r3, r6
    2094:	d138      	bne.n	2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>
    2096:	4602      	mov	r2, r0
    2098:	460b      	mov	r3, r1
    209a:	f7fe f863 	bl	164 <__adddf3>
    209e:	4680      	mov	r8, r0
    20a0:	4689      	mov	r9, r1
    20a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a6:	f7fe fca3 	bl	9f0 <__aeabi_dcmpgt>
    20aa:	bb58      	cbnz	r0, 2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20ac:	4640      	mov	r0, r8
    20ae:	4649      	mov	r1, r9
    20b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b4:	f7fe fc74 	bl	9a0 <__aeabi_dcmpeq>
    20b8:	b108      	cbz	r0, 20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    20ba:	07e1      	lsls	r1, r4, #31
    20bc:	d422      	bmi.n	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20be:	4628      	mov	r0, r5
    20c0:	4659      	mov	r1, fp
    20c2:	f014 fad1 	bl	16668 <_Bfree>
    20c6:	2300      	movs	r3, #0
    20c8:	f10a 0001 	add.w	r0, sl, #1
    20cc:	703b      	strb	r3, [r7, #0]
    20ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    20d0:	6018      	str	r0, [r3, #0]
    20d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20d4:	2b00      	cmp	r3, #0
    20d6:	f43f acea 	beq.w	1aae <_dtoa_r+0x8e>
    20da:	601f      	str	r7, [r3, #0]
    20dc:	e4e7      	b.n	1aae <_dtoa_r+0x8e>
    20de:	4627      	mov	r7, r4
    20e0:	463b      	mov	r3, r7
    20e2:	461f      	mov	r7, r3
    20e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20e8:	2a39      	cmp	r2, #57	; 0x39
    20ea:	d107      	bne.n	20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>
    20ec:	9a03      	ldr	r2, [sp, #12]
    20ee:	429a      	cmp	r2, r3
    20f0:	d1f7      	bne.n	20e2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe2>
    20f2:	2230      	movs	r2, #48	; 0x30
    20f4:	9903      	ldr	r1, [sp, #12]
    20f6:	f108 0801 	add.w	r8, r8, #1
    20fa:	700a      	strb	r2, [r1, #0]
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	3201      	adds	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
    2102:	e791      	b.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    2104:	46d0      	mov	r8, sl
    2106:	e7eb      	b.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    2108:	2200      	movs	r2, #0
    210a:	4ba1      	ldr	r3, [pc, #644]	; (2390 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x390>)
    210c:	f7fe f9e0 	bl	4d0 <__aeabi_dmul>
    2110:	2200      	movs	r2, #0
    2112:	2300      	movs	r3, #0
    2114:	4680      	mov	r8, r0
    2116:	4689      	mov	r9, r1
    2118:	f7fe fc42 	bl	9a0 <__aeabi_dcmpeq>
    211c:	2800      	cmp	r0, #0
    211e:	d09c      	beq.n	205a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5a>
    2120:	e7cd      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2124:	2a00      	cmp	r2, #0
    2126:	f000 80cc 	beq.w	22c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c2>
    212a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    212c:	2a01      	cmp	r2, #1
    212e:	f300 80af 	bgt.w	2290 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x290>
    2132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2134:	2a00      	cmp	r2, #0
    2136:	f000 80a7 	beq.w	2288 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x288>
    213a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    213e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2140:	9f06      	ldr	r7, [sp, #24]
    2142:	9a06      	ldr	r2, [sp, #24]
    2144:	2101      	movs	r1, #1
    2146:	4628      	mov	r0, r5
    2148:	441a      	add	r2, r3
    214a:	9206      	str	r2, [sp, #24]
    214c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    214e:	441a      	add	r2, r3
    2150:	9209      	str	r2, [sp, #36]	; 0x24
    2152:	f014 fb2d 	bl	167b0 <__i2b>
    2156:	4606      	mov	r6, r0
    2158:	2f00      	cmp	r7, #0
    215a:	dd0c      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    215e:	2b00      	cmp	r3, #0
    2160:	dd09      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    2162:	42bb      	cmp	r3, r7
    2164:	9a06      	ldr	r2, [sp, #24]
    2166:	bfa8      	it	ge
    2168:	463b      	movge	r3, r7
    216a:	1ad2      	subs	r2, r2, r3
    216c:	1aff      	subs	r7, r7, r3
    216e:	9206      	str	r2, [sp, #24]
    2170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2172:	1ad3      	subs	r3, r2, r3
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2178:	b1f3      	cbz	r3, 21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    217a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    217c:	2b00      	cmp	r3, #0
    217e:	f000 80a4 	beq.w	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
    2182:	2c00      	cmp	r4, #0
    2184:	dd10      	ble.n	21a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a8>
    2186:	4631      	mov	r1, r6
    2188:	4622      	mov	r2, r4
    218a:	4628      	mov	r0, r5
    218c:	f00f fc7c 	bl	11a88 <__pow5mult>
    2190:	465a      	mov	r2, fp
    2192:	4601      	mov	r1, r0
    2194:	4606      	mov	r6, r0
    2196:	4628      	mov	r0, r5
    2198:	f014 fb13 	bl	167c2 <__multiply>
    219c:	4680      	mov	r8, r0
    219e:	4659      	mov	r1, fp
    21a0:	4628      	mov	r0, r5
    21a2:	46c3      	mov	fp, r8
    21a4:	f014 fa60 	bl	16668 <_Bfree>
    21a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21aa:	1b1a      	subs	r2, r3, r4
    21ac:	d004      	beq.n	21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    21ae:	4659      	mov	r1, fp
    21b0:	4628      	mov	r0, r5
    21b2:	f00f fc69 	bl	11a88 <__pow5mult>
    21b6:	4683      	mov	fp, r0
    21b8:	2101      	movs	r1, #1
    21ba:	4628      	mov	r0, r5
    21bc:	f014 faf8 	bl	167b0 <__i2b>
    21c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21c2:	4604      	mov	r4, r0
    21c4:	2b00      	cmp	r3, #0
    21c6:	f340 8082 	ble.w	22ce <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ce>
    21ca:	461a      	mov	r2, r3
    21cc:	4601      	mov	r1, r0
    21ce:	4628      	mov	r0, r5
    21d0:	f00f fc5a 	bl	11a88 <__pow5mult>
    21d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    21d6:	4604      	mov	r4, r0
    21d8:	2b01      	cmp	r3, #1
    21da:	dd7b      	ble.n	22d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d4>
    21dc:	f04f 0800 	mov.w	r8, #0
    21e0:	6923      	ldr	r3, [r4, #16]
    21e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    21e6:	6918      	ldr	r0, [r3, #16]
    21e8:	f014 fa94 	bl	16714 <__hi0bits>
    21ec:	f1c0 0020 	rsb	r0, r0, #32
    21f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f2:	4418      	add	r0, r3
    21f4:	f010 001f 	ands.w	r0, r0, #31
    21f8:	f000 808d 	beq.w	2316 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x316>
    21fc:	f1c0 0320 	rsb	r3, r0, #32
    2200:	2b04      	cmp	r3, #4
    2202:	f340 8086 	ble.w	2312 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x312>
    2206:	f1c0 001c 	rsb	r0, r0, #28
    220a:	9b06      	ldr	r3, [sp, #24]
    220c:	4407      	add	r7, r0
    220e:	4403      	add	r3, r0
    2210:	9306      	str	r3, [sp, #24]
    2212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2214:	4403      	add	r3, r0
    2216:	9309      	str	r3, [sp, #36]	; 0x24
    2218:	9b06      	ldr	r3, [sp, #24]
    221a:	2b00      	cmp	r3, #0
    221c:	dd05      	ble.n	222a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22a>
    221e:	4659      	mov	r1, fp
    2220:	461a      	mov	r2, r3
    2222:	4628      	mov	r0, r5
    2224:	f014 fb68 	bl	168f8 <__lshift>
    2228:	4683      	mov	fp, r0
    222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    222c:	2b00      	cmp	r3, #0
    222e:	dd05      	ble.n	223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    2230:	4621      	mov	r1, r4
    2232:	461a      	mov	r2, r3
    2234:	4628      	mov	r0, r5
    2236:	f014 fb5f 	bl	168f8 <__lshift>
    223a:	4604      	mov	r4, r0
    223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    223e:	2b00      	cmp	r3, #0
    2240:	d06b      	beq.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    2242:	4621      	mov	r1, r4
    2244:	4658      	mov	r0, fp
    2246:	f014 fbb6 	bl	169b6 <__mcmp>
    224a:	2800      	cmp	r0, #0
    224c:	da65      	bge.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    224e:	2300      	movs	r3, #0
    2250:	4659      	mov	r1, fp
    2252:	220a      	movs	r2, #10
    2254:	4628      	mov	r0, r5
    2256:	f014 fa1e 	bl	16696 <__multadd>
    225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    225c:	f10a 3aff 	add.w	sl, sl, #4294967295
    2260:	4683      	mov	fp, r0
    2262:	2b00      	cmp	r3, #0
    2264:	f000 818b 	beq.w	257e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x57e>
    2268:	4631      	mov	r1, r6
    226a:	2300      	movs	r3, #0
    226c:	220a      	movs	r2, #10
    226e:	4628      	mov	r0, r5
    2270:	f014 fa11 	bl	16696 <__multadd>
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	4606      	mov	r6, r0
    227a:	f300 8091 	bgt.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    227e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2280:	2b02      	cmp	r3, #2
    2282:	f340 808d 	ble.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    2286:	e050      	b.n	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    2288:	9b16      	ldr	r3, [sp, #88]	; 0x58
    228a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    228e:	e756      	b.n	213e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13e>
    2290:	9b08      	ldr	r3, [sp, #32]
    2292:	1e5c      	subs	r4, r3, #1
    2294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2296:	42a3      	cmp	r3, r4
    2298:	bfb7      	itett	lt
    229a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    229c:	1b1c      	subge	r4, r3, r4
    229e:	940a      	strlt	r4, [sp, #40]	; 0x28
    22a0:	1ae2      	sublt	r2, r4, r3
    22a2:	bfbf      	itttt	lt
    22a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22a6:	2400      	movlt	r4, #0
    22a8:	189b      	addlt	r3, r3, r2
    22aa:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	2b00      	cmp	r3, #0
    22b0:	bfbb      	ittet	lt
    22b2:	9b06      	ldrlt	r3, [sp, #24]
    22b4:	9a08      	ldrlt	r2, [sp, #32]
    22b6:	9f06      	ldrge	r7, [sp, #24]
    22b8:	1a9f      	sublt	r7, r3, r2
    22ba:	bfac      	ite	ge
    22bc:	9b08      	ldrge	r3, [sp, #32]
    22be:	2300      	movlt	r3, #0
    22c0:	e73f      	b.n	2142 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x142>
    22c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    22c4:	9f06      	ldr	r7, [sp, #24]
    22c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    22c8:	e746      	b.n	2158 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x158>
    22ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    22cc:	e76f      	b.n	21ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ae>
    22ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22d0:	2b01      	cmp	r3, #1
    22d2:	dc19      	bgt.n	2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d4:	9b04      	ldr	r3, [sp, #16]
    22d6:	b9bb      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d8:	9b05      	ldr	r3, [sp, #20]
    22da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    22de:	b99b      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22e0:	9b05      	ldr	r3, [sp, #20]
    22e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    22e6:	0d1b      	lsrs	r3, r3, #20
    22e8:	051b      	lsls	r3, r3, #20
    22ea:	b183      	cbz	r3, 230e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30e>
    22ec:	9b06      	ldr	r3, [sp, #24]
    22ee:	f04f 0801 	mov.w	r8, #1
    22f2:	3301      	adds	r3, #1
    22f4:	9306      	str	r3, [sp, #24]
    22f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22f8:	3301      	adds	r3, #1
    22fa:	9309      	str	r3, [sp, #36]	; 0x24
    22fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22fe:	2b00      	cmp	r3, #0
    2300:	f47f af6e 	bne.w	21e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e0>
    2304:	2001      	movs	r0, #1
    2306:	e773      	b.n	21f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f0>
    2308:	f04f 0800 	mov.w	r8, #0
    230c:	e7f6      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    230e:	4698      	mov	r8, r3
    2310:	e7f4      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    2312:	d081      	beq.n	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    2314:	4618      	mov	r0, r3
    2316:	301c      	adds	r0, #28
    2318:	e777      	b.n	220a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20a>
    231a:	9b08      	ldr	r3, [sp, #32]
    231c:	2b00      	cmp	r3, #0
    231e:	dc39      	bgt.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2320:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2322:	2b02      	cmp	r3, #2
    2324:	dd36      	ble.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2326:	f8dd 9020 	ldr.w	r9, [sp, #32]
    232a:	f1b9 0f00 	cmp.w	r9, #0
    232e:	d10d      	bne.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2330:	4621      	mov	r1, r4
    2332:	464b      	mov	r3, r9
    2334:	2205      	movs	r2, #5
    2336:	4628      	mov	r0, r5
    2338:	f014 f9ad 	bl	16696 <__multadd>
    233c:	4601      	mov	r1, r0
    233e:	4604      	mov	r4, r0
    2340:	4658      	mov	r0, fp
    2342:	f014 fb38 	bl	169b6 <__mcmp>
    2346:	2800      	cmp	r0, #0
    2348:	f73f adc0 	bgt.w	1ecc <_dtoa_r+0x4ac>
    234c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    234e:	9f03      	ldr	r7, [sp, #12]
    2350:	ea6f 0a03 	mvn.w	sl, r3
    2354:	f04f 0800 	mov.w	r8, #0
    2358:	4621      	mov	r1, r4
    235a:	4628      	mov	r0, r5
    235c:	f014 f984 	bl	16668 <_Bfree>
    2360:	2e00      	cmp	r6, #0
    2362:	f43f aeac 	beq.w	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2366:	f1b8 0f00 	cmp.w	r8, #0
    236a:	d005      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    236c:	45b0      	cmp	r8, r6
    236e:	d003      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    2370:	4641      	mov	r1, r8
    2372:	4628      	mov	r0, r5
    2374:	f014 f978 	bl	16668 <_Bfree>
    2378:	4631      	mov	r1, r6
    237a:	4628      	mov	r0, r5
    237c:	f014 f974 	bl	16668 <_Bfree>
    2380:	e69d      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2382:	2400      	movs	r4, #0
    2384:	4626      	mov	r6, r4
    2386:	e7e1      	b.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2388:	46c2      	mov	sl, r8
    238a:	4626      	mov	r6, r4
    238c:	e59e      	b.n	1ecc <_dtoa_r+0x4ac>
    238e:	bf00      	nop
    2390:	40240000 	.word	0x40240000
    2394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2396:	f8dd 9020 	ldr.w	r9, [sp, #32]
    239a:	2b00      	cmp	r3, #0
    239c:	f000 80f6 	beq.w	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    23a0:	2f00      	cmp	r7, #0
    23a2:	dd05      	ble.n	23b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3b0>
    23a4:	4631      	mov	r1, r6
    23a6:	463a      	mov	r2, r7
    23a8:	4628      	mov	r0, r5
    23aa:	f014 faa5 	bl	168f8 <__lshift>
    23ae:	4606      	mov	r6, r0
    23b0:	f1b8 0f00 	cmp.w	r8, #0
    23b4:	d055      	beq.n	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    23b6:	6871      	ldr	r1, [r6, #4]
    23b8:	4628      	mov	r0, r5
    23ba:	f014 f921 	bl	16600 <_Balloc>
    23be:	6932      	ldr	r2, [r6, #16]
    23c0:	4607      	mov	r7, r0
    23c2:	f106 010c 	add.w	r1, r6, #12
    23c6:	3202      	adds	r2, #2
    23c8:	300c      	adds	r0, #12
    23ca:	0092      	lsls	r2, r2, #2
    23cc:	f013 fe62 	bl	16094 <memcpy>
    23d0:	2201      	movs	r2, #1
    23d2:	4639      	mov	r1, r7
    23d4:	4628      	mov	r0, r5
    23d6:	f014 fa8f 	bl	168f8 <__lshift>
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	46b0      	mov	r8, r6
    23de:	4606      	mov	r6, r0
    23e0:	3301      	adds	r3, #1
    23e2:	9308      	str	r3, [sp, #32]
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	444b      	add	r3, r9
    23e8:	930a      	str	r3, [sp, #40]	; 0x28
    23ea:	9b04      	ldr	r3, [sp, #16]
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	9309      	str	r3, [sp, #36]	; 0x24
    23f2:	9b08      	ldr	r3, [sp, #32]
    23f4:	4621      	mov	r1, r4
    23f6:	4658      	mov	r0, fp
    23f8:	3b01      	subs	r3, #1
    23fa:	9304      	str	r3, [sp, #16]
    23fc:	f014 f818 	bl	16430 <quorem>
    2400:	4603      	mov	r3, r0
    2402:	4641      	mov	r1, r8
    2404:	9006      	str	r0, [sp, #24]
    2406:	4658      	mov	r0, fp
    2408:	3330      	adds	r3, #48	; 0x30
    240a:	930b      	str	r3, [sp, #44]	; 0x2c
    240c:	f014 fad3 	bl	169b6 <__mcmp>
    2410:	4632      	mov	r2, r6
    2412:	4681      	mov	r9, r0
    2414:	4621      	mov	r1, r4
    2416:	4628      	mov	r0, r5
    2418:	f014 fae8 	bl	169ec <__mdiff>
    241c:	68c2      	ldr	r2, [r0, #12]
    241e:	4607      	mov	r7, r0
    2420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2422:	bb02      	cbnz	r2, 2466 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x466>
    2424:	4601      	mov	r1, r0
    2426:	4658      	mov	r0, fp
    2428:	f014 fac5 	bl	169b6 <__mcmp>
    242c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    242e:	4602      	mov	r2, r0
    2430:	4639      	mov	r1, r7
    2432:	4628      	mov	r0, r5
    2434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2438:	f014 f916 	bl	16668 <_Bfree>
    243c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    243e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2440:	9f08      	ldr	r7, [sp, #32]
    2442:	ea43 0102 	orr.w	r1, r3, r2
    2446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2448:	430b      	orrs	r3, r1
    244a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    244c:	d10d      	bne.n	246a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46a>
    244e:	2b39      	cmp	r3, #57	; 0x39
    2450:	d029      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    2452:	f1b9 0f00 	cmp.w	r9, #0
    2456:	dd01      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2458:	9b06      	ldr	r3, [sp, #24]
    245a:	3331      	adds	r3, #49	; 0x31
    245c:	9a04      	ldr	r2, [sp, #16]
    245e:	7013      	strb	r3, [r2, #0]
    2460:	e77a      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    2462:	4630      	mov	r0, r6
    2464:	e7b9      	b.n	23da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3da>
    2466:	2201      	movs	r2, #1
    2468:	e7e2      	b.n	2430 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x430>
    246a:	f1b9 0f00 	cmp.w	r9, #0
    246e:	db06      	blt.n	247e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x47e>
    2470:	9922      	ldr	r1, [sp, #136]	; 0x88
    2472:	ea41 0909 	orr.w	r9, r1, r9
    2476:	9909      	ldr	r1, [sp, #36]	; 0x24
    2478:	ea59 0101 	orrs.w	r1, r9, r1
    247c:	d120      	bne.n	24c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c0>
    247e:	2a00      	cmp	r2, #0
    2480:	ddec      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2482:	4659      	mov	r1, fp
    2484:	2201      	movs	r2, #1
    2486:	4628      	mov	r0, r5
    2488:	9308      	str	r3, [sp, #32]
    248a:	f014 fa35 	bl	168f8 <__lshift>
    248e:	4621      	mov	r1, r4
    2490:	4683      	mov	fp, r0
    2492:	f014 fa90 	bl	169b6 <__mcmp>
    2496:	2800      	cmp	r0, #0
    2498:	9b08      	ldr	r3, [sp, #32]
    249a:	dc02      	bgt.n	24a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a2>
    249c:	d1de      	bne.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    249e:	07da      	lsls	r2, r3, #31
    24a0:	d5dc      	bpl.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24a2:	2b39      	cmp	r3, #57	; 0x39
    24a4:	d1d8      	bne.n	2458 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x458>
    24a6:	2339      	movs	r3, #57	; 0x39
    24a8:	9a04      	ldr	r2, [sp, #16]
    24aa:	7013      	strb	r3, [r2, #0]
    24ac:	463b      	mov	r3, r7
    24ae:	461f      	mov	r7, r3
    24b0:	3b01      	subs	r3, #1
    24b2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24b6:	2a39      	cmp	r2, #57	; 0x39
    24b8:	d050      	beq.n	255c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x55c>
    24ba:	3201      	adds	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	e74b      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    24c0:	2a00      	cmp	r2, #0
    24c2:	dd03      	ble.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    24c4:	2b39      	cmp	r3, #57	; 0x39
    24c6:	d0ee      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    24c8:	3301      	adds	r3, #1
    24ca:	e7c7      	b.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24cc:	9a08      	ldr	r2, [sp, #32]
    24ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    24d0:	f802 3c01 	strb.w	r3, [r2, #-1]
    24d4:	428a      	cmp	r2, r1
    24d6:	d02a      	beq.n	252e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52e>
    24d8:	4659      	mov	r1, fp
    24da:	2300      	movs	r3, #0
    24dc:	220a      	movs	r2, #10
    24de:	4628      	mov	r0, r5
    24e0:	f014 f8d9 	bl	16696 <__multadd>
    24e4:	45b0      	cmp	r8, r6
    24e6:	4683      	mov	fp, r0
    24e8:	f04f 0300 	mov.w	r3, #0
    24ec:	f04f 020a 	mov.w	r2, #10
    24f0:	4641      	mov	r1, r8
    24f2:	4628      	mov	r0, r5
    24f4:	d107      	bne.n	2506 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x506>
    24f6:	f014 f8ce 	bl	16696 <__multadd>
    24fa:	4680      	mov	r8, r0
    24fc:	4606      	mov	r6, r0
    24fe:	9b08      	ldr	r3, [sp, #32]
    2500:	3301      	adds	r3, #1
    2502:	9308      	str	r3, [sp, #32]
    2504:	e775      	b.n	23f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3f2>
    2506:	f014 f8c6 	bl	16696 <__multadd>
    250a:	4631      	mov	r1, r6
    250c:	4680      	mov	r8, r0
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	4628      	mov	r0, r5
    2514:	f014 f8bf 	bl	16696 <__multadd>
    2518:	4606      	mov	r6, r0
    251a:	e7f0      	b.n	24fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4fe>
    251c:	f1b9 0f00 	cmp.w	r9, #0
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	f04f 0800 	mov.w	r8, #0
    2526:	bfcc      	ite	gt
    2528:	464f      	movgt	r7, r9
    252a:	2701      	movle	r7, #1
    252c:	4417      	add	r7, r2
    252e:	4659      	mov	r1, fp
    2530:	2201      	movs	r2, #1
    2532:	4628      	mov	r0, r5
    2534:	9308      	str	r3, [sp, #32]
    2536:	f014 f9df 	bl	168f8 <__lshift>
    253a:	4621      	mov	r1, r4
    253c:	4683      	mov	fp, r0
    253e:	f014 fa3a 	bl	169b6 <__mcmp>
    2542:	2800      	cmp	r0, #0
    2544:	dcb2      	bgt.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    2546:	d102      	bne.n	254e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54e>
    2548:	9b08      	ldr	r3, [sp, #32]
    254a:	07db      	lsls	r3, r3, #31
    254c:	d4ae      	bmi.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    254e:	463b      	mov	r3, r7
    2550:	461f      	mov	r7, r3
    2552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2556:	2a30      	cmp	r2, #48	; 0x30
    2558:	d0fa      	beq.n	2550 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x550>
    255a:	e6fd      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d1a5      	bne.n	24ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ae>
    2562:	f10a 0a01 	add.w	sl, sl, #1
    2566:	2331      	movs	r3, #49	; 0x31
    2568:	e779      	b.n	245e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45e>
    256a:	4b13      	ldr	r3, [pc, #76]	; (25b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5b8>)
    256c:	f7ff babe 	b.w	1aec <_dtoa_r+0xcc>
    2570:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2572:	2b00      	cmp	r3, #0
    2574:	f47f aa96 	bne.w	1aa4 <_dtoa_r+0x84>
    2578:	4b10      	ldr	r3, [pc, #64]	; (25bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5bc>)
    257a:	f7ff bab7 	b.w	1aec <_dtoa_r+0xcc>
    257e:	f1b9 0f00 	cmp.w	r9, #0
    2582:	dc03      	bgt.n	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    2584:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2586:	2b02      	cmp	r3, #2
    2588:	f73f aecf 	bgt.w	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    258c:	9f03      	ldr	r7, [sp, #12]
    258e:	4621      	mov	r1, r4
    2590:	4658      	mov	r0, fp
    2592:	f013 ff4d 	bl	16430 <quorem>
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	f100 0330 	add.w	r3, r0, #48	; 0x30
    259c:	f807 3b01 	strb.w	r3, [r7], #1
    25a0:	1aba      	subs	r2, r7, r2
    25a2:	4591      	cmp	r9, r2
    25a4:	ddba      	ble.n	251c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x51c>
    25a6:	4659      	mov	r1, fp
    25a8:	2300      	movs	r3, #0
    25aa:	220a      	movs	r2, #10
    25ac:	4628      	mov	r0, r5
    25ae:	f014 f872 	bl	16696 <__multadd>
    25b2:	4683      	mov	fp, r0
    25b4:	e7eb      	b.n	258e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58e>
    25b6:	bf00      	nop
    25b8:	0006bd4a 	.word	0x0006bd4a
    25bc:	0006bd6e 	.word	0x0006bd6e

000025c0 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    25c0:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    25c2:	2825      	cmp	r0, #37	; 0x25
    25c4:	d00c      	beq.n	25e0 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    25c6:	4b0c      	ldr	r3, [pc, #48]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	490c      	ldr	r1, [pc, #48]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25cc:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	2b4f      	cmp	r3, #79	; 0x4f
    25d2:	d80e      	bhi.n	25f2 <_Z18ee_serial_callbackc+0x32>
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	3301      	adds	r3, #1
    25da:	4a07      	ldr	r2, [pc, #28]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25dc:	6013      	str	r3, [r2, #0]
  }
}
    25de:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    25e0:	4c05      	ldr	r4, [pc, #20]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25e2:	6823      	ldr	r3, [r4, #0]
    25e4:	4805      	ldr	r0, [pc, #20]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25e6:	2500      	movs	r5, #0
    25e8:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    25ea:	f00f fb8e 	bl	11d0a <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    25ee:	6025      	str	r5, [r4, #0]
    25f0:	e7f5      	b.n	25de <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25f2:	2350      	movs	r3, #80	; 0x50
    25f4:	e7f1      	b.n	25da <_Z18ee_serial_callbackc+0x1a>
    25f6:	bf00      	nop
    25f8:	20000524 	.word	0x20000524
    25fc:	200004d0 	.word	0x200004d0

00002600 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2600:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2602:	f00f fb9c 	bl	11d3e <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    2606:	f000 fac5 	bl	2b94 <_Z23th_timestamp_initializev>
  th_final_initialize();
    260a:	f000 facd 	bl	2ba8 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    260e:	4805      	ldr	r0, [pc, #20]	; (2624 <_Z23ee_benchmark_initializev+0x24>)
    2610:	f00f fb87 	bl	11d22 <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <_Z23ee_benchmark_initializev+0x28>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    261a:	4804      	ldr	r0, [pc, #16]	; (262c <_Z23ee_benchmark_initializev+0x2c>)
    261c:	f00f fb81 	bl	11d22 <_Z9th_printfPKcz>
}
    2620:	bd08      	pop	{r3, pc}
    2622:	bf00      	nop
    2624:	000687a0 	.word	0x000687a0
    2628:	20020a84 	.word	0x20020a84
    262c:	000687b0 	.word	0x000687b0

00002630 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	4604      	mov	r4, r0
    2634:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    2636:	f000 fa01 	bl	2a3c <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    263a:	4629      	mov	r1, r5
    263c:	4811      	ldr	r0, [pc, #68]	; (2684 <_Z8ee_inferjj+0x54>)
    263e:	f00f fb70 	bl	11d22 <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2642:	1e6e      	subs	r6, r5, #1
    2644:	b11d      	cbz	r5, 264e <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    2646:	f000 f9e7 	bl	2a18 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    264a:	4635      	mov	r5, r6
    264c:	e7f9      	b.n	2642 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    264e:	480e      	ldr	r0, [pc, #56]	; (2688 <_Z8ee_inferjj+0x58>)
    2650:	f00f fb67 	bl	11d22 <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2654:	4621      	mov	r1, r4
    2656:	480d      	ldr	r0, [pc, #52]	; (268c <_Z8ee_inferjj+0x5c>)
    2658:	f00f fb63 	bl	11d22 <_Z9th_printfPKcz>
  th_timestamp();
    265c:	f000 fa66 	bl	2b2c <_Z12th_timestampv>
  th_pre();
    2660:	f00f fb51 	bl	11d06 <_Z6th_prev>
  while (n-- > 0) {
    2664:	1e65      	subs	r5, r4, #1
    2666:	b11c      	cbz	r4, 2670 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    2668:	f000 f9d6 	bl	2a18 <_Z8th_inferv>
  while (n-- > 0) {
    266c:	462c      	mov	r4, r5
    266e:	e7f9      	b.n	2664 <_Z8ee_inferjj+0x34>
  }
  th_post();
    2670:	f00f fb4a 	bl	11d08 <_Z7th_postv>
  th_timestamp();
    2674:	f000 fa5a 	bl	2b2c <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    2678:	4805      	ldr	r0, [pc, #20]	; (2690 <_Z8ee_inferjj+0x60>)
    267a:	f00f fb52 	bl	11d22 <_Z9th_printfPKcz>
  th_results();
    267e:	f000 fa15 	bl	2aac <_Z10th_resultsv>
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	000687bc 	.word	0x000687bc
    2688:	000687d0 	.word	0x000687d0
    268c:	000687e0 	.word	0x000687e0
    2690:	000687f4 	.word	0x000687f4

00002694 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2698:	2250      	movs	r2, #80	; 0x50
    269a:	4951      	ldr	r1, [pc, #324]	; (27e0 <_Z15ee_buffer_parsePc+0x14c>)
    269c:	f013 fe6e 	bl	1637c <strncmp>
    26a0:	b110      	cbz	r0, 26a8 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26a2:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26a4:	b002      	add	sp, #8
    26a6:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26a8:	494e      	ldr	r1, [pc, #312]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26aa:	f00e fe9b 	bl	113e4 <strtok>
  if (p_next == NULL) {
    26ae:	4605      	mov	r5, r0
    26b0:	b1d8      	cbz	r0, 26ea <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26b2:	2250      	movs	r2, #80	; 0x50
    26b4:	494c      	ldr	r1, [pc, #304]	; (27e8 <_Z15ee_buffer_parsePc+0x154>)
    26b6:	f013 fe61 	bl	1637c <strncmp>
    26ba:	bb50      	cbnz	r0, 2712 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    26bc:	4949      	ldr	r1, [pc, #292]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26be:	f00e fe91 	bl	113e4 <strtok>
    if (p_next == NULL) {
    26c2:	b1b8      	cbz	r0, 26f4 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    26c4:	f013 fcd4 	bl	16070 <atoi>
    26c8:	4601      	mov	r1, r0
    26ca:	4b48      	ldr	r3, [pc, #288]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    26cc:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    26ce:	b1b0      	cbz	r0, 26fe <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    26d0:	4b47      	ldr	r3, [pc, #284]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    26d2:	2200      	movs	r2, #0
    26d4:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    26d6:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    26da:	d915      	bls.n	2708 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    26dc:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    26e0:	4844      	ldr	r0, [pc, #272]	; (27f4 <_Z15ee_buffer_parsePc+0x160>)
    26e2:	f00f fb1e 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26e6:	2000      	movs	r0, #0
    26e8:	e7dc      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    26ea:	4843      	ldr	r0, [pc, #268]	; (27f8 <_Z15ee_buffer_parsePc+0x164>)
    26ec:	f00f fb19 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26f0:	2000      	movs	r0, #0
    26f2:	e7d7      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    26f4:	4841      	ldr	r0, [pc, #260]	; (27fc <_Z15ee_buffer_parsePc+0x168>)
    26f6:	f00f fb14 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26fa:	2000      	movs	r0, #0
    26fc:	e7d2      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    26fe:	4840      	ldr	r0, [pc, #256]	; (2800 <_Z15ee_buffer_parsePc+0x16c>)
    2700:	f00f fb0f 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2704:	2000      	movs	r0, #0
    2706:	e7cd      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    2708:	483e      	ldr	r0, [pc, #248]	; (2804 <_Z15ee_buffer_parsePc+0x170>)
    270a:	f00f fb0a 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    270e:	2000      	movs	r0, #0
    2710:	e7c8      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2712:	2250      	movs	r2, #80	; 0x50
    2714:	493c      	ldr	r1, [pc, #240]	; (2808 <_Z15ee_buffer_parsePc+0x174>)
    2716:	4628      	mov	r0, r5
    2718:	f013 fe30 	bl	1637c <strncmp>
    271c:	bb60      	cbnz	r0, 2778 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    271e:	2400      	movs	r4, #0
    2720:	e012      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2722:	483a      	ldr	r0, [pc, #232]	; (280c <_Z15ee_buffer_parsePc+0x178>)
    2724:	f00f fafd 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    2728:	4b39      	ldr	r3, [pc, #228]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    272a:	5d19      	ldrb	r1, [r3, r4]
    272c:	4839      	ldr	r0, [pc, #228]	; (2814 <_Z15ee_buffer_parsePc+0x180>)
    272e:	f00f faf8 	bl	11d22 <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2732:	3401      	adds	r4, #1
    2734:	f014 0f07 	tst.w	r4, #7
    2738:	d003      	beq.n	2742 <_Z15ee_buffer_parsePc+0xae>
    273a:	4b2c      	ldr	r3, [pc, #176]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	429c      	cmp	r4, r3
    2740:	d10c      	bne.n	275c <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2742:	4835      	ldr	r0, [pc, #212]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2744:	f00f faed 	bl	11d22 <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    2748:	4b28      	ldr	r3, [pc, #160]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	42a3      	cmp	r3, r4
    274e:	d909      	bls.n	2764 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2750:	f014 0f07 	tst.w	r4, #7
    2754:	d0e5      	beq.n	2722 <_Z15ee_buffer_parsePc+0x8e>
    2756:	2c00      	cmp	r4, #0
    2758:	d1e6      	bne.n	2728 <_Z15ee_buffer_parsePc+0x94>
    275a:	e7e2      	b.n	2722 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    275c:	482f      	ldr	r0, [pc, #188]	; (281c <_Z15ee_buffer_parsePc+0x188>)
    275e:	f00f fae0 	bl	11d22 <_Z9th_printfPKcz>
    2762:	e7f1      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2764:	f014 0f07 	tst.w	r4, #7
    2768:	d101      	bne.n	276e <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    276a:	2000      	movs	r0, #0
    276c:	e79a      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    276e:	482a      	ldr	r0, [pc, #168]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2770:	f00f fad7 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2774:	2000      	movs	r0, #0
    2776:	e795      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2778:	2150      	movs	r1, #80	; 0x50
    277a:	4628      	mov	r0, r5
    277c:	f00f fac9 	bl	11d12 <_Z10th_strnlenPKcj>
    2780:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    2782:	f010 0401 	ands.w	r4, r0, #1
    2786:	d11f      	bne.n	27c8 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2788:	2300      	movs	r3, #0
    278a:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    278e:	42b4      	cmp	r4, r6
    2790:	d224      	bcs.n	27dc <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    2792:	1c63      	adds	r3, r4, #1
    2794:	5d2a      	ldrb	r2, [r5, r4]
    2796:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    279a:	5ceb      	ldrb	r3, [r5, r3]
    279c:	3402      	adds	r4, #2
    279e:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27a2:	a801      	add	r0, sp, #4
    27a4:	f00f fa26 	bl	11bf4 <_Z9ee_hexdecPc>
      if (res < 0) {
    27a8:	2800      	cmp	r0, #0
    27aa:	db11      	blt.n	27d0 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27ac:	4a10      	ldr	r2, [pc, #64]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    27ae:	6813      	ldr	r3, [r2, #0]
    27b0:	4917      	ldr	r1, [pc, #92]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    27b2:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27b4:	3301      	adds	r3, #1
    27b6:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27b8:	4a0c      	ldr	r2, [pc, #48]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    27ba:	6812      	ldr	r2, [r2, #0]
    27bc:	4293      	cmp	r3, r2
    27be:	d1e6      	bne.n	278e <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    27c0:	4817      	ldr	r0, [pc, #92]	; (2820 <_Z15ee_buffer_parsePc+0x18c>)
    27c2:	f00f faae 	bl	11d22 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    27c6:	e007      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    27c8:	4816      	ldr	r0, [pc, #88]	; (2824 <_Z15ee_buffer_parsePc+0x190>)
    27ca:	f00f faaa 	bl	11d22 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27ce:	e003      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    27d0:	a901      	add	r1, sp, #4
    27d2:	4815      	ldr	r0, [pc, #84]	; (2828 <_Z15ee_buffer_parsePc+0x194>)
    27d4:	f00f faa5 	bl	11d22 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27d8:	2000      	movs	r0, #0
    27da:	e763      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    27dc:	2000      	movs	r0, #0
    27de:	e761      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    27e0:	00068804 	.word	0x00068804
    27e4:	00068808 	.word	0x00068808
    27e8:	00068838 	.word	0x00068838
    27ec:	200004cc 	.word	0x200004cc
    27f0:	200004c8 	.word	0x200004c8
    27f4:	0006889c 	.word	0x0006889c
    27f8:	0006880c 	.word	0x0006880c
    27fc:	00068840 	.word	0x00068840
    2800:	00068870 	.word	0x00068870
    2804:	000688cc 	.word	0x000688cc
    2808:	000688e8 	.word	0x000688e8
    280c:	000688f0 	.word	0x000688f0
    2810:	20000528 	.word	0x20000528
    2814:	000688fc 	.word	0x000688fc
    2818:	0006bb38 	.word	0x0006bb38
    281c:	000688f8 	.word	0x000688f8
    2820:	0006894c 	.word	0x0006894c
    2824:	00068904 	.word	0x00068904
    2828:	0006892c 	.word	0x0006892c

0000282c <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    282c:	b510      	push	{r4, lr}
    282e:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2830:	2250      	movs	r2, #80	; 0x50
    2832:	493b      	ldr	r1, [pc, #236]	; (2920 <_Z16ee_profile_parsePc+0xf4>)
    2834:	f013 fda2 	bl	1637c <strncmp>
    2838:	b948      	cbnz	r0, 284e <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    283a:	493a      	ldr	r1, [pc, #232]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    283c:	483a      	ldr	r0, [pc, #232]	; (2928 <_Z16ee_profile_parsePc+0xfc>)
    283e:	f00f fa70 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2842:	493a      	ldr	r1, [pc, #232]	; (292c <_Z16ee_profile_parsePc+0x100>)
    2844:	483a      	ldr	r0, [pc, #232]	; (2930 <_Z16ee_profile_parsePc+0x104>)
    2846:	f00f fa6c 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    284a:	2000      	movs	r0, #0
}
    284c:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    284e:	2250      	movs	r2, #80	; 0x50
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <_Z16ee_profile_parsePc+0x108>)
    2852:	4620      	mov	r0, r4
    2854:	f013 fd92 	bl	1637c <strncmp>
    2858:	bb30      	cbnz	r0, 28a8 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    285a:	4932      	ldr	r1, [pc, #200]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    285c:	4836      	ldr	r0, [pc, #216]	; (2938 <_Z16ee_profile_parsePc+0x10c>)
    285e:	f00f fa60 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("\r\n");
    2862:	4836      	ldr	r0, [pc, #216]	; (293c <_Z16ee_profile_parsePc+0x110>)
    2864:	f00f fa5d 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2868:	4835      	ldr	r0, [pc, #212]	; (2940 <_Z16ee_profile_parsePc+0x114>)
    286a:	f00f fa5a 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    286e:	4835      	ldr	r0, [pc, #212]	; (2944 <_Z16ee_profile_parsePc+0x118>)
    2870:	f00f fa57 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2874:	4834      	ldr	r0, [pc, #208]	; (2948 <_Z16ee_profile_parsePc+0x11c>)
    2876:	f00f fa54 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    287a:	4834      	ldr	r0, [pc, #208]	; (294c <_Z16ee_profile_parsePc+0x120>)
    287c:	f00f fa51 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    2880:	4833      	ldr	r0, [pc, #204]	; (2950 <_Z16ee_profile_parsePc+0x124>)
    2882:	f00f fa4e 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2886:	4833      	ldr	r0, [pc, #204]	; (2954 <_Z16ee_profile_parsePc+0x128>)
    2888:	f00f fa4b 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    288c:	4832      	ldr	r0, [pc, #200]	; (2958 <_Z16ee_profile_parsePc+0x12c>)
    288e:	f00f fa48 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    2892:	4832      	ldr	r0, [pc, #200]	; (295c <_Z16ee_profile_parsePc+0x130>)
    2894:	f00f fa45 	bl	11d22 <_Z9th_printfPKcz>
    th_printf(
    2898:	4831      	ldr	r0, [pc, #196]	; (2960 <_Z16ee_profile_parsePc+0x134>)
    289a:	f00f fa42 	bl	11d22 <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    289e:	4831      	ldr	r0, [pc, #196]	; (2964 <_Z16ee_profile_parsePc+0x138>)
    28a0:	f00f fa3f 	bl	11d22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28a4:	2000      	movs	r0, #0
    28a6:	e7d1      	b.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28a8:	4620      	mov	r0, r4
    28aa:	f7ff fef3 	bl	2694 <_Z15ee_buffer_parsePc>
    28ae:	2800      	cmp	r0, #0
    28b0:	d0cc      	beq.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28b2:	2250      	movs	r2, #80	; 0x50
    28b4:	492c      	ldr	r1, [pc, #176]	; (2968 <_Z16ee_profile_parsePc+0x13c>)
    28b6:	4620      	mov	r0, r4
    28b8:	f013 fd60 	bl	1637c <strncmp>
    28bc:	bb18      	cbnz	r0, 2906 <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    28be:	492b      	ldr	r1, [pc, #172]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28c0:	f00e fd90 	bl	113e4 <strtok>
    if (p_next) {
    28c4:	b1b0      	cbz	r0, 28f4 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    28c6:	f013 fbd3 	bl	16070 <atoi>
      if (i <= 0) {
    28ca:	1e04      	subs	r4, r0, #0
    28cc:	dd0d      	ble.n	28ea <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    28ce:	4927      	ldr	r1, [pc, #156]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28d0:	2000      	movs	r0, #0
    28d2:	f00e fd87 	bl	113e4 <strtok>
      if (p_next) {
    28d6:	b1a0      	cbz	r0, 2902 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    28d8:	f013 fbca 	bl	16070 <atoi>
        if (i < 0) {
    28dc:	1e01      	subs	r1, r0, #0
    28de:	da0b      	bge.n	28f8 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    28e0:	4823      	ldr	r0, [pc, #140]	; (2970 <_Z16ee_profile_parsePc+0x144>)
    28e2:	f00f fa1e 	bl	11d22 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    28e6:	2000      	movs	r0, #0
    28e8:	e7b0      	b.n	284c <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    28ea:	4822      	ldr	r0, [pc, #136]	; (2974 <_Z16ee_profile_parsePc+0x148>)
    28ec:	f00f fa19 	bl	11d22 <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    28f0:	2000      	movs	r0, #0
    28f2:	e7ab      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    28f4:	210a      	movs	r1, #10
    size_t n = 1;
    28f6:	2401      	movs	r4, #1
    ee_infer(n, w);
    28f8:	4620      	mov	r0, r4
    28fa:	f7ff fe99 	bl	2630 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    28fe:	2000      	movs	r0, #0
    2900:	e7a4      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2902:	210a      	movs	r1, #10
    2904:	e7f8      	b.n	28f8 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    2906:	2250      	movs	r2, #80	; 0x50
    2908:	491b      	ldr	r1, [pc, #108]	; (2978 <_Z16ee_profile_parsePc+0x14c>)
    290a:	4620      	mov	r0, r4
    290c:	f013 fd36 	bl	1637c <strncmp>
    2910:	b108      	cbz	r0, 2916 <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2912:	2001      	movs	r0, #1
    2914:	e79a      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    th_results();
    2916:	f000 f8c9 	bl	2aac <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    291a:	2000      	movs	r0, #0
    291c:	e796      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    291e:	bf00      	nop
    2920:	0006895c 	.word	0x0006895c
    2924:	00068964 	.word	0x00068964
    2928:	00068988 	.word	0x00068988
    292c:	0006899c 	.word	0x0006899c
    2930:	000689a4 	.word	0x000689a4
    2934:	000689b4 	.word	0x000689b4
    2938:	000689bc 	.word	0x000689bc
    293c:	0006bb38 	.word	0x0006bb38
    2940:	000689c4 	.word	0x000689c4
    2944:	000689ec 	.word	0x000689ec
    2948:	00068a1c 	.word	0x00068a1c
    294c:	00068a44 	.word	0x00068a44
    2950:	00068a78 	.word	0x00068a78
    2954:	00068ab0 	.word	0x00068ab0
    2958:	00068ae8 	.word	0x00068ae8
    295c:	00068b04 	.word	0x00068b04
    2960:	00068b34 	.word	0x00068b34
    2964:	00068b7c 	.word	0x00068b7c
    2968:	00068bac 	.word	0x00068bac
    296c:	00068808 	.word	0x00068808
    2970:	00068bdc 	.word	0x00068bdc
    2974:	00068bb4 	.word	0x00068bb4
    2978:	00068c00 	.word	0x00068c00

0000297c <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    297c:	4b14      	ldr	r3, [pc, #80]	; (29d0 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b903      	cbnz	r3, 2984 <_Z33ee_serial_command_parser_callbackPc+0x8>
    2982:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    2984:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2986:	4913      	ldr	r1, [pc, #76]	; (29d4 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2988:	f00e fd2c 	bl	113e4 <strtok>
    298c:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    298e:	2250      	movs	r2, #80	; 0x50
    2990:	4911      	ldr	r1, [pc, #68]	; (29d8 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    2992:	f013 fcf3 	bl	1637c <strncmp>
    2996:	b940      	cbnz	r0, 29aa <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2998:	4a10      	ldr	r2, [pc, #64]	; (29dc <_Z33ee_serial_command_parser_callbackPc+0x60>)
    299a:	4911      	ldr	r1, [pc, #68]	; (29e0 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    299c:	4811      	ldr	r0, [pc, #68]	; (29e4 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    299e:	f00f f9c0 	bl	11d22 <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29a2:	4811      	ldr	r0, [pc, #68]	; (29e8 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29a4:	f00f f9bd 	bl	11d22 <_Z9th_printfPKcz>
}
    29a8:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29aa:	2250      	movs	r2, #80	; 0x50
    29ac:	490f      	ldr	r1, [pc, #60]	; (29ec <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29ae:	4620      	mov	r0, r4
    29b0:	f013 fce4 	bl	1637c <strncmp>
    29b4:	b910      	cbnz	r0, 29bc <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29b6:	f000 f8b9 	bl	2b2c <_Z12th_timestampv>
    29ba:	e7f2      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    29bc:	4620      	mov	r0, r4
    29be:	f7ff ff35 	bl	282c <_Z16ee_profile_parsePc>
    29c2:	2800      	cmp	r0, #0
    29c4:	d0ed      	beq.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    29c6:	4621      	mov	r1, r4
    29c8:	4809      	ldr	r0, [pc, #36]	; (29f0 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    29ca:	f00f f9aa 	bl	11d22 <_Z9th_printfPKcz>
    29ce:	e7e8      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    29d0:	20020a84 	.word	0x20020a84
    29d4:	00068808 	.word	0x00068808
    29d8:	00068c08 	.word	0x00068c08
    29dc:	00068c10 	.word	0x00068c10
    29e0:	00068c1c 	.word	0x00068c1c
    29e4:	00068c20 	.word	0x00068c20
    29e8:	000687b0 	.word	0x000687b0
    29ec:	00068c34 	.word	0x00068c34
    29f0:	00068c40 	.word	0x00068c40

000029f4 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    29f4:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <_Z13ee_get_bufferPhj+0x1c>)
    29f8:	681c      	ldr	r4, [r3, #0]
    29fa:	428c      	cmp	r4, r1
    29fc:	d900      	bls.n	2a00 <_Z13ee_get_bufferPhj+0xc>
    29fe:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a00:	b118      	cbz	r0, 2a0a <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a02:	4622      	mov	r2, r4
    2a04:	4903      	ldr	r1, [pc, #12]	; (2a14 <_Z13ee_get_bufferPhj+0x20>)
    2a06:	f013 fb45 	bl	16094 <memcpy>
  }
  return len;
}
    2a0a:	4620      	mov	r0, r4
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	bf00      	nop
    2a10:	200004c8 	.word	0x200004c8
    2a14:	20000528 	.word	0x20000528

00002a18 <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a18:	b510      	push	{r4, lr}
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <_Z8th_inferv+0x1c>)
    2a1c:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a1e:	f104 000c 	add.w	r0, r4, #12
    2a22:	f005 f8ab 	bl	7b7c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a26:	b900      	cbnz	r0, 2a2a <_Z8th_inferv+0x12>
    2a28:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a2a:	4903      	ldr	r1, [pc, #12]	; (2a38 <_Z8th_inferv+0x20>)
    2a2c:	68a0      	ldr	r0, [r4, #8]
    2a2e:	f011 f8fe 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a32:	e7f9      	b.n	2a28 <_Z8th_inferv+0x10>
    2a34:	200072c4 	.word	0x200072c4
    2a38:	00068c5c 	.word	0x00068c5c

00002a3c <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a3c:	b500      	push	{lr}
    2a3e:	f5ad 4dd8 	sub.w	sp, sp, #27648	; 0x6c00
    2a42:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input),
    2a44:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    2a48:	4668      	mov	r0, sp
    2a4a:	f7ff ffd3 	bl	29f4 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(int8_t) != kVwwInputSize) {
    2a4e:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    2a52:	d109      	bne.n	2a68 <_Z14th_load_tensorv+0x2c>
  for (int i = 0; i < bytes; i++) {
    2a54:	2300      	movs	r3, #0
    2a56:	4283      	cmp	r3, r0
    2a58:	d211      	bcs.n	2a7e <_Z14th_load_tensorv+0x42>
    input[i] -= 128;
    2a5a:	f81d 2003 	ldrb.w	r2, [sp, r3]
    2a5e:	3a80      	subs	r2, #128	; 0x80
    2a60:	f80d 2003 	strb.w	r2, [sp, r3]
  for (int i = 0; i < bytes; i++) {
    2a64:	3301      	adds	r3, #1
    2a66:	e7f6      	b.n	2a56 <_Z14th_load_tensorv+0x1a>
    th_printf("Input db has %d elemented, expected %d\n",
    2a68:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    2a6c:	4601      	mov	r1, r0
    2a6e:	480d      	ldr	r0, [pc, #52]	; (2aa4 <_Z14th_load_tensorv+0x68>)
    2a70:	f00f f957 	bl	11d22 <_Z9th_printfPKcz>
}
    2a74:	f50d 4dd8 	add.w	sp, sp, #27648	; 0x6c00
    2a78:	b001      	add	sp, #4
    2a7a:	f85d fb04 	ldr.w	pc, [sp], #4
  runner->SetInput(input);
    2a7e:	4b0a      	ldr	r3, [pc, #40]	; (2aa8 <_Z14th_load_tensorv+0x6c>)
    2a80:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2a82:	2100      	movs	r1, #0
    2a84:	300c      	adds	r0, #12
    2a86:	f004 faf7 	bl	7078 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2a8a:	4603      	mov	r3, r0
    2a8c:	b100      	cbz	r0, 2a90 <_Z14th_load_tensorv+0x54>
    2a8e:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2a90:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2a92:	2300      	movs	r3, #0
    2a94:	4299      	cmp	r1, r3
    2a96:	dded      	ble.n	2a74 <_Z14th_load_tensorv+0x38>
      input_buffer[i] = custom_input[i];
    2a98:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2a9c:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2a9e:	3301      	adds	r3, #1
    2aa0:	e7f8      	b.n	2a94 <_Z14th_load_tensorv+0x58>
    2aa2:	bf00      	nop
    2aa4:	00068c6c 	.word	0x00068c6c
    2aa8:	200072c4 	.word	0x200072c4

00002aac <_Z10th_resultsv>:
void th_results() {
    2aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2aae:	481a      	ldr	r0, [pc, #104]	; (2b18 <_Z10th_resultsv+0x6c>)
    2ab0:	f00f f937 	bl	11d22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2ab4:	2400      	movs	r4, #0
    2ab6:	e01e      	b.n	2af6 <_Z10th_resultsv+0x4a>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2ab8:	571f      	ldrsb	r7, [r3, r4]
    2aba:	4d18      	ldr	r5, [pc, #96]	; (2b1c <_Z10th_resultsv+0x70>)
    2abc:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2abe:	2100      	movs	r1, #0
    2ac0:	300c      	adds	r0, #12
    2ac2:	f004 fa7d 	bl	6fc0 <_ZN6tflite16MicroInterpreter6outputEj>
    2ac6:	68c6      	ldr	r6, [r0, #12]
    2ac8:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2aca:	2100      	movs	r1, #0
    2acc:	300c      	adds	r0, #12
    2ace:	f004 fa77 	bl	6fc0 <_ZN6tflite16MicroInterpreter6outputEj>
    2ad2:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2ad4:	1a38      	subs	r0, r7, r0
    2ad6:	f7fe f8c7 	bl	c68 <__aeabi_i2f>
    2ada:	4631      	mov	r1, r6
    2adc:	f7fe f918 	bl	d10 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2ae0:	f7fd fc9e 	bl	420 <__aeabi_f2d>
    2ae4:	4602      	mov	r2, r0
    2ae6:	460b      	mov	r3, r1
    2ae8:	480d      	ldr	r0, [pc, #52]	; (2b20 <_Z10th_resultsv+0x74>)
    2aea:	f00f f91a 	bl	11d22 <_Z9th_printfPKcz>
      th_printf(",");
    2aee:	480d      	ldr	r0, [pc, #52]	; (2b24 <_Z10th_resultsv+0x78>)
    2af0:	f00f f917 	bl	11d22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2af4:	3401      	adds	r4, #1
    2af6:	2c01      	cmp	r4, #1
    2af8:	d80a      	bhi.n	2b10 <_Z10th_resultsv+0x64>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2afa:	4b08      	ldr	r3, [pc, #32]	; (2b1c <_Z10th_resultsv+0x70>)
    2afc:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2afe:	2100      	movs	r1, #0
    2b00:	300c      	adds	r0, #12
    2b02:	f004 fa5d 	bl	6fc0 <_ZN6tflite16MicroInterpreter6outputEj>
    2b06:	4603      	mov	r3, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	d0d5      	beq.n	2ab8 <_Z10th_resultsv+0xc>
    2b0c:	6843      	ldr	r3, [r0, #4]
    2b0e:	e7d3      	b.n	2ab8 <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b10:	4805      	ldr	r0, [pc, #20]	; (2b28 <_Z10th_resultsv+0x7c>)
    2b12:	f00f f906 	bl	11d22 <_Z9th_printfPKcz>
}
    2b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b18:	00068c94 	.word	0x00068c94
    2b1c:	200072c4 	.word	0x200072c4
    2b20:	00068ca0 	.word	0x00068ca0
    2b24:	00068ca8 	.word	0x00068ca8
    2b28:	00068b00 	.word	0x00068b00

00002b2c <_Z12th_timestampv>:

void th_serialport_initialize(void) {

}

void th_timestamp(void) {
    2b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b2e:	f013 fa6e 	bl	1600e <z_impl_k_uptime_ticks>
/* Step 3. Release driver */
       g_timestampPin = 1;

/* USER CODE 1 END */
#else
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b32:	014e      	lsls	r6, r1, #5
    2b34:	0143      	lsls	r3, r0, #5
    2b36:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
    2b3a:	1a1b      	subs	r3, r3, r0
    2b3c:	eb62 0201 	sbc.w	r2, r2, r1
    2b40:	0256      	lsls	r6, r2, #9
    2b42:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
    2b46:	025f      	lsls	r7, r3, #9
    2b48:	4632      	mov	r2, r6
    2b4a:	183b      	adds	r3, r7, r0
    2b4c:	eb41 0202 	adc.w	r2, r1, r2
    2b50:	0197      	lsls	r7, r2, #6
    2b52:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
    2b56:	019e      	lsls	r6, r3, #6
    2b58:	1af3      	subs	r3, r6, r3
    2b5a:	eb67 0202 	sbc.w	r2, r7, r2
    2b5e:	181c      	adds	r4, r3, r0
    2b60:	eb42 0501 	adc.w	r5, r2, r1
    2b64:	4623      	mov	r3, r4
    2b66:	4629      	mov	r1, r5
    2b68:	2c00      	cmp	r4, #0
    2b6a:	f175 0200 	sbcs.w	r2, r5, #0
    2b6e:	db06      	blt.n	2b7e <_Z12th_timestampv+0x52>
    2b70:	0bdb      	lsrs	r3, r3, #15
       unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2b72:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
    2b76:	4806      	ldr	r0, [pc, #24]	; (2b90 <_Z12th_timestampv+0x64>)
    2b78:	f00f f8d3 	bl	11d22 <_Z9th_printfPKcz>
#endif
}
    2b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       int64_t uptime_usec = (k_uptime_ticks() * 1000000) / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    2b7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    2b82:	18e3      	adds	r3, r4, r3
    2b84:	f04f 0100 	mov.w	r1, #0
    2b88:	eb45 0101 	adc.w	r1, r5, r1
    2b8c:	e7f0      	b.n	2b70 <_Z12th_timestampv+0x44>
    2b8e:	bf00      	nop
    2b90:	00068cac 	.word	0x00068cac

00002b94 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2b94:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2b96:	4803      	ldr	r0, [pc, #12]	; (2ba4 <_Z23th_timestamp_initializev+0x10>)
    2b98:	f00f f8c3 	bl	11d22 <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2b9c:	f7ff ffc6 	bl	2b2c <_Z12th_timestampv>
}
    2ba0:	bd08      	pop	{r3, pc}
    2ba2:	bf00      	nop
    2ba4:	00068cbc 	.word	0x00068cbc

00002ba8 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2baa:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<6> resolver;
    2bac:	4bb0      	ldr	r3, [pc, #704]	; (2e70 <_Z19th_final_initializev+0x2c8>)
    2bae:	681b      	ldr	r3, [r3, #0]
    2bb0:	f013 0f01 	tst.w	r3, #1
    2bb4:	d012      	beq.n	2bdc <_Z19th_final_initializev+0x34>
  resolver.AddFullyConnected();
    2bb6:	a804      	add	r0, sp, #16
    2bb8:	f009 fd14 	bl	c5e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2bbc:	48ad      	ldr	r0, [pc, #692]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2bbe:	6803      	ldr	r3, [r0, #0]
    2bc0:	699b      	ldr	r3, [r3, #24]
    2bc2:	2109      	movs	r1, #9
    2bc4:	4798      	blx	r3
    2bc6:	b1d8      	cbz	r0, 2c00 <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2bc8:	4baa      	ldr	r3, [pc, #680]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2bca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2bce:	2800      	cmp	r0, #0
    2bd0:	d03a      	beq.n	2c48 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2bd2:	2209      	movs	r2, #9
    2bd4:	49a8      	ldr	r1, [pc, #672]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2bd6:	f011 f82a 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2bda:	e035      	b.n	2c48 <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2bdc:	48a5      	ldr	r0, [pc, #660]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2bde:	4ba7      	ldr	r3, [pc, #668]	; (2e7c <_Z19th_final_initializev+0x2d4>)
    2be0:	6003      	str	r3, [r0, #0]
    2be2:	2300      	movs	r3, #0
    2be4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
    2be8:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    2bec:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  static tflite::MicroMutableOpResolver<6> resolver;
    2bf0:	4b9f      	ldr	r3, [pc, #636]	; (2e70 <_Z19th_final_initializev+0x2c8>)
    2bf2:	2201      	movs	r2, #1
    2bf4:	601a      	str	r2, [r3, #0]
    2bf6:	4aa2      	ldr	r2, [pc, #648]	; (2e80 <_Z19th_final_initializev+0x2d8>)
    2bf8:	49a2      	ldr	r1, [pc, #648]	; (2e84 <_Z19th_final_initializev+0x2dc>)
    2bfa:	f00f fd45 	bl	12688 <__aeabi_atexit>
    2bfe:	e7da      	b.n	2bb6 <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2c00:	4b9c      	ldr	r3, [pc, #624]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c02:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2c06:	2e05      	cmp	r6, #5
    2c08:	d830      	bhi.n	2c6c <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2c0a:	4f9a      	ldr	r7, [pc, #616]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c0c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c10:	f10c 0404 	add.w	r4, ip, #4
    2c14:	ad04      	add	r5, sp, #16
    2c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c22:	2209      	movs	r2, #9
    2c24:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c28:	3601      	adds	r6, #1
    2c2a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4

    builtin_codes_[num_buitin_ops_] = op;
    2c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2c32:	18f9      	adds	r1, r7, r3
    2c34:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c38:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2c3c:	4992      	ldr	r1, [pc, #584]	; (2e88 <_Z19th_final_initializev+0x2e0>)
    2c3e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c42:	3301      	adds	r3, #1
    2c44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddConv2D();
    2c48:	a804      	add	r0, sp, #16
    2c4a:	f007 ff37 	bl	aabc <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2c4e:	4889      	ldr	r0, [pc, #548]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c50:	6803      	ldr	r3, [r0, #0]
    2c52:	699b      	ldr	r3, [r3, #24]
    2c54:	2103      	movs	r1, #3
    2c56:	4798      	blx	r3
    2c58:	b190      	cbz	r0, 2c80 <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2c5a:	4b86      	ldr	r3, [pc, #536]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c5c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2c60:	b390      	cbz	r0, 2cc8 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c62:	2203      	movs	r2, #3
    2c64:	4984      	ldr	r1, [pc, #528]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2c66:	f010 ffe2 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c6a:	e02d      	b.n	2cc8 <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2c6c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2c70:	2800      	cmp	r0, #0
    2c72:	d0e9      	beq.n	2c48 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c74:	2306      	movs	r3, #6
    2c76:	2209      	movs	r2, #9
    2c78:	4984      	ldr	r1, [pc, #528]	; (2e8c <_Z19th_final_initializev+0x2e4>)
    2c7a:	f010 ffd8 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c7e:	e7e3      	b.n	2c48 <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2c80:	4b7c      	ldr	r3, [pc, #496]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c82:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2c86:	2e05      	cmp	r6, #5
    2c88:	d830      	bhi.n	2cec <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2c8a:	4f7a      	ldr	r7, [pc, #488]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2c8c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c90:	f10c 0404 	add.w	r4, ip, #4
    2c94:	ad04      	add	r5, sp, #16
    2c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2ca2:	2203      	movs	r2, #3
    2ca4:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2ca8:	3601      	adds	r6, #1
    2caa:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2cae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2cb2:	18f9      	adds	r1, r7, r3
    2cb4:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2cb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2cbc:	4974      	ldr	r1, [pc, #464]	; (2e90 <_Z19th_final_initializev+0x2e8>)
    2cbe:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2cc2:	3301      	adds	r3, #1
    2cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2cc8:	a804      	add	r0, sp, #16
    2cca:	f008 fdc5 	bl	b858 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2cce:	4869      	ldr	r0, [pc, #420]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2cd0:	6803      	ldr	r3, [r0, #0]
    2cd2:	699b      	ldr	r3, [r3, #24]
    2cd4:	2104      	movs	r1, #4
    2cd6:	4798      	blx	r3
    2cd8:	b190      	cbz	r0, 2d00 <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2cda:	4b66      	ldr	r3, [pc, #408]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2cdc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ce0:	b390      	cbz	r0, 2d48 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ce2:	2204      	movs	r2, #4
    2ce4:	4964      	ldr	r1, [pc, #400]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2ce6:	f010 ffa2 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cea:	e02d      	b.n	2d48 <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2cec:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2cf0:	2800      	cmp	r0, #0
    2cf2:	d0e9      	beq.n	2cc8 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cf4:	2306      	movs	r3, #6
    2cf6:	2203      	movs	r2, #3
    2cf8:	4964      	ldr	r1, [pc, #400]	; (2e8c <_Z19th_final_initializev+0x2e4>)
    2cfa:	f010 ff98 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cfe:	e7e3      	b.n	2cc8 <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2d00:	4b5c      	ldr	r3, [pc, #368]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d02:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2d06:	2e05      	cmp	r6, #5
    2d08:	d830      	bhi.n	2d6c <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2d0a:	4f5a      	ldr	r7, [pc, #360]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d0c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d10:	f10c 0404 	add.w	r4, ip, #4
    2d14:	ad04      	add	r5, sp, #16
    2d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d22:	2204      	movs	r2, #4
    2d24:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d28:	3601      	adds	r6, #1
    2d2a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2d2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2d32:	18f9      	adds	r1, r7, r3
    2d34:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2d3c:	4955      	ldr	r1, [pc, #340]	; (2e94 <_Z19th_final_initializev+0x2ec>)
    2d3e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d42:	3301      	adds	r3, #1
    2d44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2d48:	a804      	add	r0, sp, #16
    2d4a:	f00a fe61 	bl	da10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2d4e:	4849      	ldr	r0, [pc, #292]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d50:	6803      	ldr	r3, [r0, #0]
    2d52:	699b      	ldr	r3, [r3, #24]
    2d54:	2116      	movs	r1, #22
    2d56:	4798      	blx	r3
    2d58:	b190      	cbz	r0, 2d80 <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2d5a:	4b46      	ldr	r3, [pc, #280]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d5c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d60:	b390      	cbz	r0, 2dc8 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d62:	2216      	movs	r2, #22
    2d64:	4944      	ldr	r1, [pc, #272]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2d66:	f010 ff62 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d6a:	e02d      	b.n	2dc8 <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2d6c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d70:	2800      	cmp	r0, #0
    2d72:	d0e9      	beq.n	2d48 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d74:	2306      	movs	r3, #6
    2d76:	2204      	movs	r2, #4
    2d78:	4944      	ldr	r1, [pc, #272]	; (2e8c <_Z19th_final_initializev+0x2e4>)
    2d7a:	f010 ff58 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d7e:	e7e3      	b.n	2d48 <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2d80:	4b3c      	ldr	r3, [pc, #240]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d82:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2d86:	2e05      	cmp	r6, #5
    2d88:	d830      	bhi.n	2dec <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2d8a:	4f3a      	ldr	r7, [pc, #232]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2d8c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d90:	f10c 0404 	add.w	r4, ip, #4
    2d94:	ad04      	add	r5, sp, #16
    2d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2da2:	2216      	movs	r2, #22
    2da4:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2da8:	3601      	adds	r6, #1
    2daa:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2db2:	18f9      	adds	r1, r7, r3
    2db4:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2db8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2dbc:	4936      	ldr	r1, [pc, #216]	; (2e98 <_Z19th_final_initializev+0x2f0>)
    2dbe:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2dc2:	3301      	adds	r3, #1
    2dc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddSoftmax();
    2dc8:	a804      	add	r0, sp, #16
    2dca:	f00a fe31 	bl	da30 <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2dce:	4829      	ldr	r0, [pc, #164]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2dd0:	6803      	ldr	r3, [r0, #0]
    2dd2:	699b      	ldr	r3, [r3, #24]
    2dd4:	2119      	movs	r1, #25
    2dd6:	4798      	blx	r3
    2dd8:	b190      	cbz	r0, 2e00 <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2dda:	4b26      	ldr	r3, [pc, #152]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2ddc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2de0:	b390      	cbz	r0, 2e48 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2de2:	2219      	movs	r2, #25
    2de4:	4924      	ldr	r1, [pc, #144]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2de6:	f010 ff22 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dea:	e02d      	b.n	2e48 <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2dec:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2df0:	2800      	cmp	r0, #0
    2df2:	d0e9      	beq.n	2dc8 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2df4:	2306      	movs	r3, #6
    2df6:	2216      	movs	r2, #22
    2df8:	4924      	ldr	r1, [pc, #144]	; (2e8c <_Z19th_final_initializev+0x2e4>)
    2dfa:	f010 ff18 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dfe:	e7e3      	b.n	2dc8 <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2e00:	4b1c      	ldr	r3, [pc, #112]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2e02:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2e06:	2e05      	cmp	r6, #5
    2e08:	d84a      	bhi.n	2ea0 <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2e0a:	4f1a      	ldr	r7, [pc, #104]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2e0c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2e10:	f10c 0404 	add.w	r4, ip, #4
    2e14:	ad04      	add	r5, sp, #16
    2e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e22:	2219      	movs	r2, #25
    2e24:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e28:	3601      	adds	r6, #1
    2e2a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2e2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2e32:	18f9      	adds	r1, r7, r3
    2e34:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e38:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2e3c:	4917      	ldr	r1, [pc, #92]	; (2e9c <_Z19th_final_initializev+0x2f4>)
    2e3e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e42:	3301      	adds	r3, #1
    2e44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2e48:	a804      	add	r0, sp, #16
    2e4a:	f00a fc65 	bl	d718 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2e4e:	4809      	ldr	r0, [pc, #36]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2e50:	6803      	ldr	r3, [r0, #0]
    2e52:	699b      	ldr	r3, [r3, #24]
    2e54:	2101      	movs	r1, #1
    2e56:	4798      	blx	r3
    2e58:	b360      	cbz	r0, 2eb4 <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <_Z19th_final_initializev+0x2cc>)
    2e5c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2e60:	2800      	cmp	r0, #0
    2e62:	d04b      	beq.n	2efc <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e64:	2201      	movs	r2, #1
    2e66:	4904      	ldr	r1, [pc, #16]	; (2e78 <_Z19th_final_initializev+0x2d0>)
    2e68:	f010 fee1 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e6c:	e046      	b.n	2efc <_Z19th_final_initializev+0x354>
    2e6e:	bf00      	nop
    2e70:	2000712c 	.word	0x2000712c
    2e74:	200071d4 	.word	0x200071d4
    2e78:	00068cdc 	.word	0x00068cdc
    2e7c:	00068d78 	.word	0x00068d78
    2e80:	2002032c 	.word	0x2002032c
    2e84:	00011c85 	.word	0x00011c85
    2e88:	00009f11 	.word	0x00009f11
    2e8c:	00068d2c 	.word	0x00068d2c
    2e90:	00009d15 	.word	0x00009d15
    2e94:	0000a0c1 	.word	0x0000a0c1
    2e98:	000099f5 	.word	0x000099f5
    2e9c:	0000a2f5 	.word	0x0000a2f5
      if (error_reporter_) {
    2ea0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d0cf      	beq.n	2e48 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ea8:	2306      	movs	r3, #6
    2eaa:	2219      	movs	r2, #25
    2eac:	492f      	ldr	r1, [pc, #188]	; (2f6c <_Z19th_final_initializev+0x3c4>)
    2eae:	f010 febe 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2eb2:	e7c9      	b.n	2e48 <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2eb4:	4b2e      	ldr	r3, [pc, #184]	; (2f70 <_Z19th_final_initializev+0x3c8>)
    2eb6:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2eba:	2e05      	cmp	r6, #5
    2ebc:	d828      	bhi.n	2f10 <_Z19th_final_initializev+0x368>
    registrations_[registrations_len_] = registration;
    2ebe:	4f2c      	ldr	r7, [pc, #176]	; (2f70 <_Z19th_final_initializev+0x3c8>)
    2ec0:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2ec4:	f10c 0404 	add.w	r4, ip, #4
    2ec8:	ad04      	add	r5, sp, #16
    2eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ece:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2ed6:	2201      	movs	r2, #1
    2ed8:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2edc:	4416      	add	r6, r2
    2ede:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2ee2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2ee6:	18f9      	adds	r1, r7, r3
    2ee8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2eec:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2ef0:	4920      	ldr	r1, [pc, #128]	; (2f74 <_Z19th_final_initializev+0x3cc>)
    2ef2:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2ef6:	3301      	adds	r3, #1
    2ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2efc:	4b1e      	ldr	r3, [pc, #120]	; (2f78 <_Z19th_final_initializev+0x3d0>)
    2efe:	681b      	ldr	r3, [r3, #0]
    2f00:	f013 0f01 	tst.w	r3, #1
    2f04:	d00e      	beq.n	2f24 <_Z19th_final_initializev+0x37c>
  runner = &model_runner;
    2f06:	4b1d      	ldr	r3, [pc, #116]	; (2f7c <_Z19th_final_initializev+0x3d4>)
    2f08:	4a1d      	ldr	r2, [pc, #116]	; (2f80 <_Z19th_final_initializev+0x3d8>)
    2f0a:	601a      	str	r2, [r3, #0]
}
    2f0c:	b00d      	add	sp, #52	; 0x34
    2f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2f10:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2f14:	2800      	cmp	r0, #0
    2f16:	d0f1      	beq.n	2efc <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2f18:	2306      	movs	r3, #6
    2f1a:	2201      	movs	r2, #1
    2f1c:	4913      	ldr	r1, [pc, #76]	; (2f6c <_Z19th_final_initializev+0x3c4>)
    2f1e:	f010 fe86 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f22:	e7eb      	b.n	2efc <_Z19th_final_initializev+0x354>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    2f24:	4817      	ldr	r0, [pc, #92]	; (2f84 <_Z19th_final_initializev+0x3dc>)
    2f26:	f00e ff22 	bl	11d6e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    2f2a:	4601      	mov	r1, r0
                     reporter_) {
    2f2c:	4c14      	ldr	r4, [pc, #80]	; (2f80 <_Z19th_final_initializev+0x3d8>)
    2f2e:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2f30:	4623      	mov	r3, r4
    2f32:	4a15      	ldr	r2, [pc, #84]	; (2f88 <_Z19th_final_initializev+0x3e0>)
    2f34:	f843 2f04 	str.w	r2, [r3, #4]!
    2f38:	60a3      	str	r3, [r4, #8]
    2f3a:	f104 050c 	add.w	r5, r4, #12
    2f3e:	2200      	movs	r2, #0
    2f40:	9202      	str	r2, [sp, #8]
    2f42:	9301      	str	r3, [sp, #4]
    2f44:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
    2f48:	9300      	str	r3, [sp, #0]
    2f4a:	4b10      	ldr	r3, [pc, #64]	; (2f8c <_Z19th_final_initializev+0x3e4>)
    2f4c:	4a08      	ldr	r2, [pc, #32]	; (2f70 <_Z19th_final_initializev+0x3c8>)
    2f4e:	4628      	mov	r0, r5
    2f50:	f010 fad2 	bl	134f8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2f54:	4628      	mov	r0, r5
    2f56:	f004 faf9 	bl	754c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2f5a:	4b07      	ldr	r3, [pc, #28]	; (2f78 <_Z19th_final_initializev+0x3d0>)
    2f5c:	2201      	movs	r2, #1
    2f5e:	601a      	str	r2, [r3, #0]
    2f60:	4a0b      	ldr	r2, [pc, #44]	; (2f90 <_Z19th_final_initializev+0x3e8>)
    2f62:	490c      	ldr	r1, [pc, #48]	; (2f94 <_Z19th_final_initializev+0x3ec>)
    2f64:	4620      	mov	r0, r4
    2f66:	f00f fb8f 	bl	12688 <__aeabi_atexit>
    2f6a:	e7cc      	b.n	2f06 <_Z19th_final_initializev+0x35e>
    2f6c:	00068d2c 	.word	0x00068d2c
    2f70:	200071d4 	.word	0x200071d4
    2f74:	00009b1d 	.word	0x00009b1d
    2f78:	20007128 	.word	0x20007128
    2f7c:	200072c4 	.word	0x200072c4
    2f80:	20007130 	.word	0x20007130
    2f84:	000170c8 	.word	0x000170c8
    2f88:	00069110 	.word	0x00069110
    2f8c:	200072c8 	.word	0x200072c8
    2f90:	2002032c 	.word	0x2002032c
    2f94:	00011c87 	.word	0x00011c87

00002f98 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2f98:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2f9a:	680b      	ldr	r3, [r1, #0]
    2f9c:	3301      	adds	r3, #1
    2f9e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2fa0:	4b01      	ldr	r3, [pc, #4]	; (2fa8 <char_out+0x10>)
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	4798      	blx	r3
}
    2fa6:	bd08      	pop	{r3, pc}
    2fa8:	20000000 	.word	0x20000000

00002fac <__printk_hook_install>:
	_char_out = fn;
    2fac:	4b01      	ldr	r3, [pc, #4]	; (2fb4 <__printk_hook_install+0x8>)
    2fae:	6018      	str	r0, [r3, #0]
}
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop
    2fb4:	20000000 	.word	0x20000000

00002fb8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2fb8:	b500      	push	{lr}
    2fba:	b083      	sub	sp, #12
    2fbc:	4602      	mov	r2, r0
    2fbe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2fc0:	2100      	movs	r1, #0
    2fc2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2fc4:	a901      	add	r1, sp, #4
    2fc6:	4803      	ldr	r0, [pc, #12]	; (2fd4 <vprintk+0x1c>)
    2fc8:	f000 f94e 	bl	3268 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2fcc:	b003      	add	sp, #12
    2fce:	f85d fb04 	ldr.w	pc, [sp], #4
    2fd2:	bf00      	nop
    2fd4:	00002f99 	.word	0x00002f99

00002fd8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2fd8:	b510      	push	{r4, lr}
    2fda:	b084      	sub	sp, #16
    2fdc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2fde:	9001      	str	r0, [sp, #4]
    2fe0:	9102      	str	r1, [sp, #8]
    2fe2:	2100      	movs	r1, #0
    2fe4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    2fe6:	a901      	add	r1, sp, #4
    2fe8:	4805      	ldr	r0, [pc, #20]	; (3000 <vsnprintk+0x28>)
    2fea:	f000 f93d 	bl	3268 <cbvprintf>

	if (ctx.count < ctx.max) {
    2fee:	9b03      	ldr	r3, [sp, #12]
    2ff0:	9a02      	ldr	r2, [sp, #8]
    2ff2:	4293      	cmp	r3, r2
    2ff4:	da01      	bge.n	2ffa <vsnprintk+0x22>
		str[ctx.count] = '\0';
    2ff6:	2200      	movs	r2, #0
    2ff8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2ffa:	9803      	ldr	r0, [sp, #12]
    2ffc:	b004      	add	sp, #16
    2ffe:	bd10      	pop	{r4, pc}
    3000:	00011dc3 	.word	0x00011dc3

00003004 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3008:	b083      	sub	sp, #12
    300a:	4604      	mov	r4, r0
    300c:	4608      	mov	r0, r1
    300e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3010:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3012:	f013 0f08 	tst.w	r3, #8
    3016:	d105      	bne.n	3024 <process_event+0x20>
    3018:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    301c:	2300      	movs	r3, #0
    301e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3020:	9301      	str	r3, [sp, #4]
}
    3022:	e069      	b.n	30f8 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    3024:	2901      	cmp	r1, #1
    3026:	d009      	beq.n	303c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3028:	f043 0320 	orr.w	r3, r3, #32
    302c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    302e:	f385 8811 	msr	BASEPRI, r5
    3032:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3036:	b003      	add	sp, #12
    3038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    303c:	f043 0310 	orr.w	r3, r3, #16
    3040:	83a3      	strh	r3, [r4, #28]
    3042:	e7f4      	b.n	302e <process_event+0x2a>
			evt = process_recheck(mgr);
    3044:	4620      	mov	r0, r4
    3046:	f00e ff17 	bl	11e78 <process_recheck>
    304a:	e057      	b.n	30fc <process_event+0xf8>
			res = mgr->last_res;
    304c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3050:	464a      	mov	r2, r9
    3052:	4669      	mov	r1, sp
    3054:	4620      	mov	r0, r4
    3056:	f00e ff28 	bl	11eaa <process_complete>
		onoff_transition_fn transit = NULL;
    305a:	2700      	movs	r7, #0
    305c:	e05a      	b.n	3114 <process_event+0x110>
			transit = mgr->transitions->start;
    305e:	6923      	ldr	r3, [r4, #16]
    3060:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3062:	2106      	movs	r1, #6
    3064:	4620      	mov	r0, r4
    3066:	f00e fee0 	bl	11e2a <set_state>
		res = 0;
    306a:	f04f 0900 	mov.w	r9, #0
    306e:	e051      	b.n	3114 <process_event+0x110>
			transit = mgr->transitions->stop;
    3070:	6923      	ldr	r3, [r4, #16]
    3072:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3074:	2104      	movs	r1, #4
    3076:	4620      	mov	r0, r4
    3078:	f00e fed7 	bl	11e2a <set_state>
		res = 0;
    307c:	f04f 0900 	mov.w	r9, #0
    3080:	e048      	b.n	3114 <process_event+0x110>
			transit = mgr->transitions->reset;
    3082:	6923      	ldr	r3, [r4, #16]
    3084:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    3086:	2105      	movs	r1, #5
    3088:	4620      	mov	r0, r4
    308a:	f00e fece 	bl	11e2a <set_state>
		res = 0;
    308e:	f04f 0900 	mov.w	r9, #0
    3092:	e03f      	b.n	3114 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3094:	2200      	movs	r2, #0
    3096:	e046      	b.n	3126 <process_event+0x122>
    3098:	2200      	movs	r2, #0
    309a:	e044      	b.n	3126 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    309c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    30a0:	83a3      	strh	r3, [r4, #28]
    30a2:	f385 8811 	msr	BASEPRI, r5
    30a6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    30aa:	2900      	cmp	r1, #0
    30ac:	d144      	bne.n	3138 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    30ae:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    30b0:	b12b      	cbz	r3, 30be <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    30b2:	464b      	mov	r3, r9
    30b4:	4642      	mov	r2, r8
    30b6:	4669      	mov	r1, sp
    30b8:	4620      	mov	r0, r4
    30ba:	f00e ff6c 	bl	11f96 <notify_all>
			if (transit != NULL) {
    30be:	b117      	cbz	r7, 30c6 <process_event+0xc2>
				transit(mgr, transition_complete);
    30c0:	4925      	ldr	r1, [pc, #148]	; (3158 <process_event+0x154>)
    30c2:	4620      	mov	r0, r4
    30c4:	47b8      	blx	r7
	__asm__ volatile(
    30c6:	f04f 0320 	mov.w	r3, #32
    30ca:	f3ef 8511 	mrs	r5, BASEPRI
    30ce:	f383 8812 	msr	BASEPRI_MAX, r3
    30d2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    30d6:	8ba3      	ldrh	r3, [r4, #28]
    30d8:	f023 0308 	bic.w	r3, r3, #8
    30dc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    30de:	8ba3      	ldrh	r3, [r4, #28]
    30e0:	f013 0f10 	tst.w	r3, #16
    30e4:	d02e      	beq.n	3144 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    30e6:	f023 0310 	bic.w	r3, r3, #16
    30ea:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    30ec:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    30ee:	8ba6      	ldrh	r6, [r4, #28]
    30f0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    30f4:	2800      	cmp	r0, #0
    30f6:	d09a      	beq.n	302e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    30f8:	2802      	cmp	r0, #2
    30fa:	d0a3      	beq.n	3044 <process_event+0x40>
		if (evt == EVT_NOP) {
    30fc:	2800      	cmp	r0, #0
    30fe:	d096      	beq.n	302e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    3100:	2801      	cmp	r0, #1
    3102:	d0a3      	beq.n	304c <process_event+0x48>
		} else if (evt == EVT_START) {
    3104:	2803      	cmp	r0, #3
    3106:	d0aa      	beq.n	305e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    3108:	2804      	cmp	r0, #4
    310a:	d0b1      	beq.n	3070 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    310c:	2805      	cmp	r0, #5
    310e:	d0b8      	beq.n	3082 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    3110:	2700      	movs	r7, #0
		res = 0;
    3112:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3114:	8ba3      	ldrh	r3, [r4, #28]
    3116:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    311a:	45b0      	cmp	r8, r6
    311c:	d0ba      	beq.n	3094 <process_event+0x90>
    311e:	68a2      	ldr	r2, [r4, #8]
    3120:	2a00      	cmp	r2, #0
    3122:	d0b9      	beq.n	3098 <process_event+0x94>
    3124:	2201      	movs	r2, #1
		if (do_monitors
    3126:	4611      	mov	r1, r2
    3128:	2a00      	cmp	r2, #0
    312a:	d1b7      	bne.n	309c <process_event+0x98>
    312c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    312e:	2a00      	cmp	r2, #0
    3130:	d1b4      	bne.n	309c <process_event+0x98>
		    || (transit != NULL)) {
    3132:	2f00      	cmp	r7, #0
    3134:	d1b2      	bne.n	309c <process_event+0x98>
    3136:	e7d2      	b.n	30de <process_event+0xda>
				notify_monitors(mgr, state, res);
    3138:	464a      	mov	r2, r9
    313a:	4641      	mov	r1, r8
    313c:	4620      	mov	r0, r4
    313e:	f00e fe7c 	bl	11e3a <notify_monitors>
    3142:	e7b4      	b.n	30ae <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3144:	f013 0f20 	tst.w	r3, #32
    3148:	d004      	beq.n	3154 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    314a:	f023 0320 	bic.w	r3, r3, #32
    314e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3150:	2002      	movs	r0, #2
    3152:	e7cc      	b.n	30ee <process_event+0xea>
		evt = EVT_NOP;
    3154:	2000      	movs	r0, #0
    3156:	e7ca      	b.n	30ee <process_event+0xea>
    3158:	00011fc5 	.word	0x00011fc5

0000315c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    315c:	b410      	push	{r4}
    315e:	4604      	mov	r4, r0
	const char *sp = *str;
    3160:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3162:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3164:	7813      	ldrb	r3, [r2, #0]
    3166:	4907      	ldr	r1, [pc, #28]	; (3184 <extract_decimal+0x28>)
    3168:	5c59      	ldrb	r1, [r3, r1]
    316a:	f011 0f04 	tst.w	r1, #4
    316e:	d006      	beq.n	317e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    3170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3174:	3201      	adds	r2, #1
    3176:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    317a:	3830      	subs	r0, #48	; 0x30
    317c:	e7f2      	b.n	3164 <extract_decimal+0x8>
	}
	*str = sp;
    317e:	6022      	str	r2, [r4, #0]
	return val;
}
    3180:	bc10      	pop	{r4}
    3182:	4770      	bx	lr
    3184:	0006bc29 	.word	0x0006bc29

00003188 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    318c:	b083      	sub	sp, #12
    318e:	4604      	mov	r4, r0
    3190:	460d      	mov	r5, r1
    3192:	9201      	str	r2, [sp, #4]
    3194:	469a      	mov	sl, r3
    3196:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    319a:	78d3      	ldrb	r3, [r2, #3]
    319c:	4a31      	ldr	r2, [pc, #196]	; (3264 <encode_uint+0xdc>)
    319e:	f813 b002 	ldrb.w	fp, [r3, r2]
    31a2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    31a6:	2b6f      	cmp	r3, #111	; 0x6f
    31a8:	d00f      	beq.n	31ca <encode_uint+0x42>
    31aa:	d906      	bls.n	31ba <encode_uint+0x32>
    31ac:	2b70      	cmp	r3, #112	; 0x70
    31ae:	d00f      	beq.n	31d0 <encode_uint+0x48>
    31b0:	2b78      	cmp	r3, #120	; 0x78
    31b2:	d110      	bne.n	31d6 <encode_uint+0x4e>
		return 16;
    31b4:	f04f 0910 	mov.w	r9, #16
    31b8:	e023      	b.n	3202 <encode_uint+0x7a>
	switch (specifier) {
    31ba:	2b58      	cmp	r3, #88	; 0x58
    31bc:	d002      	beq.n	31c4 <encode_uint+0x3c>
    31be:	f04f 090a 	mov.w	r9, #10
    31c2:	e01e      	b.n	3202 <encode_uint+0x7a>
		return 16;
    31c4:	f04f 0910 	mov.w	r9, #16
    31c8:	e01b      	b.n	3202 <encode_uint+0x7a>
		return 8;
    31ca:	f04f 0908 	mov.w	r9, #8
    31ce:	e018      	b.n	3202 <encode_uint+0x7a>
		return 16;
    31d0:	f04f 0910 	mov.w	r9, #16
    31d4:	e015      	b.n	3202 <encode_uint+0x7a>
	switch (specifier) {
    31d6:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    31da:	e012      	b.n	3202 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    31dc:	b2d2      	uxtb	r2, r2
    31de:	3230      	adds	r2, #48	; 0x30
    31e0:	b2d2      	uxtb	r2, r2
    31e2:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    31e6:	4632      	mov	r2, r6
    31e8:	463b      	mov	r3, r7
    31ea:	4620      	mov	r0, r4
    31ec:	4629      	mov	r1, r5
    31ee:	f7fd ff7b 	bl	10e8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    31f2:	42bd      	cmp	r5, r7
    31f4:	bf08      	it	eq
    31f6:	42b4      	cmpeq	r4, r6
    31f8:	d318      	bcc.n	322c <encode_uint+0xa4>
    31fa:	45d0      	cmp	r8, sl
    31fc:	d916      	bls.n	322c <encode_uint+0xa4>
		value /= radix;
    31fe:	4604      	mov	r4, r0
    3200:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    3202:	464e      	mov	r6, r9
    3204:	2700      	movs	r7, #0
    3206:	464a      	mov	r2, r9
    3208:	463b      	mov	r3, r7
    320a:	4620      	mov	r0, r4
    320c:	4629      	mov	r1, r5
    320e:	f7fd ff6b 	bl	10e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3212:	2a09      	cmp	r2, #9
    3214:	d9e2      	bls.n	31dc <encode_uint+0x54>
    3216:	f1bb 0f01 	cmp.w	fp, #1
    321a:	d003      	beq.n	3224 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    321c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    321e:	3257      	adds	r2, #87	; 0x57
    3220:	b2d2      	uxtb	r2, r2
    3222:	e7de      	b.n	31e2 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3224:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3226:	3237      	adds	r2, #55	; 0x37
    3228:	b2d2      	uxtb	r2, r2
    322a:	e7da      	b.n	31e2 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    322c:	9b01      	ldr	r3, [sp, #4]
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	f013 0f20 	tst.w	r3, #32
    3234:	d005      	beq.n	3242 <encode_uint+0xba>
		if (radix == 8) {
    3236:	f1b9 0f08 	cmp.w	r9, #8
    323a:	d006      	beq.n	324a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    323c:	f1b9 0f10 	cmp.w	r9, #16
    3240:	d009      	beq.n	3256 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    3242:	4640      	mov	r0, r8
    3244:	b003      	add	sp, #12
    3246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    324a:	9a01      	ldr	r2, [sp, #4]
    324c:	7893      	ldrb	r3, [r2, #2]
    324e:	f043 0308 	orr.w	r3, r3, #8
    3252:	7093      	strb	r3, [r2, #2]
    3254:	e7f5      	b.n	3242 <encode_uint+0xba>
			conv->altform_0c = true;
    3256:	9a01      	ldr	r2, [sp, #4]
    3258:	7893      	ldrb	r3, [r2, #2]
    325a:	f043 0310 	orr.w	r3, r3, #16
    325e:	7093      	strb	r3, [r2, #2]
    3260:	e7ef      	b.n	3242 <encode_uint+0xba>
    3262:	bf00      	nop
    3264:	0006bc29 	.word	0x0006bc29

00003268 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    326c:	b093      	sub	sp, #76	; 0x4c
    326e:	4606      	mov	r6, r0
    3270:	460d      	mov	r5, r1
    3272:	4692      	mov	sl, r2
    3274:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3276:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3278:	f89a 0000 	ldrb.w	r0, [sl]
    327c:	2800      	cmp	r0, #0
    327e:	f000 84d6 	beq.w	3c2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x196>
		if (*fp != '%') {
    3282:	2825      	cmp	r0, #37	; 0x25
    3284:	d008      	beq.n	3298 <cbvprintf+0x30>
			OUTC(*fp++);
    3286:	f10a 0a01 	add.w	sl, sl, #1
    328a:	4629      	mov	r1, r5
    328c:	47b0      	blx	r6
    328e:	2800      	cmp	r0, #0
    3290:	f2c0 84ce 	blt.w	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3294:	3401      	adds	r4, #1
			continue;
    3296:	e7ef      	b.n	3278 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    3298:	2300      	movs	r3, #0
    329a:	9306      	str	r3, [sp, #24]
    329c:	9307      	str	r3, [sp, #28]
    329e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    32a0:	9308      	str	r3, [sp, #32]
    32a2:	9309      	str	r3, [sp, #36]	; 0x24
    32a4:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    32a6:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    32aa:	f89a 3001 	ldrb.w	r3, [sl, #1]
    32ae:	2b25      	cmp	r3, #37	; 0x25
    32b0:	d001      	beq.n	32b6 <cbvprintf+0x4e>
	bool loop = true;
    32b2:	2701      	movs	r7, #1
    32b4:	e02c      	b.n	3310 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    32b6:	f10a 0802 	add.w	r8, sl, #2
    32ba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    32be:	e1a8      	b.n	3612 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    32c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32c4:	f043 0304 	orr.w	r3, r3, #4
    32c8:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    32cc:	b1ff      	cbz	r7, 330e <cbvprintf+0xa6>
			++sp;
    32ce:	f108 0801 	add.w	r8, r8, #1
    32d2:	e01c      	b.n	330e <cbvprintf+0xa6>
			conv->flag_plus = true;
    32d4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32d8:	f043 0308 	orr.w	r3, r3, #8
    32dc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32e0:	e7f4      	b.n	32cc <cbvprintf+0x64>
			conv->flag_space = true;
    32e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32e6:	f043 0310 	orr.w	r3, r3, #16
    32ea:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32ee:	e7ed      	b.n	32cc <cbvprintf+0x64>
			conv->flag_hash = true;
    32f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32f4:	f043 0320 	orr.w	r3, r3, #32
    32f8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32fc:	e7e6      	b.n	32cc <cbvprintf+0x64>
			conv->flag_zero = true;
    32fe:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3306:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    330a:	e7df      	b.n	32cc <cbvprintf+0x64>
		switch (*sp) {
    330c:	2700      	movs	r7, #0
	} while (loop);
    330e:	b34f      	cbz	r7, 3364 <cbvprintf+0xfc>
		switch (*sp) {
    3310:	f898 3000 	ldrb.w	r3, [r8]
    3314:	3b20      	subs	r3, #32
    3316:	2b10      	cmp	r3, #16
    3318:	d8f8      	bhi.n	330c <cbvprintf+0xa4>
    331a:	a201      	add	r2, pc, #4	; (adr r2, 3320 <cbvprintf+0xb8>)
    331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3320:	000032e3 	.word	0x000032e3
    3324:	0000330d 	.word	0x0000330d
    3328:	0000330d 	.word	0x0000330d
    332c:	000032f1 	.word	0x000032f1
    3330:	0000330d 	.word	0x0000330d
    3334:	0000330d 	.word	0x0000330d
    3338:	0000330d 	.word	0x0000330d
    333c:	0000330d 	.word	0x0000330d
    3340:	0000330d 	.word	0x0000330d
    3344:	0000330d 	.word	0x0000330d
    3348:	0000330d 	.word	0x0000330d
    334c:	000032d5 	.word	0x000032d5
    3350:	0000330d 	.word	0x0000330d
    3354:	000032c1 	.word	0x000032c1
    3358:	0000330d 	.word	0x0000330d
    335c:	0000330d 	.word	0x0000330d
    3360:	000032ff 	.word	0x000032ff
	if (conv->flag_zero && conv->flag_dash) {
    3364:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3368:	f003 0344 	and.w	r3, r3, #68	; 0x44
    336c:	2b44      	cmp	r3, #68	; 0x44
    336e:	d06d      	beq.n	344c <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    3370:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    3374:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    337c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    3380:	f898 3000 	ldrb.w	r3, [r8]
    3384:	2b2a      	cmp	r3, #42	; 0x2a
    3386:	d068      	beq.n	345a <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    3388:	a805      	add	r0, sp, #20
    338a:	f7ff fee7 	bl	315c <extract_decimal>
	if (sp != wp) {
    338e:	9b05      	ldr	r3, [sp, #20]
    3390:	4598      	cmp	r8, r3
    3392:	d012      	beq.n	33ba <cbvprintf+0x152>
		conv->width_present = true;
    3394:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    339c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    33a0:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    33a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    33a6:	2800      	cmp	r0, #0
    33a8:	db60      	blt.n	346c <cbvprintf+0x204>
    33aa:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    33ac:	4313      	orrs	r3, r2
    33ae:	f89d 2020 	ldrb.w	r2, [sp, #32]
    33b2:	f363 0241 	bfi	r2, r3, #1, #1
    33b6:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    33ba:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    33bc:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    33be:	781b      	ldrb	r3, [r3, #0]
    33c0:	2b2e      	cmp	r3, #46	; 0x2e
    33c2:	bf14      	ite	ne
    33c4:	2300      	movne	r3, #0
    33c6:	2301      	moveq	r3, #1
    33c8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    33cc:	f363 0241 	bfi	r2, r3, #1, #1
    33d0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    33d4:	2b00      	cmp	r3, #0
    33d6:	d04b      	beq.n	3470 <cbvprintf+0x208>
	++sp;
    33d8:	9b05      	ldr	r3, [sp, #20]
    33da:	1c5a      	adds	r2, r3, #1
    33dc:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    33de:	785b      	ldrb	r3, [r3, #1]
    33e0:	2b2a      	cmp	r3, #42	; 0x2a
    33e2:	d048      	beq.n	3476 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    33e4:	a805      	add	r0, sp, #20
    33e6:	f7ff feb9 	bl	315c <extract_decimal>
	conv->prec_value = prec;
    33ea:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    33ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    33f4:	2800      	cmp	r0, #0
    33f6:	db47      	blt.n	3488 <cbvprintf+0x220>
    33f8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    33fa:	4313      	orrs	r3, r2
    33fc:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3400:	f363 0241 	bfi	r2, r3, #1, #1
    3404:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    3408:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    340c:	f898 3000 	ldrb.w	r3, [r8]
    3410:	3b4c      	subs	r3, #76	; 0x4c
    3412:	2b2e      	cmp	r3, #46	; 0x2e
    3414:	f200 80dc 	bhi.w	35d0 <cbvprintf+0x368>
    3418:	e8df f003 	tbb	[pc, r3]
    341c:	dadadaca 	.word	0xdadadaca
    3420:	dadadada 	.word	0xdadadada
    3424:	dadadada 	.word	0xdadadada
    3428:	dadadada 	.word	0xdadadada
    342c:	dadadada 	.word	0xdadadada
    3430:	dadadada 	.word	0xdadadada
    3434:	dadadada 	.word	0xdadadada
    3438:	da6ada38 	.word	0xda6ada38
    343c:	dadada51 	.word	0xdadada51
    3440:	dadadada 	.word	0xdadadada
    3444:	dadadac0 	.word	0xdadadac0
    3448:	dada      	.short	0xdada
    344a:	b6          	.byte	0xb6
    344b:	00          	.byte	0x00
		conv->flag_zero = false;
    344c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3450:	f36f 1386 	bfc	r3, #6, #1
    3454:	f88d 3020 	strb.w	r3, [sp, #32]
    3458:	e78a      	b.n	3370 <cbvprintf+0x108>
		conv->width_star = true;
    345a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    345e:	f043 0301 	orr.w	r3, r3, #1
    3462:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3466:	4643      	mov	r3, r8
    3468:	3301      	adds	r3, #1
    346a:	e7a7      	b.n	33bc <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    346c:	2201      	movs	r2, #1
    346e:	e79d      	b.n	33ac <cbvprintf+0x144>
		return sp;
    3470:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3474:	e7ca      	b.n	340c <cbvprintf+0x1a4>
		conv->prec_star = true;
    3476:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    347a:	f043 0304 	orr.w	r3, r3, #4
    347e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3482:	f102 0801 	add.w	r8, r2, #1
    3486:	e7c1      	b.n	340c <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    3488:	2201      	movs	r2, #1
    348a:	e7b6      	b.n	33fa <cbvprintf+0x192>
		if (*++sp == 'h') {
    348c:	f108 0201 	add.w	r2, r8, #1
    3490:	f898 3001 	ldrb.w	r3, [r8, #1]
    3494:	2b68      	cmp	r3, #104	; 0x68
    3496:	d008      	beq.n	34aa <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    3498:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    349c:	2102      	movs	r1, #2
    349e:	f361 03c6 	bfi	r3, r1, #3, #4
    34a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    34a6:	4690      	mov	r8, r2
    34a8:	e02b      	b.n	3502 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    34aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34ae:	2201      	movs	r2, #1
    34b0:	f362 03c6 	bfi	r3, r2, #3, #4
    34b4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    34b8:	f108 0802 	add.w	r8, r8, #2
    34bc:	e021      	b.n	3502 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    34be:	f108 0201 	add.w	r2, r8, #1
    34c2:	f898 3001 	ldrb.w	r3, [r8, #1]
    34c6:	2b6c      	cmp	r3, #108	; 0x6c
    34c8:	d008      	beq.n	34dc <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    34ca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34ce:	2103      	movs	r1, #3
    34d0:	f361 03c6 	bfi	r3, r1, #3, #4
    34d4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    34d8:	4690      	mov	r8, r2
    34da:	e012      	b.n	3502 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    34dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34e0:	2204      	movs	r2, #4
    34e2:	f362 03c6 	bfi	r3, r2, #3, #4
    34e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    34ea:	f108 0802 	add.w	r8, r8, #2
    34ee:	e008      	b.n	3502 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    34f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34f4:	2205      	movs	r2, #5
    34f6:	f362 03c6 	bfi	r3, r2, #3, #4
    34fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    34fe:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    3502:	f818 3b01 	ldrb.w	r3, [r8], #1
    3506:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    350a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    350e:	2a37      	cmp	r2, #55	; 0x37
    3510:	f200 8150 	bhi.w	37b4 <cbvprintf+0x54c>
    3514:	e8df f012 	tbh	[pc, r2, lsl #1]
    3518:	014e0126 	.word	0x014e0126
    351c:	014e014e 	.word	0x014e014e
    3520:	01260126 	.word	0x01260126
    3524:	014e0126 	.word	0x014e0126
    3528:	014e014e 	.word	0x014e014e
    352c:	014e014e 	.word	0x014e014e
    3530:	014e014e 	.word	0x014e014e
    3534:	014e014e 	.word	0x014e014e
    3538:	014e014e 	.word	0x014e014e
    353c:	014e014e 	.word	0x014e014e
    3540:	014e014e 	.word	0x014e014e
    3544:	0113014e 	.word	0x0113014e
    3548:	014e014e 	.word	0x014e014e
    354c:	014e014e 	.word	0x014e014e
    3550:	014e014e 	.word	0x014e014e
    3554:	014e014e 	.word	0x014e014e
    3558:	014e0126 	.word	0x014e0126
    355c:	00630113 	.word	0x00630113
    3560:	01260126 	.word	0x01260126
    3564:	014e0126 	.word	0x014e0126
    3568:	014e0063 	.word	0x014e0063
    356c:	014e014e 	.word	0x014e014e
    3570:	012f014e 	.word	0x012f014e
    3574:	013f0113 	.word	0x013f0113
    3578:	014e014e 	.word	0x014e014e
    357c:	014e013f 	.word	0x014e013f
    3580:	014e0113 	.word	0x014e0113
    3584:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    3588:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    358c:	2206      	movs	r2, #6
    358e:	f362 03c6 	bfi	r3, r2, #3, #4
    3592:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3596:	f108 0801 	add.w	r8, r8, #1
		break;
    359a:	e7b2      	b.n	3502 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    359c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35a0:	2207      	movs	r2, #7
    35a2:	f362 03c6 	bfi	r3, r2, #3, #4
    35a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    35aa:	f108 0801 	add.w	r8, r8, #1
		break;
    35ae:	e7a8      	b.n	3502 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    35b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35b4:	2208      	movs	r2, #8
    35b6:	f362 03c6 	bfi	r3, r2, #3, #4
    35ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    35be:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    35c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    35c6:	f043 0302 	orr.w	r3, r3, #2
    35ca:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    35ce:	e798      	b.n	3502 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    35d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35d4:	f36f 03c6 	bfc	r3, #3, #4
    35d8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    35dc:	e791      	b.n	3502 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    35de:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    35e2:	2101      	movs	r1, #1
    35e4:	f361 0202 	bfi	r2, r1, #0, #3
    35e8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    35ec:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    35f0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    35f4:	2a40      	cmp	r2, #64	; 0x40
    35f6:	f000 80aa 	beq.w	374e <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    35fa:	2b63      	cmp	r3, #99	; 0x63
    35fc:	f000 80ae 	beq.w	375c <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    3600:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3604:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3608:	4317      	orrs	r7, r2
    360a:	f367 0341 	bfi	r3, r7, #1, #1
    360e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    3612:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3616:	f013 0f01 	tst.w	r3, #1
    361a:	f000 80da 	beq.w	37d2 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    361e:	9b03      	ldr	r3, [sp, #12]
    3620:	1d1a      	adds	r2, r3, #4
    3622:	9203      	str	r2, [sp, #12]
    3624:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    3626:	2f00      	cmp	r7, #0
    3628:	f2c0 80cb 	blt.w	37c2 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    362c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3630:	f013 0f04 	tst.w	r3, #4
    3634:	f000 80df 	beq.w	37f6 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    3638:	9b03      	ldr	r3, [sp, #12]
    363a:	1d1a      	adds	r2, r3, #4
    363c:	9203      	str	r2, [sp, #12]
    363e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    3642:	f1bb 0f00 	cmp.w	fp, #0
    3646:	f2c0 80cd 	blt.w	37e4 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    364a:	2300      	movs	r3, #0
    364c:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    364e:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3650:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3654:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3658:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    365c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3660:	2b01      	cmp	r3, #1
    3662:	f000 80d1 	beq.w	3808 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3666:	2b02      	cmp	r3, #2
    3668:	f000 8116 	beq.w	3898 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    366c:	2b04      	cmp	r3, #4
    366e:	f000 8167 	beq.w	3940 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3672:	2b03      	cmp	r3, #3
    3674:	f000 817e 	beq.w	3974 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    3678:	f89d 9020 	ldrb.w	r9, [sp, #32]
    367c:	f019 0303 	ands.w	r3, r9, #3
    3680:	9302      	str	r3, [sp, #8]
    3682:	f040 817d 	bne.w	3980 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3686:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    368a:	3b25      	subs	r3, #37	; 0x25
    368c:	2b53      	cmp	r3, #83	; 0x53
    368e:	f200 8233 	bhi.w	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3692:	e8df f013 	tbh	[pc, r3, lsl #1]
    3696:	0181      	.short	0x0181
    3698:	02310231 	.word	0x02310231
    369c:	02310231 	.word	0x02310231
    36a0:	02310231 	.word	0x02310231
    36a4:	02310231 	.word	0x02310231
    36a8:	02310231 	.word	0x02310231
    36ac:	02310231 	.word	0x02310231
    36b0:	02310231 	.word	0x02310231
    36b4:	02310231 	.word	0x02310231
    36b8:	02310231 	.word	0x02310231
    36bc:	02310231 	.word	0x02310231
    36c0:	02310231 	.word	0x02310231
    36c4:	02310231 	.word	0x02310231
    36c8:	02310231 	.word	0x02310231
    36cc:	02310231 	.word	0x02310231
    36d0:	02310231 	.word	0x02310231
    36d4:	02310231 	.word	0x02310231
    36d8:	02310231 	.word	0x02310231
    36dc:	02310231 	.word	0x02310231
    36e0:	02310231 	.word	0x02310231
    36e4:	02310231 	.word	0x02310231
    36e8:	02310231 	.word	0x02310231
    36ec:	02310231 	.word	0x02310231
    36f0:	02310231 	.word	0x02310231
    36f4:	02310231 	.word	0x02310231
    36f8:	02310231 	.word	0x02310231
    36fc:	023101c7 	.word	0x023101c7
    3700:	02310231 	.word	0x02310231
    3704:	02310231 	.word	0x02310231
    3708:	02310231 	.word	0x02310231
    370c:	02310231 	.word	0x02310231
    3710:	01a10231 	.word	0x01a10231
    3714:	023101ab 	.word	0x023101ab
    3718:	02310231 	.word	0x02310231
    371c:	01ab0231 	.word	0x01ab0231
    3720:	02310231 	.word	0x02310231
    3724:	02310231 	.word	0x02310231
    3728:	01c70208 	.word	0x01c70208
    372c:	023101ea 	.word	0x023101ea
    3730:	018f0231 	.word	0x018f0231
    3734:	01c70231 	.word	0x01c70231
    3738:	02310231 	.word	0x02310231
    373c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    373e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3742:	2102      	movs	r1, #2
    3744:	f361 0202 	bfi	r2, r1, #0, #3
    3748:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    374c:	e74e      	b.n	35ec <cbvprintf+0x384>
			conv->invalid = true;
    374e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3752:	f041 0101 	orr.w	r1, r1, #1
    3756:	f88d 1020 	strb.w	r1, [sp, #32]
    375a:	e74e      	b.n	35fa <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    375c:	1e17      	subs	r7, r2, #0
    375e:	bf18      	it	ne
    3760:	2701      	movne	r7, #1
    3762:	e74d      	b.n	3600 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    3764:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3768:	2204      	movs	r2, #4
    376a:	f362 0302 	bfi	r3, r2, #0, #3
    376e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    3772:	2701      	movs	r7, #1
			break;
    3774:	e744      	b.n	3600 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3776:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    377a:	2203      	movs	r2, #3
    377c:	f362 0302 	bfi	r3, r2, #0, #3
    3780:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3784:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3788:	f003 0378 	and.w	r3, r3, #120	; 0x78
    378c:	2b40      	cmp	r3, #64	; 0x40
    378e:	f47f af37 	bne.w	3600 <cbvprintf+0x398>
			unsupported = true;
    3792:	2701      	movs	r7, #1
    3794:	e734      	b.n	3600 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3796:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    379a:	2203      	movs	r2, #3
    379c:	f362 0302 	bfi	r3, r2, #0, #3
    37a0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    37a4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    37a8:	f013 0f78 	tst.w	r3, #120	; 0x78
    37ac:	f43f af28 	beq.w	3600 <cbvprintf+0x398>
			unsupported = true;
    37b0:	2701      	movs	r7, #1
    37b2:	e725      	b.n	3600 <cbvprintf+0x398>
		conv->invalid = true;
    37b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    37b8:	f043 0301 	orr.w	r3, r3, #1
    37bc:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    37c0:	e71e      	b.n	3600 <cbvprintf+0x398>
				conv->flag_dash = true;
    37c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    37c6:	f043 0304 	orr.w	r3, r3, #4
    37ca:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    37ce:	427f      	negs	r7, r7
    37d0:	e72c      	b.n	362c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    37d2:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    37d6:	2b00      	cmp	r3, #0
    37d8:	db02      	blt.n	37e0 <cbvprintf+0x578>
		int width = -1;
    37da:	f04f 37ff 	mov.w	r7, #4294967295
    37de:	e725      	b.n	362c <cbvprintf+0x3c4>
			width = conv->width_value;
    37e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    37e2:	e723      	b.n	362c <cbvprintf+0x3c4>
				conv->prec_present = false;
    37e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    37e8:	f36f 0341 	bfc	r3, #1, #1
    37ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    37f0:	f04f 3bff 	mov.w	fp, #4294967295
    37f4:	e729      	b.n	364a <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    37f6:	f013 0f02 	tst.w	r3, #2
    37fa:	d002      	beq.n	3802 <cbvprintf+0x59a>
			precision = conv->prec_value;
    37fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    3800:	e723      	b.n	364a <cbvprintf+0x3e2>
		int precision = -1;
    3802:	f04f 3bff 	mov.w	fp, #4294967295
    3806:	e720      	b.n	364a <cbvprintf+0x3e2>
			switch (length_mod) {
    3808:	1ecb      	subs	r3, r1, #3
    380a:	2b04      	cmp	r3, #4
    380c:	d804      	bhi.n	3818 <cbvprintf+0x5b0>
    380e:	e8df f003 	tbb	[pc, r3]
    3812:	1d0b      	.short	0x1d0b
    3814:	3529      	.short	0x3529
    3816:	35          	.byte	0x35
    3817:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    3818:	9b03      	ldr	r3, [sp, #12]
    381a:	1d1a      	adds	r2, r3, #4
    381c:	9203      	str	r2, [sp, #12]
    381e:	681a      	ldr	r2, [r3, #0]
    3820:	17d3      	asrs	r3, r2, #31
    3822:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3826:	e006      	b.n	3836 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    3828:	9b03      	ldr	r3, [sp, #12]
    382a:	1d1a      	adds	r2, r3, #4
    382c:	9203      	str	r2, [sp, #12]
    382e:	681a      	ldr	r2, [r3, #0]
    3830:	17d3      	asrs	r3, r2, #31
    3832:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3836:	2901      	cmp	r1, #1
    3838:	d028      	beq.n	388c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    383a:	2902      	cmp	r1, #2
    383c:	f47f af1c 	bne.w	3678 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    3840:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3844:	17d3      	asrs	r3, r2, #31
    3846:	e9cd 2306 	strd	r2, r3, [sp, #24]
    384a:	e715      	b.n	3678 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    384c:	9b03      	ldr	r3, [sp, #12]
    384e:	3307      	adds	r3, #7
    3850:	f023 0307 	bic.w	r3, r3, #7
    3854:	f103 0208 	add.w	r2, r3, #8
    3858:	9203      	str	r2, [sp, #12]
    385a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    385e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3862:	e7e8      	b.n	3836 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3864:	9b03      	ldr	r3, [sp, #12]
    3866:	3307      	adds	r3, #7
    3868:	f023 0307 	bic.w	r3, r3, #7
    386c:	f103 0208 	add.w	r2, r3, #8
    3870:	9203      	str	r2, [sp, #12]
    3872:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3876:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    387a:	e7dc      	b.n	3836 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    387c:	9b03      	ldr	r3, [sp, #12]
    387e:	1d1a      	adds	r2, r3, #4
    3880:	9203      	str	r2, [sp, #12]
    3882:	681a      	ldr	r2, [r3, #0]
    3884:	17d3      	asrs	r3, r2, #31
				value->sint =
    3886:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    388a:	e7d4      	b.n	3836 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    388c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3890:	9306      	str	r3, [sp, #24]
    3892:	2300      	movs	r3, #0
    3894:	9307      	str	r3, [sp, #28]
    3896:	e6ef      	b.n	3678 <cbvprintf+0x410>
			switch (length_mod) {
    3898:	1ecb      	subs	r3, r1, #3
    389a:	2b04      	cmp	r3, #4
    389c:	d804      	bhi.n	38a8 <cbvprintf+0x640>
    389e:	e8df f003 	tbb	[pc, r3]
    38a2:	1f0b      	.short	0x1f0b
    38a4:	4135      	.short	0x4135
    38a6:	41          	.byte	0x41
    38a7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    38a8:	9b03      	ldr	r3, [sp, #12]
    38aa:	1d1a      	adds	r2, r3, #4
    38ac:	9203      	str	r2, [sp, #12]
    38ae:	681b      	ldr	r3, [r3, #0]
    38b0:	9306      	str	r3, [sp, #24]
    38b2:	2300      	movs	r3, #0
    38b4:	9307      	str	r3, [sp, #28]
				break;
    38b6:	e01e      	b.n	38f6 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    38b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    38bc:	2b63      	cmp	r3, #99	; 0x63
    38be:	d007      	beq.n	38d0 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    38c0:	9b03      	ldr	r3, [sp, #12]
    38c2:	1d1a      	adds	r2, r3, #4
    38c4:	9203      	str	r2, [sp, #12]
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	9306      	str	r3, [sp, #24]
    38ca:	2300      	movs	r3, #0
    38cc:	9307      	str	r3, [sp, #28]
    38ce:	e012      	b.n	38f6 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    38d0:	9b03      	ldr	r3, [sp, #12]
    38d2:	1d1a      	adds	r2, r3, #4
    38d4:	9203      	str	r2, [sp, #12]
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	9306      	str	r3, [sp, #24]
    38da:	2300      	movs	r3, #0
    38dc:	9307      	str	r3, [sp, #28]
    38de:	e00a      	b.n	38f6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    38e0:	9b03      	ldr	r3, [sp, #12]
    38e2:	3307      	adds	r3, #7
    38e4:	f023 0307 	bic.w	r3, r3, #7
    38e8:	f103 0208 	add.w	r2, r3, #8
    38ec:	9203      	str	r2, [sp, #12]
    38ee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    38f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    38f6:	2901      	cmp	r1, #1
    38f8:	d01c      	beq.n	3934 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    38fa:	2902      	cmp	r1, #2
    38fc:	f47f aebc 	bne.w	3678 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    3900:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    3904:	9306      	str	r3, [sp, #24]
    3906:	2300      	movs	r3, #0
    3908:	9307      	str	r3, [sp, #28]
    390a:	e6b5      	b.n	3678 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    390c:	9b03      	ldr	r3, [sp, #12]
    390e:	3307      	adds	r3, #7
    3910:	f023 0307 	bic.w	r3, r3, #7
    3914:	f103 0208 	add.w	r2, r3, #8
    3918:	9203      	str	r2, [sp, #12]
    391a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    391e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3922:	e7e8      	b.n	38f6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    3924:	9b03      	ldr	r3, [sp, #12]
    3926:	1d1a      	adds	r2, r3, #4
    3928:	9203      	str	r2, [sp, #12]
    392a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    392c:	9306      	str	r3, [sp, #24]
    392e:	2300      	movs	r3, #0
    3930:	9307      	str	r3, [sp, #28]
				break;
    3932:	e7e0      	b.n	38f6 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    3934:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3938:	9306      	str	r3, [sp, #24]
    393a:	2300      	movs	r3, #0
    393c:	9307      	str	r3, [sp, #28]
    393e:	e69b      	b.n	3678 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    3940:	2908      	cmp	r1, #8
    3942:	d00b      	beq.n	395c <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3944:	9b03      	ldr	r3, [sp, #12]
    3946:	3307      	adds	r3, #7
    3948:	f023 0307 	bic.w	r3, r3, #7
    394c:	f103 0208 	add.w	r2, r3, #8
    3950:	9203      	str	r2, [sp, #12]
    3952:	e9d3 2300 	ldrd	r2, r3, [r3]
    3956:	e9cd 2306 	strd	r2, r3, [sp, #24]
    395a:	e68d      	b.n	3678 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    395c:	9b03      	ldr	r3, [sp, #12]
    395e:	3307      	adds	r3, #7
    3960:	f023 0307 	bic.w	r3, r3, #7
    3964:	f103 0208 	add.w	r2, r3, #8
    3968:	9203      	str	r2, [sp, #12]
    396a:	e9d3 2300 	ldrd	r2, r3, [r3]
    396e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3972:	e681      	b.n	3678 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3974:	9b03      	ldr	r3, [sp, #12]
    3976:	1d1a      	adds	r2, r3, #4
    3978:	9203      	str	r2, [sp, #12]
    397a:	681b      	ldr	r3, [r3, #0]
    397c:	9306      	str	r3, [sp, #24]
    397e:	e67b      	b.n	3678 <cbvprintf+0x410>
			OUTS(sp, fp);
    3980:	4643      	mov	r3, r8
    3982:	4652      	mov	r2, sl
    3984:	4629      	mov	r1, r5
    3986:	4630      	mov	r0, r6
    3988:	f00e fca2 	bl	122d0 <outs>
    398c:	2800      	cmp	r0, #0
    398e:	f2c0 814f 	blt.w	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3992:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3994:	46c2      	mov	sl, r8
			continue;
    3996:	e46f      	b.n	3278 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3998:	4629      	mov	r1, r5
    399a:	2025      	movs	r0, #37	; 0x25
    399c:	47b0      	blx	r6
    399e:	2800      	cmp	r0, #0
    39a0:	f2c0 8146 	blt.w	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    39a4:	3401      	adds	r4, #1
		char sign = 0;
    39a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    39aa:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    39ae:	f04f 0a00 	mov.w	sl, #0
			break;
    39b2:	e0a7      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		case 's': {
			bps = (const char *)value->ptr;
    39b4:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    39b8:	f1bb 0f00 	cmp.w	fp, #0
    39bc:	db08      	blt.n	39d0 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    39be:	4659      	mov	r1, fp
    39c0:	4650      	mov	r0, sl
    39c2:	f012 fd00 	bl	163c6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    39c6:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    39ca:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    39ce:	e099      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
				len = strlen(bps);
    39d0:	4650      	mov	r0, sl
    39d2:	f7fd fd7f 	bl	14d4 <strlen>
    39d6:	e7f6      	b.n	39c6 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    39d8:	9b06      	ldr	r3, [sp, #24]
    39da:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    39de:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    39e2:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    39e6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    39ea:	e08b      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    39ec:	f019 0f08 	tst.w	r9, #8
    39f0:	d105      	bne.n	39fe <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    39f2:	f019 0910 	ands.w	r9, r9, #16
    39f6:	d004      	beq.n	3a02 <cbvprintf+0x79a>
				sign = ' ';
    39f8:	f04f 0920 	mov.w	r9, #32
    39fc:	e001      	b.n	3a02 <cbvprintf+0x79a>
				sign = '+';
    39fe:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3a02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    3a06:	2a00      	cmp	r2, #0
    3a08:	f173 0100 	sbcs.w	r1, r3, #0
    3a0c:	db02      	blt.n	3a14 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    3a0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3a12:	e009      	b.n	3a28 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    3a14:	4252      	negs	r2, r2
    3a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    3a1e:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3a22:	e001      	b.n	3a28 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    3a24:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3a28:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a2c:	9300      	str	r3, [sp, #0]
    3a2e:	ab0c      	add	r3, sp, #48	; 0x30
    3a30:	aa08      	add	r2, sp, #32
    3a32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3a36:	f7ff fba7 	bl	3188 <encode_uint>
    3a3a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3a3c:	f1bb 0f00 	cmp.w	fp, #0
    3a40:	f2c0 8090 	blt.w	3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>
				size_t len = bpe - bps;
    3a44:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a48:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3a4c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3a50:	f36f 1286 	bfc	r2, #6, #1
    3a54:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3a58:	459b      	cmp	fp, r3
    3a5a:	f240 8086 	bls.w	3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
					conv->pad0_value = precision - (int)len;
    3a5e:	ebab 0303 	sub.w	r3, fp, r3
    3a62:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3a64:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3a68:	e04c      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3a6a:	9806      	ldr	r0, [sp, #24]
    3a6c:	b930      	cbnz	r0, 3a7c <cbvprintf+0x814>
		char sign = 0;
    3a6e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3a72:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3c38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a0>
			bps = "(nil)";
    3a76:	f1ab 0a05 	sub.w	sl, fp, #5
    3a7a:	e043      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a7c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a80:	9300      	str	r3, [sp, #0]
    3a82:	ab0c      	add	r3, sp, #48	; 0x30
    3a84:	aa08      	add	r2, sp, #32
    3a86:	2100      	movs	r1, #0
    3a88:	f7ff fb7e 	bl	3188 <encode_uint>
    3a8c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3a8e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3a92:	f043 0310 	orr.w	r3, r3, #16
    3a96:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3a9a:	2378      	movs	r3, #120	; 0x78
    3a9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3aa0:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3aa4:	e7ca      	b.n	3a3c <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3aa6:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3aa8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3aac:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3ab0:	2b07      	cmp	r3, #7
    3ab2:	d806      	bhi.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3ab4:	e8df f003 	tbb	[pc, r3]
    3ab8:	100e0c04 	.word	0x100e0c04
    3abc:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3ac0:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3ac2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3ac6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3aca:	f04f 0a00 	mov.w	sl, #0
}
    3ace:	e019      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		*(signed char *)dp = (signed char)count;
    3ad0:	7014      	strb	r4, [r2, #0]
		break;
    3ad2:	e7f6      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(short *)dp = (short)count;
    3ad4:	8014      	strh	r4, [r2, #0]
		break;
    3ad6:	e7f4      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(long *)dp = (long)count;
    3ad8:	6014      	str	r4, [r2, #0]
		break;
    3ada:	e7f2      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(long long *)dp = (long long)count;
    3adc:	4620      	mov	r0, r4
    3ade:	17e1      	asrs	r1, r4, #31
    3ae0:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3ae4:	e7ed      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(intmax_t *)dp = (intmax_t)count;
    3ae6:	4620      	mov	r0, r4
    3ae8:	17e1      	asrs	r1, r4, #31
    3aea:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3aee:	e7e8      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(size_t *)dp = (size_t)count;
    3af0:	6014      	str	r4, [r2, #0]
		break;
    3af2:	e7e6      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3af4:	6014      	str	r4, [r2, #0]
		break;
    3af6:	e7e4      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		switch (conv->specifier) {
    3af8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3afc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b00:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3b04:	f1ba 0f00 	cmp.w	sl, #0
    3b08:	f000 808e 	beq.w	3c28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x190>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3b0c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3b10:	f1b9 0f00 	cmp.w	r9, #0
    3b14:	d000      	beq.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
			nj_len += 1U;
    3b16:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3b18:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3b1c:	f011 0f10 	tst.w	r1, #16
    3b20:	d026      	beq.n	3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>
			nj_len += 2U;
    3b22:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b26:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3b28:	f011 0f40 	tst.w	r1, #64	; 0x40
    3b2c:	d001      	beq.n	3b32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9a>
			nj_len += conv->pad0_pre_exp;
    3b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b30:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3b32:	2f00      	cmp	r7, #0
    3b34:	dd32      	ble.n	3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>
			width -= (int)nj_len;
    3b36:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3b38:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3b3c:	f013 0f04 	tst.w	r3, #4
    3b40:	d12c      	bne.n	3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3b42:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b46:	d018      	beq.n	3b7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe2>
					if (sign != 0) {
    3b48:	f1b9 0f00 	cmp.w	r9, #0
    3b4c:	d018      	beq.n	3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
						OUTC(sign);
    3b4e:	4629      	mov	r1, r5
    3b50:	4648      	mov	r0, r9
    3b52:	47b0      	blx	r6
    3b54:	2800      	cmp	r0, #0
    3b56:	db6b      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3b58:	3401      	adds	r4, #1
						sign = 0;
    3b5a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3b5e:	2330      	movs	r3, #48	; 0x30
    3b60:	9302      	str	r3, [sp, #8]
    3b62:	e00f      	b.n	3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>
		const char *bpe = buf + sizeof(buf);
    3b64:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b68:	e7cc      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3b6a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b6e:	e7c9      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
		} else if (conv->altform_0) {
    3b70:	f011 0f08 	tst.w	r1, #8
    3b74:	d0d6      	beq.n	3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
			nj_len += 1U;
    3b76:	3201      	adds	r2, #1
    3b78:	e7d4      	b.n	3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
				char pad = ' ';
    3b7a:	2320      	movs	r3, #32
    3b7c:	9302      	str	r3, [sp, #8]
    3b7e:	e001      	b.n	3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>
					pad = '0';
    3b80:	2330      	movs	r3, #48	; 0x30
    3b82:	9302      	str	r3, [sp, #8]
    3b84:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3b86:	1e5f      	subs	r7, r3, #1
    3b88:	2b00      	cmp	r3, #0
    3b8a:	dd07      	ble.n	3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>
					OUTC(pad);
    3b8c:	4629      	mov	r1, r5
    3b8e:	9802      	ldr	r0, [sp, #8]
    3b90:	47b0      	blx	r6
    3b92:	2800      	cmp	r0, #0
    3b94:	db4c      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3b96:	3401      	adds	r4, #1
				while (width-- > 0) {
    3b98:	463b      	mov	r3, r7
    3b9a:	e7f4      	b.n	3b86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xee>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3b9c:	f1b9 0f00 	cmp.w	r9, #0
    3ba0:	d005      	beq.n	3bae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x116>
			OUTC(sign);
    3ba2:	4629      	mov	r1, r5
    3ba4:	4648      	mov	r0, r9
    3ba6:	47b0      	blx	r6
    3ba8:	2800      	cmp	r0, #0
    3baa:	db41      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3bac:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3bae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3bb2:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3bb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3bba:	4313      	orrs	r3, r2
    3bbc:	d005      	beq.n	3bca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x132>
				OUTC('0');
    3bbe:	4629      	mov	r1, r5
    3bc0:	2030      	movs	r0, #48	; 0x30
    3bc2:	47b0      	blx	r6
    3bc4:	2800      	cmp	r0, #0
    3bc6:	db33      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3bc8:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3bca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3bce:	f013 0f10 	tst.w	r3, #16
    3bd2:	d006      	beq.n	3be2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14a>
				OUTC(conv->specifier);
    3bd4:	4629      	mov	r1, r5
    3bd6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3bda:	47b0      	blx	r6
    3bdc:	2800      	cmp	r0, #0
    3bde:	db27      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3be0:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3be4:	f103 39ff 	add.w	r9, r3, #4294967295
    3be8:	2b00      	cmp	r3, #0
    3bea:	dd07      	ble.n	3bfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x164>
				OUTC('0');
    3bec:	4629      	mov	r1, r5
    3bee:	2030      	movs	r0, #48	; 0x30
    3bf0:	47b0      	blx	r6
    3bf2:	2800      	cmp	r0, #0
    3bf4:	db1c      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3bf6:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3bf8:	464b      	mov	r3, r9
    3bfa:	e7f3      	b.n	3be4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14c>
			}

			OUTS(bps, bpe);
    3bfc:	465b      	mov	r3, fp
    3bfe:	4652      	mov	r2, sl
    3c00:	4629      	mov	r1, r5
    3c02:	4630      	mov	r0, r6
    3c04:	f00e fb64 	bl	122d0 <outs>
    3c08:	2800      	cmp	r0, #0
    3c0a:	db11      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3c0c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3c0e:	2f00      	cmp	r7, #0
    3c10:	dd07      	ble.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
			OUTC(' ');
    3c12:	4629      	mov	r1, r5
    3c14:	2020      	movs	r0, #32
    3c16:	47b0      	blx	r6
    3c18:	2800      	cmp	r0, #0
    3c1a:	db09      	blt.n	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3c1c:	3401      	adds	r4, #1
			--width;
    3c1e:	3f01      	subs	r7, #1
    3c20:	e7f5      	b.n	3c0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x176>
		fp = extract_conversion(conv, sp);
    3c22:	46c2      	mov	sl, r8
    3c24:	f7ff bb28 	b.w	3278 <cbvprintf+0x10>
    3c28:	46c2      	mov	sl, r8
    3c2a:	f7ff bb25 	b.w	3278 <cbvprintf+0x10>
		}
	}

	return count;
    3c2e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3c30:	b013      	add	sp, #76	; 0x4c
    3c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c36:	bf00      	nop
    3c38:	00068da1 	.word	0x00068da1

00003c3c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3c3c:	b508      	push	{r3, lr}
    3c3e:	4604      	mov	r4, r0
    3c40:	f04f 0220 	mov.w	r2, #32
    3c44:	f3ef 8311 	mrs	r3, BASEPRI
    3c48:	f382 8812 	msr	BASEPRI_MAX, r2
    3c4c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3c50:	f00f f949 	bl	12ee6 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3c54:	4620      	mov	r0, r4
    3c56:	f000 fd07 	bl	4668 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3c5a:	4803      	ldr	r0, [pc, #12]	; (3c68 <sys_reboot+0x2c>)
    3c5c:	f00e f8c9 	bl	11df2 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3c60:	f000 fa78 	bl	4154 <arch_cpu_idle>
    3c64:	e7fc      	b.n	3c60 <sys_reboot+0x24>
    3c66:	bf00      	nop
    3c68:	00068da4 	.word	0x00068da4

00003c6c <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    3c6c:	b410      	push	{r4}
    3c6e:	f04f 0320 	mov.w	r3, #32
    3c72:	f3ef 8411 	mrs	r4, BASEPRI
    3c76:	f383 8812 	msr	BASEPRI_MAX, r3
    3c7a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    3c7e:	2101      	movs	r1, #1
    3c80:	4b12      	ldr	r3, [pc, #72]	; (3ccc <nordicsemi_nrf53_init+0x60>)
    3c82:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    3c86:	4a12      	ldr	r2, [pc, #72]	; (3cd0 <nordicsemi_nrf53_init+0x64>)
    3c88:	2302      	movs	r3, #2
    3c8a:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3c8e:	4811      	ldr	r0, [pc, #68]	; (3cd4 <nordicsemi_nrf53_init+0x68>)
    3c90:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3c94:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3c98:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3c9c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3ca0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    3ca4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3ca8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3cac:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    3cb0:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    3cb4:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    3cb8:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    3cbc:	f384 8811 	msr	BASEPRI, r4
    3cc0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3cc4:	2000      	movs	r0, #0
    3cc6:	bc10      	pop	{r4}
    3cc8:	4770      	bx	lr
    3cca:	bf00      	nop
    3ccc:	50001000 	.word	0x50001000
    3cd0:	50004000 	.word	0x50004000
    3cd4:	50842500 	.word	0x50842500

00003cd8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3cd8:	b170      	cbz	r0, 3cf8 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    3cda:	b508      	push	{r3, lr}
    3cdc:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    3cde:	4b07      	ldr	r3, [pc, #28]	; (3cfc <arch_busy_wait+0x24>)
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	4807      	ldr	r0, [pc, #28]	; (3d00 <arch_busy_wait+0x28>)
    3ce4:	fba0 1303 	umull	r1, r3, r0, r3
    3ce8:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    3cea:	fb03 f002 	mul.w	r0, r3, r2
    3cee:	4b05      	ldr	r3, [pc, #20]	; (3d04 <arch_busy_wait+0x2c>)
    3cf0:	f043 0301 	orr.w	r3, r3, #1
    3cf4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3cf6:	bd08      	pop	{r3, pc}
    3cf8:	4770      	bx	lr
    3cfa:	bf00      	nop
    3cfc:	20000060 	.word	0x20000060
    3d00:	431bde83 	.word	0x431bde83
    3d04:	000170c0 	.word	0x000170c0

00003d08 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3d08:	b084      	sub	sp, #16
    3d0a:	ab04      	add	r3, sp, #16
    3d0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3d10:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3d14:	2b06      	cmp	r3, #6
    3d16:	d001      	beq.n	3d1c <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3d18:	b004      	add	sp, #16
    3d1a:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    3d1c:	4b03      	ldr	r3, [pc, #12]	; (3d2c <pm_power_state_set+0x24>)
    3d1e:	2201      	movs	r2, #1
    3d20:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d24:	f3bf 8f4f 	dsb	sy
        __WFE();
    3d28:	bf20      	wfe
    while (true)
    3d2a:	e7fd      	b.n	3d28 <pm_power_state_set+0x20>
    3d2c:	50004000 	.word	0x50004000

00003d30 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3d30:	b1c1      	cbz	r1, 3d64 <tty_init+0x34>
{
    3d32:	b508      	push	{r3, lr}
    3d34:	4602      	mov	r2, r0
    3d36:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3d38:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3d3a:	2300      	movs	r3, #0
    3d3c:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3d3e:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3d40:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3d42:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3d44:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3d46:	8793      	strh	r3, [r2, #60]	; 0x3c
    3d48:	83d3      	strh	r3, [r2, #30]
    3d4a:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3d4c:	f04f 33ff 	mov.w	r3, #4294967295
    3d50:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3d52:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3d54:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3d56:	b143      	cbz	r3, 3d6a <tty_init+0x3a>
    3d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d5a:	b143      	cbz	r3, 3d6e <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3d5c:	4905      	ldr	r1, [pc, #20]	; (3d74 <tty_init+0x44>)
    3d5e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3d60:	2000      	movs	r0, #0
}
    3d62:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3d64:	f06f 0012 	mvn.w	r0, #18
}
    3d68:	4770      	bx	lr
	return 0;
    3d6a:	2000      	movs	r0, #0
    3d6c:	e7f9      	b.n	3d62 <tty_init+0x32>
    3d6e:	2000      	movs	r0, #0
    3d70:	e7f7      	b.n	3d62 <tty_init+0x32>
    3d72:	bf00      	nop
    3d74:	000124fb 	.word	0x000124fb

00003d78 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3d78:	b500      	push	{lr}
    3d7a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3d7c:	2201      	movs	r2, #1
    3d7e:	f10d 0107 	add.w	r1, sp, #7
    3d82:	4805      	ldr	r0, [pc, #20]	; (3d98 <console_getchar+0x20>)
    3d84:	f00e fbff 	bl	12586 <tty_read>
	if (res < 0) {
    3d88:	2800      	cmp	r0, #0
    3d8a:	db01      	blt.n	3d90 <console_getchar+0x18>
		return res;
	}

	return c;
    3d8c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3d90:	b003      	add	sp, #12
    3d92:	f85d fb04 	ldr.w	pc, [sp], #4
    3d96:	bf00      	nop
    3d98:	200202d8 	.word	0x200202d8

00003d9c <console_init>:

int console_init(void)
{
    3d9c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3d9e:	4810      	ldr	r0, [pc, #64]	; (3de0 <console_init+0x44>)
    3da0:	f011 feeb 	bl	15b7a <z_device_ready>
    3da4:	b1b0      	cbz	r0, 3dd4 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3da6:	490e      	ldr	r1, [pc, #56]	; (3de0 <console_init+0x44>)
    3da8:	480e      	ldr	r0, [pc, #56]	; (3de4 <console_init+0x48>)
    3daa:	f7ff ffc1 	bl	3d30 <tty_init>

	if (ret) {
    3dae:	4604      	mov	r4, r0
    3db0:	b970      	cbnz	r0, 3dd0 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3db2:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <console_init+0x44>)
    3db4:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3db8:	b17b      	cbz	r3, 3dda <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3dba:	4d0a      	ldr	r5, [pc, #40]	; (3de4 <console_init+0x48>)
    3dbc:	2210      	movs	r2, #16
    3dbe:	490a      	ldr	r1, [pc, #40]	; (3de8 <console_init+0x4c>)
    3dc0:	4628      	mov	r0, r5
    3dc2:	f00e fc21 	bl	12608 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3dc6:	2210      	movs	r2, #16
    3dc8:	4908      	ldr	r1, [pc, #32]	; (3dec <console_init+0x50>)
    3dca:	4628      	mov	r0, r5
    3dcc:	f00e fc01 	bl	125d2 <tty_set_rx_buf>

	return 0;
}
    3dd0:	4620      	mov	r0, r4
    3dd2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3dd4:	f06f 0412 	mvn.w	r4, #18
    3dd8:	e7fa      	b.n	3dd0 <console_init+0x34>
			return -ENOTSUP;
    3dda:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3dde:	e7f7      	b.n	3dd0 <console_init+0x34>
    3de0:	00016ce8 	.word	0x00016ce8
    3de4:	200202d8 	.word	0x200202d8
    3de8:	2002031c 	.word	0x2002031c
    3dec:	200202c8 	.word	0x200202c8

00003df0 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3df0:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3df2:	4c04      	ldr	r4, [pc, #16]	; (3e04 <__do_init_array_aux+0x14>)
    3df4:	4b04      	ldr	r3, [pc, #16]	; (3e08 <__do_init_array_aux+0x18>)
    3df6:	429c      	cmp	r4, r3
    3df8:	d203      	bcs.n	3e02 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3dfa:	f854 3b04 	ldr.w	r3, [r4], #4
    3dfe:	4798      	blx	r3
		func++) {
    3e00:	e7f8      	b.n	3df4 <__do_init_array_aux+0x4>
	}
}
    3e02:	bd10      	pop	{r4, pc}
    3e04:	00016f78 	.word	0x00016f78
    3e08:	00016f78 	.word	0x00016f78

00003e0c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3e0c:	4b06      	ldr	r3, [pc, #24]	; (3e28 <__do_global_ctors_aux+0x1c>)
    3e0e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3e10:	b14b      	cbz	r3, 3e26 <__do_global_ctors_aux+0x1a>
{
    3e12:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3e14:	1e5c      	subs	r4, r3, #1
    3e16:	4a04      	ldr	r2, [pc, #16]	; (3e28 <__do_global_ctors_aux+0x1c>)
    3e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e1c:	4798      	blx	r3
    3e1e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3e20:	2c00      	cmp	r4, #0
    3e22:	d1f7      	bne.n	3e14 <__do_global_ctors_aux+0x8>
	}
}
    3e24:	bd10      	pop	{r4, pc}
    3e26:	4770      	bx	lr
    3e28:	00016f70 	.word	0x00016f70

00003e2c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3e2c:	4b1b      	ldr	r3, [pc, #108]	; (3e9c <pm_system_resume+0x70>)
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d132      	bne.n	3e9a <pm_system_resume+0x6e>
{
    3e34:	b530      	push	{r4, r5, lr}
    3e36:	b085      	sub	sp, #20
		post_ops_done = 1;
    3e38:	4b18      	ldr	r3, [pc, #96]	; (3e9c <pm_system_resume+0x70>)
    3e3a:	2201      	movs	r2, #1
    3e3c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3e3e:	4b18      	ldr	r3, [pc, #96]	; (3ea0 <pm_system_resume+0x74>)
    3e40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3e44:	ab04      	add	r3, sp, #16
    3e46:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3e4a:	4b16      	ldr	r3, [pc, #88]	; (3ea4 <pm_system_resume+0x78>)
    3e4c:	b163      	cbz	r3, 3e68 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3e4e:	f00e fa5a 	bl	12306 <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3e52:	f04f 0320 	mov.w	r3, #32
    3e56:	f3ef 8511 	mrs	r5, BASEPRI
    3e5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e5e:	f3bf 8f6f 	isb	sy
    3e62:	4b11      	ldr	r3, [pc, #68]	; (3ea8 <pm_system_resume+0x7c>)
    3e64:	681c      	ldr	r4, [r3, #0]
    3e66:	e00a      	b.n	3e7e <pm_system_resume+0x52>
	__asm__ volatile(
    3e68:	2300      	movs	r3, #0
    3e6a:	f383 8811 	msr	BASEPRI, r3
    3e6e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3e72:	e7ee      	b.n	3e52 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e74:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3e76:	b10c      	cbz	r4, 3e7c <pm_system_resume+0x50>
	return node->next;
    3e78:	6823      	ldr	r3, [r4, #0]
    3e7a:	b143      	cbz	r3, 3e8e <pm_system_resume+0x62>
{
    3e7c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e7e:	b134      	cbz	r4, 3e8e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3e80:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3e82:	2b00      	cmp	r3, #0
    3e84:	d0f6      	beq.n	3e74 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3e86:	4a06      	ldr	r2, [pc, #24]	; (3ea0 <pm_system_resume+0x74>)
    3e88:	7810      	ldrb	r0, [r2, #0]
    3e8a:	4798      	blx	r3
    3e8c:	e7f2      	b.n	3e74 <pm_system_resume+0x48>
	__asm__ volatile(
    3e8e:	f385 8811 	msr	BASEPRI, r5
    3e92:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3e96:	b005      	add	sp, #20
    3e98:	bd30      	pop	{r4, r5, pc}
    3e9a:	4770      	bx	lr
    3e9c:	20000004 	.word	0x20000004
    3ea0:	20020338 	.word	0x20020338
    3ea4:	00012307 	.word	0x00012307
    3ea8:	20020330 	.word	0x20020330

00003eac <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3eac:	b570      	push	{r4, r5, r6, lr}
    3eae:	b088      	sub	sp, #32
    3eb0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3eb2:	4c2a      	ldr	r4, [pc, #168]	; (3f5c <pm_system_suspend+0xb0>)
    3eb4:	466d      	mov	r5, sp
    3eb6:	4601      	mov	r1, r0
    3eb8:	4628      	mov	r0, r5
    3eba:	f00e fbc1 	bl	12640 <pm_policy_next_state>
    3ebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3ec6:	7820      	ldrb	r0, [r4, #0]
    3ec8:	2800      	cmp	r0, #0
    3eca:	d045      	beq.n	3f58 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3ecc:	4b24      	ldr	r3, [pc, #144]	; (3f60 <pm_system_suspend+0xb4>)
    3ece:	2200      	movs	r2, #0
    3ed0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3ed2:	f1b6 3fff 	cmp.w	r6, #4294967295
    3ed6:	d10c      	bne.n	3ef2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3ed8:	f00b fc48 	bl	f76c <k_sched_lock>
	__asm__ volatile(
    3edc:	f04f 0320 	mov.w	r3, #32
    3ee0:	f3ef 8511 	mrs	r5, BASEPRI
    3ee4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ee8:	f3bf 8f6f 	isb	sy
	return list->head;
    3eec:	4b1d      	ldr	r3, [pc, #116]	; (3f64 <pm_system_suspend+0xb8>)
    3eee:	681c      	ldr	r4, [r3, #0]
    3ef0:	e016      	b.n	3f20 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3ef2:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3ef4:	0c59      	lsrs	r1, r3, #17
    3ef6:	03d8      	lsls	r0, r3, #15
    3ef8:	4c1b      	ldr	r4, [pc, #108]	; (3f68 <pm_system_suspend+0xbc>)
    3efa:	4a1c      	ldr	r2, [pc, #112]	; (3f6c <pm_system_suspend+0xc0>)
    3efc:	2300      	movs	r3, #0
    3efe:	1900      	adds	r0, r0, r4
    3f00:	f04f 0400 	mov.w	r4, #0
    3f04:	eb44 0101 	adc.w	r1, r4, r1
    3f08:	f7fd f8ee 	bl	10e8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3f0c:	2101      	movs	r1, #1
    3f0e:	1a30      	subs	r0, r6, r0
    3f10:	f012 f84e 	bl	15fb0 <z_set_timeout_expiry>
    3f14:	e7e0      	b.n	3ed8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f16:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3f18:	b10c      	cbz	r4, 3f1e <pm_system_suspend+0x72>
	return node->next;
    3f1a:	6823      	ldr	r3, [r4, #0]
    3f1c:	b143      	cbz	r3, 3f30 <pm_system_suspend+0x84>
{
    3f1e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f20:	b134      	cbz	r4, 3f30 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3f22:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3f24:	2b00      	cmp	r3, #0
    3f26:	d0f6      	beq.n	3f16 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3f28:	4a0c      	ldr	r2, [pc, #48]	; (3f5c <pm_system_suspend+0xb0>)
    3f2a:	7810      	ldrb	r0, [r2, #0]
    3f2c:	4798      	blx	r3
    3f2e:	e7f2      	b.n	3f16 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3f30:	f385 8811 	msr	BASEPRI, r5
    3f34:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3f38:	4b08      	ldr	r3, [pc, #32]	; (3f5c <pm_system_suspend+0xb0>)
    3f3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3f3e:	ab08      	add	r3, sp, #32
    3f40:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3f44:	4b0a      	ldr	r3, [pc, #40]	; (3f70 <pm_system_suspend+0xc4>)
    3f46:	b10b      	cbz	r3, 3f4c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3f48:	f7ff fede 	bl	3d08 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3f4c:	f7ff ff6e 	bl	3e2c <pm_system_resume>
	k_sched_unlock();
    3f50:	f00b fe0a 	bl	fb68 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3f54:	4b01      	ldr	r3, [pc, #4]	; (3f5c <pm_system_suspend+0xb0>)
    3f56:	7818      	ldrb	r0, [r3, #0]
}
    3f58:	b008      	add	sp, #32
    3f5a:	bd70      	pop	{r4, r5, r6, pc}
    3f5c:	20020338 	.word	0x20020338
    3f60:	20000004 	.word	0x20000004
    3f64:	20020330 	.word	0x20020330
    3f68:	000f423f 	.word	0x000f423f
    3f6c:	000f4240 	.word	0x000f4240
    3f70:	00003d09 	.word	0x00003d09

00003f74 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3f74:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3f76:	4802      	ldr	r0, [pc, #8]	; (3f80 <nrf_cc3xx_platform_abort_init+0xc>)
    3f78:	f00c f962 	bl	10240 <nrf_cc3xx_platform_set_abort>
}
    3f7c:	bd08      	pop	{r3, pc}
    3f7e:	bf00      	nop
    3f80:	00068dd0 	.word	0x00068dd0

00003f84 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3f84:	b308      	cbz	r0, 3fca <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3f86:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3f88:	6843      	ldr	r3, [r0, #4]
    3f8a:	2b04      	cmp	r3, #4
    3f8c:	d007      	beq.n	3f9e <mutex_unlock_platform+0x1a>
    3f8e:	2b08      	cmp	r3, #8
    3f90:	d012      	beq.n	3fb8 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3f92:	b1fb      	cbz	r3, 3fd4 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3f94:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3f96:	f00b fad9 	bl	f54c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3f9a:	2000      	movs	r0, #0
    3f9c:	e014      	b.n	3fc8 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3f9e:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3fa0:	2200      	movs	r2, #0
    3fa2:	e8d3 1fef 	ldaex	r1, [r3]
    3fa6:	2901      	cmp	r1, #1
    3fa8:	d103      	bne.n	3fb2 <mutex_unlock_platform+0x2e>
    3faa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3fae:	2800      	cmp	r0, #0
    3fb0:	d1f7      	bne.n	3fa2 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fb2:	d10d      	bne.n	3fd0 <mutex_unlock_platform+0x4c>
    3fb4:	4610      	mov	r0, r2
    3fb6:	e007      	b.n	3fc8 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3fb8:	6803      	ldr	r3, [r0, #0]
    3fba:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3fbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3fc0:	2000      	movs	r0, #0
    3fc2:	4a05      	ldr	r2, [pc, #20]	; (3fd8 <mutex_unlock_platform+0x54>)
    3fc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    3fc8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3fca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3fce:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fd0:	4802      	ldr	r0, [pc, #8]	; (3fdc <mutex_unlock_platform+0x58>)
    3fd2:	e7f9      	b.n	3fc8 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3fd4:	4802      	ldr	r0, [pc, #8]	; (3fe0 <mutex_unlock_platform+0x5c>)
    3fd6:	e7f7      	b.n	3fc8 <mutex_unlock_platform+0x44>
    3fd8:	50030000 	.word	0x50030000
    3fdc:	ffff8fe9 	.word	0xffff8fe9
    3fe0:	ffff8fea 	.word	0xffff8fea

00003fe4 <mutex_lock_platform>:
    if(mutex == NULL) {
    3fe4:	b370      	cbz	r0, 4044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3fe6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3fe8:	6843      	ldr	r3, [r0, #4]
    3fea:	2b04      	cmp	r3, #4
    3fec:	d004      	beq.n	3ff8 <mutex_lock_platform+0x14>
    3fee:	2b08      	cmp	r3, #8
    3ff0:	d00f      	beq.n	4012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ff2:	b9c3      	cbnz	r3, 4026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ff4:	4815      	ldr	r0, [pc, #84]	; (404c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
    3ff6:	e00b      	b.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3ff8:	6803      	ldr	r3, [r0, #0]
    3ffa:	2201      	movs	r2, #1
    3ffc:	e8d3 1fef 	ldaex	r1, [r3]
    4000:	2900      	cmp	r1, #0
    4002:	d103      	bne.n	400c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    4004:	e8c3 2fe0 	stlex	r0, r2, [r3]
    4008:	2800      	cmp	r0, #0
    400a:	d1f7      	bne.n	3ffc <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    400c:	d116      	bne.n	403c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    400e:	2000      	movs	r0, #0
}
    4010:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    4012:	6803      	ldr	r3, [r0, #0]
    4014:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    4016:	f503 7380 	add.w	r3, r3, #256	; 0x100
    401a:	4a0d      	ldr	r2, [pc, #52]	; (4050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
    401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4020:	b973      	cbnz	r3, 4040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
    4022:	2000      	movs	r0, #0
    4024:	e7f4      	b.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4026:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4028:	f04f 32ff 	mov.w	r2, #4294967295
    402c:	f04f 33ff 	mov.w	r3, #4294967295
    4030:	f00b fa02 	bl	f438 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4034:	2800      	cmp	r0, #0
    4036:	d0eb      	beq.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4038:	4806      	ldr	r0, [pc, #24]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    403a:	e7e9      	b.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    403c:	4805      	ldr	r0, [pc, #20]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    403e:	e7e7      	b.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4040:	4804      	ldr	r0, [pc, #16]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    4042:	e7e5      	b.n	4010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4044:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4048:	4770      	bx	lr
    404a:	bf00      	nop
    404c:	ffff8fea 	.word	0xffff8fea
    4050:	50030000 	.word	0x50030000
    4054:	ffff8fe9 	.word	0xffff8fe9

00004058 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4058:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    405a:	4604      	mov	r4, r0
    405c:	b190      	cbz	r0, 4084 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    405e:	6863      	ldr	r3, [r4, #4]
    4060:	2b04      	cmp	r3, #4
    4062:	d00e      	beq.n	4082 <mutex_free_platform+0x2a>
    4064:	2b08      	cmp	r3, #8
    4066:	d00c      	beq.n	4082 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4068:	b15b      	cbz	r3, 4082 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    406a:	f013 0f02 	tst.w	r3, #2
    406e:	d10e      	bne.n	408e <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4070:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4072:	2200      	movs	r2, #0
    4074:	601a      	str	r2, [r3, #0]
    4076:	605a      	str	r2, [r3, #4]
    4078:	609a      	str	r2, [r3, #8]
    407a:	60da      	str	r2, [r3, #12]
    407c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    407e:	2300      	movs	r3, #0
    4080:	6063      	str	r3, [r4, #4]
}
    4082:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4084:	4b05      	ldr	r3, [pc, #20]	; (409c <mutex_free_platform+0x44>)
    4086:	685b      	ldr	r3, [r3, #4]
    4088:	4805      	ldr	r0, [pc, #20]	; (40a0 <mutex_free_platform+0x48>)
    408a:	4798      	blx	r3
    408c:	e7e7      	b.n	405e <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    408e:	4621      	mov	r1, r4
    4090:	4804      	ldr	r0, [pc, #16]	; (40a4 <mutex_free_platform+0x4c>)
    4092:	f011 fdbf 	bl	15c14 <k_mem_slab_free>
        mutex->mutex = NULL;
    4096:	2300      	movs	r3, #0
    4098:	6023      	str	r3, [r4, #0]
    409a:	e7f0      	b.n	407e <mutex_free_platform+0x26>
    409c:	2000006c 	.word	0x2000006c
    40a0:	00068dd8 	.word	0x00068dd8
    40a4:	20020344 	.word	0x20020344

000040a8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    40a8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    40aa:	4604      	mov	r4, r0
    40ac:	b178      	cbz	r0, 40ce <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    40ae:	6863      	ldr	r3, [r4, #4]
    40b0:	2b04      	cmp	r3, #4
    40b2:	d00b      	beq.n	40cc <mutex_init_platform+0x24>
    40b4:	2b08      	cmp	r3, #8
    40b6:	d009      	beq.n	40cc <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    40b8:	b90b      	cbnz	r3, 40be <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    40ba:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    40bc:	b163      	cbz	r3, 40d8 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    40be:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    40c0:	f011 fe1d 	bl	15cfe <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    40c4:	6863      	ldr	r3, [r4, #4]
    40c6:	f043 0301 	orr.w	r3, r3, #1
    40ca:	6063      	str	r3, [r4, #4]
}
    40cc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    40ce:	4b10      	ldr	r3, [pc, #64]	; (4110 <mutex_init_platform+0x68>)
    40d0:	685b      	ldr	r3, [r3, #4]
    40d2:	4810      	ldr	r0, [pc, #64]	; (4114 <mutex_init_platform+0x6c>)
    40d4:	4798      	blx	r3
    40d6:	e7ea      	b.n	40ae <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    40d8:	f04f 32ff 	mov.w	r2, #4294967295
    40dc:	f04f 33ff 	mov.w	r3, #4294967295
    40e0:	4621      	mov	r1, r4
    40e2:	480d      	ldr	r0, [pc, #52]	; (4118 <mutex_init_platform+0x70>)
    40e4:	f00b f880 	bl	f1e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    40e8:	b908      	cbnz	r0, 40ee <mutex_init_platform+0x46>
    40ea:	6823      	ldr	r3, [r4, #0]
    40ec:	b91b      	cbnz	r3, 40f6 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    40ee:	4b08      	ldr	r3, [pc, #32]	; (4110 <mutex_init_platform+0x68>)
    40f0:	685b      	ldr	r3, [r3, #4]
    40f2:	480a      	ldr	r0, [pc, #40]	; (411c <mutex_init_platform+0x74>)
    40f4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    40f6:	6823      	ldr	r3, [r4, #0]
    40f8:	2200      	movs	r2, #0
    40fa:	601a      	str	r2, [r3, #0]
    40fc:	605a      	str	r2, [r3, #4]
    40fe:	609a      	str	r2, [r3, #8]
    4100:	60da      	str	r2, [r3, #12]
    4102:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4104:	6863      	ldr	r3, [r4, #4]
    4106:	f043 0302 	orr.w	r3, r3, #2
    410a:	6063      	str	r3, [r4, #4]
    410c:	e7d7      	b.n	40be <mutex_init_platform+0x16>
    410e:	bf00      	nop
    4110:	2000006c 	.word	0x2000006c
    4114:	00068dd8 	.word	0x00068dd8
    4118:	20020344 	.word	0x20020344
    411c:	00068e00 	.word	0x00068e00

00004120 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4120:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4122:	2340      	movs	r3, #64	; 0x40
    4124:	2214      	movs	r2, #20
    4126:	4904      	ldr	r1, [pc, #16]	; (4138 <nrf_cc3xx_platform_mutex_init+0x18>)
    4128:	4804      	ldr	r0, [pc, #16]	; (413c <nrf_cc3xx_platform_mutex_init+0x1c>)
    412a:	f011 fd64 	bl	15bf6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    412e:	4904      	ldr	r1, [pc, #16]	; (4140 <nrf_cc3xx_platform_mutex_init+0x20>)
    4130:	4804      	ldr	r0, [pc, #16]	; (4144 <nrf_cc3xx_platform_mutex_init+0x24>)
    4132:	f00c f8e3 	bl	102fc <nrf_cc3xx_platform_set_mutexes>
}
    4136:	bd08      	pop	{r3, pc}
    4138:	20020364 	.word	0x20020364
    413c:	20020344 	.word	0x20020344
    4140:	00068e40 	.word	0x00068e40
    4144:	00068e30 	.word	0x00068e30

00004148 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4148:	4901      	ldr	r1, [pc, #4]	; (4150 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    414a:	2210      	movs	r2, #16
	str	r2, [r1]
    414c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    414e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4150:	e000ed10 	.word	0xe000ed10

00004154 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4154:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4156:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4158:	f380 8811 	msr	BASEPRI, r0
	isb
    415c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4160:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4164:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4166:	b662      	cpsie	i
	isb
    4168:	f3bf 8f6f 	isb	sy

	bx	lr
    416c:	4770      	bx	lr
    416e:	bf00      	nop

00004170 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4170:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4172:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4174:	f381 8811 	msr	BASEPRI, r1

	wfe
    4178:	bf20      	wfe

	msr	BASEPRI, r0
    417a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    417e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4180:	4770      	bx	lr
    4182:	bf00      	nop

00004184 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4184:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4186:	2b00      	cmp	r3, #0
    4188:	db08      	blt.n	419c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    418a:	f000 001f 	and.w	r0, r0, #31
    418e:	095b      	lsrs	r3, r3, #5
    4190:	2201      	movs	r2, #1
    4192:	fa02 f000 	lsl.w	r0, r2, r0
    4196:	4a02      	ldr	r2, [pc, #8]	; (41a0 <arch_irq_enable+0x1c>)
    4198:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    419c:	4770      	bx	lr
    419e:	bf00      	nop
    41a0:	e000e100 	.word	0xe000e100

000041a4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    41a4:	0942      	lsrs	r2, r0, #5
    41a6:	4b05      	ldr	r3, [pc, #20]	; (41bc <arch_irq_is_enabled+0x18>)
    41a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    41ac:	f000 001f 	and.w	r0, r0, #31
    41b0:	2301      	movs	r3, #1
    41b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    41b6:	4010      	ands	r0, r2
    41b8:	4770      	bx	lr
    41ba:	bf00      	nop
    41bc:	e000e100 	.word	0xe000e100

000041c0 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    41c0:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    41c2:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    41c4:	2b00      	cmp	r3, #0
    41c6:	db08      	blt.n	41da <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41c8:	0149      	lsls	r1, r1, #5
    41ca:	b2c9      	uxtb	r1, r1
    41cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    41d0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    41d4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    41d8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41da:	f000 000f 	and.w	r0, r0, #15
    41de:	0149      	lsls	r1, r1, #5
    41e0:	b2c9      	uxtb	r1, r1
    41e2:	4b01      	ldr	r3, [pc, #4]	; (41e8 <z_arm_irq_priority_set+0x28>)
    41e4:	5419      	strb	r1, [r3, r0]
}
    41e6:	4770      	bx	lr
    41e8:	e000ed14 	.word	0xe000ed14

000041ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    41ec:	bf30      	wfi
    b z_SysNmiOnReset
    41ee:	f7ff bffd 	b.w	41ec <z_SysNmiOnReset>
    41f2:	bf00      	nop

000041f4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    41f4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    41f6:	4b0b      	ldr	r3, [pc, #44]	; (4224 <z_arm_prep_c+0x30>)
    41f8:	4a0b      	ldr	r2, [pc, #44]	; (4228 <z_arm_prep_c+0x34>)
    41fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    41fe:	609a      	str	r2, [r3, #8]
    4200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4204:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4208:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    420c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4214:	f00a ff88 	bl	f128 <z_bss_zero>
	z_data_copy();
    4218:	f00b fe16 	bl	fe48 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    421c:	f000 f9da 	bl	45d4 <z_arm_interrupt_init>
	z_cstart();
    4220:	f00a ff8e 	bl	f140 <z_cstart>
    4224:	e000ed00 	.word	0xe000ed00
    4228:	00000000 	.word	0x00000000

0000422c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    422c:	4a0a      	ldr	r2, [pc, #40]	; (4258 <arch_swap+0x2c>)
    422e:	6893      	ldr	r3, [r2, #8]
    4230:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4234:	4909      	ldr	r1, [pc, #36]	; (425c <arch_swap+0x30>)
    4236:	6809      	ldr	r1, [r1, #0]
    4238:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    423c:	4908      	ldr	r1, [pc, #32]	; (4260 <arch_swap+0x34>)
    423e:	684b      	ldr	r3, [r1, #4]
    4240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4244:	604b      	str	r3, [r1, #4]
    4246:	2300      	movs	r3, #0
    4248:	f383 8811 	msr	BASEPRI, r3
    424c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4250:	6893      	ldr	r3, [r2, #8]
}
    4252:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    4256:	4770      	bx	lr
    4258:	20020a18 	.word	0x20020a18
    425c:	0006ba84 	.word	0x0006ba84
    4260:	e000ed00 	.word	0xe000ed00

00004264 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4264:	4914      	ldr	r1, [pc, #80]	; (42b8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4266:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4268:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    426c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    426e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4272:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4276:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4278:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    427c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4280:	4f0e      	ldr	r7, [pc, #56]	; (42bc <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4282:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4286:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4288:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    428a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    428c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4290:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4292:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4296:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    429a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    429e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    42a2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    42a6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    42aa:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    42ac:	f00e f9e7 	bl	1267e <configure_builtin_stack_guard>
    pop {r2, lr}
    42b0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    42b4:	4770      	bx	lr
    42b6:	0000      	.short	0x0000
    ldr r1, =_kernel
    42b8:	20020a18 	.word	0x20020a18
    ldr v4, =_SCS_ICSR
    42bc:	e000ed04 	.word	0xe000ed04

000042c0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    42c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    42c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    42c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    42ca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    42ce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    42d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    42d4:	2902      	cmp	r1, #2
    beq _oops
    42d6:	d0ff      	beq.n	42d8 <_oops>

000042d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    42d8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    42da:	f00e f9be 	bl	1265a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    42de:	bd01      	pop	{r0, pc}

000042e0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    42e0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    42e2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    42e6:	490d      	ldr	r1, [pc, #52]	; (431c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    42e8:	f021 0101 	bic.w	r1, r1, #1
    42ec:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    42f0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    42f4:	9b01      	ldr	r3, [sp, #4]
    42f6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    42fa:	9b02      	ldr	r3, [sp, #8]
    42fc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4300:	9b03      	ldr	r3, [sp, #12]
    4302:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    430a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    430e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4310:	2300      	movs	r3, #0
    4312:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4316:	bc10      	pop	{r4}
    4318:	4770      	bx	lr
    431a:	bf00      	nop
    431c:	000120d1 	.word	0x000120d1

00004320 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4320:	4b09      	ldr	r3, [pc, #36]	; (4348 <arch_switch_to_main_thread+0x28>)
    4322:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    4324:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4328:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    432c:	4610      	mov	r0, r2
    432e:	f381 8809 	msr	PSP, r1
    4332:	2100      	movs	r1, #0
    4334:	b663      	cpsie	if
    4336:	f381 8811 	msr	BASEPRI, r1
    433a:	f3bf 8f6f 	isb	sy
    433e:	2200      	movs	r2, #0
    4340:	2300      	movs	r3, #0
    4342:	f00d fec5 	bl	120d0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4346:	bf00      	nop
    4348:	20020a18 	.word	0x20020a18

0000434c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    434c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    434e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4350:	4a0b      	ldr	r2, [pc, #44]	; (4380 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4352:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4354:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4356:	bf1e      	ittt	ne
	movne	r1, #0
    4358:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    435a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    435c:	f011 fca7 	blne	15cae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4360:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4362:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4366:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    436a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    436e:	4905      	ldr	r1, [pc, #20]	; (4384 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4370:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4372:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4374:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4376:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    437a:	4903      	ldr	r1, [pc, #12]	; (4388 <_isr_wrapper+0x3c>)
	bx r1
    437c:	4708      	bx	r1
    437e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4380:	20020a18 	.word	0x20020a18
	ldr r1, =_sw_isr_table
    4384:	00016d48 	.word	0x00016d48
	ldr r1, =z_arm_int_exit
    4388:	0000438d 	.word	0x0000438d

0000438c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    438c:	4b04      	ldr	r3, [pc, #16]	; (43a0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    438e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4390:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4392:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4394:	d003      	beq.n	439e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4396:	4903      	ldr	r1, [pc, #12]	; (43a4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    439c:	600a      	str	r2, [r1, #0]

0000439e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    439e:	4770      	bx	lr
	ldr r3, =_kernel
    43a0:	20020a18 	.word	0x20020a18
	ldr r1, =_SCS_ICSR
    43a4:	e000ed04 	.word	0xe000ed04

000043a8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    43a8:	b510      	push	{r4, lr}
    43aa:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    43ac:	4b13      	ldr	r3, [pc, #76]	; (43fc <mem_manage_fault+0x54>)
    43ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    43b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43b4:	f013 0f02 	tst.w	r3, #2
    43b8:	d00b      	beq.n	43d2 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    43ba:	4b10      	ldr	r3, [pc, #64]	; (43fc <mem_manage_fault+0x54>)
    43bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    43be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43c0:	f013 0f80 	tst.w	r3, #128	; 0x80
    43c4:	d005      	beq.n	43d2 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    43c6:	b121      	cbz	r1, 43d2 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    43c8:	4a0c      	ldr	r2, [pc, #48]	; (43fc <mem_manage_fault+0x54>)
    43ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    43d0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    43d2:	4b0a      	ldr	r3, [pc, #40]	; (43fc <mem_manage_fault+0x54>)
    43d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    43d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    43d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43da:	f013 0f10 	tst.w	r3, #16
    43de:	d101      	bne.n	43e4 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    43e0:	4b06      	ldr	r3, [pc, #24]	; (43fc <mem_manage_fault+0x54>)
    43e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    43e4:	4a05      	ldr	r2, [pc, #20]	; (43fc <mem_manage_fault+0x54>)
    43e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43e8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    43ec:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    43ee:	2101      	movs	r1, #1
    43f0:	f00e f951 	bl	12696 <memory_fault_recoverable>
    43f4:	7020      	strb	r0, [r4, #0]

	return reason;
}
    43f6:	2000      	movs	r0, #0
    43f8:	bd10      	pop	{r4, pc}
    43fa:	bf00      	nop
    43fc:	e000ed00 	.word	0xe000ed00

00004400 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4400:	b510      	push	{r4, lr}
    4402:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4404:	4b12      	ldr	r3, [pc, #72]	; (4450 <bus_fault+0x50>)
    4406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    440c:	f413 7f00 	tst.w	r3, #512	; 0x200
    4410:	d00b      	beq.n	442a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4412:	4b0f      	ldr	r3, [pc, #60]	; (4450 <bus_fault+0x50>)
    4414:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4418:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    441c:	d005      	beq.n	442a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    441e:	b121      	cbz	r1, 442a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4420:	4a0b      	ldr	r2, [pc, #44]	; (4450 <bus_fault+0x50>)
    4422:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4428:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    442a:	4b09      	ldr	r3, [pc, #36]	; (4450 <bus_fault+0x50>)
    442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4430:	f413 7f80 	tst.w	r3, #256	; 0x100
    4434:	d101      	bne.n	443a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4436:	4b06      	ldr	r3, [pc, #24]	; (4450 <bus_fault+0x50>)
    4438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    443a:	4a05      	ldr	r2, [pc, #20]	; (4450 <bus_fault+0x50>)
    443c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    443e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4442:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4444:	2101      	movs	r1, #1
    4446:	f00e f926 	bl	12696 <memory_fault_recoverable>
    444a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    444c:	2000      	movs	r0, #0
    444e:	bd10      	pop	{r4, pc}
    4450:	e000ed00 	.word	0xe000ed00

00004454 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4454:	4b0a      	ldr	r3, [pc, #40]	; (4480 <usage_fault+0x2c>)
    4456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    445a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    445c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    4460:	d10b      	bne.n	447a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4462:	4b07      	ldr	r3, [pc, #28]	; (4480 <usage_fault+0x2c>)
    4464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    446a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    446e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4472:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4476:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4478:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    447a:	2002      	movs	r0, #2
    447c:	e7f1      	b.n	4462 <usage_fault+0xe>
    447e:	bf00      	nop
    4480:	e000ed00 	.word	0xe000ed00

00004484 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4484:	b510      	push	{r4, lr}
    4486:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4488:	2300      	movs	r3, #0
    448a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    448c:	4b1b      	ldr	r3, [pc, #108]	; (44fc <hard_fault+0x78>)
    448e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4490:	f010 0002 	ands.w	r0, r0, #2
    4494:	d12d      	bne.n	44f2 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4498:	2b00      	cmp	r3, #0
    449a:	db2b      	blt.n	44f4 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    449c:	4b17      	ldr	r3, [pc, #92]	; (44fc <hard_fault+0x78>)
    449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    44a0:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    44a4:	d027      	beq.n	44f6 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    44a6:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    44a8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    44ac:	f64d 7302 	movw	r3, #57090	; 0xdf02
    44b0:	429a      	cmp	r2, r3
    44b2:	d010      	beq.n	44d6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    44b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    44b8:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    44bc:	781b      	ldrb	r3, [r3, #0]
    44be:	b963      	cbnz	r3, 44da <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    44c0:	4b0f      	ldr	r3, [pc, #60]	; (4500 <hard_fault+0x7c>)
    44c2:	781b      	ldrb	r3, [r3, #0]
    44c4:	b97b      	cbnz	r3, 44e6 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    44c6:	4b0f      	ldr	r3, [pc, #60]	; (4504 <hard_fault+0x80>)
    44c8:	881b      	ldrh	r3, [r3, #0]
    44ca:	b29b      	uxth	r3, r3
    44cc:	b193      	cbz	r3, 44f4 <hard_fault+0x70>
			reason = usage_fault(esf);
    44ce:	4620      	mov	r0, r4
    44d0:	f7ff ffc0 	bl	4454 <usage_fault>
    44d4:	e00e      	b.n	44f4 <hard_fault+0x70>
			reason = esf->basic.r0;
    44d6:	6820      	ldr	r0, [r4, #0]
    44d8:	e00c      	b.n	44f4 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    44da:	460a      	mov	r2, r1
    44dc:	2101      	movs	r1, #1
    44de:	4620      	mov	r0, r4
    44e0:	f7ff ff62 	bl	43a8 <mem_manage_fault>
    44e4:	e006      	b.n	44f4 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    44e6:	460a      	mov	r2, r1
    44e8:	2101      	movs	r1, #1
    44ea:	4620      	mov	r0, r4
    44ec:	f7ff ff88 	bl	4400 <bus_fault>
    44f0:	e000      	b.n	44f4 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44f2:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    44f4:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44f6:	4618      	mov	r0, r3
	return reason;
    44f8:	e7fc      	b.n	44f4 <hard_fault+0x70>
    44fa:	bf00      	nop
    44fc:	e000ed00 	.word	0xe000ed00
    4500:	e000ed29 	.word	0xe000ed29
    4504:	e000ed2a 	.word	0xe000ed2a

00004508 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	b08b      	sub	sp, #44	; 0x2c
    450c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    450e:	4b25      	ldr	r3, [pc, #148]	; (45a4 <z_arm_fault+0x9c>)
    4510:	6859      	ldr	r1, [r3, #4]
    4512:	f3c1 0108 	ubfx	r1, r1, #0, #9
    4516:	2300      	movs	r3, #0
    4518:	f383 8811 	msr	BASEPRI, r3
    451c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4520:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4524:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4528:	d115      	bne.n	4556 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    452a:	f002 030c 	and.w	r3, r2, #12
    452e:	2b08      	cmp	r3, #8
    4530:	d014      	beq.n	455c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4532:	f012 0f08 	tst.w	r2, #8
    4536:	d00b      	beq.n	4550 <z_arm_fault+0x48>
	*nested_exc = false;
    4538:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    453a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    453e:	4620      	mov	r0, r4
    4540:	f00e f8ae 	bl	126a0 <fault_handle>
    4544:	4606      	mov	r6, r0
	if (recoverable) {
    4546:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    454a:	b153      	cbz	r3, 4562 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    454c:	b00b      	add	sp, #44	; 0x2c
    454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    4550:	4604      	mov	r4, r0
			*nested_exc = true;
    4552:	2701      	movs	r7, #1
    4554:	e7f1      	b.n	453a <z_arm_fault+0x32>
	*nested_exc = false;
    4556:	2700      	movs	r7, #0
		return NULL;
    4558:	463c      	mov	r4, r7
    455a:	e7ee      	b.n	453a <z_arm_fault+0x32>
	*nested_exc = false;
    455c:	2700      	movs	r7, #0
		return NULL;
    455e:	463c      	mov	r4, r7
    4560:	e7eb      	b.n	453a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4562:	ad01      	add	r5, sp, #4
    4564:	6820      	ldr	r0, [r4, #0]
    4566:	6861      	ldr	r1, [r4, #4]
    4568:	68a2      	ldr	r2, [r4, #8]
    456a:	68e3      	ldr	r3, [r4, #12]
    456c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    456e:	6920      	ldr	r0, [r4, #16]
    4570:	6961      	ldr	r1, [r4, #20]
    4572:	69a2      	ldr	r2, [r4, #24]
    4574:	69e3      	ldr	r3, [r4, #28]
    4576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4578:	b14f      	cbz	r7, 458e <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    457a:	9b08      	ldr	r3, [sp, #32]
    457c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4580:	b95a      	cbnz	r2, 459a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4582:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4586:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    458a:	9308      	str	r3, [sp, #32]
    458c:	e005      	b.n	459a <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    458e:	9b08      	ldr	r3, [sp, #32]
    4590:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4594:	f023 0301 	bic.w	r3, r3, #1
    4598:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    459a:	a901      	add	r1, sp, #4
    459c:	4630      	mov	r0, r6
    459e:	f00e f858 	bl	12652 <z_arm_fatal_error>
    45a2:	e7d3      	b.n	454c <z_arm_fault+0x44>
    45a4:	e000ed00 	.word	0xe000ed00

000045a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    45a8:	4b04      	ldr	r3, [pc, #16]	; (45bc <z_arm_fault_init+0x14>)
    45aa:	695a      	ldr	r2, [r3, #20]
    45ac:	f042 0210 	orr.w	r2, r2, #16
    45b0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    45b2:	695a      	ldr	r2, [r3, #20]
    45b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    45b8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    45ba:	4770      	bx	lr
    45bc:	e000ed00 	.word	0xe000ed00

000045c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    45c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    45c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    45c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    45ca:	4672      	mov	r2, lr
	bl z_arm_fault
    45cc:	f7ff ff9c 	bl	4508 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    45d0:	bd01      	pop	{r0, pc}
    45d2:	bf00      	nop

000045d4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    45d4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    45d6:	e006      	b.n	45e6 <z_arm_interrupt_init+0x12>
    45d8:	f002 010f 	and.w	r1, r2, #15
    45dc:	4b09      	ldr	r3, [pc, #36]	; (4604 <z_arm_interrupt_init+0x30>)
    45de:	440b      	add	r3, r1
    45e0:	2120      	movs	r1, #32
    45e2:	7619      	strb	r1, [r3, #24]
    45e4:	3201      	adds	r2, #1
    45e6:	2a44      	cmp	r2, #68	; 0x44
    45e8:	dc0a      	bgt.n	4600 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    45ea:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    45ec:	2b00      	cmp	r3, #0
    45ee:	dbf3      	blt.n	45d8 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    45f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    45f8:	2120      	movs	r1, #32
    45fa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    45fe:	e7f1      	b.n	45e4 <z_arm_interrupt_init+0x10>
	}
}
    4600:	4770      	bx	lr
    4602:	bf00      	nop
    4604:	e000ecfc 	.word	0xe000ecfc

00004608 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4608:	2000      	movs	r0, #0
    msr CONTROL, r0
    460a:	f380 8814 	msr	CONTROL, r0
    isb
    460e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    4612:	2000      	movs	r0, #0
    msr MSPLIM, r0
    4614:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    4618:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    461c:	f012 fb22 	bl	16c64 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4620:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4622:	490e      	ldr	r1, [pc, #56]	; (465c <__start+0x54>)
    str r0, [r1]
    4624:	6008      	str	r0, [r1, #0]
    dsb
    4626:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    462a:	480d      	ldr	r0, [pc, #52]	; (4660 <__start+0x58>)
    msr msp, r0
    462c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4630:	f000 f83c 	bl	46ac <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4634:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4636:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    463a:	480a      	ldr	r0, [pc, #40]	; (4664 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    463c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4640:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4642:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4646:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    464a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    464c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    464e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4652:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4656:	f7ff fdcd 	bl	41f4 <z_arm_prep_c>
    465a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    465c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4660:	20028c48 	.word	0x20028c48
    ldr r0, =z_interrupt_stacks
    4664:	20028d88 	.word	0x20028d88

00004668 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4668:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    466c:	4905      	ldr	r1, [pc, #20]	; (4684 <sys_arch_reboot+0x1c>)
    466e:	68ca      	ldr	r2, [r1, #12]
    4670:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4674:	4b04      	ldr	r3, [pc, #16]	; (4688 <sys_arch_reboot+0x20>)
    4676:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4678:	60cb      	str	r3, [r1, #12]
    467a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    467e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4680:	e7fd      	b.n	467e <sys_arch_reboot+0x16>
    4682:	bf00      	nop
    4684:	e000ed00 	.word	0xe000ed00
    4688:	05fa0004 	.word	0x05fa0004

0000468c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    468c:	4b06      	ldr	r3, [pc, #24]	; (46a8 <z_arm_clear_arm_mpu_config+0x1c>)
    468e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4690:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4694:	2300      	movs	r3, #0
    4696:	4283      	cmp	r3, r0
    4698:	da05      	bge.n	46a6 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    469a:	4a03      	ldr	r2, [pc, #12]	; (46a8 <z_arm_clear_arm_mpu_config+0x1c>)
    469c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    469e:	2100      	movs	r1, #0
    46a0:	6111      	str	r1, [r2, #16]
    46a2:	3301      	adds	r3, #1
    46a4:	e7f7      	b.n	4696 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    46a6:	4770      	bx	lr
    46a8:	e000ed90 	.word	0xe000ed90

000046ac <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    46ac:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    46ae:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    46b0:	2400      	movs	r4, #0
    46b2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    46b6:	f7ff ffe9 	bl	468c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    46ba:	4623      	mov	r3, r4
    46bc:	2b0f      	cmp	r3, #15
    46be:	d809      	bhi.n	46d4 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    46c0:	f103 0120 	add.w	r1, r3, #32
    46c4:	4a0d      	ldr	r2, [pc, #52]	; (46fc <z_arm_init_arch_hw_at_boot+0x50>)
    46c6:	f04f 30ff 	mov.w	r0, #4294967295
    46ca:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    46ce:	3301      	adds	r3, #1
    46d0:	b2db      	uxtb	r3, r3
    46d2:	e7f3      	b.n	46bc <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    46d4:	2300      	movs	r3, #0
    46d6:	2b0f      	cmp	r3, #15
    46d8:	d809      	bhi.n	46ee <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    46da:	f103 0160 	add.w	r1, r3, #96	; 0x60
    46de:	4a07      	ldr	r2, [pc, #28]	; (46fc <z_arm_init_arch_hw_at_boot+0x50>)
    46e0:	f04f 30ff 	mov.w	r0, #4294967295
    46e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    46e8:	3301      	adds	r3, #1
    46ea:	b2db      	uxtb	r3, r3
    46ec:	e7f3      	b.n	46d6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    46ee:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    46f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    46f4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    46f8:	bd10      	pop	{r4, pc}
    46fa:	bf00      	nop
    46fc:	e000e100 	.word	0xe000e100

00004700 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4700:	b508      	push	{r3, lr}
	if (_current == thread) {
    4702:	4b08      	ldr	r3, [pc, #32]	; (4724 <z_impl_k_thread_abort+0x24>)
    4704:	689b      	ldr	r3, [r3, #8]
    4706:	4283      	cmp	r3, r0
    4708:	d002      	beq.n	4710 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    470a:	f00b fb75 	bl	fdf8 <z_thread_abort>
}
    470e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4710:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4714:	2b00      	cmp	r3, #0
    4716:	d0f8      	beq.n	470a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4718:	4a03      	ldr	r2, [pc, #12]	; (4728 <z_impl_k_thread_abort+0x28>)
    471a:	6853      	ldr	r3, [r2, #4]
    471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4720:	6053      	str	r3, [r2, #4]
    4722:	e7f2      	b.n	470a <z_impl_k_thread_abort+0xa>
    4724:	20020a18 	.word	0x20020a18
    4728:	e000ed00 	.word	0xe000ed00

0000472c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    472c:	b510      	push	{r4, lr}
    472e:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4730:	4c09      	ldr	r4, [pc, #36]	; (4758 <z_arm_configure_static_mpu_regions+0x2c>)
    4732:	4623      	mov	r3, r4
    4734:	4a09      	ldr	r2, [pc, #36]	; (475c <z_arm_configure_static_mpu_regions+0x30>)
    4736:	2101      	movs	r1, #1
    4738:	4809      	ldr	r0, [pc, #36]	; (4760 <z_arm_configure_static_mpu_regions+0x34>)
    473a:	f00e f816 	bl	1276a <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    473e:	2300      	movs	r3, #0
    4740:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4742:	4b08      	ldr	r3, [pc, #32]	; (4764 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4744:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4746:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4748:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    474a:	2101      	movs	r1, #1
    474c:	a801      	add	r0, sp, #4
    474e:	f00e f810 	bl	12772 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4752:	b004      	add	sp, #16
    4754:	bd10      	pop	{r4, pc}
    4756:	bf00      	nop
    4758:	20070000 	.word	0x20070000
    475c:	20000000 	.word	0x20000000
    4760:	00068e54 	.word	0x00068e54
    4764:	20000340 	.word	0x20000340

00004768 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    4768:	4b01      	ldr	r3, [pc, #4]	; (4770 <mpu_init+0x8>)
    476a:	4a02      	ldr	r2, [pc, #8]	; (4774 <mpu_init+0xc>)
    476c:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    476e:	4770      	bx	lr
    4770:	e000ed90 	.word	0xe000ed90
    4774:	0044ffaa 	.word	0x0044ffaa

00004778 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4778:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    477a:	680b      	ldr	r3, [r1, #0]
    477c:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    4780:	7a0c      	ldrb	r4, [r1, #8]
    4782:	f004 031f 	and.w	r3, r4, #31
    4786:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4788:	68cb      	ldr	r3, [r1, #12]
    478a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    478e:	0964      	lsrs	r4, r4, #5
    4790:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    4794:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4798:	4902      	ldr	r1, [pc, #8]	; (47a4 <region_init+0x2c>)
    479a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    479c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    479e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    47a0:	bc10      	pop	{r4}
    47a2:	4770      	bx	lr
    47a4:	e000ed90 	.word	0xe000ed90

000047a8 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    47a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47ac:	b087      	sub	sp, #28
    47ae:	4681      	mov	r9, r0
    47b0:	9100      	str	r1, [sp, #0]
    47b2:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    47b4:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    47b6:	2700      	movs	r7, #0
    47b8:	e034      	b.n	4824 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    47ba:	f06f 0615 	mvn.w	r6, #21
    47be:	e053      	b.n	4868 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    47c0:	45d8      	cmp	r8, fp
    47c2:	d169      	bne.n	4898 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    47c4:	4629      	mov	r1, r5
    47c6:	b2f0      	uxtb	r0, r6
    47c8:	f00d ffb4 	bl	12734 <mpu_configure_region>
    47cc:	e029      	b.n	4822 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    47ce:	4b58      	ldr	r3, [pc, #352]	; (4930 <mpu_configure_regions_and_partition+0x188>)
    47d0:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    47d2:	68d9      	ldr	r1, [r3, #12]
    47d4:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    47d8:	f022 021f 	bic.w	r2, r2, #31
    47dc:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    47de:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    47e0:	4629      	mov	r1, r5
    47e2:	b2e0      	uxtb	r0, r4
    47e4:	f00d ffa6 	bl	12734 <mpu_configure_region>
    47e8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    47ea:	f110 0f16 	cmn.w	r0, #22
    47ee:	f000 8097 	beq.w	4920 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    47f2:	3401      	adds	r4, #1
    47f4:	e015      	b.n	4822 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    47f6:	3b01      	subs	r3, #1
	MPU->RNR = index;
    47f8:	494d      	ldr	r1, [pc, #308]	; (4930 <mpu_configure_regions_and_partition+0x188>)
    47fa:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    47fc:	690a      	ldr	r2, [r1, #16]
    47fe:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    4802:	f023 031f 	bic.w	r3, r3, #31
    4806:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4808:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    480a:	4629      	mov	r1, r5
    480c:	b2e0      	uxtb	r0, r4
    480e:	f00d ff91 	bl	12734 <mpu_configure_region>
    4812:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    4814:	f110 0f16 	cmn.w	r0, #22
    4818:	f000 8082 	beq.w	4920 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    481c:	3401      	adds	r4, #1
    481e:	e000      	b.n	4822 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    4820:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    4822:	3701      	adds	r7, #1
    4824:	9b00      	ldr	r3, [sp, #0]
    4826:	429f      	cmp	r7, r3
    4828:	da7a      	bge.n	4920 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    482a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    482e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    4832:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    4836:	f8d5 8004 	ldr.w	r8, [r5, #4]
    483a:	f1b8 0f00 	cmp.w	r8, #0
    483e:	d0f0      	beq.n	4822 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    4840:	9b01      	ldr	r3, [sp, #4]
    4842:	b123      	cbz	r3, 484e <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    4844:	4628      	mov	r0, r5
    4846:	f00d ff58 	bl	126fa <mpu_partition_is_valid>
		if (do_sanity_check &&
    484a:	2800      	cmp	r0, #0
    484c:	d064      	beq.n	4918 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    484e:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4852:	4658      	mov	r0, fp
    4854:	f00d ff47 	bl	126e6 <arm_cmse_mpu_region_get>
    4858:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    485a:	eb08 000b 	add.w	r0, r8, fp
    485e:	3801      	subs	r0, #1
    4860:	f00d ff41 	bl	126e6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4864:	4286      	cmp	r6, r0
    4866:	d1a8      	bne.n	47ba <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    4868:	f116 0f16 	cmn.w	r6, #22
    486c:	d057      	beq.n	491e <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    486e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4870:	42b3      	cmp	r3, r6
    4872:	db59      	blt.n	4928 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    4874:	4630      	mov	r0, r6
	MPU->RNR = index;
    4876:	4b2e      	ldr	r3, [pc, #184]	; (4930 <mpu_configure_regions_and_partition+0x188>)
    4878:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    487a:	68d9      	ldr	r1, [r3, #12]
    487c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    4880:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4882:	691b      	ldr	r3, [r3, #16]
    4884:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4888:	f859 300a 	ldr.w	r3, [r9, sl]
    488c:	686a      	ldr	r2, [r5, #4]
    488e:	441a      	add	r2, r3
    4890:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4894:	4299      	cmp	r1, r3
    4896:	d093      	beq.n	47c0 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    4898:	4299      	cmp	r1, r3
    489a:	d098      	beq.n	47ce <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    489c:	45d8      	cmp	r8, fp
    489e:	d0aa      	beq.n	47f6 <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    48a0:	3b01      	subs	r3, #1
	MPU->RNR = index;
    48a2:	4923      	ldr	r1, [pc, #140]	; (4930 <mpu_configure_regions_and_partition+0x188>)
    48a4:	4606      	mov	r6, r0
    48a6:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    48a8:	690a      	ldr	r2, [r1, #16]
    48aa:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    48ae:	f023 031f 	bic.w	r3, r3, #31
    48b2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    48b4:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    48b6:	4629      	mov	r1, r5
    48b8:	b2e0      	uxtb	r0, r4
    48ba:	f00d ff3b 	bl	12734 <mpu_configure_region>
    48be:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    48c0:	f110 0f16 	cmn.w	r0, #22
    48c4:	d02c      	beq.n	4920 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    48c6:	3001      	adds	r0, #1
	MPU->RNR = index;
    48c8:	4b19      	ldr	r3, [pc, #100]	; (4930 <mpu_configure_regions_and_partition+0x188>)
    48ca:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    48cc:	68d9      	ldr	r1, [r3, #12]
    48ce:	f89d 2010 	ldrb.w	r2, [sp, #16]
    48d2:	f361 0204 	bfi	r2, r1, #0, #5
    48d6:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    48da:	691b      	ldr	r3, [r3, #16]
    48dc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    48e0:	b2d2      	uxtb	r2, r2
    48e2:	f363 1247 	bfi	r2, r3, #5, #3
    48e6:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    48ea:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    48ee:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    48f0:	4413      	add	r3, r2
    48f2:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    48f4:	f023 031f 	bic.w	r3, r3, #31
    48f8:	eba8 080b 	sub.w	r8, r8, fp
    48fc:	4443      	add	r3, r8
    48fe:	3b01      	subs	r3, #1
    4900:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    4904:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    4906:	a902      	add	r1, sp, #8
    4908:	b2c0      	uxtb	r0, r0
    490a:	f00d ff08 	bl	1271e <region_allocate_and_init>
    490e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    4910:	f110 0f16 	cmn.w	r0, #22
    4914:	d184      	bne.n	4820 <mpu_configure_regions_and_partition+0x78>
    4916:	e003      	b.n	4920 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    4918:	f06f 0415 	mvn.w	r4, #21
    491c:	e000      	b.n	4920 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    491e:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    4920:	4620      	mov	r0, r4
    4922:	b007      	add	sp, #28
    4924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4928:	f06f 0415 	mvn.w	r4, #21
    492c:	e7f8      	b.n	4920 <mpu_configure_regions_and_partition+0x178>
    492e:	bf00      	nop
    4930:	e000ed90 	.word	0xe000ed90

00004934 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4934:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4936:	4c03      	ldr	r4, [pc, #12]	; (4944 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4938:	2301      	movs	r3, #1
    493a:	7822      	ldrb	r2, [r4, #0]
    493c:	f7ff ff34 	bl	47a8 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4940:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4942:	bd10      	pop	{r4, pc}
    4944:	20020a85 	.word	0x20020a85

00004948 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    4948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    494c:	4607      	mov	r7, r0
    494e:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4950:	2400      	movs	r4, #0
    4952:	e003      	b.n	495c <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    4954:	f06f 0515 	mvn.w	r5, #21
    4958:	e017      	b.n	498a <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    495a:	3401      	adds	r4, #1
    495c:	45a0      	cmp	r8, r4
    495e:	dd3c      	ble.n	49da <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    4960:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4964:	009a      	lsls	r2, r3, #2
    4966:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    496a:	685e      	ldr	r6, [r3, #4]
    496c:	2e00      	cmp	r6, #0
    496e:	d0f4      	beq.n	495a <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4970:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4974:	4648      	mov	r0, r9
    4976:	f00d feb6 	bl	126e6 <arm_cmse_mpu_region_get>
    497a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    497c:	eb06 0009 	add.w	r0, r6, r9
    4980:	3801      	subs	r0, #1
    4982:	f00d feb0 	bl	126e6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4986:	4285      	cmp	r5, r0
    4988:	d1e4      	bne.n	4954 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    498a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    498e:	4a16      	ldr	r2, [pc, #88]	; (49e8 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    4990:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4994:	f115 0f16 	cmn.w	r5, #22
    4998:	d020      	beq.n	49dc <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    499a:	4b14      	ldr	r3, [pc, #80]	; (49ec <mpu_mark_areas_for_dynamic_regions+0xa4>)
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	42ab      	cmp	r3, r5
    49a0:	dd1f      	ble.n	49e2 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    49a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    49a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    49aa:	4a11      	ldr	r2, [pc, #68]	; (49f0 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    49ac:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    49ae:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    49b0:	68d5      	ldr	r5, [r2, #12]
    49b2:	7b18      	ldrb	r0, [r3, #12]
    49b4:	f365 0004 	bfi	r0, r5, #0, #5
    49b8:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    49ba:	6910      	ldr	r0, [r2, #16]
    49bc:	f3c0 0042 	ubfx	r0, r0, #1, #3
    49c0:	7b1d      	ldrb	r5, [r3, #12]
    49c2:	f360 1547 	bfi	r5, r0, #5, #3
    49c6:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    49c8:	68d1      	ldr	r1, [r2, #12]
    49ca:	f021 011f 	bic.w	r1, r1, #31
    49ce:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    49d0:	6912      	ldr	r2, [r2, #16]
    49d2:	f022 021f 	bic.w	r2, r2, #31
    49d6:	611a      	str	r2, [r3, #16]
}
    49d8:	e7bf      	b.n	495a <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    49da:	2500      	movs	r5, #0
}
    49dc:	4628      	mov	r0, r5
    49de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    49e2:	f06f 0515 	mvn.w	r5, #21
    49e6:	e7f9      	b.n	49dc <mpu_mark_areas_for_dynamic_regions+0x94>
    49e8:	20020864 	.word	0x20020864
    49ec:	20020a85 	.word	0x20020a85
    49f0:	e000ed90 	.word	0xe000ed90

000049f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    49f4:	4b03      	ldr	r3, [pc, #12]	; (4a04 <arm_core_mpu_enable+0x10>)
    49f6:	2205      	movs	r2, #5
    49f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    49fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4a02:	4770      	bx	lr
    4a04:	e000ed90 	.word	0xe000ed90

00004a08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4a08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4a0c:	4b01      	ldr	r3, [pc, #4]	; (4a14 <arm_core_mpu_disable+0xc>)
    4a0e:	2200      	movs	r2, #0
    4a10:	605a      	str	r2, [r3, #4]
}
    4a12:	4770      	bx	lr
    4a14:	e000ed90 	.word	0xe000ed90

00004a18 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4a18:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4a1a:	4b0e      	ldr	r3, [pc, #56]	; (4a54 <z_arm_mpu_init+0x3c>)
    4a1c:	681d      	ldr	r5, [r3, #0]
    4a1e:	2d08      	cmp	r5, #8
    4a20:	d815      	bhi.n	4a4e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4a22:	f7ff fff1 	bl	4a08 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4a26:	f7ff fe9f 	bl	4768 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a2a:	2400      	movs	r4, #0
    4a2c:	42a5      	cmp	r5, r4
    4a2e:	d908      	bls.n	4a42 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4a30:	4b08      	ldr	r3, [pc, #32]	; (4a54 <z_arm_mpu_init+0x3c>)
    4a32:	6859      	ldr	r1, [r3, #4]
    4a34:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4a38:	4620      	mov	r0, r4
    4a3a:	f7ff fe9d 	bl	4778 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a3e:	3401      	adds	r4, #1
    4a40:	e7f4      	b.n	4a2c <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4a42:	4b05      	ldr	r3, [pc, #20]	; (4a58 <z_arm_mpu_init+0x40>)
    4a44:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4a46:	f7ff ffd5 	bl	49f4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4a4a:	2000      	movs	r0, #0
}
    4a4c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4a4e:	f04f 30ff 	mov.w	r0, #4294967295
    4a52:	e7fb      	b.n	4a4c <z_arm_mpu_init+0x34>
    4a54:	00068e78 	.word	0x00068e78
    4a58:	20020a85 	.word	0x20020a85

00004a5c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4a5c:	4b01      	ldr	r3, [pc, #4]	; (4a64 <__stdout_hook_install+0x8>)
    4a5e:	6018      	str	r0, [r3, #0]
}
    4a60:	4770      	bx	lr
    4a62:	bf00      	nop
    4a64:	2000002c 	.word	0x2000002c

00004a68 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4a68:	b570      	push	{r4, r5, r6, lr}
    4a6a:	4606      	mov	r6, r0
    4a6c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    4a6e:	2400      	movs	r4, #0
    4a70:	e000      	b.n	4a74 <z_impl_zephyr_read_stdin+0xc>
    4a72:	3401      	adds	r4, #1
    4a74:	42ac      	cmp	r4, r5
    4a76:	da08      	bge.n	4a8a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4a78:	4b05      	ldr	r3, [pc, #20]	; (4a90 <z_impl_zephyr_read_stdin+0x28>)
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	4798      	blx	r3
    4a7e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4a80:	280a      	cmp	r0, #10
    4a82:	d001      	beq.n	4a88 <z_impl_zephyr_read_stdin+0x20>
    4a84:	280d      	cmp	r0, #13
    4a86:	d1f4      	bne.n	4a72 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4a88:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    4a8a:	4620      	mov	r0, r4
    4a8c:	bd70      	pop	{r4, r5, r6, pc}
    4a8e:	bf00      	nop
    4a90:	20000028 	.word	0x20000028

00004a94 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a96:	4605      	mov	r5, r0
    4a98:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4a9a:	2400      	movs	r4, #0
    4a9c:	e004      	b.n	4aa8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    4a9e:	4b09      	ldr	r3, [pc, #36]	; (4ac4 <z_impl_zephyr_write_stdout+0x30>)
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	7830      	ldrb	r0, [r6, #0]
    4aa4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4aa6:	3401      	adds	r4, #1
    4aa8:	42bc      	cmp	r4, r7
    4aaa:	da08      	bge.n	4abe <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    4aac:	192e      	adds	r6, r5, r4
    4aae:	5d2b      	ldrb	r3, [r5, r4]
    4ab0:	2b0a      	cmp	r3, #10
    4ab2:	d1f4      	bne.n	4a9e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4ab4:	4b03      	ldr	r3, [pc, #12]	; (4ac4 <z_impl_zephyr_write_stdout+0x30>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	200d      	movs	r0, #13
    4aba:	4798      	blx	r3
    4abc:	e7ef      	b.n	4a9e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    4abe:	4638      	mov	r0, r7
    4ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ac2:	bf00      	nop
    4ac4:	2000002c 	.word	0x2000002c

00004ac8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4ac8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    4aca:	2205      	movs	r2, #5
    4acc:	4902      	ldr	r1, [pc, #8]	; (4ad8 <_exit+0x10>)
    4ace:	2001      	movs	r0, #1
    4ad0:	f00d fe60 	bl	12794 <_write>
	while (1) {
    4ad4:	e7fe      	b.n	4ad4 <_exit+0xc>
    4ad6:	bf00      	nop
    4ad8:	00068e60 	.word	0x00068e60

00004adc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    4adc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4ade:	4b08      	ldr	r3, [pc, #32]	; (4b00 <_sbrk+0x24>)
    4ae0:	6819      	ldr	r1, [r3, #0]
    4ae2:	4b08      	ldr	r3, [pc, #32]	; (4b04 <_sbrk+0x28>)
    4ae4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4ae6:	440a      	add	r2, r1
    4ae8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4aec:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
    4af0:	429a      	cmp	r2, r3
    4af2:	d202      	bcs.n	4afa <_sbrk+0x1e>
		heap_sz += count;
    4af4:	4b02      	ldr	r3, [pc, #8]	; (4b00 <_sbrk+0x24>)
    4af6:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4af8:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    4afa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    4afe:	4770      	bx	lr
    4b00:	20020878 	.word	0x20020878
    4b04:	20029588 	.word	0x20029588

00004b08 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4b08:	4800      	ldr	r0, [pc, #0]	; (4b0c <get_hf_flags+0x4>)
    4b0a:	4770      	bx	lr
    4b0c:	20020914 	.word	0x20020914

00004b10 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4b10:	4b01      	ldr	r3, [pc, #4]	; (4b18 <get_subsys+0x8>)
    4b12:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4b14:	1140      	asrs	r0, r0, #5
    4b16:	4770      	bx	lr
    4b18:	2002088c 	.word	0x2002088c

00004b1c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b1c:	b538      	push	{r3, r4, r5, lr}
    4b1e:	4605      	mov	r5, r0
    4b20:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4b22:	f7ff fff5 	bl	4b10 <get_subsys>
    4b26:	4601      	mov	r1, r0
    4b28:	2240      	movs	r2, #64	; 0x40
    4b2a:	4803      	ldr	r0, [pc, #12]	; (4b38 <onoff_stop+0x1c>)
    4b2c:	f00d fed9 	bl	128e2 <stop>
    4b30:	4601      	mov	r1, r0
	notify(mgr, res);
    4b32:	4628      	mov	r0, r5
    4b34:	47a0      	blx	r4
}
    4b36:	bd38      	pop	{r3, r4, r5, pc}
    4b38:	00016cd0 	.word	0x00016cd0

00004b3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b3c:	b530      	push	{r4, r5, lr}
    4b3e:	b083      	sub	sp, #12
    4b40:	4605      	mov	r5, r0
    4b42:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b44:	f7ff ffe4 	bl	4b10 <get_subsys>
    4b48:	4601      	mov	r1, r0
    4b4a:	2340      	movs	r3, #64	; 0x40
    4b4c:	9300      	str	r3, [sp, #0]
    4b4e:	4623      	mov	r3, r4
    4b50:	4a05      	ldr	r2, [pc, #20]	; (4b68 <onoff_start+0x2c>)
    4b52:	4806      	ldr	r0, [pc, #24]	; (4b6c <onoff_start+0x30>)
    4b54:	f00d fedf 	bl	12916 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4b58:	1e01      	subs	r1, r0, #0
    4b5a:	db01      	blt.n	4b60 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4b5c:	b003      	add	sp, #12
    4b5e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4b60:	4628      	mov	r0, r5
    4b62:	47a0      	blx	r4
}
    4b64:	e7fa      	b.n	4b5c <onoff_start+0x20>
    4b66:	bf00      	nop
    4b68:	0001295f 	.word	0x0001295f
    4b6c:	00016cd0 	.word	0x00016cd0

00004b70 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4b70:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4b72:	2805      	cmp	r0, #5
    4b74:	d815      	bhi.n	4ba2 <clock_event_handler+0x32>
    4b76:	e8df f000 	tbb	[pc, r0]
    4b7a:	1a03      	.short	0x1a03
    4b7c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b80:	2100      	movs	r1, #0
    4b82:	480d      	ldr	r0, [pc, #52]	; (4bb8 <clock_event_handler+0x48>)
    4b84:	f00d fe38 	bl	127f8 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4b88:	6883      	ldr	r3, [r0, #8]
    4b8a:	f013 0f07 	tst.w	r3, #7
    4b8e:	d108      	bne.n	4ba2 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b90:	2100      	movs	r1, #0
    4b92:	4809      	ldr	r0, [pc, #36]	; (4bb8 <clock_event_handler+0x48>)
    4b94:	f00d fe93 	bl	128be <clkstarted_handle>
    4b98:	e003      	b.n	4ba2 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4b9a:	2102      	movs	r1, #2
    4b9c:	4806      	ldr	r0, [pc, #24]	; (4bb8 <clock_event_handler+0x48>)
    4b9e:	f00d fe8e 	bl	128be <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4ba2:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4ba4:	2103      	movs	r1, #3
    4ba6:	4804      	ldr	r0, [pc, #16]	; (4bb8 <clock_event_handler+0x48>)
    4ba8:	f00d fe89 	bl	128be <clkstarted_handle>
		break;
    4bac:	e7f9      	b.n	4ba2 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4bae:	2101      	movs	r1, #1
    4bb0:	4801      	ldr	r0, [pc, #4]	; (4bb8 <clock_event_handler+0x48>)
    4bb2:	f00d fe84 	bl	128be <clkstarted_handle>
}
    4bb6:	e7f4      	b.n	4ba2 <clock_event_handler+0x32>
    4bb8:	00016cd0 	.word	0x00016cd0

00004bbc <generic_hfclk_start>:
{
    4bbc:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bbe:	f04f 0320 	mov.w	r3, #32
    4bc2:	f3ef 8411 	mrs	r4, BASEPRI
    4bc6:	f383 8812 	msr	BASEPRI_MAX, r3
    4bca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4bce:	4a13      	ldr	r2, [pc, #76]	; (4c1c <generic_hfclk_start+0x60>)
    4bd0:	6813      	ldr	r3, [r2, #0]
    4bd2:	f043 0302 	orr.w	r3, r3, #2
    4bd6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4bd8:	f013 0f01 	tst.w	r3, #1
    4bdc:	d108      	bne.n	4bf0 <generic_hfclk_start+0x34>
	bool already_started = false;
    4bde:	2300      	movs	r3, #0
	__asm__ volatile(
    4be0:	f384 8811 	msr	BASEPRI, r4
    4be4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4be8:	b99b      	cbnz	r3, 4c12 <generic_hfclk_start+0x56>
	hfclk_start();
    4bea:	f00d fec0 	bl	1296e <hfclk_start>
}
    4bee:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4bf0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bf4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4bf8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4bfc:	f012 0f01 	tst.w	r2, #1
    4c00:	d101      	bne.n	4c06 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4c02:	2300      	movs	r3, #0
    4c04:	e7ec      	b.n	4be0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4c06:	f7ff ff7f 	bl	4b08 <get_hf_flags>
    4c0a:	f00d fe45 	bl	12898 <set_on_state>
			already_started = true;
    4c0e:	2301      	movs	r3, #1
    4c10:	e7e6      	b.n	4be0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4c12:	2100      	movs	r1, #0
    4c14:	4802      	ldr	r0, [pc, #8]	; (4c20 <generic_hfclk_start+0x64>)
    4c16:	f00d fe52 	bl	128be <clkstarted_handle>
		return;
    4c1a:	e7e8      	b.n	4bee <generic_hfclk_start+0x32>
    4c1c:	2002093c 	.word	0x2002093c
    4c20:	00016cd0 	.word	0x00016cd0

00004c24 <generic_hfclk_stop>:
{
    4c24:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c26:	4b08      	ldr	r3, [pc, #32]	; (4c48 <generic_hfclk_stop+0x24>)
    4c28:	e8d3 2fef 	ldaex	r2, [r3]
    4c2c:	f022 0102 	bic.w	r1, r2, #2
    4c30:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4c34:	2800      	cmp	r0, #0
    4c36:	d1f7      	bne.n	4c28 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4c38:	f012 0f01 	tst.w	r2, #1
    4c3c:	d000      	beq.n	4c40 <generic_hfclk_stop+0x1c>
}
    4c3e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4c40:	f00d fea9 	bl	12996 <hfclk_stop>
    4c44:	e7fb      	b.n	4c3e <generic_hfclk_stop+0x1a>
    4c46:	bf00      	nop
    4c48:	2002093c 	.word	0x2002093c

00004c4c <api_blocking_start>:
{
    4c4c:	b500      	push	{lr}
    4c4e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c50:	f8cd d000 	str.w	sp, [sp]
    4c54:	f8cd d004 	str.w	sp, [sp, #4]
    4c58:	2300      	movs	r3, #0
    4c5a:	9302      	str	r3, [sp, #8]
    4c5c:	2301      	movs	r3, #1
    4c5e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c60:	466b      	mov	r3, sp
    4c62:	4a07      	ldr	r2, [pc, #28]	; (4c80 <api_blocking_start+0x34>)
    4c64:	f00d fe73 	bl	1294e <api_start>
	if (err < 0) {
    4c68:	2800      	cmp	r0, #0
    4c6a:	db05      	blt.n	4c78 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c70:	2300      	movs	r3, #0
    4c72:	4668      	mov	r0, sp
    4c74:	f00a fcd2 	bl	f61c <z_impl_k_sem_take>
}
    4c78:	b005      	add	sp, #20
    4c7a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c7e:	bf00      	nop
    4c80:	000129bf 	.word	0x000129bf

00004c84 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4c84:	b570      	push	{r4, r5, r6, lr}
    4c86:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4c88:	2200      	movs	r2, #0
    4c8a:	2101      	movs	r1, #1
    4c8c:	2005      	movs	r0, #5
    4c8e:	f7ff fa97 	bl	41c0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4c92:	2005      	movs	r0, #5
    4c94:	f7ff fa76 	bl	4184 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4c98:	4811      	ldr	r0, [pc, #68]	; (4ce0 <clk_init+0x5c>)
    4c9a:	f001 f917 	bl	5ecc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4c9e:	4b11      	ldr	r3, [pc, #68]	; (4ce4 <clk_init+0x60>)
    4ca0:	4298      	cmp	r0, r3
    4ca2:	d119      	bne.n	4cd8 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4ca4:	f00e f9ae 	bl	13004 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4ca8:	2400      	movs	r4, #0
    4caa:	2c03      	cmp	r4, #3
    4cac:	d812      	bhi.n	4cd4 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4cae:	4621      	mov	r1, r4
    4cb0:	4630      	mov	r0, r6
    4cb2:	f00d fda1 	bl	127f8 <get_sub_data>
    4cb6:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4cb8:	4621      	mov	r1, r4
    4cba:	4630      	mov	r0, r6
    4cbc:	f00d fda7 	bl	1280e <get_onoff_manager>
    4cc0:	4909      	ldr	r1, [pc, #36]	; (4ce8 <clk_init+0x64>)
    4cc2:	f00d f98d 	bl	11fe0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4cc6:	2800      	cmp	r0, #0
    4cc8:	db05      	blt.n	4cd6 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4cca:	2301      	movs	r3, #1
    4ccc:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4cce:	441c      	add	r4, r3
    4cd0:	b2e4      	uxtb	r4, r4
    4cd2:	e7ea      	b.n	4caa <clk_init+0x26>
	}

	return 0;
    4cd4:	2000      	movs	r0, #0
}
    4cd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4cd8:	f06f 0004 	mvn.w	r0, #4
    4cdc:	e7fb      	b.n	4cd6 <clk_init+0x52>
    4cde:	bf00      	nop
    4ce0:	00004b71 	.word	0x00004b71
    4ce4:	0bad0000 	.word	0x0bad0000
    4ce8:	00068edc 	.word	0x00068edc

00004cec <lfclk_spinwait>:
{
    4cec:	b570      	push	{r4, r5, r6, lr}
    4cee:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4cf0:	2801      	cmp	r0, #1
    4cf2:	d107      	bne.n	4d04 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4cf4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cf8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4cfc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4d00:	2b02      	cmp	r3, #2
    4d02:	d03f      	beq.n	4d84 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d04:	f010 ffbe 	bl	15c84 <k_is_in_isr>
    4d08:	b920      	cbnz	r0, 4d14 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    4d0a:	4b30      	ldr	r3, [pc, #192]	; (4dcc <lfclk_spinwait+0xe0>)
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	b19b      	cbz	r3, 4d38 <lfclk_spinwait+0x4c>
    4d10:	2300      	movs	r3, #0
    4d12:	e000      	b.n	4d16 <lfclk_spinwait+0x2a>
    4d14:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4d16:	461c      	mov	r4, r3
    4d18:	b183      	cbz	r3, 4d3c <lfclk_spinwait+0x50>
	__asm__ volatile(
    4d1a:	f04f 0320 	mov.w	r3, #32
    4d1e:	f3ef 8611 	mrs	r6, BASEPRI
    4d22:	f383 8812 	msr	BASEPRI_MAX, r3
    4d26:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4d2a:	b9a4      	cbnz	r4, 4d56 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    4d2c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d30:	2202      	movs	r2, #2
    4d32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4d36:	e00e      	b.n	4d56 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d38:	2301      	movs	r3, #1
    4d3a:	e7ec      	b.n	4d16 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    4d3c:	2600      	movs	r6, #0
    4d3e:	e7f4      	b.n	4d2a <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4d40:	b30c      	cbz	r4, 4d86 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4d42:	4630      	mov	r0, r6
    4d44:	f7ff fa14 	bl	4170 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4d48:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d4c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4d50:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d52:	2b01      	cmp	r3, #1
    4d54:	d01c      	beq.n	4d90 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d56:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4d5a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4d5e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d62:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4d66:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4d6a:	d126      	bne.n	4dba <lfclk_spinwait+0xce>
    return false;
    4d6c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d6e:	2a00      	cmp	r2, #0
    4d70:	d0e6      	beq.n	4d40 <lfclk_spinwait+0x54>
    4d72:	2b02      	cmp	r3, #2
    4d74:	d001      	beq.n	4d7a <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d76:	2d01      	cmp	r5, #1
    4d78:	d1e2      	bne.n	4d40 <lfclk_spinwait+0x54>
	if (isr_mode) {
    4d7a:	b304      	cbz	r4, 4dbe <lfclk_spinwait+0xd2>
	__asm__ volatile(
    4d7c:	f386 8811 	msr	BASEPRI, r6
    4d80:	f3bf 8f6f 	isb	sy
}
    4d84:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    4d86:	2021      	movs	r0, #33	; 0x21
    4d88:	2100      	movs	r1, #0
    4d8a:	f00b f803 	bl	fd94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d8e:	e7db      	b.n	4d48 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d90:	4b0f      	ldr	r3, [pc, #60]	; (4dd0 <lfclk_spinwait+0xe4>)
    4d92:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4d94:	2b00      	cmp	r3, #0
    4d96:	d0de      	beq.n	4d56 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d98:	4b0d      	ldr	r3, [pc, #52]	; (4dd0 <lfclk_spinwait+0xe4>)
    4d9a:	2200      	movs	r2, #0
    4d9c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4d9e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4da0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4da4:	2202      	movs	r2, #2
    4da6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4daa:	4b0a      	ldr	r3, [pc, #40]	; (4dd4 <lfclk_spinwait+0xe8>)
    4dac:	2220      	movs	r2, #32
    4dae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4db2:	4b09      	ldr	r3, [pc, #36]	; (4dd8 <lfclk_spinwait+0xec>)
    4db4:	2201      	movs	r2, #1
    4db6:	601a      	str	r2, [r3, #0]
}
    4db8:	e7cd      	b.n	4d56 <lfclk_spinwait+0x6a>
                return true;
    4dba:	2201      	movs	r2, #1
    4dbc:	e7d7      	b.n	4d6e <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    4dbe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4dc2:	2202      	movs	r2, #2
    4dc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4dc8:	e7dc      	b.n	4d84 <lfclk_spinwait+0x98>
    4dca:	bf00      	nop
    4dcc:	20020a87 	.word	0x20020a87
    4dd0:	50005104 	.word	0x50005104
    4dd4:	e000e100 	.word	0xe000e100
    4dd8:	50005008 	.word	0x50005008

00004ddc <z_nrf_clock_control_lf_on>:
{
    4ddc:	b510      	push	{r4, lr}
    4dde:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4de0:	4b0e      	ldr	r3, [pc, #56]	; (4e1c <z_nrf_clock_control_lf_on+0x40>)
    4de2:	2101      	movs	r1, #1
    4de4:	e8d3 2fef 	ldaex	r2, [r3]
    4de8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4dec:	2800      	cmp	r0, #0
    4dee:	d1f9      	bne.n	4de4 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4df0:	b11a      	cbz	r2, 4dfa <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4df2:	1e63      	subs	r3, r4, #1
    4df4:	2b01      	cmp	r3, #1
    4df6:	d90c      	bls.n	4e12 <z_nrf_clock_control_lf_on+0x36>
}
    4df8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4dfa:	4809      	ldr	r0, [pc, #36]	; (4e20 <z_nrf_clock_control_lf_on+0x44>)
    4dfc:	f00d fd07 	bl	1280e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4e00:	4908      	ldr	r1, [pc, #32]	; (4e24 <z_nrf_clock_control_lf_on+0x48>)
    4e02:	2300      	movs	r3, #0
    4e04:	604b      	str	r3, [r1, #4]
    4e06:	60cb      	str	r3, [r1, #12]
    4e08:	2301      	movs	r3, #1
    4e0a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4e0c:	f00d f904 	bl	12018 <onoff_request>
    4e10:	e7ef      	b.n	4df2 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4e12:	4620      	mov	r0, r4
    4e14:	f7ff ff6a 	bl	4cec <lfclk_spinwait>
		break;
    4e18:	e7ee      	b.n	4df8 <z_nrf_clock_control_lf_on+0x1c>
    4e1a:	bf00      	nop
    4e1c:	20020940 	.word	0x20020940
    4e20:	00016cd0 	.word	0x00016cd0
    4e24:	2002087c 	.word	0x2002087c

00004e28 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4e28:	b538      	push	{r3, r4, r5, lr}
    4e2a:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4e2c:	b2c5      	uxtb	r5, r0
    4e2e:	4b0b      	ldr	r3, [pc, #44]	; (4e5c <console_out+0x34>)
    4e30:	681b      	ldr	r3, [r3, #0]
    4e32:	4628      	mov	r0, r5
    4e34:	4798      	blx	r3

	if (handled_by_debug_server) {
    4e36:	2801      	cmp	r0, #1
    4e38:	d007      	beq.n	4e4a <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4e3a:	2c0a      	cmp	r4, #10
    4e3c:	d007      	beq.n	4e4e <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4e3e:	4b08      	ldr	r3, [pc, #32]	; (4e60 <console_out+0x38>)
    4e40:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4e42:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4e44:	685b      	ldr	r3, [r3, #4]
    4e46:	4629      	mov	r1, r5
    4e48:	4798      	blx	r3

	return c;
}
    4e4a:	4620      	mov	r0, r4
    4e4c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4e4e:	4b04      	ldr	r3, [pc, #16]	; (4e60 <console_out+0x38>)
    4e50:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4e52:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4e54:	685b      	ldr	r3, [r3, #4]
    4e56:	210d      	movs	r1, #13
    4e58:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4e5a:	e7f0      	b.n	4e3e <console_out+0x16>
    4e5c:	20000030 	.word	0x20000030
    4e60:	20020944 	.word	0x20020944

00004e64 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4e64:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4e66:	4c04      	ldr	r4, [pc, #16]	; (4e78 <uart_console_hook_install+0x14>)
    4e68:	4620      	mov	r0, r4
    4e6a:	f7ff fdf7 	bl	4a5c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4e6e:	4620      	mov	r0, r4
    4e70:	f7fe f89c 	bl	2fac <__printk_hook_install>
}
    4e74:	bd10      	pop	{r4, pc}
    4e76:	bf00      	nop
    4e78:	00004e29 	.word	0x00004e29

00004e7c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4e7c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4e7e:	4806      	ldr	r0, [pc, #24]	; (4e98 <uart_console_init+0x1c>)
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <uart_console_init+0x20>)
    4e82:	6018      	str	r0, [r3, #0]
    4e84:	f010 fe79 	bl	15b7a <z_device_ready>
    4e88:	b118      	cbz	r0, 4e92 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4e8a:	f7ff ffeb 	bl	4e64 <uart_console_hook_install>

	return 0;
    4e8e:	2000      	movs	r0, #0
}
    4e90:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4e92:	f06f 0012 	mvn.w	r0, #18
    4e96:	e7fb      	b.n	4e90 <uart_console_init+0x14>
    4e98:	00016ce8 	.word	0x00016ce8
    4e9c:	20020944 	.word	0x20020944

00004ea0 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4ea0:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4ea2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ea4:	f8d3 c004 	ldr.w	ip, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ea8:	4b38      	ldr	r3, [pc, #224]	; (4f8c <gpio_nrfx_config+0xec>)
    4eaa:	4013      	ands	r3, r2
    4eac:	4c38      	ldr	r4, [pc, #224]	; (4f90 <gpio_nrfx_config+0xf0>)
    4eae:	42a3      	cmp	r3, r4
    4eb0:	d027      	beq.n	4f02 <gpio_nrfx_config+0x62>
    4eb2:	d812      	bhi.n	4eda <gpio_nrfx_config+0x3a>
    4eb4:	2b06      	cmp	r3, #6
    4eb6:	d026      	beq.n	4f06 <gpio_nrfx_config+0x66>
    4eb8:	d904      	bls.n	4ec4 <gpio_nrfx_config+0x24>
    4eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4ebe:	d109      	bne.n	4ed4 <gpio_nrfx_config+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4ec0:	2501      	movs	r5, #1
    4ec2:	e016      	b.n	4ef2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ec4:	b30b      	cbz	r3, 4f0a <gpio_nrfx_config+0x6a>
    4ec6:	2b02      	cmp	r3, #2
    4ec8:	d101      	bne.n	4ece <gpio_nrfx_config+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4eca:	2504      	movs	r5, #4
    4ecc:	e011      	b.n	4ef2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ece:	f06f 0015 	mvn.w	r0, #21
    4ed2:	e049      	b.n	4f68 <gpio_nrfx_config+0xc8>
    4ed4:	f06f 0015 	mvn.w	r0, #21
    4ed8:	e046      	b.n	4f68 <gpio_nrfx_config+0xc8>
    4eda:	4c2e      	ldr	r4, [pc, #184]	; (4f94 <gpio_nrfx_config+0xf4>)
    4edc:	42a3      	cmp	r3, r4
    4ede:	d016      	beq.n	4f0e <gpio_nrfx_config+0x6e>
    4ee0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4ee4:	d101      	bne.n	4eea <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
    4ee6:	2503      	movs	r5, #3
    4ee8:	e003      	b.n	4ef2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4eee:	d149      	bne.n	4f84 <gpio_nrfx_config+0xe4>
		drive = NRF_GPIO_PIN_S0H1;
    4ef0:	2502      	movs	r5, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4ef2:	f012 0f10 	tst.w	r2, #16
    4ef6:	d10c      	bne.n	4f12 <gpio_nrfx_config+0x72>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4ef8:	f012 0f20 	tst.w	r2, #32
    4efc:	d036      	beq.n	4f6c <gpio_nrfx_config+0xcc>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4efe:	2601      	movs	r6, #1
    4f00:	e008      	b.n	4f14 <gpio_nrfx_config+0x74>
		drive = NRF_GPIO_PIN_H0D1;
    4f02:	2507      	movs	r5, #7
    4f04:	e7f5      	b.n	4ef2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
    4f06:	2506      	movs	r5, #6
    4f08:	e7f3      	b.n	4ef2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f0a:	2500      	movs	r5, #0
    4f0c:	e7f1      	b.n	4ef2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    4f0e:	2505      	movs	r5, #5
    4f10:	e7ef      	b.n	4ef2 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
    4f12:	2603      	movs	r6, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4f14:	f3c2 2440 	ubfx	r4, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f18:	f412 7f80 	tst.w	r2, #256	; 0x100
    4f1c:	bf0c      	ite	eq
    4f1e:	2701      	moveq	r7, #1
    4f20:	2700      	movne	r7, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4f22:	f412 7f00 	tst.w	r2, #512	; 0x200
    4f26:	d006      	beq.n	4f36 <gpio_nrfx_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4f28:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4f2c:	d020      	beq.n	4f70 <gpio_nrfx_config+0xd0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4f2e:	2301      	movs	r3, #1
    4f30:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4f32:	f8cc 3008 	str.w	r3, [ip, #8]
	return port->config;
    4f36:	6843      	ldr	r3, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4f38:	7a18      	ldrb	r0, [r3, #8]
    4f3a:	f001 031f 	and.w	r3, r1, #31
    4f3e:	ea43 1140 	orr.w	r1, r3, r0, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4f42:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f44:	2901      	cmp	r1, #1
    4f46:	d01b      	beq.n	4f80 <gpio_nrfx_config+0xe0>
        case 0: return NRF_P0;
    4f48:	4813      	ldr	r0, [pc, #76]	; (4f98 <gpio_nrfx_config+0xf8>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4f4a:	3380      	adds	r3, #128	; 0x80
    4f4c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    4f50:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f54:	ea44 0247 	orr.w	r2, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4f58:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f5c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f60:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    4f62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4f66:	2000      	movs	r0, #0
}
    4f68:	bcf0      	pop	{r4, r5, r6, r7}
    4f6a:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4f6c:	2600      	movs	r6, #0
    4f6e:	e7d1      	b.n	4f14 <gpio_nrfx_config+0x74>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4f70:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4f74:	d0df      	beq.n	4f36 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4f76:	2301      	movs	r3, #1
    4f78:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4f7a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    4f7e:	e7da      	b.n	4f36 <gpio_nrfx_config+0x96>
        case 1: return NRF_P1;
    4f80:	4806      	ldr	r0, [pc, #24]	; (4f9c <gpio_nrfx_config+0xfc>)
    4f82:	e7e2      	b.n	4f4a <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f84:	f06f 0015 	mvn.w	r0, #21
    4f88:	e7ee      	b.n	4f68 <gpio_nrfx_config+0xc8>
    4f8a:	bf00      	nop
    4f8c:	00f00006 	.word	0x00f00006
    4f90:	00100006 	.word	0x00100006
    4f94:	00400002 	.word	0x00400002
    4f98:	50842500 	.word	0x50842500
    4f9c:	50842800 	.word	0x50842800

00004fa0 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4fa0:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    4fa2:	6905      	ldr	r5, [r0, #16]
	return port->config;
    4fa4:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    4fa6:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4fa8:	696a      	ldr	r2, [r5, #20]
    4faa:	69ab      	ldr	r3, [r5, #24]
    4fac:	4313      	orrs	r3, r2
    4fae:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    4fb2:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4fb4:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    4fb6:	e010      	b.n	4fda <cfg_level_pins+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4fb8:	f04f 0c02 	mov.w	ip, #2
    4fbc:	e01c      	b.n	4ff8 <cfg_level_pins+0x58>
    4fbe:	4f13      	ldr	r7, [pc, #76]	; (500c <cfg_level_pins+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4fc0:	3480      	adds	r4, #128	; 0x80
    4fc2:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    4fc6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4fca:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    4fce:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    4fd2:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    4fd6:	3001      	adds	r0, #1
		bit <<= 1;
    4fd8:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    4fda:	b1a1      	cbz	r1, 5006 <cfg_level_pins+0x66>
		if (level_pins & bit) {
    4fdc:	420b      	tst	r3, r1
    4fde:	d0fa      	beq.n	4fd6 <cfg_level_pins+0x36>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4fe0:	7a34      	ldrb	r4, [r6, #8]
    4fe2:	f000 021f 	and.w	r2, r0, #31
    4fe6:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4fea:	692c      	ldr	r4, [r5, #16]
    4fec:	40c4      	lsrs	r4, r0
    4fee:	f014 0f01 	tst.w	r4, #1
    4ff2:	d1e1      	bne.n	4fb8 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    4ff4:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    4ff8:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    4ffc:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ffe:	2a01      	cmp	r2, #1
    5000:	d0dd      	beq.n	4fbe <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    5002:	4f03      	ldr	r7, [pc, #12]	; (5010 <cfg_level_pins+0x70>)
    5004:	e7dc      	b.n	4fc0 <cfg_level_pins+0x20>
	}
}
    5006:	bcf0      	pop	{r4, r5, r6, r7}
    5008:	4770      	bx	lr
    500a:	bf00      	nop
    500c:	50842800 	.word	0x50842800
    5010:	50842500 	.word	0x50842500

00005014 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    5014:	b5f0      	push	{r4, r5, r6, r7, lr}
    5016:	468c      	mov	ip, r1
	return port->data;
    5018:	6903      	ldr	r3, [r0, #16]
	return port->config;
    501a:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    501c:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    501e:	695a      	ldr	r2, [r3, #20]
    5020:	6998      	ldr	r0, [r3, #24]
    5022:	4302      	orrs	r2, r0
    5024:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    5028:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    502a:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    502c:	6918      	ldr	r0, [r3, #16]
    502e:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    5030:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    5034:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    5036:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    5038:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    503a:	e015      	b.n	5068 <check_level_trigger_pins+0x54>
        case 1: return NRF_P1;
    503c:	f8df e070 	ldr.w	lr, [pc, #112]	; 50b0 <check_level_trigger_pins+0x9c>
    5040:	e025      	b.n	508e <check_level_trigger_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    5042:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5046:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5048:	2a01      	cmp	r2, #1
    504a:	d02d      	beq.n	50a8 <check_level_trigger_pins+0x94>
        case 0: return NRF_P0;
    504c:	f8df e064 	ldr.w	lr, [pc, #100]	; 50b4 <check_level_trigger_pins+0xa0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5050:	f106 0280 	add.w	r2, r6, #128	; 0x80
    5054:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    5058:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    505c:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    5060:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    5064:	3501      	adds	r5, #1
		bit <<= 1;
    5066:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    5068:	b30c      	cbz	r4, 50ae <check_level_trigger_pins+0x9a>
		if (check_pins & bit) {
    506a:	4223      	tst	r3, r4
    506c:	d0fa      	beq.n	5064 <check_level_trigger_pins+0x50>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    506e:	7a0e      	ldrb	r6, [r1, #8]
    5070:	f005 021f 	and.w	r2, r5, #31
    5074:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    5078:	423b      	tst	r3, r7
    507a:	d1e2      	bne.n	5042 <check_level_trigger_pins+0x2e>
    *p_pin = pin_number & 0x1F;
    507c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5080:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5084:	f1be 0f01 	cmp.w	lr, #1
    5088:	d0d8      	beq.n	503c <check_level_trigger_pins+0x28>
        case 0: return NRF_P0;
    508a:	f8df e028 	ldr.w	lr, [pc, #40]	; 50b4 <check_level_trigger_pins+0xa0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    508e:	3680      	adds	r6, #128	; 0x80
    5090:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5094:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    5098:	2e02      	cmp	r6, #2
    509a:	d1d2      	bne.n	5042 <check_level_trigger_pins+0x2e>
					*sense_levels |= bit;
    509c:	f8dc 6000 	ldr.w	r6, [ip]
    50a0:	431e      	orrs	r6, r3
    50a2:	f8cc 6000 	str.w	r6, [ip]
    50a6:	e7cc      	b.n	5042 <check_level_trigger_pins+0x2e>
        case 1: return NRF_P1;
    50a8:	f8df e004 	ldr.w	lr, [pc, #4]	; 50b0 <check_level_trigger_pins+0x9c>
    50ac:	e7d0      	b.n	5050 <check_level_trigger_pins+0x3c>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50b0:	50842800 	.word	0x50842800
    50b4:	50842500 	.word	0x50842500

000050b8 <gpiote_pin_cleanup>:
{
    50b8:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    50ba:	4b14      	ldr	r3, [pc, #80]	; (510c <gpiote_pin_cleanup+0x54>)
    50bc:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    50c0:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    50c2:	2300      	movs	r3, #0
    50c4:	e000      	b.n	50c8 <gpiote_pin_cleanup+0x10>
    50c6:	3301      	adds	r3, #1
    50c8:	2b07      	cmp	r3, #7
    50ca:	d81d      	bhi.n	5108 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50cc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    50d0:	490e      	ldr	r1, [pc, #56]	; (510c <gpiote_pin_cleanup+0x54>)
    50d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    50d6:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    50da:	4290      	cmp	r0, r2
    50dc:	d1f3      	bne.n	50c6 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    50de:	fa24 f203 	lsr.w	r2, r4, r3
    50e2:	f012 0f01 	tst.w	r2, #1
    50e6:	d0ee      	beq.n	50c6 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    50e8:	460a      	mov	r2, r1
    50ea:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    50ee:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    50f2:	f021 0101 	bic.w	r1, r1, #1
    50f6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    50fa:	2101      	movs	r1, #1
    50fc:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    50fe:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    5102:	b2d8      	uxtb	r0, r3
    5104:	f001 f8d8 	bl	62b8 <nrfx_gpiote_channel_free>
}
    5108:	bd10      	pop	{r4, pc}
    510a:	bf00      	nop
    510c:	5000d000 	.word	0x5000d000

00005110 <gpiote_channel_alloc>:
{
    5110:	b570      	push	{r4, r5, r6, lr}
    5112:	b082      	sub	sp, #8
    5114:	4604      	mov	r4, r0
    5116:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    5118:	f10d 0007 	add.w	r0, sp, #7
    511c:	f001 f8e8 	bl	62f0 <nrfx_gpiote_channel_alloc>
    5120:	4b1c      	ldr	r3, [pc, #112]	; (5194 <gpiote_channel_alloc+0x84>)
    5122:	4298      	cmp	r0, r3
    5124:	d132      	bne.n	518c <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    5126:	f89d 3007 	ldrb.w	r3, [sp, #7]
    512a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    512e:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5130:	4e19      	ldr	r6, [pc, #100]	; (5198 <gpiote_channel_alloc+0x88>)
    5132:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5136:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    513a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    513e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    5142:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5146:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    514a:	0224      	lsls	r4, r4, #8
    514c:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5150:	042d      	lsls	r5, r5, #16
    5152:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5156:	432c      	orrs	r4, r5
    5158:	430c      	orrs	r4, r1
    515a:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    515e:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    5162:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5166:	2000      	movs	r0, #0
    5168:	6018      	str	r0, [r3, #0]
    516a:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    516c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5170:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5174:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    5178:	f042 0201 	orr.w	r2, r2, #1
    517c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    5180:	2301      	movs	r3, #1
    5182:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    5184:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    5188:	b002      	add	sp, #8
    518a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    518c:	f06f 0012 	mvn.w	r0, #18
    5190:	e7fa      	b.n	5188 <gpiote_channel_alloc+0x78>
    5192:	bf00      	nop
    5194:	0bad0000 	.word	0x0bad0000
    5198:	5000d000 	.word	0x5000d000

0000519c <gpiote_pin_int_cfg>:
{
    519c:	b570      	push	{r4, r5, r6, lr}
    519e:	460d      	mov	r5, r1
	return port->data;
    51a0:	6906      	ldr	r6, [r0, #16]
	return port->config;
    51a2:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    51a4:	7a1b      	ldrb	r3, [r3, #8]
    51a6:	f001 041f 	and.w	r4, r1, #31
    51aa:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    51ae:	4620      	mov	r0, r4
    51b0:	f7ff ff82 	bl	50b8 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    51b4:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    51b8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51ba:	2b01      	cmp	r3, #1
    51bc:	d01f      	beq.n	51fe <gpiote_pin_int_cfg+0x62>
        case 0: return NRF_P0;
    51be:	4a1f      	ldr	r2, [pc, #124]	; (523c <gpiote_pin_int_cfg+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    51c0:	f100 0180 	add.w	r1, r0, #128	; 0x80
    51c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    51c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    51cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    51d0:	68f3      	ldr	r3, [r6, #12]
    51d2:	40eb      	lsrs	r3, r5
    51d4:	f013 0f01 	tst.w	r3, #1
    51d8:	d02e      	beq.n	5238 <gpiote_pin_int_cfg+0x9c>
		if (data->trig_edge & BIT(pin)) {
    51da:	6973      	ldr	r3, [r6, #20]
    51dc:	40eb      	lsrs	r3, r5
    51de:	f013 0f01 	tst.w	r3, #1
    51e2:	d015      	beq.n	5210 <gpiote_pin_int_cfg+0x74>
				if (data->double_edge & BIT(pin)) {
    51e4:	69b3      	ldr	r3, [r6, #24]
    51e6:	40eb      	lsrs	r3, r5
    51e8:	f013 0f01 	tst.w	r3, #1
    51ec:	d109      	bne.n	5202 <gpiote_pin_int_cfg+0x66>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    51ee:	6931      	ldr	r1, [r6, #16]
    51f0:	fa21 f505 	lsr.w	r5, r1, r5
    51f4:	f015 0f01 	tst.w	r5, #1
    51f8:	d008      	beq.n	520c <gpiote_pin_int_cfg+0x70>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    51fa:	2101      	movs	r1, #1
    51fc:	e002      	b.n	5204 <gpiote_pin_int_cfg+0x68>
        case 1: return NRF_P1;
    51fe:	4a10      	ldr	r2, [pc, #64]	; (5240 <gpiote_pin_int_cfg+0xa4>)
    5200:	e7de      	b.n	51c0 <gpiote_pin_int_cfg+0x24>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    5202:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    5204:	4620      	mov	r0, r4
    5206:	f7ff ff83 	bl	5110 <gpiote_channel_alloc>
    520a:	e016      	b.n	523a <gpiote_pin_int_cfg+0x9e>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    520c:	2102      	movs	r1, #2
    520e:	e7f9      	b.n	5204 <gpiote_pin_int_cfg+0x68>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    5210:	6931      	ldr	r1, [r6, #16]
    5212:	fa21 f505 	lsr.w	r5, r1, r5
    5216:	f015 0f01 	tst.w	r5, #1
    521a:	d10b      	bne.n	5234 <gpiote_pin_int_cfg+0x98>
	return NRF_GPIO_PIN_SENSE_LOW;
    521c:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    521e:	3080      	adds	r0, #128	; 0x80
    5220:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    5224:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5228:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    522c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    5230:	2000      	movs	r0, #0
}
    5232:	e002      	b.n	523a <gpiote_pin_int_cfg+0x9e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    5234:	2102      	movs	r1, #2
    5236:	e7f2      	b.n	521e <gpiote_pin_int_cfg+0x82>
	int res = 0;
    5238:	2000      	movs	r0, #0
}
    523a:	bd70      	pop	{r4, r5, r6, pc}
    523c:	50842500 	.word	0x50842500
    5240:	50842800 	.word	0x50842800

00005244 <gpio_nrfx_pin_interrupt_configure>:
{
    5244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    5246:	6904      	ldr	r4, [r0, #16]
	return port->config;
    5248:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    524a:	7a2e      	ldrb	r6, [r5, #8]
    524c:	f001 051f 	and.w	r5, r1, #31
    5250:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    5254:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5258:	d025      	beq.n	52a6 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    525a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    525e:	d034      	beq.n	52ca <gpio_nrfx_pin_interrupt_configure+0x86>
    5260:	68e5      	ldr	r5, [r4, #12]
    5262:	2601      	movs	r6, #1
    5264:	408e      	lsls	r6, r1
    5266:	4335      	orrs	r5, r6
    5268:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    526a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    526e:	d032      	beq.n	52d6 <gpio_nrfx_pin_interrupt_configure+0x92>
    5270:	6962      	ldr	r2, [r4, #20]
    5272:	2501      	movs	r5, #1
    5274:	408d      	lsls	r5, r1
    5276:	ea22 0205 	bic.w	r2, r2, r5
    527a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    527c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5280:	d02e      	beq.n	52e0 <gpio_nrfx_pin_interrupt_configure+0x9c>
    5282:	69a2      	ldr	r2, [r4, #24]
    5284:	2501      	movs	r5, #1
    5286:	408d      	lsls	r5, r1
    5288:	ea22 0205 	bic.w	r2, r2, r5
    528c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    528e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5292:	d02a      	beq.n	52ea <gpio_nrfx_pin_interrupt_configure+0xa6>
    5294:	6923      	ldr	r3, [r4, #16]
    5296:	2201      	movs	r2, #1
    5298:	408a      	lsls	r2, r1
    529a:	ea23 0302 	bic.w	r3, r3, r2
    529e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    52a0:	f7ff ff7c 	bl	519c <gpiote_pin_int_cfg>
}
    52a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    52a6:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    52aa:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52ac:	2d01      	cmp	r5, #1
    52ae:	d00a      	beq.n	52c6 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    52b0:	4f10      	ldr	r7, [pc, #64]	; (52f4 <gpio_nrfx_pin_interrupt_configure+0xb0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    52b2:	f106 0580 	add.w	r5, r6, #128	; 0x80
    52b6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    52ba:	f015 0f01 	tst.w	r5, #1
    52be:	d0cc      	beq.n	525a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    52c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    52c4:	e7ee      	b.n	52a4 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    52c6:	4f0c      	ldr	r7, [pc, #48]	; (52f8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    52c8:	e7f3      	b.n	52b2 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    52ca:	68e5      	ldr	r5, [r4, #12]
    52cc:	2601      	movs	r6, #1
    52ce:	408e      	lsls	r6, r1
    52d0:	ea25 0506 	bic.w	r5, r5, r6
    52d4:	e7c8      	b.n	5268 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    52d6:	6962      	ldr	r2, [r4, #20]
    52d8:	2501      	movs	r5, #1
    52da:	408d      	lsls	r5, r1
    52dc:	432a      	orrs	r2, r5
    52de:	e7cc      	b.n	527a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    52e0:	69a2      	ldr	r2, [r4, #24]
    52e2:	2501      	movs	r5, #1
    52e4:	408d      	lsls	r5, r1
    52e6:	432a      	orrs	r2, r5
    52e8:	e7d0      	b.n	528c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    52ea:	6923      	ldr	r3, [r4, #16]
    52ec:	2201      	movs	r2, #1
    52ee:	408a      	lsls	r2, r1
    52f0:	4313      	orrs	r3, r2
    52f2:	e7d4      	b.n	529e <gpio_nrfx_pin_interrupt_configure+0x5a>
    52f4:	50842500 	.word	0x50842500
    52f8:	50842800 	.word	0x50842800

000052fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    52fc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    52fe:	4b0b      	ldr	r3, [pc, #44]	; (532c <gpio_nrfx_init+0x30>)
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	b10b      	cbz	r3, 5308 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    5304:	2000      	movs	r0, #0
    5306:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    5308:	4b08      	ldr	r3, [pc, #32]	; (532c <gpio_nrfx_init+0x30>)
    530a:	2201      	movs	r2, #1
    530c:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    530e:	2200      	movs	r2, #0
    5310:	2105      	movs	r1, #5
    5312:	200d      	movs	r0, #13
    5314:	f7fe ff54 	bl	41c0 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    5318:	200d      	movs	r0, #13
    531a:	f7fe ff33 	bl	4184 <arch_irq_enable>
    531e:	4b04      	ldr	r3, [pc, #16]	; (5330 <gpio_nrfx_init+0x34>)
    5320:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5324:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5328:	e7ec      	b.n	5304 <gpio_nrfx_init+0x8>
    532a:	bf00      	nop
    532c:	20020a86 	.word	0x20020a86
    5330:	5000d000 	.word	0x5000d000

00005334 <gpiote_event_handler>:
{
    5334:	b570      	push	{r4, r5, r6, lr}
    5336:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    5338:	2300      	movs	r3, #0
    533a:	9302      	str	r3, [sp, #8]
    533c:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    533e:	9300      	str	r3, [sp, #0]
    5340:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5342:	4b46      	ldr	r3, [pc, #280]	; (545c <gpiote_event_handler+0x128>)
    5344:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    5346:	b90c      	cbnz	r4, 534c <gpiote_event_handler+0x18>
{
    5348:	2100      	movs	r1, #0
    534a:	e011      	b.n	5370 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    534c:	4d44      	ldr	r5, [pc, #272]	; (5460 <gpiote_event_handler+0x12c>)
    534e:	4669      	mov	r1, sp
    5350:	4628      	mov	r0, r5
    5352:	f7ff fe5f 	bl	5014 <check_level_trigger_pins>
		fired_triggers[0] =
    5356:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    5358:	a901      	add	r1, sp, #4
    535a:	f105 0018 	add.w	r0, r5, #24
    535e:	f7ff fe59 	bl	5014 <check_level_trigger_pins>
		fired_triggers[1] =
    5362:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5364:	4b3d      	ldr	r3, [pc, #244]	; (545c <gpiote_event_handler+0x128>)
    5366:	2200      	movs	r2, #0
    5368:	601a      	str	r2, [r3, #0]
    536a:	681b      	ldr	r3, [r3, #0]
}
    536c:	e7ec      	b.n	5348 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    536e:	3101      	adds	r1, #1
    5370:	2907      	cmp	r1, #7
    5372:	d82d      	bhi.n	53d0 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    5374:	f101 0340 	add.w	r3, r1, #64	; 0x40
    5378:	009b      	lsls	r3, r3, #2
    537a:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    537c:	2301      	movs	r3, #1
    537e:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    5380:	4838      	ldr	r0, [pc, #224]	; (5464 <gpiote_event_handler+0x130>)
    5382:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    5386:	4203      	tst	r3, r0
    5388:	d0f1      	beq.n	536e <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    538a:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    538e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	2b00      	cmp	r3, #0
    5396:	d0ea      	beq.n	536e <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5398:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    539c:	4831      	ldr	r0, [pc, #196]	; (5464 <gpiote_event_handler+0x130>)
    539e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    53a2:	f3c0 3340 	ubfx	r3, r0, #13, #1
    53a6:	f3c0 2004 	ubfx	r0, r0, #8, #5
    53aa:	2501      	movs	r5, #1
    53ac:	fa05 f000 	lsl.w	r0, r5, r0
    53b0:	ad04      	add	r5, sp, #16
    53b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    53b6:	f853 5c08 	ldr.w	r5, [r3, #-8]
    53ba:	4305      	orrs	r5, r0
    53bc:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    53c0:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    53c4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53c8:	2200      	movs	r2, #0
    53ca:	601a      	str	r2, [r3, #0]
    53cc:	681b      	ldr	r3, [r3, #0]
}
    53ce:	e7ce      	b.n	536e <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    53d0:	9e02      	ldr	r6, [sp, #8]
    53d2:	b92e      	cbnz	r6, 53e0 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    53d4:	9e03      	ldr	r6, [sp, #12]
    53d6:	b9ee      	cbnz	r6, 5414 <gpiote_event_handler+0xe0>
	if (port_event) {
    53d8:	2c00      	cmp	r4, #0
    53da:	d135      	bne.n	5448 <gpiote_event_handler+0x114>
}
    53dc:	b004      	add	sp, #16
    53de:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    53e0:	4b21      	ldr	r3, [pc, #132]	; (5468 <gpiote_event_handler+0x134>)
    53e2:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    53e4:	b119      	cbz	r1, 53ee <gpiote_event_handler+0xba>
    53e6:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    53e8:	b149      	cbz	r1, 53fe <gpiote_event_handler+0xca>
	return node->next;
    53ea:	680d      	ldr	r5, [r1, #0]
    53ec:	e007      	b.n	53fe <gpiote_event_handler+0xca>
    53ee:	460d      	mov	r5, r1
    53f0:	e005      	b.n	53fe <gpiote_event_handler+0xca>
    53f2:	b16d      	cbz	r5, 5410 <gpiote_event_handler+0xdc>
    53f4:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    53f6:	b105      	cbz	r5, 53fa <gpiote_event_handler+0xc6>
	return node->next;
    53f8:	682b      	ldr	r3, [r5, #0]
    53fa:	4629      	mov	r1, r5
    53fc:	461d      	mov	r5, r3
    53fe:	2900      	cmp	r1, #0
    5400:	d0e8      	beq.n	53d4 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    5402:	688a      	ldr	r2, [r1, #8]
    5404:	4032      	ands	r2, r6
    5406:	d0f4      	beq.n	53f2 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5408:	684b      	ldr	r3, [r1, #4]
    540a:	4815      	ldr	r0, [pc, #84]	; (5460 <gpiote_event_handler+0x12c>)
    540c:	4798      	blx	r3
    540e:	e7f0      	b.n	53f2 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5410:	462b      	mov	r3, r5
    5412:	e7f2      	b.n	53fa <gpiote_event_handler+0xc6>
	return list->head;
    5414:	4b15      	ldr	r3, [pc, #84]	; (546c <gpiote_event_handler+0x138>)
    5416:	6859      	ldr	r1, [r3, #4]
    5418:	b119      	cbz	r1, 5422 <gpiote_event_handler+0xee>
    541a:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    541c:	b149      	cbz	r1, 5432 <gpiote_event_handler+0xfe>
	return node->next;
    541e:	680d      	ldr	r5, [r1, #0]
    5420:	e007      	b.n	5432 <gpiote_event_handler+0xfe>
    5422:	460d      	mov	r5, r1
    5424:	e005      	b.n	5432 <gpiote_event_handler+0xfe>
    5426:	b16d      	cbz	r5, 5444 <gpiote_event_handler+0x110>
    5428:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    542a:	b105      	cbz	r5, 542e <gpiote_event_handler+0xfa>
	return node->next;
    542c:	682b      	ldr	r3, [r5, #0]
    542e:	4629      	mov	r1, r5
    5430:	461d      	mov	r5, r3
    5432:	2900      	cmp	r1, #0
    5434:	d0d0      	beq.n	53d8 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    5436:	688a      	ldr	r2, [r1, #8]
    5438:	4032      	ands	r2, r6
    543a:	d0f4      	beq.n	5426 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    543c:	684b      	ldr	r3, [r1, #4]
    543e:	480c      	ldr	r0, [pc, #48]	; (5470 <gpiote_event_handler+0x13c>)
    5440:	4798      	blx	r3
    5442:	e7f0      	b.n	5426 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5444:	462b      	mov	r3, r5
    5446:	e7f2      	b.n	542e <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    5448:	4c05      	ldr	r4, [pc, #20]	; (5460 <gpiote_event_handler+0x12c>)
    544a:	4620      	mov	r0, r4
    544c:	f7ff fda8 	bl	4fa0 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    5450:	f104 0018 	add.w	r0, r4, #24
    5454:	f7ff fda4 	bl	4fa0 <cfg_level_pins>
}
    5458:	e7c0      	b.n	53dc <gpiote_event_handler+0xa8>
    545a:	bf00      	nop
    545c:	5000d17c 	.word	0x5000d17c
    5460:	00016d18 	.word	0x00016d18
    5464:	5000d000 	.word	0x5000d000
    5468:	20020948 	.word	0x20020948
    546c:	20020964 	.word	0x20020964
    5470:	00016d30 	.word	0x00016d30

00005474 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    5474:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    5476:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5478:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    547c:	d06f      	beq.n	555e <baudrate_set+0xea>
    547e:	d83a      	bhi.n	54f6 <baudrate_set+0x82>
    5480:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5484:	d06e      	beq.n	5564 <baudrate_set+0xf0>
    5486:	d90a      	bls.n	549e <baudrate_set+0x2a>
    5488:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    548c:	d075      	beq.n	557a <baudrate_set+0x106>
    548e:	d924      	bls.n	54da <baudrate_set+0x66>
    5490:	f647 2312 	movw	r3, #31250	; 0x7a12
    5494:	4299      	cmp	r1, r3
    5496:	d12b      	bne.n	54f0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5498:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    549c:	e013      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    549e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    54a2:	d061      	beq.n	5568 <baudrate_set+0xf4>
    54a4:	d907      	bls.n	54b6 <baudrate_set+0x42>
    54a6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    54aa:	d063      	beq.n	5574 <baudrate_set+0x100>
    54ac:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    54b0:	d110      	bne.n	54d4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    54b2:	4b3c      	ldr	r3, [pc, #240]	; (55a4 <baudrate_set+0x130>)
    54b4:	e007      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    54b6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    54ba:	d058      	beq.n	556e <baudrate_set+0xfa>
    54bc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    54c0:	d105      	bne.n	54ce <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    54c2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    54c6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    54ca:	2000      	movs	r0, #0
    54cc:	4770      	bx	lr
	switch (baudrate) {
    54ce:	f06f 0015 	mvn.w	r0, #21
    54d2:	4770      	bx	lr
    54d4:	f06f 0015 	mvn.w	r0, #21
    54d8:	4770      	bx	lr
    54da:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    54de:	d04e      	beq.n	557e <baudrate_set+0x10a>
    54e0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    54e4:	d101      	bne.n	54ea <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    54e6:	4b30      	ldr	r3, [pc, #192]	; (55a8 <baudrate_set+0x134>)
    54e8:	e7ed      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    54ea:	f06f 0015 	mvn.w	r0, #21
    54ee:	4770      	bx	lr
    54f0:	f06f 0015 	mvn.w	r0, #21
    54f4:	4770      	bx	lr
    54f6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    54fa:	d042      	beq.n	5582 <baudrate_set+0x10e>
    54fc:	d909      	bls.n	5512 <baudrate_set+0x9e>
    54fe:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    5502:	d046      	beq.n	5592 <baudrate_set+0x11e>
    5504:	d91f      	bls.n	5546 <baudrate_set+0xd2>
    5506:	4b29      	ldr	r3, [pc, #164]	; (55ac <baudrate_set+0x138>)
    5508:	4299      	cmp	r1, r3
    550a:	d148      	bne.n	559e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    550c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5510:	e7d9      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    5512:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    5516:	d037      	beq.n	5588 <baudrate_set+0x114>
    5518:	d905      	bls.n	5526 <baudrate_set+0xb2>
    551a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    551e:	d10f      	bne.n	5540 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5520:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5524:	e7cf      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    5526:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    552a:	4299      	cmp	r1, r3
    552c:	d02e      	beq.n	558c <baudrate_set+0x118>
    552e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5532:	d102      	bne.n	553a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5534:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5538:	e7c5      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    553a:	f06f 0015 	mvn.w	r0, #21
    553e:	4770      	bx	lr
    5540:	f06f 0015 	mvn.w	r0, #21
    5544:	4770      	bx	lr
    5546:	4b1a      	ldr	r3, [pc, #104]	; (55b0 <baudrate_set+0x13c>)
    5548:	4299      	cmp	r1, r3
    554a:	d025      	beq.n	5598 <baudrate_set+0x124>
    554c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5550:	d102      	bne.n	5558 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5552:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5556:	e7b6      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    5558:	f06f 0015 	mvn.w	r0, #21
    555c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    555e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5562:	e7b0      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5564:	4b13      	ldr	r3, [pc, #76]	; (55b4 <baudrate_set+0x140>)
    5566:	e7ae      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5568:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    556c:	e7ab      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    556e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5572:	e7a8      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5574:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5578:	e7a5      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    557a:	4b0f      	ldr	r3, [pc, #60]	; (55b8 <baudrate_set+0x144>)
    557c:	e7a3      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    557e:	4b0f      	ldr	r3, [pc, #60]	; (55bc <baudrate_set+0x148>)
    5580:	e7a1      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5582:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5586:	e79e      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5588:	4b0d      	ldr	r3, [pc, #52]	; (55c0 <baudrate_set+0x14c>)
    558a:	e79c      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    558c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5590:	e799      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5592:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5596:	e796      	b.n	54c6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    559c:	e793      	b.n	54c6 <baudrate_set+0x52>
	switch (baudrate) {
    559e:	f06f 0015 	mvn.w	r0, #21
}
    55a2:	4770      	bx	lr
    55a4:	0013b000 	.word	0x0013b000
    55a8:	004ea000 	.word	0x004ea000
    55ac:	000f4240 	.word	0x000f4240
    55b0:	0003d090 	.word	0x0003d090
    55b4:	00275000 	.word	0x00275000
    55b8:	0075c000 	.word	0x0075c000
    55bc:	003af000 	.word	0x003af000
    55c0:	013a9000 	.word	0x013a9000

000055c4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    55c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55c8:	4605      	mov	r5, r0
    55ca:	460f      	mov	r7, r1
	return dev->data;
    55cc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    55d0:	f010 fb58 	bl	15c84 <k_is_in_isr>
    55d4:	b920      	cbnz	r0, 55e0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    55d6:	4b16      	ldr	r3, [pc, #88]	; (5630 <uarte_nrfx_poll_out+0x6c>)
    55d8:	781b      	ldrb	r3, [r3, #0]
    55da:	b1ab      	cbz	r3, 5608 <uarte_nrfx_poll_out+0x44>
    55dc:	2300      	movs	r3, #0
    55de:	e000      	b.n	55e2 <uarte_nrfx_poll_out+0x1e>
    55e0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    55e2:	b19b      	cbz	r3, 560c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    55e4:	f04f 0320 	mov.w	r3, #32
    55e8:	f3ef 8411 	mrs	r4, BASEPRI
    55ec:	f383 8812 	msr	BASEPRI_MAX, r3
    55f0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    55f4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    55f6:	4628      	mov	r0, r5
    55f8:	f00d fb20 	bl	12c3c <is_tx_ready>
    55fc:	b950      	cbnz	r0, 5614 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    55fe:	f384 8811 	msr	BASEPRI, r4
    5602:	f3bf 8f6f 	isb	sy
}
    5606:	e7ed      	b.n	55e4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5608:	2301      	movs	r3, #1
    560a:	e7ea      	b.n	55e2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    560c:	4628      	mov	r0, r5
    560e:	f00d fc32 	bl	12e76 <wait_tx_ready>
    5612:	4606      	mov	r6, r0
	}

	data->char_out = c;
    5614:	4641      	mov	r1, r8
    5616:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    561a:	2201      	movs	r2, #1
    561c:	4628      	mov	r0, r5
    561e:	f00d fb27 	bl	12c70 <tx_start>
	__asm__ volatile(
    5622:	f386 8811 	msr	BASEPRI, r6
    5626:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    562e:	bf00      	nop
    5630:	20020a87 	.word	0x20020a87

00005634 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5634:	b538      	push	{r3, r4, r5, lr}
    5636:	4605      	mov	r5, r0
    5638:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    563a:	f101 0016 	add.w	r0, r1, #22
    563e:	f000 fded 	bl	621c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5642:	4b0a      	ldr	r3, [pc, #40]	; (566c <endtx_stoptx_ppi_init+0x38>)
    5644:	4298      	cmp	r0, r3
    5646:	d10e      	bne.n	5666 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5648:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    564a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    564e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    5652:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5656:	7da2      	ldrb	r2, [r4, #22]
    5658:	2301      	movs	r3, #1
    565a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    565c:	4a04      	ldr	r2, [pc, #16]	; (5670 <endtx_stoptx_ppi_init+0x3c>)
    565e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    5662:	2000      	movs	r0, #0
}
    5664:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    5666:	f06f 0004 	mvn.w	r0, #4
    566a:	e7fb      	b.n	5664 <endtx_stoptx_ppi_init+0x30>
    566c:	0bad0000 	.word	0x0bad0000
    5670:	50017000 	.word	0x50017000

00005674 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5676:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5678:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    567a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    567c:	2300      	movs	r3, #0
    567e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5682:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5684:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5686:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    568a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    568c:	2b01      	cmp	r3, #1
    568e:	f000 80a0 	beq.w	57d2 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
    5692:	4a5a      	ldr	r2, [pc, #360]	; (57fc <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5694:	2301      	movs	r3, #1
    5696:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    5698:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
    569a:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    569c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    56a0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56a2:	2b01      	cmp	r3, #1
    56a4:	f000 8097 	beq.w	57d6 <uarte_instance_init+0x162>
        case 0: return NRF_P0;
    56a8:	4954      	ldr	r1, [pc, #336]	; (57fc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    56aa:	3280      	adds	r2, #128	; 0x80
    56ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    56b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    56b4:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    56b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    56bc:	68e3      	ldr	r3, [r4, #12]
    56be:	f1b3 3fff 	cmp.w	r3, #4294967295
    56c2:	d010      	beq.n	56e6 <uarte_instance_init+0x72>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    56c4:	7e27      	ldrb	r7, [r4, #24]
    *p_pin = pin_number & 0x1F;
    56c6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    56ca:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56cc:	2b01      	cmp	r3, #1
    56ce:	f000 8084 	beq.w	57da <uarte_instance_init+0x166>
        case 0: return NRF_P0;
    56d2:	494a      	ldr	r1, [pc, #296]	; (57fc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    56d4:	3280      	adds	r2, #128	; 0x80
    56d6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    56da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    56de:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    56e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    56e6:	68a2      	ldr	r2, [r4, #8]
    56e8:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    56ea:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    56ee:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    56f2:	6923      	ldr	r3, [r4, #16]
    56f4:	f1b3 3fff 	cmp.w	r3, #4294967295
    56f8:	d00f      	beq.n	571a <uarte_instance_init+0xa6>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    56fa:	7e67      	ldrb	r7, [r4, #25]
    *p_pin = pin_number & 0x1F;
    56fc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5700:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5702:	2b01      	cmp	r3, #1
    5704:	d06b      	beq.n	57de <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
    5706:	493d      	ldr	r1, [pc, #244]	; (57fc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5708:	3280      	adds	r2, #128	; 0x80
    570a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    570e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5712:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5716:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    571a:	6963      	ldr	r3, [r4, #20]
    571c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5720:	d018      	beq.n	5754 <uarte_instance_init+0xe0>
    *p_pin = pin_number & 0x1F;
    5722:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5726:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5728:	2b01      	cmp	r3, #1
    572a:	d05a      	beq.n	57e2 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
    572c:	4933      	ldr	r1, [pc, #204]	; (57fc <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    572e:	2301      	movs	r3, #1
    5730:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5732:	608b      	str	r3, [r1, #8]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5734:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    5736:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    573a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    573c:	2b01      	cmp	r3, #1
    573e:	d052      	beq.n	57e6 <uarte_instance_init+0x172>
        case 0: return NRF_P0;
    5740:	492e      	ldr	r1, [pc, #184]	; (57fc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5742:	3280      	adds	r2, #128	; 0x80
    5744:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5748:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    574c:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5750:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5754:	6962      	ldr	r2, [r4, #20]
    5756:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5758:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    575c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    5760:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5762:	3104      	adds	r1, #4
    5764:	f00d f9ee 	bl	12b44 <uarte_nrfx_configure>
	if (err) {
    5768:	4607      	mov	r7, r0
    576a:	bb80      	cbnz	r0, 57ce <uarte_instance_init+0x15a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    576c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    576e:	f013 0f08 	tst.w	r3, #8
    5772:	d13a      	bne.n	57ea <uarte_instance_init+0x176>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5774:	2308      	movs	r3, #8
    5776:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    577a:	68e3      	ldr	r3, [r4, #12]
    577c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5780:	d00c      	beq.n	579c <uarte_instance_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5782:	2300      	movs	r3, #0
    5784:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5788:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    578c:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5790:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5794:	2301      	movs	r3, #1
    5796:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    579a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    579c:	6863      	ldr	r3, [r4, #4]
    579e:	f013 0f08 	tst.w	r3, #8
    57a2:	d103      	bne.n	57ac <uarte_instance_init+0x138>
    p_reg->INTENSET = mask;
    57a4:	f44f 7380 	mov.w	r3, #256	; 0x100
    57a8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    57ac:	6863      	ldr	r3, [r4, #4]
    57ae:	f013 0f10 	tst.w	r3, #16
    57b2:	d003      	beq.n	57bc <uarte_instance_init+0x148>
    57b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    57b8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    57bc:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    57be:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    57c2:	2300      	movs	r3, #0
    57c4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57c8:	2301      	movs	r3, #1
    57ca:	60ab      	str	r3, [r5, #8]
    57cc:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    57ce:	4638      	mov	r0, r7
    57d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    57d2:	4a0b      	ldr	r2, [pc, #44]	; (5800 <uarte_instance_init+0x18c>)
    57d4:	e75e      	b.n	5694 <uarte_instance_init+0x20>
    57d6:	490a      	ldr	r1, [pc, #40]	; (5800 <uarte_instance_init+0x18c>)
    57d8:	e767      	b.n	56aa <uarte_instance_init+0x36>
    57da:	4909      	ldr	r1, [pc, #36]	; (5800 <uarte_instance_init+0x18c>)
    57dc:	e77a      	b.n	56d4 <uarte_instance_init+0x60>
    57de:	4908      	ldr	r1, [pc, #32]	; (5800 <uarte_instance_init+0x18c>)
    57e0:	e792      	b.n	5708 <uarte_instance_init+0x94>
    57e2:	4907      	ldr	r1, [pc, #28]	; (5800 <uarte_instance_init+0x18c>)
    57e4:	e7a3      	b.n	572e <uarte_instance_init+0xba>
    57e6:	4906      	ldr	r1, [pc, #24]	; (5800 <uarte_instance_init+0x18c>)
    57e8:	e7ab      	b.n	5742 <uarte_instance_init+0xce>
		err = endtx_stoptx_ppi_init(uarte, data);
    57ea:	4631      	mov	r1, r6
    57ec:	4628      	mov	r0, r5
    57ee:	f7ff ff21 	bl	5634 <endtx_stoptx_ppi_init>
		if (err < 0) {
    57f2:	2800      	cmp	r0, #0
    57f4:	dabe      	bge.n	5774 <uarte_instance_init+0x100>
			return err;
    57f6:	4607      	mov	r7, r0
    57f8:	e7e9      	b.n	57ce <uarte_instance_init+0x15a>
    57fa:	bf00      	nop
    57fc:	50842500 	.word	0x50842500
    5800:	50842800 	.word	0x50842800

00005804 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5804:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5808:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    580c:	4b01      	ldr	r3, [pc, #4]	; (5814 <set_comparator+0x10>)
    580e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    5812:	4770      	bx	lr
    5814:	50015000 	.word	0x50015000

00005818 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    5818:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    581c:	4b01      	ldr	r3, [pc, #4]	; (5824 <get_comparator+0xc>)
    581e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5822:	4770      	bx	lr
    5824:	50015000 	.word	0x50015000

00005828 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    582c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    582e:	4a02      	ldr	r2, [pc, #8]	; (5838 <event_enable+0x10>)
    5830:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5834:	4770      	bx	lr
    5836:	bf00      	nop
    5838:	50015000 	.word	0x50015000

0000583c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    583c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5840:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5842:	4a02      	ldr	r2, [pc, #8]	; (584c <event_disable+0x10>)
    5844:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5848:	4770      	bx	lr
    584a:	bf00      	nop
    584c:	50015000 	.word	0x50015000

00005850 <counter>:
     return p_reg->COUNTER;
    5850:	4b01      	ldr	r3, [pc, #4]	; (5858 <counter+0x8>)
    5852:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    5856:	4770      	bx	lr
    5858:	50015000 	.word	0x50015000

0000585c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    585c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    585e:	2301      	movs	r3, #1
    5860:	4083      	lsls	r3, r0
    5862:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5864:	4a0d      	ldr	r2, [pc, #52]	; (589c <compare_int_lock+0x40>)
    5866:	e8d2 1fef 	ldaex	r1, [r2]
    586a:	ea01 0c04 	and.w	ip, r1, r4
    586e:	e8c2 cfee 	stlex	lr, ip, [r2]
    5872:	f1be 0f00 	cmp.w	lr, #0
    5876:	d1f6      	bne.n	5866 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5878:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    587c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5880:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    5884:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    5888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    588c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5890:	420b      	tst	r3, r1
}
    5892:	bf14      	ite	ne
    5894:	2001      	movne	r0, #1
    5896:	2000      	moveq	r0, #0
    5898:	bd10      	pop	{r4, pc}
    589a:	bf00      	nop
    589c:	200209a4 	.word	0x200209a4

000058a0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    58a0:	b570      	push	{r4, r5, r6, lr}
    58a2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    58a4:	f00d fb33 	bl	12f0e <full_int_lock>
    58a8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    58aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58ae:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    58b0:	4a15      	ldr	r2, [pc, #84]	; (5908 <channel_processing_check_and_clear+0x68>)
    58b2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    58b6:	4213      	tst	r3, r2
    58b8:	d105      	bne.n	58c6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    58ba:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    58bc:	4628      	mov	r0, r5
    58be:	f00d fb2f 	bl	12f20 <full_int_unlock>

	return result;
}
    58c2:	4630      	mov	r0, r6
    58c4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    58c6:	2301      	movs	r3, #1
    58c8:	40a3      	lsls	r3, r4
    58ca:	43db      	mvns	r3, r3
    58cc:	4a0f      	ldr	r2, [pc, #60]	; (590c <channel_processing_check_and_clear+0x6c>)
    58ce:	e8d2 1fef 	ldaex	r1, [r2]
    58d2:	ea01 0003 	and.w	r0, r1, r3
    58d6:	e8c2 0fe6 	stlex	r6, r0, [r2]
    58da:	2e00      	cmp	r6, #0
    58dc:	d1f7      	bne.n	58ce <channel_processing_check_and_clear+0x2e>
    58de:	b959      	cbnz	r1, 58f8 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    58e0:	f104 0350 	add.w	r3, r4, #80	; 0x50
    58e4:	009b      	lsls	r3, r3, #2
    58e6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58e8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    58ec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    58f0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    58f2:	b113      	cbz	r3, 58fa <channel_processing_check_and_clear+0x5a>
    58f4:	2301      	movs	r3, #1
    58f6:	e000      	b.n	58fa <channel_processing_check_and_clear+0x5a>
    58f8:	2301      	movs	r3, #1
		if (result) {
    58fa:	461e      	mov	r6, r3
    58fc:	2b00      	cmp	r3, #0
    58fe:	d0dd      	beq.n	58bc <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    5900:	4620      	mov	r0, r4
    5902:	f00d faf5 	bl	12ef0 <event_clear>
    5906:	e7d9      	b.n	58bc <channel_processing_check_and_clear+0x1c>
    5908:	50015000 	.word	0x50015000
    590c:	200209a0 	.word	0x200209a0

00005910 <compare_int_unlock>:
	if (key) {
    5910:	b901      	cbnz	r1, 5914 <compare_int_unlock+0x4>
}
    5912:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    5914:	2301      	movs	r3, #1
    5916:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5918:	4a0e      	ldr	r2, [pc, #56]	; (5954 <compare_int_unlock+0x44>)
    591a:	e8d2 1fef 	ldaex	r1, [r2]
    591e:	4319      	orrs	r1, r3
    5920:	e8c2 1fec 	stlex	ip, r1, [r2]
    5924:	f1bc 0f00 	cmp.w	ip, #0
    5928:	d1f7      	bne.n	591a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    592a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    592e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5930:	4a09      	ldr	r2, [pc, #36]	; (5958 <compare_int_unlock+0x48>)
    5932:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5936:	4b09      	ldr	r3, [pc, #36]	; (595c <compare_int_unlock+0x4c>)
    5938:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    593c:	fa23 f000 	lsr.w	r0, r3, r0
    5940:	f010 0f01 	tst.w	r0, #1
    5944:	d0e5      	beq.n	5912 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5946:	4b06      	ldr	r3, [pc, #24]	; (5960 <compare_int_unlock+0x50>)
    5948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    594c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    5950:	e7df      	b.n	5912 <compare_int_unlock+0x2>
    5952:	bf00      	nop
    5954:	200209a4 	.word	0x200209a4
    5958:	50015000 	.word	0x50015000
    595c:	200209a0 	.word	0x200209a0
    5960:	e000e100 	.word	0xe000e100

00005964 <sys_clock_timeout_handler>:
{
    5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5966:	4607      	mov	r7, r0
    5968:	4614      	mov	r4, r2
    596a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    596c:	4610      	mov	r0, r2
    596e:	4619      	mov	r1, r3
    5970:	f00d faca 	bl	12f08 <absolute_time_to_cc>
    5974:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5976:	4b15      	ldr	r3, [pc, #84]	; (59cc <sys_clock_timeout_handler+0x68>)
    5978:	681a      	ldr	r2, [r3, #0]
    597a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    597c:	601c      	str	r4, [r3, #0]
    597e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5980:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5984:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5988:	d308      	bcc.n	599c <sys_clock_timeout_handler+0x38>
	return false;
    598a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    598c:	f00a fb68 	bl	10060 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5990:	4638      	mov	r0, r7
    5992:	f7ff ff41 	bl	5818 <get_comparator>
    5996:	42a8      	cmp	r0, r5
    5998:	d00c      	beq.n	59b4 <sys_clock_timeout_handler+0x50>
}
    599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    599c:	4b0c      	ldr	r3, [pc, #48]	; (59d0 <sys_clock_timeout_handler+0x6c>)
    599e:	6819      	ldr	r1, [r3, #0]
    59a0:	0a0b      	lsrs	r3, r1, #8
    59a2:	060a      	lsls	r2, r1, #24
    59a4:	1952      	adds	r2, r2, r5
    59a6:	f143 0300 	adc.w	r3, r3, #0
    59aa:	490a      	ldr	r1, [pc, #40]	; (59d4 <sys_clock_timeout_handler+0x70>)
    59ac:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    59b0:	2401      	movs	r4, #1
    59b2:	e7eb      	b.n	598c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    59b4:	b11c      	cbz	r4, 59be <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    59b6:	4638      	mov	r0, r7
    59b8:	f7ff ff36 	bl	5828 <event_enable>
}
    59bc:	e7ed      	b.n	599a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    59be:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    59c2:	4638      	mov	r0, r7
    59c4:	f7ff ff1e 	bl	5804 <set_comparator>
    59c8:	e7f5      	b.n	59b6 <sys_clock_timeout_handler+0x52>
    59ca:	bf00      	nop
    59cc:	20000358 	.word	0x20000358
    59d0:	200209a8 	.word	0x200209a8
    59d4:	20000340 	.word	0x20000340

000059d8 <z_nrf_rtc_timer_read>:
{
    59d8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    59da:	4b0d      	ldr	r3, [pc, #52]	; (5a10 <z_nrf_rtc_timer_read+0x38>)
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	0a1d      	lsrs	r5, r3, #8
    59e0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    59e2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    59e6:	f7ff ff33 	bl	5850 <counter>
    59ea:	4603      	mov	r3, r0
	val += cntr;
    59ec:	1820      	adds	r0, r4, r0
    59ee:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    59f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    59f6:	d20a      	bcs.n	5a0e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    59f8:	4b06      	ldr	r3, [pc, #24]	; (5a14 <z_nrf_rtc_timer_read+0x3c>)
    59fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    59fe:	4299      	cmp	r1, r3
    5a00:	bf08      	it	eq
    5a02:	4290      	cmpeq	r0, r2
    5a04:	d203      	bcs.n	5a0e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    5a06:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5a0a:	f141 0100 	adc.w	r1, r1, #0
}
    5a0e:	bd38      	pop	{r3, r4, r5, pc}
    5a10:	200209a8 	.word	0x200209a8
    5a14:	20000340 	.word	0x20000340

00005a18 <compare_set_nolocks>:
{
    5a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a1c:	4606      	mov	r6, r0
    5a1e:	4614      	mov	r4, r2
    5a20:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    5a22:	4610      	mov	r0, r2
    5a24:	4619      	mov	r1, r3
    5a26:	f00d fa6f 	bl	12f08 <absolute_time_to_cc>
    5a2a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5a2c:	f7ff ffd4 	bl	59d8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5a30:	42a9      	cmp	r1, r5
    5a32:	bf08      	it	eq
    5a34:	42a0      	cmpeq	r0, r4
    5a36:	d21e      	bcs.n	5a76 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5a38:	ebb4 0800 	subs.w	r8, r4, r0
    5a3c:	eb65 0901 	sbc.w	r9, r5, r1
    5a40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a44:	2300      	movs	r3, #0
    5a46:	454b      	cmp	r3, r9
    5a48:	bf08      	it	eq
    5a4a:	4542      	cmpeq	r2, r8
    5a4c:	d32a      	bcc.n	5aa4 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    5a4e:	4b17      	ldr	r3, [pc, #92]	; (5aac <compare_set_nolocks+0x94>)
    5a50:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5a54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5a58:	42ab      	cmp	r3, r5
    5a5a:	bf08      	it	eq
    5a5c:	42a2      	cmpeq	r2, r4
    5a5e:	d014      	beq.n	5a8a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5a60:	4639      	mov	r1, r7
    5a62:	4630      	mov	r0, r6
    5a64:	f00d fa61 	bl	12f2a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5a68:	4639      	mov	r1, r7
    5a6a:	f00d fa3d 	bl	12ee8 <counter_sub>
    5a6e:	1824      	adds	r4, r4, r0
    5a70:	f145 0500 	adc.w	r5, r5, #0
    5a74:	e009      	b.n	5a8a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5a76:	2301      	movs	r3, #1
    5a78:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a7a:	4a0d      	ldr	r2, [pc, #52]	; (5ab0 <compare_set_nolocks+0x98>)
    5a7c:	e8d2 1fef 	ldaex	r1, [r2]
    5a80:	4319      	orrs	r1, r3
    5a82:	e8c2 1fe0 	stlex	r0, r1, [r2]
    5a86:	2800      	cmp	r0, #0
    5a88:	d1f8      	bne.n	5a7c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    5a8a:	4b08      	ldr	r3, [pc, #32]	; (5aac <compare_set_nolocks+0x94>)
    5a8c:	0132      	lsls	r2, r6, #4
    5a8e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5a92:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5a96:	9908      	ldr	r1, [sp, #32]
    5a98:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    5a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a9c:	6073      	str	r3, [r6, #4]
	return ret;
    5a9e:	2000      	movs	r0, #0
}
    5aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5aa4:	f06f 0015 	mvn.w	r0, #21
    5aa8:	e7fa      	b.n	5aa0 <compare_set_nolocks+0x88>
    5aaa:	bf00      	nop
    5aac:	20000348 	.word	0x20000348
    5ab0:	200209a0 	.word	0x200209a0

00005ab4 <process_channel>:

static void process_channel(int32_t chan)
{
    5ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ab8:	b082      	sub	sp, #8
    5aba:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    5abc:	f7ff fef0 	bl	58a0 <channel_processing_check_and_clear>
    5ac0:	b910      	cbnz	r0, 5ac8 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5ac2:	b002      	add	sp, #8
    5ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5ac8:	f7ff ff86 	bl	59d8 <z_nrf_rtc_timer_read>
    5acc:	4606      	mov	r6, r0
    5ace:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5ad0:	f00d fa1d 	bl	12f0e <full_int_lock>
    5ad4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5ad6:	4b13      	ldr	r3, [pc, #76]	; (5b24 <process_channel+0x70>)
    5ad8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5adc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5ae0:	454f      	cmp	r7, r9
    5ae2:	bf08      	it	eq
    5ae4:	4546      	cmpeq	r6, r8
    5ae6:	d20b      	bcs.n	5b00 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5ae8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5aea:	4650      	mov	r0, sl
    5aec:	f00d fa18 	bl	12f20 <full_int_unlock>
		if (handler) {
    5af0:	2e00      	cmp	r6, #0
    5af2:	d0e6      	beq.n	5ac2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5af4:	9500      	str	r5, [sp, #0]
    5af6:	4642      	mov	r2, r8
    5af8:	464b      	mov	r3, r9
    5afa:	4620      	mov	r0, r4
    5afc:	47b0      	blx	r6
}
    5afe:	e7e0      	b.n	5ac2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5b00:	4a08      	ldr	r2, [pc, #32]	; (5b24 <process_channel+0x70>)
    5b02:	0123      	lsls	r3, r4, #4
    5b04:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5b08:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5b0a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    5b0c:	2000      	movs	r0, #0
    5b0e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5b10:	f04f 32ff 	mov.w	r2, #4294967295
    5b14:	f04f 33ff 	mov.w	r3, #4294967295
    5b18:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5b1c:	4620      	mov	r0, r4
    5b1e:	f7ff fe8d 	bl	583c <event_disable>
    5b22:	e7e2      	b.n	5aea <process_channel+0x36>
    5b24:	20000348 	.word	0x20000348

00005b28 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5b28:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5b2a:	4b0d      	ldr	r3, [pc, #52]	; (5b60 <rtc_nrf_isr+0x38>)
    5b2c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5b30:	f013 0f02 	tst.w	r3, #2
    5b34:	d00a      	beq.n	5b4c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b36:	4b0b      	ldr	r3, [pc, #44]	; (5b64 <rtc_nrf_isr+0x3c>)
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	b13b      	cbz	r3, 5b4c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5b3c:	4b09      	ldr	r3, [pc, #36]	; (5b64 <rtc_nrf_isr+0x3c>)
    5b3e:	2200      	movs	r2, #0
    5b40:	601a      	str	r2, [r3, #0]
    5b42:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5b44:	4a08      	ldr	r2, [pc, #32]	; (5b68 <rtc_nrf_isr+0x40>)
    5b46:	6813      	ldr	r3, [r2, #0]
    5b48:	3301      	adds	r3, #1
    5b4a:	6013      	str	r3, [r2, #0]
{
    5b4c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b4e:	2c00      	cmp	r4, #0
    5b50:	dd00      	ble.n	5b54 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5b52:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5b54:	4620      	mov	r0, r4
    5b56:	f7ff ffad 	bl	5ab4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b5a:	3401      	adds	r4, #1
    5b5c:	e7f7      	b.n	5b4e <rtc_nrf_isr+0x26>
    5b5e:	bf00      	nop
    5b60:	50015000 	.word	0x50015000
    5b64:	50015104 	.word	0x50015104
    5b68:	200209a8 	.word	0x200209a8

00005b6c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5b6c:	b530      	push	{r4, r5, lr}
    5b6e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5b70:	2300      	movs	r3, #0
    5b72:	4a1f      	ldr	r2, [pc, #124]	; (5bf0 <sys_clock_driver_init+0x84>)
    5b74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b78:	2b00      	cmp	r3, #0
    5b7a:	dd27      	ble.n	5bcc <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    5b7c:	4c1c      	ldr	r4, [pc, #112]	; (5bf0 <sys_clock_driver_init+0x84>)
    5b7e:	2502      	movs	r5, #2
    5b80:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b84:	4b1b      	ldr	r3, [pc, #108]	; (5bf4 <sys_clock_driver_init+0x88>)
    5b86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5b8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5b8e:	2200      	movs	r2, #0
    5b90:	2101      	movs	r1, #1
    5b92:	2015      	movs	r0, #21
    5b94:	f7fe fb14 	bl	41c0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5b98:	2015      	movs	r0, #21
    5b9a:	f7fe faf3 	bl	4184 <arch_irq_enable>
    5b9e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5ba2:	2301      	movs	r3, #1
    5ba4:	4a14      	ldr	r2, [pc, #80]	; (5bf8 <sys_clock_driver_init+0x8c>)
    5ba6:	6013      	str	r3, [r2, #0]
    5ba8:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5baa:	4a14      	ldr	r2, [pc, #80]	; (5bfc <sys_clock_driver_init+0x90>)
    5bac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5bae:	2400      	movs	r4, #0
    5bb0:	9401      	str	r4, [sp, #4]
    5bb2:	4b13      	ldr	r3, [pc, #76]	; (5c00 <sys_clock_driver_init+0x94>)
    5bb4:	9300      	str	r3, [sp, #0]
    5bb6:	4a13      	ldr	r2, [pc, #76]	; (5c04 <sys_clock_driver_init+0x98>)
    5bb8:	2300      	movs	r3, #0
    5bba:	4620      	mov	r0, r4
    5bbc:	f00d f9f0 	bl	12fa0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5bc0:	4628      	mov	r0, r5
    5bc2:	f7ff f90b 	bl	4ddc <z_nrf_clock_control_lf_on>

	return 0;
}
    5bc6:	4620      	mov	r0, r4
    5bc8:	b003      	add	sp, #12
    5bca:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5bcc:	4a0e      	ldr	r2, [pc, #56]	; (5c08 <sys_clock_driver_init+0x9c>)
    5bce:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5bd2:	f04f 30ff 	mov.w	r0, #4294967295
    5bd6:	f04f 31ff 	mov.w	r1, #4294967295
    5bda:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5bde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5be2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5be4:	4902      	ldr	r1, [pc, #8]	; (5bf0 <sys_clock_driver_init+0x84>)
    5be6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bea:	3301      	adds	r3, #1
    5bec:	e7c4      	b.n	5b78 <sys_clock_driver_init+0xc>
    5bee:	bf00      	nop
    5bf0:	50015000 	.word	0x50015000
    5bf4:	e000e100 	.word	0xe000e100
    5bf8:	50015008 	.word	0x50015008
    5bfc:	200209a4 	.word	0x200209a4
    5c00:	00005965 	.word	0x00005965
    5c04:	007fffff 	.word	0x007fffff
    5c08:	20000348 	.word	0x20000348

00005c0c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    5c0c:	b510      	push	{r4, lr}
    5c0e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5c10:	f1b0 3fff 	cmp.w	r0, #4294967295
    5c14:	d007      	beq.n	5c26 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5c16:	1e44      	subs	r4, r0, #1
    5c18:	2c00      	cmp	r4, #0
    5c1a:	dd07      	ble.n	5c2c <sys_clock_set_timeout+0x20>
    5c1c:	4b11      	ldr	r3, [pc, #68]	; (5c64 <sys_clock_set_timeout+0x58>)
    5c1e:	429c      	cmp	r4, r3
    5c20:	dd05      	ble.n	5c2e <sys_clock_set_timeout+0x22>
    5c22:	4c11      	ldr	r4, [pc, #68]	; (5c68 <sys_clock_set_timeout+0x5c>)
    5c24:	e003      	b.n	5c2e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5c26:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5c2a:	e7f4      	b.n	5c16 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5c2c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5c2e:	f7ff fed3 	bl	59d8 <z_nrf_rtc_timer_read>
    5c32:	4b0e      	ldr	r3, [pc, #56]	; (5c6c <sys_clock_set_timeout+0x60>)
    5c34:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c38:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5c3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5c3e:	d300      	bcc.n	5c42 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5c40:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5c42:	4404      	add	r4, r0
    5c44:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5c46:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5c4a:	d300      	bcc.n	5c4e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5c4c:	4c06      	ldr	r4, [pc, #24]	; (5c68 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5c4e:	2000      	movs	r0, #0
    5c50:	9001      	str	r0, [sp, #4]
    5c52:	4907      	ldr	r1, [pc, #28]	; (5c70 <sys_clock_set_timeout+0x64>)
    5c54:	9100      	str	r1, [sp, #0]
    5c56:	1912      	adds	r2, r2, r4
    5c58:	f143 0300 	adc.w	r3, r3, #0
    5c5c:	f00d f9a0 	bl	12fa0 <compare_set>
}
    5c60:	b002      	add	sp, #8
    5c62:	bd10      	pop	{r4, pc}
    5c64:	007ffffe 	.word	0x007ffffe
    5c68:	007fffff 	.word	0x007fffff
    5c6c:	20000358 	.word	0x20000358
    5c70:	00005965 	.word	0x00005965

00005c74 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5c74:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5c76:	f7ff feaf 	bl	59d8 <z_nrf_rtc_timer_read>
    5c7a:	4b02      	ldr	r3, [pc, #8]	; (5c84 <sys_clock_elapsed+0x10>)
    5c7c:	681b      	ldr	r3, [r3, #0]
}
    5c7e:	1ac0      	subs	r0, r0, r3
    5c80:	bd08      	pop	{r3, pc}
    5c82:	bf00      	nop
    5c84:	20000358 	.word	0x20000358

00005c88 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5c88:	4b08      	ldr	r3, [pc, #32]	; (5cac <nrf53_errata_42+0x24>)
    5c8a:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5c8c:	3304      	adds	r3, #4
    5c8e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5c90:	2a07      	cmp	r2, #7
    5c92:	d001      	beq.n	5c98 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5c94:	2000      	movs	r0, #0
    5c96:	4770      	bx	lr
                    switch(var2)
    5c98:	3b02      	subs	r3, #2
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d804      	bhi.n	5ca8 <nrf53_errata_42+0x20>
    5c9e:	e8df f003 	tbb	[pc, r3]
    5ca2:	01          	.byte	0x01
    5ca3:	00          	.byte	0x00
                if (var1 == 0x07)
    5ca4:	2001      	movs	r0, #1
    5ca6:	4770      	bx	lr
                            return false;
    5ca8:	2000      	movs	r0, #0
    #endif
}
    5caa:	4770      	bx	lr
    5cac:	00ff0130 	.word	0x00ff0130

00005cb0 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5cb0:	4b0a      	ldr	r3, [pc, #40]	; (5cdc <nrf53_errata_46+0x2c>)
    5cb2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5cb4:	3304      	adds	r3, #4
    5cb6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5cb8:	2a07      	cmp	r2, #7
    5cba:	d001      	beq.n	5cc0 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5cbc:	2000      	movs	r0, #0
    5cbe:	4770      	bx	lr
                    switch(var2)
    5cc0:	2b04      	cmp	r3, #4
    5cc2:	d007      	beq.n	5cd4 <nrf53_errata_46+0x24>
    5cc4:	d808      	bhi.n	5cd8 <nrf53_errata_46+0x28>
    5cc6:	3b02      	subs	r3, #2
    5cc8:	2b01      	cmp	r3, #1
    5cca:	d801      	bhi.n	5cd0 <nrf53_errata_46+0x20>
    5ccc:	2001      	movs	r0, #1
    #endif
}
    5cce:	4770      	bx	lr
                            return false;
    5cd0:	2000      	movs	r0, #0
    5cd2:	4770      	bx	lr
                            return false;
    5cd4:	2000      	movs	r0, #0
    5cd6:	4770      	bx	lr
                            return false;
    5cd8:	2000      	movs	r0, #0
    5cda:	4770      	bx	lr
    5cdc:	00ff0130 	.word	0x00ff0130

00005ce0 <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5ce0:	4b08      	ldr	r3, [pc, #32]	; (5d04 <nrf53_errata_49+0x24>)
    5ce2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5ce4:	3304      	adds	r3, #4
    5ce6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5ce8:	2a07      	cmp	r2, #7
    5cea:	d001      	beq.n	5cf0 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5cec:	2000      	movs	r0, #0
    5cee:	4770      	bx	lr
                    switch(var2)
    5cf0:	3b02      	subs	r3, #2
    5cf2:	2b00      	cmp	r3, #0
    5cf4:	d804      	bhi.n	5d00 <nrf53_errata_49+0x20>
    5cf6:	e8df f003 	tbb	[pc, r3]
    5cfa:	01          	.byte	0x01
    5cfb:	00          	.byte	0x00
                if (var1 == 0x07)
    5cfc:	2001      	movs	r0, #1
    5cfe:	4770      	bx	lr
                            return false;
    5d00:	2000      	movs	r0, #0
    #endif
}
    5d02:	4770      	bx	lr
    5d04:	00ff0130 	.word	0x00ff0130

00005d08 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d08:	4b03      	ldr	r3, [pc, #12]	; (5d18 <nrf53_errata_55+0x10>)
    5d0a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d0c:	2b07      	cmp	r3, #7
    5d0e:	d001      	beq.n	5d14 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5d10:	2000      	movs	r0, #0
    5d12:	4770      	bx	lr
                            return true;
    5d14:	2001      	movs	r0, #1
    #endif
}
    5d16:	4770      	bx	lr
    5d18:	00ff0130 	.word	0x00ff0130

00005d1c <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d1c:	4b08      	ldr	r3, [pc, #32]	; (5d40 <nrf53_errata_64+0x24>)
    5d1e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d20:	3304      	adds	r3, #4
    5d22:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d24:	2a07      	cmp	r2, #7
    5d26:	d001      	beq.n	5d2c <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d28:	2000      	movs	r0, #0
    5d2a:	4770      	bx	lr
                    switch(var2)
    5d2c:	3b02      	subs	r3, #2
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d804      	bhi.n	5d3c <nrf53_errata_64+0x20>
    5d32:	e8df f003 	tbb	[pc, r3]
    5d36:	01          	.byte	0x01
    5d37:	00          	.byte	0x00
                if (var1 == 0x07)
    5d38:	2001      	movs	r0, #1
    5d3a:	4770      	bx	lr
                            return false;
    5d3c:	2000      	movs	r0, #0
    #endif
}
    5d3e:	4770      	bx	lr
    5d40:	00ff0130 	.word	0x00ff0130

00005d44 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d44:	4b08      	ldr	r3, [pc, #32]	; (5d68 <nrf53_errata_69+0x24>)
    5d46:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d48:	3304      	adds	r3, #4
    5d4a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d4c:	2a07      	cmp	r2, #7
    5d4e:	d001      	beq.n	5d54 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d50:	2000      	movs	r0, #0
    5d52:	4770      	bx	lr
                    switch(var2)
    5d54:	3b02      	subs	r3, #2
    5d56:	2b00      	cmp	r3, #0
    5d58:	d804      	bhi.n	5d64 <nrf53_errata_69+0x20>
    5d5a:	e8df f003 	tbb	[pc, r3]
    5d5e:	01          	.byte	0x01
    5d5f:	00          	.byte	0x00
                if (var1 == 0x07)
    5d60:	2001      	movs	r0, #1
    5d62:	4770      	bx	lr
                            return false;
    5d64:	2000      	movs	r0, #0
    #endif
}
    5d66:	4770      	bx	lr
    5d68:	00ff0130 	.word	0x00ff0130

00005d6c <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d6c:	4b08      	ldr	r3, [pc, #32]	; (5d90 <nrf53_errata_97+0x24>)
    5d6e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d70:	3304      	adds	r3, #4
    5d72:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d74:	2a07      	cmp	r2, #7
    5d76:	d001      	beq.n	5d7c <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d78:	2000      	movs	r0, #0
    5d7a:	4770      	bx	lr
                    switch(var2)
    5d7c:	3b02      	subs	r3, #2
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d804      	bhi.n	5d8c <nrf53_errata_97+0x20>
    5d82:	e8df f003 	tbb	[pc, r3]
    5d86:	01          	.byte	0x01
    5d87:	00          	.byte	0x00
                if (var1 == 0x07)
    5d88:	2001      	movs	r0, #1
    5d8a:	4770      	bx	lr
                            return false;
    5d8c:	2000      	movs	r0, #0
    #endif
}
    5d8e:	4770      	bx	lr
    5d90:	00ff0130 	.word	0x00ff0130

00005d94 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    5d94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5d98:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    5d9c:	f002 0203 	and.w	r2, r2, #3
    5da0:	4b02      	ldr	r3, [pc, #8]	; (5dac <SystemCoreClockUpdate+0x18>)
    5da2:	40d3      	lsrs	r3, r2
    5da4:	4a02      	ldr	r2, [pc, #8]	; (5db0 <SystemCoreClockUpdate+0x1c>)
    5da6:	6013      	str	r3, [r2, #0]
#endif
}
    5da8:	4770      	bx	lr
    5daa:	bf00      	nop
    5dac:	07a12000 	.word	0x07a12000
    5db0:	20000060 	.word	0x20000060

00005db4 <SystemInit>:

void SystemInit(void)
{
    5db4:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5db6:	f7ff ffd9 	bl	5d6c <nrf53_errata_97>
    5dba:	b158      	cbz	r0, 5dd4 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    5dbc:	4b3b      	ldr	r3, [pc, #236]	; (5eac <SystemInit+0xf8>)
    5dbe:	681b      	ldr	r3, [r3, #0]
    5dc0:	b943      	cbnz	r3, 5dd4 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5dc2:	4b3a      	ldr	r3, [pc, #232]	; (5eac <SystemInit+0xf8>)
    5dc4:	220d      	movs	r2, #13
    5dc6:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5dcc:	2201      	movs	r2, #1
    5dce:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5dd0:	2200      	movs	r2, #0
    5dd2:	601a      	str	r2, [r3, #0]
{
    5dd4:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5dd6:	2a1f      	cmp	r2, #31
    5dd8:	d815      	bhi.n	5e06 <SystemInit+0x52>
    5dda:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5dde:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5de2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5de6:	f1b3 3fff 	cmp.w	r3, #4294967295
    5dea:	d00c      	beq.n	5e06 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5dec:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5df0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5df4:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5df8:	00db      	lsls	r3, r3, #3
    5dfa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    5dfe:	685b      	ldr	r3, [r3, #4]
    5e00:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5e02:	3201      	adds	r2, #1
    5e04:	e7e7      	b.n	5dd6 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    5e06:	f7ff ff89 	bl	5d1c <nrf53_errata_64>
    5e0a:	b128      	cbz	r0, 5e18 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    5e0c:	4b28      	ldr	r3, [pc, #160]	; (5eb0 <SystemInit+0xfc>)
    5e0e:	2229      	movs	r2, #41	; 0x29
    5e10:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5e12:	3330      	adds	r3, #48	; 0x30
    5e14:	2203      	movs	r2, #3
    5e16:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5e18:	f7ff ff36 	bl	5c88 <nrf53_errata_42>
    5e1c:	b138      	cbz	r0, 5e2e <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    5e1e:	4b25      	ldr	r3, [pc, #148]	; (5eb4 <SystemInit+0x100>)
    5e20:	4a25      	ldr	r2, [pc, #148]	; (5eb8 <SystemInit+0x104>)
    5e22:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5e24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e28:	2201      	movs	r2, #1
    5e2a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    5e2e:	f7ff ff3f 	bl	5cb0 <nrf53_errata_46>
    5e32:	b110      	cbz	r0, 5e3a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5e34:	4b21      	ldr	r3, [pc, #132]	; (5ebc <SystemInit+0x108>)
    5e36:	2200      	movs	r2, #0
    5e38:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    5e3a:	f7ff ff51 	bl	5ce0 <nrf53_errata_49>
    5e3e:	b168      	cbz	r0, 5e5c <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5e40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5e48:	f013 0f01 	tst.w	r3, #1
    5e4c:	d006      	beq.n	5e5c <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5e4e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e52:	2200      	movs	r2, #0
    5e54:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5e58:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5e5c:	f7ff ff54 	bl	5d08 <nrf53_errata_55>
    5e60:	b160      	cbz	r0, 5e7c <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    5e62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5e6a:	f013 0f01 	tst.w	r3, #1
    5e6e:	d005      	beq.n	5e7c <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    5e70:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e74:	f06f 0201 	mvn.w	r2, #1
    5e78:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    5e7c:	f7ff ff62 	bl	5d44 <nrf53_errata_69>
    5e80:	b110      	cbz	r0, 5e88 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    5e82:	4b0b      	ldr	r3, [pc, #44]	; (5eb0 <SystemInit+0xfc>)
    5e84:	2265      	movs	r2, #101	; 0x65
    5e86:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5e88:	4a0d      	ldr	r2, [pc, #52]	; (5ec0 <SystemInit+0x10c>)
    5e8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    5e8e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    5e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5e96:	4a0b      	ldr	r2, [pc, #44]	; (5ec4 <SystemInit+0x110>)
    5e98:	6811      	ldr	r1, [r2, #0]
    5e9a:	4b0b      	ldr	r3, [pc, #44]	; (5ec8 <SystemInit+0x114>)
    5e9c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    5ea0:	69d2      	ldr	r2, [r2, #28]
    5ea2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5ea6:	f7ff ff75 	bl	5d94 <SystemCoreClockUpdate>
}
    5eaa:	bd08      	pop	{r3, pc}
    5eac:	50004a20 	.word	0x50004a20
    5eb0:	5000470c 	.word	0x5000470c
    5eb4:	50039530 	.word	0x50039530
    5eb8:	beef0044 	.word	0xbeef0044
    5ebc:	5003254c 	.word	0x5003254c
    5ec0:	e000ed00 	.word	0xe000ed00
    5ec4:	00ff8000 	.word	0x00ff8000
    5ec8:	50006000 	.word	0x50006000

00005ecc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5ecc:	4b05      	ldr	r3, [pc, #20]	; (5ee4 <nrfx_clock_init+0x18>)
    5ece:	791b      	ldrb	r3, [r3, #4]
    5ed0:	b92b      	cbnz	r3, 5ede <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5ed2:	4b04      	ldr	r3, [pc, #16]	; (5ee4 <nrfx_clock_init+0x18>)
    5ed4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5ed6:	2201      	movs	r2, #1
    5ed8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5eda:	4803      	ldr	r0, [pc, #12]	; (5ee8 <nrfx_clock_init+0x1c>)
    5edc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5ede:	4803      	ldr	r0, [pc, #12]	; (5eec <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop
    5ee4:	200209ac 	.word	0x200209ac
    5ee8:	0bad0000 	.word	0x0bad0000
    5eec:	0bad000c 	.word	0x0bad000c

00005ef0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5ef0:	2803      	cmp	r0, #3
    5ef2:	d84e      	bhi.n	5f92 <nrfx_clock_start+0xa2>
    5ef4:	e8df f000 	tbb	[pc, r0]
    5ef8:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5efc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5f00:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5f04:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f08:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5f0c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5f10:	d111      	bne.n	5f36 <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f16:	2201      	movs	r2, #1
    5f18:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f1c:	4b1d      	ldr	r3, [pc, #116]	; (5f94 <nrfx_clock_start+0xa4>)
    5f1e:	2200      	movs	r2, #0
    5f20:	601a      	str	r2, [r3, #0]
    5f22:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f28:	2202      	movs	r2, #2
    5f2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f2e:	3308      	adds	r3, #8
    5f30:	2201      	movs	r2, #1
    5f32:	601a      	str	r2, [r3, #0]
}
    5f34:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5f36:	2b02      	cmp	r3, #2
    5f38:	d1eb      	bne.n	5f12 <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f3a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f3e:	2202      	movs	r2, #2
    5f40:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5f44:	e7ea      	b.n	5f1c <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f46:	4b14      	ldr	r3, [pc, #80]	; (5f98 <nrfx_clock_start+0xa8>)
    5f48:	2200      	movs	r2, #0
    5f4a:	601a      	str	r2, [r3, #0]
    5f4c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f4e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f52:	2201      	movs	r2, #1
    5f54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f58:	601a      	str	r2, [r3, #0]
}
    5f5a:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f5c:	4b0f      	ldr	r3, [pc, #60]	; (5f9c <nrfx_clock_start+0xac>)
    5f5e:	2200      	movs	r2, #0
    5f60:	601a      	str	r2, [r3, #0]
    5f62:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f64:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f68:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f70:	3320      	adds	r3, #32
    5f72:	2201      	movs	r2, #1
    5f74:	601a      	str	r2, [r3, #0]
}
    5f76:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f78:	4b09      	ldr	r3, [pc, #36]	; (5fa0 <nrfx_clock_start+0xb0>)
    5f7a:	2200      	movs	r2, #0
    5f7c:	601a      	str	r2, [r3, #0]
    5f7e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f84:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f8c:	3318      	adds	r3, #24
    5f8e:	2201      	movs	r2, #1
    5f90:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5f92:	4770      	bx	lr
    5f94:	50005104 	.word	0x50005104
    5f98:	50005100 	.word	0x50005100
    5f9c:	50005124 	.word	0x50005124
    5fa0:	50005120 	.word	0x50005120

00005fa4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5fa4:	b570      	push	{r4, r5, r6, lr}
    5fa6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5fa8:	2803      	cmp	r0, #3
    5faa:	f200 80cd 	bhi.w	6148 <nrfx_clock_stop+0x1a4>
    5fae:	e8df f000 	tbb	[pc, r0]
    5fb2:	1402      	.short	0x1402
    5fb4:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    5fb6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fba:	2202      	movs	r2, #2
    5fbc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fc0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5fc4:	2200      	movs	r2, #0
    5fc6:	601a      	str	r2, [r3, #0]
    5fc8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fca:	4b60      	ldr	r3, [pc, #384]	; (614c <nrfx_clock_stop+0x1a8>)
    5fcc:	2201      	movs	r2, #1
    5fce:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5fd0:	2c01      	cmp	r4, #1
    5fd2:	d02d      	beq.n	6030 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5fd4:	f242 7510 	movw	r5, #10000	; 0x2710
    5fd8:	e0a1      	b.n	611e <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    5fda:	2301      	movs	r3, #1
    5fdc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5fe0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fe4:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5fe8:	2100      	movs	r1, #0
    5fea:	6011      	str	r1, [r2, #0]
    5fec:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fee:	4a58      	ldr	r2, [pc, #352]	; (6150 <nrfx_clock_stop+0x1ac>)
    5ff0:	6013      	str	r3, [r2, #0]
}
    5ff2:	e7ed      	b.n	5fd0 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    5ff4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
    5ffc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6000:	f503 7392 	add.w	r3, r3, #292	; 0x124
    6004:	2200      	movs	r2, #0
    6006:	601a      	str	r2, [r3, #0]
    6008:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    600a:	4b52      	ldr	r3, [pc, #328]	; (6154 <nrfx_clock_stop+0x1b0>)
    600c:	2201      	movs	r2, #1
    600e:	601a      	str	r2, [r3, #0]
}
    6010:	e7de      	b.n	5fd0 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    6012:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6016:	f44f 7280 	mov.w	r2, #256	; 0x100
    601a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    601e:	f503 7390 	add.w	r3, r3, #288	; 0x120
    6022:	2200      	movs	r2, #0
    6024:	601a      	str	r2, [r3, #0]
    6026:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6028:	4b4b      	ldr	r3, [pc, #300]	; (6158 <nrfx_clock_stop+0x1b4>)
    602a:	2201      	movs	r2, #1
    602c:	601a      	str	r2, [r3, #0]
}
    602e:	e7cf      	b.n	5fd0 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6030:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    6032:	f242 7510 	movw	r5, #10000	; 0x2710
    6036:	e035      	b.n	60a4 <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6038:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    603c:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    6040:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6044:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6048:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    604c:	d13a      	bne.n	60c4 <nrfx_clock_stop+0x120>
    return false;
    604e:	2300      	movs	r3, #0
    6050:	e01f      	b.n	6092 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6052:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6056:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    605a:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    605e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    6062:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6066:	d12f      	bne.n	60c8 <nrfx_clock_stop+0x124>
    return false;
    6068:	2300      	movs	r3, #0
    606a:	e012      	b.n	6092 <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    606c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6070:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    6074:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6078:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    607c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6080:	d124      	bne.n	60cc <nrfx_clock_stop+0x128>
    return false;
    6082:	2300      	movs	r3, #0
    6084:	e005      	b.n	6092 <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6086:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    608a:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    608e:	f3c3 4300 	ubfx	r3, r3, #16, #1
    6092:	2b00      	cmp	r3, #0
    6094:	d058      	beq.n	6148 <nrfx_clock_stop+0x1a4>
    6096:	2e01      	cmp	r6, #1
    6098:	d156      	bne.n	6148 <nrfx_clock_stop+0x1a4>
    609a:	2001      	movs	r0, #1
    609c:	f00c ffae 	bl	12ffc <nrfx_busy_wait>
    60a0:	3d01      	subs	r5, #1
    60a2:	d051      	beq.n	6148 <nrfx_clock_stop+0x1a4>
    switch (domain)
    60a4:	2c03      	cmp	r4, #3
    60a6:	d80b      	bhi.n	60c0 <nrfx_clock_stop+0x11c>
    60a8:	a301      	add	r3, pc, #4	; (adr r3, 60b0 <nrfx_clock_stop+0x10c>)
    60aa:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    60ae:	bf00      	nop
    60b0:	00006039 	.word	0x00006039
    60b4:	00006053 	.word	0x00006053
    60b8:	0000606d 	.word	0x0000606d
    60bc:	00006087 	.word	0x00006087
    60c0:	2300      	movs	r3, #0
    60c2:	e7e6      	b.n	6092 <nrfx_clock_stop+0xee>
                return true;
    60c4:	2301      	movs	r3, #1
    60c6:	e7e4      	b.n	6092 <nrfx_clock_stop+0xee>
                return true;
    60c8:	2301      	movs	r3, #1
    60ca:	e7e2      	b.n	6092 <nrfx_clock_stop+0xee>
                return true;
    60cc:	2301      	movs	r3, #1
    60ce:	e7e0      	b.n	6092 <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60d4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    60d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60dc:	d12e      	bne.n	613c <nrfx_clock_stop+0x198>
    return false;
    60de:	2300      	movs	r3, #0
    60e0:	e017      	b.n	6112 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    60e2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    60ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60ee:	d127      	bne.n	6140 <nrfx_clock_stop+0x19c>
    return false;
    60f0:	2300      	movs	r3, #0
    60f2:	e00e      	b.n	6112 <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    60f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60f8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    60fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6100:	d120      	bne.n	6144 <nrfx_clock_stop+0x1a0>
    return false;
    6102:	2300      	movs	r3, #0
    6104:	e005      	b.n	6112 <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6106:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    610a:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    610e:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    6112:	b1cb      	cbz	r3, 6148 <nrfx_clock_stop+0x1a4>
    6114:	2001      	movs	r0, #1
    6116:	f00c ff71 	bl	12ffc <nrfx_busy_wait>
    611a:	3d01      	subs	r5, #1
    611c:	d014      	beq.n	6148 <nrfx_clock_stop+0x1a4>
    switch (domain)
    611e:	2c03      	cmp	r4, #3
    6120:	d80a      	bhi.n	6138 <nrfx_clock_stop+0x194>
    6122:	a301      	add	r3, pc, #4	; (adr r3, 6128 <nrfx_clock_stop+0x184>)
    6124:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    6128:	000060d1 	.word	0x000060d1
    612c:	000060e3 	.word	0x000060e3
    6130:	000060f5 	.word	0x000060f5
    6134:	00006107 	.word	0x00006107
    6138:	2300      	movs	r3, #0
    613a:	e7ea      	b.n	6112 <nrfx_clock_stop+0x16e>
                return true;
    613c:	2301      	movs	r3, #1
    613e:	e7e8      	b.n	6112 <nrfx_clock_stop+0x16e>
                return true;
    6140:	2301      	movs	r3, #1
    6142:	e7e6      	b.n	6112 <nrfx_clock_stop+0x16e>
                return true;
    6144:	2301      	movs	r3, #1
    6146:	e7e4      	b.n	6112 <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6148:	bd70      	pop	{r4, r5, r6, pc}
    614a:	bf00      	nop
    614c:	5000500c 	.word	0x5000500c
    6150:	50005004 	.word	0x50005004
    6154:	50005024 	.word	0x50005024
    6158:	5000501c 	.word	0x5000501c

0000615c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    615c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    615e:	4b2a      	ldr	r3, [pc, #168]	; (6208 <nrfx_power_clock_irq_handler+0xac>)
    6160:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6162:	b15b      	cbz	r3, 617c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6164:	4b28      	ldr	r3, [pc, #160]	; (6208 <nrfx_power_clock_irq_handler+0xac>)
    6166:	2000      	movs	r0, #0
    6168:	6018      	str	r0, [r3, #0]
    616a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    616c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6170:	2201      	movs	r2, #1
    6172:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6176:	4b25      	ldr	r3, [pc, #148]	; (620c <nrfx_power_clock_irq_handler+0xb0>)
    6178:	681b      	ldr	r3, [r3, #0]
    617a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    617c:	4b24      	ldr	r3, [pc, #144]	; (6210 <nrfx_power_clock_irq_handler+0xb4>)
    617e:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6180:	b1b3      	cbz	r3, 61b0 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6182:	4b23      	ldr	r3, [pc, #140]	; (6210 <nrfx_power_clock_irq_handler+0xb4>)
    6184:	2200      	movs	r2, #0
    6186:	601a      	str	r2, [r3, #0]
    6188:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    618a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    618e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6192:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6196:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    619a:	2b01      	cmp	r3, #1
    619c:	d02b      	beq.n	61f6 <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    619e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61a2:	2202      	movs	r2, #2
    61a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    61a8:	4b18      	ldr	r3, [pc, #96]	; (620c <nrfx_power_clock_irq_handler+0xb0>)
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	2001      	movs	r0, #1
    61ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    61b0:	4b18      	ldr	r3, [pc, #96]	; (6214 <nrfx_power_clock_irq_handler+0xb8>)
    61b2:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    61b4:	b16b      	cbz	r3, 61d2 <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61b6:	4b17      	ldr	r3, [pc, #92]	; (6214 <nrfx_power_clock_irq_handler+0xb8>)
    61b8:	2200      	movs	r2, #0
    61ba:	601a      	str	r2, [r3, #0]
    61bc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    61be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    61c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    61ca:	4b10      	ldr	r3, [pc, #64]	; (620c <nrfx_power_clock_irq_handler+0xb0>)
    61cc:	681b      	ldr	r3, [r3, #0]
    61ce:	2004      	movs	r0, #4
    61d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    61d2:	4b11      	ldr	r3, [pc, #68]	; (6218 <nrfx_power_clock_irq_handler+0xbc>)
    61d4:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    61d6:	b16b      	cbz	r3, 61f4 <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61d8:	4b0f      	ldr	r3, [pc, #60]	; (6218 <nrfx_power_clock_irq_handler+0xbc>)
    61da:	2200      	movs	r2, #0
    61dc:	601a      	str	r2, [r3, #0]
    61de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    61e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    61e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    61ec:	4b07      	ldr	r3, [pc, #28]	; (620c <nrfx_power_clock_irq_handler+0xb0>)
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	2005      	movs	r0, #5
    61f2:	4798      	blx	r3
    }
#endif
}
    61f4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    61f6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61fa:	2202      	movs	r2, #2
    61fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6200:	3308      	adds	r3, #8
    6202:	2201      	movs	r2, #1
    6204:	601a      	str	r2, [r3, #0]
}
    6206:	e7d3      	b.n	61b0 <nrfx_power_clock_irq_handler+0x54>
    6208:	50005100 	.word	0x50005100
    620c:	200209ac 	.word	0x200209ac
    6210:	50005104 	.word	0x50005104
    6214:	50005120 	.word	0x50005120
    6218:	50005124 	.word	0x50005124

0000621c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    621c:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
    621e:	f04f 0320 	mov.w	r3, #32
    6222:	f3ef 8611 	mrs	r6, BASEPRI
    6226:	f383 8812 	msr	BASEPRI_MAX, r3
    622a:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    622e:	4b0e      	ldr	r3, [pc, #56]	; (6268 <nrfx_dppi_channel_alloc+0x4c>)
    6230:	681d      	ldr	r5, [r3, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    6232:	43e9      	mvns	r1, r5
    6234:	d016      	beq.n	6264 <nrfx_dppi_channel_alloc+0x48>
    uint8_t channel = 0;
    6236:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    6238:	fa21 f203 	lsr.w	r2, r1, r3
    623c:	f012 0f01 	tst.w	r2, #1
    6240:	d102      	bne.n	6248 <nrfx_dppi_channel_alloc+0x2c>
        {
            channel++;
    6242:	3301      	adds	r3, #1
    6244:	b2db      	uxtb	r3, r3
    6246:	e7f7      	b.n	6238 <nrfx_dppi_channel_alloc+0x1c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    6248:	2201      	movs	r2, #1
    624a:	fa02 f403 	lsl.w	r4, r2, r3
    624e:	4325      	orrs	r5, r4
    6250:	4a05      	ldr	r2, [pc, #20]	; (6268 <nrfx_dppi_channel_alloc+0x4c>)
    6252:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
    6254:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
    6256:	4805      	ldr	r0, [pc, #20]	; (626c <nrfx_dppi_channel_alloc+0x50>)
	__asm__ volatile(
    6258:	f386 8811 	msr	BASEPRI, r6
    625c:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    6260:	bc70      	pop	{r4, r5, r6}
    6262:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
    6264:	4802      	ldr	r0, [pc, #8]	; (6270 <nrfx_dppi_channel_alloc+0x54>)
    6266:	e7f7      	b.n	6258 <nrfx_dppi_channel_alloc+0x3c>
    6268:	200209b4 	.word	0x200209b4
    626c:	0bad0000 	.word	0x0bad0000
    6270:	0bad0002 	.word	0x0bad0002

00006274 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    6274:	4b04      	ldr	r3, [pc, #16]	; (6288 <is_allocated_channel+0x14>)
    6276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    6278:	2301      	movs	r3, #1
    627a:	4083      	lsls	r3, r0
    627c:	421a      	tst	r2, r3
}
    627e:	bf14      	ite	ne
    6280:	2001      	movne	r0, #1
    6282:	2000      	moveq	r0, #0
    6284:	4770      	bx	lr
    6286:	bf00      	nop
    6288:	200209b8 	.word	0x200209b8

0000628c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    628c:	2301      	movs	r3, #1
    628e:	fa03 f000 	lsl.w	r0, r3, r0
    6292:	4a02      	ldr	r2, [pc, #8]	; (629c <channel_allocated_set+0x10>)
    6294:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6296:	4303      	orrs	r3, r0
    6298:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    629a:	4770      	bx	lr
    629c:	200209b8 	.word	0x200209b8

000062a0 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    62a0:	2301      	movs	r3, #1
    62a2:	fa03 f000 	lsl.w	r0, r3, r0
    62a6:	4a03      	ldr	r2, [pc, #12]	; (62b4 <channel_allocated_clr+0x14>)
    62a8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    62aa:	ea23 0300 	bic.w	r3, r3, r0
    62ae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    62b0:	4770      	bx	lr
    62b2:	bf00      	nop
    62b4:	200209b8 	.word	0x200209b8

000062b8 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    62b8:	b538      	push	{r3, r4, r5, lr}
    62ba:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    62bc:	f00c feb3 	bl	13026 <is_app_channel>
    62c0:	b908      	cbnz	r0, 62c6 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    62c2:	4809      	ldr	r0, [pc, #36]	; (62e8 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    62c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    62c6:	f04f 0320 	mov.w	r3, #32
    62ca:	f3ef 8511 	mrs	r5, BASEPRI
    62ce:	f383 8812 	msr	BASEPRI_MAX, r3
    62d2:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    62d6:	4620      	mov	r0, r4
    62d8:	f7ff ffe2 	bl	62a0 <channel_allocated_clr>
	__asm__ volatile(
    62dc:	f385 8811 	msr	BASEPRI, r5
    62e0:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    62e4:	4801      	ldr	r0, [pc, #4]	; (62ec <nrfx_gpiote_channel_free+0x34>)
}
    62e6:	e7ed      	b.n	62c4 <nrfx_gpiote_channel_free+0xc>
    62e8:	0bad0004 	.word	0x0bad0004
    62ec:	0bad0000 	.word	0x0bad0000

000062f0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    62f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    62f4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    62f6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    62f8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    62fa:	4f17      	ldr	r7, [pc, #92]	; (6358 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    62fc:	e013      	b.n	6326 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    62fe:	4620      	mov	r0, r4
    6300:	f7ff ffc4 	bl	628c <channel_allocated_set>
            *p_channel = ch_idx;
    6304:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    6308:	4f14      	ldr	r7, [pc, #80]	; (635c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    630a:	f386 8811 	msr	BASEPRI, r6
    630e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    6312:	4b12      	ldr	r3, [pc, #72]	; (635c <nrfx_gpiote_channel_alloc+0x6c>)
    6314:	429f      	cmp	r7, r3
    6316:	d01b      	beq.n	6350 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    6318:	2301      	movs	r3, #1
    631a:	fa03 f309 	lsl.w	r3, r3, r9
    631e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    6322:	3401      	adds	r4, #1
    6324:	b2e4      	uxtb	r4, r4
    6326:	b19d      	cbz	r5, 6350 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    6328:	f04f 0320 	mov.w	r3, #32
    632c:	f3ef 8611 	mrs	r6, BASEPRI
    6330:	f383 8812 	msr	BASEPRI_MAX, r3
    6334:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    6338:	46a1      	mov	r9, r4
    633a:	fa25 f304 	lsr.w	r3, r5, r4
    633e:	f013 0f01 	tst.w	r3, #1
    6342:	d0e2      	beq.n	630a <nrfx_gpiote_channel_alloc+0x1a>
    6344:	4620      	mov	r0, r4
    6346:	f7ff ff95 	bl	6274 <is_allocated_channel>
    634a:	2800      	cmp	r0, #0
    634c:	d1dd      	bne.n	630a <nrfx_gpiote_channel_alloc+0x1a>
    634e:	e7d6      	b.n	62fe <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6350:	4638      	mov	r0, r7
    6352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6356:	bf00      	nop
    6358:	0bad0002 	.word	0x0bad0002
    635c:	0bad0000 	.word	0x0bad0000

00006360 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6360:	b570      	push	{r4, r5, r6, lr}
    6362:	b082      	sub	sp, #8
    6364:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6366:	6905      	ldr	r5, [r0, #16]
    6368:	6983      	ldr	r3, [r0, #24]
    636a:	429d      	cmp	r5, r3
    636c:	d006      	beq.n	637c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    636e:	490f      	ldr	r1, [pc, #60]	; (63ac <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6370:	6840      	ldr	r0, [r0, #4]
    6372:	f00d fc5c 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6376:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6378:	b002      	add	sp, #8
    637a:	bd70      	pop	{r4, r5, r6, pc}
    637c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    637e:	4611      	mov	r1, r2
    6380:	6880      	ldr	r0, [r0, #8]
    6382:	f00c fe94 	bl	130ae <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6386:	6963      	ldr	r3, [r4, #20]
    6388:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    638a:	42b3      	cmp	r3, r6
    638c:	d304      	bcc.n	6398 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    638e:	4430      	add	r0, r6
    6390:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    6392:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    6394:	2000      	movs	r0, #0
    6396:	e7ef      	b.n	6378 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    6398:	1af2      	subs	r2, r6, r3
    639a:	9200      	str	r2, [sp, #0]
    639c:	4632      	mov	r2, r6
    639e:	4904      	ldr	r1, [pc, #16]	; (63b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    63a0:	6860      	ldr	r0, [r4, #4]
    63a2:	f00d fc44 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    63a6:	2001      	movs	r0, #1
    63a8:	e7e6      	b.n	6378 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    63aa:	bf00      	nop
    63ac:	00068fb0 	.word	0x00068fb0
    63b0:	00069008 	.word	0x00069008

000063b4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    63b4:	b530      	push	{r4, r5, lr}
    63b6:	b083      	sub	sp, #12
    63b8:	4605      	mov	r5, r0
    63ba:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    63bc:	4611      	mov	r1, r2
    63be:	6980      	ldr	r0, [r0, #24]
    63c0:	f00c fe75 	bl	130ae <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    63c4:	696b      	ldr	r3, [r5, #20]
    63c6:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    63c8:	42a3      	cmp	r3, r4
    63ca:	d303      	bcc.n	63d4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    63cc:	4404      	add	r4, r0
    63ce:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    63d0:	b003      	add	sp, #12
    63d2:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    63d4:	1ae2      	subs	r2, r4, r3
    63d6:	9200      	str	r2, [sp, #0]
    63d8:	4622      	mov	r2, r4
    63da:	4903      	ldr	r1, [pc, #12]	; (63e8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    63dc:	6868      	ldr	r0, [r5, #4]
    63de:	f00d fc26 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    63e2:	2000      	movs	r0, #0
    63e4:	e7f4      	b.n	63d0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    63e6:	bf00      	nop
    63e8:	0006904c 	.word	0x0006904c

000063ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    63ec:	b530      	push	{r4, r5, lr}
    63ee:	b083      	sub	sp, #12
    63f0:	4604      	mov	r4, r0
    63f2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    63f4:	6940      	ldr	r0, [r0, #20]
    63f6:	4611      	mov	r1, r2
    63f8:	1b40      	subs	r0, r0, r5
    63fa:	f00c fe5f 	bl	130bc <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    63fe:	6923      	ldr	r3, [r4, #16]
    6400:	4283      	cmp	r3, r0
    6402:	d802      	bhi.n	640a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    6404:	6160      	str	r0, [r4, #20]
}
    6406:	b003      	add	sp, #12
    6408:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    640a:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    640c:	9300      	str	r3, [sp, #0]
    640e:	1aeb      	subs	r3, r5, r3
    6410:	462a      	mov	r2, r5
    6412:	4903      	ldr	r1, [pc, #12]	; (6420 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	f00d fc0a 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    641a:	2000      	movs	r0, #0
    641c:	e7f3      	b.n	6406 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    641e:	bf00      	nop
    6420:	00069098 	.word	0x00069098

00006424 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    6424:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    6426:	4d05      	ldr	r5, [pc, #20]	; (643c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    6428:	6005      	str	r5, [r0, #0]
    642a:	6041      	str	r1, [r0, #4]
    642c:	6082      	str	r2, [r0, #8]
    642e:	60c3      	str	r3, [r0, #12]
    6430:	6102      	str	r2, [r0, #16]
    6432:	6143      	str	r3, [r0, #20]
    6434:	6182      	str	r2, [r0, #24]
    6436:	bc30      	pop	{r4, r5}
    6438:	4770      	bx	lr
    643a:	bf00      	nop
    643c:	000690ec 	.word	0x000690ec

00006440 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6440:	b510      	push	{r4, lr}
    6442:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    6444:	b300      	cbz	r0, 6488 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    6446:	460c      	mov	r4, r1
    6448:	4613      	mov	r3, r2
    644a:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    644c:	b1f4      	cbz	r4, 648c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    644e:	4622      	mov	r2, r4
    6450:	a801      	add	r0, sp, #4
    6452:	f00c fdfa 	bl	1304a <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6456:	2204      	movs	r2, #4
    6458:	211c      	movs	r1, #28
    645a:	eb0d 0002 	add.w	r0, sp, r2
    645e:	f7ff ffc5 	bl	63ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6462:	4603      	mov	r3, r0
    6464:	b168      	cbz	r0, 6482 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6466:	4a0a      	ldr	r2, [pc, #40]	; (6490 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6468:	6002      	str	r2, [r0, #0]
    646a:	9a02      	ldr	r2, [sp, #8]
    646c:	6042      	str	r2, [r0, #4]
    646e:	9a03      	ldr	r2, [sp, #12]
    6470:	6082      	str	r2, [r0, #8]
    6472:	9a04      	ldr	r2, [sp, #16]
    6474:	60c2      	str	r2, [r0, #12]
    6476:	9a05      	ldr	r2, [sp, #20]
    6478:	6102      	str	r2, [r0, #16]
    647a:	9a06      	ldr	r2, [sp, #24]
    647c:	6142      	str	r2, [r0, #20]
    647e:	9a07      	ldr	r2, [sp, #28]
    6480:	6182      	str	r2, [r0, #24]
}
    6482:	4618      	mov	r0, r3
    6484:	b008      	add	sp, #32
    6486:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6488:	f00f fdeb 	bl	16062 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    648c:	f00f fde9 	bl	16062 <abort>
    6490:	000690ec 	.word	0x000690ec

00006494 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    6494:	b508      	push	{r3, lr}
    6496:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6498:	4b03      	ldr	r3, [pc, #12]	; (64a8 <DebugLog+0x14>)
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	4903      	ldr	r1, [pc, #12]	; (64ac <DebugLog+0x18>)
    649e:	68d8      	ldr	r0, [r3, #12]
    64a0:	f00a fa2c 	bl	108fc <fiprintf>
#endif
}
    64a4:	bd08      	pop	{r3, pc}
    64a6:	bf00      	nop
    64a8:	200000cc 	.word	0x200000cc
    64ac:	00069104 	.word	0x00069104

000064b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    64b0:	b500      	push	{lr}
    64b2:	b0c1      	sub	sp, #260	; 0x104
    64b4:	4602      	mov	r2, r0
    64b6:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    64b8:	f44f 7180 	mov.w	r1, #256	; 0x100
    64bc:	4668      	mov	r0, sp
    64be:	f000 f917 	bl	66f0 <MicroVsnprintf>
  DebugLog(log_buffer);
    64c2:	4668      	mov	r0, sp
    64c4:	f7ff ffe6 	bl	6494 <DebugLog>
  DebugLog("\r\n");
    64c8:	4802      	ldr	r0, [pc, #8]	; (64d4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    64ca:	f7ff ffe3 	bl	6494 <DebugLog>
#endif
}
    64ce:	b041      	add	sp, #260	; 0x104
    64d0:	f85d fb04 	ldr.w	pc, [sp], #4
    64d4:	0006bb38 	.word	0x0006bb38

000064d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    64d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64dc:	b083      	sub	sp, #12
    64de:	4680      	mov	r8, r0
    64e0:	468b      	mov	fp, r1
    64e2:	4692      	mov	sl, r2
    64e4:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    64e6:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    64e8:	f00c fe5e 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    64ec:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    64f0:	4620      	mov	r0, r4
    64f2:	f00c fe5f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    64f6:	2804      	cmp	r0, #4
    64f8:	d90d      	bls.n	6516 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    64fa:	1d20      	adds	r0, r4, #4
    64fc:	f00c fe5a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    6500:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6504:	b148      	cbz	r0, 651a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    6506:	4620      	mov	r0, r4
    6508:	f00c fe48 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    650c:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    650e:	b3ac      	cbz	r4, 657c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6510:	2500      	movs	r5, #0
  int element_count = 1;
    6512:	2701      	movs	r7, #1
    6514:	e01e      	b.n	6554 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6516:	2000      	movs	r0, #0
    6518:	e7f2      	b.n	6500 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    651a:	2400      	movs	r4, #0
    651c:	e7f7      	b.n	650e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    651e:	1d20      	adds	r0, r4, #4
    6520:	f00c fe48 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6524:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6526:	b300      	cbz	r0, 656a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    6528:	4620      	mov	r0, r4
    652a:	f00c fe37 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    652e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6530:	6820      	ldr	r0, [r4, #0]
    6532:	f00b fc14 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6536:	4285      	cmp	r5, r0
    6538:	d221      	bcs.n	657e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    653a:	6820      	ldr	r0, [r4, #0]
    653c:	f00b fc0f 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6540:	4285      	cmp	r5, r0
    6542:	d214      	bcs.n	656e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6544:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6546:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    654a:	f00c fe2c 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    654e:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6552:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6554:	4630      	mov	r0, r6
    6556:	f00c fe27 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    655a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    655c:	4620      	mov	r0, r4
    655e:	f00c fe29 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6562:	2804      	cmp	r0, #4
    6564:	d8db      	bhi.n	651e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6566:	2000      	movs	r0, #0
    6568:	e7dc      	b.n	6524 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    656a:	2400      	movs	r4, #0
    656c:	e7e0      	b.n	6530 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    656e:	4b1a      	ldr	r3, [pc, #104]	; (65d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6570:	4a1a      	ldr	r2, [pc, #104]	; (65dc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6572:	f44f 7183 	mov.w	r1, #262	; 0x106
    6576:	481a      	ldr	r0, [pc, #104]	; (65e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6578:	f00a f9a2 	bl	108c0 <__assert_func>
  int element_count = 1;
    657c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    657e:	4640      	mov	r0, r8
    6580:	f00c fe12 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6584:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6588:	4620      	mov	r0, r4
    658a:	f00c fe13 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    658e:	2806      	cmp	r0, #6
    6590:	d910      	bls.n	65b4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    6592:	1da0      	adds	r0, r4, #6
    6594:	f00c fe0e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6598:	b170      	cbz	r0, 65b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    659a:	4440      	add	r0, r8
    659c:	f00c fe10 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    65a0:	464a      	mov	r2, r9
    65a2:	f10d 0107 	add.w	r1, sp, #7
    65a6:	b2c0      	uxtb	r0, r0
    65a8:	f003 f98a 	bl	98c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    65ac:	b130      	cbz	r0, 65bc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    65ae:	b003      	add	sp, #12
    65b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    65b4:	2000      	movs	r0, #0
    65b6:	e7ef      	b.n	6598 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    65b8:	2000      	movs	r0, #0
    65ba:	e7f1      	b.n	65a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    65bc:	4651      	mov	r1, sl
    65be:	f89d 0007 	ldrb.w	r0, [sp, #7]
    65c2:	f00c fd87 	bl	130d4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    65c6:	2800      	cmp	r0, #0
    65c8:	d1f1      	bne.n	65ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    65ca:	f8da 3000 	ldr.w	r3, [sl]
    65ce:	fb07 f703 	mul.w	r7, r7, r3
    65d2:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    65d6:	e7ea      	b.n	65ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    65d8:	0006911c 	.word	0x0006911c
    65dc:	00069128 	.word	0x00069128
    65e0:	000691e8 	.word	0x000691e8

000065e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    65e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65e6:	b089      	sub	sp, #36	; 0x24
    65e8:	9001      	str	r0, [sp, #4]
    65ea:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    65ec:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    65f0:	2204      	movs	r2, #4
    65f2:	eb0d 0102 	add.w	r1, sp, r2
    65f6:	a807      	add	r0, sp, #28
    65f8:	f00f fd4c 	bl	16094 <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    65fc:	9b07      	ldr	r3, [sp, #28]
    65fe:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    6602:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    6604:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    6608:	2b00      	cmp	r3, #0
    660a:	db0e      	blt.n	662a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    660c:	2300      	movs	r3, #0
    660e:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    6610:	2c80      	cmp	r4, #128	; 0x80
    6612:	d00e      	beq.n	6632 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    6614:	4b32      	ldr	r3, [pc, #200]	; (66e0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    6616:	f10d 0c0c 	add.w	ip, sp, #12
    661a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    661c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    6620:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    6624:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    6626:	2300      	movs	r3, #0
    6628:	e01a      	b.n	6660 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    662a:	232d      	movs	r3, #45	; 0x2d
    662c:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    6630:	e7ec      	b.n	660c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    6632:	b937      	cbnz	r7, 6642 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    6634:	4a2b      	ldr	r2, [pc, #172]	; (66e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    6636:	1ba9      	subs	r1, r5, r6
    6638:	4630      	mov	r0, r6
    663a:	f00c fdd8 	bl	131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    663e:	4607      	mov	r7, r0
      return current;
    6640:	e04a      	b.n	66d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    6642:	4a29      	ldr	r2, [pc, #164]	; (66e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    6644:	1ba9      	subs	r1, r5, r6
    6646:	4630      	mov	r0, r6
    6648:	f00c fdd1 	bl	131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    664c:	4607      	mov	r7, r0
      return current;
    664e:	e043      	b.n	66d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6650:	a908      	add	r1, sp, #32
    6652:	18c8      	adds	r0, r1, r3
    6654:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6658:	fa27 f000 	lsr.w	r0, r7, r0
    665c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    665e:	3301      	adds	r3, #1
    6660:	2b0c      	cmp	r3, #12
    6662:	ddf5      	ble.n	6650 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6664:	2331      	movs	r3, #49	; 0x31
    6666:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6668:	232e      	movs	r3, #46	; 0x2e
    666a:	7073      	strb	r3, [r6, #1]
  current += 1;
    666c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    666e:	2300      	movs	r3, #0
    6670:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6672:	1be9      	subs	r1, r5, r7
    6674:	2907      	cmp	r1, #7
    6676:	dd2f      	ble.n	66d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6678:	2301      	movs	r3, #1
    667a:	2b06      	cmp	r3, #6
    667c:	dc03      	bgt.n	6686 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    667e:	2030      	movs	r0, #48	; 0x30
    6680:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6682:	3301      	adds	r3, #1
    6684:	e7f9      	b.n	667a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6686:	230a      	movs	r3, #10
    6688:	4638      	mov	r0, r7
    668a:	f00c fdfd 	bl	13288 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    668e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6690:	2330      	movs	r3, #48	; 0x30
    6692:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    6694:	f1d1 0607 	rsbs	r6, r1, #7
    6698:	d00c      	beq.n	66b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    669a:	2300      	movs	r3, #0
    669c:	428b      	cmp	r3, r1
    669e:	da06      	bge.n	66ae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    66a0:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    66a4:	5582      	strb	r2, [r0, r6]
      *current = '0';
    66a6:	2230      	movs	r2, #48	; 0x30
    66a8:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    66aa:	3301      	adds	r3, #1
    66ac:	e7f6      	b.n	669c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    66ae:	3007      	adds	r0, #7
    66b0:	e000      	b.n	66b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    66b2:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    66b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    66b8:	2b30      	cmp	r3, #48	; 0x30
    66ba:	d102      	bne.n	66c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    66bc:	1e43      	subs	r3, r0, #1
    66be:	42bb      	cmp	r3, r7
    66c0:	d8f7      	bhi.n	66b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    66c2:	2300      	movs	r3, #0
    66c4:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    66c6:	4a09      	ldr	r2, [pc, #36]	; (66ec <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    66c8:	1a29      	subs	r1, r5, r0
    66ca:	f00c fd90 	bl	131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    66ce:	4622      	mov	r2, r4
    66d0:	1a29      	subs	r1, r5, r0
    66d2:	f00c fdca 	bl	1326a <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    66d6:	4607      	mov	r7, r0
  return current;
}
    66d8:	4638      	mov	r0, r7
    66da:	b009      	add	sp, #36	; 0x24
    66dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66de:	bf00      	nop
    66e0:	0006925c 	.word	0x0006925c
    66e4:	00069250 	.word	0x00069250
    66e8:	00069254 	.word	0x00069254
    66ec:	00069258 	.word	0x00069258

000066f0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    66f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66f2:	b083      	sub	sp, #12
    66f4:	4607      	mov	r7, r0
    66f6:	4615      	mov	r5, r2
    66f8:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    66fa:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    66fc:	2400      	movs	r4, #0
    66fe:	e07c      	b.n	67fa <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6700:	1b33      	subs	r3, r6, r4
    6702:	2b0a      	cmp	r3, #10
    6704:	dd09      	ble.n	671a <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	1d1a      	adds	r2, r3, #4
    670a:	9201      	str	r2, [sp, #4]
    670c:	6819      	ldr	r1, [r3, #0]
    670e:	1938      	adds	r0, r7, r4
    6710:	f00c fdca 	bl	132a8 <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    6714:	4404      	add	r4, r0
          current++;
    6716:	1caa      	adds	r2, r5, #2
          break;
    6718:	e06e      	b.n	67f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    671a:	1c60      	adds	r0, r4, #1
    671c:	2300      	movs	r3, #0
    671e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6720:	e0b1      	b.n	6886 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6722:	1b33      	subs	r3, r6, r4
    6724:	2b0a      	cmp	r3, #10
    6726:	dd09      	ble.n	673c <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	1d1a      	adds	r2, r3, #4
    672c:	9201      	str	r2, [sp, #4]
    672e:	6819      	ldr	r1, [r3, #0]
    6730:	1938      	adds	r0, r7, r4
    6732:	f00c fdc1 	bl	132b8 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    6736:	4404      	add	r4, r0
          current++;
    6738:	1caa      	adds	r2, r5, #2
          break;
    673a:	e05d      	b.n	67f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    673c:	1c60      	adds	r0, r4, #1
    673e:	2300      	movs	r3, #0
    6740:	553b      	strb	r3, [r7, r4]
            return output_index;
    6742:	e0a0      	b.n	6886 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6744:	1b33      	subs	r3, r6, r4
    6746:	2b09      	cmp	r3, #9
    6748:	dd0f      	ble.n	676a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    674a:	1c63      	adds	r3, r4, #1
    674c:	2230      	movs	r2, #48	; 0x30
    674e:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6750:	3402      	adds	r4, #2
    6752:	2278      	movs	r2, #120	; 0x78
    6754:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6756:	9b01      	ldr	r3, [sp, #4]
    6758:	1d1a      	adds	r2, r3, #4
    675a:	9201      	str	r2, [sp, #4]
    675c:	6819      	ldr	r1, [r3, #0]
    675e:	1938      	adds	r0, r7, r4
    6760:	f00c fdb3 	bl	132ca <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6764:	4404      	add	r4, r0
          current++;
    6766:	1caa      	adds	r2, r5, #2
          break;
    6768:	e046      	b.n	67f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    676a:	1c60      	adds	r0, r4, #1
    676c:	2300      	movs	r3, #0
    676e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6770:	e089      	b.n	6886 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6772:	1b30      	subs	r0, r6, r4
    6774:	f7fa fa78 	bl	c68 <__aeabi_i2f>
    6778:	4944      	ldr	r1, [pc, #272]	; (688c <MicroVsnprintf+0x19c>)
    677a:	f7fa fc67 	bl	104c <__aeabi_fcmplt>
    677e:	b988      	cbnz	r0, 67a4 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6780:	9b01      	ldr	r3, [sp, #4]
    6782:	3307      	adds	r3, #7
    6784:	f023 0307 	bic.w	r3, r3, #7
    6788:	f103 0208 	add.w	r2, r3, #8
    678c:	9201      	str	r2, [sp, #4]
    678e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6792:	f7fa f95f 	bl	a54 <__aeabi_d2f>
    6796:	4601      	mov	r1, r0
    6798:	1938      	adds	r0, r7, r4
    679a:	f00c fd9f 	bl	132dc <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    679e:	4404      	add	r4, r0
          current++;
    67a0:	1caa      	adds	r2, r5, #2
          break;
    67a2:	e029      	b.n	67f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    67a4:	1c60      	adds	r0, r4, #1
    67a6:	2300      	movs	r3, #0
    67a8:	553b      	strb	r3, [r7, r4]
            return output_index;
    67aa:	e06c      	b.n	6886 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    67ac:	1caa      	adds	r2, r5, #2
    67ae:	553b      	strb	r3, [r7, r4]
    67b0:	3401      	adds	r4, #1
          break;
    67b2:	e021      	b.n	67f8 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    67b4:	1b33      	subs	r3, r6, r4
    67b6:	2b00      	cmp	r3, #0
    67b8:	dd07      	ble.n	67ca <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    67ba:	9b01      	ldr	r3, [sp, #4]
    67bc:	1d1a      	adds	r2, r3, #4
    67be:	9201      	str	r2, [sp, #4]
    67c0:	681b      	ldr	r3, [r3, #0]
    67c2:	553b      	strb	r3, [r7, r4]
          current++;
    67c4:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    67c6:	3401      	adds	r4, #1
          break;
    67c8:	e016      	b.n	67f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    67ca:	1c60      	adds	r0, r4, #1
    67cc:	2300      	movs	r3, #0
    67ce:	553b      	strb	r3, [r7, r4]
            return output_index;
    67d0:	e059      	b.n	6886 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	1d1a      	adds	r2, r3, #4
    67d6:	9201      	str	r2, [sp, #4]
    67d8:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    67da:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    67dc:	18e2      	adds	r2, r4, r3
    67de:	42b2      	cmp	r2, r6
    67e0:	da05      	bge.n	67ee <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    67e2:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    67e4:	b11a      	cbz	r2, 67ee <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    67e6:	3301      	adds	r3, #1
    67e8:	553a      	strb	r2, [r7, r4]
    67ea:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    67ec:	e7f6      	b.n	67dc <MicroVsnprintf+0xec>
          }
          current++;
    67ee:	1caa      	adds	r2, r5, #2
    67f0:	e002      	b.n	67f8 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    67f2:	1c6a      	adds	r2, r5, #1
    67f4:	553b      	strb	r3, [r7, r4]
    67f6:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    67f8:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    67fa:	782b      	ldrb	r3, [r5, #0]
    67fc:	2b00      	cmp	r3, #0
    67fe:	d03f      	beq.n	6880 <MicroVsnprintf+0x190>
    6800:	42b4      	cmp	r4, r6
    6802:	da3d      	bge.n	6880 <MicroVsnprintf+0x190>
    if (*current == '%') {
    6804:	2b25      	cmp	r3, #37	; 0x25
    6806:	d1f4      	bne.n	67f2 <MicroVsnprintf+0x102>
      current++;
    6808:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    680a:	786b      	ldrb	r3, [r5, #1]
    680c:	2b25      	cmp	r3, #37	; 0x25
    680e:	d0cd      	beq.n	67ac <MicroVsnprintf+0xbc>
    6810:	d3f2      	bcc.n	67f8 <MicroVsnprintf+0x108>
    6812:	2b78      	cmp	r3, #120	; 0x78
    6814:	d8f0      	bhi.n	67f8 <MicroVsnprintf+0x108>
    6816:	2b63      	cmp	r3, #99	; 0x63
    6818:	d3ee      	bcc.n	67f8 <MicroVsnprintf+0x108>
    681a:	3b63      	subs	r3, #99	; 0x63
    681c:	2b15      	cmp	r3, #21
    681e:	d8eb      	bhi.n	67f8 <MicroVsnprintf+0x108>
    6820:	a101      	add	r1, pc, #4	; (adr r1, 6828 <MicroVsnprintf+0x138>)
    6822:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6826:	bf00      	nop
    6828:	000067b5 	.word	0x000067b5
    682c:	00006701 	.word	0x00006701
    6830:	000067f9 	.word	0x000067f9
    6834:	00006773 	.word	0x00006773
    6838:	000067f9 	.word	0x000067f9
    683c:	000067f9 	.word	0x000067f9
    6840:	000067f9 	.word	0x000067f9
    6844:	000067f9 	.word	0x000067f9
    6848:	000067f9 	.word	0x000067f9
    684c:	000067f9 	.word	0x000067f9
    6850:	000067f9 	.word	0x000067f9
    6854:	000067f9 	.word	0x000067f9
    6858:	000067f9 	.word	0x000067f9
    685c:	000067f9 	.word	0x000067f9
    6860:	000067f9 	.word	0x000067f9
    6864:	000067f9 	.word	0x000067f9
    6868:	000067d3 	.word	0x000067d3
    686c:	000067f9 	.word	0x000067f9
    6870:	00006723 	.word	0x00006723
    6874:	000067f9 	.word	0x000067f9
    6878:	000067f9 	.word	0x000067f9
    687c:	00006745 	.word	0x00006745
    }
  }
  output[output_index++] = '\0';
    6880:	1c60      	adds	r0, r4, #1
    6882:	2300      	movs	r3, #0
    6884:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6886:	b003      	add	sp, #12
    6888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    688a:	bf00      	nop
    688c:	41600000 	.word	0x41600000

00006890 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6890:	b570      	push	{r4, r5, r6, lr}
    6892:	4604      	mov	r4, r0
    6894:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    6896:	f00c fc87 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    689a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    689c:	4630      	mov	r0, r6
    689e:	f00c fc89 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68a2:	2808      	cmp	r0, #8
    68a4:	d918      	bls.n	68d8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    68a6:	f106 0008 	add.w	r0, r6, #8
    68aa:	f00c fc83 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    68ae:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68b0:	b1a0      	cbz	r0, 68dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    68b2:	4620      	mov	r0, r4
    68b4:	f00c fc72 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    68b8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    68ba:	6820      	ldr	r0, [r4, #0]
    68bc:	f00b fa4f 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    68c0:	4285      	cmp	r5, r0
    68c2:	d20d      	bcs.n	68e0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    68c4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    68c6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    68ca:	4620      	mov	r0, r4
    68cc:	f00c fc66 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    68d0:	4420      	add	r0, r4
    68d2:	f00c fd19 	bl	13308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    68d6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    68d8:	2000      	movs	r0, #0
    68da:	e7e8      	b.n	68ae <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    68dc:	2400      	movs	r4, #0
    68de:	e7ec      	b.n	68ba <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    68e0:	4b03      	ldr	r3, [pc, #12]	; (68f0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    68e2:	4a04      	ldr	r2, [pc, #16]	; (68f4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    68e4:	f44f 7183 	mov.w	r1, #262	; 0x106
    68e8:	4803      	ldr	r0, [pc, #12]	; (68f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    68ea:	f009 ffe9 	bl	108c0 <__assert_func>
    68ee:	bf00      	nop
    68f0:	0006911c 	.word	0x0006911c
    68f4:	0006926c 	.word	0x0006926c
    68f8:	000691e8 	.word	0x000691e8

000068fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    68fc:	6943      	ldr	r3, [r0, #20]
    68fe:	2b20      	cmp	r3, #32
    6900:	d007      	beq.n	6912 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6902:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6904:	2a91      	cmp	r2, #145	; 0x91
    6906:	d806      	bhi.n	6916 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6908:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    690a:	4a04      	ldr	r2, [pc, #16]	; (691c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    690c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6910:	4770      	bx	lr
    return registration->custom_name;
    6912:	6980      	ldr	r0, [r0, #24]
    6914:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6916:	4802      	ldr	r0, [pc, #8]	; (6920 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6918:	4770      	bx	lr
    691a:	bf00      	nop
    691c:	00069c78 	.word	0x00069c78
    6920:	00068948 	.word	0x00068948

00006924 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6928:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    692a:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    692e:	2600      	movs	r6, #0
    6930:	e024      	b.n	697c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6932:	4621      	mov	r1, r4
    6934:	68e8      	ldr	r0, [r5, #12]
    6936:	f00c ff23 	bl	13780 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    693a:	3401      	adds	r4, #1
    693c:	42bc      	cmp	r4, r7
    693e:	d21c      	bcs.n	697a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6940:	692b      	ldr	r3, [r5, #16]
    6942:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6946:	212c      	movs	r1, #44	; 0x2c
    6948:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    694c:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6950:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6954:	2b00      	cmp	r3, #0
    6956:	d0ec      	beq.n	6932 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6958:	6868      	ldr	r0, [r5, #4]
    695a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    695c:	4682      	mov	sl, r0
    695e:	2800      	cmp	r0, #0
    6960:	d0e7      	beq.n	6932 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6962:	4648      	mov	r0, r9
    6964:	f7ff ffca 	bl	68fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6968:	4601      	mov	r1, r0
    696a:	4653      	mov	r3, sl
    696c:	4622      	mov	r2, r4
    696e:	480c      	ldr	r0, [pc, #48]	; (69a0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6970:	f00c fb8f 	bl	13092 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6974:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    697a:	3601      	adds	r6, #1
    697c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    697e:	6818      	ldr	r0, [r3, #0]
    6980:	f00b f9ed 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6984:	4286      	cmp	r6, r0
    6986:	d207      	bcs.n	6998 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6988:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    698a:	4631      	mov	r1, r6
    698c:	68a8      	ldr	r0, [r5, #8]
    698e:	f7ff ff7f 	bl	6890 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6992:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    6994:	2400      	movs	r4, #0
    6996:	e7d1      	b.n	693c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6998:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    699c:	2000      	movs	r0, #0
    699e:	e7ea      	b.n	6976 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    69a0:	00069364 	.word	0x00069364

000069a4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    69a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69a8:	b083      	sub	sp, #12
    69aa:	4606      	mov	r6, r0
    69ac:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    69ae:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    69b2:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    69b4:	6983      	ldr	r3, [r0, #24]
    69b6:	6818      	ldr	r0, [r3, #0]
    69b8:	f00b f9d1 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    69bc:	4284      	cmp	r4, r0
    69be:	d207      	bcs.n	69d0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    69c0:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    69c2:	4621      	mov	r1, r4
    69c4:	68b0      	ldr	r0, [r6, #8]
    69c6:	f7ff ff63 	bl	6890 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    69ca:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    69cc:	2700      	movs	r7, #0
    69ce:	e01d      	b.n	6a0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    69d0:	4602      	mov	r2, r0
    69d2:	4621      	mov	r1, r4
    69d4:	4827      	ldr	r0, [pc, #156]	; (6a74 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    69d6:	f00c fb5c 	bl	13092 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    69da:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    69dc:	4628      	mov	r0, r5
    69de:	b003      	add	sp, #12
    69e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    69e4:	f00f fb3d 	bl	16062 <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    69e8:	4640      	mov	r0, r8
    69ea:	f7ff ff87 	bl	68fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    69ee:	4601      	mov	r1, r0
    69f0:	462b      	mov	r3, r5
    69f2:	463a      	mov	r2, r7
    69f4:	4820      	ldr	r0, [pc, #128]	; (6a78 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    69f6:	f00c fb4c 	bl	13092 <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    69fa:	2c00      	cmp	r4, #0
    69fc:	d0ee      	beq.n	69dc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    69fe:	6823      	ldr	r3, [r4, #0]
    6a00:	68db      	ldr	r3, [r3, #12]
    6a02:	9900      	ldr	r1, [sp, #0]
    6a04:	4620      	mov	r0, r4
    6a06:	4798      	blx	r3
    6a08:	e7e8      	b.n	69dc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    6a0a:	3701      	adds	r7, #1
    6a0c:	454f      	cmp	r7, r9
    6a0e:	d22d      	bcs.n	6a6c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6a10:	6933      	ldr	r3, [r6, #16]
    6a12:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6a16:	252c      	movs	r5, #44	; 0x2c
    6a18:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    6a1c:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6a20:	4640      	mov	r0, r8
    6a22:	f7ff ff6b 	bl	68fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6a26:	4601      	mov	r1, r0
    6a28:	6873      	ldr	r3, [r6, #4]
    6a2a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    6a2c:	2300      	movs	r3, #0
    6a2e:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6a30:	b124      	cbz	r4, 6a3c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6a32:	6823      	ldr	r3, [r4, #0]
    6a34:	689b      	ldr	r3, [r3, #8]
    6a36:	4620      	mov	r0, r4
    6a38:	4798      	blx	r3
    6a3a:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    6a3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6a40:	2b00      	cmp	r3, #0
    6a42:	d0cf      	beq.n	69e4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6a44:	4629      	mov	r1, r5
    6a46:	6870      	ldr	r0, [r6, #4]
    6a48:	4798      	blx	r3
    6a4a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    6a4c:	68f0      	ldr	r0, [r6, #12]
    6a4e:	6803      	ldr	r3, [r0, #0]
    6a50:	689b      	ldr	r3, [r3, #8]
    6a52:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6a54:	2d01      	cmp	r5, #1
    6a56:	d0c7      	beq.n	69e8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6a58:	2d00      	cmp	r5, #0
    6a5a:	d1ce      	bne.n	69fa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    6a5c:	2c00      	cmp	r4, #0
    6a5e:	d0d4      	beq.n	6a0a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6a60:	6823      	ldr	r3, [r4, #0]
    6a62:	68db      	ldr	r3, [r3, #12]
    6a64:	9900      	ldr	r1, [sp, #0]
    6a66:	4620      	mov	r0, r4
    6a68:	4798      	blx	r3
    6a6a:	e7ce      	b.n	6a0a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    6a6c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6a70:	2500      	movs	r5, #0
    6a72:	e7b3      	b.n	69dc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6a74:	0006939c 	.word	0x0006939c
    6a78:	000693d0 	.word	0x000693d0

00006a7c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    6a7c:	b570      	push	{r4, r5, r6, lr}
    6a7e:	4604      	mov	r4, r0
    6a80:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6a82:	4a11      	ldr	r2, [pc, #68]	; (6ac8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6a84:	6002      	str	r2, [r0, #0]
    6a86:	6041      	str	r1, [r0, #4]
    6a88:	6085      	str	r5, [r0, #8]
    6a8a:	60c3      	str	r3, [r0, #12]
    6a8c:	2300      	movs	r3, #0
    6a8e:	6103      	str	r3, [r0, #16]
    6a90:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    6a92:	b19d      	cbz	r5, 6abc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    6a94:	4628      	mov	r0, r5
    6a96:	f00c fb87 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6a9a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6a9c:	4630      	mov	r0, r6
    6a9e:	f00c fb89 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6aa2:	2808      	cmp	r0, #8
    6aa4:	d90c      	bls.n	6ac0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    6aa6:	f106 0008 	add.w	r0, r6, #8
    6aaa:	f00c fb83 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6aae:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ab0:	b140      	cbz	r0, 6ac4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    6ab2:	4628      	mov	r0, r5
    6ab4:	f00c fb72 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ab8:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    6aba:	61a5      	str	r5, [r4, #24]
}
    6abc:	4620      	mov	r0, r4
    6abe:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ac0:	2000      	movs	r0, #0
    6ac2:	e7f4      	b.n	6aae <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ac4:	2500      	movs	r5, #0
    6ac6:	e7f8      	b.n	6aba <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    6ac8:	00069ecc 	.word	0x00069ecc

00006acc <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    6acc:	b570      	push	{r4, r5, r6, lr}
    6ace:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    6ad0:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6ad2:	4620      	mov	r0, r4
    6ad4:	f00c fb68 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ad8:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ada:	4630      	mov	r0, r6
    6adc:	f00c fb6a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ae0:	2808      	cmp	r0, #8
    6ae2:	d92c      	bls.n	6b3e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6ae4:	f106 0008 	add.w	r0, r6, #8
    6ae8:	f00c fb64 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6aec:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6aee:	b340      	cbz	r0, 6b42 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6af0:	4620      	mov	r0, r4
    6af2:	f00c fb53 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6af6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6af8:	6820      	ldr	r0, [r4, #0]
    6afa:	f00b f930 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6afe:	4285      	cmp	r5, r0
    6b00:	d221      	bcs.n	6b46 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b02:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6b04:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6b08:	4620      	mov	r0, r4
    6b0a:	f00c fb47 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b0e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6b10:	4620      	mov	r0, r4
    6b12:	f00c fb49 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b16:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b18:	4628      	mov	r0, r5
    6b1a:	f00c fb4b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b1e:	2808      	cmp	r0, #8
    6b20:	d918      	bls.n	6b54 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6b22:	f105 0008 	add.w	r0, r5, #8
    6b26:	f00c fb45 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6b2a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b2c:	b1a0      	cbz	r0, 6b58 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    6b2e:	4620      	mov	r0, r4
    6b30:	f00c fb34 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b34:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6b36:	6820      	ldr	r0, [r4, #0]
    6b38:	f00b f911 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6b3c:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b3e:	2000      	movs	r0, #0
    6b40:	e7d4      	b.n	6aec <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b42:	2400      	movs	r4, #0
    6b44:	e7d8      	b.n	6af8 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6b46:	4b05      	ldr	r3, [pc, #20]	; (6b5c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6b48:	4a05      	ldr	r2, [pc, #20]	; (6b60 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    6b4a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6b4e:	4805      	ldr	r0, [pc, #20]	; (6b64 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6b50:	f009 feb6 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b54:	2000      	movs	r0, #0
    6b56:	e7e8      	b.n	6b2a <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b58:	2400      	movs	r4, #0
    6b5a:	e7ec      	b.n	6b36 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6b5c:	0006911c 	.word	0x0006911c
    6b60:	0006926c 	.word	0x0006926c
    6b64:	000691e8 	.word	0x000691e8

00006b68 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6b68:	b570      	push	{r4, r5, r6, lr}
    6b6a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6b6c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6b6e:	4620      	mov	r0, r4
    6b70:	f00c fb1a 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b74:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b76:	4630      	mov	r0, r6
    6b78:	f00c fb1c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6b7c:	2808      	cmp	r0, #8
    6b7e:	d92b      	bls.n	6bd8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6b80:	f106 0008 	add.w	r0, r6, #8
    6b84:	f00c fb16 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6b88:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6b8a:	b338      	cbz	r0, 6bdc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6b8c:	4620      	mov	r0, r4
    6b8e:	f00c fb05 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6b92:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6b94:	6820      	ldr	r0, [r4, #0]
    6b96:	f00b f8e2 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6b9a:	4285      	cmp	r5, r0
    6b9c:	d220      	bcs.n	6be0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6b9e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6ba0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ba4:	4620      	mov	r0, r4
    6ba6:	f00c faf9 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6baa:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6bac:	4620      	mov	r0, r4
    6bae:	f00c fafb 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6bb2:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6bb4:	4628      	mov	r0, r5
    6bb6:	f00c fafd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bba:	2806      	cmp	r0, #6
    6bbc:	d917      	bls.n	6bee <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6bbe:	1da8      	adds	r0, r5, #6
    6bc0:	f00c faf8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bc4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bc6:	b1a0      	cbz	r0, 6bf2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    6bc8:	4620      	mov	r0, r4
    6bca:	f00c fae7 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bce:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bd0:	6820      	ldr	r0, [r4, #0]
    6bd2:	f00b f8c4 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6bd6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bd8:	2000      	movs	r0, #0
    6bda:	e7d5      	b.n	6b88 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bdc:	2400      	movs	r4, #0
    6bde:	e7d9      	b.n	6b94 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6be0:	4b05      	ldr	r3, [pc, #20]	; (6bf8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6be2:	4a06      	ldr	r2, [pc, #24]	; (6bfc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6be4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6be8:	4805      	ldr	r0, [pc, #20]	; (6c00 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    6bea:	f009 fe69 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bee:	2000      	movs	r0, #0
    6bf0:	e7e8      	b.n	6bc4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bf2:	2400      	movs	r4, #0
    6bf4:	e7ec      	b.n	6bd0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6bf6:	bf00      	nop
    6bf8:	0006911c 	.word	0x0006911c
    6bfc:	0006926c 	.word	0x0006926c
    6c00:	000691e8 	.word	0x000691e8

00006c04 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c08:	4606      	mov	r6, r0
    6c0a:	460d      	mov	r5, r1
    6c0c:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6c0e:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6c10:	4620      	mov	r0, r4
    6c12:	f00c fac9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c16:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c1a:	4640      	mov	r0, r8
    6c1c:	f00c faca 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c20:	2808      	cmp	r0, #8
    6c22:	d93d      	bls.n	6ca0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6c24:	f108 0008 	add.w	r0, r8, #8
    6c28:	f00c fac4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c2c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c2e:	b3c8      	cbz	r0, 6ca4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6c30:	4620      	mov	r0, r4
    6c32:	f00c fab3 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c36:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c38:	6820      	ldr	r0, [r4, #0]
    6c3a:	f00b f890 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c3e:	4285      	cmp	r5, r0
    6c40:	d232      	bcs.n	6ca8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c42:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6c44:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6c48:	4620      	mov	r0, r4
    6c4a:	f00c faa7 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c4e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6c50:	4620      	mov	r0, r4
    6c52:	f00c faa9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c56:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c5a:	4640      	mov	r0, r8
    6c5c:	f00c faaa 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c60:	2808      	cmp	r0, #8
    6c62:	d928      	bls.n	6cb6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6c64:	f108 0008 	add.w	r0, r8, #8
    6c68:	f00c faa4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c6c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c6e:	b320      	cbz	r0, 6cba <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6c70:	4620      	mov	r0, r4
    6c72:	f00c fa93 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c76:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c78:	6820      	ldr	r0, [r4, #0]
    6c7a:	f00b f870 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c7e:	4287      	cmp	r7, r0
    6c80:	d21d      	bcs.n	6cbe <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c82:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6c84:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6c88:	f00c fa8d 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6c8c:	6931      	ldr	r1, [r6, #16]
    6c8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6c92:	686b      	ldr	r3, [r5, #4]
    6c94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6c98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ca0:	2000      	movs	r0, #0
    6ca2:	e7c3      	b.n	6c2c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ca4:	2400      	movs	r4, #0
    6ca6:	e7c7      	b.n	6c38 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6ca8:	4b08      	ldr	r3, [pc, #32]	; (6ccc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6caa:	4a09      	ldr	r2, [pc, #36]	; (6cd0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6cac:	f44f 7183 	mov.w	r1, #262	; 0x106
    6cb0:	4808      	ldr	r0, [pc, #32]	; (6cd4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6cb2:	f009 fe05 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cb6:	2000      	movs	r0, #0
    6cb8:	e7d8      	b.n	6c6c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cba:	2400      	movs	r4, #0
    6cbc:	e7dc      	b.n	6c78 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6cbe:	4b03      	ldr	r3, [pc, #12]	; (6ccc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6cc0:	4a05      	ldr	r2, [pc, #20]	; (6cd8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6cc2:	f44f 7183 	mov.w	r1, #262	; 0x106
    6cc6:	4803      	ldr	r0, [pc, #12]	; (6cd4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6cc8:	f009 fdfa 	bl	108c0 <__assert_func>
    6ccc:	0006911c 	.word	0x0006911c
    6cd0:	0006926c 	.word	0x0006926c
    6cd4:	000691e8 	.word	0x000691e8
    6cd8:	00069128 	.word	0x00069128

00006cdc <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce0:	4606      	mov	r6, r0
    6ce2:	460d      	mov	r5, r1
    6ce4:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6ce6:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6ce8:	4620      	mov	r0, r4
    6cea:	f00c fa5d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cee:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cf2:	4640      	mov	r0, r8
    6cf4:	f00c fa5e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cf8:	2808      	cmp	r0, #8
    6cfa:	d93d      	bls.n	6d78 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6cfc:	f108 0008 	add.w	r0, r8, #8
    6d00:	f00c fa58 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d04:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d06:	b3c8      	cbz	r0, 6d7c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6d08:	4620      	mov	r0, r4
    6d0a:	f00c fa47 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d0e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d10:	6820      	ldr	r0, [r4, #0]
    6d12:	f00b f824 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d16:	4285      	cmp	r5, r0
    6d18:	d232      	bcs.n	6d80 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d1a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d1c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d20:	4620      	mov	r0, r4
    6d22:	f00c fa3b 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d26:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6d28:	4620      	mov	r0, r4
    6d2a:	f00c fa3d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d2e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d32:	4640      	mov	r0, r8
    6d34:	f00c fa3e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d38:	2806      	cmp	r0, #6
    6d3a:	d928      	bls.n	6d8e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6d3c:	f108 0006 	add.w	r0, r8, #6
    6d40:	f00c fa38 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d44:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d46:	b320      	cbz	r0, 6d92 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6d48:	4620      	mov	r0, r4
    6d4a:	f00c fa27 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d4e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d50:	6820      	ldr	r0, [r4, #0]
    6d52:	f00b f804 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d56:	4287      	cmp	r7, r0
    6d58:	d21d      	bcs.n	6d96 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d5a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6d5c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6d60:	f00c fa21 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6d64:	6931      	ldr	r1, [r6, #16]
    6d66:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6d6a:	686b      	ldr	r3, [r5, #4]
    6d6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6d70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d78:	2000      	movs	r0, #0
    6d7a:	e7c3      	b.n	6d04 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d7c:	2400      	movs	r4, #0
    6d7e:	e7c7      	b.n	6d10 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6d80:	4b08      	ldr	r3, [pc, #32]	; (6da4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6d82:	4a09      	ldr	r2, [pc, #36]	; (6da8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6d84:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d88:	4808      	ldr	r0, [pc, #32]	; (6dac <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6d8a:	f009 fd99 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d8e:	2000      	movs	r0, #0
    6d90:	e7d8      	b.n	6d44 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d92:	2400      	movs	r4, #0
    6d94:	e7dc      	b.n	6d50 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6d96:	4b03      	ldr	r3, [pc, #12]	; (6da4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6d98:	4a05      	ldr	r2, [pc, #20]	; (6db0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6d9a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6d9e:	4803      	ldr	r0, [pc, #12]	; (6dac <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6da0:	f009 fd8e 	bl	108c0 <__assert_func>
    6da4:	0006911c 	.word	0x0006911c
    6da8:	0006926c 	.word	0x0006926c
    6dac:	000691e8 	.word	0x000691e8
    6db0:	00069128 	.word	0x00069128

00006db4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6db8:	b083      	sub	sp, #12
    6dba:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6dbc:	2700      	movs	r7, #0
    6dbe:	e0c8      	b.n	6f52 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6dc0:	4b71      	ldr	r3, [pc, #452]	; (6f88 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6dc2:	4a72      	ldr	r2, [pc, #456]	; (6f8c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6dc4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6dc8:	4871      	ldr	r0, [pc, #452]	; (6f90 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6dca:	f009 fd79 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6dce:	2000      	movs	r0, #0
    6dd0:	e01d      	b.n	6e0e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dd2:	2400      	movs	r4, #0
    6dd4:	e022      	b.n	6e1c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6dd6:	4b6c      	ldr	r3, [pc, #432]	; (6f88 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6dd8:	4a6e      	ldr	r2, [pc, #440]	; (6f94 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6dda:	f44f 7183 	mov.w	r1, #262	; 0x106
    6dde:	486c      	ldr	r0, [pc, #432]	; (6f90 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6de0:	f009 fd6e 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6de4:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6de6:	b118      	cbz	r0, 6df0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6de8:	4420      	add	r0, r4
    6dea:	f00c faac 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6dee:	e000      	b.n	6df2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6df0:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6df2:	bba0      	cbnz	r0, 6e5e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6df4:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6df6:	4630      	mov	r0, r6
    6df8:	f00c f9d6 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dfc:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6dfe:	4620      	mov	r0, r4
    6e00:	f00c f9d8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e04:	2804      	cmp	r0, #4
    6e06:	d9e2      	bls.n	6dce <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6e08:	1d20      	adds	r0, r4, #4
    6e0a:	f00c f9d3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e0e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e10:	2800      	cmp	r0, #0
    6e12:	d0de      	beq.n	6dd2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6e14:	4620      	mov	r0, r4
    6e16:	f00c f9c1 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e1a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e1c:	6820      	ldr	r0, [r4, #0]
    6e1e:	f00a ff9e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6e22:	4285      	cmp	r5, r0
    6e24:	f080 8094 	bcs.w	6f50 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6e28:	6820      	ldr	r0, [r4, #0]
    6e2a:	f00a ff98 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e2e:	4285      	cmp	r5, r0
    6e30:	d2d1      	bcs.n	6dd6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e32:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6e34:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6e38:	4620      	mov	r0, r4
    6e3a:	f00c f9af 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e3e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6e40:	4620      	mov	r0, r4
    6e42:	f00c f9b1 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e46:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e4a:	4648      	mov	r0, r9
    6e4c:	f00c f9b2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e50:	280e      	cmp	r0, #14
    6e52:	d9c7      	bls.n	6de4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6e54:	f109 000e 	add.w	r0, r9, #14
    6e58:	f00c f9ac 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6e5c:	e7c3      	b.n	6de6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6e5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6e62:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6e66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6e6a:	6858      	ldr	r0, [r3, #4]
    6e6c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6e70:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6e74:	a901      	add	r1, sp, #4
    6e76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6e7a:	f00c f96e 	bl	1315a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6e7e:	4603      	mov	r3, r0
    6e80:	2800      	cmp	r0, #0
    6e82:	d17d      	bne.n	6f80 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    6e84:	4620      	mov	r0, r4
    6e86:	f00c f98f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e8a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e8e:	4648      	mov	r0, r9
    6e90:	f00c f990 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e94:	2806      	cmp	r0, #6
    6e96:	d914      	bls.n	6ec2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    6e98:	f109 0006 	add.w	r0, r9, #6
    6e9c:	f00c f98a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6ea0:	b188      	cbz	r0, 6ec6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    6ea2:	4420      	add	r0, r4
    6ea4:	f00c f98c 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    6ea8:	2809      	cmp	r0, #9
    6eaa:	d00e      	beq.n	6eca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    6eac:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6eae:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6eb2:	4453      	add	r3, sl
    6eb4:	685b      	ldr	r3, [r3, #4]
    6eb6:	9a01      	ldr	r2, [sp, #4]
    6eb8:	f853 000b 	ldr.w	r0, [r3, fp]
    6ebc:	f00f f8f7 	bl	160ae <memset>
    6ec0:	e798      	b.n	6df4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ec2:	2000      	movs	r0, #0
    6ec4:	e7ec      	b.n	6ea0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6ec6:	2000      	movs	r0, #0
    6ec8:	e7ee      	b.n	6ea8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    6eca:	4620      	mov	r0, r4
    6ecc:	f00c f96c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ed0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ed4:	4648      	mov	r0, r9
    6ed6:	f00c f96d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6eda:	280c      	cmp	r0, #12
    6edc:	d928      	bls.n	6f30 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    6ede:	f109 000c 	add.w	r0, r9, #12
    6ee2:	f00c f967 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6ee6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ee8:	b320      	cbz	r0, 6f34 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    6eea:	4620      	mov	r0, r4
    6eec:	f00c f956 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ef0:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6ef2:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6ef4:	4620      	mov	r0, r4
    6ef6:	f00c f957 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6efa:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6efc:	4620      	mov	r0, r4
    6efe:	f00c f959 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f02:	280a      	cmp	r0, #10
    6f04:	d918      	bls.n	6f38 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    6f06:	f104 000a 	add.w	r0, r4, #10
    6f0a:	f00c f953 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f0e:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f10:	b1a0      	cbz	r0, 6f3c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    6f12:	4648      	mov	r0, r9
    6f14:	f00c f942 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f18:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f1a:	f8d9 0000 	ldr.w	r0, [r9]
    6f1e:	f00a ff1e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f22:	b170      	cbz	r0, 6f42 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6f24:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    6f28:	f00c fa12 	bl	13350 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    6f2c:	4601      	mov	r1, r0
    6f2e:	e7be      	b.n	6eae <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f30:	2000      	movs	r0, #0
    6f32:	e7d8      	b.n	6ee6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f34:	2400      	movs	r4, #0
    6f36:	e7dc      	b.n	6ef2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f38:	2000      	movs	r0, #0
    6f3a:	e7e8      	b.n	6f0e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f3c:	f04f 0900 	mov.w	r9, #0
    6f40:	e7eb      	b.n	6f1a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    6f42:	4b11      	ldr	r3, [pc, #68]	; (6f88 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6f44:	4a14      	ldr	r2, [pc, #80]	; (6f98 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    6f46:	f44f 7183 	mov.w	r1, #262	; 0x106
    6f4a:	4811      	ldr	r0, [pc, #68]	; (6f90 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6f4c:	f009 fcb8 	bl	108c0 <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6f50:	3701      	adds	r7, #1
    6f52:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6f56:	6830      	ldr	r0, [r6, #0]
    6f58:	f00a ff01 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6f5c:	4287      	cmp	r7, r0
    6f5e:	d20e      	bcs.n	6f7e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    6f60:	6830      	ldr	r0, [r6, #0]
    6f62:	f00a fefc 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f66:	4287      	cmp	r7, r0
    6f68:	f4bf af2a 	bcs.w	6dc0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f6c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    6f6e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f72:	4630      	mov	r0, r6
    6f74:	f00c f912 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f78:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6f7a:	2500      	movs	r5, #0
    6f7c:	e73b      	b.n	6df6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    6f7e:	2300      	movs	r3, #0
}
    6f80:	4618      	mov	r0, r3
    6f82:	b003      	add	sp, #12
    6f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f88:	0006911c 	.word	0x0006911c
    6f8c:	0006926c 	.word	0x0006926c
    6f90:	000691e8 	.word	0x000691e8
    6f94:	00069404 	.word	0x00069404
    6f98:	000694f8 	.word	0x000694f8

00006f9c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    6f9c:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    6f9e:	4b05      	ldr	r3, [pc, #20]	; (6fb4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    6fa0:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    6fa2:	4b05      	ldr	r3, [pc, #20]	; (6fb8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    6fa4:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    6fa6:	4b05      	ldr	r3, [pc, #20]	; (6fbc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    6fa8:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    6faa:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    6fac:	2300      	movs	r3, #0
    6fae:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    6fb2:	4770      	bx	lr
    6fb4:	000134d7 	.word	0x000134d7
    6fb8:	00013485 	.word	0x00013485
    6fbc:	000134a3 	.word	0x000134a3

00006fc0 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    6fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc2:	4605      	mov	r5, r0
    6fc4:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    6fc6:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    6fc8:	4620      	mov	r0, r4
    6fca:	f00c f8ed 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fce:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fd0:	4638      	mov	r0, r7
    6fd2:	f00c f8ef 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fd6:	2808      	cmp	r0, #8
    6fd8:	d92f      	bls.n	703a <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    6fda:	f107 0008 	add.w	r0, r7, #8
    6fde:	f00c f8e9 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fe2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fe4:	b358      	cbz	r0, 703e <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    6fe6:	4620      	mov	r0, r4
    6fe8:	f00c f8d8 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6fec:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6fee:	6820      	ldr	r0, [r4, #0]
    6ff0:	f00a feb5 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6ff4:	b328      	cbz	r0, 7042 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6ff6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ff8:	4620      	mov	r0, r4
    6ffa:	f00c f8cf 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ffe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7000:	4620      	mov	r0, r4
    7002:	f00c f8d1 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7006:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7008:	4638      	mov	r0, r7
    700a:	f00c f8d3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    700e:	2808      	cmp	r0, #8
    7010:	d91e      	bls.n	7050 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    7012:	f107 0008 	add.w	r0, r7, #8
    7016:	f00c f8cd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    701a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    701c:	b1d0      	cbz	r0, 7054 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    701e:	4620      	mov	r0, r4
    7020:	f00c f8bc 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7024:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7026:	6820      	ldr	r0, [r4, #0]
    7028:	f00a fe99 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    702c:	4286      	cmp	r6, r0
    702e:	d213      	bcs.n	7058 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    7030:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7034:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    7038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    703a:	2000      	movs	r0, #0
    703c:	e7d1      	b.n	6fe2 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    703e:	2400      	movs	r4, #0
    7040:	e7d5      	b.n	6fee <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    7042:	4b09      	ldr	r3, [pc, #36]	; (7068 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    7044:	4a09      	ldr	r2, [pc, #36]	; (706c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    7046:	f44f 7183 	mov.w	r1, #262	; 0x106
    704a:	4809      	ldr	r0, [pc, #36]	; (7070 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    704c:	f009 fc38 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7050:	2000      	movs	r0, #0
    7052:	e7e2      	b.n	701a <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7054:	2400      	movs	r4, #0
    7056:	e7e6      	b.n	7026 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7058:	4603      	mov	r3, r0
    705a:	4632      	mov	r2, r6
    705c:	4905      	ldr	r1, [pc, #20]	; (7074 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    705e:	68a8      	ldr	r0, [r5, #8]
    7060:	f00c fde5 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7064:	2000      	movs	r0, #0
    7066:	e7e7      	b.n	7038 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    7068:	0006911c 	.word	0x0006911c
    706c:	0006926c 	.word	0x0006926c
    7070:	000691e8 	.word	0x000691e8
    7074:	00069efc 	.word	0x00069efc

00007078 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    7078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    707a:	4605      	mov	r5, r0
    707c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    707e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7080:	4620      	mov	r0, r4
    7082:	f00c f891 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7086:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7088:	4638      	mov	r0, r7
    708a:	f00c f893 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    708e:	2808      	cmp	r0, #8
    7090:	d92e      	bls.n	70f0 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    7092:	f107 0008 	add.w	r0, r7, #8
    7096:	f00c f88d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    709a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    709c:	b350      	cbz	r0, 70f4 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    709e:	4620      	mov	r0, r4
    70a0:	f00c f87c 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70a4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70a6:	6820      	ldr	r0, [r4, #0]
    70a8:	f00a fe59 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    70ac:	b320      	cbz	r0, 70f8 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    70ae:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    70b0:	4620      	mov	r0, r4
    70b2:	f00c f873 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70b6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    70b8:	4620      	mov	r0, r4
    70ba:	f00c f875 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70be:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70c0:	4638      	mov	r0, r7
    70c2:	f00c f877 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70c6:	2806      	cmp	r0, #6
    70c8:	d91d      	bls.n	7106 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    70ca:	1db8      	adds	r0, r7, #6
    70cc:	f00c f872 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70d0:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70d2:	b1d0      	cbz	r0, 710a <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    70d4:	4620      	mov	r0, r4
    70d6:	f00c f861 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70da:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70dc:	6820      	ldr	r0, [r4, #0]
    70de:	f00a fe3e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    70e2:	4286      	cmp	r6, r0
    70e4:	d213      	bcs.n	710e <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    70e6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    70ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    70ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70f0:	2000      	movs	r0, #0
    70f2:	e7d2      	b.n	709a <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70f4:	2400      	movs	r4, #0
    70f6:	e7d6      	b.n	70a6 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    70f8:	4b09      	ldr	r3, [pc, #36]	; (7120 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    70fa:	4a0a      	ldr	r2, [pc, #40]	; (7124 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    70fc:	f44f 7183 	mov.w	r1, #262	; 0x106
    7100:	4809      	ldr	r0, [pc, #36]	; (7128 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    7102:	f009 fbdd 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7106:	2000      	movs	r0, #0
    7108:	e7e2      	b.n	70d0 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    710a:	2400      	movs	r4, #0
    710c:	e7e6      	b.n	70dc <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    710e:	4603      	mov	r3, r0
    7110:	4632      	mov	r2, r6
    7112:	4906      	ldr	r1, [pc, #24]	; (712c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    7114:	68a8      	ldr	r0, [r5, #8]
    7116:	f00c fd8a 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    711a:	2000      	movs	r0, #0
    711c:	e7e7      	b.n	70ee <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    711e:	bf00      	nop
    7120:	0006911c 	.word	0x0006911c
    7124:	0006926c 	.word	0x0006926c
    7128:	000691e8 	.word	0x000691e8
    712c:	00069f28 	.word	0x00069f28

00007130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    7130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7134:	b08b      	sub	sp, #44	; 0x2c
    7136:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7138:	2300      	movs	r3, #0
    713a:	9305      	str	r3, [sp, #20]
    713c:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    7140:	f00c f976 	bl	13430 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    7144:	9b05      	ldr	r3, [sp, #20]
    7146:	4298      	cmp	r0, r3
    7148:	f340 81f6 	ble.w	7538 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    714c:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    7150:	4628      	mov	r0, r5
    7152:	f00c f829 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7156:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7158:	4620      	mov	r0, r4
    715a:	f00c f82b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    715e:	2808      	cmp	r0, #8
    7160:	d927      	bls.n	71b2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    7162:	f104 0008 	add.w	r0, r4, #8
    7166:	f00c f825 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    716a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    716c:	b318      	cbz	r0, 71b6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    716e:	4620      	mov	r0, r4
    7170:	f00c f814 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7174:	4404      	add	r4, r0
    7176:	9e05      	ldr	r6, [sp, #20]
    7178:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    717a:	6820      	ldr	r0, [r4, #0]
    717c:	f00a fdef 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7180:	4286      	cmp	r6, r0
    7182:	d21a      	bcs.n	71ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7184:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7186:	9b05      	ldr	r3, [sp, #20]
    7188:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    718c:	4620      	mov	r0, r4
    718e:	f00c f805 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7192:	1823      	adds	r3, r4, r0
    7194:	9302      	str	r3, [sp, #8]
    7196:	d017      	beq.n	71c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    7198:	4628      	mov	r0, r5
    719a:	f00c f805 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    719e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71a0:	4620      	mov	r0, r4
    71a2:	f00c f807 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71a6:	2806      	cmp	r0, #6
    71a8:	d910      	bls.n	71cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    71aa:	1da0      	adds	r0, r4, #6
    71ac:	f00c f802 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    71b0:	e00d      	b.n	71ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    71b2:	2000      	movs	r0, #0
    71b4:	e7d9      	b.n	716a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71b6:	2400      	movs	r4, #0
    71b8:	e7dd      	b.n	7176 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    71ba:	4b4e      	ldr	r3, [pc, #312]	; (72f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    71bc:	4a4e      	ldr	r2, [pc, #312]	; (72f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    71be:	f44f 7183 	mov.w	r1, #262	; 0x106
    71c2:	484e      	ldr	r0, [pc, #312]	; (72fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    71c4:	f009 fb7c 	bl	108c0 <__assert_func>
    71c8:	f00e ff4b 	bl	16062 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71cc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    71ce:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71d0:	b178      	cbz	r0, 71f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    71d2:	4628      	mov	r0, r5
    71d4:	f00b ffe2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71d8:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    71dc:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    71e0:	f00c faed 	bl	137be <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    71e4:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    71e6:	9802      	ldr	r0, [sp, #8]
    71e8:	f00c f88e 	bl	13308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    71ec:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    71ee:	2700      	movs	r7, #0
    71f0:	e0dd      	b.n	73ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    71f2:	f04f 0900 	mov.w	r9, #0
    71f6:	e7f1      	b.n	71dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71f8:	2000      	movs	r0, #0
    71fa:	e0eb      	b.n	73d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71fc:	2400      	movs	r4, #0
    71fe:	e0f2      	b.n	73e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    7200:	4b3c      	ldr	r3, [pc, #240]	; (72f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    7202:	4a3f      	ldr	r2, [pc, #252]	; (7300 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    7204:	f44f 7183 	mov.w	r1, #262	; 0x106
    7208:	483c      	ldr	r0, [pc, #240]	; (72fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    720a:	f009 fb59 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    720e:	2000      	movs	r0, #0
    7210:	e103      	b.n	741a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7212:	2600      	movs	r6, #0
    7214:	e108      	b.n	7428 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    7216:	4631      	mov	r1, r6
    7218:	483a      	ldr	r0, [pc, #232]	; (7304 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    721a:	f00b ff3a 	bl	13092 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    721e:	2301      	movs	r3, #1
    7220:	461c      	mov	r4, r3
}
    7222:	4620      	mov	r0, r4
    7224:	b00b      	add	sp, #44	; 0x2c
    7226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    722a:	4b32      	ldr	r3, [pc, #200]	; (72f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    722c:	4a36      	ldr	r2, [pc, #216]	; (7308 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    722e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7232:	4832      	ldr	r0, [pc, #200]	; (72fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7234:	f009 fb44 	bl	108c0 <__assert_func>
    7238:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    723a:	4650      	mov	r0, sl
    723c:	f00c fd15 	bl	13c6a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    7240:	2891      	cmp	r0, #145	; 0x91
    7242:	d806      	bhi.n	7252 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    7244:	4b31      	ldr	r3, [pc, #196]	; (730c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7246:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    724a:	4831      	ldr	r0, [pc, #196]	; (7310 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    724c:	f00b ff21 	bl	13092 <_Z11MicroPrintfPKcz>
        return status;
    7250:	e7e7      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7252:	4930      	ldr	r1, [pc, #192]	; (7314 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7254:	e7f9      	b.n	724a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7256:	4631      	mov	r1, r6
    7258:	482f      	ldr	r0, [pc, #188]	; (7318 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    725a:	f00b ff1a 	bl	13092 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    725e:	2301      	movs	r3, #1
    7260:	461c      	mov	r4, r3
    7262:	e7de      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7264:	4620      	mov	r0, r4
    7266:	f00b ff9f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    726a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    726c:	4630      	mov	r0, r6
    726e:	f00b ffa1 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7272:	280e      	cmp	r0, #14
    7274:	d904      	bls.n	7280 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7276:	f106 000e 	add.w	r0, r6, #14
    727a:	f00b ff9b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    727e:	e000      	b.n	7282 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7280:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7282:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7284:	b160      	cbz	r0, 72a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7286:	4630      	mov	r0, r6
    7288:	f00b ff88 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    728c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    728e:	b360      	cbz	r0, 72ea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7290:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7292:	f853 0b04 	ldr.w	r0, [r3], #4
    7296:	9301      	str	r3, [sp, #4]
    7298:	f00a fd61 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    729c:	4682      	mov	sl, r0
    729e:	e131      	b.n	7504 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72a0:	2000      	movs	r0, #0
    72a2:	e7f4      	b.n	728e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72a4:	2000      	movs	r0, #0
    72a6:	e10b      	b.n	74c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72a8:	2300      	movs	r3, #0
    72aa:	9301      	str	r3, [sp, #4]
    72ac:	e113      	b.n	74d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    72ae:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    72b2:	d809      	bhi.n	72c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    72b4:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    72b6:	4b15      	ldr	r3, [pc, #84]	; (730c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    72b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    72bc:	4817      	ldr	r0, [pc, #92]	; (731c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    72be:	f00b fee8 	bl	13092 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    72c2:	2301      	movs	r3, #1
    72c4:	461c      	mov	r4, r3
    72c6:	e7ac      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    72c8:	4912      	ldr	r1, [pc, #72]	; (7314 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    72ca:	e7f7      	b.n	72bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    72cc:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    72d0:	d804      	bhi.n	72dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    72d2:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    72d4:	4a0d      	ldr	r2, [pc, #52]	; (730c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    72d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    72da:	e000      	b.n	72de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    72dc:	490d      	ldr	r1, [pc, #52]	; (7314 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    72de:	4810      	ldr	r0, [pc, #64]	; (7320 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    72e0:	f00b fed7 	bl	13092 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    72e4:	2301      	movs	r3, #1
    72e6:	461c      	mov	r4, r3
    72e8:	e79b      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    72ea:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    72ec:	f04f 0a00 	mov.w	sl, #0
    72f0:	e108      	b.n	7504 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    72f2:	bf00      	nop
    72f4:	0006911c 	.word	0x0006911c
    72f8:	0006926c 	.word	0x0006926c
    72fc:	000691e8 	.word	0x000691e8
    7300:	00069f54 	.word	0x00069f54
    7304:	0006a04c 	.word	0x0006a04c
    7308:	0006a078 	.word	0x0006a078
    730c:	00069c78 	.word	0x00069c78
    7310:	0006a178 	.word	0x0006a178
    7314:	00068948 	.word	0x00068948
    7318:	0006a1a8 	.word	0x0006a1a8
    731c:	0006a1cc 	.word	0x0006a1cc
    7320:	0006a214 	.word	0x0006a214
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7324:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7326:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7328:	2800      	cmp	r0, #0
    732a:	f000 80fb 	beq.w	7524 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    732e:	4630      	mov	r0, r6
    7330:	f00b ff34 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7334:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7336:	aa08      	add	r2, sp, #32
    7338:	4640      	mov	r0, r8
    733a:	f00c fa4c 	bl	137d6 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    733e:	2800      	cmp	r0, #0
    7340:	f040 80ff 	bne.w	7542 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7344:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7348:	4620      	mov	r0, r4
    734a:	f00b ff2d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    734e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7350:	4630      	mov	r0, r6
    7352:	f00b ff2f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7356:	2808      	cmp	r0, #8
    7358:	f240 80e6 	bls.w	7528 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    735c:	f106 0008 	add.w	r0, r6, #8
    7360:	f00b ff28 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7364:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7366:	2800      	cmp	r0, #0
    7368:	f000 80e0 	beq.w	752c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    736c:	4620      	mov	r0, r4
    736e:	f00b ff15 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7372:	1821      	adds	r1, r4, r0
    7374:	aa09      	add	r2, sp, #36	; 0x24
    7376:	4640      	mov	r0, r8
    7378:	f00c fa2d 	bl	137d6 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    737c:	2800      	cmp	r0, #0
    737e:	f040 80e2 	bne.w	7546 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7382:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7386:	9a00      	ldr	r2, [sp, #0]
    7388:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    738c:	1974      	adds	r4, r6, r5
      *node = {};
    738e:	2228      	movs	r2, #40	; 0x28
    7390:	2100      	movs	r1, #0
    7392:	4620      	mov	r0, r4
    7394:	f00e fe8b 	bl	160ae <memset>
      node->inputs = inputs_array;
    7398:	9b08      	ldr	r3, [sp, #32]
    739a:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    739c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    739e:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    73a0:	9b07      	ldr	r3, [sp, #28]
    73a2:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    73a4:	9b01      	ldr	r3, [sp, #4]
    73a6:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    73a8:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    73ac:	3701      	adds	r7, #1
    73ae:	9b03      	ldr	r3, [sp, #12]
    73b0:	429f      	cmp	r7, r3
    73b2:	f080 80bd 	bcs.w	7530 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    73b6:	9c02      	ldr	r4, [sp, #8]
    73b8:	4620      	mov	r0, r4
    73ba:	f00b fef5 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    73be:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    73c0:	4620      	mov	r0, r4
    73c2:	f00b fef7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73c6:	280a      	cmp	r0, #10
    73c8:	f67f af16 	bls.w	71f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    73cc:	f104 000a 	add.w	r0, r4, #10
    73d0:	f00b fef0 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    73d4:	9b02      	ldr	r3, [sp, #8]
    73d6:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73d8:	2800      	cmp	r0, #0
    73da:	f43f af0f 	beq.w	71fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    73de:	4620      	mov	r0, r4
    73e0:	f00b fedc 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    73e4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    73e6:	6820      	ldr	r0, [r4, #0]
    73e8:	f00a fcb9 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    73ec:	4287      	cmp	r7, r0
    73ee:	f4bf af07 	bcs.w	7200 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    73f2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    73f4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    73f8:	4620      	mov	r0, r4
    73fa:	f00b fecf 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    73fe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7400:	4620      	mov	r0, r4
    7402:	f00b fed1 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7406:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7408:	4628      	mov	r0, r5
    740a:	f00b fed3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    740e:	2804      	cmp	r0, #4
    7410:	f67f aefd 	bls.w	720e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    7414:	1d28      	adds	r0, r5, #4
    7416:	f00b fecd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    741a:	2800      	cmp	r0, #0
    741c:	f43f aef9 	beq.w	7212 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    7420:	4420      	add	r0, r4
    7422:	f00b febb 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7426:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7428:	f8d9 0000 	ldr.w	r0, [r9]
    742c:	f00a fc97 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    7430:	42b0      	cmp	r0, r6
    7432:	f67f aef0 	bls.w	7216 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    7436:	f8d9 0000 	ldr.w	r0, [r9]
    743a:	f00a fc90 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    743e:	4286      	cmp	r6, r0
    7440:	f4bf aef3 	bcs.w	722a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7444:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    7448:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    744c:	4650      	mov	r0, sl
    744e:	f00b fea5 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7452:	4482      	add	sl, r0
    7454:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7458:	9a00      	ldr	r2, [sp, #0]
    745a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    745e:	252c      	movs	r5, #44	; 0x2c
    7460:	fb05 f507 	mul.w	r5, r5, r7
    7464:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7466:	3328      	adds	r3, #40	; 0x28
    7468:	f8db 2008 	ldr.w	r2, [fp, #8]
    746c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7470:	4650      	mov	r0, sl
    7472:	f002 ffbd 	bl	a3f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7476:	2800      	cmp	r0, #0
    7478:	f47f aede 	bne.w	7238 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    747c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7480:	9a00      	ldr	r2, [sp, #0]
    7482:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7486:	442b      	add	r3, r5
                                     .registration;
    7488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    748a:	2b00      	cmp	r3, #0
    748c:	f43f aee3 	beq.w	7256 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7490:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    7492:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    7496:	2300      	movs	r3, #0
    7498:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    749a:	f1ba 0f20 	cmp.w	sl, #32
    749e:	f43f aee1 	beq.w	7264 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    74a2:	4620      	mov	r0, r4
    74a4:	f00b fe80 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74a8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    74ac:	4640      	mov	r0, r8
    74ae:	f00b fe81 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74b2:	280e      	cmp	r0, #14
    74b4:	f67f aef6 	bls.w	72a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    74b8:	f108 000e 	add.w	r0, r8, #14
    74bc:	f00b fe7a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    74c0:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74c4:	2800      	cmp	r0, #0
    74c6:	f43f aeef 	beq.w	72a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    74ca:	4640      	mov	r0, r8
    74cc:	f00b fe66 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74d0:	eb08 0300 	add.w	r3, r8, r0
    74d4:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    74d6:	9b01      	ldr	r3, [sp, #4]
    74d8:	2b00      	cmp	r3, #0
    74da:	f47f aee8 	bne.w	72ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    74de:	f8db 0004 	ldr.w	r0, [fp, #4]
    74e2:	6803      	ldr	r3, [r0, #0]
    74e4:	6a1b      	ldr	r3, [r3, #32]
    74e6:	4651      	mov	r1, sl
    74e8:	4798      	blx	r3
        if (parser == nullptr) {
    74ea:	4680      	mov	r8, r0
    74ec:	2800      	cmp	r0, #0
    74ee:	f43f aeed 	beq.w	72cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    74f2:	ab07      	add	r3, sp, #28
    74f4:	9a04      	ldr	r2, [sp, #16]
    74f6:	f8db 1008 	ldr.w	r1, [fp, #8]
    74fa:	4620      	mov	r0, r4
    74fc:	47c0      	blx	r8
    74fe:	b9f0      	cbnz	r0, 753e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    7500:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7504:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7508:	4620      	mov	r0, r4
    750a:	f00b fe4d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    750e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7510:	4630      	mov	r0, r6
    7512:	f00b fe4f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7516:	2806      	cmp	r0, #6
    7518:	f67f af04 	bls.w	7324 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    751c:	1db0      	adds	r0, r6, #6
    751e:	f00b fe49 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7522:	e700      	b.n	7326 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7524:	2100      	movs	r1, #0
    7526:	e706      	b.n	7336 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7528:	2000      	movs	r0, #0
    752a:	e71b      	b.n	7364 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    752c:	2100      	movs	r1, #0
    752e:	e721      	b.n	7374 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7530:	9b05      	ldr	r3, [sp, #20]
    7532:	3301      	adds	r3, #1
    7534:	9305      	str	r3, [sp, #20]
    7536:	e601      	b.n	713c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    7538:	2300      	movs	r3, #0
    753a:	461c      	mov	r4, r3
    753c:	e671      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    753e:	4604      	mov	r4, r0
    7540:	e66f      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7542:	4604      	mov	r4, r0
    7544:	e66d      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7546:	4604      	mov	r4, r0
    7548:	e66b      	b.n	7222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    754a:	bf00      	nop

0000754c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7550:	b083      	sub	sp, #12
    7552:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7554:	6801      	ldr	r1, [r0, #0]
    7556:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7558:	f000 fe60 	bl	821c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    755c:	b170      	cbz	r0, 757c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    755e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7560:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7564:	4630      	mov	r0, r6
    7566:	f00b ff01 	bl	1336c <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    756a:	4628      	mov	r0, r5
    756c:	f7ff fde0 	bl	7130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7570:	4603      	mov	r3, r0
    7572:	b158      	cbz	r0, 758c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7574:	4618      	mov	r0, r3
    7576:	b003      	add	sp, #12
    7578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    757c:	49bc      	ldr	r1, [pc, #752]	; (7870 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    757e:	68a8      	ldr	r0, [r5, #8]
    7580:	f00c fb55 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7584:	2301      	movs	r3, #1
    7586:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    758a:	e7f3      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    758c:	4bb9      	ldr	r3, [pc, #740]	; (7874 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    758e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7590:	2400      	movs	r4, #0
    7592:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    7594:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    7596:	4bb8      	ldr	r3, [pc, #736]	; (7878 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7598:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    759a:	4630      	mov	r0, r6
    759c:	f00b fee8 	bl	13370 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    75a0:	4bb6      	ldr	r3, [pc, #728]	; (787c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    75a2:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    75a4:	4630      	mov	r0, r6
    75a6:	f7ff f9bd 	bl	6924 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    75aa:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    75ac:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    75ae:	4bb4      	ldr	r3, [pc, #720]	; (7880 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    75b0:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    75b2:	462b      	mov	r3, r5
    75b4:	f853 1b8c 	ldr.w	r1, [r3], #140
    75b8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    75ba:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    75bc:	f000 fb90 	bl	7ce0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    75c0:	4603      	mov	r3, r0
    75c2:	2800      	cmp	r0, #0
    75c4:	d1d6      	bne.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    75c6:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    75c8:	6833      	ldr	r3, [r6, #0]
    75ca:	68df      	ldr	r7, [r3, #12]
    75cc:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    75ce:	4620      	mov	r0, r4
    75d0:	f00b fdea 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75d4:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75d8:	4640      	mov	r0, r8
    75da:	f00b fdeb 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75de:	2808      	cmp	r0, #8
    75e0:	d921      	bls.n	7626 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    75e2:	f108 0008 	add.w	r0, r8, #8
    75e6:	f00b fde5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    75ea:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75ec:	b1e8      	cbz	r0, 762a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    75ee:	4620      	mov	r0, r4
    75f0:	f00b fdd4 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75f4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    75f6:	6820      	ldr	r0, [r4, #0]
    75f8:	f00a fbb1 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    75fc:	b1b8      	cbz	r0, 762e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    75fe:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7600:	4620      	mov	r0, r4
    7602:	f00b fdcb 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7606:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7608:	4620      	mov	r0, r4
    760a:	f00b fdcd 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    760e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7612:	4640      	mov	r0, r8
    7614:	f00b fdce 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7618:	2806      	cmp	r0, #6
    761a:	d90f      	bls.n	763c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    761c:	f108 0006 	add.w	r0, r8, #6
    7620:	f00b fdc8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7624:	e00b      	b.n	763e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    7626:	2000      	movs	r0, #0
    7628:	e7df      	b.n	75ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    762a:	2400      	movs	r4, #0
    762c:	e7e3      	b.n	75f6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    762e:	4b95      	ldr	r3, [pc, #596]	; (7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7630:	4a95      	ldr	r2, [pc, #596]	; (7888 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7632:	f44f 7183 	mov.w	r1, #262	; 0x106
    7636:	4895      	ldr	r0, [pc, #596]	; (788c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7638:	f009 f942 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    763c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    763e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7640:	b178      	cbz	r0, 7662 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    7642:	4620      	mov	r0, r4
    7644:	f00b fdaa 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7648:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    764a:	6820      	ldr	r0, [r4, #0]
    764c:	f00a fb87 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7650:	0081      	lsls	r1, r0, #2
    7652:	4630      	mov	r0, r6
    7654:	47b8      	blx	r7
    7656:	4604      	mov	r4, r0
  input_tensors_ =
    7658:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    765c:	b118      	cbz	r0, 7666 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    765e:	2600      	movs	r6, #0
    7660:	e09c      	b.n	779c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7662:	2400      	movs	r4, #0
    7664:	e7f1      	b.n	764a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7666:	68ae      	ldr	r6, [r5, #8]
    7668:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    766a:	4628      	mov	r0, r5
    766c:	f00b fd9c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7670:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7672:	4638      	mov	r0, r7
    7674:	f00b fd9e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7678:	2808      	cmp	r0, #8
    767a:	d91f      	bls.n	76bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    767c:	f107 0008 	add.w	r0, r7, #8
    7680:	f00b fd98 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7684:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7686:	b1d8      	cbz	r0, 76c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7688:	4628      	mov	r0, r5
    768a:	f00b fd87 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    768e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7690:	6828      	ldr	r0, [r5, #0]
    7692:	f00a fb64 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7696:	b1a8      	cbz	r0, 76c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7698:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    769a:	4628      	mov	r0, r5
    769c:	f00b fd7e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76a0:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    76a2:	4628      	mov	r0, r5
    76a4:	f00b fd80 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76a8:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76aa:	4638      	mov	r0, r7
    76ac:	f00b fd82 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76b0:	2806      	cmp	r0, #6
    76b2:	d90e      	bls.n	76d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    76b4:	1db8      	adds	r0, r7, #6
    76b6:	f00b fd7d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    76ba:	e00b      	b.n	76d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    76bc:	2000      	movs	r0, #0
    76be:	e7e1      	b.n	7684 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76c0:	4625      	mov	r5, r4
    76c2:	e7e5      	b.n	7690 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    76c4:	4b6f      	ldr	r3, [pc, #444]	; (7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    76c6:	4a70      	ldr	r2, [pc, #448]	; (7888 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    76c8:	f44f 7183 	mov.w	r1, #262	; 0x106
    76cc:	486f      	ldr	r0, [pc, #444]	; (788c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    76ce:	f009 f8f7 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76d2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    76d4:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76d6:	b118      	cbz	r0, 76e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    76d8:	4628      	mov	r0, r5
    76da:	f00b fd5f 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76de:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    76e0:	6820      	ldr	r0, [r4, #0]
    76e2:	f00a fb3c 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    76e6:	0082      	lsls	r2, r0, #2
    76e8:	4969      	ldr	r1, [pc, #420]	; (7890 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    76ea:	4630      	mov	r0, r6
    76ec:	f00c fa9f 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    76f0:	2301      	movs	r3, #1
    76f2:	e73f      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76f4:	2000      	movs	r0, #0
    76f6:	e05f      	b.n	77b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76f8:	2400      	movs	r4, #0
    76fa:	e064      	b.n	77c6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    76fc:	4b61      	ldr	r3, [pc, #388]	; (7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    76fe:	4a62      	ldr	r2, [pc, #392]	; (7888 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7700:	f44f 7183 	mov.w	r1, #262	; 0x106
    7704:	4861      	ldr	r0, [pc, #388]	; (788c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7706:	f009 f8db 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    770a:	2000      	movs	r0, #0
    770c:	e071      	b.n	77f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    770e:	2400      	movs	r4, #0
    7710:	e076      	b.n	7800 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7712:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7714:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7716:	2800      	cmp	r0, #0
    7718:	f000 808f 	beq.w	783a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    771c:	4620      	mov	r0, r4
    771e:	f00b fd3d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7722:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7724:	6820      	ldr	r0, [r4, #0]
    7726:	f00a fb1a 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    772a:	2800      	cmp	r0, #0
    772c:	f000 8087 	beq.w	783e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7730:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7732:	4620      	mov	r0, r4
    7734:	f00b fd32 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7738:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    773a:	4620      	mov	r0, r4
    773c:	f00b fd34 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7740:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7744:	4658      	mov	r0, fp
    7746:	f00b fd35 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    774a:	2806      	cmp	r0, #6
    774c:	d97e      	bls.n	784c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    774e:	f10b 0006 	add.w	r0, fp, #6
    7752:	f00b fd2f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7756:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7758:	2800      	cmp	r0, #0
    775a:	d079      	beq.n	7850 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    775c:	4620      	mov	r0, r4
    775e:	f00b fd1d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7762:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7764:	6820      	ldr	r0, [r4, #0]
    7766:	f00a fafa 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    776a:	4286      	cmp	r6, r0
    776c:	d272      	bcs.n	7854 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    776e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7770:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7774:	f00b fd17 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7778:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    777a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    777e:	2200      	movs	r2, #0
    7780:	9200      	str	r2, [sp, #0]
    7782:	4652      	mov	r2, sl
    7784:	4639      	mov	r1, r7
    7786:	4640      	mov	r0, r8
    7788:	47c8      	blx	r9
    778a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    778e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    7792:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7796:	2b00      	cmp	r3, #0
    7798:	d063      	beq.n	7862 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    779a:	3601      	adds	r6, #1
    779c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    779e:	4620      	mov	r0, r4
    77a0:	f00b fd02 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77a4:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77a6:	4638      	mov	r0, r7
    77a8:	f00b fd04 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77ac:	2808      	cmp	r0, #8
    77ae:	d9a1      	bls.n	76f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    77b0:	f107 0008 	add.w	r0, r7, #8
    77b4:	f00b fcfe 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    77b8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77ba:	2800      	cmp	r0, #0
    77bc:	d09c      	beq.n	76f8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    77be:	4620      	mov	r0, r4
    77c0:	f00b fcec 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77c4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77c6:	6820      	ldr	r0, [r4, #0]
    77c8:	f00a fac9 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    77cc:	2800      	cmp	r0, #0
    77ce:	d095      	beq.n	76fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    77d0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    77d2:	4620      	mov	r0, r4
    77d4:	f00b fce2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77d8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    77da:	4620      	mov	r0, r4
    77dc:	f00b fce4 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77e0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77e2:	4638      	mov	r0, r7
    77e4:	f00b fce6 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77e8:	2806      	cmp	r0, #6
    77ea:	d98e      	bls.n	770a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    77ec:	1db8      	adds	r0, r7, #6
    77ee:	f00b fce1 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    77f2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77f4:	2800      	cmp	r0, #0
    77f6:	d08a      	beq.n	770e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    77f8:	4620      	mov	r0, r4
    77fa:	f00b fccf 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77fe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7800:	6820      	ldr	r0, [r4, #0]
    7802:	f00a faac 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7806:	4286      	cmp	r6, r0
    7808:	d248      	bcs.n	789c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    780a:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    780e:	f8d8 3000 	ldr.w	r3, [r8]
    7812:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7816:	682f      	ldr	r7, [r5, #0]
    7818:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    781c:	4638      	mov	r0, r7
    781e:	f00b fcc3 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7822:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7824:	4620      	mov	r0, r4
    7826:	f00b fcc5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    782a:	2808      	cmp	r0, #8
    782c:	f67f af71 	bls.w	7712 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    7830:	f104 0008 	add.w	r0, r4, #8
    7834:	f00b fcbe 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7838:	e76c      	b.n	7714 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    783a:	2400      	movs	r4, #0
    783c:	e772      	b.n	7724 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    783e:	4b11      	ldr	r3, [pc, #68]	; (7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7840:	4a11      	ldr	r2, [pc, #68]	; (7888 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7842:	f44f 7183 	mov.w	r1, #262	; 0x106
    7846:	4811      	ldr	r0, [pc, #68]	; (788c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7848:	f009 f83a 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    784c:	2000      	movs	r0, #0
    784e:	e782      	b.n	7756 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7850:	2400      	movs	r4, #0
    7852:	e787      	b.n	7764 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7854:	4b0b      	ldr	r3, [pc, #44]	; (7884 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7856:	4a0f      	ldr	r2, [pc, #60]	; (7894 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7858:	f44f 7183 	mov.w	r1, #262	; 0x106
    785c:	480b      	ldr	r0, [pc, #44]	; (788c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    785e:	f009 f82f 	bl	108c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7862:	4632      	mov	r2, r6
    7864:	490c      	ldr	r1, [pc, #48]	; (7898 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7866:	68a8      	ldr	r0, [r5, #8]
    7868:	f00c f9e1 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    786c:	2301      	movs	r3, #1
    786e:	e681      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7870:	0006a234 	.word	0x0006a234
    7874:	0001346b 	.word	0x0001346b
    7878:	000134bb 	.word	0x000134bb
    787c:	000134c5 	.word	0x000134c5
    7880:	00013479 	.word	0x00013479
    7884:	0006911c 	.word	0x0006911c
    7888:	0006926c 	.word	0x0006926c
    788c:	000691e8 	.word	0x000691e8
    7890:	0006a258 	.word	0x0006a258
    7894:	00069128 	.word	0x00069128
    7898:	0006a2a4 	.word	0x0006a2a4
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    789c:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    789e:	6833      	ldr	r3, [r6, #0]
    78a0:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    78a2:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    78a4:	4620      	mov	r0, r4
    78a6:	f00b fc7f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78aa:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78ae:	4640      	mov	r0, r8
    78b0:	f00b fc80 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78b4:	2808      	cmp	r0, #8
    78b6:	d904      	bls.n	78c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    78b8:	f108 0008 	add.w	r0, r8, #8
    78bc:	f00b fc7a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    78c0:	e000      	b.n	78c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    78c2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    78c4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78c6:	b360      	cbz	r0, 7922 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    78c8:	4620      	mov	r0, r4
    78ca:	f00b fc67 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78ce:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78d0:	6820      	ldr	r0, [r4, #0]
    78d2:	f00a fa44 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78d6:	b330      	cbz	r0, 7926 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78d8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78da:	4620      	mov	r0, r4
    78dc:	f00b fc5e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78e0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    78e2:	4620      	mov	r0, r4
    78e4:	f00b fc60 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78e8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78ec:	4640      	mov	r0, r8
    78ee:	f00b fc61 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78f2:	2808      	cmp	r0, #8
    78f4:	d91e      	bls.n	7934 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    78f6:	f108 0008 	add.w	r0, r8, #8
    78fa:	f00b fc5b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78fe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7900:	b1d0      	cbz	r0, 7938 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7902:	4620      	mov	r0, r4
    7904:	f00b fc4a 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7908:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    790a:	6820      	ldr	r0, [r4, #0]
    790c:	f00a fa27 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7910:	0081      	lsls	r1, r0, #2
    7912:	4630      	mov	r0, r6
    7914:	47b8      	blx	r7
    7916:	4604      	mov	r4, r0
  output_tensors_ =
    7918:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    791c:	b170      	cbz	r0, 793c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    791e:	2600      	movs	r6, #0
    7920:	e0c6      	b.n	7ab0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7922:	2400      	movs	r4, #0
    7924:	e7d4      	b.n	78d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7926:	4b8f      	ldr	r3, [pc, #572]	; (7b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7928:	4a8f      	ldr	r2, [pc, #572]	; (7b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    792a:	f44f 7183 	mov.w	r1, #262	; 0x106
    792e:	488f      	ldr	r0, [pc, #572]	; (7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7930:	f008 ffc6 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7934:	2000      	movs	r0, #0
    7936:	e7e2      	b.n	78fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7938:	2400      	movs	r4, #0
    793a:	e7e6      	b.n	790a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    793c:	68ae      	ldr	r6, [r5, #8]
    793e:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7940:	4628      	mov	r0, r5
    7942:	f00b fc31 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7946:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7948:	4638      	mov	r0, r7
    794a:	f00b fc33 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    794e:	2808      	cmp	r0, #8
    7950:	d920      	bls.n	7994 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7952:	f107 0008 	add.w	r0, r7, #8
    7956:	f00b fc2d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    795a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    795c:	b1e0      	cbz	r0, 7998 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    795e:	4628      	mov	r0, r5
    7960:	f00b fc1c 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7964:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7966:	6828      	ldr	r0, [r5, #0]
    7968:	f00a f9f9 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    796c:	b1b0      	cbz	r0, 799c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    796e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7970:	4628      	mov	r0, r5
    7972:	f00b fc13 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7976:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7978:	4628      	mov	r0, r5
    797a:	f00b fc15 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    797e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7980:	4638      	mov	r0, r7
    7982:	f00b fc17 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7986:	2808      	cmp	r0, #8
    7988:	d90f      	bls.n	79aa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    798a:	f107 0008 	add.w	r0, r7, #8
    798e:	f00b fc11 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7992:	e00b      	b.n	79ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    7994:	2000      	movs	r0, #0
    7996:	e7e0      	b.n	795a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7998:	4625      	mov	r5, r4
    799a:	e7e4      	b.n	7966 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    799c:	4b71      	ldr	r3, [pc, #452]	; (7b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    799e:	4a72      	ldr	r2, [pc, #456]	; (7b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    79a0:	f44f 7183 	mov.w	r1, #262	; 0x106
    79a4:	4871      	ldr	r0, [pc, #452]	; (7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    79a6:	f008 ff8b 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79aa:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    79ac:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79ae:	b118      	cbz	r0, 79b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    79b0:	4628      	mov	r0, r5
    79b2:	f00b fbf3 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79b6:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79b8:	6820      	ldr	r0, [r4, #0]
    79ba:	f00a f9d0 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    79be:	0082      	lsls	r2, r0, #2
    79c0:	496b      	ldr	r1, [pc, #428]	; (7b70 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    79c2:	4630      	mov	r0, r6
    79c4:	f00c f933 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    79c8:	2301      	movs	r3, #1
    79ca:	e5d3      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79cc:	2000      	movs	r0, #0
    79ce:	e07d      	b.n	7acc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79d0:	2400      	movs	r4, #0
    79d2:	e083      	b.n	7adc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    79d4:	4b63      	ldr	r3, [pc, #396]	; (7b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    79d6:	4a64      	ldr	r2, [pc, #400]	; (7b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    79d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    79dc:	4863      	ldr	r0, [pc, #396]	; (7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    79de:	f008 ff6f 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79e2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    79e4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79e6:	2800      	cmp	r0, #0
    79e8:	f000 8092 	beq.w	7b10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    79ec:	4620      	mov	r0, r4
    79ee:	f00b fbd5 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79f2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79f4:	6820      	ldr	r0, [r4, #0]
    79f6:	f00a f9b2 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    79fa:	4286      	cmp	r6, r0
    79fc:	f080 80a7 	bcs.w	7b4e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7a00:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7a04:	f8d8 3000 	ldr.w	r3, [r8]
    7a08:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7a0c:	682f      	ldr	r7, [r5, #0]
    7a0e:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7a12:	4638      	mov	r0, r7
    7a14:	f00b fbc8 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a18:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a1a:	4620      	mov	r0, r4
    7a1c:	f00b fbca 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a20:	2808      	cmp	r0, #8
    7a22:	d977      	bls.n	7b14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7a24:	f104 0008 	add.w	r0, r4, #8
    7a28:	f00b fbc4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7a2c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a2e:	2800      	cmp	r0, #0
    7a30:	d072      	beq.n	7b18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7a32:	4620      	mov	r0, r4
    7a34:	f00b fbb2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a38:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a3a:	6820      	ldr	r0, [r4, #0]
    7a3c:	f00a f98f 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a40:	2800      	cmp	r0, #0
    7a42:	d06b      	beq.n	7b1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a44:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a46:	4620      	mov	r0, r4
    7a48:	f00b fba8 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a4c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7a4e:	4620      	mov	r0, r4
    7a50:	f00b fbaa 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a54:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a58:	4658      	mov	r0, fp
    7a5a:	f00b fbab 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a5e:	2808      	cmp	r0, #8
    7a60:	d963      	bls.n	7b2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7a62:	f10b 0008 	add.w	r0, fp, #8
    7a66:	f00b fba5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7a6a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a6c:	2800      	cmp	r0, #0
    7a6e:	d05e      	beq.n	7b2e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7a70:	4620      	mov	r0, r4
    7a72:	f00b fb93 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a76:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a78:	6820      	ldr	r0, [r4, #0]
    7a7a:	f00a f970 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a7e:	4286      	cmp	r6, r0
    7a80:	d257      	bcs.n	7b32 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a82:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7a84:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7a88:	f00b fb8d 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7a8c:	4603      	mov	r3, r0
    7a8e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    7a92:	2200      	movs	r2, #0
    7a94:	9200      	str	r2, [sp, #0]
    7a96:	4652      	mov	r2, sl
    7a98:	4639      	mov	r1, r7
    7a9a:	4640      	mov	r0, r8
    7a9c:	47c8      	blx	r9
    7a9e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    7aa2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7aa6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d048      	beq.n	7b40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7aae:	3601      	adds	r6, #1
    7ab0:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7ab2:	4620      	mov	r0, r4
    7ab4:	f00b fb78 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ab8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7aba:	4638      	mov	r0, r7
    7abc:	f00b fb7a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ac0:	2808      	cmp	r0, #8
    7ac2:	d983      	bls.n	79cc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    7ac4:	f107 0008 	add.w	r0, r7, #8
    7ac8:	f00b fb74 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7acc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ace:	2800      	cmp	r0, #0
    7ad0:	f43f af7e 	beq.w	79d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    7ad4:	4620      	mov	r0, r4
    7ad6:	f00b fb61 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ada:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7adc:	6820      	ldr	r0, [r4, #0]
    7ade:	f00a f93e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ae2:	2800      	cmp	r0, #0
    7ae4:	f43f af76 	beq.w	79d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7ae8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7aea:	4620      	mov	r0, r4
    7aec:	f00b fb56 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7af0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7af2:	4620      	mov	r0, r4
    7af4:	f00b fb58 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7af8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7afa:	4638      	mov	r0, r7
    7afc:	f00b fb5a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b00:	2808      	cmp	r0, #8
    7b02:	f67f af6e 	bls.w	79e2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7b06:	f107 0008 	add.w	r0, r7, #8
    7b0a:	f00b fb53 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7b0e:	e769      	b.n	79e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b10:	2400      	movs	r4, #0
    7b12:	e76f      	b.n	79f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b14:	2000      	movs	r0, #0
    7b16:	e789      	b.n	7a2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b18:	2400      	movs	r4, #0
    7b1a:	e78e      	b.n	7a3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    7b1c:	4b11      	ldr	r3, [pc, #68]	; (7b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b1e:	4a12      	ldr	r2, [pc, #72]	; (7b68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7b20:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b24:	4811      	ldr	r0, [pc, #68]	; (7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b26:	f008 fecb 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b2a:	2000      	movs	r0, #0
    7b2c:	e79d      	b.n	7a6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b2e:	2400      	movs	r4, #0
    7b30:	e7a2      	b.n	7a78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7b32:	4b0c      	ldr	r3, [pc, #48]	; (7b64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7b34:	4a0f      	ldr	r2, [pc, #60]	; (7b74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7b36:	f44f 7183 	mov.w	r1, #262	; 0x106
    7b3a:	480c      	ldr	r0, [pc, #48]	; (7b6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7b3c:	f008 fec0 	bl	108c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7b40:	4632      	mov	r2, r6
    7b42:	490d      	ldr	r1, [pc, #52]	; (7b78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7b44:	68a8      	ldr	r0, [r5, #8]
    7b46:	f00c f872 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7b4a:	2301      	movs	r3, #1
    7b4c:	e512      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    7b4e:	4628      	mov	r0, r5
    7b50:	f00b fd11 	bl	13576 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7b54:	4603      	mov	r3, r0
    7b56:	2800      	cmp	r0, #0
    7b58:	f47f ad0c 	bne.w	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7b5c:	2201      	movs	r2, #1
    7b5e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7b62:	e507      	b.n	7574 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7b64:	0006911c 	.word	0x0006911c
    7b68:	0006926c 	.word	0x0006926c
    7b6c:	000691e8 	.word	0x000691e8
    7b70:	0006a2cc 	.word	0x0006a2cc
    7b74:	00069128 	.word	0x00069128
    7b78:	0006a318 	.word	0x0006a318

00007b7c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7b7c:	b510      	push	{r4, lr}
    7b7e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7b80:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7b84:	b95b      	cbnz	r3, 7b9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7b86:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7b8a:	b913      	cbnz	r3, 7b92 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7b8c:	f7ff fcde 	bl	754c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7b90:	b920      	cbnz	r0, 7b9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    7b92:	2100      	movs	r1, #0
    7b94:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7b98:	f7fe ff04 	bl	69a4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7b9c:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7b9e:	4903      	ldr	r1, [pc, #12]	; (7bac <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7ba0:	6880      	ldr	r0, [r0, #8]
    7ba2:	f00c f844 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7ba6:	2001      	movs	r0, #1
    7ba8:	e7f8      	b.n	7b9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7baa:	bf00      	nop
    7bac:	0006a340 	.word	0x0006a340

00007bb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7bb0:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    7bb2:	4c05      	ldr	r4, [pc, #20]	; (7bc8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    7bb4:	6004      	str	r4, [r0, #0]
    7bb6:	6041      	str	r1, [r0, #4]
    7bb8:	60c2      	str	r2, [r0, #12]
    7bba:	2200      	movs	r2, #0
    7bbc:	7402      	strb	r2, [r0, #16]
    7bbe:	6142      	str	r2, [r0, #20]
    7bc0:	6182      	str	r2, [r0, #24]
    7bc2:	bc10      	pop	{r4}
    7bc4:	4770      	bx	lr
    7bc6:	bf00      	nop
    7bc8:	0006aa8c 	.word	0x0006aa8c

00007bcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    7bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bce:	4605      	mov	r5, r0
    7bd0:	460f      	mov	r7, r1
    7bd2:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    7bd4:	f00b fdcc 	bl	13770 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7bd8:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    7bda:	4613      	mov	r3, r2
    7bdc:	e000      	b.n	7be0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7bde:	3201      	adds	r2, #1
    7be0:	696c      	ldr	r4, [r5, #20]
    7be2:	4294      	cmp	r4, r2
    7be4:	d907      	bls.n	7bf6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7be6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    7bea:	6864      	ldr	r4, [r4, #4]
    7bec:	f1b4 3fff 	cmp.w	r4, #4294967295
    7bf0:	d1f5      	bne.n	7bde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7bf2:	3301      	adds	r3, #1
    7bf4:	e7f3      	b.n	7bde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7bf6:	2b0b      	cmp	r3, #11
    7bf8:	d80d      	bhi.n	7c16 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7bfa:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7bfe:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7c02:	f04f 32ff 	mov.w	r2, #4294967295
    7c06:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7c08:	696b      	ldr	r3, [r5, #20]
    7c0a:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7c0c:	696b      	ldr	r3, [r5, #20]
    7c0e:	3301      	adds	r3, #1
    7c10:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7c12:	2000      	movs	r0, #0
}
    7c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7c16:	220c      	movs	r2, #12
    7c18:	4902      	ldr	r1, [pc, #8]	; (7c24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7c1a:	68e8      	ldr	r0, [r5, #12]
    7c1c:	f00c f807 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7c20:	2001      	movs	r0, #1
    7c22:	e7f7      	b.n	7c14 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7c24:	0006a370 	.word	0x0006a370

00007c28 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7c2c:	b122      	cbz	r2, 7c38 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7c2e:	4607      	mov	r7, r0
    7c30:	460e      	mov	r6, r1
    7c32:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7c34:	2500      	movs	r5, #0
    7c36:	e029      	b.n	7c8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7c38:	f00e fa13 	bl	16062 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c3c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7c3e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c40:	b390      	cbz	r0, 7ca8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7c42:	4620      	mov	r0, r4
    7c44:	f00b faaa 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7c48:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7c4a:	6820      	ldr	r0, [r4, #0]
    7c4c:	f00a f887 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7c50:	4285      	cmp	r5, r0
    7c52:	d23a      	bcs.n	7cca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7c54:	6820      	ldr	r0, [r4, #0]
    7c56:	f00a f882 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7c5a:	4285      	cmp	r5, r0
    7c5c:	d226      	bcs.n	7cac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7c5e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7c60:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7c64:	4620      	mov	r0, r4
    7c66:	f00b fa99 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7c6a:	1820      	adds	r0, r4, r0
    7c6c:	d025      	beq.n	7cba <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7c6e:	f00b fb4b 	bl	13308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7c72:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7c74:	681a      	ldr	r2, [r3, #0]
    7c76:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7c78:	2204      	movs	r2, #4
    7c7a:	212c      	movs	r1, #44	; 0x2c
    7c7c:	fb01 f100 	mul.w	r1, r1, r0
    7c80:	4618      	mov	r0, r3
    7c82:	47a0      	blx	r4
    if (output == nullptr) {
    7c84:	b1d8      	cbz	r0, 7cbe <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7c86:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7c8a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7c8c:	4630      	mov	r0, r6
    7c8e:	f00b fa8b 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7c92:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7c94:	4620      	mov	r0, r4
    7c96:	f00b fa8d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c9a:	2808      	cmp	r0, #8
    7c9c:	d9ce      	bls.n	7c3c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7c9e:	f104 0008 	add.w	r0, r4, #8
    7ca2:	f00b fa87 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7ca6:	e7ca      	b.n	7c3e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ca8:	2400      	movs	r4, #0
    7caa:	e7ce      	b.n	7c4a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7cac:	4b08      	ldr	r3, [pc, #32]	; (7cd0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7cae:	4a09      	ldr	r2, [pc, #36]	; (7cd4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7cb0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7cb4:	4808      	ldr	r0, [pc, #32]	; (7cd8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7cb6:	f008 fe03 	bl	108c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7cba:	f00e f9d2 	bl	16062 <abort>
      TF_LITE_REPORT_ERROR(
    7cbe:	4907      	ldr	r1, [pc, #28]	; (7cdc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7cc0:	68f8      	ldr	r0, [r7, #12]
    7cc2:	f00b ffb4 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7cc6:	2001      	movs	r0, #1
    7cc8:	e000      	b.n	7ccc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7cca:	2000      	movs	r0, #0
}
    7ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cd0:	0006911c 	.word	0x0006911c
    7cd4:	0006926c 	.word	0x0006926c
    7cd8:	000691e8 	.word	0x000691e8
    7cdc:	0006a3a8 	.word	0x0006a3a8

00007ce0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ce4:	b083      	sub	sp, #12
    7ce6:	4605      	mov	r5, r0
    7ce8:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7cea:	7c03      	ldrb	r3, [r0, #16]
    7cec:	b11b      	cbz	r3, 7cf6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7cee:	460f      	mov	r7, r1
    7cf0:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7cf2:	2600      	movs	r6, #0
    7cf4:	e043      	b.n	7d7e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7cf6:	4930      	ldr	r1, [pc, #192]	; (7db8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7cf8:	68c0      	ldr	r0, [r0, #12]
    7cfa:	f00b ff98 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7cfe:	2301      	movs	r3, #1
    7d00:	e055      	b.n	7dae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d02:	f104 0008 	add.w	r0, r4, #8
    7d06:	f00b fa55 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7d0a:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d0c:	2800      	cmp	r0, #0
    7d0e:	d041      	beq.n	7d94 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7d10:	4620      	mov	r0, r4
    7d12:	f00b fa43 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d16:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d18:	6820      	ldr	r0, [r4, #0]
    7d1a:	f00a f820 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7d1e:	4286      	cmp	r6, r0
    7d20:	d243      	bcs.n	7daa <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7d22:	6820      	ldr	r0, [r4, #0]
    7d24:	f00a f81b 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d28:	4286      	cmp	r6, r0
    7d2a:	d235      	bcs.n	7d98 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d2c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7d2e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d32:	4620      	mov	r0, r4
    7d34:	f00b fa32 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7d38:	1824      	adds	r4, r4, r0
    7d3a:	d034      	beq.n	7da6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7d3c:	682b      	ldr	r3, [r5, #0]
    7d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7d40:	696a      	ldr	r2, [r5, #20]
    7d42:	4641      	mov	r1, r8
    7d44:	4628      	mov	r0, r5
    7d46:	4798      	blx	r3
    7d48:	4603      	mov	r3, r0
    7d4a:	bb80      	cbnz	r0, 7dae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7d4c:	682b      	ldr	r3, [r5, #0]
    7d4e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7d52:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7d56:	9600      	str	r6, [sp, #0]
    7d58:	f8d8 3000 	ldr.w	r3, [r8]
    7d5c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7d60:	4639      	mov	r1, r7
    7d62:	4628      	mov	r0, r5
    7d64:	47d8      	blx	fp
    7d66:	4603      	mov	r3, r0
    7d68:	bb08      	cbnz	r0, 7dae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7d6a:	682b      	ldr	r3, [r5, #0]
    7d6c:	6a1b      	ldr	r3, [r3, #32]
    7d6e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7d72:	4621      	mov	r1, r4
    7d74:	4628      	mov	r0, r5
    7d76:	4798      	blx	r3
    7d78:	4603      	mov	r3, r0
    7d7a:	b9c0      	cbnz	r0, 7dae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7d7c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7d7e:	4638      	mov	r0, r7
    7d80:	f00b fa12 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d84:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d86:	4620      	mov	r0, r4
    7d88:	f00b fa14 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d8c:	2808      	cmp	r0, #8
    7d8e:	d8b8      	bhi.n	7d02 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7d90:	2000      	movs	r0, #0
    7d92:	e7ba      	b.n	7d0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d94:	2400      	movs	r4, #0
    7d96:	e7bf      	b.n	7d18 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7d98:	4b08      	ldr	r3, [pc, #32]	; (7dbc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7d9a:	4a09      	ldr	r2, [pc, #36]	; (7dc0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7d9c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7da0:	4808      	ldr	r0, [pc, #32]	; (7dc4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7da2:	f008 fd8d 	bl	108c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7da6:	f00e f95c 	bl	16062 <abort>
  model_is_allocating_ = false;
    7daa:	2300      	movs	r3, #0
    7dac:	742b      	strb	r3, [r5, #16]
}
    7dae:	4618      	mov	r0, r3
    7db0:	b003      	add	sp, #12
    7db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7db6:	bf00      	nop
    7db8:	0006a3e0 	.word	0x0006a3e0
    7dbc:	0006911c 	.word	0x0006911c
    7dc0:	0006926c 	.word	0x0006926c
    7dc4:	000691e8 	.word	0x000691e8

00007dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7dc8:	b570      	push	{r4, r5, r6, lr}
    7dca:	4606      	mov	r6, r0
    7dcc:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7dce:	f00b f9eb 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7dd2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7dd4:	4620      	mov	r0, r4
    7dd6:	f00b f9ed 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7dda:	2808      	cmp	r0, #8
    7ddc:	d923      	bls.n	7e26 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7dde:	f104 0008 	add.w	r0, r4, #8
    7de2:	f00b f9e7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7de6:	b300      	cbz	r0, 7e2a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7de8:	4430      	add	r0, r6
    7dea:	f00b f9d7 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7dee:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7df0:	6828      	ldr	r0, [r5, #0]
    7df2:	f009 ffb4 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7df6:	42b0      	cmp	r0, r6
    7df8:	d919      	bls.n	7e2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7dfa:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7dfc:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e00:	4620      	mov	r0, r4
    7e02:	f00b f9cb 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7e06:	1824      	adds	r4, r4, r0
    7e08:	d025      	beq.n	7e56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7e0a:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7e0c:	4620      	mov	r0, r4
    7e0e:	f00b f9cb 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e12:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e14:	4620      	mov	r0, r4
    7e16:	f00b f9cd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e1a:	2804      	cmp	r0, #4
    7e1c:	d90e      	bls.n	7e3c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7e1e:	1d20      	adds	r0, r4, #4
    7e20:	f00b f9c8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7e24:	e00b      	b.n	7e3e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7e26:	2000      	movs	r0, #0
    7e28:	e7dd      	b.n	7de6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7e2a:	2600      	movs	r6, #0
    7e2c:	e7e0      	b.n	7df0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7e2e:	4b0d      	ldr	r3, [pc, #52]	; (7e64 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7e30:	4a0d      	ldr	r2, [pc, #52]	; (7e68 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7e32:	f44f 7183 	mov.w	r1, #262	; 0x106
    7e36:	480d      	ldr	r0, [pc, #52]	; (7e6c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7e38:	f008 fd42 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e3c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7e3e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e40:	b158      	cbz	r0, 7e5a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7e42:	4628      	mov	r0, r5
    7e44:	f00b f9aa 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e48:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7e4a:	b124      	cbz	r4, 7e56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    7e4c:	6820      	ldr	r0, [r4, #0]
    7e4e:	f009 ff86 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7e52:	b120      	cbz	r0, 7e5e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e54:	3404      	adds	r4, #4
}
    7e56:	4620      	mov	r0, r4
    7e58:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e5a:	2400      	movs	r4, #0
    7e5c:	e7f5      	b.n	7e4a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    7e5e:	2400      	movs	r4, #0
  return out_buffer;
    7e60:	e7f9      	b.n	7e56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7e62:	bf00      	nop
    7e64:	0006911c 	.word	0x0006911c
    7e68:	0006a42c 	.word	0x0006a42c
    7e6c:	000691e8 	.word	0x000691e8

00007e70 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e74:	b082      	sub	sp, #8
    7e76:	4606      	mov	r6, r0
    7e78:	460f      	mov	r7, r1
    7e7a:	4690      	mov	r8, r2
    7e7c:	461d      	mov	r5, r3
    7e7e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7e82:	4608      	mov	r0, r1
    7e84:	f00b f990 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e88:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e8a:	4620      	mov	r0, r4
    7e8c:	f00b f992 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e90:	2808      	cmp	r0, #8
    7e92:	d93e      	bls.n	7f12 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7e94:	f104 0008 	add.w	r0, r4, #8
    7e98:	f00b f98c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7e9c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d039      	beq.n	7f16 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7ea2:	4620      	mov	r0, r4
    7ea4:	f00b f97a 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ea8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7eaa:	6820      	ldr	r0, [r4, #0]
    7eac:	f009 ff57 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7eb0:	4581      	cmp	r9, r0
    7eb2:	d232      	bcs.n	7f1a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7eb4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7eb6:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7eba:	4620      	mov	r0, r4
    7ebc:	f00b f96e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7ec0:	42c4      	cmn	r4, r0
    7ec2:	d031      	beq.n	7f28 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    7ec4:	6833      	ldr	r3, [r6, #0]
    7ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ec8:	4630      	mov	r0, r6
    7eca:	4798      	blx	r3
    7ecc:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    7ece:	6833      	ldr	r3, [r6, #0]
    7ed0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    7ed4:	2300      	movs	r3, #0
    7ed6:	9301      	str	r3, [sp, #4]
    7ed8:	f8cd 9000 	str.w	r9, [sp]
    7edc:	462b      	mov	r3, r5
    7ede:	4602      	mov	r2, r0
    7ee0:	4639      	mov	r1, r7
    7ee2:	4630      	mov	r0, r6
    7ee4:	47d0      	blx	sl
    7ee6:	bb08      	cbnz	r0, 7f2c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7ee8:	f1b8 0f00 	cmp.w	r8, #0
    7eec:	d00d      	beq.n	7f0a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7eee:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7ef2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7ef6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7efa:	00ad      	lsls	r5, r5, #2
    7efc:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7efe:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7f04:	441d      	add	r5, r3
    7f06:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7f08:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7f0a:	4620      	mov	r0, r4
    7f0c:	b002      	add	sp, #8
    7f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f12:	2000      	movs	r0, #0
    7f14:	e7c2      	b.n	7e9c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f16:	2400      	movs	r4, #0
    7f18:	e7c7      	b.n	7eaa <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7f1a:	4b07      	ldr	r3, [pc, #28]	; (7f38 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xc8>)
    7f1c:	4a07      	ldr	r2, [pc, #28]	; (7f3c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    7f1e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f22:	4807      	ldr	r0, [pc, #28]	; (7f40 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    7f24:	f008 fccc 	bl	108c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    7f28:	f00e f89b 	bl	16062 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7f2c:	4905      	ldr	r1, [pc, #20]	; (7f44 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    7f2e:	68f0      	ldr	r0, [r6, #12]
    7f30:	f00b fe7d 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7f34:	2400      	movs	r4, #0
    7f36:	e7e8      	b.n	7f0a <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    7f38:	0006911c 	.word	0x0006911c
    7f3c:	0006926c 	.word	0x0006926c
    7f40:	000691e8 	.word	0x000691e8
    7f44:	0006a520 	.word	0x0006a520

00007f48 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f4c:	b082      	sub	sp, #8
    7f4e:	4680      	mov	r8, r0
    7f50:	460e      	mov	r6, r1
    7f52:	4617      	mov	r7, r2
    7f54:	461d      	mov	r5, r3
    7f56:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7f5a:	4608      	mov	r0, r1
    7f5c:	f00b f924 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f60:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f62:	4620      	mov	r0, r4
    7f64:	f00b f926 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f68:	2808      	cmp	r0, #8
    7f6a:	d93e      	bls.n	7fea <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    7f6c:	f104 0008 	add.w	r0, r4, #8
    7f70:	f00b f920 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f74:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f76:	2800      	cmp	r0, #0
    7f78:	d039      	beq.n	7fee <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    7f7a:	4620      	mov	r0, r4
    7f7c:	f00b f90e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f80:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7f82:	6820      	ldr	r0, [r4, #0]
    7f84:	f009 feeb 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7f88:	4581      	cmp	r9, r0
    7f8a:	d232      	bcs.n	7ff2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f8c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7f8e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7f92:	4620      	mov	r0, r4
    7f94:	f00b f902 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7f98:	42c4      	cmn	r4, r0
    7f9a:	d031      	beq.n	8000 <CONFIG_MAIN_STACK_SIZE>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7f9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    7fa0:	6803      	ldr	r3, [r0, #0]
    7fa2:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    7fa4:	2204      	movs	r2, #4
    7fa6:	2140      	movs	r1, #64	; 0x40
    7fa8:	4798      	blx	r3
    7faa:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    7fac:	f8d8 3000 	ldr.w	r3, [r8]
    7fb0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    7fb4:	2301      	movs	r3, #1
    7fb6:	9301      	str	r3, [sp, #4]
    7fb8:	f8cd 9000 	str.w	r9, [sp]
    7fbc:	462b      	mov	r3, r5
    7fbe:	4602      	mov	r2, r0
    7fc0:	4631      	mov	r1, r6
    7fc2:	4640      	mov	r0, r8
    7fc4:	47d0      	blx	sl
    7fc6:	b9e8      	cbnz	r0, 8004 <CONFIG_MAIN_STACK_SIZE+0x4>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7fc8:	b15f      	cbz	r7, 7fe2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7fca:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7fd4:	00ad      	lsls	r5, r5, #2
    7fd6:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7fd8:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	441d      	add	r5, r3
    7fde:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    7fe0:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    7fe2:	4620      	mov	r0, r4
    7fe4:	b002      	add	sp, #8
    7fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7fea:	2000      	movs	r0, #0
    7fec:	e7c2      	b.n	7f74 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7fee:	2400      	movs	r4, #0
    7ff0:	e7c7      	b.n	7f82 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    7ff2:	4b08      	ldr	r3, [pc, #32]	; (8014 <CONFIG_MAIN_STACK_SIZE+0x14>)
    7ff4:	4a08      	ldr	r2, [pc, #32]	; (8018 <CONFIG_MAIN_STACK_SIZE+0x18>)
    7ff6:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ffa:	4808      	ldr	r0, [pc, #32]	; (801c <CONFIG_MAIN_STACK_SIZE+0x1c>)
    7ffc:	f008 fc60 	bl	108c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    8000:	f00e f82f 	bl	16062 <abort>
    TF_LITE_REPORT_ERROR(
    8004:	4906      	ldr	r1, [pc, #24]	; (8020 <CONFIG_MAIN_STACK_SIZE+0x20>)
    8006:	f8d8 000c 	ldr.w	r0, [r8, #12]
    800a:	f00b fe10 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    800e:	2400      	movs	r4, #0
    8010:	e7e7      	b.n	7fe2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    8012:	bf00      	nop
    8014:	0006911c 	.word	0x0006911c
    8018:	0006926c 	.word	0x0006926c
    801c:	000691e8 	.word	0x000691e8
    8020:	0006a56c 	.word	0x0006a56c

00008024 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    8024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8028:	4607      	mov	r7, r0
    802a:	460c      	mov	r4, r1
    802c:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    802e:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    8030:	4608      	mov	r0, r1
    8032:	f00b f8b9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8036:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8038:	4628      	mov	r0, r5
    803a:	f00b f8bb 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    803e:	2810      	cmp	r0, #16
    8040:	d904      	bls.n	804c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    8042:	f105 0010 	add.w	r0, r5, #16
    8046:	f00b f8b5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    804a:	e000      	b.n	804e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    804c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    804e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8050:	b140      	cbz	r0, 8064 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    8052:	4620      	mov	r0, r4
    8054:	f00b f8a2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8058:	4404      	add	r4, r0
  if (model->metadata()) {
    805a:	2c00      	cmp	r4, #0
    805c:	f000 80cc 	beq.w	81f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8060:	2500      	movs	r5, #0
    8062:	e023      	b.n	80ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    8064:	2400      	movs	r4, #0
    8066:	e7f8      	b.n	805a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8068:	2000      	movs	r0, #0
    806a:	e02c      	b.n	80c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    806c:	2400      	movs	r4, #0
    806e:	e031      	b.n	80d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    8070:	4b64      	ldr	r3, [pc, #400]	; (8204 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    8072:	4a65      	ldr	r2, [pc, #404]	; (8208 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    8074:	f44f 7183 	mov.w	r1, #262	; 0x106
    8078:	4864      	ldr	r0, [pc, #400]	; (820c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    807a:	f008 fc21 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    807e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8080:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8084:	2800      	cmp	r0, #0
    8086:	d046      	beq.n	8116 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    8088:	4648      	mov	r0, r9
    808a:	f00b f887 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    808e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8090:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    8094:	f8df a180 	ldr.w	sl, [pc, #384]	; 8218 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    8098:	4650      	mov	r0, sl
    809a:	f7f9 fa1b 	bl	14d4 <strlen>
    809e:	4602      	mov	r2, r0
    80a0:	4651      	mov	r1, sl
    80a2:	4648      	mov	r0, r9
    80a4:	f00e f96a 	bl	1637c <strncmp>
    80a8:	b3c0      	cbz	r0, 811c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    80aa:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    80ac:	4630      	mov	r0, r6
    80ae:	f00b f87b 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    80b2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    80b4:	4620      	mov	r0, r4
    80b6:	f00b f87d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80ba:	2810      	cmp	r0, #16
    80bc:	d9d4      	bls.n	8068 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    80be:	f104 0010 	add.w	r0, r4, #16
    80c2:	f00b f877 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    80c6:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80c8:	2800      	cmp	r0, #0
    80ca:	d0cf      	beq.n	806c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    80cc:	4620      	mov	r0, r4
    80ce:	f00b f865 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    80d2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    80d4:	6820      	ldr	r0, [r4, #0]
    80d6:	f009 fe42 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    80da:	4285      	cmp	r5, r0
    80dc:	f080 808e 	bcs.w	81fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    80e0:	6820      	ldr	r0, [r4, #0]
    80e2:	f009 fe3c 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    80e6:	4285      	cmp	r5, r0
    80e8:	d2c2      	bcs.n	8070 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    80ea:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    80ec:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    80f0:	4620      	mov	r0, r4
    80f2:	f00b f853 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    80f6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    80f8:	4620      	mov	r0, r4
    80fa:	f00b f855 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    80fe:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8102:	4648      	mov	r0, r9
    8104:	f00b f856 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8108:	2804      	cmp	r0, #4
    810a:	d9b8      	bls.n	807e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    810c:	f109 0004 	add.w	r0, r9, #4
    8110:	f00b f850 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8114:	e7b4      	b.n	8080 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8116:	f04f 0900 	mov.w	r9, #0
    811a:	e7b9      	b.n	8090 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    811c:	4630      	mov	r0, r6
    811e:	f00b f843 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8122:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8126:	4648      	mov	r0, r9
    8128:	f00b f844 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    812c:	280c      	cmp	r0, #12
    812e:	d94e      	bls.n	81ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    8130:	f109 000c 	add.w	r0, r9, #12
    8134:	f00b f83e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8138:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    813c:	2800      	cmp	r0, #0
    813e:	d048      	beq.n	81d2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    8140:	4648      	mov	r0, r9
    8142:	f00b f82b 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8146:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8148:	4620      	mov	r0, r4
    814a:	f00b f82d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    814e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8152:	4650      	mov	r0, sl
    8154:	f00b f82e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8158:	2806      	cmp	r0, #6
    815a:	d93d      	bls.n	81d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    815c:	f10a 0006 	add.w	r0, sl, #6
    8160:	f00b f828 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8164:	b3d0      	cbz	r0, 81dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    8166:	4420      	add	r0, r4
    8168:	f00b f818 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    816c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    816e:	f8d9 0000 	ldr.w	r0, [r9]
    8172:	f009 fdf4 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8176:	4550      	cmp	r0, sl
    8178:	d933      	bls.n	81e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    817a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    817e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8182:	4620      	mov	r0, r4
    8184:	f00b f80a 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8188:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    818a:	4620      	mov	r0, r4
    818c:	f00b f80c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8190:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8194:	4648      	mov	r0, r9
    8196:	f00b f80d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    819a:	2804      	cmp	r0, #4
    819c:	d928      	bls.n	81f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    819e:	f109 0004 	add.w	r0, r9, #4
    81a2:	f00b f807 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    81a6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81a8:	b320      	cbz	r0, 81f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    81aa:	4620      	mov	r0, r4
    81ac:	f00a fff6 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81b0:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    81b2:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    81b4:	3010      	adds	r0, #16
        *offline_planner_offsets =
    81b6:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    81ba:	687b      	ldr	r3, [r7, #4]
    81bc:	4293      	cmp	r3, r2
    81be:	f43f af74 	beq.w	80aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    81c2:	4913      	ldr	r1, [pc, #76]	; (8210 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    81c4:	68f8      	ldr	r0, [r7, #12]
    81c6:	f00b fd32 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    81ca:	2001      	movs	r0, #1
    81cc:	e017      	b.n	81fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81ce:	2000      	movs	r0, #0
    81d0:	e7b2      	b.n	8138 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81d2:	f04f 0900 	mov.w	r9, #0
    81d6:	e7b7      	b.n	8148 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81d8:	2000      	movs	r0, #0
    81da:	e7c3      	b.n	8164 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    81dc:	f04f 0a00 	mov.w	sl, #0
    81e0:	e7c5      	b.n	816e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    81e2:	4b08      	ldr	r3, [pc, #32]	; (8204 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    81e4:	4a0b      	ldr	r2, [pc, #44]	; (8214 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    81e6:	f44f 7183 	mov.w	r1, #262	; 0x106
    81ea:	4808      	ldr	r0, [pc, #32]	; (820c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    81ec:	f008 fb68 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81f0:	2000      	movs	r0, #0
    81f2:	e7d8      	b.n	81a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81f4:	2000      	movs	r0, #0
    81f6:	e7dc      	b.n	81b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    81f8:	2000      	movs	r0, #0
    81fa:	e000      	b.n	81fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    81fc:	2000      	movs	r0, #0
}
    81fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8202:	bf00      	nop
    8204:	0006911c 	.word	0x0006911c
    8208:	0006a5b0 	.word	0x0006a5b0
    820c:	000691e8 	.word	0x000691e8
    8210:	0006a6a8 	.word	0x0006a6a8
    8214:	0006a42c 	.word	0x0006a42c
    8218:	0006aa54 	.word	0x0006aa54

0000821c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    8220:	b349      	cbz	r1, 8276 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    8222:	4604      	mov	r4, r0
    8224:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    8226:	7c03      	ldrb	r3, [r0, #16]
    8228:	bb3b      	cbnz	r3, 827a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    822a:	2301      	movs	r3, #1
    822c:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    822e:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    8230:	6803      	ldr	r3, [r0, #0]
    8232:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    8234:	2204      	movs	r2, #4
    8236:	2108      	movs	r1, #8
    8238:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    823a:	4603      	mov	r3, r0
    823c:	b118      	cbz	r0, 8246 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    823e:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    8240:	4926      	ldr	r1, [pc, #152]	; (82dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    8242:	6001      	str	r1, [r0, #0]
    8244:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    8246:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    8248:	4620      	mov	r0, r4
    824a:	f00b fa87 	bl	1375c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    824e:	2800      	cmp	r0, #0
    8250:	d142      	bne.n	82d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8252:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8254:	683b      	ldr	r3, [r7, #0]
    8256:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    825a:	4628      	mov	r0, r5
    825c:	f00a ffa4 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8260:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8262:	4630      	mov	r0, r6
    8264:	f00a ffa6 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8268:	2808      	cmp	r0, #8
    826a:	d90c      	bls.n	8286 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    826c:	f106 0008 	add.w	r0, r6, #8
    8270:	f00a ffa0 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8274:	e008      	b.n	8288 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8276:	f00d fef4 	bl	16062 <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    827a:	4919      	ldr	r1, [pc, #100]	; (82e0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    827c:	68c0      	ldr	r0, [r0, #12]
    827e:	f00b fcd6 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8282:	2600      	movs	r6, #0
    8284:	e01d      	b.n	82c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8286:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8288:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    828a:	b1e8      	cbz	r0, 82c8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    828c:	4630      	mov	r0, r6
    828e:	f00a ff85 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8292:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8294:	6830      	ldr	r0, [r6, #0]
    8296:	f009 fd62 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    829a:	2204      	movs	r2, #4
    829c:	00c1      	lsls	r1, r0, #3
    829e:	4638      	mov	r0, r7
    82a0:	47c0      	blx	r8
  if (output == nullptr) {
    82a2:	4606      	mov	r6, r0
    82a4:	b190      	cbz	r0, 82cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    82a6:	6823      	ldr	r3, [r4, #0]
    82a8:	69db      	ldr	r3, [r3, #28]
    82aa:	4602      	mov	r2, r0
    82ac:	4629      	mov	r1, r5
    82ae:	4620      	mov	r0, r4
    82b0:	4798      	blx	r3
    82b2:	b978      	cbnz	r0, 82d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    82b4:	6823      	ldr	r3, [r4, #0]
    82b6:	699b      	ldr	r3, [r3, #24]
    82b8:	4632      	mov	r2, r6
    82ba:	4629      	mov	r1, r5
    82bc:	4620      	mov	r0, r4
    82be:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    82c0:	b940      	cbnz	r0, 82d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    82c2:	4630      	mov	r0, r6
    82c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82c8:	2600      	movs	r6, #0
    82ca:	e7e3      	b.n	8294 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    82cc:	4805      	ldr	r0, [pc, #20]	; (82e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    82ce:	f00a fee0 	bl	13092 <_Z11MicroPrintfPKcz>
    return nullptr;
    82d2:	e7f6      	b.n	82c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    82d4:	2600      	movs	r6, #0
    82d6:	e7f4      	b.n	82c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    82d8:	2600      	movs	r6, #0
    82da:	e7f2      	b.n	82c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    82dc:	0006aa74 	.word	0x0006aa74
    82e0:	0006a6f4 	.word	0x0006a6f4
    82e4:	0006a74c 	.word	0x0006a74c

000082e8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    82e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    82ec:	b083      	sub	sp, #12
    82ee:	4680      	mov	r8, r0
    82f0:	460e      	mov	r6, r1
    82f2:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    82f4:	2500      	movs	r5, #0
    82f6:	e013      	b.n	8320 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82f8:	2000      	movs	r0, #0
    82fa:	e01d      	b.n	8338 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82fc:	2400      	movs	r4, #0
    82fe:	e022      	b.n	8346 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    8300:	4b31      	ldr	r3, [pc, #196]	; (83c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    8302:	4a32      	ldr	r2, [pc, #200]	; (83cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    8304:	f44f 7183 	mov.w	r1, #262	; 0x106
    8308:	4831      	ldr	r0, [pc, #196]	; (83d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    830a:	f008 fad9 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    830e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8310:	b118      	cbz	r0, 831a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    8312:	4420      	add	r0, r4
    8314:	f00b f817 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8318:	e000      	b.n	831c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    831a:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    831c:	bb98      	cbnz	r0, 8386 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    831e:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8320:	4630      	mov	r0, r6
    8322:	f00a ff41 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8326:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8328:	4620      	mov	r0, r4
    832a:	f00a ff43 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    832e:	2804      	cmp	r0, #4
    8330:	d9e2      	bls.n	82f8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    8332:	1d20      	adds	r0, r4, #4
    8334:	f00a ff3e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8338:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    833a:	2800      	cmp	r0, #0
    833c:	d0de      	beq.n	82fc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    833e:	4620      	mov	r0, r4
    8340:	f00a ff2c 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8344:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8346:	6820      	ldr	r0, [r4, #0]
    8348:	f009 fd09 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    834c:	4285      	cmp	r5, r0
    834e:	d236      	bcs.n	83be <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8350:	6820      	ldr	r0, [r4, #0]
    8352:	f009 fd04 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8356:	4285      	cmp	r5, r0
    8358:	d2d2      	bcs.n	8300 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    835a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    835c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8360:	4620      	mov	r0, r4
    8362:	f00a ff1b 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8366:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8368:	4620      	mov	r0, r4
    836a:	f00a ff1d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    836e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8372:	4648      	mov	r0, r9
    8374:	f00a ff1e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8378:	280e      	cmp	r0, #14
    837a:	d9c8      	bls.n	830e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    837c:	f109 000e 	add.w	r0, r9, #14
    8380:	f00a ff18 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8384:	e7c4      	b.n	8310 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8386:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    838a:	0084      	lsls	r4, r0, #2
    838c:	a901      	add	r1, sp, #4
    838e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8392:	f00a fee2 	bl	1315a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8396:	4603      	mov	r3, r0
    8398:	b990      	cbnz	r0, 83c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    839a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    839e:	6803      	ldr	r3, [r0, #0]
    83a0:	68db      	ldr	r3, [r3, #12]
    83a2:	2210      	movs	r2, #16
    83a4:	9901      	ldr	r1, [sp, #4]
    83a6:	4798      	blx	r3
      eval_tensors[i].data.data =
    83a8:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    83aa:	2800      	cmp	r0, #0
    83ac:	d1b7      	bne.n	831e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    83ae:	9a01      	ldr	r2, [sp, #4]
    83b0:	4908      	ldr	r1, [pc, #32]	; (83d4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    83b2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    83b6:	f00b fc3a 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    83ba:	2301      	movs	r3, #1
    83bc:	e000      	b.n	83c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    83be:	2300      	movs	r3, #0
}
    83c0:	4618      	mov	r0, r3
    83c2:	b003      	add	sp, #12
    83c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    83c8:	0006911c 	.word	0x0006911c
    83cc:	00069404 	.word	0x00069404
    83d0:	000691e8 	.word	0x000691e8
    83d4:	0006a77c 	.word	0x0006a77c

000083d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    83d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83dc:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    83de:	b12b      	cbz	r3, 83ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    83e0:	4604      	mov	r4, r0
    83e2:	4688      	mov	r8, r1
    83e4:	4692      	mov	sl, r2
    83e6:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    83e8:	2600      	movs	r6, #0
    83ea:	e04b      	b.n	8484 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    83ec:	f00d fe39 	bl	16062 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    83f0:	4640      	mov	r0, r8
    83f2:	f00a fed9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    83f6:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    83fa:	4658      	mov	r0, fp
    83fc:	f00a feda 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8400:	2804      	cmp	r0, #4
    8402:	d92e      	bls.n	8462 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    8404:	f10b 0004 	add.w	r0, fp, #4
    8408:	f00a fed4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    840c:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8410:	b120      	cbz	r0, 841c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    8412:	4658      	mov	r0, fp
    8414:	f00a fec2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8418:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    841c:	6838      	ldr	r0, [r7, #0]
    841e:	f009 fc9e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8422:	4286      	cmp	r6, r0
    8424:	d21f      	bcs.n	8466 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8426:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    8428:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    842c:	4638      	mov	r0, r7
    842e:	f00a feb5 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8432:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8434:	4638      	mov	r0, r7
    8436:	f00a feb7 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    843a:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    843e:	4658      	mov	r0, fp
    8440:	f00a feb8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8444:	280e      	cmp	r0, #14
    8446:	d915      	bls.n	8474 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    8448:	f10b 000e 	add.w	r0, fp, #14
    844c:	f00a feb2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8450:	b118      	cbz	r0, 845a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8452:	4438      	add	r0, r7
    8454:	f00a ff77 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8458:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    845a:	9b01      	ldr	r3, [sp, #4]
    845c:	b963      	cbnz	r3, 8478 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    845e:	2301      	movs	r3, #1
    8460:	e02c      	b.n	84bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8462:	2000      	movs	r0, #0
    8464:	e7d2      	b.n	840c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8466:	4bb6      	ldr	r3, [pc, #728]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8468:	4ab6      	ldr	r2, [pc, #728]	; (8744 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    846a:	f44f 7183 	mov.w	r1, #262	; 0x106
    846e:	48b6      	ldr	r0, [pc, #728]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8470:	f008 fa26 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8474:	2000      	movs	r0, #0
    8476:	e7eb      	b.n	8450 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8478:	2300      	movs	r3, #0
    847a:	e01f      	b.n	84bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    847c:	f04f 33ff 	mov.w	r3, #4294967295
    8480:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8482:	3601      	adds	r6, #1
    8484:	6863      	ldr	r3, [r4, #4]
    8486:	42b3      	cmp	r3, r6
    8488:	d920      	bls.n	84cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    848a:	6825      	ldr	r5, [r4, #0]
    848c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8490:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    8494:	009f      	lsls	r7, r3, #2
    8496:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    849a:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    849c:	4629      	mov	r1, r5
    849e:	f00a fe5c 	bl	1315a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    84a2:	9001      	str	r0, [sp, #4]
    84a4:	2800      	cmp	r0, #0
    84a6:	f040 8146 	bne.w	8736 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    84aa:	f04f 33ff 	mov.w	r3, #4294967295
    84ae:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    84b0:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    84b2:	f859 7007 	ldr.w	r7, [r9, r7]
    84b6:	2f00      	cmp	r7, #0
    84b8:	d09a      	beq.n	83f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    84ba:	2300      	movs	r3, #0
    84bc:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    84be:	f1ba 0f00 	cmp.w	sl, #0
    84c2:	d0db      	beq.n	847c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    84c4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    84c8:	612b      	str	r3, [r5, #16]
    84ca:	e7da      	b.n	8482 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    84cc:	4640      	mov	r0, r8
    84ce:	f00a ff1b 	bl	13308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    84d2:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    84d4:	f04f 0900 	mov.w	r9, #0
    84d8:	e01f      	b.n	851a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    84da:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    84dc:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    84e0:	b350      	cbz	r0, 8538 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    84e2:	4628      	mov	r0, r5
    84e4:	f00a fe5a 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    84e8:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    84ea:	6828      	ldr	r0, [r5, #0]
    84ec:	f009 fc37 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    84f0:	4581      	cmp	r9, r0
    84f2:	d22a      	bcs.n	854a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    84f4:	6828      	ldr	r0, [r5, #0]
    84f6:	f009 fc32 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    84fa:	4581      	cmp	r9, r0
    84fc:	d21e      	bcs.n	853c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    84fe:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8500:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    8504:	f00a fe4f 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    8508:	6823      	ldr	r3, [r4, #0]
    850a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    850e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    8512:	2300      	movs	r3, #0
    8514:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8516:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    851a:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    851c:	4640      	mov	r0, r8
    851e:	f00a fe43 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8522:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8526:	4628      	mov	r0, r5
    8528:	f00a fe44 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    852c:	2806      	cmp	r0, #6
    852e:	d9d4      	bls.n	84da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    8530:	1da8      	adds	r0, r5, #6
    8532:	f00a fe3f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8536:	e7d1      	b.n	84dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8538:	2500      	movs	r5, #0
    853a:	e7d6      	b.n	84ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    853c:	4b80      	ldr	r3, [pc, #512]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    853e:	4a83      	ldr	r2, [pc, #524]	; (874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8540:	f44f 7183 	mov.w	r1, #262	; 0x106
    8544:	4880      	ldr	r0, [pc, #512]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8546:	f008 f9bb 	bl	108c0 <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    854a:	f04f 0800 	mov.w	r8, #0
    854e:	e01e      	b.n	858e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8550:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8552:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8554:	b348      	cbz	r0, 85aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8556:	4628      	mov	r0, r5
    8558:	f00a fe20 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    855c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    855e:	6828      	ldr	r0, [r5, #0]
    8560:	f009 fbfd 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8564:	4580      	cmp	r8, r0
    8566:	d229      	bcs.n	85bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8568:	6828      	ldr	r0, [r5, #0]
    856a:	f009 fbf8 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    856e:	4580      	cmp	r8, r0
    8570:	d21d      	bcs.n	85ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8572:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8574:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8578:	f00a fe15 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    857c:	6823      	ldr	r3, [r4, #0]
    857e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8582:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8586:	1e7b      	subs	r3, r7, #1
    8588:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    858a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    858e:	4630      	mov	r0, r6
    8590:	f00a fe0a 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8594:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8596:	4628      	mov	r0, r5
    8598:	f00a fe0c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    859c:	2808      	cmp	r0, #8
    859e:	d9d7      	bls.n	8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    85a0:	f105 0008 	add.w	r0, r5, #8
    85a4:	f00a fe06 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    85a8:	e7d3      	b.n	8552 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85aa:	2500      	movs	r5, #0
    85ac:	e7d7      	b.n	855e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    85ae:	4b64      	ldr	r3, [pc, #400]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    85b0:	4a66      	ldr	r2, [pc, #408]	; (874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    85b2:	f44f 7183 	mov.w	r1, #262	; 0x106
    85b6:	4864      	ldr	r0, [pc, #400]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    85b8:	f008 f982 	bl	108c0 <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    85bc:	3f01      	subs	r7, #1
    85be:	e08d      	b.n	86dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85c0:	2000      	movs	r0, #0
    85c2:	e09b      	b.n	86fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85c4:	f04f 0900 	mov.w	r9, #0
    85c8:	e0a1      	b.n	870e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    85ca:	4b5d      	ldr	r3, [pc, #372]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    85cc:	4a60      	ldr	r2, [pc, #384]	; (8750 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    85ce:	f44f 7183 	mov.w	r1, #262	; 0x106
    85d2:	485d      	ldr	r0, [pc, #372]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    85d4:	f008 f974 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    85d8:	2000      	movs	r0, #0
    85da:	e019      	b.n	8610 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85dc:	2500      	movs	r5, #0
    85de:	e01f      	b.n	8620 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    85e0:	4b57      	ldr	r3, [pc, #348]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    85e2:	4a5a      	ldr	r2, [pc, #360]	; (874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    85e4:	f44f 7183 	mov.w	r1, #262	; 0x106
    85e8:	4857      	ldr	r0, [pc, #348]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    85ea:	f008 f969 	bl	108c0 <__assert_func>
        current->last_used = i;
    85ee:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    85f0:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    85f4:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    85f6:	4648      	mov	r0, r9
    85f8:	f00a fdd6 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    85fc:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8600:	4628      	mov	r0, r5
    8602:	f00a fdd7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8606:	2806      	cmp	r0, #6
    8608:	d9e6      	bls.n	85d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    860a:	1da8      	adds	r0, r5, #6
    860c:	f00a fdd2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8610:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8614:	2800      	cmp	r0, #0
    8616:	d0e1      	beq.n	85dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    8618:	4628      	mov	r0, r5
    861a:	f00a fdbf 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    861e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8620:	6828      	ldr	r0, [r5, #0]
    8622:	f009 fb9c 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8626:	4582      	cmp	sl, r0
    8628:	d215      	bcs.n	8656 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    862a:	6828      	ldr	r0, [r5, #0]
    862c:	f009 fb97 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8630:	4582      	cmp	sl, r0
    8632:	d2d5      	bcs.n	85e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8634:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8636:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    863a:	f00a fdb4 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    863e:	6823      	ldr	r3, [r4, #0]
    8640:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8644:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8648:	68c3      	ldr	r3, [r0, #12]
    864a:	f1b3 3fff 	cmp.w	r3, #4294967295
    864e:	d0ce      	beq.n	85ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8650:	42bb      	cmp	r3, r7
    8652:	dacd      	bge.n	85f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8654:	e7cb      	b.n	85ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8656:	f04f 0900 	mov.w	r9, #0
    865a:	e00d      	b.n	8678 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    865c:	2000      	movs	r0, #0
    865e:	e019      	b.n	8694 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8660:	2500      	movs	r5, #0
    8662:	e01f      	b.n	86a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8664:	4b36      	ldr	r3, [pc, #216]	; (8740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8666:	4a39      	ldr	r2, [pc, #228]	; (874c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8668:	f44f 7183 	mov.w	r1, #262	; 0x106
    866c:	4836      	ldr	r0, [pc, #216]	; (8748 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    866e:	f008 f927 	bl	108c0 <__assert_func>
        current->first_created = i;
    8672:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8674:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8678:	4640      	mov	r0, r8
    867a:	f00a fd95 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    867e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8682:	4628      	mov	r0, r5
    8684:	f00a fd96 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8688:	2808      	cmp	r0, #8
    868a:	d9e7      	bls.n	865c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    868c:	f105 0008 	add.w	r0, r5, #8
    8690:	f00a fd90 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8694:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8698:	2800      	cmp	r0, #0
    869a:	d0e1      	beq.n	8660 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    869c:	4628      	mov	r0, r5
    869e:	f00a fd7d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    86a2:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    86a4:	6828      	ldr	r0, [r5, #0]
    86a6:	f009 fb5a 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    86aa:	4581      	cmp	r9, r0
    86ac:	d215      	bcs.n	86da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    86ae:	6828      	ldr	r0, [r5, #0]
    86b0:	f009 fb55 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    86b4:	4581      	cmp	r9, r0
    86b6:	d2d5      	bcs.n	8664 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    86b8:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    86ba:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    86be:	f00a fd72 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    86c2:	6823      	ldr	r3, [r4, #0]
    86c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    86c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    86cc:	6883      	ldr	r3, [r0, #8]
    86ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    86d2:	d0ce      	beq.n	8672 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    86d4:	42bb      	cmp	r3, r7
    86d6:	ddcd      	ble.n	8674 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    86d8:	e7cb      	b.n	8672 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    86da:	3f01      	subs	r7, #1
    86dc:	2f00      	cmp	r7, #0
    86de:	db28      	blt.n	8732 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    86e0:	4630      	mov	r0, r6
    86e2:	f00a fd61 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86e6:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    86e8:	4628      	mov	r0, r5
    86ea:	f00a fd63 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86ee:	280a      	cmp	r0, #10
    86f0:	f67f af66 	bls.w	85c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    86f4:	f105 000a 	add.w	r0, r5, #10
    86f8:	f00a fd5c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    86fc:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8700:	2800      	cmp	r0, #0
    8702:	f43f af5f 	beq.w	85c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    8706:	4648      	mov	r0, r9
    8708:	f00a fd48 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    870c:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    870e:	f8d9 0000 	ldr.w	r0, [r9]
    8712:	f009 fb24 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8716:	4287      	cmp	r7, r0
    8718:	f4bf af57 	bcs.w	85ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    871c:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    8720:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8724:	4648      	mov	r0, r9
    8726:	f00a fd39 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    872a:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    872c:	f04f 0a00 	mov.w	sl, #0
    8730:	e760      	b.n	85f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    8732:	2300      	movs	r3, #0
    8734:	9301      	str	r3, [sp, #4]
}
    8736:	9801      	ldr	r0, [sp, #4]
    8738:	b003      	add	sp, #12
    873a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    873e:	bf00      	nop
    8740:	0006911c 	.word	0x0006911c
    8744:	00069404 	.word	0x00069404
    8748:	000691e8 	.word	0x000691e8
    874c:	00069128 	.word	0x00069128
    8750:	00069f54 	.word	0x00069f54

00008754 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8758:	b083      	sub	sp, #12
    875a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    875e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8760:	b31d      	cbz	r5, 87aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8762:	4607      	mov	r7, r0
    8764:	4688      	mov	r8, r1
    8766:	4614      	mov	r4, r2
    8768:	469a      	mov	sl, r3
  *result = {};
    876a:	2240      	movs	r2, #64	; 0x40
    876c:	2100      	movs	r1, #0
    876e:	4628      	mov	r0, r5
    8770:	f00d fc9d 	bl	160ae <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8774:	4620      	mov	r0, r4
    8776:	f00a fd17 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    877a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    877c:	4630      	mov	r0, r6
    877e:	f00a fd19 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8782:	2806      	cmp	r0, #6
    8784:	d913      	bls.n	87ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8786:	1db0      	adds	r0, r6, #6
    8788:	f00a fd14 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    878c:	b188      	cbz	r0, 87b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    878e:	4420      	add	r0, r4
    8790:	f00a fd16 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8794:	464a      	mov	r2, r9
    8796:	4629      	mov	r1, r5
    8798:	b2c0      	uxtb	r0, r0
    879a:	f001 f891 	bl	98c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    879e:	4606      	mov	r6, r0
    87a0:	b148      	cbz	r0, 87b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    87a2:	4630      	mov	r0, r6
    87a4:	b003      	add	sp, #12
    87a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    87aa:	f00d fc5a 	bl	16062 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87ae:	2000      	movs	r0, #0
    87b0:	e7ec      	b.n	878c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    87b2:	2000      	movs	r0, #0
    87b4:	e7ee      	b.n	8794 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    87b6:	4620      	mov	r0, r4
    87b8:	f00a fcf6 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87bc:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87c0:	4658      	mov	r0, fp
    87c2:	f00a fcf7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87c6:	280e      	cmp	r0, #14
    87c8:	d93f      	bls.n	884a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    87ca:	f10b 000e 	add.w	r0, fp, #14
    87ce:	f00a fcf1 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    87d2:	b118      	cbz	r0, 87dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    87d4:	4420      	add	r0, r4
    87d6:	f00a fdb6 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    87da:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    87dc:	3e00      	subs	r6, #0
    87de:	bf18      	it	ne
    87e0:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    87e2:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    87e6:	4651      	mov	r1, sl
    87e8:	4620      	mov	r0, r4
    87ea:	f7ff faed 	bl	7dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    87ee:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    87f0:	b368      	cbz	r0, 884e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    87f2:	2301      	movs	r3, #1
    87f4:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    87f6:	464b      	mov	r3, r9
    87f8:	aa01      	add	r2, sp, #4
    87fa:	f105 0118 	add.w	r1, r5, #24
    87fe:	4620      	mov	r0, r4
    8800:	f7fd fe6a 	bl	64d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    8804:	4606      	mov	r6, r0
    8806:	2800      	cmp	r0, #0
    8808:	d1cb      	bne.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    880a:	4620      	mov	r0, r4
    880c:	f00a fccc 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8810:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8814:	4650      	mov	r0, sl
    8816:	f00a fccd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    881a:	2804      	cmp	r0, #4
    881c:	d91a      	bls.n	8854 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    881e:	f10a 0004 	add.w	r0, sl, #4
    8822:	f00a fcc7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8826:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    882a:	b1a8      	cbz	r0, 8858 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    882c:	4650      	mov	r0, sl
    882e:	f00a fcb5 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8832:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8836:	b18a      	cbz	r2, 885c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8838:	f105 0308 	add.w	r3, r5, #8
    883c:	4649      	mov	r1, r9
    883e:	4638      	mov	r0, r7
    8840:	f00a ffbf 	bl	137c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8844:	b160      	cbz	r0, 8860 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    8846:	4606      	mov	r6, r0
    8848:	e7ab      	b.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    884a:	2000      	movs	r0, #0
    884c:	e7c1      	b.n	87d2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    884e:	2302      	movs	r3, #2
    8850:	752b      	strb	r3, [r5, #20]
    8852:	e7d0      	b.n	87f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8854:	2000      	movs	r0, #0
    8856:	e7e6      	b.n	8826 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8858:	2200      	movs	r2, #0
    885a:	e7ec      	b.n	8836 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    885c:	4bb6      	ldr	r3, [pc, #728]	; (8b38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    885e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8860:	4620      	mov	r0, r4
    8862:	f00a fca1 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8866:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    886a:	4650      	mov	r0, sl
    886c:	f00a fca2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8870:	280c      	cmp	r0, #12
    8872:	d91a      	bls.n	88aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8874:	f10a 000c 	add.w	r0, sl, #12
    8878:	f00a fc9c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    887c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    887e:	b1b0      	cbz	r0, 88ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8880:	4620      	mov	r0, r4
    8882:	f00a fc8b 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8886:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8888:	2c00      	cmp	r4, #0
    888a:	d08a      	beq.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    888c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    888e:	4620      	mov	r0, r4
    8890:	f00a fc8a 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8894:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8896:	4620      	mov	r0, r4
    8898:	f00a fc8c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    889c:	2808      	cmp	r0, #8
    889e:	d908      	bls.n	88b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    88a0:	f104 0008 	add.w	r0, r4, #8
    88a4:	f00a fc86 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    88a8:	e004      	b.n	88b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    88aa:	2000      	movs	r0, #0
    88ac:	e7e6      	b.n	887c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88ae:	2400      	movs	r4, #0
    88b0:	e7ea      	b.n	8888 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88b2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    88b4:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88b8:	2800      	cmp	r0, #0
    88ba:	d060      	beq.n	897e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    88bc:	4620      	mov	r0, r4
    88be:	f00a fc6d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    88c2:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    88c4:	2c00      	cmp	r4, #0
    88c6:	f43f af6c 	beq.w	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    88ca:	6820      	ldr	r0, [r4, #0]
    88cc:	f009 fa47 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    88d0:	2800      	cmp	r0, #0
    88d2:	f43f af66 	beq.w	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    88d6:	4650      	mov	r0, sl
    88d8:	f00a fc66 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88dc:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88e0:	4658      	mov	r0, fp
    88e2:	f00a fc67 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88e6:	280a      	cmp	r0, #10
    88e8:	d94b      	bls.n	8982 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    88ea:	f10b 000a 	add.w	r0, fp, #10
    88ee:	f00a fc61 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    88f2:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    88f6:	2800      	cmp	r0, #0
    88f8:	d045      	beq.n	8986 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    88fa:	4658      	mov	r0, fp
    88fc:	f00a fc4e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8900:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8902:	2800      	cmp	r0, #0
    8904:	f43f af4d 	beq.w	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8908:	6800      	ldr	r0, [r0, #0]
    890a:	f009 fa28 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    890e:	2800      	cmp	r0, #0
    8910:	f43f af47 	beq.w	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8914:	6820      	ldr	r0, [r4, #0]
    8916:	f009 fa22 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    891a:	b3b0      	cbz	r0, 898a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    891c:	6860      	ldr	r0, [r4, #4]
    891e:	f00a fd18 	bl	13352 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8922:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8924:	4650      	mov	r0, sl
    8926:	f00a fc3f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    892a:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    892e:	4620      	mov	r0, r4
    8930:	f00a fc40 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8934:	280a      	cmp	r0, #10
    8936:	d92f      	bls.n	8998 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8938:	f104 000a 	add.w	r0, r4, #10
    893c:	f00a fc3a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8940:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8944:	b350      	cbz	r0, 899c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8946:	4620      	mov	r0, r4
    8948:	f00a fc28 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    894c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    894e:	6820      	ldr	r0, [r4, #0]
    8950:	f009 fa05 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8954:	b320      	cbz	r0, 89a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8956:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    895a:	f00a fcf9 	bl	13350 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    895e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8960:	4650      	mov	r0, sl
    8962:	f00a fc21 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8966:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    896a:	4620      	mov	r0, r4
    896c:	f00a fc22 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8970:	2808      	cmp	r0, #8
    8972:	d91c      	bls.n	89ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8974:	f104 0008 	add.w	r0, r4, #8
    8978:	f00a fc1c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    897c:	e018      	b.n	89b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    897e:	2400      	movs	r4, #0
    8980:	e7a0      	b.n	88c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8982:	2000      	movs	r0, #0
    8984:	e7b5      	b.n	88f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8986:	2000      	movs	r0, #0
    8988:	e7bb      	b.n	8902 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    898a:	4b6c      	ldr	r3, [pc, #432]	; (8b3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    898c:	4a6c      	ldr	r2, [pc, #432]	; (8b40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    898e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8992:	486c      	ldr	r0, [pc, #432]	; (8b44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8994:	f007 ff94 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8998:	2000      	movs	r0, #0
    899a:	e7d1      	b.n	8940 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    899c:	2400      	movs	r4, #0
    899e:	e7d6      	b.n	894e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    89a0:	4b66      	ldr	r3, [pc, #408]	; (8b3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    89a2:	4a69      	ldr	r2, [pc, #420]	; (8b48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    89a4:	f44f 7183 	mov.w	r1, #262	; 0x106
    89a8:	4866      	ldr	r0, [pc, #408]	; (8b44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    89aa:	f007 ff89 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89ae:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    89b0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89b4:	b390      	cbz	r0, 8a1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    89b6:	4620      	mov	r0, r4
    89b8:	f00a fbf0 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89bc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    89be:	6820      	ldr	r0, [r4, #0]
    89c0:	f009 f9cd 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    89c4:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    89c6:	f1b8 0f00 	cmp.w	r8, #0
    89ca:	d029      	beq.n	8a20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    89cc:	683b      	ldr	r3, [r7, #0]
    89ce:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    89d0:	2204      	movs	r2, #4
    89d2:	210c      	movs	r1, #12
    89d4:	4638      	mov	r0, r7
    89d6:	4798      	blx	r3
    89d8:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    89da:	f1bb 0f00 	cmp.w	fp, #0
    89de:	d027      	beq.n	8a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    89e0:	f1b8 0f00 	cmp.w	r8, #0
    89e4:	d02a      	beq.n	8a3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    89ea:	4620      	mov	r0, r4
    89ec:	f00b f87b 	bl	13ae6 <TfLiteIntArrayGetSizeInBytes>
    89f0:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    89f2:	2204      	movs	r2, #4
    89f4:	4638      	mov	r0, r7
    89f6:	47b0      	blx	r6
    quantization->zero_point =
    89f8:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    89fc:	b340      	cbz	r0, 8a50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    89fe:	4650      	mov	r0, sl
    8a00:	f00a fbd2 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a04:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a08:	4630      	mov	r0, r6
    8a0a:	f00a fbd3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a0e:	2808      	cmp	r0, #8
    8a10:	d924      	bls.n	8a5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8a12:	f106 0008 	add.w	r0, r6, #8
    8a16:	f00a fbcd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a1a:	e020      	b.n	8a5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a1c:	2400      	movs	r4, #0
    8a1e:	e7ce      	b.n	89be <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8a20:	683b      	ldr	r3, [r7, #0]
    8a22:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8a24:	2204      	movs	r2, #4
    8a26:	210c      	movs	r1, #12
    8a28:	4638      	mov	r0, r7
    8a2a:	4798      	blx	r3
    8a2c:	4683      	mov	fp, r0
    8a2e:	e7d4      	b.n	89da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8a30:	4946      	ldr	r1, [pc, #280]	; (8b4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8a32:	4648      	mov	r0, r9
    8a34:	f00b f8fb 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8a38:	2601      	movs	r6, #1
    8a3a:	e6b2      	b.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    8a3c:	683b      	ldr	r3, [r7, #0]
    8a3e:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8a40:	4620      	mov	r0, r4
    8a42:	f00b f850 	bl	13ae6 <TfLiteIntArrayGetSizeInBytes>
    8a46:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8a48:	2204      	movs	r2, #4
    8a4a:	4638      	mov	r0, r7
    8a4c:	47b0      	blx	r6
    8a4e:	e7d3      	b.n	89f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8a50:	493f      	ldr	r1, [pc, #252]	; (8b50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8a52:	4648      	mov	r0, r9
    8a54:	f00b f8eb 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8a58:	2601      	movs	r6, #1
    8a5a:	e6a2      	b.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a5c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8a5e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a62:	b1b0      	cbz	r0, 8a92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8a64:	4630      	mov	r0, r6
    8a66:	f00a fb99 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a6a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8a6c:	465b      	mov	r3, fp
    8a6e:	4649      	mov	r1, r9
    8a70:	4638      	mov	r0, r7
    8a72:	f00a feb8 	bl	137e6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8a76:	4606      	mov	r6, r0
    8a78:	2800      	cmp	r0, #0
    8a7a:	f47f ae92 	bne.w	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    8a7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a82:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8a84:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a88:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    8a8c:	f04f 0800 	mov.w	r8, #0
    8a90:	e019      	b.n	8ac6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    8a92:	2200      	movs	r2, #0
    8a94:	e7ea      	b.n	8a6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a96:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8a98:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a9c:	b320      	cbz	r0, 8ae8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    8a9e:	4638      	mov	r0, r7
    8aa0:	f00a fb7c 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8aa4:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8aa6:	6838      	ldr	r0, [r7, #0]
    8aa8:	f009 f959 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8aac:	4580      	cmp	r8, r0
    8aae:	d21d      	bcs.n	8aec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8ab0:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8ab2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    8ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
    8aba:	f00a fc49 	bl	13350 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8abe:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    8ac2:	f108 0801 	add.w	r8, r8, #1
    8ac6:	45a0      	cmp	r8, r4
    8ac8:	da17      	bge.n	8afa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    8aca:	4650      	mov	r0, sl
    8acc:	f00a fb6c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ad0:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8ad4:	4638      	mov	r0, r7
    8ad6:	f00a fb6d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ada:	280a      	cmp	r0, #10
    8adc:	d9db      	bls.n	8a96 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    8ade:	f107 000a 	add.w	r0, r7, #10
    8ae2:	f00a fb67 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8ae6:	e7d7      	b.n	8a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ae8:	2700      	movs	r7, #0
    8aea:	e7dc      	b.n	8aa6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    8aec:	4b13      	ldr	r3, [pc, #76]	; (8b3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8aee:	4a16      	ldr	r2, [pc, #88]	; (8b48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8af0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8af4:	4813      	ldr	r0, [pc, #76]	; (8b44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8af6:	f007 fee3 	bl	108c0 <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    8afa:	4650      	mov	r0, sl
    8afc:	f00a fb54 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b00:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b04:	4620      	mov	r0, r4
    8b06:	f00a fb55 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b0a:	2810      	cmp	r0, #16
    8b0c:	d90f      	bls.n	8b2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    8b0e:	f104 0010 	add.w	r0, r4, #16
    8b12:	f00a fb4f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8b16:	b160      	cbz	r0, 8b32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8b18:	4450      	add	r0, sl
    8b1a:	f00a fb45 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    8b1e:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8b22:	2301      	movs	r3, #1
    8b24:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8b28:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    8b2c:	e639      	b.n	87a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b2e:	2000      	movs	r0, #0
    8b30:	e7f1      	b.n	8b16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8b32:	2000      	movs	r0, #0
    8b34:	e7f3      	b.n	8b1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8b36:	bf00      	nop
    8b38:	0006aa50 	.word	0x0006aa50
    8b3c:	0006911c 	.word	0x0006911c
    8b40:	0006a7ac 	.word	0x0006a7ac
    8b44:	000691e8 	.word	0x000691e8
    8b48:	000694f8 	.word	0x000694f8
    8b4c:	0006a870 	.word	0x0006a870
    8b50:	0006a8a0 	.word	0x0006a8a0

00008b54 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b58:	b082      	sub	sp, #8
    8b5a:	4607      	mov	r7, r0
    8b5c:	460e      	mov	r6, r1
    8b5e:	4690      	mov	r8, r2
    8b60:	469a      	mov	sl, r3
    8b62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8b64:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8b68:	4608      	mov	r0, r1
    8b6a:	f00a fb1d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b6e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b70:	4628      	mov	r0, r5
    8b72:	f00a fb1f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b76:	2808      	cmp	r0, #8
    8b78:	d941      	bls.n	8bfe <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8b7a:	f105 0008 	add.w	r0, r5, #8
    8b7e:	f00a fb19 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8b82:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b84:	b3e8      	cbz	r0, 8c02 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8b86:	4628      	mov	r0, r5
    8b88:	f00a fb08 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b8c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8b8e:	6828      	ldr	r0, [r5, #0]
    8b90:	f009 f8e5 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8b94:	4284      	cmp	r4, r0
    8b96:	d236      	bcs.n	8c06 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8b98:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8b9a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8b9e:	4620      	mov	r0, r4
    8ba0:	f00a fafc 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ba4:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8ba6:	4620      	mov	r0, r4
    8ba8:	f00a fafe 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8bac:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bae:	4628      	mov	r0, r5
    8bb0:	f00a fb00 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bb4:	2804      	cmp	r0, #4
    8bb6:	d92d      	bls.n	8c14 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8bb8:	1d28      	adds	r0, r5, #4
    8bba:	f00a fafb 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8bbe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8bc0:	b350      	cbz	r0, 8c18 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    8bc2:	4620      	mov	r0, r4
    8bc4:	f00a faea 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8bc8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8bca:	6820      	ldr	r0, [r4, #0]
    8bcc:	f009 f8c7 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8bd0:	4582      	cmp	sl, r0
    8bd2:	d223      	bcs.n	8c1c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8bd4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8bd6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8bda:	4620      	mov	r0, r4
    8bdc:	f00a fade 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8be0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8be2:	4630      	mov	r0, r6
    8be4:	f00a fae0 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8be8:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bea:	4628      	mov	r0, r5
    8bec:	f00a fae2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bf0:	280c      	cmp	r0, #12
    8bf2:	d91a      	bls.n	8c2a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8bf4:	f105 000c 	add.w	r0, r5, #12
    8bf8:	f00a fadc 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8bfc:	e016      	b.n	8c2c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8bfe:	2000      	movs	r0, #0
    8c00:	e7bf      	b.n	8b82 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c02:	2500      	movs	r5, #0
    8c04:	e7c3      	b.n	8b8e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8c06:	4b14      	ldr	r3, [pc, #80]	; (8c58 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8c08:	4a14      	ldr	r2, [pc, #80]	; (8c5c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8c0a:	f44f 7183 	mov.w	r1, #262	; 0x106
    8c0e:	4814      	ldr	r0, [pc, #80]	; (8c60 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8c10:	f007 fe56 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c14:	2000      	movs	r0, #0
    8c16:	e7d2      	b.n	8bbe <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c18:	2400      	movs	r4, #0
    8c1a:	e7d6      	b.n	8bca <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8c1c:	4b0e      	ldr	r3, [pc, #56]	; (8c58 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8c1e:	4a11      	ldr	r2, [pc, #68]	; (8c64 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8c20:	f44f 7183 	mov.w	r1, #262	; 0x106
    8c24:	480e      	ldr	r0, [pc, #56]	; (8c60 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8c26:	f007 fe4b 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c2a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8c2c:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c2e:	b180      	cbz	r0, 8c52 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8c30:	4630      	mov	r0, r6
    8c32:	f00a fab3 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c36:	1833      	adds	r3, r6, r0
    8c38:	f8cd 8004 	str.w	r8, [sp, #4]
    8c3c:	68fa      	ldr	r2, [r7, #12]
    8c3e:	9200      	str	r2, [sp, #0]
    8c40:	4622      	mov	r2, r4
    8c42:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8c46:	4648      	mov	r0, r9
    8c48:	f7ff fd84 	bl	8754 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8c4c:	b002      	add	sp, #8
    8c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c52:	2300      	movs	r3, #0
    8c54:	e7f0      	b.n	8c38 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8c56:	bf00      	nop
    8c58:	0006911c 	.word	0x0006911c
    8c5c:	0006926c 	.word	0x0006926c
    8c60:	000691e8 	.word	0x000691e8
    8c64:	00069404 	.word	0x00069404

00008c68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c6c:	4680      	mov	r8, r0
    8c6e:	460c      	mov	r4, r1
    8c70:	4691      	mov	r9, r2
    8c72:	461f      	mov	r7, r3
    8c74:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8c76:	2300      	movs	r3, #0
    8c78:	602b      	str	r3, [r5, #0]
    8c7a:	606b      	str	r3, [r5, #4]
    8c7c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8c7e:	4608      	mov	r0, r1
    8c80:	f00a fa92 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c84:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c86:	4630      	mov	r0, r6
    8c88:	f00a fa94 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c8c:	2806      	cmp	r0, #6
    8c8e:	d911      	bls.n	8cb4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8c90:	1db0      	adds	r0, r6, #6
    8c92:	f00a fa8f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8c96:	b178      	cbz	r0, 8cb8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8c98:	4420      	add	r0, r4
    8c9a:	f00a fa91 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8c9e:	463a      	mov	r2, r7
    8ca0:	f105 0108 	add.w	r1, r5, #8
    8ca4:	b2c0      	uxtb	r0, r0
    8ca6:	f000 fe0b 	bl	98c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8caa:	4606      	mov	r6, r0
    8cac:	b130      	cbz	r0, 8cbc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8cae:	4630      	mov	r0, r6
    8cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cb4:	2000      	movs	r0, #0
    8cb6:	e7ee      	b.n	8c96 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8cb8:	2000      	movs	r0, #0
    8cba:	e7f0      	b.n	8c9e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8cbc:	4649      	mov	r1, r9
    8cbe:	4620      	mov	r0, r4
    8cc0:	f7ff f882 	bl	7dc8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8cc4:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8cc6:	4620      	mov	r0, r4
    8cc8:	f00a fa6e 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ccc:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cd0:	4648      	mov	r0, r9
    8cd2:	f00a fa6f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cd6:	2804      	cmp	r0, #4
    8cd8:	d911      	bls.n	8cfe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8cda:	f109 0004 	add.w	r0, r9, #4
    8cde:	f00a fa69 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8ce2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ce4:	b168      	cbz	r0, 8d02 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8ce6:	4620      	mov	r0, r4
    8ce8:	f00a fa58 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8cec:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8cee:	b152      	cbz	r2, 8d06 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8cf0:	1d2b      	adds	r3, r5, #4
    8cf2:	4639      	mov	r1, r7
    8cf4:	4640      	mov	r0, r8
    8cf6:	f00a fd64 	bl	137c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8cfa:	4606      	mov	r6, r0
    8cfc:	e7d7      	b.n	8cae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cfe:	2000      	movs	r0, #0
    8d00:	e7ef      	b.n	8ce2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d02:	2200      	movs	r2, #0
    8d04:	e7f3      	b.n	8cee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8d06:	4b01      	ldr	r3, [pc, #4]	; (8d0c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8d08:	606b      	str	r3, [r5, #4]
    8d0a:	e7d0      	b.n	8cae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8d0c:	0006aa50 	.word	0x0006aa50

00008d10 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d14:	b087      	sub	sp, #28
    8d16:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8d18:	9205      	str	r2, [sp, #20]
    8d1a:	b192      	cbz	r2, 8d42 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8d1c:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8d1e:	2300      	movs	r3, #0
    8d20:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8d22:	9c04      	ldr	r4, [sp, #16]
    8d24:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8d26:	4620      	mov	r0, r4
    8d28:	f00a fa3e 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d2c:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d2e:	4620      	mov	r0, r4
    8d30:	f00a fa40 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d34:	2808      	cmp	r0, #8
    8d36:	d906      	bls.n	8d46 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8d38:	f104 0008 	add.w	r0, r4, #8
    8d3c:	f00a fa3a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8d40:	e002      	b.n	8d48 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8d42:	f00d f98e 	bl	16062 <abort>
    8d46:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8d48:	9b04      	ldr	r3, [sp, #16]
    8d4a:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d4c:	2800      	cmp	r0, #0
    8d4e:	d03d      	beq.n	8dcc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8d50:	4620      	mov	r0, r4
    8d52:	f00a fa23 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d56:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8d58:	6820      	ldr	r0, [r4, #0]
    8d5a:	f009 f800 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8d5e:	9d03      	ldr	r5, [sp, #12]
    8d60:	4285      	cmp	r5, r0
    8d62:	f080 80b3 	bcs.w	8ecc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8d66:	6820      	ldr	r0, [r4, #0]
    8d68:	f008 fff9 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8d6c:	4285      	cmp	r5, r0
    8d6e:	d22f      	bcs.n	8dd0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8d70:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8d72:	9b03      	ldr	r3, [sp, #12]
    8d74:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8d78:	4620      	mov	r0, r4
    8d7a:	f00a fa0f 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8d7e:	1824      	adds	r4, r4, r0
    8d80:	d02d      	beq.n	8dde <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8d82:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8d84:	4620      	mov	r0, r4
    8d86:	f00a fa0f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d8a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d8c:	4628      	mov	r0, r5
    8d8e:	f00a fa11 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d92:	2804      	cmp	r0, #4
    8d94:	d925      	bls.n	8de2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8d96:	1d28      	adds	r0, r5, #4
    8d98:	f00a fa0c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8d9c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d9e:	b310      	cbz	r0, 8de6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8da0:	4620      	mov	r0, r4
    8da2:	f00a f9fb 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8da6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8da8:	6820      	ldr	r0, [r4, #0]
    8daa:	f008 ffd8 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8dae:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8db0:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8db4:	6803      	ldr	r3, [r0, #0]
    8db6:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8db8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8dbc:	0089      	lsls	r1, r1, #2
    8dbe:	460c      	mov	r4, r1
    8dc0:	2204      	movs	r2, #4
    8dc2:	4798      	blx	r3
    if (tensors == nullptr) {
    8dc4:	9002      	str	r0, [sp, #8]
    8dc6:	b180      	cbz	r0, 8dea <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8dc8:	2500      	movs	r5, #0
    8dca:	e038      	b.n	8e3e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dcc:	2400      	movs	r4, #0
    8dce:	e7c3      	b.n	8d58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8dd0:	4b3f      	ldr	r3, [pc, #252]	; (8ed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8dd2:	4a40      	ldr	r2, [pc, #256]	; (8ed4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8dd4:	f44f 7183 	mov.w	r1, #262	; 0x106
    8dd8:	483f      	ldr	r0, [pc, #252]	; (8ed8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8dda:	f007 fd71 	bl	108c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8dde:	f00d f940 	bl	16062 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8de2:	2000      	movs	r0, #0
    8de4:	e7da      	b.n	8d9c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8de6:	2400      	movs	r4, #0
    8de8:	e7de      	b.n	8da8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8dea:	4622      	mov	r2, r4
    8dec:	493b      	ldr	r1, [pc, #236]	; (8edc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8dee:	f8db 000c 	ldr.w	r0, [fp, #12]
    8df2:	f00a ff1c 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8df6:	2001      	movs	r0, #1
    8df8:	e05c      	b.n	8eb4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dfa:	2000      	movs	r0, #0
    8dfc:	e02f      	b.n	8e5e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8dfe:	2400      	movs	r4, #0
    8e00:	e034      	b.n	8e6c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8e02:	4b33      	ldr	r3, [pc, #204]	; (8ed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8e04:	4a36      	ldr	r2, [pc, #216]	; (8ee0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8e06:	f44f 7183 	mov.w	r1, #262	; 0x106
    8e0a:	4833      	ldr	r0, [pc, #204]	; (8ed8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8e0c:	f007 fd58 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e10:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8e12:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e16:	2800      	cmp	r0, #0
    8e18:	d043      	beq.n	8ea2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8e1a:	4630      	mov	r0, r6
    8e1c:	f00a f9be 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e20:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8e22:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8e26:	9902      	ldr	r1, [sp, #8]
    8e28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8e2c:	9300      	str	r3, [sp, #0]
    8e2e:	f8db 300c 	ldr.w	r3, [fp, #12]
    8e32:	4621      	mov	r1, r4
    8e34:	4648      	mov	r0, r9
    8e36:	f7ff ff17 	bl	8c68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8e3a:	bba0      	cbnz	r0, 8ea6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8e3c:	3501      	adds	r5, #1
    8e3e:	4555      	cmp	r5, sl
    8e40:	d23b      	bcs.n	8eba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8e42:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8e46:	4638      	mov	r0, r7
    8e48:	f00a f9ae 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e4c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e4e:	4620      	mov	r0, r4
    8e50:	f00a f9b0 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e54:	2804      	cmp	r0, #4
    8e56:	d9d0      	bls.n	8dfa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8e58:	1d20      	adds	r0, r4, #4
    8e5a:	f00a f9ab 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8e5e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e60:	2800      	cmp	r0, #0
    8e62:	d0cc      	beq.n	8dfe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8e64:	4620      	mov	r0, r4
    8e66:	f00a f999 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e6a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8e6c:	6820      	ldr	r0, [r4, #0]
    8e6e:	f008 ff76 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8e72:	4285      	cmp	r5, r0
    8e74:	d2c5      	bcs.n	8e02 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8e76:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8e78:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8e7c:	4620      	mov	r0, r4
    8e7e:	f00a f98d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e82:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8e84:	4640      	mov	r0, r8
    8e86:	f00a f98f 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e8a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e8e:	4630      	mov	r0, r6
    8e90:	f00a f990 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e94:	280c      	cmp	r0, #12
    8e96:	d9bb      	bls.n	8e10 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    8e98:	f106 000c 	add.w	r0, r6, #12
    8e9c:	f00a f98a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8ea0:	e7b7      	b.n	8e12 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ea2:	2200      	movs	r2, #0
    8ea4:	e7bd      	b.n	8e22 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8ea6:	462a      	mov	r2, r5
    8ea8:	490e      	ldr	r1, [pc, #56]	; (8ee4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    8eaa:	f8db 000c 	ldr.w	r0, [fp, #12]
    8eae:	f00a febe 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    8eb2:	2001      	movs	r0, #1
}
    8eb4:	b007      	add	sp, #28
    8eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    8eba:	9b05      	ldr	r3, [sp, #20]
    8ebc:	9a03      	ldr	r2, [sp, #12]
    8ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8ec2:	9902      	ldr	r1, [sp, #8]
    8ec4:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8ec6:	1c53      	adds	r3, r2, #1
    8ec8:	9303      	str	r3, [sp, #12]
    8eca:	e72a      	b.n	8d22 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    8ecc:	2000      	movs	r0, #0
    8ece:	e7f1      	b.n	8eb4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    8ed0:	0006911c 	.word	0x0006911c
    8ed4:	0006926c 	.word	0x0006926c
    8ed8:	000691e8 	.word	0x000691e8
    8edc:	0006a8d0 	.word	0x0006a8d0
    8ee0:	00069404 	.word	0x00069404
    8ee4:	0006a918 	.word	0x0006a918

00008ee8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8eec:	b093      	sub	sp, #76	; 0x4c
    8eee:	4606      	mov	r6, r0
    8ef0:	460f      	mov	r7, r1
    8ef2:	4690      	mov	r8, r2
    8ef4:	4699      	mov	r9, r3
    8ef6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8efa:	4608      	mov	r0, r1
    8efc:	f00a f954 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f00:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f02:	4620      	mov	r0, r4
    8f04:	f00a f956 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f08:	2808      	cmp	r0, #8
    8f0a:	d948      	bls.n	8f9e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    8f0c:	f104 0008 	add.w	r0, r4, #8
    8f10:	f00a f950 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8f14:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f16:	2800      	cmp	r0, #0
    8f18:	d043      	beq.n	8fa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    8f1a:	4620      	mov	r0, r4
    8f1c:	f00a f93e 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f20:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f22:	6820      	ldr	r0, [r4, #0]
    8f24:	f008 ff1b 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8f28:	4582      	cmp	sl, r0
    8f2a:	d23c      	bcs.n	8fa6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8f2c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8f2e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8f32:	4620      	mov	r0, r4
    8f34:	f00a f932 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f38:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8f3a:	4620      	mov	r0, r4
    8f3c:	f00a f934 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f40:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f42:	4628      	mov	r0, r5
    8f44:	f00a f936 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f48:	2804      	cmp	r0, #4
    8f4a:	d933      	bls.n	8fb4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    8f4c:	1d28      	adds	r0, r5, #4
    8f4e:	f00a f931 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8f52:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f54:	b380      	cbz	r0, 8fb8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    8f56:	4628      	mov	r0, r5
    8f58:	f00a f920 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f5c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f5e:	6828      	ldr	r0, [r5, #0]
    8f60:	f008 fefd 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    8f64:	6973      	ldr	r3, [r6, #20]
    8f66:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    8f68:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    8f6c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    8f70:	6870      	ldr	r0, [r6, #4]
    8f72:	6803      	ldr	r3, [r0, #0]
    8f74:	691b      	ldr	r3, [r3, #16]
    8f76:	2204      	movs	r2, #4
    8f78:	4651      	mov	r1, sl
    8f7a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    8f7c:	4683      	mov	fp, r0
    8f7e:	b1e8      	cbz	r0, 8fbc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    8f80:	4620      	mov	r0, r4
    8f82:	f00a f911 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f86:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f8a:	4650      	mov	r0, sl
    8f8c:	f00a f912 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f90:	2804      	cmp	r0, #4
    8f92:	d91a      	bls.n	8fca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    8f94:	f10a 0004 	add.w	r0, sl, #4
    8f98:	f00a f90c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8f9c:	e016      	b.n	8fcc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    8f9e:	2000      	movs	r0, #0
    8fa0:	e7b8      	b.n	8f14 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fa2:	2400      	movs	r4, #0
    8fa4:	e7bd      	b.n	8f22 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8fa6:	4b55      	ldr	r3, [pc, #340]	; (90fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    8fa8:	4a55      	ldr	r2, [pc, #340]	; (9100 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    8faa:	f44f 7183 	mov.w	r1, #262	; 0x106
    8fae:	4855      	ldr	r0, [pc, #340]	; (9104 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    8fb0:	f007 fc86 	bl	108c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fb4:	2000      	movs	r0, #0
    8fb6:	e7cc      	b.n	8f52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fb8:	2500      	movs	r5, #0
    8fba:	e7d0      	b.n	8f5e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    8fbc:	4652      	mov	r2, sl
    8fbe:	4952      	ldr	r1, [pc, #328]	; (9108 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    8fc0:	68f0      	ldr	r0, [r6, #12]
    8fc2:	f00a fe34 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    8fc6:	2701      	movs	r7, #1
    8fc8:	e01b      	b.n	9002 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8fca:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8fcc:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fd0:	b1d8      	cbz	r0, 900a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    8fd2:	4650      	mov	r0, sl
    8fd4:	f00a f8e2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8fd8:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8fda:	f8da 0000 	ldr.w	r0, [sl]
    8fde:	f008 febe 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    8fe2:	6972      	ldr	r2, [r6, #20]
    8fe4:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    8fe6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    8fea:	900f      	str	r0, [sp, #60]	; 0x3c
    8fec:	9210      	str	r2, [sp, #64]	; 0x40
    8fee:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    8ff0:	2300      	movs	r3, #0
    8ff2:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    8ff4:	aa0d      	add	r2, sp, #52	; 0x34
    8ff6:	4639      	mov	r1, r7
    8ff8:	a80e      	add	r0, sp, #56	; 0x38
    8ffa:	f7ff f813 	bl	8024 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    8ffe:	4607      	mov	r7, r0
    9000:	b130      	cbz	r0, 9010 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    9002:	4638      	mov	r0, r7
    9004:	b013      	add	sp, #76	; 0x4c
    9006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    900a:	f04f 0a00 	mov.w	sl, #0
    900e:	e7e4      	b.n	8fda <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    9010:	4643      	mov	r3, r8
    9012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9014:	4621      	mov	r1, r4
    9016:	a80e      	add	r0, sp, #56	; 0x38
    9018:	f7ff f9de 	bl	83d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    901c:	4607      	mov	r7, r0
    901e:	2800      	cmp	r0, #0
    9020:	d1ef      	bne.n	9002 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    9022:	4630      	mov	r0, r6
    9024:	f00a fba4 	bl	13770 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    9028:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    902a:	464a      	mov	r2, r9
    902c:	a80e      	add	r0, sp, #56	; 0x38
    902e:	f00a faae 	bl	1358e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    9032:	4607      	mov	r7, r0
    9034:	2800      	cmp	r0, #0
    9036:	d1e4      	bne.n	9002 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9038:	2110      	movs	r1, #16
    903a:	6870      	ldr	r0, [r6, #4]
    903c:	f00a f80e 	bl	1305c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    9040:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    9042:	6870      	ldr	r0, [r6, #4]
    9044:	6803      	ldr	r3, [r0, #0]
    9046:	691b      	ldr	r3, [r3, #16]
    9048:	2210      	movs	r2, #16
    904a:	4621      	mov	r1, r4
    904c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    904e:	4601      	mov	r1, r0
    9050:	2800      	cmp	r0, #0
    9052:	d036      	beq.n	90c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9054:	4622      	mov	r2, r4
    9056:	a802      	add	r0, sp, #8
    9058:	f000 f882 	bl	9160 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    905c:	462b      	mov	r3, r5
    905e:	465a      	mov	r2, fp
    9060:	a902      	add	r1, sp, #8
    9062:	68f0      	ldr	r0, [r6, #12]
    9064:	f00a fb1a 	bl	1369c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    9068:	4607      	mov	r7, r0
    906a:	2800      	cmp	r0, #0
    906c:	d141      	bne.n	90f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    906e:	6870      	ldr	r0, [r6, #4]
    9070:	6803      	ldr	r3, [r0, #0]
    9072:	695b      	ldr	r3, [r3, #20]
    9074:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9076:	2110      	movs	r1, #16
    9078:	6870      	ldr	r0, [r6, #4]
    907a:	f009 ffef 	bl	1305c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    907e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    9080:	a802      	add	r0, sp, #8
    9082:	f00a fd0d 	bl	13aa0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    9086:	42a0      	cmp	r0, r4
    9088:	d828      	bhi.n	90dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    908a:	68f4      	ldr	r4, [r6, #12]
    908c:	6870      	ldr	r0, [r6, #4]
    908e:	f009 ffe3 	bl	13058 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    9092:	4602      	mov	r2, r0
    9094:	9500      	str	r5, [sp, #0]
    9096:	465b      	mov	r3, fp
    9098:	a902      	add	r1, sp, #8
    909a:	4620      	mov	r0, r4
    909c:	f00a fa9b 	bl	135d6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    90a0:	4607      	mov	r7, r0
    90a2:	bb30      	cbnz	r0, 90f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    90a4:	a802      	add	r0, sp, #8
    90a6:	f00a fcfb 	bl	13aa0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    90aa:	69b3      	ldr	r3, [r6, #24]
    90ac:	4283      	cmp	r3, r0
    90ae:	d200      	bcs.n	90b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    90b0:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    90b2:	6870      	ldr	r0, [r6, #4]
    90b4:	6803      	ldr	r3, [r0, #0]
    90b6:	689b      	ldr	r3, [r3, #8]
    90b8:	2210      	movs	r2, #16
    90ba:	69b1      	ldr	r1, [r6, #24]
    90bc:	4798      	blx	r3
    90be:	4607      	mov	r7, r0
    90c0:	e017      	b.n	90f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    90c2:	68f0      	ldr	r0, [r6, #12]
    90c4:	4b11      	ldr	r3, [pc, #68]	; (910c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    90c6:	9301      	str	r3, [sp, #4]
    90c8:	f240 33d2 	movw	r3, #978	; 0x3d2
    90cc:	9300      	str	r3, [sp, #0]
    90ce:	4b10      	ldr	r3, [pc, #64]	; (9110 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    90d0:	4a10      	ldr	r2, [pc, #64]	; (9114 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    90d2:	4601      	mov	r1, r0
    90d4:	f00a fdba 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    90d8:	2701      	movs	r7, #1
    90da:	e792      	b.n	9002 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    90dc:	68f5      	ldr	r5, [r6, #12]
    90de:	a802      	add	r0, sp, #8
    90e0:	f00a fcde 	bl	13aa0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    90e4:	4602      	mov	r2, r0
    90e6:	4623      	mov	r3, r4
    90e8:	490b      	ldr	r1, [pc, #44]	; (9118 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    90ea:	4628      	mov	r0, r5
    90ec:	f00a fd9f 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    90f0:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    90f2:	a802      	add	r0, sp, #8
    90f4:	f00a fb81 	bl	137fa <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    90f8:	e783      	b.n	9002 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    90fa:	bf00      	nop
    90fc:	0006911c 	.word	0x0006911c
    9100:	0006926c 	.word	0x0006926c
    9104:	000691e8 	.word	0x000691e8
    9108:	0006a938 	.word	0x0006a938
    910c:	0006a9e4 	.word	0x0006a9e4
    9110:	0006a97c 	.word	0x0006a97c
    9114:	0006a9cc 	.word	0x0006a9cc
    9118:	0006aa00 	.word	0x0006aa00

0000911c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    911c:	b538      	push	{r3, r4, r5, lr}
    911e:	4604      	mov	r4, r0
    9120:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    9122:	68a5      	ldr	r5, [r4, #8]
    9124:	6861      	ldr	r1, [r4, #4]
    9126:	428d      	cmp	r5, r1
    9128:	da12      	bge.n	9150 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    912a:	68e1      	ldr	r1, [r4, #12]
    912c:	0128      	lsls	r0, r5, #4
    912e:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    9132:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    9134:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    9136:	9b04      	ldr	r3, [sp, #16]
    9138:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    913a:	f04f 33ff 	mov.w	r3, #4294967295
    913e:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    9140:	68a3      	ldr	r3, [r4, #8]
    9142:	3301      	adds	r3, #1
    9144:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    9146:	2301      	movs	r3, #1
    9148:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    914c:	2000      	movs	r0, #0
}
    914e:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    9150:	460a      	mov	r2, r1
    9152:	4902      	ldr	r1, [pc, #8]	; (915c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    9154:	f00a fd6b 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9158:	2001      	movs	r0, #1
    915a:	e7f8      	b.n	914e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    915c:	0006aac0 	.word	0x0006aac0

00009160 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    9160:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    9162:	4c0f      	ldr	r4, [pc, #60]	; (91a0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    9164:	6004      	str	r4, [r0, #0]
    9166:	2400      	movs	r4, #0
    9168:	6084      	str	r4, [r0, #8]
    916a:	2401      	movs	r4, #1
    916c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    9170:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    9174:	fba4 4202 	umull	r4, r2, r4, r2
    9178:	0952      	lsrs	r2, r2, #5
    917a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    917c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    917e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    9182:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    9184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    9188:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    918a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    918e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    9190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9194:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    9198:	6241      	str	r1, [r0, #36]	; 0x24
}
    919a:	bc10      	pop	{r4}
    919c:	4770      	bx	lr
    919e:	bf00      	nop
    91a0:	0006ab14 	.word	0x0006ab14

000091a4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    91a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91a6:	4605      	mov	r5, r0
    91a8:	460f      	mov	r7, r1
    91aa:	4614      	mov	r4, r2
    91ac:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    91ae:	f00a fb9c 	bl	138ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    91b2:	2c00      	cmp	r4, #0
    91b4:	db08      	blt.n	91c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    91b6:	68ab      	ldr	r3, [r5, #8]
    91b8:	42a3      	cmp	r3, r4
    91ba:	dd05      	ble.n	91c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    91bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    91be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    91c2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    91c4:	2000      	movs	r0, #0
}
    91c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    91c8:	68ab      	ldr	r3, [r5, #8]
    91ca:	4622      	mov	r2, r4
    91cc:	4902      	ldr	r1, [pc, #8]	; (91d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    91ce:	4638      	mov	r0, r7
    91d0:	f00a fd2d 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    91d4:	2001      	movs	r0, #1
    91d6:	e7f6      	b.n	91c6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    91d8:	0006aae0 	.word	0x0006aae0

000091dc <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    91dc:	2810      	cmp	r0, #16
    91de:	d82a      	bhi.n	9236 <TfLiteTypeGetName+0x5a>
    91e0:	e8df f000 	tbb	[pc, r0]
    91e4:	110d2b09 	.word	0x110d2b09
    91e8:	0b191f15 	.word	0x0b191f15
    91ec:	2321131b 	.word	0x2321131b
    91f0:	2725171d 	.word	0x2725171d
    91f4:	0f          	.byte	0x0f
    91f5:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    91f6:	4812      	ldr	r0, [pc, #72]	; (9240 <TfLiteTypeGetName+0x64>)
    91f8:	4770      	bx	lr
      return "INT16";
    91fa:	4812      	ldr	r0, [pc, #72]	; (9244 <TfLiteTypeGetName+0x68>)
    91fc:	4770      	bx	lr
      return "INT32";
    91fe:	4812      	ldr	r0, [pc, #72]	; (9248 <TfLiteTypeGetName+0x6c>)
    9200:	4770      	bx	lr
      return "UINT32";
    9202:	4812      	ldr	r0, [pc, #72]	; (924c <TfLiteTypeGetName+0x70>)
    9204:	4770      	bx	lr
      return "UINT8";
    9206:	4812      	ldr	r0, [pc, #72]	; (9250 <TfLiteTypeGetName+0x74>)
    9208:	4770      	bx	lr
      return "INT8";
    920a:	4812      	ldr	r0, [pc, #72]	; (9254 <TfLiteTypeGetName+0x78>)
    920c:	4770      	bx	lr
      return "INT64";
    920e:	4812      	ldr	r0, [pc, #72]	; (9258 <TfLiteTypeGetName+0x7c>)
    9210:	4770      	bx	lr
      return "UINT64";
    9212:	4812      	ldr	r0, [pc, #72]	; (925c <TfLiteTypeGetName+0x80>)
    9214:	4770      	bx	lr
      return "BOOL";
    9216:	4812      	ldr	r0, [pc, #72]	; (9260 <TfLiteTypeGetName+0x84>)
    9218:	4770      	bx	lr
      return "COMPLEX64";
    921a:	4812      	ldr	r0, [pc, #72]	; (9264 <TfLiteTypeGetName+0x88>)
    921c:	4770      	bx	lr
      return "COMPLEX128";
    921e:	4812      	ldr	r0, [pc, #72]	; (9268 <TfLiteTypeGetName+0x8c>)
    9220:	4770      	bx	lr
      return "STRING";
    9222:	4812      	ldr	r0, [pc, #72]	; (926c <TfLiteTypeGetName+0x90>)
    9224:	4770      	bx	lr
      return "FLOAT16";
    9226:	4812      	ldr	r0, [pc, #72]	; (9270 <TfLiteTypeGetName+0x94>)
    9228:	4770      	bx	lr
      return "FLOAT64";
    922a:	4812      	ldr	r0, [pc, #72]	; (9274 <TfLiteTypeGetName+0x98>)
    922c:	4770      	bx	lr
      return "RESOURCE";
    922e:	4812      	ldr	r0, [pc, #72]	; (9278 <TfLiteTypeGetName+0x9c>)
    9230:	4770      	bx	lr
      return "VARIANT";
    9232:	4812      	ldr	r0, [pc, #72]	; (927c <TfLiteTypeGetName+0xa0>)
    9234:	4770      	bx	lr
  }
  return "Unknown type";
    9236:	4812      	ldr	r0, [pc, #72]	; (9280 <TfLiteTypeGetName+0xa4>)
    9238:	4770      	bx	lr
      return "FLOAT32";
    923a:	4812      	ldr	r0, [pc, #72]	; (9284 <TfLiteTypeGetName+0xa8>)
}
    923c:	4770      	bx	lr
    923e:	bf00      	nop
    9240:	0006abc8 	.word	0x0006abc8
    9244:	0006ab44 	.word	0x0006ab44
    9248:	0006ab4c 	.word	0x0006ab4c
    924c:	0006ab54 	.word	0x0006ab54
    9250:	0006ab5c 	.word	0x0006ab5c
    9254:	0006ab64 	.word	0x0006ab64
    9258:	0006ab6c 	.word	0x0006ab6c
    925c:	0006ab74 	.word	0x0006ab74
    9260:	0006ab7c 	.word	0x0006ab7c
    9264:	0006ab84 	.word	0x0006ab84
    9268:	0006ab90 	.word	0x0006ab90
    926c:	0006ab9c 	.word	0x0006ab9c
    9270:	0006aba4 	.word	0x0006aba4
    9274:	0006abac 	.word	0x0006abac
    9278:	0006abb4 	.word	0x0006abb4
    927c:	0006abc0 	.word	0x0006abc0
    9280:	0006ab2c 	.word	0x0006ab2c
    9284:	0006ab3c 	.word	0x0006ab3c

00009288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9288:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    928c:	4606      	mov	r6, r0
    928e:	460f      	mov	r7, r1
    9290:	4615      	mov	r5, r2
    9292:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    9294:	2200      	movs	r2, #0
    9296:	2300      	movs	r3, #0
    9298:	f7f7 fb82 	bl	9a0 <__aeabi_dcmpeq>
    929c:	b120      	cbz	r0, 92a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    929e:	2300      	movs	r3, #0
    92a0:	602b      	str	r3, [r5, #0]
    *shift = 0;
    92a2:	6023      	str	r3, [r4, #0]
}
    92a4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    92a8:	4622      	mov	r2, r4
    92aa:	4630      	mov	r0, r6
    92ac:	4639      	mov	r1, r7
    92ae:	f007 f8ef 	bl	10490 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    92b2:	2200      	movs	r2, #0
    92b4:	4b1a      	ldr	r3, [pc, #104]	; (9320 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    92b6:	f7f7 f90b 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    92ba:	f007 f921 	bl	10500 <round>
    92be:	f7f7 ff2b 	bl	1118 <__aeabi_d2lz>
    92c2:	4606      	mov	r6, r0
    92c4:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    92c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    92ca:	2300      	movs	r3, #0
    92cc:	4282      	cmp	r2, r0
    92ce:	418b      	sbcs	r3, r1
    92d0:	db12      	blt.n	92f8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    92d2:	2900      	cmp	r1, #0
    92d4:	bf08      	it	eq
    92d6:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    92da:	d00f      	beq.n	92fc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    92dc:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    92e0:	f177 0300 	sbcs.w	r3, r7, #0
    92e4:	da19      	bge.n	931a <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    92e6:	6823      	ldr	r3, [r4, #0]
    92e8:	f113 0f1f 	cmn.w	r3, #31
    92ec:	da02      	bge.n	92f4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    92ee:	2300      	movs	r3, #0
    92f0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    92f2:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    92f4:	602e      	str	r6, [r5, #0]
    92f6:	e7d5      	b.n	92a4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    92f8:	f00c feb3 	bl	16062 <abort>
    q_fixed /= 2;
    92fc:	0fc9      	lsrs	r1, r1, #31
    92fe:	eb16 0b01 	adds.w	fp, r6, r1
    9302:	f147 0c00 	adc.w	ip, r7, #0
    9306:	ea4f 025b 	mov.w	r2, fp, lsr #1
    930a:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    930e:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    9312:	6823      	ldr	r3, [r4, #0]
    9314:	3301      	adds	r3, #1
    9316:	6023      	str	r3, [r4, #0]
    9318:	e7e0      	b.n	92dc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    931a:	f00c fea2 	bl	16062 <abort>
    931e:	bf00      	nop
    9320:	41e00000 	.word	0x41e00000

00009324 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    9324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9326:	4606      	mov	r6, r0
    9328:	460f      	mov	r7, r1
    932a:	4615      	mov	r5, r2
    932c:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    932e:	2200      	movs	r2, #0
    9330:	4b08      	ldr	r3, [pc, #32]	; (9354 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    9332:	f7f7 fb5d 	bl	9f0 <__aeabi_dcmpgt>
    9336:	b148      	cbz	r0, 934c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    9338:	4623      	mov	r3, r4
    933a:	462a      	mov	r2, r5
    933c:	4630      	mov	r0, r6
    933e:	4639      	mov	r1, r7
    9340:	f7ff ffa2 	bl	9288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    9344:	6823      	ldr	r3, [r4, #0]
    9346:	2b00      	cmp	r3, #0
    9348:	db02      	blt.n	9350 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    934c:	f00c fe89 	bl	16062 <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9350:	f00c fe87 	bl	16062 <abort>
    9354:	3ff00000 	.word	0x3ff00000

00009358 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9358:	b5f0      	push	{r4, r5, r6, r7, lr}
    935a:	b087      	sub	sp, #28
    935c:	4605      	mov	r5, r0
    935e:	460c      	mov	r4, r1
    9360:	9203      	str	r2, [sp, #12]
    9362:	9302      	str	r3, [sp, #8]
    9364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9366:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9368:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    936a:	2901      	cmp	r1, #1
    936c:	d00e      	beq.n	938c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    936e:	2903      	cmp	r1, #3
    9370:	d042      	beq.n	93f8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    9372:	2902      	cmp	r1, #2
    9374:	f000 80a7 	beq.w	94c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9378:	9b03      	ldr	r3, [sp, #12]
    937a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    937c:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    937e:	9b02      	ldr	r3, [sp, #8]
    9380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9382:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9384:	2400      	movs	r4, #0
}
    9386:	4620      	mov	r0, r4
    9388:	b007      	add	sp, #28
    938a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    938c:	4631      	mov	r1, r6
    938e:	2000      	movs	r0, #0
    9390:	f7f7 fd72 	bl	e78 <__aeabi_fdiv>
    9394:	f7f7 f844 	bl	420 <__aeabi_f2d>
    9398:	f007 f8b2 	bl	10500 <round>
    939c:	f7f7 fb5a 	bl	a54 <__aeabi_d2f>
    93a0:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    93a2:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    93a6:	f7f7 fe65 	bl	1074 <__aeabi_fcmpge>
    93aa:	b160      	cbz	r0, 93c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    93ac:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    93b0:	4630      	mov	r0, r6
    93b2:	f7f7 fe55 	bl	1060 <__aeabi_fcmple>
    93b6:	b130      	cbz	r0, 93c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    93b8:	4630      	mov	r0, r6
    93ba:	f7f7 fe6f 	bl	109c <__aeabi_f2iz>
    93be:	4407      	add	r7, r0
    93c0:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    93c2:	2400      	movs	r4, #0
    93c4:	e008      	b.n	93d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    93c6:	696e      	ldr	r6, [r5, #20]
    93c8:	4b73      	ldr	r3, [pc, #460]	; (9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    93ca:	9300      	str	r3, [sp, #0]
    93cc:	f240 1359 	movw	r3, #345	; 0x159
    93d0:	4a72      	ldr	r2, [pc, #456]	; (959c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    93d2:	4973      	ldr	r1, [pc, #460]	; (95a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    93d4:	4628      	mov	r0, r5
    93d6:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    93d8:	2c00      	cmp	r4, #0
    93da:	d1d4      	bne.n	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    93dc:	9a05      	ldr	r2, [sp, #20]
    93de:	9b03      	ldr	r3, [sp, #12]
    93e0:	429a      	cmp	r2, r3
    93e2:	dc07      	bgt.n	93f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    93e4:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    93e6:	681b      	ldr	r3, [r3, #0]
    93e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    93ea:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    93ec:	9b02      	ldr	r3, [sp, #8]
    93ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    93f0:	6013      	str	r3, [r2, #0]
    93f2:	e7c8      	b.n	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    93f4:	ab05      	add	r3, sp, #20
    93f6:	e7f6      	b.n	93e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    93f8:	4631      	mov	r1, r6
    93fa:	2000      	movs	r0, #0
    93fc:	f7f7 fd3c 	bl	e78 <__aeabi_fdiv>
    9400:	f7f7 f80e 	bl	420 <__aeabi_f2d>
    9404:	f007 f87c 	bl	10500 <round>
    9408:	f7f7 fb24 	bl	a54 <__aeabi_d2f>
    940c:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    940e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9412:	f7f7 fe2f 	bl	1074 <__aeabi_fcmpge>
    9416:	b160      	cbz	r0, 9432 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9418:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    941c:	4620      	mov	r0, r4
    941e:	f7f7 fe1f 	bl	1060 <__aeabi_fcmple>
    9422:	b130      	cbz	r0, 9432 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9424:	4620      	mov	r0, r4
    9426:	f7f7 fe39 	bl	109c <__aeabi_f2iz>
    942a:	4438      	add	r0, r7
    942c:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    942e:	2400      	movs	r4, #0
    9430:	e009      	b.n	9446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9432:	696c      	ldr	r4, [r5, #20]
    9434:	4b58      	ldr	r3, [pc, #352]	; (9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9436:	9300      	str	r3, [sp, #0]
    9438:	f240 1359 	movw	r3, #345	; 0x159
    943c:	4a57      	ldr	r2, [pc, #348]	; (959c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    943e:	4958      	ldr	r1, [pc, #352]	; (95a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9440:	4628      	mov	r0, r5
    9442:	47a0      	blx	r4
    9444:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9446:	2c00      	cmp	r4, #0
    9448:	d19d      	bne.n	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    944a:	9a03      	ldr	r2, [sp, #12]
    944c:	9b05      	ldr	r3, [sp, #20]
    944e:	429a      	cmp	r2, r3
    9450:	db1f      	blt.n	9492 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    9452:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9454:	681b      	ldr	r3, [r3, #0]
    9456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9458:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    945a:	4631      	mov	r1, r6
    945c:	4851      	ldr	r0, [pc, #324]	; (95a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    945e:	f7f7 fd0b 	bl	e78 <__aeabi_fdiv>
    9462:	f7f6 ffdd 	bl	420 <__aeabi_f2d>
    9466:	f007 f84b 	bl	10500 <round>
    946a:	f7f7 faf3 	bl	a54 <__aeabi_d2f>
    946e:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9470:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9474:	f7f7 fdfe 	bl	1074 <__aeabi_fcmpge>
    9478:	b168      	cbz	r0, 9496 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    947a:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    947e:	4630      	mov	r0, r6
    9480:	f7f7 fdee 	bl	1060 <__aeabi_fcmple>
    9484:	b138      	cbz	r0, 9496 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9486:	4630      	mov	r0, r6
    9488:	f7f7 fe08 	bl	109c <__aeabi_f2iz>
    948c:	4407      	add	r7, r0
    948e:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9490:	e00b      	b.n	94aa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    9492:	ab05      	add	r3, sp, #20
    9494:	e7de      	b.n	9454 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9496:	696c      	ldr	r4, [r5, #20]
    9498:	4b3f      	ldr	r3, [pc, #252]	; (9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    949a:	9300      	str	r3, [sp, #0]
    949c:	f240 1359 	movw	r3, #345	; 0x159
    94a0:	4a3e      	ldr	r2, [pc, #248]	; (959c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    94a2:	493f      	ldr	r1, [pc, #252]	; (95a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    94a4:	4628      	mov	r0, r5
    94a6:	47a0      	blx	r4
    94a8:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    94aa:	2c00      	cmp	r4, #0
    94ac:	f47f af6b 	bne.w	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    94b0:	9a05      	ldr	r2, [sp, #20]
    94b2:	9b02      	ldr	r3, [sp, #8]
    94b4:	429a      	cmp	r2, r3
    94b6:	db04      	blt.n	94c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    94b8:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    94ba:	681b      	ldr	r3, [r3, #0]
    94bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    94be:	6013      	str	r3, [r2, #0]
    94c0:	e761      	b.n	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    94c2:	ab05      	add	r3, sp, #20
    94c4:	e7f9      	b.n	94ba <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    94c6:	4631      	mov	r1, r6
    94c8:	4837      	ldr	r0, [pc, #220]	; (95a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    94ca:	f7f7 fcd5 	bl	e78 <__aeabi_fdiv>
    94ce:	f7f6 ffa7 	bl	420 <__aeabi_f2d>
    94d2:	f007 f815 	bl	10500 <round>
    94d6:	f7f7 fabd 	bl	a54 <__aeabi_d2f>
    94da:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    94dc:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    94e0:	f7f7 fdc8 	bl	1074 <__aeabi_fcmpge>
    94e4:	b160      	cbz	r0, 9500 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    94e6:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    94ea:	4620      	mov	r0, r4
    94ec:	f7f7 fdb8 	bl	1060 <__aeabi_fcmple>
    94f0:	b130      	cbz	r0, 9500 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    94f2:	4620      	mov	r0, r4
    94f4:	f7f7 fdd2 	bl	109c <__aeabi_f2iz>
    94f8:	4438      	add	r0, r7
    94fa:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    94fc:	2400      	movs	r4, #0
    94fe:	e009      	b.n	9514 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9500:	696c      	ldr	r4, [r5, #20]
    9502:	4b25      	ldr	r3, [pc, #148]	; (9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9504:	9300      	str	r3, [sp, #0]
    9506:	f240 1359 	movw	r3, #345	; 0x159
    950a:	4a24      	ldr	r2, [pc, #144]	; (959c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    950c:	4924      	ldr	r1, [pc, #144]	; (95a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    950e:	4628      	mov	r0, r5
    9510:	47a0      	blx	r4
    9512:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9514:	2c00      	cmp	r4, #0
    9516:	f47f af36 	bne.w	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    951a:	9a03      	ldr	r2, [sp, #12]
    951c:	9b05      	ldr	r3, [sp, #20]
    951e:	429a      	cmp	r2, r3
    9520:	db20      	blt.n	9564 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    9522:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9528:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    952a:	4631      	mov	r1, r6
    952c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9530:	f7f7 fca2 	bl	e78 <__aeabi_fdiv>
    9534:	f7f6 ff74 	bl	420 <__aeabi_f2d>
    9538:	f006 ffe2 	bl	10500 <round>
    953c:	f7f7 fa8a 	bl	a54 <__aeabi_d2f>
    9540:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9542:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9546:	f7f7 fd95 	bl	1074 <__aeabi_fcmpge>
    954a:	b168      	cbz	r0, 9568 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    954c:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9550:	4630      	mov	r0, r6
    9552:	f7f7 fd85 	bl	1060 <__aeabi_fcmple>
    9556:	b138      	cbz	r0, 9568 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9558:	4630      	mov	r0, r6
    955a:	f7f7 fd9f 	bl	109c <__aeabi_f2iz>
    955e:	4407      	add	r7, r0
    9560:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9562:	e00b      	b.n	957c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9564:	ab05      	add	r3, sp, #20
    9566:	e7dd      	b.n	9524 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9568:	696c      	ldr	r4, [r5, #20]
    956a:	4b0b      	ldr	r3, [pc, #44]	; (9598 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    956c:	9300      	str	r3, [sp, #0]
    956e:	f240 1359 	movw	r3, #345	; 0x159
    9572:	4a0a      	ldr	r2, [pc, #40]	; (959c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9574:	490a      	ldr	r1, [pc, #40]	; (95a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9576:	4628      	mov	r0, r5
    9578:	47a0      	blx	r4
    957a:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    957c:	2c00      	cmp	r4, #0
    957e:	f47f af02 	bne.w	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    9582:	9a05      	ldr	r2, [sp, #20]
    9584:	9b02      	ldr	r3, [sp, #8]
    9586:	429a      	cmp	r2, r3
    9588:	db04      	blt.n	9594 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    958a:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    958c:	681b      	ldr	r3, [r3, #0]
    958e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9590:	6013      	str	r3, [r2, #0]
    9592:	e6f8      	b.n	9386 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9594:	ab05      	add	r3, sp, #20
    9596:	e7f9      	b.n	958c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    9598:	0006ac1c 	.word	0x0006ac1c
    959c:	0006abd0 	.word	0x0006abd0
    95a0:	0006a9cc 	.word	0x0006a9cc
    95a4:	40c00000 	.word	0x40c00000
    95a8:	bf800000 	.word	0xbf800000

000095ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    95ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95b0:	b082      	sub	sp, #8
    95b2:	4680      	mov	r8, r0
    95b4:	4608      	mov	r0, r1
    95b6:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    95b8:	68d1      	ldr	r1, [r2, #12]
    95ba:	68c0      	ldr	r0, [r0, #12]
    95bc:	f7f7 fba8 	bl	d10 <__aeabi_fmul>
    95c0:	4604      	mov	r4, r0
  const double input_product_scale =
    95c2:	f7f6 ff2d 	bl	420 <__aeabi_f2d>
    95c6:	4606      	mov	r6, r0
    95c8:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    95ca:	2100      	movs	r1, #0
    95cc:	4620      	mov	r0, r4
    95ce:	f7f7 fd51 	bl	1074 <__aeabi_fcmpge>
    95d2:	b178      	cbz	r0, 95f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    95d4:	68e8      	ldr	r0, [r5, #12]
    95d6:	f7f6 ff23 	bl	420 <__aeabi_f2d>
    95da:	4602      	mov	r2, r0
    95dc:	460b      	mov	r3, r1
    95de:	4630      	mov	r0, r6
    95e0:	4639      	mov	r1, r7
    95e2:	f7f7 f89f 	bl	724 <__aeabi_ddiv>
    95e6:	9b08      	ldr	r3, [sp, #32]
    95e8:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    95ec:	2000      	movs	r0, #0
}
    95ee:	b002      	add	sp, #8
    95f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    95f4:	f8d8 4014 	ldr.w	r4, [r8, #20]
    95f8:	4b04      	ldr	r3, [pc, #16]	; (960c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    95fa:	9300      	str	r3, [sp, #0]
    95fc:	f240 134b 	movw	r3, #331	; 0x14b
    9600:	4a03      	ldr	r2, [pc, #12]	; (9610 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    9602:	4904      	ldr	r1, [pc, #16]	; (9614 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9604:	4640      	mov	r0, r8
    9606:	47a0      	blx	r4
    9608:	2001      	movs	r0, #1
    960a:	e7f0      	b.n	95ee <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    960c:	0006ac44 	.word	0x0006ac44
    9610:	0006abd0 	.word	0x0006abd0
    9614:	0006a9cc 	.word	0x0006a9cc

00009618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9618:	b570      	push	{r4, r5, r6, lr}
    961a:	b084      	sub	sp, #16
    961c:	4614      	mov	r4, r2
    961e:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    9620:	7813      	ldrb	r3, [r2, #0]
    9622:	2b03      	cmp	r3, #3
    9624:	d00d      	beq.n	9642 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9626:	2b09      	cmp	r3, #9
    9628:	d00e      	beq.n	9648 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    962a:	2b07      	cmp	r3, #7
    962c:	d017      	beq.n	965e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    962e:	6944      	ldr	r4, [r0, #20]
    9630:	4b0d      	ldr	r3, [pc, #52]	; (9668 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    9632:	9300      	str	r3, [sp, #0]
    9634:	f240 1391 	movw	r3, #401	; 0x191
    9638:	4a0c      	ldr	r2, [pc, #48]	; (966c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    963a:	490d      	ldr	r1, [pc, #52]	; (9670 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    963c:	47a0      	blx	r4
    963e:	2001      	movs	r0, #1
    9640:	e00b      	b.n	965a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    9642:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9644:	2200      	movs	r2, #0
    9646:	e002      	b.n	964e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9648:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    964a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    964e:	9e08      	ldr	r6, [sp, #32]
    9650:	9602      	str	r6, [sp, #8]
    9652:	9501      	str	r5, [sp, #4]
    9654:	9400      	str	r4, [sp, #0]
    9656:	f7ff fe7f 	bl	9358 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    965a:	b004      	add	sp, #16
    965c:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    965e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    9662:	4a04      	ldr	r2, [pc, #16]	; (9674 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9664:	e7f3      	b.n	964e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9666:	bf00      	nop
    9668:	0006ac84 	.word	0x0006ac84
    966c:	0006abd0 	.word	0x0006abd0
    9670:	0006a9cc 	.word	0x0006a9cc
    9674:	ffff8000 	.word	0xffff8000

00009678 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    967c:	b08d      	sub	sp, #52	; 0x34
    967e:	4604      	mov	r4, r0
    9680:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    9682:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9686:	2e01      	cmp	r6, #1
    9688:	d010      	beq.n	96ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    968a:	6947      	ldr	r7, [r0, #20]
    968c:	2501      	movs	r5, #1
    968e:	9503      	str	r5, [sp, #12]
    9690:	9602      	str	r6, [sp, #8]
    9692:	4b7d      	ldr	r3, [pc, #500]	; (9888 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    9694:	9301      	str	r3, [sp, #4]
    9696:	4b7d      	ldr	r3, [pc, #500]	; (988c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    9698:	9300      	str	r3, [sp, #0]
    969a:	23da      	movs	r3, #218	; 0xda
    969c:	4a7c      	ldr	r2, [pc, #496]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    969e:	497d      	ldr	r1, [pc, #500]	; (9894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    96a0:	47b8      	blx	r7
    96a2:	462e      	mov	r6, r5
}
    96a4:	4630      	mov	r0, r6
    96a6:	b00d      	add	sp, #52	; 0x34
    96a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ac:	460d      	mov	r5, r1
    96ae:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    96b0:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    96b4:	f1b8 0f01 	cmp.w	r8, #1
    96b8:	d00d      	beq.n	96d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    96ba:	6945      	ldr	r5, [r0, #20]
    96bc:	2301      	movs	r3, #1
    96be:	9303      	str	r3, [sp, #12]
    96c0:	f8cd 8008 	str.w	r8, [sp, #8]
    96c4:	4b70      	ldr	r3, [pc, #448]	; (9888 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    96c6:	9301      	str	r3, [sp, #4]
    96c8:	4b73      	ldr	r3, [pc, #460]	; (9898 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    96ca:	9300      	str	r3, [sp, #0]
    96cc:	23dc      	movs	r3, #220	; 0xdc
    96ce:	4a70      	ldr	r2, [pc, #448]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    96d0:	4970      	ldr	r1, [pc, #448]	; (9894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    96d2:	47a8      	blx	r5
    96d4:	e7e6      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    96d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    96d8:	b1b3      	cbz	r3, 9708 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    96da:	f8d3 b000 	ldr.w	fp, [r3]
    96de:	f1bb 0f00 	cmp.w	fp, #0
    96e2:	d01a      	beq.n	971a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    96e4:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    96e8:	2f01      	cmp	r7, #1
    96ea:	dd5a      	ble.n	97a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    96ec:	780a      	ldrb	r2, [r1, #0]
    96ee:	2a09      	cmp	r2, #9
    96f0:	d01c      	beq.n	972c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    96f2:	2a07      	cmp	r2, #7
    96f4:	d01a      	beq.n	972c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    96f6:	6945      	ldr	r5, [r0, #20]
    96f8:	4b68      	ldr	r3, [pc, #416]	; (989c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    96fa:	9300      	str	r3, [sp, #0]
    96fc:	23ec      	movs	r3, #236	; 0xec
    96fe:	4a64      	ldr	r2, [pc, #400]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9700:	4967      	ldr	r1, [pc, #412]	; (98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9702:	47a8      	blx	r5
    9704:	4646      	mov	r6, r8
    9706:	e7cd      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9708:	6945      	ldr	r5, [r0, #20]
    970a:	4b66      	ldr	r3, [pc, #408]	; (98a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    970c:	9300      	str	r3, [sp, #0]
    970e:	23e7      	movs	r3, #231	; 0xe7
    9710:	4a5f      	ldr	r2, [pc, #380]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9712:	4963      	ldr	r1, [pc, #396]	; (98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9714:	47a8      	blx	r5
    9716:	4646      	mov	r6, r8
    9718:	e7c4      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    971a:	6945      	ldr	r5, [r0, #20]
    971c:	4b62      	ldr	r3, [pc, #392]	; (98a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    971e:	9300      	str	r3, [sp, #0]
    9720:	23e8      	movs	r3, #232	; 0xe8
    9722:	4a5b      	ldr	r2, [pc, #364]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9724:	495e      	ldr	r1, [pc, #376]	; (98a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9726:	47a8      	blx	r5
    9728:	4646      	mov	r6, r8
    972a:	e7bb      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    972c:	f89a 2000 	ldrb.w	r2, [sl]
    9730:	2a09      	cmp	r2, #9
    9732:	d00e      	beq.n	9752 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9734:	6965      	ldr	r5, [r4, #20]
    9736:	2309      	movs	r3, #9
    9738:	9303      	str	r3, [sp, #12]
    973a:	9202      	str	r2, [sp, #8]
    973c:	4b5b      	ldr	r3, [pc, #364]	; (98ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    973e:	9301      	str	r3, [sp, #4]
    9740:	4b5b      	ldr	r3, [pc, #364]	; (98b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    9742:	9300      	str	r3, [sp, #0]
    9744:	23ee      	movs	r3, #238	; 0xee
    9746:	4a52      	ldr	r2, [pc, #328]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9748:	4952      	ldr	r1, [pc, #328]	; (9894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    974a:	4620      	mov	r0, r4
    974c:	47a8      	blx	r5
    974e:	4646      	mov	r6, r8
    9750:	e7a8      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    9752:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9754:	4297      	cmp	r7, r2
    9756:	d00d      	beq.n	9774 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9758:	6965      	ldr	r5, [r4, #20]
    975a:	9203      	str	r2, [sp, #12]
    975c:	9702      	str	r7, [sp, #8]
    975e:	4b55      	ldr	r3, [pc, #340]	; (98b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    9760:	9301      	str	r3, [sp, #4]
    9762:	4b55      	ldr	r3, [pc, #340]	; (98b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9764:	9300      	str	r3, [sp, #0]
    9766:	23ef      	movs	r3, #239	; 0xef
    9768:	4a49      	ldr	r2, [pc, #292]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    976a:	494a      	ldr	r1, [pc, #296]	; (9894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    976c:	4620      	mov	r0, r4
    976e:	47a8      	blx	r5
    9770:	4646      	mov	r6, r8
    9772:	e797      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9774:	f8da 2008 	ldr.w	r2, [sl, #8]
    9778:	689b      	ldr	r3, [r3, #8]
    977a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    977e:	6853      	ldr	r3, [r2, #4]
    9780:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9782:	4293      	cmp	r3, r2
    9784:	d00d      	beq.n	97a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9786:	6965      	ldr	r5, [r4, #20]
    9788:	9303      	str	r3, [sp, #12]
    978a:	9202      	str	r2, [sp, #8]
    978c:	4b4b      	ldr	r3, [pc, #300]	; (98bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    978e:	9301      	str	r3, [sp, #4]
    9790:	4b48      	ldr	r3, [pc, #288]	; (98b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    9792:	9300      	str	r3, [sp, #0]
    9794:	23f0      	movs	r3, #240	; 0xf0
    9796:	4a3e      	ldr	r2, [pc, #248]	; (9890 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9798:	493e      	ldr	r1, [pc, #248]	; (9894 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    979a:	4620      	mov	r0, r4
    979c:	47a8      	blx	r5
    979e:	4646      	mov	r6, r8
    97a0:	e780      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    97a2:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    97a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    97a8:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    97ac:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    97b0:	2600      	movs	r6, #0
    97b2:	9405      	str	r4, [sp, #20]
    97b4:	9506      	str	r5, [sp, #24]
    97b6:	f8cd a01c 	str.w	sl, [sp, #28]
    97ba:	469a      	mov	sl, r3
    97bc:	e024      	b.n	9808 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    97be:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    97c2:	f7f6 fe2d 	bl	420 <__aeabi_f2d>
    97c6:	4604      	mov	r4, r0
    97c8:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    97ca:	4648      	mov	r0, r9
    97cc:	f7f6 fe28 	bl	420 <__aeabi_f2d>
    97d0:	4622      	mov	r2, r4
    97d2:	462b      	mov	r3, r5
    97d4:	f7f6 fe7c 	bl	4d0 <__aeabi_dmul>
    97d8:	4604      	mov	r4, r0
    97da:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    97dc:	4640      	mov	r0, r8
    97de:	f7f6 fe1f 	bl	420 <__aeabi_f2d>
    97e2:	4602      	mov	r2, r0
    97e4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    97e6:	4620      	mov	r0, r4
    97e8:	4629      	mov	r1, r5
    97ea:	f7f6 ff9b 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    97ee:	ab0a      	add	r3, sp, #40	; 0x28
    97f0:	aa09      	add	r2, sp, #36	; 0x24
    97f2:	f7ff fd49 	bl	9288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    97f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    97fa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    97fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9800:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9802:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9806:	3601      	adds	r6, #1
    9808:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    980a:	429e      	cmp	r6, r3
    980c:	da04      	bge.n	9818 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    980e:	2f01      	cmp	r7, #1
    9810:	ddd5      	ble.n	97be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    9812:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9816:	e7d4      	b.n	97c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9818:	9c05      	ldr	r4, [sp, #20]
    981a:	9d06      	ldr	r5, [sp, #24]
    981c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    9820:	782b      	ldrb	r3, [r5, #0]
    9822:	2b03      	cmp	r3, #3
    9824:	d008      	beq.n	9838 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9826:	782b      	ldrb	r3, [r5, #0]
    9828:	2b09      	cmp	r3, #9
    982a:	d022      	beq.n	9872 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    982c:	2b03      	cmp	r3, #3
    982e:	d020      	beq.n	9872 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9830:	2b07      	cmp	r3, #7
    9832:	d01e      	beq.n	9872 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9834:	2600      	movs	r6, #0
    9836:	e735      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9838:	2200      	movs	r2, #0
    983a:	2300      	movs	r3, #0
    983c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    9840:	ab0a      	add	r3, sp, #40	; 0x28
    9842:	9301      	str	r3, [sp, #4]
    9844:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9846:	9300      	str	r3, [sp, #0]
    9848:	9b04      	ldr	r3, [sp, #16]
    984a:	4652      	mov	r2, sl
    984c:	4629      	mov	r1, r5
    984e:	4620      	mov	r0, r4
    9850:	f7f7 fe76 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9854:	4606      	mov	r6, r0
    9856:	2800      	cmp	r0, #0
    9858:	f47f af24 	bne.w	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    985c:	ab09      	add	r3, sp, #36	; 0x24
    985e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9864:	f7ff fd10 	bl	9288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9868:	9b09      	ldr	r3, [sp, #36]	; 0x24
    986a:	425b      	negs	r3, r3
    986c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    986e:	6013      	str	r3, [r2, #0]
    9870:	e7d9      	b.n	9826 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    9872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9874:	9300      	str	r3, [sp, #0]
    9876:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9878:	9a16      	ldr	r2, [sp, #88]	; 0x58
    987a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    987c:	7809      	ldrb	r1, [r1, #0]
    987e:	4620      	mov	r0, r4
    9880:	f7ff feca 	bl	9618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9884:	4606      	mov	r6, r0
    9886:	e70d      	b.n	96a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9888:	0006aca8 	.word	0x0006aca8
    988c:	0006acc4 	.word	0x0006acc4
    9890:	0006abd0 	.word	0x0006abd0
    9894:	0006ac8c 	.word	0x0006ac8c
    9898:	0006ace0 	.word	0x0006ace0
    989c:	0006ad2c 	.word	0x0006ad2c
    98a0:	0006a9cc 	.word	0x0006a9cc
    98a4:	0006acfc 	.word	0x0006acfc
    98a8:	0006ad10 	.word	0x0006ad10
    98ac:	0006ad68 	.word	0x0006ad68
    98b0:	0006ad74 	.word	0x0006ad74
    98b4:	0006ad84 	.word	0x0006ad84
    98b8:	0006ad94 	.word	0x0006ad94
    98bc:	0006adb8 	.word	0x0006adb8

000098c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    98c0:	b508      	push	{r3, lr}
    98c2:	4613      	mov	r3, r2
  switch (tensor_type) {
    98c4:	280f      	cmp	r0, #15
    98c6:	d848      	bhi.n	995a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    98c8:	e8df f000 	tbb	[pc, r0]
    98cc:	1f17080c 	.word	0x1f17080c
    98d0:	13332f27 	.word	0x13332f27
    98d4:	3b0f2337 	.word	0x3b0f2337
    98d8:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    98dc:	230a      	movs	r3, #10
    98de:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    98e0:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    98e2:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    98e4:	2301      	movs	r3, #1
    98e6:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    98e8:	e7fb      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    98ea:	230b      	movs	r3, #11
    98ec:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    98ee:	2000      	movs	r0, #0
    98f0:	e7f7      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    98f2:	2307      	movs	r3, #7
    98f4:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    98f6:	2000      	movs	r0, #0
    98f8:	e7f3      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    98fa:	2302      	movs	r3, #2
    98fc:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    98fe:	2000      	movs	r0, #0
    9900:	e7ef      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    9902:	2310      	movs	r3, #16
    9904:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9906:	2000      	movs	r0, #0
    9908:	e7eb      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    990a:	2303      	movs	r3, #3
    990c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    990e:	2000      	movs	r0, #0
    9910:	e7e7      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    9912:	2309      	movs	r3, #9
    9914:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9916:	2000      	movs	r0, #0
    9918:	e7e3      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    991a:	2304      	movs	r3, #4
    991c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    991e:	2000      	movs	r0, #0
    9920:	e7df      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    9922:	230d      	movs	r3, #13
    9924:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9926:	2000      	movs	r0, #0
    9928:	e7db      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    992a:	2305      	movs	r3, #5
    992c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    992e:	2000      	movs	r0, #0
    9930:	e7d7      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    9932:	2306      	movs	r3, #6
    9934:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9936:	2000      	movs	r0, #0
    9938:	e7d3      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    993a:	2308      	movs	r3, #8
    993c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    993e:	2000      	movs	r0, #0
    9940:	e7cf      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    9942:	230c      	movs	r3, #12
    9944:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9946:	2000      	movs	r0, #0
    9948:	e7cb      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    994a:	230e      	movs	r3, #14
    994c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    994e:	2000      	movs	r0, #0
    9950:	e7c7      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    9952:	230f      	movs	r3, #15
    9954:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9956:	2000      	movs	r0, #0
    9958:	e7c3      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    995a:	2200      	movs	r2, #0
    995c:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    995e:	4602      	mov	r2, r0
    9960:	4902      	ldr	r1, [pc, #8]	; (996c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9962:	4618      	mov	r0, r3
    9964:	f00a f963 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9968:	2001      	movs	r0, #1
    996a:	e7ba      	b.n	98e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    996c:	0006adf8 	.word	0x0006adf8

00009970 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    9970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9974:	461c      	mov	r4, r3
  if (!flat_vector) {
    9976:	b1d1      	cbz	r1, 99ae <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9978:	4680      	mov	r8, r0
    997a:	4617      	mov	r7, r2
    997c:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    997e:	6808      	ldr	r0, [r1, #0]
    9980:	f008 f9ed 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9984:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9986:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    998a:	d817      	bhi.n	99bc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    998c:	2400      	movs	r4, #0
    998e:	42b4      	cmp	r4, r6
    9990:	d222      	bcs.n	99d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    9992:	6828      	ldr	r0, [r5, #0]
    9994:	f008 f9e3 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9998:	4284      	cmp	r4, r0
    999a:	d216      	bcs.n	99ca <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    999c:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    999e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    99a2:	f009 fc00 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    99a6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    99aa:	3401      	adds	r4, #1
    99ac:	e7ef      	b.n	998e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    99ae:	9a06      	ldr	r2, [sp, #24]
    99b0:	490b      	ldr	r1, [pc, #44]	; (99e0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    99b2:	4618      	mov	r0, r3
    99b4:	f00a f93b 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    99b8:	2001      	movs	r0, #1
    99ba:	e00e      	b.n	99da <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    99bc:	9a06      	ldr	r2, [sp, #24]
    99be:	4909      	ldr	r1, [pc, #36]	; (99e4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    99c0:	4620      	mov	r0, r4
    99c2:	f00a f934 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    99c6:	2001      	movs	r0, #1
    99c8:	e007      	b.n	99da <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    99ca:	4b07      	ldr	r3, [pc, #28]	; (99e8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    99cc:	4a07      	ldr	r2, [pc, #28]	; (99ec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    99ce:	f44f 7183 	mov.w	r1, #262	; 0x106
    99d2:	4807      	ldr	r0, [pc, #28]	; (99f0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    99d4:	f006 ff74 	bl	108c0 <__assert_func>
  return kTfLiteOk;
    99d8:	2000      	movs	r0, #0
}
    99da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99de:	bf00      	nop
    99e0:	0006ae1c 	.word	0x0006ae1c
    99e4:	0006ae4c 	.word	0x0006ae4c
    99e8:	0006911c 	.word	0x0006911c
    99ec:	00069128 	.word	0x00069128
    99f0:	000691e8 	.word	0x000691e8

000099f4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    99f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99f8:	b084      	sub	sp, #16
    99fa:	4604      	mov	r4, r0
    99fc:	4688      	mov	r8, r1
    99fe:	4615      	mov	r5, r2
    9a00:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9a02:	f00a f906 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9a06:	682b      	ldr	r3, [r5, #0]
    9a08:	681b      	ldr	r3, [r3, #0]
    9a0a:	2204      	movs	r2, #4
    9a0c:	2124      	movs	r1, #36	; 0x24
    9a0e:	4628      	mov	r0, r5
    9a10:	4798      	blx	r3
    return new (allocated_memory) T();
    9a12:	4606      	mov	r6, r0
    9a14:	b118      	cbz	r0, 9a1e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9a16:	2224      	movs	r2, #36	; 0x24
    9a18:	2100      	movs	r1, #0
    9a1a:	f00c fb48 	bl	160ae <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    9a1e:	9502      	str	r5, [sp, #8]
    9a20:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9a22:	b336      	cbz	r6, 9a72 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9a24:	4620      	mov	r0, r4
    9a26:	f009 fbbf 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a2a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a2c:	4628      	mov	r0, r5
    9a2e:	f009 fbc1 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a32:	280a      	cmp	r0, #10
    9a34:	d92a      	bls.n	9a8c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9a36:	f105 000a 	add.w	r0, r5, #10
    9a3a:	f009 fbbb 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a3e:	b338      	cbz	r0, 9a90 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9a40:	4420      	add	r0, r4
    9a42:	f009 fc80 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9a46:	2811      	cmp	r0, #17
    9a48:	d128      	bne.n	9a9c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9a4a:	4620      	mov	r0, r4
    9a4c:	f009 fbac 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9a50:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9a52:	4628      	mov	r0, r5
    9a54:	f009 fbae 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a58:	280c      	cmp	r0, #12
    9a5a:	d91b      	bls.n	9a94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9a5c:	f105 000c 	add.w	r0, r5, #12
    9a60:	f009 fba8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9a64:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9a66:	b1b8      	cbz	r0, 9a98 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9a68:	4620      	mov	r0, r4
    9a6a:	f009 fb97 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9a6e:	4404      	add	r4, r0
    9a70:	e015      	b.n	9a9e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9a72:	4b26      	ldr	r3, [pc, #152]	; (9b0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9a74:	9301      	str	r3, [sp, #4]
    9a76:	f240 63c3 	movw	r3, #1731	; 0x6c3
    9a7a:	9300      	str	r3, [sp, #0]
    9a7c:	4b24      	ldr	r3, [pc, #144]	; (9b10 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    9a7e:	4a25      	ldr	r2, [pc, #148]	; (9b14 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    9a80:	4641      	mov	r1, r8
    9a82:	4640      	mov	r0, r8
    9a84:	f00a f8e2 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9a88:	2501      	movs	r5, #1
    9a8a:	e030      	b.n	9aee <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a8c:	2000      	movs	r0, #0
    9a8e:	e7d6      	b.n	9a3e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9a90:	2000      	movs	r0, #0
    9a92:	e7d8      	b.n	9a46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9a94:	2000      	movs	r0, #0
    9a96:	e7e5      	b.n	9a64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9a98:	2400      	movs	r4, #0
    9a9a:	e000      	b.n	9a9e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9a9c:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    9a9e:	b314      	cbz	r4, 9ae6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    9aa0:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9aa2:	4620      	mov	r0, r4
    9aa4:	f009 fb80 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9aa8:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9aaa:	4620      	mov	r0, r4
    9aac:	f009 fb82 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ab0:	2804      	cmp	r0, #4
    9ab2:	d926      	bls.n	9b02 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    9ab4:	1d20      	adds	r0, r4, #4
    9ab6:	f009 fb7d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9aba:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9abc:	b318      	cbz	r0, 9b06 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    9abe:	4628      	mov	r0, r5
    9ac0:	f009 fb6c 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9ac4:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    9ac6:	b174      	cbz	r4, 9ae6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    9ac8:	4b13      	ldr	r3, [pc, #76]	; (9b18 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    9aca:	9300      	str	r3, [sp, #0]
    9acc:	4643      	mov	r3, r8
    9ace:	4632      	mov	r2, r6
    9ad0:	4621      	mov	r1, r4
    9ad2:	2020      	movs	r0, #32
    9ad4:	f7ff ff4c 	bl	9970 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    9ad8:	4605      	mov	r5, r0
    9ada:	b940      	cbnz	r0, 9aee <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    9adc:	6820      	ldr	r0, [r4, #0]
    9ade:	f008 f93e 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9ae2:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    9ae4:	6218      	str	r0, [r3, #32]
    9ae6:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    9ae8:	2500      	movs	r5, #0
    9aea:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    9aec:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9aee:	9903      	ldr	r1, [sp, #12]
    9af0:	b119      	cbz	r1, 9afa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9af2:	9802      	ldr	r0, [sp, #8]
    9af4:	6803      	ldr	r3, [r0, #0]
    9af6:	685b      	ldr	r3, [r3, #4]
    9af8:	4798      	blx	r3
  return kTfLiteOk;
}
    9afa:	4628      	mov	r0, r5
    9afc:	b004      	add	sp, #16
    9afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b02:	2000      	movs	r0, #0
    9b04:	e7d9      	b.n	9aba <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b06:	2400      	movs	r4, #0
    9b08:	e7dd      	b.n	9ac6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9b0a:	bf00      	nop
    9b0c:	0006aee8 	.word	0x0006aee8
    9b10:	0006ae90 	.word	0x0006ae90
    9b14:	0006a9cc 	.word	0x0006a9cc
    9b18:	0006aefc 	.word	0x0006aefc

00009b1c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    9b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b20:	b084      	sub	sp, #16
    9b22:	4604      	mov	r4, r0
    9b24:	4688      	mov	r8, r1
    9b26:	4615      	mov	r5, r2
    9b28:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9b2a:	f00a f872 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9b2e:	682b      	ldr	r3, [r5, #0]
    9b30:	681b      	ldr	r3, [r3, #0]
    9b32:	2204      	movs	r2, #4
    9b34:	2128      	movs	r1, #40	; 0x28
    9b36:	4628      	mov	r0, r5
    9b38:	4798      	blx	r3
    return new (allocated_memory) T();
    9b3a:	4607      	mov	r7, r0
    9b3c:	b118      	cbz	r0, 9b46 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9b3e:	2228      	movs	r2, #40	; 0x28
    9b40:	2100      	movs	r1, #0
    9b42:	f00c fab4 	bl	160ae <memset>
    9b46:	9502      	str	r5, [sp, #8]
    9b48:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9b4a:	b337      	cbz	r7, 9b9a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9b4c:	4620      	mov	r0, r4
    9b4e:	f009 fb2b 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b52:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b54:	4628      	mov	r0, r5
    9b56:	f009 fb2d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b5a:	280a      	cmp	r0, #10
    9b5c:	d92a      	bls.n	9bb4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9b5e:	f105 000a 	add.w	r0, r5, #10
    9b62:	f009 fb27 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b66:	b338      	cbz	r0, 9bb8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9b68:	4420      	add	r0, r4
    9b6a:	f009 fbec 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    9b6e:	2805      	cmp	r0, #5
    9b70:	d128      	bne.n	9bc4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9b72:	4620      	mov	r0, r4
    9b74:	f009 fb18 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b78:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b7a:	4628      	mov	r0, r5
    9b7c:	f009 fb1a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b80:	280c      	cmp	r0, #12
    9b82:	d91b      	bls.n	9bbc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9b84:	f105 000c 	add.w	r0, r5, #12
    9b88:	f009 fb14 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9b8c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b8e:	b1b8      	cbz	r0, 9bc0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9b90:	4620      	mov	r0, r4
    9b92:	f009 fb03 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9b96:	4404      	add	r4, r0
    9b98:	e015      	b.n	9bc6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9b9a:	4b5b      	ldr	r3, [pc, #364]	; (9d08 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    9b9c:	9301      	str	r3, [sp, #4]
    9b9e:	f240 6361 	movw	r3, #1633	; 0x661
    9ba2:	9300      	str	r3, [sp, #0]
    9ba4:	4b59      	ldr	r3, [pc, #356]	; (9d0c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9ba6:	4a5a      	ldr	r2, [pc, #360]	; (9d10 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9ba8:	4641      	mov	r1, r8
    9baa:	4640      	mov	r0, r8
    9bac:	f00a f84e 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9bb0:	2401      	movs	r4, #1
    9bb2:	e086      	b.n	9cc2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bb4:	2000      	movs	r0, #0
    9bb6:	e7d6      	b.n	9b66 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9bb8:	2000      	movs	r0, #0
    9bba:	e7d8      	b.n	9b6e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bbc:	2000      	movs	r0, #0
    9bbe:	e7e5      	b.n	9b8c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9bc0:	2400      	movs	r4, #0
    9bc2:	e000      	b.n	9bc6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9bc4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9bc6:	2c00      	cmp	r4, #0
    9bc8:	d077      	beq.n	9cba <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9bca:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9bcc:	4620      	mov	r0, r4
    9bce:	f009 faeb 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9bd2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9bd4:	4620      	mov	r0, r4
    9bd6:	f009 faed 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bda:	2804      	cmp	r0, #4
    9bdc:	d97b      	bls.n	9cd6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    9bde:	1d20      	adds	r0, r4, #4
    9be0:	f009 fae8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9be4:	2800      	cmp	r0, #0
    9be6:	d078      	beq.n	9cda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    9be8:	4428      	add	r0, r5
    9bea:	f009 fae9 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9bee:	b2c0      	uxtb	r0, r0
    9bf0:	f00a f806 	bl	13c00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9bf4:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9bf6:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9bf8:	4628      	mov	r0, r5
    9bfa:	f009 fad5 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9bfe:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c00:	4620      	mov	r0, r4
    9c02:	f009 fad7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c06:	2806      	cmp	r0, #6
    9c08:	d969      	bls.n	9cde <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9c0a:	1da0      	adds	r0, r4, #6
    9c0c:	f009 fad2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c10:	2800      	cmp	r0, #0
    9c12:	d066      	beq.n	9ce2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9c14:	4428      	add	r0, r5
    9c16:	f009 fac7 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9c1a:	6078      	str	r0, [r7, #4]
    9c1c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c1e:	4628      	mov	r0, r5
    9c20:	f009 fac2 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c24:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c26:	4638      	mov	r0, r7
    9c28:	f009 fac4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c2c:	2808      	cmp	r0, #8
    9c2e:	d95a      	bls.n	9ce6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9c30:	f107 0008 	add.w	r0, r7, #8
    9c34:	f009 fabe 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c38:	2800      	cmp	r0, #0
    9c3a:	d056      	beq.n	9cea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9c3c:	4428      	add	r0, r5
    9c3e:	f009 fab3 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9c42:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9c44:	4628      	mov	r0, r5
    9c46:	f009 faaf 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c4a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c4c:	4638      	mov	r0, r7
    9c4e:	f009 fab1 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c52:	280a      	cmp	r0, #10
    9c54:	d94b      	bls.n	9cee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9c56:	f107 000a 	add.w	r0, r7, #10
    9c5a:	f009 faab 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c5e:	2800      	cmp	r0, #0
    9c60:	d047      	beq.n	9cf2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9c62:	4428      	add	r0, r5
    9c64:	f009 faa0 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9c68:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9c6a:	4628      	mov	r0, r5
    9c6c:	f009 fa9c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c70:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c72:	4638      	mov	r0, r7
    9c74:	f009 fa9e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c78:	280c      	cmp	r0, #12
    9c7a:	d93c      	bls.n	9cf6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9c7c:	f107 000c 	add.w	r0, r7, #12
    9c80:	f009 fa98 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c84:	2800      	cmp	r0, #0
    9c86:	d038      	beq.n	9cfa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9c88:	4428      	add	r0, r5
    9c8a:	f009 fa8d 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9c8e:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9c90:	4628      	mov	r0, r5
    9c92:	f009 fa89 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c96:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c98:	4638      	mov	r0, r7
    9c9a:	f009 fa8b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c9e:	280e      	cmp	r0, #14
    9ca0:	d92d      	bls.n	9cfe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9ca2:	f107 000e 	add.w	r0, r7, #14
    9ca6:	f009 fa85 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9caa:	b350      	cbz	r0, 9d02 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9cac:	4428      	add	r0, r5
    9cae:	f009 fa87 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9cb2:	b2c0      	uxtb	r0, r0
    9cb4:	f009 ff9a 	bl	13bec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9cb8:	7520      	strb	r0, [r4, #20]
    9cba:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9cbc:	2400      	movs	r4, #0
    9cbe:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9cc0:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    9cc2:	9903      	ldr	r1, [sp, #12]
    9cc4:	b119      	cbz	r1, 9cce <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9cc6:	9802      	ldr	r0, [sp, #8]
    9cc8:	6803      	ldr	r3, [r0, #0]
    9cca:	685b      	ldr	r3, [r3, #4]
    9ccc:	4798      	blx	r3
}
    9cce:	4620      	mov	r0, r4
    9cd0:	b004      	add	sp, #16
    9cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cd6:	2000      	movs	r0, #0
    9cd8:	e784      	b.n	9be4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cda:	2000      	movs	r0, #0
    9cdc:	e787      	b.n	9bee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cde:	2000      	movs	r0, #0
    9ce0:	e796      	b.n	9c10 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ce2:	2000      	movs	r0, #0
    9ce4:	e799      	b.n	9c1a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ce6:	2000      	movs	r0, #0
    9ce8:	e7a6      	b.n	9c38 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cea:	2000      	movs	r0, #0
    9cec:	e7a9      	b.n	9c42 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cee:	2000      	movs	r0, #0
    9cf0:	e7b5      	b.n	9c5e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cf2:	2000      	movs	r0, #0
    9cf4:	e7b8      	b.n	9c68 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cf6:	2000      	movs	r0, #0
    9cf8:	e7c4      	b.n	9c84 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cfa:	2000      	movs	r0, #0
    9cfc:	e7c7      	b.n	9c8e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cfe:	2000      	movs	r0, #0
    9d00:	e7d3      	b.n	9caa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d02:	2000      	movs	r0, #0
    9d04:	e7d5      	b.n	9cb2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    9d06:	bf00      	nop
    9d08:	0006aee8 	.word	0x0006aee8
    9d0c:	0006ae90 	.word	0x0006ae90
    9d10:	0006a9cc 	.word	0x0006a9cc

00009d14 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    9d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d18:	b084      	sub	sp, #16
    9d1a:	4604      	mov	r4, r0
    9d1c:	4688      	mov	r8, r1
    9d1e:	4615      	mov	r5, r2
    9d20:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9d22:	f009 ff76 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9d26:	682b      	ldr	r3, [r5, #0]
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	2204      	movs	r2, #4
    9d2c:	2118      	movs	r1, #24
    9d2e:	4628      	mov	r0, r5
    9d30:	4798      	blx	r3
    return new (allocated_memory) T();
    9d32:	4606      	mov	r6, r0
    9d34:	b130      	cbz	r0, 9d44 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    9d36:	2300      	movs	r3, #0
    9d38:	6003      	str	r3, [r0, #0]
    9d3a:	6043      	str	r3, [r0, #4]
    9d3c:	6083      	str	r3, [r0, #8]
    9d3e:	60c3      	str	r3, [r0, #12]
    9d40:	6103      	str	r3, [r0, #16]
    9d42:	6143      	str	r3, [r0, #20]
    9d44:	9502      	str	r5, [sp, #8]
    9d46:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9d48:	b336      	cbz	r6, 9d98 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    9d4a:	4620      	mov	r0, r4
    9d4c:	f009 fa2c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d50:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d52:	4628      	mov	r0, r5
    9d54:	f009 fa2e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d58:	280a      	cmp	r0, #10
    9d5a:	d92a      	bls.n	9db2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9d5c:	f105 000a 	add.w	r0, r5, #10
    9d60:	f009 fa28 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d64:	b338      	cbz	r0, 9db6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9d66:	4420      	add	r0, r4
    9d68:	f009 faed 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    9d6c:	2801      	cmp	r0, #1
    9d6e:	d128      	bne.n	9dc2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    9d70:	4620      	mov	r0, r4
    9d72:	f009 fa19 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d76:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d78:	4628      	mov	r0, r5
    9d7a:	f009 fa1b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d7e:	280c      	cmp	r0, #12
    9d80:	d91b      	bls.n	9dba <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9d82:	f105 000c 	add.w	r0, r5, #12
    9d86:	f009 fa15 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9d8a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9d8c:	b1b8      	cbz	r0, 9dbe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9d8e:	4620      	mov	r0, r4
    9d90:	f009 fa04 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9d94:	4404      	add	r4, r0
    9d96:	e015      	b.n	9dc4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9d98:	4b5a      	ldr	r3, [pc, #360]	; (9f04 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9d9a:	9301      	str	r3, [sp, #4]
    9d9c:	f240 434d 	movw	r3, #1101	; 0x44d
    9da0:	9300      	str	r3, [sp, #0]
    9da2:	4b59      	ldr	r3, [pc, #356]	; (9f08 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9da4:	4a59      	ldr	r2, [pc, #356]	; (9f0c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    9da6:	4641      	mov	r1, r8
    9da8:	4640      	mov	r0, r8
    9daa:	f009 ff4f 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9dae:	2401      	movs	r4, #1
    9db0:	e086      	b.n	9ec0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9db2:	2000      	movs	r0, #0
    9db4:	e7d6      	b.n	9d64 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9db6:	2000      	movs	r0, #0
    9db8:	e7d8      	b.n	9d6c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dba:	2000      	movs	r0, #0
    9dbc:	e7e5      	b.n	9d8a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9dbe:	2400      	movs	r4, #0
    9dc0:	e000      	b.n	9dc4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9dc2:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9dc4:	2c00      	cmp	r4, #0
    9dc6:	d077      	beq.n	9eb8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9dc8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9dca:	4620      	mov	r0, r4
    9dcc:	f009 f9ec 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9dd0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9dd2:	4620      	mov	r0, r4
    9dd4:	f009 f9ee 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dd8:	2804      	cmp	r0, #4
    9dda:	d97b      	bls.n	9ed4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    9ddc:	1d20      	adds	r0, r4, #4
    9dde:	f009 f9e9 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9de2:	2800      	cmp	r0, #0
    9de4:	d078      	beq.n	9ed8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    9de6:	4428      	add	r0, r5
    9de8:	f009 f9ea 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9dec:	b2c0      	uxtb	r0, r0
    9dee:	f009 ff07 	bl	13c00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9df2:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9df4:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9df6:	4628      	mov	r0, r5
    9df8:	f009 f9d6 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9dfc:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9dfe:	4620      	mov	r0, r4
    9e00:	f009 f9d8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e04:	2806      	cmp	r0, #6
    9e06:	d969      	bls.n	9edc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    9e08:	1da0      	adds	r0, r4, #6
    9e0a:	f009 f9d3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e0e:	2800      	cmp	r0, #0
    9e10:	d066      	beq.n	9ee0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    9e12:	4428      	add	r0, r5
    9e14:	f009 f9c8 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9e18:	6070      	str	r0, [r6, #4]
    9e1a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9e1c:	4628      	mov	r0, r5
    9e1e:	f009 f9c3 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e22:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e24:	4630      	mov	r0, r6
    9e26:	f009 f9c5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e2a:	2808      	cmp	r0, #8
    9e2c:	d95a      	bls.n	9ee4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    9e2e:	f106 0008 	add.w	r0, r6, #8
    9e32:	f009 f9bf 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e36:	2800      	cmp	r0, #0
    9e38:	d056      	beq.n	9ee8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    9e3a:	4428      	add	r0, r5
    9e3c:	f009 f9b4 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9e40:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9e42:	4628      	mov	r0, r5
    9e44:	f009 f9b0 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e48:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e4a:	4630      	mov	r0, r6
    9e4c:	f009 f9b2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e50:	280a      	cmp	r0, #10
    9e52:	d94b      	bls.n	9eec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    9e54:	f106 000a 	add.w	r0, r6, #10
    9e58:	f009 f9ac 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d047      	beq.n	9ef0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    9e60:	4428      	add	r0, r5
    9e62:	f009 f9ad 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9e66:	b2c0      	uxtb	r0, r0
    9e68:	f009 fec0 	bl	13bec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9e6c:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9e6e:	4628      	mov	r0, r5
    9e70:	f009 f99a 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e74:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e76:	4630      	mov	r0, r6
    9e78:	f009 f99c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e7c:	280c      	cmp	r0, #12
    9e7e:	d939      	bls.n	9ef4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    9e80:	f106 000c 	add.w	r0, r6, #12
    9e84:	f009 f996 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e88:	2800      	cmp	r0, #0
    9e8a:	d035      	beq.n	9ef8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    9e8c:	4428      	add	r0, r5
    9e8e:	f009 f98b 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    9e92:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9e94:	4628      	mov	r0, r5
    9e96:	f009 f987 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e9a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e9c:	4630      	mov	r0, r6
    9e9e:	f009 f989 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ea2:	280e      	cmp	r0, #14
    9ea4:	d92a      	bls.n	9efc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    9ea6:	f106 000e 	add.w	r0, r6, #14
    9eaa:	f009 f983 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9eae:	b338      	cbz	r0, 9f00 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    9eb0:	4428      	add	r0, r5
    9eb2:	f009 f979 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    9eb6:	6160      	str	r0, [r4, #20]
    9eb8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9eba:	2400      	movs	r4, #0
    9ebc:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9ebe:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9ec0:	9903      	ldr	r1, [sp, #12]
    9ec2:	b119      	cbz	r1, 9ecc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9ec4:	9802      	ldr	r0, [sp, #8]
    9ec6:	6803      	ldr	r3, [r0, #0]
    9ec8:	685b      	ldr	r3, [r3, #4]
    9eca:	4798      	blx	r3
}
    9ecc:	4620      	mov	r0, r4
    9ece:	b004      	add	sp, #16
    9ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ed4:	2000      	movs	r0, #0
    9ed6:	e784      	b.n	9de2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ed8:	2000      	movs	r0, #0
    9eda:	e787      	b.n	9dec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9edc:	2000      	movs	r0, #0
    9ede:	e796      	b.n	9e0e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ee0:	2000      	movs	r0, #0
    9ee2:	e799      	b.n	9e18 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ee4:	2000      	movs	r0, #0
    9ee6:	e7a6      	b.n	9e36 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ee8:	2000      	movs	r0, #0
    9eea:	e7a9      	b.n	9e40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eec:	2000      	movs	r0, #0
    9eee:	e7b5      	b.n	9e5c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ef0:	2000      	movs	r0, #0
    9ef2:	e7b8      	b.n	9e66 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ef4:	2000      	movs	r0, #0
    9ef6:	e7c7      	b.n	9e88 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ef8:	2001      	movs	r0, #1
    9efa:	e7ca      	b.n	9e92 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9efc:	2000      	movs	r0, #0
    9efe:	e7d6      	b.n	9eae <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f00:	2001      	movs	r0, #1
    9f02:	e7d8      	b.n	9eb6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    9f04:	0006aee8 	.word	0x0006aee8
    9f08:	0006ae90 	.word	0x0006ae90
    9f0c:	0006a9cc 	.word	0x0006a9cc

00009f10 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    9f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f14:	b084      	sub	sp, #16
    9f16:	4604      	mov	r4, r0
    9f18:	4688      	mov	r8, r1
    9f1a:	4616      	mov	r6, r2
    9f1c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9f1e:	f009 fe78 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9f22:	6833      	ldr	r3, [r6, #0]
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	2201      	movs	r2, #1
    9f28:	2104      	movs	r1, #4
    9f2a:	4630      	mov	r0, r6
    9f2c:	4798      	blx	r3
    return new (allocated_memory) T();
    9f2e:	4605      	mov	r5, r0
    9f30:	b108      	cbz	r0, 9f36 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    9f32:	2300      	movs	r3, #0
    9f34:	6003      	str	r3, [r0, #0]
    9f36:	9602      	str	r6, [sp, #8]
    9f38:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9f3a:	b305      	cbz	r5, 9f7e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    9f3c:	4620      	mov	r0, r4
    9f3e:	f009 f933 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f42:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f44:	4630      	mov	r0, r6
    9f46:	f009 f935 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f4a:	280a      	cmp	r0, #10
    9f4c:	d924      	bls.n	9f98 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    9f4e:	f106 000a 	add.w	r0, r6, #10
    9f52:	f009 f92f 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f56:	b308      	cbz	r0, 9f9c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    9f58:	4420      	add	r0, r4
    9f5a:	f009 f9f4 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    9f5e:	2808      	cmp	r0, #8
    9f60:	d128      	bne.n	9fb4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    9f62:	4620      	mov	r0, r4
    9f64:	f009 f920 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f68:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f6a:	4630      	mov	r0, r6
    9f6c:	f009 f922 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f70:	280c      	cmp	r0, #12
    9f72:	d915      	bls.n	9fa0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    9f74:	f106 000c 	add.w	r0, r6, #12
    9f78:	f009 f91c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9f7c:	e011      	b.n	9fa2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    9f7e:	4b4c      	ldr	r3, [pc, #304]	; (a0b0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    9f80:	9301      	str	r3, [sp, #4]
    9f82:	f240 531d 	movw	r3, #1309	; 0x51d
    9f86:	9300      	str	r3, [sp, #0]
    9f88:	4b4a      	ldr	r3, [pc, #296]	; (a0b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    9f8a:	4a4b      	ldr	r2, [pc, #300]	; (a0b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    9f8c:	4641      	mov	r1, r8
    9f8e:	4640      	mov	r0, r8
    9f90:	f009 fe5c 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9f94:	2401      	movs	r4, #1
    9f96:	e07d      	b.n	a094 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    9f98:	2000      	movs	r0, #0
    9f9a:	e7dc      	b.n	9f56 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f9c:	2000      	movs	r0, #0
    9f9e:	e7de      	b.n	9f5e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fa0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    9fa2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9fa4:	b120      	cbz	r0, 9fb0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9fa6:	4620      	mov	r0, r4
    9fa8:	f009 f8f8 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9fac:	4404      	add	r4, r0
    9fae:	e002      	b.n	9fb6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9fb0:	2400      	movs	r4, #0
    9fb2:	e000      	b.n	9fb6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9fb4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9fb6:	2c00      	cmp	r4, #0
    9fb8:	d069      	beq.n	a08e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    9fba:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9fbc:	4620      	mov	r0, r4
    9fbe:	f009 f8f3 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9fc2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9fc4:	4620      	mov	r0, r4
    9fc6:	f009 f8f5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fca:	2804      	cmp	r0, #4
    9fcc:	d903      	bls.n	9fd6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    9fce:	1d20      	adds	r0, r4, #4
    9fd0:	f009 f8f0 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    9fd4:	e000      	b.n	9fd8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    9fd6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fd8:	b118      	cbz	r0, 9fe2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9fda:	4430      	add	r0, r6
    9fdc:	f009 f8f0 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    9fe0:	e000      	b.n	9fe4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    9fe2:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    9fe4:	b2c0      	uxtb	r0, r0
    9fe6:	f009 fe01 	bl	13bec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9fea:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    9fec:	4630      	mov	r0, r6
    9fee:	f009 f8db 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ff2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ff4:	4620      	mov	r0, r4
    9ff6:	f009 f8dd 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ffa:	2808      	cmp	r0, #8
    9ffc:	d904      	bls.n	a008 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    9ffe:	f104 0008 	add.w	r0, r4, #8
    a002:	f009 f8d7 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a006:	e000      	b.n	a00a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    a008:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a00a:	b118      	cbz	r0, a014 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    a00c:	4430      	add	r0, r6
    a00e:	f009 f99a 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a012:	e000      	b.n	a016 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    a014:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    a016:	3800      	subs	r0, #0
    a018:	bf18      	it	ne
    a01a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    a01c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    a01e:	4630      	mov	r0, r6
    a020:	f009 f8c2 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a024:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a026:	4620      	mov	r0, r4
    a028:	f009 f8c4 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a02c:	280a      	cmp	r0, #10
    a02e:	d904      	bls.n	a03a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    a030:	f104 000a 	add.w	r0, r4, #10
    a034:	f009 f8be 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a038:	e000      	b.n	a03c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    a03a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a03c:	b118      	cbz	r0, a046 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    a03e:	4430      	add	r0, r6
    a040:	f009 f981 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a044:	e000      	b.n	a048 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    a046:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    a048:	3800      	subs	r0, #0
    a04a:	bf18      	it	ne
    a04c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    a04e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    a050:	4630      	mov	r0, r6
    a052:	f009 f8a9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a056:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a058:	4620      	mov	r0, r4
    a05a:	f009 f8ab 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a05e:	2806      	cmp	r0, #6
    a060:	d903      	bls.n	a06a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    a062:	1da0      	adds	r0, r4, #6
    a064:	f009 f8a6 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a068:	e000      	b.n	a06c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    a06a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a06c:	b118      	cbz	r0, a076 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    a06e:	4430      	add	r0, r6
    a070:	f009 f8a6 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a074:	e000      	b.n	a078 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    a076:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    a078:	b138      	cbz	r0, a08a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    a07a:	2801      	cmp	r0, #1
    a07c:	d014      	beq.n	a0a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    a07e:	490f      	ldr	r1, [pc, #60]	; (a0bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    a080:	4640      	mov	r0, r8
    a082:	f009 fdd4 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    a086:	2401      	movs	r4, #1
    a088:	e004      	b.n	a094 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    a08a:	2300      	movs	r3, #0
    a08c:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    a08e:	2400      	movs	r4, #0
    a090:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a092:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    a094:	9903      	ldr	r1, [sp, #12]
    a096:	b119      	cbz	r1, a0a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a098:	9802      	ldr	r0, [sp, #8]
    a09a:	6803      	ldr	r3, [r0, #0]
    a09c:	685b      	ldr	r3, [r3, #4]
    a09e:	4798      	blx	r3
}
    a0a0:	4620      	mov	r0, r4
    a0a2:	b004      	add	sp, #16
    a0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    a0a8:	2301      	movs	r3, #1
    a0aa:	706b      	strb	r3, [r5, #1]
        break;
    a0ac:	e7ef      	b.n	a08e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    a0ae:	bf00      	nop
    a0b0:	0006aee8 	.word	0x0006aee8
    a0b4:	0006ae90 	.word	0x0006ae90
    a0b8:	0006a9cc 	.word	0x0006a9cc
    a0bc:	0006af04 	.word	0x0006af04

0000a0c0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c4:	b084      	sub	sp, #16
    a0c6:	4604      	mov	r4, r0
    a0c8:	4688      	mov	r8, r1
    a0ca:	4615      	mov	r5, r2
    a0cc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a0ce:	f009 fda0 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a0d2:	682b      	ldr	r3, [r5, #0]
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	2204      	movs	r2, #4
    a0d8:	211c      	movs	r1, #28
    a0da:	4628      	mov	r0, r5
    a0dc:	4798      	blx	r3
    return new (allocated_memory) T();
    a0de:	4606      	mov	r6, r0
    a0e0:	b138      	cbz	r0, a0f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    a0e2:	2300      	movs	r3, #0
    a0e4:	6003      	str	r3, [r0, #0]
    a0e6:	6043      	str	r3, [r0, #4]
    a0e8:	6083      	str	r3, [r0, #8]
    a0ea:	60c3      	str	r3, [r0, #12]
    a0ec:	6103      	str	r3, [r0, #16]
    a0ee:	6143      	str	r3, [r0, #20]
    a0f0:	6183      	str	r3, [r0, #24]
    a0f2:	9502      	str	r5, [sp, #8]
    a0f4:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a0f6:	b336      	cbz	r6, a146 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    a0f8:	4620      	mov	r0, r4
    a0fa:	f009 f855 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a0fe:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a100:	4628      	mov	r0, r5
    a102:	f009 f857 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a106:	280a      	cmp	r0, #10
    a108:	d92a      	bls.n	a160 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a10a:	f105 000a 	add.w	r0, r5, #10
    a10e:	f009 f851 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a112:	b338      	cbz	r0, a164 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    a114:	4420      	add	r0, r4
    a116:	f009 f916 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    a11a:	2802      	cmp	r0, #2
    a11c:	d128      	bne.n	a170 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    a11e:	4620      	mov	r0, r4
    a120:	f009 f842 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a124:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a126:	4628      	mov	r0, r5
    a128:	f009 f844 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a12c:	280c      	cmp	r0, #12
    a12e:	d91b      	bls.n	a168 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    a130:	f105 000c 	add.w	r0, r5, #12
    a134:	f009 f83e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a138:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a13a:	b1b8      	cbz	r0, a16c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    a13c:	4620      	mov	r0, r4
    a13e:	f009 f82d 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a142:	4404      	add	r4, r0
    a144:	e015      	b.n	a172 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a146:	4b68      	ldr	r3, [pc, #416]	; (a2e8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    a148:	9301      	str	r3, [sp, #4]
    a14a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    a14e:	9300      	str	r3, [sp, #0]
    a150:	4b66      	ldr	r3, [pc, #408]	; (a2ec <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    a152:	4a67      	ldr	r2, [pc, #412]	; (a2f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    a154:	4641      	mov	r1, r8
    a156:	4640      	mov	r0, r8
    a158:	f009 fd78 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a15c:	2401      	movs	r4, #1
    a15e:	e09c      	b.n	a29a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a160:	2000      	movs	r0, #0
    a162:	e7d6      	b.n	a112 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a164:	2000      	movs	r0, #0
    a166:	e7d8      	b.n	a11a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a168:	2000      	movs	r0, #0
    a16a:	e7e5      	b.n	a138 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a16c:	2400      	movs	r4, #0
    a16e:	e000      	b.n	a172 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a170:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a172:	2c00      	cmp	r4, #0
    a174:	f000 808d 	beq.w	a292 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a178:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a17a:	4620      	mov	r0, r4
    a17c:	f009 f814 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a180:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a182:	4620      	mov	r0, r4
    a184:	f009 f816 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a188:	2804      	cmp	r0, #4
    a18a:	f240 8090 	bls.w	a2ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    a18e:	1d20      	adds	r0, r4, #4
    a190:	f009 f810 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a194:	2800      	cmp	r0, #0
    a196:	f000 808c 	beq.w	a2b2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    a19a:	4428      	add	r0, r5
    a19c:	f009 f810 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a1a0:	b2c0      	uxtb	r0, r0
    a1a2:	f009 fd2d 	bl	13c00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a1a6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a1a8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a1aa:	4628      	mov	r0, r5
    a1ac:	f008 fffc 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1b0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1b2:	4620      	mov	r0, r4
    a1b4:	f008 fffe 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1b8:	2806      	cmp	r0, #6
    a1ba:	d97c      	bls.n	a2b6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    a1bc:	1da0      	adds	r0, r4, #6
    a1be:	f008 fff9 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1c2:	2800      	cmp	r0, #0
    a1c4:	d079      	beq.n	a2ba <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    a1c6:	4428      	add	r0, r5
    a1c8:	f008 ffee 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a1cc:	6070      	str	r0, [r6, #4]
    a1ce:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a1d0:	4628      	mov	r0, r5
    a1d2:	f008 ffe9 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1d6:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1d8:	4630      	mov	r0, r6
    a1da:	f008 ffeb 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a1de:	2808      	cmp	r0, #8
    a1e0:	d96d      	bls.n	a2be <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    a1e2:	f106 0008 	add.w	r0, r6, #8
    a1e6:	f008 ffe5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a1ea:	2800      	cmp	r0, #0
    a1ec:	d069      	beq.n	a2c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    a1ee:	4428      	add	r0, r5
    a1f0:	f008 ffda 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a1f4:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a1f6:	4628      	mov	r0, r5
    a1f8:	f008 ffd6 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1fc:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a1fe:	4630      	mov	r0, r6
    a200:	f008 ffd8 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a204:	280a      	cmp	r0, #10
    a206:	d95e      	bls.n	a2c6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a208:	f106 000a 	add.w	r0, r6, #10
    a20c:	f008 ffd2 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a210:	2800      	cmp	r0, #0
    a212:	d05a      	beq.n	a2ca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a214:	4428      	add	r0, r5
    a216:	f008 ffc7 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a21a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a21c:	4628      	mov	r0, r5
    a21e:	f008 ffc3 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a222:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a224:	4630      	mov	r0, r6
    a226:	f008 ffc5 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a22a:	280c      	cmp	r0, #12
    a22c:	d94f      	bls.n	a2ce <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a22e:	f106 000c 	add.w	r0, r6, #12
    a232:	f008 ffbf 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a236:	2800      	cmp	r0, #0
    a238:	d04b      	beq.n	a2d2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a23a:	4428      	add	r0, r5
    a23c:	f008 ffc0 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a240:	b2c0      	uxtb	r0, r0
    a242:	f009 fcd3 	bl	13bec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a246:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a248:	4628      	mov	r0, r5
    a24a:	f008 ffad 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a24e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a250:	4630      	mov	r0, r6
    a252:	f008 ffaf 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a256:	280e      	cmp	r0, #14
    a258:	d93d      	bls.n	a2d6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a25a:	f106 000e 	add.w	r0, r6, #14
    a25e:	f008 ffa9 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a262:	2800      	cmp	r0, #0
    a264:	d039      	beq.n	a2da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a266:	4428      	add	r0, r5
    a268:	f008 ff9e 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a26c:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a26e:	4628      	mov	r0, r5
    a270:	f008 ff9a 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a274:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a276:	4630      	mov	r0, r6
    a278:	f008 ff9c 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a27c:	2810      	cmp	r0, #16
    a27e:	d92e      	bls.n	a2de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a280:	f106 0010 	add.w	r0, r6, #16
    a284:	f008 ff96 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a288:	b358      	cbz	r0, a2e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a28a:	4428      	add	r0, r5
    a28c:	f008 ff8c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a290:	61a0      	str	r0, [r4, #24]
    a292:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a294:	2400      	movs	r4, #0
    a296:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a298:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a29a:	9903      	ldr	r1, [sp, #12]
    a29c:	b119      	cbz	r1, a2a6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a29e:	9802      	ldr	r0, [sp, #8]
    a2a0:	6803      	ldr	r3, [r0, #0]
    a2a2:	685b      	ldr	r3, [r3, #4]
    a2a4:	4798      	blx	r3
}
    a2a6:	4620      	mov	r0, r4
    a2a8:	b004      	add	sp, #16
    a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2ae:	2000      	movs	r0, #0
    a2b0:	e770      	b.n	a194 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2b2:	2000      	movs	r0, #0
    a2b4:	e774      	b.n	a1a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2b6:	2000      	movs	r0, #0
    a2b8:	e783      	b.n	a1c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2ba:	2000      	movs	r0, #0
    a2bc:	e786      	b.n	a1cc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2be:	2000      	movs	r0, #0
    a2c0:	e793      	b.n	a1ea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2c2:	2000      	movs	r0, #0
    a2c4:	e796      	b.n	a1f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2c6:	2000      	movs	r0, #0
    a2c8:	e7a2      	b.n	a210 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2ca:	2000      	movs	r0, #0
    a2cc:	e7a5      	b.n	a21a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2ce:	2000      	movs	r0, #0
    a2d0:	e7b1      	b.n	a236 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2d2:	2000      	movs	r0, #0
    a2d4:	e7b4      	b.n	a240 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2d6:	2000      	movs	r0, #0
    a2d8:	e7c3      	b.n	a262 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2da:	2001      	movs	r0, #1
    a2dc:	e7c6      	b.n	a26c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2de:	2000      	movs	r0, #0
    a2e0:	e7d2      	b.n	a288 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2e2:	2001      	movs	r0, #1
    a2e4:	e7d4      	b.n	a290 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a2e6:	bf00      	nop
    a2e8:	0006aee8 	.word	0x0006aee8
    a2ec:	0006ae90 	.word	0x0006ae90
    a2f0:	0006a9cc 	.word	0x0006a9cc

0000a2f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2f8:	b084      	sub	sp, #16
    a2fa:	4604      	mov	r4, r0
    a2fc:	4688      	mov	r8, r1
    a2fe:	4615      	mov	r5, r2
    a300:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a302:	f009 fc86 	bl	13c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a306:	682b      	ldr	r3, [r5, #0]
    a308:	681b      	ldr	r3, [r3, #0]
    a30a:	2204      	movs	r2, #4
    a30c:	4611      	mov	r1, r2
    a30e:	4628      	mov	r0, r5
    a310:	4798      	blx	r3
    return new (allocated_memory) T();
    a312:	4606      	mov	r6, r0
    a314:	b108      	cbz	r0, a31a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a316:	2300      	movs	r3, #0
    a318:	6003      	str	r3, [r0, #0]
    a31a:	9502      	str	r5, [sp, #8]
    a31c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a31e:	b336      	cbz	r6, a36e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a320:	4620      	mov	r0, r4
    a322:	f008 ff41 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a326:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a328:	4628      	mov	r0, r5
    a32a:	f008 ff43 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a32e:	280a      	cmp	r0, #10
    a330:	d92a      	bls.n	a388 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a332:	f105 000a 	add.w	r0, r5, #10
    a336:	f008 ff3d 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a33a:	b338      	cbz	r0, a38c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a33c:	4420      	add	r0, r4
    a33e:	f009 f802 	bl	13346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a342:	2809      	cmp	r0, #9
    a344:	d128      	bne.n	a398 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a346:	4620      	mov	r0, r4
    a348:	f008 ff2e 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a34c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a34e:	4628      	mov	r0, r5
    a350:	f008 ff30 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a354:	280c      	cmp	r0, #12
    a356:	d91b      	bls.n	a390 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a358:	f105 000c 	add.w	r0, r5, #12
    a35c:	f008 ff2a 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a360:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a362:	b1b8      	cbz	r0, a394 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a364:	4620      	mov	r0, r4
    a366:	f008 ff19 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a36a:	4404      	add	r4, r0
    a36c:	e015      	b.n	a39a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a36e:	4b1d      	ldr	r3, [pc, #116]	; (a3e4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a370:	9301      	str	r3, [sp, #4]
    a372:	f240 734c 	movw	r3, #1868	; 0x74c
    a376:	9300      	str	r3, [sp, #0]
    a378:	4b1b      	ldr	r3, [pc, #108]	; (a3e8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a37a:	4a1c      	ldr	r2, [pc, #112]	; (a3ec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a37c:	4641      	mov	r1, r8
    a37e:	4640      	mov	r0, r8
    a380:	f009 fc64 	bl	13c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a384:	2401      	movs	r4, #1
    a386:	e01e      	b.n	a3c6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a388:	2000      	movs	r0, #0
    a38a:	e7d6      	b.n	a33a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a38c:	2000      	movs	r0, #0
    a38e:	e7d8      	b.n	a342 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a390:	2000      	movs	r0, #0
    a392:	e7e5      	b.n	a360 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a394:	2400      	movs	r4, #0
    a396:	e000      	b.n	a39a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a398:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a39a:	b18c      	cbz	r4, a3c0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a39c:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a39e:	4620      	mov	r0, r4
    a3a0:	f008 ff02 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a3a4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a3a6:	4620      	mov	r0, r4
    a3a8:	f008 ff04 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3ac:	2804      	cmp	r0, #4
    a3ae:	d914      	bls.n	a3da <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a3b0:	1d20      	adds	r0, r4, #4
    a3b2:	f008 feff 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3b6:	b190      	cbz	r0, a3de <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a3b8:	4428      	add	r0, r5
    a3ba:	f008 ffcb 	bl	13354 <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a3be:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a3c0:	2400      	movs	r4, #0
    a3c2:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a3c4:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a3c6:	9903      	ldr	r1, [sp, #12]
    a3c8:	b119      	cbz	r1, a3d2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a3ca:	9802      	ldr	r0, [sp, #8]
    a3cc:	6803      	ldr	r3, [r0, #0]
    a3ce:	685b      	ldr	r3, [r3, #4]
    a3d0:	4798      	blx	r3
  return kTfLiteOk;
}
    a3d2:	4620      	mov	r0, r4
    a3d4:	b004      	add	sp, #16
    a3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3da:	2000      	movs	r0, #0
    a3dc:	e7eb      	b.n	a3b6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3de:	2000      	movs	r0, #0
    a3e0:	e7ed      	b.n	a3be <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a3e2:	bf00      	nop
    a3e4:	0006aee8 	.word	0x0006aee8
    a3e8:	0006ae90 	.word	0x0006ae90
    a3ec:	0006a9cc 	.word	0x0006a9cc

0000a3f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a3f4:	4604      	mov	r4, r0
    a3f6:	4688      	mov	r8, r1
    a3f8:	4691      	mov	r9, r2
    a3fa:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a3fc:	2300      	movs	r3, #0
    a3fe:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a400:	f009 fc33 	bl	13c6a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a404:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a406:	4620      	mov	r0, r4
    a408:	f008 fece 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a40c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a40e:	4638      	mov	r0, r7
    a410:	f008 fed0 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a414:	2808      	cmp	r0, #8
    a416:	d904      	bls.n	a422 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a418:	f107 0008 	add.w	r0, r7, #8
    a41c:	f008 feca 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a420:	e000      	b.n	a424 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a422:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a424:	b120      	cbz	r0, a430 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a426:	4420      	add	r0, r4
    a428:	f008 febe 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a42c:	4607      	mov	r7, r0
    a42e:	e000      	b.n	a432 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a430:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a432:	2d91      	cmp	r5, #145	; 0x91
    a434:	d80d      	bhi.n	a452 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a436:	2d20      	cmp	r5, #32
    a438:	d01c      	beq.n	a474 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a43a:	f8d8 3000 	ldr.w	r3, [r8]
    a43e:	681b      	ldr	r3, [r3, #0]
    a440:	463a      	mov	r2, r7
    a442:	4629      	mov	r1, r5
    a444:	4640      	mov	r0, r8
    a446:	4798      	blx	r3
    a448:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a44a:	b148      	cbz	r0, a460 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a44c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a452:	462a      	mov	r2, r5
    a454:	491c      	ldr	r1, [pc, #112]	; (a4c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a456:	4648      	mov	r0, r9
    a458:	f009 fbe9 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a45c:	2001      	movs	r0, #1
    a45e:	e7f6      	b.n	a44e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a460:	463b      	mov	r3, r7
    a462:	4a1a      	ldr	r2, [pc, #104]	; (a4cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a464:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a468:	4919      	ldr	r1, [pc, #100]	; (a4d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a46a:	4648      	mov	r0, r9
    a46c:	f009 fbdf 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a470:	2001      	movs	r0, #1
    a472:	e7ec      	b.n	a44e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a474:	4620      	mov	r0, r4
    a476:	f008 fe97 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a47a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a47c:	4628      	mov	r0, r5
    a47e:	f008 fe99 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a482:	2806      	cmp	r0, #6
    a484:	d914      	bls.n	a4b0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a486:	1da8      	adds	r0, r5, #6
    a488:	f008 fe94 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a48c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a48e:	b188      	cbz	r0, a4b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a490:	4620      	mov	r0, r4
    a492:	f008 fe83 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a496:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a498:	b171      	cbz	r1, a4b8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a49a:	f8d8 3000 	ldr.w	r3, [r8]
    a49e:	685b      	ldr	r3, [r3, #4]
    a4a0:	463a      	mov	r2, r7
    a4a2:	3104      	adds	r1, #4
    a4a4:	4640      	mov	r0, r8
    a4a6:	4798      	blx	r3
    a4a8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a4aa:	b158      	cbz	r0, a4c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a4ac:	2000      	movs	r0, #0
    a4ae:	e7ce      	b.n	a44e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4b0:	2000      	movs	r0, #0
    a4b2:	e7eb      	b.n	a48c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a4b4:	2100      	movs	r1, #0
    a4b6:	e7ef      	b.n	a498 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a4b8:	4906      	ldr	r1, [pc, #24]	; (a4d4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a4ba:	4648      	mov	r0, r9
    a4bc:	f009 fbb7 	bl	13c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a4c0:	2001      	movs	r0, #1
    a4c2:	e7c4      	b.n	a44e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a4c4:	2001      	movs	r0, #1
    a4c6:	e7c2      	b.n	a44e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a4c8:	0006af30 	.word	0x0006af30
    a4cc:	00069c78 	.word	0x00069c78
    a4d0:	0006af84 	.word	0x0006af84
    a4d4:	0006b028 	.word	0x0006b028

0000a4d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a4d8:	2801      	cmp	r0, #1
    a4da:	d009      	beq.n	a4f0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a4dc:	2803      	cmp	r0, #3
    a4de:	d00c      	beq.n	a4fa <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a4e0:	2802      	cmp	r0, #2
    a4e2:	d00f      	beq.n	a504 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a4e4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a4e8:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a4ea:	4b09      	ldr	r3, [pc, #36]	; (a510 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a4ec:	6013      	str	r3, [r2, #0]
  }
}
    a4ee:	4770      	bx	lr
    *activation_min = 0;
    a4f0:	2300      	movs	r3, #0
    a4f2:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a4f4:	4b06      	ldr	r3, [pc, #24]	; (a510 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a4f6:	6013      	str	r3, [r2, #0]
    a4f8:	4770      	bx	lr
    *activation_min = 0;
    a4fa:	2300      	movs	r3, #0
    a4fc:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a4fe:	4b05      	ldr	r3, [pc, #20]	; (a514 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a500:	6013      	str	r3, [r2, #0]
    a502:	4770      	bx	lr
    *activation_min = -1;
    a504:	4b04      	ldr	r3, [pc, #16]	; (a518 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a506:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a508:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a50c:	6013      	str	r3, [r2, #0]
    a50e:	4770      	bx	lr
    a510:	7f7fffff 	.word	0x7f7fffff
    a514:	40c00000 	.word	0x40c00000
    a518:	bf800000 	.word	0xbf800000

0000a51c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a520:	b0a5      	sub	sp, #148	; 0x94
    a522:	9118      	str	r1, [sp, #96]	; 0x60
    a524:	9219      	str	r2, [sp, #100]	; 0x64
    a526:	461d      	mov	r5, r3
    a528:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    a52c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    a52e:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    a532:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    a536:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    a538:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    a53c:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    a53e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    a542:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    a544:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    a548:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    a54a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    a54e:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    a550:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    a554:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    a556:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a558:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    a55a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    a55c:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a55e:	428a      	cmp	r2, r1
    a560:	f300 8086 	bgt.w	a670 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    a564:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a566:	2a04      	cmp	r2, #4
    a568:	f040 8084 	bne.w	a674 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    a56c:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a570:	2a04      	cmp	r2, #4
    a572:	f040 8081 	bne.w	a678 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    a576:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a57a:	2a04      	cmp	r2, #4
    a57c:	d17e      	bne.n	a67c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    TFLITE_DCHECK_LT(i, size_);
    a57e:	682a      	ldr	r2, [r5, #0]
    a580:	2a00      	cmp	r2, #0
    a582:	dd7d      	ble.n	a680 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a584:	2a05      	cmp	r2, #5
    a586:	dd7d      	ble.n	a684 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    a588:	686a      	ldr	r2, [r5, #4]
    a58a:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a58c:	f8d9 2000 	ldr.w	r2, [r9]
    a590:	2a00      	cmp	r2, #0
    a592:	dd79      	ble.n	a688 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a594:	2a05      	cmp	r2, #5
    a596:	dd79      	ble.n	a68c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    a598:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a59c:	6812      	ldr	r2, [r2, #0]
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a59e:	428a      	cmp	r2, r1
    a5a0:	d177      	bne.n	a692 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a5a2:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    a5a4:	f8d9 2000 	ldr.w	r2, [r9]
    a5a8:	2a00      	cmp	r2, #0
    a5aa:	dd74      	ble.n	a696 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5ac:	2a05      	cmp	r2, #5
    a5ae:	dd74      	ble.n	a69a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    a5b0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a5b4:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a5b6:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    a5b8:	4291      	cmp	r1, r2
    a5ba:	dc71      	bgt.n	a6a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    a5bc:	aa23      	add	r2, sp, #140	; 0x8c
    a5be:	6812      	ldr	r2, [r2, #0]
    a5c0:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    a5c2:	682a      	ldr	r2, [r5, #0]
    a5c4:	2a03      	cmp	r2, #3
    a5c6:	dd6d      	ble.n	a6a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5c8:	2a05      	cmp	r2, #5
    a5ca:	dd6d      	ble.n	a6a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    a5cc:	686a      	ldr	r2, [r5, #4]
    a5ce:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    a5d0:	f8de 2000 	ldr.w	r2, [lr]
    a5d4:	2a03      	cmp	r2, #3
    a5d6:	dd69      	ble.n	a6ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5d8:	2a05      	cmp	r2, #5
    a5da:	dd69      	ble.n	a6b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    a5dc:	f8de 2004 	ldr.w	r2, [lr, #4]
    a5e0:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a5e2:	428a      	cmp	r2, r1
    a5e4:	d167      	bne.n	a6b6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a5e6:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    a5e8:	f8de 2000 	ldr.w	r2, [lr]
    a5ec:	2a03      	cmp	r2, #3
    a5ee:	dd64      	ble.n	a6ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a5f0:	2a05      	cmp	r2, #5
    a5f2:	dd64      	ble.n	a6be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    a5f4:	f8de 2004 	ldr.w	r2, [lr, #4]
    a5f8:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a5fa:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    a5fc:	4291      	cmp	r1, r2
    a5fe:	dc61      	bgt.n	a6c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    a600:	aa21      	add	r2, sp, #132	; 0x84
    a602:	6812      	ldr	r2, [r2, #0]
    a604:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    a606:	f8de 2000 	ldr.w	r2, [lr]
    a60a:	2a00      	cmp	r2, #0
    a60c:	dd5c      	ble.n	a6c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a60e:	2a05      	cmp	r2, #5
    a610:	dd5c      	ble.n	a6cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    a612:	f8de 2004 	ldr.w	r2, [lr, #4]
    a616:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a618:	f8d9 2000 	ldr.w	r2, [r9]
    a61c:	2a03      	cmp	r2, #3
    a61e:	dd58      	ble.n	a6d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a620:	2a05      	cmp	r2, #5
    a622:	dd58      	ble.n	a6d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    a624:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a628:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a62a:	428a      	cmp	r2, r1
    a62c:	d156      	bne.n	a6dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a62e:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    a630:	f8d9 2000 	ldr.w	r2, [r9]
    a634:	2a03      	cmp	r2, #3
    a636:	dd53      	ble.n	a6e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a638:	2a05      	cmp	r2, #5
    a63a:	dd53      	ble.n	a6e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    a63c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a640:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a642:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    a644:	4291      	cmp	r1, r2
    a646:	dc50      	bgt.n	a6ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    a648:	aa1f      	add	r2, sp, #124	; 0x7c
    a64a:	6812      	ldr	r2, [r2, #0]
    a64c:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    a64e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    a650:	2a00      	cmp	r2, #0
    a652:	d051      	beq.n	a6f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a654:	6818      	ldr	r0, [r3, #0]
    a656:	2805      	cmp	r0, #5
    a658:	dd49      	ble.n	a6ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    a65a:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    a65c:	2100      	movs	r1, #0
    int buffer_size = 1;
    a65e:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    a660:	4281      	cmp	r1, r0
    a662:	da46      	bge.n	a6f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    a664:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    a668:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    a66c:	3101      	adds	r1, #1
    a66e:	e7f7      	b.n	a660 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a670:	f00b fcf7 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a674:	f00b fcf5 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a678:	f00b fcf3 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a67c:	f00b fcf1 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a680:	f00b fcef 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a684:	6869      	ldr	r1, [r5, #4]
    a686:	e781      	b.n	a58c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    a688:	f00b fceb 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a68c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a690:	e785      	b.n	a59e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a692:	f00b fce6 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a696:	f00b fce4 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a69a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a69e:	e78a      	b.n	a5b6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    a6a0:	aa22      	add	r2, sp, #136	; 0x88
    a6a2:	e78c      	b.n	a5be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    a6a4:	f00b fcdd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6a8:	6929      	ldr	r1, [r5, #16]
    a6aa:	e791      	b.n	a5d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a6ac:	f00b fcd9 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6b0:	f8de 2010 	ldr.w	r2, [lr, #16]
    a6b4:	e795      	b.n	a5e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a6b6:	f00b fcd4 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a6ba:	f00b fcd2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6be:	f8de 2010 	ldr.w	r2, [lr, #16]
    a6c2:	e79a      	b.n	a5fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    a6c4:	aa20      	add	r2, sp, #128	; 0x80
    a6c6:	e79c      	b.n	a602 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    a6c8:	f00b fccb 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6cc:	f8de 1004 	ldr.w	r1, [lr, #4]
    a6d0:	e7a2      	b.n	a618 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    a6d2:	f00b fcc6 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a6da:	e7a6      	b.n	a62a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a6dc:	f00b fcc1 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a6e0:	f00b fcbf 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6e4:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a6e8:	e7ab      	b.n	a642 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    a6ea:	aa1e      	add	r2, sp, #120	; 0x78
    a6ec:	e7ad      	b.n	a64a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a6ee:	3304      	adds	r3, #4
    a6f0:	e7b4      	b.n	a65c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a6f2:	9b05      	ldr	r3, [sp, #20]
    a6f4:	429c      	cmp	r4, r3
    a6f6:	d160      	bne.n	a7ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    a6f8:	682b      	ldr	r3, [r5, #0]
    a6fa:	2b01      	cmp	r3, #1
    a6fc:	dd5f      	ble.n	a7be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6fe:	2b05      	cmp	r3, #5
    a700:	dd5f      	ble.n	a7c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    a702:	686b      	ldr	r3, [r5, #4]
    a704:	685b      	ldr	r3, [r3, #4]
    a706:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    a708:	682b      	ldr	r3, [r5, #0]
    a70a:	2b02      	cmp	r3, #2
    a70c:	dd5c      	ble.n	a7c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a70e:	2b05      	cmp	r3, #5
    a710:	dd5c      	ble.n	a7cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    a712:	686b      	ldr	r3, [r5, #4]
    a714:	689b      	ldr	r3, [r3, #8]
    a716:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    a718:	f8de 3000 	ldr.w	r3, [lr]
    a71c:	2b01      	cmp	r3, #1
    a71e:	dd58      	ble.n	a7d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a720:	2b05      	cmp	r3, #5
    a722:	dd58      	ble.n	a7d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    a724:	f8de 3004 	ldr.w	r3, [lr, #4]
    a728:	685b      	ldr	r3, [r3, #4]
    a72a:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    a72c:	f8de 3000 	ldr.w	r3, [lr]
    a730:	2b02      	cmp	r3, #2
    a732:	dd54      	ble.n	a7de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a734:	2b05      	cmp	r3, #5
    a736:	dd54      	ble.n	a7e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    a738:	f8de 3004 	ldr.w	r3, [lr, #4]
    a73c:	689b      	ldr	r3, [r3, #8]
    a73e:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    a740:	f8d9 3000 	ldr.w	r3, [r9]
    a744:	2b01      	cmp	r3, #1
    a746:	dd50      	ble.n	a7ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a748:	2b05      	cmp	r3, #5
    a74a:	dd50      	ble.n	a7ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    a74c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a750:	685b      	ldr	r3, [r3, #4]
    a752:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    a754:	f8d9 3000 	ldr.w	r3, [r9]
    a758:	2b02      	cmp	r3, #2
    a75a:	dd4c      	ble.n	a7f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a75c:	2b05      	cmp	r3, #5
    a75e:	dd4c      	ble.n	a7fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    a760:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a764:	689b      	ldr	r3, [r3, #8]
    a766:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    a768:	2300      	movs	r3, #0
    a76a:	9300      	str	r3, [sp, #0]
    a76c:	46f0      	mov	r8, lr
    a76e:	464c      	mov	r4, r9
    a770:	46a9      	mov	r9, r5
    a772:	9b00      	ldr	r3, [sp, #0]
    a774:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a776:	4293      	cmp	r3, r2
    a778:	f280 8190 	bge.w	aa9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a77c:	2300      	movs	r3, #0
    a77e:	9301      	str	r3, [sp, #4]
    a780:	46ce      	mov	lr, r9
    a782:	46c1      	mov	r9, r8
    a784:	9b01      	ldr	r3, [sp, #4]
    a786:	9907      	ldr	r1, [sp, #28]
    a788:	428b      	cmp	r3, r1
    a78a:	f280 8181 	bge.w	aa90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    a78e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a790:	fb02 f303 	mul.w	r3, r2, r3
    a794:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a796:	1a9b      	subs	r3, r3, r2
    a798:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a79a:	2300      	movs	r3, #0
    a79c:	9304      	str	r3, [sp, #16]
    a79e:	46f0      	mov	r8, lr
    a7a0:	9b04      	ldr	r3, [sp, #16]
    a7a2:	9906      	ldr	r1, [sp, #24]
    a7a4:	428b      	cmp	r3, r1
    a7a6:	f280 816e 	bge.w	aa86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    a7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a7ac:	fb02 f303 	mul.w	r3, r2, r3
    a7b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a7b2:	1a9b      	subs	r3, r3, r2
    a7b4:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    a7b6:	2100      	movs	r1, #0
    a7b8:	e135      	b.n	aa26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a7ba:	f00b fc52 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    a7be:	f00b fc50 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7c2:	68ab      	ldr	r3, [r5, #8]
    a7c4:	930b      	str	r3, [sp, #44]	; 0x2c
    a7c6:	e79f      	b.n	a708 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    a7c8:	f00b fc4b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7cc:	68eb      	ldr	r3, [r5, #12]
    a7ce:	930a      	str	r3, [sp, #40]	; 0x28
    a7d0:	e7a2      	b.n	a718 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    a7d2:	f00b fc46 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7d6:	f8de 3008 	ldr.w	r3, [lr, #8]
    a7da:	9309      	str	r3, [sp, #36]	; 0x24
    a7dc:	e7a6      	b.n	a72c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    a7de:	f00b fc40 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7e2:	f8de 300c 	ldr.w	r3, [lr, #12]
    a7e6:	9308      	str	r3, [sp, #32]
    a7e8:	e7aa      	b.n	a740 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    a7ea:	f00b fc3a 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a7f2:	9307      	str	r3, [sp, #28]
    a7f4:	e7ae      	b.n	a754 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    a7f6:	f00b fc34 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7fa:	f8d9 300c 	ldr.w	r3, [r9, #12]
    a7fe:	9306      	str	r3, [sp, #24]
    a800:	e7b2      	b.n	a768 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a802:	f00b fc2e 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a806:	f00b fc2c 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a80a:	f00b fc2a 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a80e:	f00b fc28 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a812:	f00b fc26 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a816:	f00b fc24 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a81a:	f00b fc22 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a81e:	f00b fc20 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a822:	f00b fc1e 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a826:	f00b fc1c 	bl	16062 <abort>
    a82a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a82c:	3501      	adds	r5, #1
    a82e:	9b08      	ldr	r3, [sp, #32]
    a830:	429d      	cmp	r5, r3
    a832:	da68      	bge.n	a906 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    a834:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a836:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a838:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    a83c:	2a00      	cmp	r2, #0
    a83e:	dbf5      	blt.n	a82c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a842:	429a      	cmp	r2, r3
    a844:	daf2      	bge.n	a82c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a846:	2f00      	cmp	r7, #0
    a848:	dbf0      	blt.n	a82c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a84c:	429f      	cmp	r7, r3
    a84e:	daed      	bge.n	a82c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a850:	2300      	movs	r3, #0
    a852:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    a854:	9c16      	ldr	r4, [sp, #88]	; 0x58
    a856:	42a3      	cmp	r3, r4
    a858:	dae7      	bge.n	a82a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a85a:	f8d8 4000 	ldr.w	r4, [r8]
    a85e:	2c04      	cmp	r4, #4
    a860:	d1cf      	bne.n	a802 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a862:	2800      	cmp	r0, #0
    a864:	dbcf      	blt.n	a806 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    a866:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a86a:	42a0      	cmp	r0, r4
    a86c:	dacb      	bge.n	a806 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a86e:	2f00      	cmp	r7, #0
    a870:	dbcb      	blt.n	a80a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    a872:	f8d8 a008 	ldr.w	sl, [r8, #8]
    a876:	4557      	cmp	r7, sl
    a878:	dac7      	bge.n	a80a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a87a:	2a00      	cmp	r2, #0
    a87c:	dbc7      	blt.n	a80e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    a87e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    a882:	4572      	cmp	r2, lr
    a884:	dac3      	bge.n	a80e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a886:	2b00      	cmp	r3, #0
    a888:	dbc3      	blt.n	a812 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    a88a:	f8d8 c010 	ldr.w	ip, [r8, #16]
    a88e:	4563      	cmp	r3, ip
    a890:	dabf      	bge.n	a812 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a892:	fb0a 7a00 	mla	sl, sl, r0, r7
    a896:	fb0a 2a0e 	mla	sl, sl, lr, r2
    a89a:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    a89e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    a8a0:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a8a4:	f8d9 4000 	ldr.w	r4, [r9]
    a8a8:	2c04      	cmp	r4, #4
    a8aa:	d1b4      	bne.n	a816 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a8ac:	2900      	cmp	r1, #0
    a8ae:	dbb4      	blt.n	a81a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    a8b0:	f8d9 4004 	ldr.w	r4, [r9, #4]
    a8b4:	42a1      	cmp	r1, r4
    a8b6:	dab0      	bge.n	a81a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a8b8:	2e00      	cmp	r6, #0
    a8ba:	dbb0      	blt.n	a81e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    a8bc:	f8d9 c008 	ldr.w	ip, [r9, #8]
    a8c0:	4566      	cmp	r6, ip
    a8c2:	daac      	bge.n	a81e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a8c4:	2d00      	cmp	r5, #0
    a8c6:	dbac      	blt.n	a822 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    a8c8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    a8cc:	455d      	cmp	r5, fp
    a8ce:	daa8      	bge.n	a822 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	dba8      	blt.n	a826 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    a8d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
    a8d8:	4553      	cmp	r3, sl
    a8da:	daa4      	bge.n	a826 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a8dc:	fb0c 6c01 	mla	ip, ip, r1, r6
    a8e0:	fb0c 5c0b 	mla	ip, ip, fp, r5
    a8e4:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    a8e8:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    a8ea:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    a8ee:	fb0c fe0e 	mul.w	lr, ip, lr
    a8f2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    a8f6:	eb1a 0a0e 	adds.w	sl, sl, lr
    a8fa:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    a8fe:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    a902:	3301      	adds	r3, #1
    a904:	e7a6      	b.n	a854 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    a906:	3601      	adds	r6, #1
    a908:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a90a:	429e      	cmp	r6, r3
    a90c:	da06      	bge.n	a91c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    a90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a910:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a912:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a916:	2500      	movs	r5, #0
    a918:	9800      	ldr	r0, [sp, #0]
    a91a:	e788      	b.n	a82e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    a91c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    a920:	9832      	ldr	r0, [sp, #200]	; 0xc8
    a922:	b130      	cbz	r0, a932 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    a924:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    a928:	6828      	ldr	r0, [r5, #0]
    a92a:	686d      	ldr	r5, [r5, #4]
    a92c:	1812      	adds	r2, r2, r0
    a92e:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    a932:	9818      	ldr	r0, [sp, #96]	; 0x60
    a934:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    a938:	9d19      	ldr	r5, [sp, #100]	; 0x64
    a93a:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
    a93e:	2800      	cmp	r0, #0
    a940:	db7a      	blt.n	aa38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    a942:	f105 061f 	add.w	r6, r5, #31
    a946:	2e26      	cmp	r6, #38	; 0x26
    a948:	d87c      	bhi.n	aa44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    a94a:	1c16      	adds	r6, r2, #0
    a94c:	960c      	str	r6, [sp, #48]	; 0x30
    a94e:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    a952:	960d      	str	r6, [sp, #52]	; 0x34
    a954:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    a958:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    a95c:	bf08      	it	eq
    a95e:	2e00      	cmpeq	r6, #0
    a960:	d276      	bcs.n	aa50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    a962:	4e50      	ldr	r6, [pc, #320]	; (aaa4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    a964:	42b0      	cmp	r0, r6
    a966:	dc79      	bgt.n	aa5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    a968:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    a96c:	1400      	asrs	r0, r0, #16
                                   : 0x7FFF;
  int total_shift = 15 - shift;
    a96e:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    a972:	17c7      	asrs	r7, r0, #31
    a974:	fb02 f607 	mul.w	r6, r2, r7
    a978:	fb00 6603 	mla	r6, r0, r3, r6
    a97c:	fba2 2300 	umull	r2, r3, r2, r0
    a980:	4433      	add	r3, r6
    a982:	f1c5 070e 	rsb	r7, r5, #14
    a986:	2001      	movs	r0, #1
    a988:	f1a7 0a20 	sub.w	sl, r7, #32
    a98c:	f1c7 0e20 	rsb	lr, r7, #32
    a990:	fa00 f60a 	lsl.w	r6, r0, sl
    a994:	fa20 fe0e 	lsr.w	lr, r0, lr
    a998:	ea46 060e 	orr.w	r6, r6, lr
    a99c:	40b8      	lsls	r0, r7
    a99e:	1810      	adds	r0, r2, r0
    a9a0:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    a9a4:	3511      	adds	r5, #17
    a9a6:	f1bc 0320 	subs.w	r3, ip, #32
    a9aa:	fa20 f00c 	lsr.w	r0, r0, ip
    a9ae:	fa06 f505 	lsl.w	r5, r6, r5
    a9b2:	ea40 0005 	orr.w	r0, r0, r5
    a9b6:	d402      	bmi.n	a9be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    a9b8:	fa46 f303 	asr.w	r3, r6, r3
    a9bc:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    a9be:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    a9c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a9c2:	4283      	cmp	r3, r0
    a9c4:	dc4d      	bgt.n	aa62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    a9c6:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    a9c8:	681a      	ldr	r2, [r3, #0]
    a9ca:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    a9cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a9ce:	429a      	cmp	r2, r3
    a9d0:	dc49      	bgt.n	aa66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    a9d2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    a9d4:	681a      	ldr	r2, [r3, #0]
    a9d6:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    a9d8:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a9da:	2b04      	cmp	r3, #4
    a9dc:	d145      	bne.n	aa6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a9de:	9800      	ldr	r0, [sp, #0]
    a9e0:	2800      	cmp	r0, #0
    a9e2:	db44      	blt.n	aa6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    a9e4:	6863      	ldr	r3, [r4, #4]
    a9e6:	4298      	cmp	r0, r3
    a9e8:	da41      	bge.n	aa6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a9ea:	9b01      	ldr	r3, [sp, #4]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	db40      	blt.n	aa72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    a9f0:	68a5      	ldr	r5, [r4, #8]
    a9f2:	42ab      	cmp	r3, r5
    a9f4:	da3d      	bge.n	aa72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a9f6:	9b04      	ldr	r3, [sp, #16]
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	db3c      	blt.n	aa76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    a9fc:	68e0      	ldr	r0, [r4, #12]
    a9fe:	4283      	cmp	r3, r0
    aa00:	da39      	bge.n	aa76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aa02:	2900      	cmp	r1, #0
    aa04:	db39      	blt.n	aa7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    aa06:	6923      	ldr	r3, [r4, #16]
    aa08:	4299      	cmp	r1, r3
    aa0a:	da36      	bge.n	aa7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    aa0c:	9e00      	ldr	r6, [sp, #0]
    aa0e:	9f01      	ldr	r7, [sp, #4]
    aa10:	fb05 7506 	mla	r5, r5, r6, r7
    aa14:	9e04      	ldr	r6, [sp, #16]
    aa16:	fb05 6000 	mla	r0, r5, r0, r6
    aa1a:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    aa1e:	9834      	ldr	r0, [sp, #208]	; 0xd0
    aa20:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    aa24:	3101      	adds	r1, #1
    aa26:	9b05      	ldr	r3, [sp, #20]
    aa28:	4299      	cmp	r1, r3
    aa2a:	da28      	bge.n	aa7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    aa2c:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    aa2e:	2200      	movs	r2, #0
    aa30:	2300      	movs	r3, #0
    aa32:	e9cd 2302 	strd	r2, r3, [sp, #8]
    aa36:	e767      	b.n	a908 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    aa38:	4b1b      	ldr	r3, [pc, #108]	; (aaa8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    aa3a:	4a1c      	ldr	r2, [pc, #112]	; (aaac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    aa3c:	21b3      	movs	r1, #179	; 0xb3
    aa3e:	481c      	ldr	r0, [pc, #112]	; (aab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    aa40:	f005 ff3e 	bl	108c0 <__assert_func>
  assert(shift >= -31 && shift < 8);
    aa44:	4b1b      	ldr	r3, [pc, #108]	; (aab4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    aa46:	4a19      	ldr	r2, [pc, #100]	; (aaac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    aa48:	21b4      	movs	r1, #180	; 0xb4
    aa4a:	4819      	ldr	r0, [pc, #100]	; (aab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    aa4c:	f005 ff38 	bl	108c0 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    aa50:	4b19      	ldr	r3, [pc, #100]	; (aab8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    aa52:	4a16      	ldr	r2, [pc, #88]	; (aaac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    aa54:	21b5      	movs	r1, #181	; 0xb5
    aa56:	4816      	ldr	r0, [pc, #88]	; (aab0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    aa58:	f005 ff32 	bl	108c0 <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    aa5c:	f647 70ff 	movw	r0, #32767	; 0x7fff
    aa60:	e785      	b.n	a96e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    aa62:	ab1d      	add	r3, sp, #116	; 0x74
    aa64:	e7b0      	b.n	a9c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    aa66:	ab1c      	add	r3, sp, #112	; 0x70
    aa68:	e7b4      	b.n	a9d4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aa6a:	f00b fafa 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aa6e:	f00b faf8 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aa72:	f00b faf6 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    aa76:	f00b faf4 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aa7a:	f00b faf2 	bl	16062 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    aa7e:	9b04      	ldr	r3, [sp, #16]
    aa80:	3301      	adds	r3, #1
    aa82:	9304      	str	r3, [sp, #16]
    aa84:	e68c      	b.n	a7a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    aa86:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    aa88:	9b01      	ldr	r3, [sp, #4]
    aa8a:	3301      	adds	r3, #1
    aa8c:	9301      	str	r3, [sp, #4]
    aa8e:	e679      	b.n	a784 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    aa90:	46c8      	mov	r8, r9
    aa92:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    aa94:	9b00      	ldr	r3, [sp, #0]
    aa96:	3301      	adds	r3, #1
    aa98:	9300      	str	r3, [sp, #0]
    aa9a:	e66a      	b.n	a772 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    aa9c:	b025      	add	sp, #148	; 0x94
    aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaa2:	bf00      	nop
    aaa4:	7ffeffff 	.word	0x7ffeffff
    aaa8:	0006b060 	.word	0x0006b060
    aaac:	0006b07c 	.word	0x0006b07c
    aab0:	0006b0c4 	.word	0x0006b0c4
    aab4:	0006b114 	.word	0x0006b114
    aab8:	0006b130 	.word	0x0006b130

0000aabc <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    aabc:	b470      	push	{r4, r5, r6}
    aabe:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    aac0:	4604      	mov	r4, r0
    aac2:	4d05      	ldr	r5, [pc, #20]	; (aad8 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    aac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    aac8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    aacc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    aad0:	4630      	mov	r0, r6
    aad2:	bc70      	pop	{r4, r5, r6}
    aad4:	4770      	bx	lr
    aad6:	bf00      	nop
    aad8:	00016fe0 	.word	0x00016fe0

0000aadc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aae0:	b0a7      	sub	sp, #156	; 0x9c
    aae2:	911a      	str	r1, [sp, #104]	; 0x68
    aae4:	921b      	str	r2, [sp, #108]	; 0x6c
    aae6:	469a      	mov	sl, r3
    aae8:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    aaea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    aaec:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    aaf0:	6942      	ldr	r2, [r0, #20]
    aaf2:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    aaf4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    aaf8:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    aafa:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    aafe:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    ab00:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    ab04:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    ab06:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    ab0a:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    ab0c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    ab10:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    ab12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    ab16:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    ab18:	69c2      	ldr	r2, [r0, #28]
    ab1a:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    ab1c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ab1e:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    ab20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ab22:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ab24:	4291      	cmp	r1, r2
    ab26:	f300 8082 	bgt.w	ac2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    ab2a:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ab2e:	2a04      	cmp	r2, #4
    ab30:	d17f      	bne.n	ac32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    ab32:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ab34:	2a04      	cmp	r2, #4
    ab36:	d17e      	bne.n	ac36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    ab38:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ab3c:	2a04      	cmp	r2, #4
    ab3e:	d17c      	bne.n	ac3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    ab40:	f8da 2000 	ldr.w	r2, [sl]
    ab44:	2a00      	cmp	r2, #0
    ab46:	dd7a      	ble.n	ac3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab48:	2a05      	cmp	r2, #5
    ab4a:	dd7a      	ble.n	ac42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    ab4c:	f8da 2004 	ldr.w	r2, [sl, #4]
    ab50:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    ab52:	f8d8 1000 	ldr.w	r1, [r8]
    ab56:	2900      	cmp	r1, #0
    ab58:	dd76      	ble.n	ac48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab5a:	2905      	cmp	r1, #5
    ab5c:	dd76      	ble.n	ac4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    ab5e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ab62:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ab64:	4291      	cmp	r1, r2
    ab66:	d174      	bne.n	ac52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ab68:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    ab6a:	f8d8 1000 	ldr.w	r1, [r8]
    ab6e:	2900      	cmp	r1, #0
    ab70:	dd71      	ble.n	ac56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab72:	2905      	cmp	r1, #5
    ab74:	dd71      	ble.n	ac5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    ab76:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ab7a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ab7c:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    ab7e:	428a      	cmp	r2, r1
    ab80:	dc6e      	bgt.n	ac60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    ab82:	aa25      	add	r2, sp, #148	; 0x94
    ab84:	6812      	ldr	r2, [r2, #0]
    ab86:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    ab88:	f8da 2000 	ldr.w	r2, [sl]
    ab8c:	2a03      	cmp	r2, #3
    ab8e:	dd69      	ble.n	ac64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ab90:	2a05      	cmp	r2, #5
    ab92:	dd69      	ble.n	ac68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    ab94:	f8da 2004 	ldr.w	r2, [sl, #4]
    ab98:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    ab9a:	6839      	ldr	r1, [r7, #0]
    ab9c:	2903      	cmp	r1, #3
    ab9e:	dd66      	ble.n	ac6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aba0:	2905      	cmp	r1, #5
    aba2:	dd66      	ble.n	ac72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    aba4:	6879      	ldr	r1, [r7, #4]
    aba6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    aba8:	4291      	cmp	r1, r2
    abaa:	d164      	bne.n	ac76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    abac:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    abae:	6839      	ldr	r1, [r7, #0]
    abb0:	2903      	cmp	r1, #3
    abb2:	dd62      	ble.n	ac7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abb4:	2905      	cmp	r1, #5
    abb6:	dd62      	ble.n	ac7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    abb8:	6879      	ldr	r1, [r7, #4]
    abba:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    abbc:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    abbe:	428a      	cmp	r2, r1
    abc0:	dc5f      	bgt.n	ac82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    abc2:	aa23      	add	r2, sp, #140	; 0x8c
    abc4:	6812      	ldr	r2, [r2, #0]
    abc6:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    abc8:	683a      	ldr	r2, [r7, #0]
    abca:	2a00      	cmp	r2, #0
    abcc:	dd5b      	ble.n	ac86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abce:	2a05      	cmp	r2, #5
    abd0:	dd5b      	ble.n	ac8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    abd2:	687a      	ldr	r2, [r7, #4]
    abd4:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    abd6:	f8d8 1000 	ldr.w	r1, [r8]
    abda:	2903      	cmp	r1, #3
    abdc:	dd57      	ble.n	ac8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abde:	2905      	cmp	r1, #5
    abe0:	dd57      	ble.n	ac92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    abe2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    abe6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    abe8:	4291      	cmp	r1, r2
    abea:	d155      	bne.n	ac98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    abec:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    abee:	f8d8 1000 	ldr.w	r1, [r8]
    abf2:	2903      	cmp	r1, #3
    abf4:	dd52      	ble.n	ac9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    abf6:	2905      	cmp	r1, #5
    abf8:	dd52      	ble.n	aca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    abfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
    abfe:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ac00:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    ac02:	428a      	cmp	r2, r1
    ac04:	dc4f      	bgt.n	aca6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    ac06:	aa21      	add	r2, sp, #132	; 0x84
    ac08:	6812      	ldr	r2, [r2, #0]
    ac0a:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    ac0c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    ac0e:	2a00      	cmp	r2, #0
    ac10:	d050      	beq.n	acb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ac12:	681c      	ldr	r4, [r3, #0]
    ac14:	2c05      	cmp	r4, #5
    ac16:	dd48      	ble.n	acaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    ac18:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    ac1a:	2200      	movs	r2, #0
    int buffer_size = 1;
    ac1c:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    ac1e:	42a2      	cmp	r2, r4
    ac20:	da45      	bge.n	acae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    ac22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ac26:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    ac2a:	3201      	adds	r2, #1
    ac2c:	e7f7      	b.n	ac1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ac2e:	f00b fa18 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ac32:	f00b fa16 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ac36:	f00b fa14 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ac3a:	f00b fa12 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ac3e:	f00b fa10 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac42:	f8da 2004 	ldr.w	r2, [sl, #4]
    ac46:	e784      	b.n	ab52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    ac48:	f00b fa0b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ac50:	e788      	b.n	ab64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ac52:	f00b fa06 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ac56:	f00b fa04 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ac5e:	e78d      	b.n	ab7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    ac60:	aa24      	add	r2, sp, #144	; 0x90
    ac62:	e78f      	b.n	ab84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    ac64:	f00b f9fd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac68:	f8da 2010 	ldr.w	r2, [sl, #16]
    ac6c:	e795      	b.n	ab9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    ac6e:	f00b f9f8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac72:	6939      	ldr	r1, [r7, #16]
    ac74:	e798      	b.n	aba8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ac76:	f00b f9f4 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ac7a:	f00b f9f2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac7e:	6939      	ldr	r1, [r7, #16]
    ac80:	e79c      	b.n	abbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    ac82:	aa22      	add	r2, sp, #136	; 0x88
    ac84:	e79e      	b.n	abc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    ac86:	f00b f9ec 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac8a:	687a      	ldr	r2, [r7, #4]
    ac8c:	e7a3      	b.n	abd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    ac8e:	f00b f9e8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac92:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ac96:	e7a7      	b.n	abe8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ac98:	f00b f9e3 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ac9c:	f00b f9e1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aca0:	f8d8 1010 	ldr.w	r1, [r8, #16]
    aca4:	e7ac      	b.n	ac00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    aca6:	aa20      	add	r2, sp, #128	; 0x80
    aca8:	e7ae      	b.n	ac08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    acaa:	3304      	adds	r3, #4
    acac:	e7b5      	b.n	ac1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    acae:	9b03      	ldr	r3, [sp, #12]
    acb0:	4299      	cmp	r1, r3
    acb2:	d167      	bne.n	ad84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    acb4:	f8da 3000 	ldr.w	r3, [sl]
    acb8:	2b01      	cmp	r3, #1
    acba:	dd65      	ble.n	ad88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acbc:	2b05      	cmp	r3, #5
    acbe:	dd65      	ble.n	ad8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    acc0:	f8da 3004 	ldr.w	r3, [sl, #4]
    acc4:	685b      	ldr	r3, [r3, #4]
    acc6:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    acc8:	f8da 3000 	ldr.w	r3, [sl]
    accc:	2b02      	cmp	r3, #2
    acce:	dd61      	ble.n	ad94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acd0:	2b05      	cmp	r3, #5
    acd2:	dd61      	ble.n	ad98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    acd4:	f8da 3004 	ldr.w	r3, [sl, #4]
    acd8:	689b      	ldr	r3, [r3, #8]
    acda:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    acdc:	683b      	ldr	r3, [r7, #0]
    acde:	2b01      	cmp	r3, #1
    ace0:	dd5e      	ble.n	ada0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ace2:	2b05      	cmp	r3, #5
    ace4:	dd5e      	ble.n	ada4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    ace6:	687b      	ldr	r3, [r7, #4]
    ace8:	685b      	ldr	r3, [r3, #4]
    acea:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    acec:	683b      	ldr	r3, [r7, #0]
    acee:	2b02      	cmp	r3, #2
    acf0:	dd5b      	ble.n	adaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acf2:	2b05      	cmp	r3, #5
    acf4:	dd5b      	ble.n	adae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    acf6:	687b      	ldr	r3, [r7, #4]
    acf8:	689b      	ldr	r3, [r3, #8]
    acfa:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    acfc:	f8d8 3000 	ldr.w	r3, [r8]
    ad00:	2b01      	cmp	r3, #1
    ad02:	dd57      	ble.n	adb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad04:	2b05      	cmp	r3, #5
    ad06:	dd57      	ble.n	adb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    ad08:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ad0c:	685b      	ldr	r3, [r3, #4]
    ad0e:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    ad10:	f8d8 3000 	ldr.w	r3, [r8]
    ad14:	2b02      	cmp	r3, #2
    ad16:	dd53      	ble.n	adc0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad18:	2b05      	cmp	r3, #5
    ad1a:	dd53      	ble.n	adc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    ad1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ad20:	689b      	ldr	r3, [r3, #8]
    ad22:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    ad24:	f04f 0b00 	mov.w	fp, #0
    ad28:	46d1      	mov	r9, sl
    ad2a:	46ba      	mov	sl, r7
    ad2c:	4647      	mov	r7, r8
    ad2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ad30:	459b      	cmp	fp, r3
    ad32:	f280 81cd 	bge.w	b0d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ad36:	2300      	movs	r3, #0
    ad38:	9301      	str	r3, [sp, #4]
    ad3a:	46c8      	mov	r8, r9
    ad3c:	46d1      	mov	r9, sl
    ad3e:	46da      	mov	sl, fp
    ad40:	46bb      	mov	fp, r7
    ad42:	9b01      	ldr	r3, [sp, #4]
    ad44:	9905      	ldr	r1, [sp, #20]
    ad46:	428b      	cmp	r3, r1
    ad48:	f280 81bb 	bge.w	b0c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    ad4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad4e:	fb02 f303 	mul.w	r3, r2, r3
    ad52:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ad54:	1a9b      	subs	r3, r3, r2
    ad56:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ad58:	2300      	movs	r3, #0
    ad5a:	9302      	str	r3, [sp, #8]
    ad5c:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    ad60:	46c3      	mov	fp, r8
    ad62:	46c8      	mov	r8, r9
    ad64:	46d1      	mov	r9, sl
    ad66:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    ad6a:	9b02      	ldr	r3, [sp, #8]
    ad6c:	9904      	ldr	r1, [sp, #16]
    ad6e:	428b      	cmp	r3, r1
    ad70:	f280 819c 	bge.w	b0ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    ad74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad76:	fb02 f303 	mul.w	r3, r2, r3
    ad7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ad7c:	1a9b      	subs	r3, r3, r2
    ad7e:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    ad80:	2400      	movs	r4, #0
    ad82:	e157      	b.n	b034 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    ad84:	f00b f96d 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ad88:	f00b f96b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad8c:	f8da 3008 	ldr.w	r3, [sl, #8]
    ad90:	9309      	str	r3, [sp, #36]	; 0x24
    ad92:	e799      	b.n	acc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    ad94:	f00b f965 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad98:	f8da 300c 	ldr.w	r3, [sl, #12]
    ad9c:	9308      	str	r3, [sp, #32]
    ad9e:	e79d      	b.n	acdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    ada0:	f00b f95f 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ada4:	68bb      	ldr	r3, [r7, #8]
    ada6:	9307      	str	r3, [sp, #28]
    ada8:	e7a0      	b.n	acec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    adaa:	f00b f95a 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	9306      	str	r3, [sp, #24]
    adb2:	e7a3      	b.n	acfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    adb4:	f00b f955 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    adb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    adbc:	9305      	str	r3, [sp, #20]
    adbe:	e7a7      	b.n	ad10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    adc0:	f00b f94f 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    adc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    adc8:	9304      	str	r3, [sp, #16]
    adca:	e7ab      	b.n	ad24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    adcc:	f00b f949 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    add0:	f00b f947 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    add4:	f00b f945 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    add8:	f00b f943 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    addc:	f00b f941 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ade0:	f00b f93f 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ade4:	f00b f93d 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ade8:	f00b f93b 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    adec:	f00b f939 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    adf0:	f00b f937 	bl	16062 <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    adf4:	3201      	adds	r2, #1
    adf6:	9b06      	ldr	r3, [sp, #24]
    adf8:	429a      	cmp	r2, r3
    adfa:	da63      	bge.n	aec4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    adfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    adfe:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae00:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    ae04:	2800      	cmp	r0, #0
    ae06:	dbf5      	blt.n	adf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ae08:	9b08      	ldr	r3, [sp, #32]
    ae0a:	4298      	cmp	r0, r3
    ae0c:	daf2      	bge.n	adf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ae0e:	2900      	cmp	r1, #0
    ae10:	dbf0      	blt.n	adf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ae12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae14:	4299      	cmp	r1, r3
    ae16:	daed      	bge.n	adf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    ae18:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    ae1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    ae1c:	42ab      	cmp	r3, r5
    ae1e:	dae9      	bge.n	adf4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    ae20:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ae24:	2d04      	cmp	r5, #4
    ae26:	d1d1      	bne.n	adcc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ae28:	f1b9 0f00 	cmp.w	r9, #0
    ae2c:	dbd0      	blt.n	add0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    ae2e:	f8db 5004 	ldr.w	r5, [fp, #4]
    ae32:	45a9      	cmp	r9, r5
    ae34:	dacc      	bge.n	add0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ae36:	2900      	cmp	r1, #0
    ae38:	dbcc      	blt.n	add4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    ae3a:	f8db c008 	ldr.w	ip, [fp, #8]
    ae3e:	4561      	cmp	r1, ip
    ae40:	dac8      	bge.n	add4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ae42:	2800      	cmp	r0, #0
    ae44:	dbc8      	blt.n	add8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    ae46:	f8db 700c 	ldr.w	r7, [fp, #12]
    ae4a:	42b8      	cmp	r0, r7
    ae4c:	dac4      	bge.n	add8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ae4e:	2b00      	cmp	r3, #0
    ae50:	dbc4      	blt.n	addc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    ae52:	f8db 5010 	ldr.w	r5, [fp, #16]
    ae56:	42ab      	cmp	r3, r5
    ae58:	dac0      	bge.n	addc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ae5a:	fb0c 1c09 	mla	ip, ip, r9, r1
    ae5e:	fb0c 0707 	mla	r7, ip, r7, r0
    ae62:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    ae66:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    ae68:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    ae6a:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ae6e:	2d04      	cmp	r5, #4
    ae70:	d1b6      	bne.n	ade0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ae72:	2c00      	cmp	r4, #0
    ae74:	dbb6      	blt.n	ade4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    ae76:	f8d8 5004 	ldr.w	r5, [r8, #4]
    ae7a:	42ac      	cmp	r4, r5
    ae7c:	dab2      	bge.n	ade4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ae7e:	2e00      	cmp	r6, #0
    ae80:	dbb2      	blt.n	ade8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    ae82:	f8d8 e008 	ldr.w	lr, [r8, #8]
    ae86:	4576      	cmp	r6, lr
    ae88:	daae      	bge.n	ade8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ae8a:	2a00      	cmp	r2, #0
    ae8c:	dbae      	blt.n	adec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    ae8e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    ae92:	4562      	cmp	r2, ip
    ae94:	daaa      	bge.n	adec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ae96:	2b00      	cmp	r3, #0
    ae98:	dbaa      	blt.n	adf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    ae9a:	f8d8 5010 	ldr.w	r5, [r8, #16]
    ae9e:	42ab      	cmp	r3, r5
    aea0:	daa6      	bge.n	adf0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    aea2:	fb0e 6e04 	mla	lr, lr, r4, r6
    aea6:	fb0e 2c0c 	mla	ip, lr, ip, r2
    aeaa:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    aeae:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    aeb0:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    aeb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aeb6:	442f      	add	r7, r5
    aeb8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    aeba:	fb0c 5507 	mla	r5, ip, r7, r5
    aebe:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    aec0:	3301      	adds	r3, #1
    aec2:	e7aa      	b.n	ae1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    aec4:	3601      	adds	r6, #1
    aec6:	9b07      	ldr	r3, [sp, #28]
    aec8:	429e      	cmp	r6, r3
    aeca:	da05      	bge.n	aed8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    aecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aece:	9a14      	ldr	r2, [sp, #80]	; 0x50
    aed0:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    aed4:	2200      	movs	r2, #0
    aed6:	e78e      	b.n	adf6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    aed8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    aeda:	b123      	cbz	r3, aee6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    aedc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    aee0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aee2:	4413      	add	r3, r2
    aee4:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    aee6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    aee8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    aeea:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    aeee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aef0:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    aef4:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    aef8:	2e00      	cmp	r6, #0
    aefa:	f340 80a1 	ble.w	b040 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    aefe:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    af00:	409d      	lsls	r5, r3
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    af02:	45ac      	cmp	ip, r5
    af04:	f000 809e 	beq.w	b044 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    af08:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    af0a:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    af0c:	4660      	mov	r0, ip
    af0e:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    af10:	fb05 f101 	mul.w	r1, r5, r1
    af14:	fb0c 1103 	mla	r1, ip, r3, r1
    af18:	fba5 230c 	umull	r2, r3, r5, ip
    af1c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    af1e:	2a00      	cmp	r2, #0
    af20:	f173 0100 	sbcs.w	r1, r3, #0
    af24:	f2c0 8095 	blt.w	b052 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    af28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    af2c:	1852      	adds	r2, r2, r1
    af2e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    af32:	4611      	mov	r1, r2
    af34:	461d      	mov	r5, r3
    af36:	2a00      	cmp	r2, #0
    af38:	f173 0000 	sbcs.w	r0, r3, #0
    af3c:	f2c0 808b 	blt.w	b056 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    af40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    af42:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    af46:	2f00      	cmp	r7, #0
    af48:	f040 808d 	bne.w	b066 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    af4c:	2e00      	cmp	r6, #0
    af4e:	f2c0 808d 	blt.w	b06c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    af52:	2e1f      	cmp	r6, #31
    af54:	f300 8091 	bgt.w	b07a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    af58:	2701      	movs	r7, #1
    af5a:	fa07 f006 	lsl.w	r0, r7, r6
    af5e:	3801      	subs	r0, #1
    af60:	f008 fed5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af64:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    af66:	2000      	movs	r0, #0
    af68:	f008 fed1 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af6c:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    af6e:	4638      	mov	r0, r7
    af70:	f008 fecd 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    af74:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    af76:	990a      	ldr	r1, [sp, #40]	; 0x28
    af78:	4628      	mov	r0, r5
    af7a:	f008 fec9 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af7e:	9019      	str	r0, [sp, #100]	; 0x64
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    af80:	4639      	mov	r1, r7
    af82:	980a      	ldr	r0, [sp, #40]	; 0x28
    af84:	f008 fec6 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    af88:	4607      	mov	r7, r0
    af8a:	9918      	ldr	r1, [sp, #96]	; 0x60
    af8c:	4628      	mov	r0, r5
    af8e:	f008 fecd 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    af92:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af94:	f008 febc 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    af98:	4601      	mov	r1, r0
    af9a:	4638      	mov	r0, r7
    af9c:	f008 febc 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    afa0:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    afa2:	4631      	mov	r1, r6
    afa4:	4628      	mov	r0, r5
    afa6:	f008 feb5 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    afaa:	4605      	mov	r5, r0
    afac:	4639      	mov	r1, r7
    afae:	9819      	ldr	r0, [sp, #100]	; 0x64
    afb0:	f008 fec4 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    afb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    afb6:	f008 feab 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    afba:	4601      	mov	r1, r0
    afbc:	4628      	mov	r0, r5
    afbe:	f008 feab 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    afc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    afc4:	4418      	add	r0, r3
    afc6:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    afc8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    afca:	4290      	cmp	r0, r2
    afcc:	db5c      	blt.n	b088 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    afce:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    afd0:	681b      	ldr	r3, [r3, #0]
    afd2:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    afd4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    afd6:	4293      	cmp	r3, r2
    afd8:	dc58      	bgt.n	b08c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    afda:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    afdc:	6818      	ldr	r0, [r3, #0]
    afde:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    afe0:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    afe4:	2b04      	cmp	r3, #4
    afe6:	d153      	bne.n	b090 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    afe8:	f1b9 0f00 	cmp.w	r9, #0
    afec:	db52      	blt.n	b094 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    afee:	f8da 3004 	ldr.w	r3, [sl, #4]
    aff2:	4599      	cmp	r9, r3
    aff4:	da4e      	bge.n	b094 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aff6:	9b01      	ldr	r3, [sp, #4]
    aff8:	2b00      	cmp	r3, #0
    affa:	db4d      	blt.n	b098 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    affc:	f8da 1008 	ldr.w	r1, [sl, #8]
    b000:	428b      	cmp	r3, r1
    b002:	da49      	bge.n	b098 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b004:	9b02      	ldr	r3, [sp, #8]
    b006:	2b00      	cmp	r3, #0
    b008:	db48      	blt.n	b09c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    b00a:	f8da 200c 	ldr.w	r2, [sl, #12]
    b00e:	4293      	cmp	r3, r2
    b010:	da44      	bge.n	b09c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b012:	2c00      	cmp	r4, #0
    b014:	db44      	blt.n	b0a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    b016:	f8da 3010 	ldr.w	r3, [sl, #16]
    b01a:	429c      	cmp	r4, r3
    b01c:	da40      	bge.n	b0a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    b01e:	9d01      	ldr	r5, [sp, #4]
    b020:	fb01 5109 	mla	r1, r1, r9, r5
    b024:	9d02      	ldr	r5, [sp, #8]
    b026:	fb01 5202 	mla	r2, r1, r2, r5
    b02a:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    b02e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    b030:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    b032:	3401      	adds	r4, #1
    b034:	9b03      	ldr	r3, [sp, #12]
    b036:	429c      	cmp	r4, r3
    b038:	da34      	bge.n	b0a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    b03a:	2600      	movs	r6, #0
    b03c:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    b03e:	e742      	b.n	aec6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    b040:	4276      	negs	r6, r6
    b042:	e75d      	b.n	af00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b044:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    b048:	d001      	beq.n	b04e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    b04a:	2700      	movs	r7, #0
    b04c:	e75d      	b.n	af0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    b04e:	2701      	movs	r7, #1
    b050:	e75b      	b.n	af0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b052:	4921      	ldr	r1, [pc, #132]	; (b0d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    b054:	e76a      	b.n	af2c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b056:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b05a:	1851      	adds	r1, r2, r1
    b05c:	f04f 0500 	mov.w	r5, #0
    b060:	eb43 0505 	adc.w	r5, r3, r5
    b064:	e76c      	b.n	af40 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b066:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b06a:	e76f      	b.n	af4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    b06c:	4b1b      	ldr	r3, [pc, #108]	; (b0dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    b06e:	4a1c      	ldr	r2, [pc, #112]	; (b0e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    b070:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b074:	481b      	ldr	r0, [pc, #108]	; (b0e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    b076:	f005 fc23 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    b07a:	4b1b      	ldr	r3, [pc, #108]	; (b0e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    b07c:	4a18      	ldr	r2, [pc, #96]	; (b0e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    b07e:	f240 1167 	movw	r1, #359	; 0x167
    b082:	4818      	ldr	r0, [pc, #96]	; (b0e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    b084:	f005 fc1c 	bl	108c0 <__assert_func>
	return __b;
    b088:	ab1f      	add	r3, sp, #124	; 0x7c
    b08a:	e7a1      	b.n	afd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    b08c:	ab1e      	add	r3, sp, #120	; 0x78
    b08e:	e7a5      	b.n	afdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b090:	f00a ffe7 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b094:	f00a ffe5 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b098:	f00a ffe3 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b09c:	f00a ffe1 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b0a0:	f00a ffdf 	bl	16062 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    b0a4:	9b02      	ldr	r3, [sp, #8]
    b0a6:	3301      	adds	r3, #1
    b0a8:	9302      	str	r3, [sp, #8]
    b0aa:	e65e      	b.n	ad6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    b0ac:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    b0b0:	46ca      	mov	sl, r9
    b0b2:	46c1      	mov	r9, r8
    b0b4:	46d8      	mov	r8, fp
    b0b6:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    b0ba:	9b01      	ldr	r3, [sp, #4]
    b0bc:	3301      	adds	r3, #1
    b0be:	9301      	str	r3, [sp, #4]
    b0c0:	e63f      	b.n	ad42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    b0c2:	465f      	mov	r7, fp
    b0c4:	46d3      	mov	fp, sl
    b0c6:	46ca      	mov	sl, r9
    b0c8:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    b0ca:	f10b 0b01 	add.w	fp, fp, #1
    b0ce:	e62e      	b.n	ad2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    b0d0:	b027      	add	sp, #156	; 0x9c
    b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0d6:	bf00      	nop
    b0d8:	c0000001 	.word	0xc0000001
    b0dc:	0006b180 	.word	0x0006b180
    b0e0:	0006b190 	.word	0x0006b190
    b0e4:	0006b1e8 	.word	0x0006b1e8
    b0e8:	0006b244 	.word	0x0006b244

0000b0ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0f0:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    b0f2:	4bae      	ldr	r3, [pc, #696]	; (b3ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    b0f4:	681a      	ldr	r2, [r3, #0]
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    b0f6:	2800      	cmp	r0, #0
    b0f8:	d052      	beq.n	b1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    b0fa:	4688      	mov	r8, r1
    b0fc:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    b0fe:	2900      	cmp	r1, #0
    b100:	d050      	beq.n	b1a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b102:	6d44      	ldr	r4, [r0, #84]	; 0x54
    b104:	680b      	ldr	r3, [r1, #0]
    b106:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b10a:	6859      	ldr	r1, [r3, #4]
    b10c:	47a0      	blx	r4
    b10e:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    b110:	4ba7      	ldr	r3, [pc, #668]	; (b3b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    b112:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    b114:	f1b9 0f00 	cmp.w	r9, #0
    b118:	d046      	beq.n	b1a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    b11a:	f1b8 0f00 	cmp.w	r8, #0
    b11e:	d045      	beq.n	b1ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b120:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b124:	f8d8 3000 	ldr.w	r3, [r8]
    b128:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b12c:	6859      	ldr	r1, [r3, #4]
    b12e:	4648      	mov	r0, r9
    b130:	4790      	blx	r2
    b132:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    b134:	f8d8 3000 	ldr.w	r3, [r8]
    b138:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    b13a:	2b03      	cmp	r3, #3
    b13c:	d038      	beq.n	b1b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    b13e:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    b140:	4b9c      	ldr	r3, [pc, #624]	; (b3b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    b142:	6819      	ldr	r1, [r3, #0]
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    b144:	f1b9 0f00 	cmp.w	r9, #0
    b148:	d049      	beq.n	b1de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    b14a:	f1b8 0f00 	cmp.w	r8, #0
    b14e:	d048      	beq.n	b1e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    b150:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b154:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b158:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b15c:	6859      	ldr	r1, [r3, #4]
    b15e:	4648      	mov	r0, r9
    b160:	4790      	blx	r2
    b162:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b164:	f8d8 1014 	ldr.w	r1, [r8, #20]
    b168:	2900      	cmp	r1, #0
    b16a:	d03c      	beq.n	b1e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    b16c:	f8d8 b010 	ldr.w	fp, [r8, #16]
    b170:	f1bb 0f00 	cmp.w	fp, #0
    b174:	d039      	beq.n	b1ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    b176:	7a38      	ldrb	r0, [r7, #8]
    b178:	7a23      	ldrb	r3, [r4, #8]
    b17a:	4298      	cmp	r0, r3
    b17c:	d037      	beq.n	b1ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    b17e:	f8d9 4014 	ldr.w	r4, [r9, #20]
    b182:	9303      	str	r3, [sp, #12]
    b184:	9002      	str	r0, [sp, #8]
    b186:	4b8c      	ldr	r3, [pc, #560]	; (b3b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    b188:	9301      	str	r3, [sp, #4]
    b18a:	4b8c      	ldr	r3, [pc, #560]	; (b3bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    b18c:	9300      	str	r3, [sp, #0]
    b18e:	2337      	movs	r3, #55	; 0x37
    b190:	4a8b      	ldr	r2, [pc, #556]	; (b3c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    b192:	498c      	ldr	r1, [pc, #560]	; (b3c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    b194:	4648      	mov	r0, r9
    b196:	47a0      	blx	r4
    b198:	2001      	movs	r0, #1
}
    b19a:	b067      	add	sp, #412	; 0x19c
    b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    b1a0:	f00a ff5f 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    b1a4:	f00a ff5d 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    b1a8:	f00a ff5b 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    b1ac:	f00a ff59 	bl	16062 <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    b1b0:	4b85      	ldr	r3, [pc, #532]	; (b3c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    b1b2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    b1b4:	f1b9 0f00 	cmp.w	r9, #0
    b1b8:	d00d      	beq.n	b1d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    b1ba:	f1b8 0f00 	cmp.w	r8, #0
    b1be:	d00c      	beq.n	b1da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b1c0:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b1c4:	f8d8 3000 	ldr.w	r3, [r8]
    b1c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b1cc:	6859      	ldr	r1, [r3, #4]
    b1ce:	4648      	mov	r0, r9
    b1d0:	4790      	blx	r2
    b1d2:	4606      	mov	r6, r0
    b1d4:	e7b4      	b.n	b140 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    b1d6:	f00a ff44 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    b1da:	f00a ff42 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    b1de:	f00a ff40 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    b1e2:	f00a ff3e 	bl	16062 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b1e6:	f00a ff3c 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    b1ea:	f00a ff3a 	bl	16062 <abort>
  TF_LITE_ENSURE_MSG(
    b1ee:	7a2b      	ldrb	r3, [r5, #8]
    b1f0:	4298      	cmp	r0, r3
    b1f2:	d00a      	beq.n	b20a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b1f4:	2807      	cmp	r0, #7
    b1f6:	d101      	bne.n	b1fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    b1f8:	2b09      	cmp	r3, #9
    b1fa:	d006      	beq.n	b20a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b1fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    b200:	4972      	ldr	r1, [pc, #456]	; (b3cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    b202:	4648      	mov	r0, r9
    b204:	4798      	blx	r3
    b206:	2001      	movs	r0, #1
    b208:	e7c7      	b.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    b20a:	2807      	cmp	r0, #7
    b20c:	d073      	beq.n	b2f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    b20e:	2809      	cmp	r0, #9
    b210:	f000 80e0 	beq.w	b3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    b214:	2801      	cmp	r0, #1
    b216:	d00a      	beq.n	b22e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b218:	f8d9 4014 	ldr.w	r4, [r9, #20]
    b21c:	f7fd ffde 	bl	91dc <TfLiteTypeGetName>
    b220:	4602      	mov	r2, r0
    b222:	7a3b      	ldrb	r3, [r7, #8]
    b224:	496a      	ldr	r1, [pc, #424]	; (b3d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    b226:	4648      	mov	r0, r9
    b228:	47a0      	blx	r4
      return kTfLiteError;
    b22a:	2001      	movs	r0, #1
    b22c:	e7b5      	b.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    b22e:	465a      	mov	r2, fp
    b230:	a80a      	add	r0, sp, #40	; 0x28
    b232:	f009 f824 	bl	1427e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b236:	4639      	mov	r1, r7
    b238:	a818      	add	r0, sp, #96	; 0x60
    b23a:	f009 fb3d 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b23e:	4638      	mov	r0, r7
    b240:	f008 fd51 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b244:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    b246:	4629      	mov	r1, r5
    b248:	a81e      	add	r0, sp, #120	; 0x78
    b24a:	f009 fb35 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b24e:	4628      	mov	r0, r5
    b250:	f008 fd49 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b254:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b256:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    b25a:	4631      	mov	r1, r6
    b25c:	4640      	mov	r0, r8
    b25e:	f009 fb2b 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b262:	4630      	mov	r0, r6
    b264:	f008 fd3f 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b268:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b26a:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    b26e:	4621      	mov	r1, r4
    b270:	4648      	mov	r0, r9
    b272:	f009 fb21 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b276:	4620      	mov	r0, r4
    b278:	f008 fd3b 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    b27c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    b27e:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    b282:	2100      	movs	r1, #0
    b284:	4650      	mov	r0, sl
    b286:	f009 fb17 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b28a:	2300      	movs	r3, #0
    b28c:	9306      	str	r3, [sp, #24]
    b28e:	f8cd a014 	str.w	sl, [sp, #20]
    b292:	9404      	str	r4, [sp, #16]
    b294:	f8cd 900c 	str.w	r9, [sp, #12]
    b298:	9602      	str	r6, [sp, #8]
    b29a:	f8cd 8004 	str.w	r8, [sp, #4]
    b29e:	9500      	str	r5, [sp, #0]
    b2a0:	ab1e      	add	r3, sp, #120	; 0x78
    b2a2:	463a      	mov	r2, r7
    b2a4:	a918      	add	r1, sp, #96	; 0x60
    b2a6:	a80a      	add	r0, sp, #40	; 0x28
    b2a8:	f008 fd6e 	bl	13d88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    b2ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    b2ae:	2b05      	cmp	r3, #5
    b2b0:	dd03      	ble.n	b2ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    b2b2:	9831      	ldr	r0, [sp, #196]	; 0xc4
    b2b4:	b108      	cbz	r0, b2ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    b2b6:	f00a febf 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b2ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b2bc:	2b05      	cmp	r3, #5
    b2be:	dd03      	ble.n	b2c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    b2c0:	982b      	ldr	r0, [sp, #172]	; 0xac
    b2c2:	b108      	cbz	r0, b2c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    b2c4:	f00a feb8 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b2c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b2ca:	2b05      	cmp	r3, #5
    b2cc:	dd03      	ble.n	b2d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    b2ce:	9825      	ldr	r0, [sp, #148]	; 0x94
    b2d0:	b108      	cbz	r0, b2d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    b2d2:	f00a feb1 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b2d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b2d8:	2b05      	cmp	r3, #5
    b2da:	dd03      	ble.n	b2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    b2dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b2de:	b108      	cbz	r0, b2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    b2e0:	f00a feaa 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b2e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b2e6:	2b05      	cmp	r3, #5
    b2e8:	dd03      	ble.n	b2f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    b2ea:	9819      	ldr	r0, [sp, #100]	; 0x64
    b2ec:	b108      	cbz	r0, b2f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    b2ee:	f00a fea3 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    b2f2:	2000      	movs	r0, #0
      break;
    b2f4:	e751      	b.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b2f6:	465a      	mov	r2, fp
    b2f8:	a80a      	add	r0, sp, #40	; 0x28
    b2fa:	f008 ff99 	bl	14230 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b2fe:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b302:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    b306:	4639      	mov	r1, r7
    b308:	a836      	add	r0, sp, #216	; 0xd8
    b30a:	f009 fad5 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b30e:	4638      	mov	r0, r7
    b310:	f008 fd1c 	bl	13d4c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    b314:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b316:	af3c      	add	r7, sp, #240	; 0xf0
    b318:	4629      	mov	r1, r5
    b31a:	4638      	mov	r0, r7
    b31c:	f009 facc 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b320:	4628      	mov	r0, r5
    b322:	f008 fcea 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b326:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b328:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    b32c:	4631      	mov	r1, r6
    b32e:	4640      	mov	r0, r8
    b330:	f009 fac2 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b334:	4630      	mov	r0, r6
    b336:	f008 fd19 	bl	13d6c <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    b33a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b33c:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    b340:	4621      	mov	r1, r4
    b342:	4648      	mov	r0, r9
    b344:	f009 fab8 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b348:	4620      	mov	r0, r4
    b34a:	f008 fd05 	bl	13d58 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    b34e:	9006      	str	r0, [sp, #24]
    b350:	f8cd 9014 	str.w	r9, [sp, #20]
    b354:	9604      	str	r6, [sp, #16]
    b356:	f8cd 800c 	str.w	r8, [sp, #12]
    b35a:	9502      	str	r5, [sp, #8]
    b35c:	9701      	str	r7, [sp, #4]
    b35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b360:	9300      	str	r3, [sp, #0]
    b362:	ab36      	add	r3, sp, #216	; 0xd8
    b364:	465a      	mov	r2, fp
    b366:	4651      	mov	r1, sl
    b368:	a80a      	add	r0, sp, #40	; 0x28
    b36a:	f7ff f8d7 	bl	a51c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    b36e:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b370:	2b05      	cmp	r3, #5
    b372:	dd03      	ble.n	b37c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    b374:	9849      	ldr	r0, [sp, #292]	; 0x124
    b376:	b108      	cbz	r0, b37c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    b378:	f00a fe5e 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b37c:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b37e:	2b05      	cmp	r3, #5
    b380:	dd03      	ble.n	b38a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    b382:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b384:	b108      	cbz	r0, b38a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    b386:	f00a fe57 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b38a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    b38c:	2b05      	cmp	r3, #5
    b38e:	dd03      	ble.n	b398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    b390:	983d      	ldr	r0, [sp, #244]	; 0xf4
    b392:	b108      	cbz	r0, b398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    b394:	f00a fe50 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b398:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    b39a:	2b05      	cmp	r3, #5
    b39c:	dd03      	ble.n	b3a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    b39e:	9837      	ldr	r0, [sp, #220]	; 0xdc
    b3a0:	b108      	cbz	r0, b3a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    b3a2:	f00a fe49 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    b3a6:	2000      	movs	r0, #0
      break;
    b3a8:	e6f7      	b.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    b3aa:	bf00      	nop
    b3ac:	0006b4c4 	.word	0x0006b4c4
    b3b0:	0006b4cc 	.word	0x0006b4cc
    b3b4:	0006b4c8 	.word	0x0006b4c8
    b3b8:	0006b2a0 	.word	0x0006b2a0
    b3bc:	0006b2b0 	.word	0x0006b2b0
    b3c0:	0006b254 	.word	0x0006b254
    b3c4:	0006ac8c 	.word	0x0006ac8c
    b3c8:	0006b4c0 	.word	0x0006b4c0
    b3cc:	0006b2bc 	.word	0x0006b2bc
    b3d0:	0006b338 	.word	0x0006b338
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b3d4:	465a      	mov	r2, fp
    b3d6:	a80a      	add	r0, sp, #40	; 0x28
    b3d8:	f008 ff2a 	bl	14230 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b3dc:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b3e0:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    b3e4:	4639      	mov	r1, r7
    b3e6:	a84e      	add	r0, sp, #312	; 0x138
    b3e8:	f009 fa66 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b3ec:	4638      	mov	r0, r7
    b3ee:	f008 fc84 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b3f2:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b3f4:	af54      	add	r7, sp, #336	; 0x150
    b3f6:	4629      	mov	r1, r5
    b3f8:	4638      	mov	r0, r7
    b3fa:	f009 fa5d 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b3fe:	4628      	mov	r0, r5
    b400:	f008 fc7b 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b404:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b406:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    b40a:	4631      	mov	r1, r6
    b40c:	4650      	mov	r0, sl
    b40e:	f009 fa53 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b412:	4630      	mov	r0, r6
    b414:	f008 fca4 	bl	13d60 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    b418:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b41a:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    b41e:	4621      	mov	r1, r4
    b420:	4658      	mov	r0, fp
    b422:	f009 fa49 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b426:	4620      	mov	r0, r4
    b428:	f008 fc6d 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b42c:	9006      	str	r0, [sp, #24]
    b42e:	f8cd b014 	str.w	fp, [sp, #20]
    b432:	9604      	str	r6, [sp, #16]
    b434:	f8cd a00c 	str.w	sl, [sp, #12]
    b438:	9502      	str	r5, [sp, #8]
    b43a:	9701      	str	r7, [sp, #4]
    b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b43e:	9300      	str	r3, [sp, #0]
    b440:	ab4e      	add	r3, sp, #312	; 0x138
    b442:	464a      	mov	r2, r9
    b444:	4641      	mov	r1, r8
    b446:	a80a      	add	r0, sp, #40	; 0x28
    b448:	f7ff fb48 	bl	aadc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    b44c:	9b60      	ldr	r3, [sp, #384]	; 0x180
    b44e:	2b05      	cmp	r3, #5
    b450:	dd03      	ble.n	b45a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    b452:	9861      	ldr	r0, [sp, #388]	; 0x184
    b454:	b108      	cbz	r0, b45a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    b456:	f00a fdef 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b45a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    b45c:	2b05      	cmp	r3, #5
    b45e:	dd03      	ble.n	b468 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    b460:	985b      	ldr	r0, [sp, #364]	; 0x16c
    b462:	b108      	cbz	r0, b468 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    b464:	f00a fde8 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b468:	9b54      	ldr	r3, [sp, #336]	; 0x150
    b46a:	2b05      	cmp	r3, #5
    b46c:	dd03      	ble.n	b476 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    b46e:	9855      	ldr	r0, [sp, #340]	; 0x154
    b470:	b108      	cbz	r0, b476 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    b472:	f00a fde1 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b476:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    b478:	2b05      	cmp	r3, #5
    b47a:	dd03      	ble.n	b484 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    b47c:	984f      	ldr	r0, [sp, #316]	; 0x13c
    b47e:	b108      	cbz	r0, b484 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    b480:	f00a fdda 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    b484:	2000      	movs	r0, #0
      break;
    b486:	e688      	b.n	b19a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000b488 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    b488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b48c:	b08f      	sub	sp, #60	; 0x3c
    b48e:	4604      	mov	r4, r0
    b490:	460d      	mov	r5, r1
    b492:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    b494:	6809      	ldr	r1, [r1, #0]
    b496:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    b498:	2903      	cmp	r1, #3
    b49a:	d00a      	beq.n	b4b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b49c:	2902      	cmp	r1, #2
    b49e:	d008      	beq.n	b4b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b4a0:	6945      	ldr	r5, [r0, #20]
    b4a2:	4b77      	ldr	r3, [pc, #476]	; (b680 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    b4a4:	9300      	str	r3, [sp, #0]
    b4a6:	2356      	movs	r3, #86	; 0x56
    b4a8:	4a76      	ldr	r2, [pc, #472]	; (b684 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b4aa:	4977      	ldr	r1, [pc, #476]	; (b688 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b4ac:	47a8      	blx	r5
    b4ae:	2001      	movs	r0, #1
    b4b0:	e011      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    b4b2:	686a      	ldr	r2, [r5, #4]
    b4b4:	6812      	ldr	r2, [r2, #0]
    b4b6:	2a01      	cmp	r2, #1
    b4b8:	d010      	beq.n	b4dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    b4ba:	6966      	ldr	r6, [r4, #20]
    b4bc:	2501      	movs	r5, #1
    b4be:	9503      	str	r5, [sp, #12]
    b4c0:	9202      	str	r2, [sp, #8]
    b4c2:	4b72      	ldr	r3, [pc, #456]	; (b68c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    b4c4:	9301      	str	r3, [sp, #4]
    b4c6:	4b72      	ldr	r3, [pc, #456]	; (b690 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    b4c8:	9300      	str	r3, [sp, #0]
    b4ca:	2357      	movs	r3, #87	; 0x57
    b4cc:	4a6d      	ldr	r2, [pc, #436]	; (b684 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b4ce:	4971      	ldr	r1, [pc, #452]	; (b694 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    b4d0:	4620      	mov	r0, r4
    b4d2:	47b0      	blx	r6
    b4d4:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    b4d6:	b00f      	add	sp, #60	; 0x3c
    b4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    b4dc:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    b4e0:	68b1      	ldr	r1, [r6, #8]
    b4e2:	6872      	ldr	r2, [r6, #4]
    b4e4:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b4e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b4ea:	3801      	subs	r0, #1
    b4ec:	6937      	ldr	r7, [r6, #16]
    b4ee:	fb00 f007 	mul.w	r0, r0, r7
    b4f2:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    b4f6:	b1b2      	cbz	r2, b526 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    b4f8:	f1be 0f01 	cmp.w	lr, #1
    b4fc:	d005      	beq.n	b50a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    b4fe:	f1be 0f02 	cmp.w	lr, #2
    b502:	d009      	beq.n	b518 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    b504:	f04f 0c00 	mov.w	ip, #0
    b508:	e00e      	b.n	b528 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    b50a:	eb02 0c03 	add.w	ip, r2, r3
    b50e:	f10c 3cff 	add.w	ip, ip, #4294967295
    b512:	fb9c fcf2 	sdiv	ip, ip, r2
    b516:	e007      	b.n	b528 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    b518:	eb02 0c03 	add.w	ip, r2, r3
    b51c:	ebac 0c09 	sub.w	ip, ip, r9
    b520:	fb9c fcf2 	sdiv	ip, ip, r2
    b524:	e000      	b.n	b528 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    b526:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b528:	9f18      	ldr	r7, [sp, #96]	; 0x60
    b52a:	3f01      	subs	r7, #1
    b52c:	fb07 f708 	mul.w	r7, r7, r8
    b530:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    b532:	b1c1      	cbz	r1, b566 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    b534:	f1be 0f01 	cmp.w	lr, #1
    b538:	d005      	beq.n	b546 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    b53a:	f1be 0f02 	cmp.w	lr, #2
    b53e:	d00a      	beq.n	b556 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    b540:	f04f 0e00 	mov.w	lr, #0
    b544:	e010      	b.n	b568 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    b546:	9816      	ldr	r0, [sp, #88]	; 0x58
    b548:	eb01 0e00 	add.w	lr, r1, r0
    b54c:	f10e 3eff 	add.w	lr, lr, #4294967295
    b550:	fb9e fef1 	sdiv	lr, lr, r1
    b554:	e008      	b.n	b568 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    b556:	9816      	ldr	r0, [sp, #88]	; 0x58
    b558:	eb01 0e00 	add.w	lr, r1, r0
    b55c:	ebae 0e07 	sub.w	lr, lr, r7
    b560:	fb9e fef1 	sdiv	lr, lr, r1
    b564:	e000      	b.n	b568 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    b566:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b568:	f10e 3eff 	add.w	lr, lr, #4294967295
    b56c:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    b570:	9f16      	ldr	r7, [sp, #88]	; 0x58
    b572:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    b574:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    b578:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    b57c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    b580:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    b582:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    b584:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b586:	f10c 3cff 	add.w	ip, ip, #4294967295
    b58a:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    b58e:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    b590:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    b594:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    b598:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    b59c:	1052      	asrs	r2, r2, #1
  padding_values.width =
    b59e:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    b5a0:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    b5a2:	ab0e      	add	r3, sp, #56	; 0x38
    b5a4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    b5a8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    b5aa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b5ae:	2200      	movs	r2, #0
    b5b0:	4629      	mov	r1, r5
    b5b2:	4620      	mov	r0, r4
    b5b4:	f008 fad8 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b5b8:	4607      	mov	r7, r0
    b5ba:	b308      	cbz	r0, b600 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b5bc:	2201      	movs	r2, #1
    b5be:	4629      	mov	r1, r5
    b5c0:	4620      	mov	r0, r4
    b5c2:	f008 fad1 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b5c6:	4680      	mov	r8, r0
    b5c8:	b320      	cbz	r0, b614 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    b5ca:	2202      	movs	r2, #2
    b5cc:	4629      	mov	r1, r5
    b5ce:	4620      	mov	r0, r4
    b5d0:	f008 fb08 	bl	13be4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    b5d4:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b5d6:	2200      	movs	r2, #0
    b5d8:	4629      	mov	r1, r5
    b5da:	4620      	mov	r0, r4
    b5dc:	f008 fae3 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b5e0:	4605      	mov	r5, r0
    b5e2:	b308      	cbz	r0, b628 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    b5e4:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    b5e8:	2b01      	cmp	r3, #1
    b5ea:	d127      	bne.n	b63c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    b5ec:	693b      	ldr	r3, [r7, #16]
    b5ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b5f0:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    b5f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
    b5f6:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    b5f8:	692b      	ldr	r3, [r5, #16]
    b5fa:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    b5fc:	2000      	movs	r0, #0
    b5fe:	e76a      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    b600:	6965      	ldr	r5, [r4, #20]
    b602:	4b25      	ldr	r3, [pc, #148]	; (b698 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    b604:	9300      	str	r3, [sp, #0]
    b606:	2361      	movs	r3, #97	; 0x61
    b608:	4a1e      	ldr	r2, [pc, #120]	; (b684 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b60a:	491f      	ldr	r1, [pc, #124]	; (b688 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b60c:	4620      	mov	r0, r4
    b60e:	47a8      	blx	r5
    b610:	2001      	movs	r0, #1
    b612:	e760      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    b614:	6965      	ldr	r5, [r4, #20]
    b616:	4b21      	ldr	r3, [pc, #132]	; (b69c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    b618:	9300      	str	r3, [sp, #0]
    b61a:	2363      	movs	r3, #99	; 0x63
    b61c:	4a19      	ldr	r2, [pc, #100]	; (b684 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b61e:	491a      	ldr	r1, [pc, #104]	; (b688 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b620:	4620      	mov	r0, r4
    b622:	47a8      	blx	r5
    b624:	2001      	movs	r0, #1
    b626:	e756      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    b628:	6965      	ldr	r5, [r4, #20]
    b62a:	4b1d      	ldr	r3, [pc, #116]	; (b6a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    b62c:	9300      	str	r3, [sp, #0]
    b62e:	2367      	movs	r3, #103	; 0x67
    b630:	4a14      	ldr	r2, [pc, #80]	; (b684 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b632:	4915      	ldr	r1, [pc, #84]	; (b688 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b634:	4620      	mov	r0, r4
    b636:	47a8      	blx	r5
    b638:	2001      	movs	r0, #1
    b63a:	e74c      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    b63c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b640:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    b642:	360c      	adds	r6, #12
    b644:	9308      	str	r3, [sp, #32]
    b646:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b64a:	9307      	str	r3, [sp, #28]
    b64c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b650:	9306      	str	r3, [sp, #24]
    b652:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b654:	3330      	adds	r3, #48	; 0x30
    b656:	9305      	str	r3, [sp, #20]
    b658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b65a:	332c      	adds	r3, #44	; 0x2c
    b65c:	9304      	str	r3, [sp, #16]
    b65e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b660:	3320      	adds	r3, #32
    b662:	9303      	str	r3, [sp, #12]
    b664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b666:	331c      	adds	r3, #28
    b668:	9302      	str	r3, [sp, #8]
    b66a:	9601      	str	r6, [sp, #4]
    b66c:	9000      	str	r0, [sp, #0]
    b66e:	464b      	mov	r3, r9
    b670:	4642      	mov	r2, r8
    b672:	4639      	mov	r1, r7
    b674:	4620      	mov	r0, r4
    b676:	f7fd ffff 	bl	9678 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    b67a:	2800      	cmp	r0, #0
    b67c:	d0b6      	beq.n	b5ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    b67e:	e72a      	b.n	b4d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    b680:	0006b3a8 	.word	0x0006b3a8
    b684:	0006b354 	.word	0x0006b354
    b688:	0006a9cc 	.word	0x0006a9cc
    b68c:	0006ba14 	.word	0x0006ba14
    b690:	0006b3cc 	.word	0x0006b3cc
    b694:	0006ac8c 	.word	0x0006ac8c
    b698:	0006b3e0 	.word	0x0006b3e0
    b69c:	0006b3f4 	.word	0x0006b3f4
    b6a0:	0006b408 	.word	0x0006b408

0000b6a4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6a8:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    b6aa:	690e      	ldr	r6, [r1, #16]
    b6ac:	2e00      	cmp	r6, #0
    b6ae:	d052      	beq.n	b756 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    b6b0:	4604      	mov	r4, r0
    b6b2:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b6b4:	694f      	ldr	r7, [r1, #20]
    b6b6:	2f00      	cmp	r7, #0
    b6b8:	d04f      	beq.n	b75a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b6ba:	2200      	movs	r2, #0
    b6bc:	f008 fa73 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b6c0:	4680      	mov	r8, r0
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d04b      	beq.n	b75e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b6c6:	2200      	movs	r2, #0
    b6c8:	4629      	mov	r1, r5
    b6ca:	4620      	mov	r0, r4
    b6cc:	f008 fa4c 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b6d0:	4681      	mov	r9, r0
    b6d2:	2800      	cmp	r0, #0
    b6d4:	d051      	beq.n	b77a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b6d6:	2201      	movs	r2, #1
    b6d8:	4629      	mov	r1, r5
    b6da:	4620      	mov	r0, r4
    b6dc:	f008 fa44 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b6e0:	4682      	mov	sl, r0
    b6e2:	2800      	cmp	r0, #0
    b6e4:	d054      	beq.n	b790 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    b6e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    b6ea:	68da      	ldr	r2, [r3, #12]
    b6ec:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    b6ee:	689b      	ldr	r3, [r3, #8]
    b6f0:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    b6f2:	6883      	ldr	r3, [r0, #8]
    b6f4:	68da      	ldr	r2, [r3, #12]
    b6f6:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    b6f8:	689a      	ldr	r2, [r3, #8]
    b6fa:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    b6fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
    b700:	68d1      	ldr	r1, [r2, #12]
    b702:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    b704:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    b708:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b70a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b70c:	ea4f 0882 	mov.w	r8, r2, lsl #2
    b710:	4641      	mov	r1, r8
    b712:	4620      	mov	r0, r4
    b714:	4798      	blx	r3
  data->per_channel_output_multiplier =
    b716:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b71a:	4641      	mov	r1, r8
    b71c:	4620      	mov	r0, r4
    b71e:	4798      	blx	r3
  data->per_channel_output_shift =
    b720:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    b722:	f899 3000 	ldrb.w	r3, [r9]
    b726:	2b09      	cmp	r3, #9
    b728:	d03d      	beq.n	b7a6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    b72a:	2b07      	cmp	r3, #7
    b72c:	d03b      	beq.n	b7a6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    b72e:	9606      	str	r6, [sp, #24]
    b730:	9305      	str	r3, [sp, #20]
    b732:	f8cd b010 	str.w	fp, [sp, #16]
    b736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b738:	9303      	str	r3, [sp, #12]
    b73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b73c:	9302      	str	r3, [sp, #8]
    b73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b740:	9301      	str	r3, [sp, #4]
    b742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b744:	9300      	str	r3, [sp, #0]
    b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b748:	463a      	mov	r2, r7
    b74a:	4629      	mov	r1, r5
    b74c:	4620      	mov	r0, r4
    b74e:	f7ff fe9b 	bl	b488 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    b752:	4680      	mov	r8, r0
    b754:	e00d      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    b756:	f00a fc84 	bl	16062 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b75a:	f00a fc82 	bl	16062 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    b75e:	6965      	ldr	r5, [r4, #20]
    b760:	4b32      	ldr	r3, [pc, #200]	; (b82c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    b762:	9300      	str	r3, [sp, #0]
    b764:	2386      	movs	r3, #134	; 0x86
    b766:	4a32      	ldr	r2, [pc, #200]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b768:	4932      	ldr	r1, [pc, #200]	; (b834 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b76a:	4620      	mov	r0, r4
    b76c:	47a8      	blx	r5
    b76e:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    b772:	4640      	mov	r0, r8
    b774:	b00f      	add	sp, #60	; 0x3c
    b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    b77a:	6965      	ldr	r5, [r4, #20]
    b77c:	4b2e      	ldr	r3, [pc, #184]	; (b838 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    b77e:	9300      	str	r3, [sp, #0]
    b780:	2388      	movs	r3, #136	; 0x88
    b782:	4a2b      	ldr	r2, [pc, #172]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b784:	492b      	ldr	r1, [pc, #172]	; (b834 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b786:	4620      	mov	r0, r4
    b788:	47a8      	blx	r5
    b78a:	f04f 0801 	mov.w	r8, #1
    b78e:	e7f0      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    b790:	6965      	ldr	r5, [r4, #20]
    b792:	4b2a      	ldr	r3, [pc, #168]	; (b83c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    b794:	9300      	str	r3, [sp, #0]
    b796:	238a      	movs	r3, #138	; 0x8a
    b798:	4a25      	ldr	r2, [pc, #148]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b79a:	4926      	ldr	r1, [pc, #152]	; (b834 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b79c:	4620      	mov	r0, r4
    b79e:	47a8      	blx	r5
    b7a0:	f04f 0801 	mov.w	r8, #1
    b7a4:	e7e5      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    b7a6:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    b7aa:	f1b8 0f01 	cmp.w	r8, #1
    b7ae:	d00f      	beq.n	b7d0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    b7b0:	6966      	ldr	r6, [r4, #20]
    b7b2:	2501      	movs	r5, #1
    b7b4:	9503      	str	r5, [sp, #12]
    b7b6:	f8cd 8008 	str.w	r8, [sp, #8]
    b7ba:	4b21      	ldr	r3, [pc, #132]	; (b840 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    b7bc:	9301      	str	r3, [sp, #4]
    b7be:	4b21      	ldr	r3, [pc, #132]	; (b844 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    b7c0:	9300      	str	r3, [sp, #0]
    b7c2:	239e      	movs	r3, #158	; 0x9e
    b7c4:	4a1a      	ldr	r2, [pc, #104]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b7c6:	4920      	ldr	r1, [pc, #128]	; (b848 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b7c8:	4620      	mov	r0, r4
    b7ca:	47b0      	blx	r6
    b7cc:	46a8      	mov	r8, r5
    b7ce:	e7d0      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    b7d0:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    b7d4:	b1a2      	cbz	r2, b800 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b7d6:	6811      	ldr	r1, [r2, #0]
    b7d8:	b1a1      	cbz	r1, b804 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b7da:	6850      	ldr	r0, [r2, #4]
    b7dc:	b1a0      	cbz	r0, b808 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    b7de:	680a      	ldr	r2, [r1, #0]
    b7e0:	2a01      	cmp	r2, #1
    b7e2:	d013      	beq.n	b80c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b7e4:	f8da 1008 	ldr.w	r1, [sl, #8]
    b7e8:	6849      	ldr	r1, [r1, #4]
    b7ea:	428a      	cmp	r2, r1
    b7ec:	d00e      	beq.n	b80c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b7ee:	6965      	ldr	r5, [r4, #20]
    b7f0:	4b16      	ldr	r3, [pc, #88]	; (b84c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    b7f2:	9300      	str	r3, [sp, #0]
    b7f4:	23a7      	movs	r3, #167	; 0xa7
    b7f6:	4a0e      	ldr	r2, [pc, #56]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b7f8:	490e      	ldr	r1, [pc, #56]	; (b834 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b7fa:	4620      	mov	r0, r4
    b7fc:	47a8      	blx	r5
    b7fe:	e7b8      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    b800:	f00a fc2f 	bl	16062 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b804:	f00a fc2d 	bl	16062 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b808:	f00a fc2b 	bl	16062 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    b80c:	6801      	ldr	r1, [r0, #0]
    b80e:	428a      	cmp	r2, r1
    b810:	d08d      	beq.n	b72e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    b812:	6965      	ldr	r5, [r4, #20]
    b814:	9103      	str	r1, [sp, #12]
    b816:	9202      	str	r2, [sp, #8]
    b818:	4b0d      	ldr	r3, [pc, #52]	; (b850 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    b81a:	9301      	str	r3, [sp, #4]
    b81c:	4b0d      	ldr	r3, [pc, #52]	; (b854 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    b81e:	9300      	str	r3, [sp, #0]
    b820:	23ab      	movs	r3, #171	; 0xab
    b822:	4a03      	ldr	r2, [pc, #12]	; (b830 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b824:	4908      	ldr	r1, [pc, #32]	; (b848 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b826:	4620      	mov	r0, r4
    b828:	47a8      	blx	r5
    b82a:	e7a2      	b.n	b772 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    b82c:	0006b408 	.word	0x0006b408
    b830:	0006b354 	.word	0x0006b354
    b834:	0006a9cc 	.word	0x0006a9cc
    b838:	0006b3e0 	.word	0x0006b3e0
    b83c:	0006b3f4 	.word	0x0006b3f4
    b840:	0006aca8 	.word	0x0006aca8
    b844:	0006ace0 	.word	0x0006ace0
    b848:	0006ac8c 	.word	0x0006ac8c
    b84c:	0006b41c 	.word	0x0006b41c
    b850:	0006b498 	.word	0x0006b498
    b854:	0006ad94 	.word	0x0006ad94

0000b858 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    b858:	b470      	push	{r4, r5, r6}
    b85a:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    b85c:	4604      	mov	r4, r0
    b85e:	4d05      	ldr	r5, [pc, #20]	; (b874 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    b860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b864:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    b86c:	4630      	mov	r0, r6
    b86e:	bc70      	pop	{r4, r5, r6}
    b870:	4770      	bx	lr
    b872:	bf00      	nop
    b874:	00017000 	.word	0x00017000

0000b878 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b87c:	b0a5      	sub	sp, #148	; 0x94
    b87e:	911a      	str	r1, [sp, #104]	; 0x68
    b880:	921b      	str	r2, [sp, #108]	; 0x6c
    b882:	461f      	mov	r7, r3
    b884:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    b888:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    b88a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    b88e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    b892:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    b894:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    b898:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    b89a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    b89e:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    b8a0:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    b8a4:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    b8a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    b8aa:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    b8ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    b8b0:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    b8b2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    b8b6:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    b8b8:	6942      	ldr	r2, [r0, #20]
    b8ba:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    b8bc:	69c2      	ldr	r2, [r0, #28]
    b8be:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    b8c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b8c2:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    b8c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b8c6:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    b8c8:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    b8ca:	2804      	cmp	r0, #4
    b8cc:	f040 80b6 	bne.w	ba3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    b8d0:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    b8d4:	2804      	cmp	r0, #4
    b8d6:	f040 80b3 	bne.w	ba40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    b8da:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    b8de:	2804      	cmp	r0, #4
    b8e0:	f040 80b0 	bne.w	ba44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b8e4:	4291      	cmp	r1, r2
    b8e6:	f300 80af 	bgt.w	ba48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    b8ea:	683a      	ldr	r2, [r7, #0]
    b8ec:	2a00      	cmp	r2, #0
    b8ee:	f340 80ad 	ble.w	ba4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b8f2:	2a05      	cmp	r2, #5
    b8f4:	f340 80ac 	ble.w	ba50 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    b8f8:	687a      	ldr	r2, [r7, #4]
    b8fa:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    b8fc:	f8d9 1000 	ldr.w	r1, [r9]
    b900:	2900      	cmp	r1, #0
    b902:	f340 80a7 	ble.w	ba54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b906:	2905      	cmp	r1, #5
    b908:	f340 80a6 	ble.w	ba58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    b90c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b910:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b912:	4291      	cmp	r1, r2
    b914:	f040 80a3 	bne.w	ba5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b918:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    b91a:	f8d9 1000 	ldr.w	r1, [r9]
    b91e:	2900      	cmp	r1, #0
    b920:	f340 809f 	ble.w	ba62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b924:	2905      	cmp	r1, #5
    b926:	f340 809e 	ble.w	ba66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    b92a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b92e:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b930:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    b932:	428a      	cmp	r2, r1
    b934:	f300 809a 	bgt.w	ba6c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    b938:	aa23      	add	r2, sp, #140	; 0x8c
    b93a:	6812      	ldr	r2, [r2, #0]
    b93c:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    b93e:	f8d8 2000 	ldr.w	r2, [r8]
    b942:	2a03      	cmp	r2, #3
    b944:	f340 8094 	ble.w	ba70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b948:	2a05      	cmp	r2, #5
    b94a:	f340 8093 	ble.w	ba74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    b94e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b952:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    b954:	f8d9 1000 	ldr.w	r1, [r9]
    b958:	2903      	cmp	r1, #3
    b95a:	f340 808e 	ble.w	ba7a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b95e:	2905      	cmp	r1, #5
    b960:	f340 808d 	ble.w	ba7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    b964:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b968:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    b96a:	4291      	cmp	r1, r2
    b96c:	f040 808a 	bne.w	ba84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b970:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    b972:	f8d9 1000 	ldr.w	r1, [r9]
    b976:	2903      	cmp	r1, #3
    b978:	f340 8086 	ble.w	ba88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b97c:	2905      	cmp	r1, #5
    b97e:	f340 8085 	ble.w	ba8c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    b982:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b986:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    b988:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    b98a:	428a      	cmp	r2, r1
    b98c:	f300 8081 	bgt.w	ba92 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    b990:	aa21      	add	r2, sp, #132	; 0x84
    b992:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    b994:	683a      	ldr	r2, [r7, #0]
    b996:	2a01      	cmp	r2, #1
    b998:	dd7d      	ble.n	ba96 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b99a:	2a05      	cmp	r2, #5
    b99c:	dd7d      	ble.n	ba9a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    b99e:	687a      	ldr	r2, [r7, #4]
    b9a0:	6852      	ldr	r2, [r2, #4]
    b9a2:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    b9a4:	683a      	ldr	r2, [r7, #0]
    b9a6:	2a02      	cmp	r2, #2
    b9a8:	dd7a      	ble.n	baa0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9aa:	2a05      	cmp	r2, #5
    b9ac:	dd7a      	ble.n	baa4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    b9ae:	687a      	ldr	r2, [r7, #4]
    b9b0:	6892      	ldr	r2, [r2, #8]
    b9b2:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    b9b4:	683a      	ldr	r2, [r7, #0]
    b9b6:	2a03      	cmp	r2, #3
    b9b8:	dd77      	ble.n	baaa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9ba:	2a05      	cmp	r2, #5
    b9bc:	dd77      	ble.n	baae <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    b9be:	687a      	ldr	r2, [r7, #4]
    b9c0:	68d2      	ldr	r2, [r2, #12]
    b9c2:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    b9c4:	f8d8 2000 	ldr.w	r2, [r8]
    b9c8:	2a01      	cmp	r2, #1
    b9ca:	dd73      	ble.n	bab4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9cc:	2a05      	cmp	r2, #5
    b9ce:	dd73      	ble.n	bab8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    b9d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b9d4:	6852      	ldr	r2, [r2, #4]
    b9d6:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    b9d8:	f8d8 2000 	ldr.w	r2, [r8]
    b9dc:	2a02      	cmp	r2, #2
    b9de:	dd6f      	ble.n	bac0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9e0:	2a05      	cmp	r2, #5
    b9e2:	dd6f      	ble.n	bac4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    b9e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b9e8:	6892      	ldr	r2, [r2, #8]
    b9ea:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    b9ec:	f8d9 2000 	ldr.w	r2, [r9]
    b9f0:	2a01      	cmp	r2, #1
    b9f2:	dd6b      	ble.n	bacc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9f4:	2a05      	cmp	r2, #5
    b9f6:	dd6b      	ble.n	bad0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    b9f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b9fc:	6852      	ldr	r2, [r2, #4]
    b9fe:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    ba00:	f8d9 2000 	ldr.w	r2, [r9]
    ba04:	2a02      	cmp	r2, #2
    ba06:	dd67      	ble.n	bad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba08:	2a05      	cmp	r2, #5
    ba0a:	dd67      	ble.n	badc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    ba0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ba10:	6892      	ldr	r2, [r2, #8]
    ba12:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    ba14:	9a05      	ldr	r2, [sp, #20]
    ba16:	9806      	ldr	r0, [sp, #24]
    ba18:	fb02 f200 	mul.w	r2, r2, r0
    ba1c:	428a      	cmp	r2, r1
    ba1e:	d161      	bne.n	bae4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ba20:	681c      	ldr	r4, [r3, #0]
    ba22:	2c05      	cmp	r4, #5
    ba24:	dd60      	ble.n	bae8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    ba26:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    ba28:	2200      	movs	r2, #0
    int buffer_size = 1;
    ba2a:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    ba2c:	42a2      	cmp	r2, r4
    ba2e:	da5d      	bge.n	baec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    ba30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ba34:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    ba38:	3201      	adds	r2, #1
    ba3a:	e7f7      	b.n	ba2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ba3c:	f00a fb11 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ba40:	f00a fb0f 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ba44:	f00a fb0d 	bl	16062 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ba48:	f00a fb0b 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba4c:	f00a fb09 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba50:	687a      	ldr	r2, [r7, #4]
    ba52:	e753      	b.n	b8fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    ba54:	f00a fb05 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba58:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba5c:	e759      	b.n	b912 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ba5e:	f00a fb00 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba62:	f00a fafe 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba66:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba6a:	e761      	b.n	b930 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    ba6c:	aa22      	add	r2, sp, #136	; 0x88
    ba6e:	e764      	b.n	b93a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    ba70:	f00a faf7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba74:	f8d8 2010 	ldr.w	r2, [r8, #16]
    ba78:	e76c      	b.n	b954 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    ba7a:	f00a faf2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba7e:	f8d9 1010 	ldr.w	r1, [r9, #16]
    ba82:	e772      	b.n	b96a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ba84:	f00a faed 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ba88:	f00a faeb 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    ba90:	e77a      	b.n	b988 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    ba92:	aa20      	add	r2, sp, #128	; 0x80
    ba94:	e77d      	b.n	b992 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    ba96:	f00a fae4 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba9a:	68ba      	ldr	r2, [r7, #8]
    ba9c:	920c      	str	r2, [sp, #48]	; 0x30
    ba9e:	e781      	b.n	b9a4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    baa0:	f00a fadf 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baa4:	68fa      	ldr	r2, [r7, #12]
    baa6:	920b      	str	r2, [sp, #44]	; 0x2c
    baa8:	e784      	b.n	b9b4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    baaa:	f00a fada 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baae:	693a      	ldr	r2, [r7, #16]
    bab0:	9205      	str	r2, [sp, #20]
    bab2:	e787      	b.n	b9c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    bab4:	f00a fad5 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bab8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    babc:	920a      	str	r2, [sp, #40]	; 0x28
    babe:	e78b      	b.n	b9d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    bac0:	f00a facf 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bac4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    bac8:	9209      	str	r2, [sp, #36]	; 0x24
    baca:	e78f      	b.n	b9ec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    bacc:	f00a fac9 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bad0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    bad4:	9208      	str	r2, [sp, #32]
    bad6:	e793      	b.n	ba00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    bad8:	f00a fac3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    badc:	f8d9 200c 	ldr.w	r2, [r9, #12]
    bae0:	9207      	str	r2, [sp, #28]
    bae2:	e797      	b.n	ba14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    bae4:	f00a fabd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bae8:	3304      	adds	r3, #4
    baea:	e79d      	b.n	ba28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    baec:	428d      	cmp	r5, r1
    baee:	d128      	bne.n	bb42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    baf0:	f04f 0a00 	mov.w	sl, #0
    baf4:	46c3      	mov	fp, r8
    baf6:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    bafa:	46d1      	mov	r9, sl
    bafc:	46ba      	mov	sl, r7
    bafe:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    bb00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bb02:	4599      	cmp	r9, r3
    bb04:	f280 81b4 	bge.w	be70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    bb08:	2300      	movs	r3, #0
    bb0a:	9301      	str	r3, [sp, #4]
    bb0c:	f8cd 900c 	str.w	r9, [sp, #12]
    bb10:	46d0      	mov	r8, sl
    bb12:	46d9      	mov	r9, fp
    bb14:	46ba      	mov	sl, r7
    bb16:	9b01      	ldr	r3, [sp, #4]
    bb18:	9a08      	ldr	r2, [sp, #32]
    bb1a:	4293      	cmp	r3, r2
    bb1c:	f280 81a0 	bge.w	be60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    bb20:	2300      	movs	r3, #0
    bb22:	9302      	str	r3, [sp, #8]
    bb24:	464f      	mov	r7, r9
    bb26:	46c1      	mov	r9, r8
    bb28:	46d0      	mov	r8, sl
    bb2a:	9b02      	ldr	r3, [sp, #8]
    bb2c:	9a07      	ldr	r2, [sp, #28]
    bb2e:	4293      	cmp	r3, r2
    bb30:	f280 818f 	bge.w	be52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    bb34:	f04f 0b00 	mov.w	fp, #0
    bb38:	46da      	mov	sl, fp
    bb3a:	46cb      	mov	fp, r9
    bb3c:	46c1      	mov	r9, r8
    bb3e:	46b8      	mov	r8, r7
    bb40:	e17a      	b.n	be38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    bb42:	f00a fa8e 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bb46:	f00a fa8c 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bb4a:	f00a fa8a 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bb4e:	f00a fa88 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bb52:	f00a fa86 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bb56:	f00a fa84 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bb5a:	f00a fa82 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bb5e:	f00a fa80 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bb62:	f00a fa7e 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bb66:	f00a fa7c 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bb6a:	f00a fa7a 	bl	16062 <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    bb6e:	3201      	adds	r2, #1
    bb70:	9909      	ldr	r1, [sp, #36]	; 0x24
    bb72:	428a      	cmp	r2, r1
    bb74:	da5e      	bge.n	bc34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    bb76:	9911      	ldr	r1, [sp, #68]	; 0x44
    bb78:	980d      	ldr	r0, [sp, #52]	; 0x34
    bb7a:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    bb7e:	9912      	ldr	r1, [sp, #72]	; 0x48
    bb80:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    bb84:	2e00      	cmp	r6, #0
    bb86:	dbf2      	blt.n	bb6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bb88:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bb8a:	428e      	cmp	r6, r1
    bb8c:	daef      	bge.n	bb6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bb8e:	2f00      	cmp	r7, #0
    bb90:	dbed      	blt.n	bb6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bb92:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb94:	428f      	cmp	r7, r1
    bb96:	daea      	bge.n	bb6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    bb98:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bb9c:	2804      	cmp	r0, #4
    bb9e:	d1d2      	bne.n	bb46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bba0:	9903      	ldr	r1, [sp, #12]
    bba2:	2900      	cmp	r1, #0
    bba4:	dbd1      	blt.n	bb4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    bba6:	f8db 0004 	ldr.w	r0, [fp, #4]
    bbaa:	4281      	cmp	r1, r0
    bbac:	dacd      	bge.n	bb4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bbae:	2f00      	cmp	r7, #0
    bbb0:	dbcd      	blt.n	bb4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    bbb2:	f8db e008 	ldr.w	lr, [fp, #8]
    bbb6:	4577      	cmp	r7, lr
    bbb8:	dac9      	bge.n	bb4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bbba:	2e00      	cmp	r6, #0
    bbbc:	dbc9      	blt.n	bb52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    bbbe:	f8db c00c 	ldr.w	ip, [fp, #12]
    bbc2:	4566      	cmp	r6, ip
    bbc4:	dac5      	bge.n	bb52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bbc6:	f1ba 0f00 	cmp.w	sl, #0
    bbca:	dbc4      	blt.n	bb56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    bbcc:	f8db 0010 	ldr.w	r0, [fp, #16]
    bbd0:	4582      	cmp	sl, r0
    bbd2:	dac0      	bge.n	bb56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bbd4:	9903      	ldr	r1, [sp, #12]
    bbd6:	fb0e 7701 	mla	r7, lr, r1, r7
    bbda:	fb07 660c 	mla	r6, r7, ip, r6
    bbde:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    bbe2:	992e      	ldr	r1, [sp, #184]	; 0xb8
    bbe4:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    bbe6:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bbea:	2804      	cmp	r0, #4
    bbec:	d1b5      	bne.n	bb5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bbee:	f8d8 0004 	ldr.w	r0, [r8, #4]
    bbf2:	2800      	cmp	r0, #0
    bbf4:	ddb3      	ble.n	bb5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bbf6:	2b00      	cmp	r3, #0
    bbf8:	dbb3      	blt.n	bb62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    bbfa:	f8d8 0008 	ldr.w	r0, [r8, #8]
    bbfe:	4283      	cmp	r3, r0
    bc00:	daaf      	bge.n	bb62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bc02:	2a00      	cmp	r2, #0
    bc04:	dbaf      	blt.n	bb66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    bc06:	f8d8 700c 	ldr.w	r7, [r8, #12]
    bc0a:	42ba      	cmp	r2, r7
    bc0c:	daab      	bge.n	bb66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bc0e:	2d00      	cmp	r5, #0
    bc10:	dbab      	blt.n	bb6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    bc12:	f8d8 0010 	ldr.w	r0, [r8, #16]
    bc16:	4285      	cmp	r5, r0
    bc18:	daa7      	bge.n	bb6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bc1a:	fb07 2703 	mla	r7, r7, r3, r2
    bc1e:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    bc22:	9930      	ldr	r1, [sp, #192]	; 0xc0
    bc24:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    bc26:	9915      	ldr	r1, [sp, #84]	; 0x54
    bc28:	440e      	add	r6, r1
    bc2a:	981d      	ldr	r0, [sp, #116]	; 0x74
    bc2c:	fb07 0006 	mla	r0, r7, r6, r0
    bc30:	901d      	str	r0, [sp, #116]	; 0x74
    bc32:	e79c      	b.n	bb6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bc34:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    bc36:	3301      	adds	r3, #1
    bc38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bc3a:	4293      	cmp	r3, r2
    bc3c:	da02      	bge.n	bc44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    bc3e:	2200      	movs	r2, #0
    bc40:	910d      	str	r1, [sp, #52]	; 0x34
    bc42:	e795      	b.n	bb70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    bc44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    bc46:	b123      	cbz	r3, bc52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    bc48:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    bc4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    bc4e:	4413      	add	r3, r2
    bc50:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    bc52:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    bc54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bc56:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    bc5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bc5c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    bc60:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    bc64:	2e00      	cmp	r6, #0
    bc66:	f340 80b3 	ble.w	bdd0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    bc6a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    bc6c:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bc6e:	45a4      	cmp	ip, r4
    bc70:	f000 80b0 	beq.w	bdd4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    bc74:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    bc76:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    bc78:	4660      	mov	r0, ip
    bc7a:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    bc7c:	fb04 f101 	mul.w	r1, r4, r1
    bc80:	fb0c 1103 	mla	r1, ip, r3, r1
    bc84:	fba4 230c 	umull	r2, r3, r4, ip
    bc88:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bc8a:	2a00      	cmp	r2, #0
    bc8c:	f173 0100 	sbcs.w	r1, r3, #0
    bc90:	f2c0 80a7 	blt.w	bde2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    bc94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bc98:	1852      	adds	r2, r2, r1
    bc9a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    bc9e:	4611      	mov	r1, r2
    bca0:	461c      	mov	r4, r3
    bca2:	2a00      	cmp	r2, #0
    bca4:	f173 0000 	sbcs.w	r0, r3, #0
    bca8:	f2c0 809d 	blt.w	bde6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    bcac:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    bcae:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bcb2:	2f00      	cmp	r7, #0
    bcb4:	f040 809f 	bne.w	bdf6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    bcb8:	2e00      	cmp	r6, #0
    bcba:	f2c0 809f 	blt.w	bdfc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    bcbe:	2e1f      	cmp	r6, #31
    bcc0:	f300 80a3 	bgt.w	be0a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    bcc4:	2701      	movs	r7, #1
    bcc6:	fa07 f006 	lsl.w	r0, r7, r6
    bcca:	3801      	subs	r0, #1
    bccc:	f008 f81f 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bcd0:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    bcd2:	2000      	movs	r0, #0
    bcd4:	f008 f81b 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bcd8:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    bcda:	4638      	mov	r0, r7
    bcdc:	f008 f817 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bce0:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    bce2:	990d      	ldr	r1, [sp, #52]	; 0x34
    bce4:	4620      	mov	r0, r4
    bce6:	f008 f813 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bcea:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    bcec:	4639      	mov	r1, r7
    bcee:	980d      	ldr	r0, [sp, #52]	; 0x34
    bcf0:	f008 f810 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    bcf4:	4607      	mov	r7, r0
    bcf6:	9918      	ldr	r1, [sp, #96]	; 0x60
    bcf8:	4620      	mov	r0, r4
    bcfa:	f008 f817 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    bcfe:	990e      	ldr	r1, [sp, #56]	; 0x38
    bd00:	f008 f806 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bd04:	4601      	mov	r1, r0
    bd06:	4638      	mov	r0, r7
    bd08:	f008 f806 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    bd0c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    bd0e:	4631      	mov	r1, r6
    bd10:	4620      	mov	r0, r4
    bd12:	f007 ffff 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    bd16:	4604      	mov	r4, r0
    bd18:	4639      	mov	r1, r7
    bd1a:	9819      	ldr	r0, [sp, #100]	; 0x64
    bd1c:	f008 f80e 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    bd20:	990e      	ldr	r1, [sp, #56]	; 0x38
    bd22:	f007 fff5 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bd26:	4601      	mov	r1, r0
    bd28:	4620      	mov	r0, r4
    bd2a:	f007 fff5 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    bd2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bd30:	4418      	add	r0, r3
    bd32:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    bd34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    bd36:	4290      	cmp	r0, r2
    bd38:	db6e      	blt.n	be18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    bd3a:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    bd3c:	681b      	ldr	r3, [r3, #0]
    bd3e:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    bd40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    bd42:	4293      	cmp	r3, r2
    bd44:	dc6a      	bgt.n	be1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    bd46:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    bd48:	6818      	ldr	r0, [r3, #0]
    bd4a:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    bd4c:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bd50:	2b04      	cmp	r3, #4
    bd52:	d165      	bne.n	be20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bd54:	9a03      	ldr	r2, [sp, #12]
    bd56:	2a00      	cmp	r2, #0
    bd58:	db64      	blt.n	be24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    bd5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    bd5e:	429a      	cmp	r2, r3
    bd60:	da60      	bge.n	be24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bd62:	9b01      	ldr	r3, [sp, #4]
    bd64:	2b00      	cmp	r3, #0
    bd66:	db5f      	blt.n	be28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    bd68:	f8d9 1008 	ldr.w	r1, [r9, #8]
    bd6c:	428b      	cmp	r3, r1
    bd6e:	da5b      	bge.n	be28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bd70:	9b02      	ldr	r3, [sp, #8]
    bd72:	2b00      	cmp	r3, #0
    bd74:	db5a      	blt.n	be2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    bd76:	f8d9 200c 	ldr.w	r2, [r9, #12]
    bd7a:	4293      	cmp	r3, r2
    bd7c:	da56      	bge.n	be2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bd7e:	2d00      	cmp	r5, #0
    bd80:	db56      	blt.n	be30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    bd82:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bd86:	429d      	cmp	r5, r3
    bd88:	da52      	bge.n	be30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bd8a:	9c03      	ldr	r4, [sp, #12]
    bd8c:	9e01      	ldr	r6, [sp, #4]
    bd8e:	fb01 6104 	mla	r1, r1, r4, r6
    bd92:	9c02      	ldr	r4, [sp, #8]
    bd94:	fb01 4202 	mla	r2, r1, r2, r4
    bd98:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    bd9c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    bd9e:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    bda0:	9b04      	ldr	r3, [sp, #16]
    bda2:	3301      	adds	r3, #1
    bda4:	9304      	str	r3, [sp, #16]
    bda6:	9904      	ldr	r1, [sp, #16]
    bda8:	9b06      	ldr	r3, [sp, #24]
    bdaa:	4299      	cmp	r1, r3
    bdac:	da42      	bge.n	be34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    bdae:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    bdb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bdb4:	9a02      	ldr	r2, [sp, #8]
    bdb6:	fb03 f102 	mul.w	r1, r3, r2
    bdba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bdbc:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    bdbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bdc0:	9a01      	ldr	r2, [sp, #4]
    bdc2:	fb03 f402 	mul.w	r4, r3, r2
    bdc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bdc8:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    bdca:	2300      	movs	r3, #0
    bdcc:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    bdce:	e733      	b.n	bc38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    bdd0:	4276      	negs	r6, r6
    bdd2:	e74b      	b.n	bc6c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bdd4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    bdd8:	d001      	beq.n	bdde <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    bdda:	2700      	movs	r7, #0
    bddc:	e74b      	b.n	bc76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    bdde:	2701      	movs	r7, #1
    bde0:	e749      	b.n	bc76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bde2:	4925      	ldr	r1, [pc, #148]	; (be78 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    bde4:	e758      	b.n	bc98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bde6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bdea:	1851      	adds	r1, r2, r1
    bdec:	f04f 0400 	mov.w	r4, #0
    bdf0:	eb43 0404 	adc.w	r4, r3, r4
    bdf4:	e75a      	b.n	bcac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bdf6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    bdfa:	e75d      	b.n	bcb8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    bdfc:	4b1f      	ldr	r3, [pc, #124]	; (be7c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    bdfe:	4a20      	ldr	r2, [pc, #128]	; (be80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    be00:	f44f 71b3 	mov.w	r1, #358	; 0x166
    be04:	481f      	ldr	r0, [pc, #124]	; (be84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    be06:	f004 fd5b 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    be0a:	4b1f      	ldr	r3, [pc, #124]	; (be88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    be0c:	4a1c      	ldr	r2, [pc, #112]	; (be80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    be0e:	f240 1167 	movw	r1, #359	; 0x167
    be12:	481c      	ldr	r0, [pc, #112]	; (be84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    be14:	f004 fd54 	bl	108c0 <__assert_func>
	return __b;
    be18:	ab1f      	add	r3, sp, #124	; 0x7c
    be1a:	e78f      	b.n	bd3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    be1c:	ab1e      	add	r3, sp, #120	; 0x78
    be1e:	e793      	b.n	bd48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    be20:	f00a f91f 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    be24:	f00a f91d 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    be28:	f00a f91b 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    be2c:	f00a f919 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    be30:	f00a f917 	bl	16062 <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    be34:	f10a 0a01 	add.w	sl, sl, #1
    be38:	9b05      	ldr	r3, [sp, #20]
    be3a:	459a      	cmp	sl, r3
    be3c:	da02      	bge.n	be44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    be3e:	2300      	movs	r3, #0
    be40:	9304      	str	r3, [sp, #16]
    be42:	e7b0      	b.n	bda6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    be44:	4647      	mov	r7, r8
    be46:	46c8      	mov	r8, r9
    be48:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    be4a:	9b02      	ldr	r3, [sp, #8]
    be4c:	3301      	adds	r3, #1
    be4e:	9302      	str	r3, [sp, #8]
    be50:	e66b      	b.n	bb2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    be52:	46c2      	mov	sl, r8
    be54:	46c8      	mov	r8, r9
    be56:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    be58:	9b01      	ldr	r3, [sp, #4]
    be5a:	3301      	adds	r3, #1
    be5c:	9301      	str	r3, [sp, #4]
    be5e:	e65a      	b.n	bb16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    be60:	46cb      	mov	fp, r9
    be62:	f8dd 900c 	ldr.w	r9, [sp, #12]
    be66:	4657      	mov	r7, sl
    be68:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    be6a:	f109 0901 	add.w	r9, r9, #1
    be6e:	e647      	b.n	bb00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    be70:	b025      	add	sp, #148	; 0x94
    be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be76:	bf00      	nop
    be78:	c0000001 	.word	0xc0000001
    be7c:	0006b180 	.word	0x0006b180
    be80:	0006b190 	.word	0x0006b190
    be84:	0006b1e8 	.word	0x0006b1e8
    be88:	0006b244 	.word	0x0006b244

0000be8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be90:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    be92:	f8d1 9010 	ldr.w	r9, [r1, #16]
    be96:	f1b9 0f00 	cmp.w	r9, #0
    be9a:	d041      	beq.n	bf20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    be9c:	4605      	mov	r5, r0
    be9e:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    bea0:	f8d1 a014 	ldr.w	sl, [r1, #20]
    bea4:	f1ba 0f00 	cmp.w	sl, #0
    bea8:	d03c      	beq.n	bf24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    beaa:	4b86      	ldr	r3, [pc, #536]	; (c0c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    beac:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    beae:	2800      	cmp	r0, #0
    beb0:	d03a      	beq.n	bf28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    beb2:	2e00      	cmp	r6, #0
    beb4:	d03a      	beq.n	bf2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    beb6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    beb8:	6873      	ldr	r3, [r6, #4]
    beba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bebe:	6859      	ldr	r1, [r3, #4]
    bec0:	4790      	blx	r2
    bec2:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    bec4:	4b80      	ldr	r3, [pc, #512]	; (c0c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    bec6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bec8:	2d00      	cmp	r5, #0
    beca:	d031      	beq.n	bf30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    becc:	2e00      	cmp	r6, #0
    bece:	d031      	beq.n	bf34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bed0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bed2:	6833      	ldr	r3, [r6, #0]
    bed4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bed8:	6859      	ldr	r1, [r3, #4]
    beda:	4628      	mov	r0, r5
    bedc:	4790      	blx	r2
    bede:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    bee0:	4b7a      	ldr	r3, [pc, #488]	; (c0cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    bee2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bee4:	b345      	cbz	r5, bf38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    bee6:	b34e      	cbz	r6, bf3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bee8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    beea:	6833      	ldr	r3, [r6, #0]
    beec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bef0:	6859      	ldr	r1, [r3, #4]
    bef2:	4628      	mov	r0, r5
    bef4:	4790      	blx	r2
    bef6:	4680      	mov	r8, r0
    bef8:	6833      	ldr	r3, [r6, #0]
    befa:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    befc:	2b03      	cmp	r3, #3
    befe:	d01f      	beq.n	bf40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    bf00:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    bf02:	7a38      	ldrb	r0, [r7, #8]
    bf04:	2801      	cmp	r0, #1
    bf06:	d02c      	beq.n	bf62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    bf08:	2809      	cmp	r0, #9
    bf0a:	d07f      	beq.n	c00c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    bf0c:	696c      	ldr	r4, [r5, #20]
    bf0e:	f7fd f965 	bl	91dc <TfLiteTypeGetName>
    bf12:	4602      	mov	r2, r0
    bf14:	7a3b      	ldrb	r3, [r7, #8]
    bf16:	496e      	ldr	r1, [pc, #440]	; (c0d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    bf18:	4628      	mov	r0, r5
    bf1a:	47a0      	blx	r4
      return kTfLiteError;
    bf1c:	2001      	movs	r0, #1
    bf1e:	e072      	b.n	c006 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    bf20:	f00a f89f 	bl	16062 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    bf24:	f00a f89d 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    bf28:	f00a f89b 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    bf2c:	f00a f899 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    bf30:	f00a f897 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    bf34:	f00a f895 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    bf38:	f00a f893 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    bf3c:	f00a f891 	bl	16062 <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    bf40:	4b64      	ldr	r3, [pc, #400]	; (c0d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    bf42:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bf44:	b14d      	cbz	r5, bf5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    bf46:	b156      	cbz	r6, bf5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bf48:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bf4a:	6833      	ldr	r3, [r6, #0]
    bf4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bf50:	6859      	ldr	r1, [r3, #4]
    bf52:	4628      	mov	r0, r5
    bf54:	4790      	blx	r2
    bf56:	4606      	mov	r6, r0
    bf58:	e7d3      	b.n	bf02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    bf5a:	f00a f882 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    bf5e:	f00a f880 	bl	16062 <abort>
          DepthwiseConvParamsFloat(params, data),
    bf62:	464a      	mov	r2, r9
    bf64:	4651      	mov	r1, sl
    bf66:	a80a      	add	r0, sp, #40	; 0x28
    bf68:	f008 fc2c 	bl	147c4 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    bf6c:	4639      	mov	r1, r7
    bf6e:	a81a      	add	r0, sp, #104	; 0x68
    bf70:	f008 fca2 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bf74:	4638      	mov	r0, r7
    bf76:	f007 feb6 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bf7a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    bf7c:	4641      	mov	r1, r8
    bf7e:	a820      	add	r0, sp, #128	; 0x80
    bf80:	f008 fc9a 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bf84:	4640      	mov	r0, r8
    bf86:	f007 feae 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bf8a:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    bf8c:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    bf90:	4631      	mov	r1, r6
    bf92:	4640      	mov	r0, r8
    bf94:	f008 fc90 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bf98:	4630      	mov	r0, r6
    bf9a:	f007 fea4 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    bf9e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    bfa0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    bfa4:	4621      	mov	r1, r4
    bfa6:	4648      	mov	r0, r9
    bfa8:	f008 fc86 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    bfac:	4620      	mov	r0, r4
    bfae:	f007 fea0 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    bfb2:	9004      	str	r0, [sp, #16]
    bfb4:	f8cd 900c 	str.w	r9, [sp, #12]
    bfb8:	9602      	str	r6, [sp, #8]
    bfba:	f8cd 8004 	str.w	r8, [sp, #4]
    bfbe:	9700      	str	r7, [sp, #0]
    bfc0:	ab20      	add	r3, sp, #128	; 0x80
    bfc2:	462a      	mov	r2, r5
    bfc4:	a91a      	add	r1, sp, #104	; 0x68
    bfc6:	a80a      	add	r0, sp, #40	; 0x28
    bfc8:	f008 f97e 	bl	142c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    bfcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    bfce:	2b05      	cmp	r3, #5
    bfd0:	dd03      	ble.n	bfda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    bfd2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    bfd4:	b108      	cbz	r0, bfda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    bfd6:	f00a f82f 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bfda:	9b26      	ldr	r3, [sp, #152]	; 0x98
    bfdc:	2b05      	cmp	r3, #5
    bfde:	dd03      	ble.n	bfe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    bfe0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    bfe2:	b108      	cbz	r0, bfe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    bfe4:	f00a f828 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bfe8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    bfea:	2b05      	cmp	r3, #5
    bfec:	dd03      	ble.n	bff6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    bfee:	9821      	ldr	r0, [sp, #132]	; 0x84
    bff0:	b108      	cbz	r0, bff6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    bff2:	f00a f821 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    bff6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bff8:	2b05      	cmp	r3, #5
    bffa:	dd03      	ble.n	c004 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    bffc:	981b      	ldr	r0, [sp, #108]	; 0x6c
    bffe:	b108      	cbz	r0, c004 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    c000:	f00a f81a 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    c004:	2000      	movs	r0, #0
}
    c006:	b04b      	add	sp, #300	; 0x12c
    c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    c00c:	464a      	mov	r2, r9
    c00e:	4651      	mov	r1, sl
    c010:	a80a      	add	r0, sp, #40	; 0x28
    c012:	f008 fbae 	bl	14772 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    c016:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    c01a:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    c01e:	4639      	mov	r1, r7
    c020:	a832      	add	r0, sp, #200	; 0xc8
    c022:	f008 fc49 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c026:	4638      	mov	r0, r7
    c028:	f007 fe67 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c02c:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    c02e:	af38      	add	r7, sp, #224	; 0xe0
    c030:	4641      	mov	r1, r8
    c032:	4638      	mov	r0, r7
    c034:	f008 fc40 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c038:	4640      	mov	r0, r8
    c03a:	f007 fe5e 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c03e:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    c040:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    c044:	4631      	mov	r1, r6
    c046:	4640      	mov	r0, r8
    c048:	f008 fc36 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c04c:	4630      	mov	r0, r6
    c04e:	f007 fe87 	bl	13d60 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    c052:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c054:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    c058:	4621      	mov	r1, r4
    c05a:	4648      	mov	r0, r9
    c05c:	f008 fc2c 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c060:	4620      	mov	r0, r4
    c062:	f007 fe50 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    c066:	9006      	str	r0, [sp, #24]
    c068:	f8cd 9014 	str.w	r9, [sp, #20]
    c06c:	9604      	str	r6, [sp, #16]
    c06e:	f8cd 800c 	str.w	r8, [sp, #12]
    c072:	9502      	str	r5, [sp, #8]
    c074:	9701      	str	r7, [sp, #4]
    c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c078:	9300      	str	r3, [sp, #0]
    c07a:	ab32      	add	r3, sp, #200	; 0xc8
    c07c:	465a      	mov	r2, fp
    c07e:	4651      	mov	r1, sl
    c080:	a80a      	add	r0, sp, #40	; 0x28
    c082:	f7ff fbf9 	bl	b878 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    c086:	9b44      	ldr	r3, [sp, #272]	; 0x110
    c088:	2b05      	cmp	r3, #5
    c08a:	dd03      	ble.n	c094 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    c08c:	9845      	ldr	r0, [sp, #276]	; 0x114
    c08e:	b108      	cbz	r0, c094 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    c090:	f009 ffd2 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c094:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    c096:	2b05      	cmp	r3, #5
    c098:	dd03      	ble.n	c0a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    c09a:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c09c:	b108      	cbz	r0, c0a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    c09e:	f009 ffcb 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    c0a4:	2b05      	cmp	r3, #5
    c0a6:	dd03      	ble.n	c0b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    c0a8:	9839      	ldr	r0, [sp, #228]	; 0xe4
    c0aa:	b108      	cbz	r0, c0b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    c0ac:	f009 ffc4 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    c0b2:	2b05      	cmp	r3, #5
    c0b4:	dd03      	ble.n	c0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    c0b6:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c0b8:	b108      	cbz	r0, c0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    c0ba:	f009 ffbd 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    c0be:	2000      	movs	r0, #0
      break;
    c0c0:	e7a1      	b.n	c006 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    c0c2:	bf00      	nop
    c0c4:	0006b5b8 	.word	0x0006b5b8
    c0c8:	0006b5b4 	.word	0x0006b5b4
    c0cc:	0006b5bc 	.word	0x0006b5bc
    c0d0:	0006b338 	.word	0x0006b338
    c0d4:	0006b5b0 	.word	0x0006b5b0

0000c0d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    c0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0dc:	b08f      	sub	sp, #60	; 0x3c
    c0de:	4604      	mov	r4, r0
    c0e0:	460d      	mov	r5, r1
    c0e2:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    c0e4:	6809      	ldr	r1, [r1, #0]
    c0e6:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    c0e8:	2903      	cmp	r1, #3
    c0ea:	d00a      	beq.n	c102 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    c0ec:	2902      	cmp	r1, #2
    c0ee:	d008      	beq.n	c102 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    c0f0:	6945      	ldr	r5, [r0, #20]
    c0f2:	4b79      	ldr	r3, [pc, #484]	; (c2d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    c0f4:	9300      	str	r3, [sp, #0]
    c0f6:	2357      	movs	r3, #87	; 0x57
    c0f8:	4a78      	ldr	r2, [pc, #480]	; (c2dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c0fa:	4979      	ldr	r1, [pc, #484]	; (c2e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c0fc:	47a8      	blx	r5
    c0fe:	2001      	movs	r0, #1
    c100:	e011      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    c102:	686a      	ldr	r2, [r5, #4]
    c104:	6812      	ldr	r2, [r2, #0]
    c106:	2a01      	cmp	r2, #1
    c108:	d010      	beq.n	c12c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    c10a:	6966      	ldr	r6, [r4, #20]
    c10c:	2501      	movs	r5, #1
    c10e:	9503      	str	r5, [sp, #12]
    c110:	9202      	str	r2, [sp, #8]
    c112:	4b74      	ldr	r3, [pc, #464]	; (c2e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    c114:	9301      	str	r3, [sp, #4]
    c116:	4b74      	ldr	r3, [pc, #464]	; (c2e8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    c118:	9300      	str	r3, [sp, #0]
    c11a:	2358      	movs	r3, #88	; 0x58
    c11c:	4a6f      	ldr	r2, [pc, #444]	; (c2dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c11e:	4973      	ldr	r1, [pc, #460]	; (c2ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    c120:	4620      	mov	r0, r4
    c122:	47b0      	blx	r6
    c124:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    c126:	b00f      	add	sp, #60	; 0x3c
    c128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    c12c:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    c130:	68b1      	ldr	r1, [r6, #8]
    c132:	6872      	ldr	r2, [r6, #4]
    c134:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    c138:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c13a:	3801      	subs	r0, #1
    c13c:	6977      	ldr	r7, [r6, #20]
    c13e:	fb00 f007 	mul.w	r0, r0, r7
    c142:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    c146:	b1b2      	cbz	r2, c176 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    c148:	f1be 0f01 	cmp.w	lr, #1
    c14c:	d005      	beq.n	c15a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    c14e:	f1be 0f02 	cmp.w	lr, #2
    c152:	d009      	beq.n	c168 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    c154:	f04f 0c00 	mov.w	ip, #0
    c158:	e00e      	b.n	c178 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    c15a:	eb02 0c03 	add.w	ip, r2, r3
    c15e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c162:	fb9c fcf2 	sdiv	ip, ip, r2
    c166:	e007      	b.n	c178 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    c168:	eb02 0c03 	add.w	ip, r2, r3
    c16c:	ebac 0c09 	sub.w	ip, ip, r9
    c170:	fb9c fcf2 	sdiv	ip, ip, r2
    c174:	e000      	b.n	c178 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    c176:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    c178:	9f18      	ldr	r7, [sp, #96]	; 0x60
    c17a:	3f01      	subs	r7, #1
    c17c:	fb07 f708 	mul.w	r7, r7, r8
    c180:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    c182:	b1c1      	cbz	r1, c1b6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    c184:	f1be 0f01 	cmp.w	lr, #1
    c188:	d005      	beq.n	c196 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    c18a:	f1be 0f02 	cmp.w	lr, #2
    c18e:	d00a      	beq.n	c1a6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    c190:	f04f 0e00 	mov.w	lr, #0
    c194:	e010      	b.n	c1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    c196:	9816      	ldr	r0, [sp, #88]	; 0x58
    c198:	eb01 0e00 	add.w	lr, r1, r0
    c19c:	f10e 3eff 	add.w	lr, lr, #4294967295
    c1a0:	fb9e fef1 	sdiv	lr, lr, r1
    c1a4:	e008      	b.n	c1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    c1a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    c1a8:	eb01 0e00 	add.w	lr, r1, r0
    c1ac:	ebae 0e07 	sub.w	lr, lr, r7
    c1b0:	fb9e fef1 	sdiv	lr, lr, r1
    c1b4:	e000      	b.n	c1b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    c1b6:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    c1b8:	f10e 3eff 	add.w	lr, lr, #4294967295
    c1bc:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    c1c0:	9f16      	ldr	r7, [sp, #88]	; 0x58
    c1c2:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    c1c4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    c1c8:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    c1cc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    c1d0:	1049      	asrs	r1, r1, #1
  padding_values.height =
    c1d2:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    c1d4:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    c1d6:	f10c 3cff 	add.w	ip, ip, #4294967295
    c1da:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    c1de:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    c1e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    c1e4:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    c1e8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    c1ec:	1052      	asrs	r2, r2, #1
  padding_values.width =
    c1ee:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    c1f0:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    c1f2:	ab0e      	add	r3, sp, #56	; 0x38
    c1f4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    c1f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    c1fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    c1fe:	4b3c      	ldr	r3, [pc, #240]	; (c2f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    c200:	681a      	ldr	r2, [r3, #0]
    c202:	4629      	mov	r1, r5
    c204:	4620      	mov	r0, r4
    c206:	f007 fcaf 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c20a:	4607      	mov	r7, r0
    c20c:	b320      	cbz	r0, c258 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    c20e:	4b39      	ldr	r3, [pc, #228]	; (c2f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    c210:	681a      	ldr	r2, [r3, #0]
    c212:	4629      	mov	r1, r5
    c214:	4620      	mov	r0, r4
    c216:	f007 fca7 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c21a:	4680      	mov	r8, r0
    c21c:	b330      	cbz	r0, c26c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    c21e:	4b36      	ldr	r3, [pc, #216]	; (c2f8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    c220:	681a      	ldr	r2, [r3, #0]
    c222:	4629      	mov	r1, r5
    c224:	4620      	mov	r0, r4
    c226:	f007 fcdd 	bl	13be4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c22a:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    c22c:	4b33      	ldr	r3, [pc, #204]	; (c2fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    c22e:	681a      	ldr	r2, [r3, #0]
    c230:	4629      	mov	r1, r5
    c232:	4620      	mov	r0, r4
    c234:	f007 fcb7 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c238:	4605      	mov	r5, r0
    c23a:	b308      	cbz	r0, c280 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    c23c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    c240:	2b01      	cmp	r3, #1
    c242:	d127      	bne.n	c294 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    c244:	693b      	ldr	r3, [r7, #16]
    c246:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c248:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    c24a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    c24e:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    c250:	692b      	ldr	r3, [r5, #16]
    c252:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    c254:	2000      	movs	r0, #0
    c256:	e766      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    c258:	6965      	ldr	r5, [r4, #20]
    c25a:	4b29      	ldr	r3, [pc, #164]	; (c300 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    c25c:	9300      	str	r3, [sp, #0]
    c25e:	2362      	movs	r3, #98	; 0x62
    c260:	4a1e      	ldr	r2, [pc, #120]	; (c2dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c262:	491f      	ldr	r1, [pc, #124]	; (c2e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c264:	4620      	mov	r0, r4
    c266:	47a8      	blx	r5
    c268:	2001      	movs	r0, #1
    c26a:	e75c      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    c26c:	6965      	ldr	r5, [r4, #20]
    c26e:	4b25      	ldr	r3, [pc, #148]	; (c304 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    c270:	9300      	str	r3, [sp, #0]
    c272:	2364      	movs	r3, #100	; 0x64
    c274:	4a19      	ldr	r2, [pc, #100]	; (c2dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c276:	491a      	ldr	r1, [pc, #104]	; (c2e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c278:	4620      	mov	r0, r4
    c27a:	47a8      	blx	r5
    c27c:	2001      	movs	r0, #1
    c27e:	e752      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    c280:	6965      	ldr	r5, [r4, #20]
    c282:	4b21      	ldr	r3, [pc, #132]	; (c308 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    c284:	9300      	str	r3, [sp, #0]
    c286:	2368      	movs	r3, #104	; 0x68
    c288:	4a14      	ldr	r2, [pc, #80]	; (c2dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c28a:	4915      	ldr	r1, [pc, #84]	; (c2e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c28c:	4620      	mov	r0, r4
    c28e:	47a8      	blx	r5
    c290:	2001      	movs	r0, #1
    c292:	e748      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c294:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c298:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    c29a:	3610      	adds	r6, #16
    c29c:	9308      	str	r3, [sp, #32]
    c29e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c2a2:	9307      	str	r3, [sp, #28]
    c2a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c2a8:	9306      	str	r3, [sp, #24]
    c2aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2ac:	3330      	adds	r3, #48	; 0x30
    c2ae:	9305      	str	r3, [sp, #20]
    c2b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2b2:	332c      	adds	r3, #44	; 0x2c
    c2b4:	9304      	str	r3, [sp, #16]
    c2b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2b8:	3320      	adds	r3, #32
    c2ba:	9303      	str	r3, [sp, #12]
    c2bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c2be:	331c      	adds	r3, #28
    c2c0:	9302      	str	r3, [sp, #8]
    c2c2:	9601      	str	r6, [sp, #4]
    c2c4:	9000      	str	r0, [sp, #0]
    c2c6:	464b      	mov	r3, r9
    c2c8:	4642      	mov	r2, r8
    c2ca:	4639      	mov	r1, r7
    c2cc:	4620      	mov	r0, r4
    c2ce:	f7fd f9d3 	bl	9678 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d0b6      	beq.n	c244 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    c2d6:	e726      	b.n	c126 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    c2d8:	0006b3a8 	.word	0x0006b3a8
    c2dc:	0006b4d0 	.word	0x0006b4d0
    c2e0:	0006a9cc 	.word	0x0006a9cc
    c2e4:	0006ba14 	.word	0x0006ba14
    c2e8:	0006b3cc 	.word	0x0006b3cc
    c2ec:	0006ac8c 	.word	0x0006ac8c
    c2f0:	0006b4c4 	.word	0x0006b4c4
    c2f4:	0006b4cc 	.word	0x0006b4cc
    c2f8:	0006b4c0 	.word	0x0006b4c0
    c2fc:	0006b4c8 	.word	0x0006b4c8
    c300:	0006b3e0 	.word	0x0006b3e0
    c304:	0006b3f4 	.word	0x0006b3f4
    c308:	0006b408 	.word	0x0006b408

0000c30c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c310:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    c312:	690e      	ldr	r6, [r1, #16]
    c314:	2e00      	cmp	r6, #0
    c316:	d051      	beq.n	c3bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    c318:	4604      	mov	r4, r0
    c31a:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c31c:	694f      	ldr	r7, [r1, #20]
    c31e:	2f00      	cmp	r7, #0
    c320:	d04e      	beq.n	c3c0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    c322:	2200      	movs	r2, #0
    c324:	f007 fc3f 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c328:	4680      	mov	r8, r0
    c32a:	2800      	cmp	r0, #0
    c32c:	d04a      	beq.n	c3c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    c32e:	2200      	movs	r2, #0
    c330:	4629      	mov	r1, r5
    c332:	4620      	mov	r0, r4
    c334:	f007 fc18 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c338:	4681      	mov	r9, r0
    c33a:	2800      	cmp	r0, #0
    c33c:	d050      	beq.n	c3e0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    c33e:	2201      	movs	r2, #1
    c340:	4629      	mov	r1, r5
    c342:	4620      	mov	r0, r4
    c344:	f007 fc10 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c348:	4682      	mov	sl, r0
    c34a:	2800      	cmp	r0, #0
    c34c:	d053      	beq.n	c3f6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    c34e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c352:	68da      	ldr	r2, [r3, #12]
    c354:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    c356:	689b      	ldr	r3, [r3, #8]
    c358:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    c35a:	6883      	ldr	r3, [r0, #8]
    c35c:	68da      	ldr	r2, [r3, #12]
    c35e:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    c360:	689a      	ldr	r2, [r3, #8]
    c362:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    c364:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c368:	68d1      	ldr	r1, [r2, #12]
    c36a:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    c36c:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c370:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c374:	ea4f 0882 	mov.w	r8, r2, lsl #2
    c378:	4641      	mov	r1, r8
    c37a:	4620      	mov	r0, r4
    c37c:	4798      	blx	r3
  data->per_channel_output_multiplier =
    c37e:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c382:	4641      	mov	r1, r8
    c384:	4620      	mov	r0, r4
    c386:	4798      	blx	r3
  data->per_channel_output_shift =
    c388:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    c38a:	f899 3000 	ldrb.w	r3, [r9]
    c38e:	2b09      	cmp	r3, #9
    c390:	d16a      	bne.n	c468 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    c392:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    c396:	f1b8 0f01 	cmp.w	r8, #1
    c39a:	d037      	beq.n	c40c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    c39c:	6966      	ldr	r6, [r4, #20]
    c39e:	2501      	movs	r5, #1
    c3a0:	9503      	str	r5, [sp, #12]
    c3a2:	f8cd 8008 	str.w	r8, [sp, #8]
    c3a6:	4b3a      	ldr	r3, [pc, #232]	; (c490 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    c3a8:	9301      	str	r3, [sp, #4]
    c3aa:	4b3a      	ldr	r3, [pc, #232]	; (c494 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    c3ac:	9300      	str	r3, [sp, #0]
    c3ae:	23a1      	movs	r3, #161	; 0xa1
    c3b0:	4a39      	ldr	r2, [pc, #228]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c3b2:	493a      	ldr	r1, [pc, #232]	; (c49c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c3b4:	4620      	mov	r0, r4
    c3b6:	47b0      	blx	r6
    c3b8:	46a8      	mov	r8, r5
    c3ba:	e00d      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    c3bc:	f009 fe51 	bl	16062 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c3c0:	f009 fe4f 	bl	16062 <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    c3c4:	6965      	ldr	r5, [r4, #20]
    c3c6:	4b36      	ldr	r3, [pc, #216]	; (c4a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c3c8:	9300      	str	r3, [sp, #0]
    c3ca:	2387      	movs	r3, #135	; 0x87
    c3cc:	4a32      	ldr	r2, [pc, #200]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c3ce:	4935      	ldr	r1, [pc, #212]	; (c4a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c3d0:	4620      	mov	r0, r4
    c3d2:	47a8      	blx	r5
    c3d4:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    c3d8:	4640      	mov	r0, r8
    c3da:	b00f      	add	sp, #60	; 0x3c
    c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    c3e0:	6965      	ldr	r5, [r4, #20]
    c3e2:	4b31      	ldr	r3, [pc, #196]	; (c4a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    c3e4:	9300      	str	r3, [sp, #0]
    c3e6:	238a      	movs	r3, #138	; 0x8a
    c3e8:	4a2b      	ldr	r2, [pc, #172]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c3ea:	492e      	ldr	r1, [pc, #184]	; (c4a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c3ec:	4620      	mov	r0, r4
    c3ee:	47a8      	blx	r5
    c3f0:	f04f 0801 	mov.w	r8, #1
    c3f4:	e7f0      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    c3f6:	6965      	ldr	r5, [r4, #20]
    c3f8:	4b2c      	ldr	r3, [pc, #176]	; (c4ac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    c3fa:	9300      	str	r3, [sp, #0]
    c3fc:	238d      	movs	r3, #141	; 0x8d
    c3fe:	4a26      	ldr	r2, [pc, #152]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c400:	4928      	ldr	r1, [pc, #160]	; (c4a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c402:	4620      	mov	r0, r4
    c404:	47a8      	blx	r5
    c406:	f04f 0801 	mov.w	r8, #1
    c40a:	e7e5      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    c40c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    c410:	b1a2      	cbz	r2, c43c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c412:	6811      	ldr	r1, [r2, #0]
    c414:	b1a1      	cbz	r1, c440 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c416:	6850      	ldr	r0, [r2, #4]
    c418:	b1a0      	cbz	r0, c444 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    c41a:	680a      	ldr	r2, [r1, #0]
    c41c:	2a01      	cmp	r2, #1
    c41e:	d013      	beq.n	c448 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c420:	f8da 1008 	ldr.w	r1, [sl, #8]
    c424:	6909      	ldr	r1, [r1, #16]
    c426:	428a      	cmp	r2, r1
    c428:	d00e      	beq.n	c448 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c42a:	6965      	ldr	r5, [r4, #20]
    c42c:	4b20      	ldr	r3, [pc, #128]	; (c4b0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    c42e:	9300      	str	r3, [sp, #0]
    c430:	23aa      	movs	r3, #170	; 0xaa
    c432:	4a19      	ldr	r2, [pc, #100]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c434:	491b      	ldr	r1, [pc, #108]	; (c4a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c436:	4620      	mov	r0, r4
    c438:	47a8      	blx	r5
    c43a:	e7cd      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    c43c:	f009 fe11 	bl	16062 <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c440:	f009 fe0f 	bl	16062 <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c444:	f009 fe0d 	bl	16062 <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    c448:	6801      	ldr	r1, [r0, #0]
    c44a:	428a      	cmp	r2, r1
    c44c:	d00c      	beq.n	c468 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    c44e:	6965      	ldr	r5, [r4, #20]
    c450:	9103      	str	r1, [sp, #12]
    c452:	9202      	str	r2, [sp, #8]
    c454:	4b17      	ldr	r3, [pc, #92]	; (c4b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    c456:	9301      	str	r3, [sp, #4]
    c458:	4b17      	ldr	r3, [pc, #92]	; (c4b8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    c45a:	9300      	str	r3, [sp, #0]
    c45c:	23af      	movs	r3, #175	; 0xaf
    c45e:	4a0e      	ldr	r2, [pc, #56]	; (c498 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c460:	490e      	ldr	r1, [pc, #56]	; (c49c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c462:	4620      	mov	r0, r4
    c464:	47a8      	blx	r5
    c466:	e7b7      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    c468:	9606      	str	r6, [sp, #24]
    c46a:	9305      	str	r3, [sp, #20]
    c46c:	f8cd b010 	str.w	fp, [sp, #16]
    c470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c472:	9303      	str	r3, [sp, #12]
    c474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c476:	9302      	str	r3, [sp, #8]
    c478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c47a:	9301      	str	r3, [sp, #4]
    c47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c47e:	9300      	str	r3, [sp, #0]
    c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c482:	463a      	mov	r2, r7
    c484:	4629      	mov	r1, r5
    c486:	4620      	mov	r0, r4
    c488:	f7ff fe26 	bl	c0d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    c48c:	4680      	mov	r8, r0
    c48e:	e7a3      	b.n	c3d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    c490:	0006aca8 	.word	0x0006aca8
    c494:	0006ace0 	.word	0x0006ace0
    c498:	0006b4d0 	.word	0x0006b4d0
    c49c:	0006ac8c 	.word	0x0006ac8c
    c4a0:	0006b408 	.word	0x0006b408
    c4a4:	0006a9cc 	.word	0x0006a9cc
    c4a8:	0006b3e0 	.word	0x0006b3e0
    c4ac:	0006b3f4 	.word	0x0006b3f4
    c4b0:	0006b52c 	.word	0x0006b52c
    c4b4:	0006b498 	.word	0x0006b498
    c4b8:	0006ad94 	.word	0x0006ad94

0000c4bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4c0:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    c4c2:	690d      	ldr	r5, [r1, #16]
    c4c4:	b37d      	cbz	r5, c526 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    c4c6:	4607      	mov	r7, r0
    c4c8:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c4ca:	694e      	ldr	r6, [r1, #20]
    c4cc:	b36e      	cbz	r6, c52a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    c4ce:	4b38      	ldr	r3, [pc, #224]	; (c5b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    c4d0:	681a      	ldr	r2, [r3, #0]
    c4d2:	f007 fb49 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c4d6:	4681      	mov	r9, r0
    c4d8:	b348      	cbz	r0, c52e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    c4da:	4b36      	ldr	r3, [pc, #216]	; (c5b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    c4dc:	681a      	ldr	r2, [r3, #0]
    c4de:	4621      	mov	r1, r4
    c4e0:	4638      	mov	r0, r7
    c4e2:	f007 fb41 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c4e6:	4682      	mov	sl, r0
    c4e8:	b368      	cbz	r0, c546 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    c4ea:	4b33      	ldr	r3, [pc, #204]	; (c5b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    c4ec:	681a      	ldr	r2, [r3, #0]
    c4ee:	4621      	mov	r1, r4
    c4f0:	4638      	mov	r0, r7
    c4f2:	f007 fb77 	bl	13be4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c4f6:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    c4f8:	4b30      	ldr	r3, [pc, #192]	; (c5bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    c4fa:	681a      	ldr	r2, [r3, #0]
    c4fc:	4621      	mov	r1, r4
    c4fe:	4638      	mov	r0, r7
    c500:	f007 fb51 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c504:	4604      	mov	r4, r0
    c506:	b340      	cbz	r0, c55a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c508:	f899 0000 	ldrb.w	r0, [r9]
    c50c:	7823      	ldrb	r3, [r4, #0]
    c50e:	4298      	cmp	r0, r3
    c510:	d12d      	bne.n	c56e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    c512:	f89a 3000 	ldrb.w	r3, [sl]
    c516:	4298      	cmp	r0, r3
    c518:	d03d      	beq.n	c596 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    c51a:	697b      	ldr	r3, [r7, #20]
    c51c:	4928      	ldr	r1, [pc, #160]	; (c5c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    c51e:	4638      	mov	r0, r7
    c520:	4798      	blx	r3
    c522:	2001      	movs	r0, #1
    c524:	e00c      	b.n	c540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    c526:	f009 fd9c 	bl	16062 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c52a:	f009 fd9a 	bl	16062 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    c52e:	697c      	ldr	r4, [r7, #20]
    c530:	4b24      	ldr	r3, [pc, #144]	; (c5c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    c532:	9300      	str	r3, [sp, #0]
    c534:	232f      	movs	r3, #47	; 0x2f
    c536:	4a24      	ldr	r2, [pc, #144]	; (c5c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c538:	4924      	ldr	r1, [pc, #144]	; (c5cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c53a:	4638      	mov	r0, r7
    c53c:	47a0      	blx	r4
    c53e:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    c540:	b004      	add	sp, #16
    c542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    c546:	697c      	ldr	r4, [r7, #20]
    c548:	4b21      	ldr	r3, [pc, #132]	; (c5d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    c54a:	9300      	str	r3, [sp, #0]
    c54c:	2332      	movs	r3, #50	; 0x32
    c54e:	4a1e      	ldr	r2, [pc, #120]	; (c5c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c550:	491e      	ldr	r1, [pc, #120]	; (c5cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c552:	4638      	mov	r0, r7
    c554:	47a0      	blx	r4
    c556:	2001      	movs	r0, #1
    c558:	e7f2      	b.n	c540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    c55a:	697c      	ldr	r4, [r7, #20]
    c55c:	4b1d      	ldr	r3, [pc, #116]	; (c5d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    c55e:	9300      	str	r3, [sp, #0]
    c560:	2336      	movs	r3, #54	; 0x36
    c562:	4a19      	ldr	r2, [pc, #100]	; (c5c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c564:	4919      	ldr	r1, [pc, #100]	; (c5cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c566:	4638      	mov	r0, r7
    c568:	47a0      	blx	r4
    c56a:	2001      	movs	r0, #1
    c56c:	e7e8      	b.n	c540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c56e:	697e      	ldr	r6, [r7, #20]
    c570:	f7fc fe34 	bl	91dc <TfLiteTypeGetName>
    c574:	4605      	mov	r5, r0
    c576:	7820      	ldrb	r0, [r4, #0]
    c578:	f7fc fe30 	bl	91dc <TfLiteTypeGetName>
    c57c:	9003      	str	r0, [sp, #12]
    c57e:	9502      	str	r5, [sp, #8]
    c580:	4b15      	ldr	r3, [pc, #84]	; (c5d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    c582:	9301      	str	r3, [sp, #4]
    c584:	4b15      	ldr	r3, [pc, #84]	; (c5dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    c586:	9300      	str	r3, [sp, #0]
    c588:	2338      	movs	r3, #56	; 0x38
    c58a:	4a0f      	ldr	r2, [pc, #60]	; (c5c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c58c:	4914      	ldr	r1, [pc, #80]	; (c5e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    c58e:	4638      	mov	r0, r7
    c590:	47b0      	blx	r6
    c592:	2001      	movs	r0, #1
    c594:	e7d4      	b.n	c540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    c596:	7831      	ldrb	r1, [r6, #0]
    c598:	9503      	str	r5, [sp, #12]
    c59a:	9402      	str	r4, [sp, #8]
    c59c:	f8cd 8004 	str.w	r8, [sp, #4]
    c5a0:	f8cd a000 	str.w	sl, [sp]
    c5a4:	464b      	mov	r3, r9
    c5a6:	4602      	mov	r2, r0
    c5a8:	4638      	mov	r0, r7
    c5aa:	f008 f943 	bl	14834 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    c5ae:	e7c7      	b.n	c540 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    c5b0:	0006b6c0 	.word	0x0006b6c0
    c5b4:	0006b6c8 	.word	0x0006b6c8
    c5b8:	0006b6bc 	.word	0x0006b6bc
    c5bc:	0006b6c4 	.word	0x0006b6c4
    c5c0:	0006b634 	.word	0x0006b634
    c5c4:	0006b3e0 	.word	0x0006b3e0
    c5c8:	0006b5c0 	.word	0x0006b5c0
    c5cc:	0006a9cc 	.word	0x0006a9cc
    c5d0:	0006b3f4 	.word	0x0006b3f4
    c5d4:	0006b408 	.word	0x0006b408
    c5d8:	0006b2a0 	.word	0x0006b2a0
    c5dc:	0006b2b0 	.word	0x0006b2b0
    c5e0:	0006b618 	.word	0x0006b618

0000c5e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    c5e4:	b470      	push	{r4, r5, r6}
    c5e6:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    c5e8:	4604      	mov	r4, r0
    c5ea:	4d05      	ldr	r5, [pc, #20]	; (c600 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    c5ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c5ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c5f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c5f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    c5f8:	4630      	mov	r0, r6
    c5fa:	bc70      	pop	{r4, r5, r6}
    c5fc:	4770      	bx	lr
    c5fe:	bf00      	nop
    c600:	00017020 	.word	0x00017020

0000c604 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c608:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c60a:	f8d1 a014 	ldr.w	sl, [r1, #20]
    c60e:	f1ba 0f00 	cmp.w	sl, #0
    c612:	d04c      	beq.n	c6ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    c614:	4604      	mov	r4, r0
    c616:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    c618:	4ba5      	ldr	r3, [pc, #660]	; (c8b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    c61a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c61c:	2800      	cmp	r0, #0
    c61e:	d048      	beq.n	c6b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    c620:	2e00      	cmp	r6, #0
    c622:	d048      	beq.n	c6b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c624:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c626:	6833      	ldr	r3, [r6, #0]
    c628:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c62c:	6859      	ldr	r1, [r3, #4]
    c62e:	4790      	blx	r2
    c630:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    c632:	4ba0      	ldr	r3, [pc, #640]	; (c8b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    c634:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c636:	2c00      	cmp	r4, #0
    c638:	d03f      	beq.n	c6ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    c63a:	2e00      	cmp	r6, #0
    c63c:	d03f      	beq.n	c6be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c63e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c640:	6833      	ldr	r3, [r6, #0]
    c642:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c646:	6859      	ldr	r1, [r3, #4]
    c648:	4620      	mov	r0, r4
    c64a:	4790      	blx	r2
    c64c:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    c64e:	4b9a      	ldr	r3, [pc, #616]	; (c8b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    c650:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c652:	2c00      	cmp	r4, #0
    c654:	d035      	beq.n	c6c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    c656:	2e00      	cmp	r6, #0
    c658:	d035      	beq.n	c6c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c65a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c65c:	6833      	ldr	r3, [r6, #0]
    c65e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c662:	6859      	ldr	r1, [r3, #4]
    c664:	4620      	mov	r0, r4
    c666:	4790      	blx	r2
    c668:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    c66a:	4b94      	ldr	r3, [pc, #592]	; (c8bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    c66c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c66e:	b364      	cbz	r4, c6ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    c670:	b36e      	cbz	r6, c6ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c672:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c674:	6873      	ldr	r3, [r6, #4]
    c676:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c67a:	6859      	ldr	r1, [r3, #4]
    c67c:	4620      	mov	r0, r4
    c67e:	4790      	blx	r2
    c680:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    c682:	6931      	ldr	r1, [r6, #16]
    c684:	b329      	cbz	r1, c6d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    c686:	f898 0008 	ldrb.w	r0, [r8, #8]
    c68a:	2801      	cmp	r0, #1
    c68c:	d023      	beq.n	c6d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    c68e:	2809      	cmp	r0, #9
    c690:	f000 8136 	beq.w	c900 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c694:	6965      	ldr	r5, [r4, #20]
    c696:	f7fc fda1 	bl	91dc <TfLiteTypeGetName>
    c69a:	4602      	mov	r2, r0
    c69c:	f898 3008 	ldrb.w	r3, [r8, #8]
    c6a0:	4987      	ldr	r1, [pc, #540]	; (c8c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    c6a2:	4620      	mov	r0, r4
    c6a4:	47a8      	blx	r5
      return kTfLiteError;
    c6a6:	2001      	movs	r0, #1
}
    c6a8:	b04f      	add	sp, #316	; 0x13c
    c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c6ae:	f009 fcd8 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6b2:	f009 fcd6 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6b6:	f009 fcd4 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6ba:	f009 fcd2 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6be:	f009 fcd0 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6c2:	f009 fcce 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6c6:	f009 fccc 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    c6ca:	f009 fcca 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    c6ce:	f009 fcc8 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    c6d2:	f009 fcc6 	bl	16062 <abort>
          FullyConnectedParamsFloat(params->activation),
    c6d6:	f89a 1000 	ldrb.w	r1, [sl]
    c6da:	a812      	add	r0, sp, #72	; 0x48
    c6dc:	f008 f8e1 	bl	148a2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    c6e0:	4641      	mov	r1, r8
    c6e2:	a81c      	add	r0, sp, #112	; 0x70
    c6e4:	f008 f8e8 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c6e8:	4640      	mov	r0, r8
    c6ea:	f007 fafc 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c6ee:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    c6f0:	4649      	mov	r1, r9
    c6f2:	a822      	add	r0, sp, #136	; 0x88
    c6f4:	f008 f8e0 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c6f8:	4648      	mov	r0, r9
    c6fa:	f007 faf4 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c6fe:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    c700:	4639      	mov	r1, r7
    c702:	a828      	add	r0, sp, #160	; 0xa0
    c704:	f008 f8d8 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c708:	4638      	mov	r0, r7
    c70a:	f007 faec 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c70e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c710:	4629      	mov	r1, r5
    c712:	a82e      	add	r0, sp, #184	; 0xb8
    c714:	f008 f8d0 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c718:	4628      	mov	r0, r5
    c71a:	f007 faea 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    c71e:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    c720:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c722:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    c724:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    c728:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c72a:	9922      	ldr	r1, [sp, #136]	; 0x88
    c72c:	461c      	mov	r4, r3
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c72e:	1e5a      	subs	r2, r3, #1
    c730:	d405      	bmi.n	c73e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    c732:	429a      	cmp	r2, r3
    c734:	da03      	bge.n	c73e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c736:	2b05      	cmp	r3, #5
    c738:	dd03      	ble.n	c742 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    c73a:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    c73c:	e002      	b.n	c744 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c73e:	f009 fc90 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c742:	ad2f      	add	r5, sp, #188	; 0xbc
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    c744:	2300      	movs	r3, #0
  int flat_size = 1;
    c746:	f04f 0801 	mov.w	r8, #1
    c74a:	e004      	b.n	c756 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c74c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c750:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    c754:	3301      	adds	r3, #1
    c756:	429c      	cmp	r4, r3
    c758:	dd03      	ble.n	c762 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c75a:	429a      	cmp	r2, r3
    c75c:	d1f6      	bne.n	c74c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    c75e:	2001      	movs	r0, #1
    c760:	e7f6      	b.n	c750 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    c762:	1e8b      	subs	r3, r1, #2
    c764:	d433      	bmi.n	c7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    c766:	9822      	ldr	r0, [sp, #136]	; 0x88
    c768:	4283      	cmp	r3, r0
    c76a:	da32      	bge.n	c7d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c76c:	2805      	cmp	r0, #5
    c76e:	dd32      	ble.n	c7d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    c770:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c772:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    c776:	2a00      	cmp	r2, #0
    c778:	db33      	blt.n	c7e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    c77a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c77c:	4282      	cmp	r2, r0
    c77e:	da32      	bge.n	c7e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c780:	2805      	cmp	r0, #5
    c782:	dd32      	ble.n	c7ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    c784:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c786:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c78a:	4298      	cmp	r0, r3
    c78c:	d133      	bne.n	c7f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c78e:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    c790:	2a00      	cmp	r2, #0
    c792:	db32      	blt.n	c7fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    c794:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c796:	4282      	cmp	r2, r0
    c798:	da31      	bge.n	c7fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c79a:	2805      	cmp	r0, #5
    c79c:	dd31      	ble.n	c802 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    c79e:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c7a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c7a4:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    c7a6:	4293      	cmp	r3, r2
    c7a8:	dc31      	bgt.n	c80e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    c7aa:	ab4d      	add	r3, sp, #308	; 0x134
    c7ac:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    c7b0:	3901      	subs	r1, #1
    c7b2:	d42e      	bmi.n	c812 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    c7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c7b6:	4299      	cmp	r1, r3
    c7b8:	da2d      	bge.n	c816 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7ba:	2b05      	cmp	r3, #5
    c7bc:	dd2d      	ble.n	c81a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    c7be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c7c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    c7c4:	2700      	movs	r7, #0
    c7c6:	f8cd 8014 	str.w	r8, [sp, #20]
    c7ca:	46b0      	mov	r8, r6
    c7cc:	e06a      	b.n	c8a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    c7ce:	f009 fc48 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c7d2:	f009 fc46 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7d6:	a84e      	add	r0, sp, #312	; 0x138
    c7d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    c7dc:	f853 3cac 	ldr.w	r3, [r3, #-172]
    c7e0:	e7c9      	b.n	c776 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    c7e2:	f009 fc3e 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c7e6:	f009 fc3c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c7ea:	a84e      	add	r0, sp, #312	; 0x138
    c7ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    c7f0:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    c7f4:	e7c9      	b.n	c78a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c7f6:	f009 fc34 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    c7fa:	f009 fc32 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c7fe:	f009 fc30 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c802:	a84e      	add	r0, sp, #312	; 0x138
    c804:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    c808:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    c80c:	e7ca      	b.n	c7a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    c80e:	ab4c      	add	r3, sp, #304	; 0x130
    c810:	e7cc      	b.n	c7ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    c812:	f009 fc26 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c816:	f009 fc24 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c81a:	ab4e      	add	r3, sp, #312	; 0x138
    c81c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c820:	f851 9cac 	ldr.w	r9, [r1, #-172]
    c824:	e7ce      	b.n	c7c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    c826:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    c82a:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    c82e:	9902      	ldr	r1, [sp, #8]
    c830:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    c834:	9a01      	ldr	r2, [sp, #4]
    c836:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    c83a:	f7f4 fa69 	bl	d10 <__aeabi_fmul>
    c83e:	4601      	mov	r1, r0
    c840:	4628      	mov	r0, r5
    c842:	f7f4 f95d 	bl	b00 <__addsf3>
    c846:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    c848:	3601      	adds	r6, #1
    c84a:	454e      	cmp	r6, r9
    c84c:	dbeb      	blt.n	c826 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    c84e:	f1b8 0f00 	cmp.w	r8, #0
    c852:	d020      	beq.n	c896 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    c854:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    c858:	4628      	mov	r0, r5
    c85a:	f7f4 f951 	bl	b00 <__addsf3>
    c85e:	4601      	mov	r1, r0
    c860:	fb0b 4607 	mla	r6, fp, r7, r4
    c864:	9011      	str	r0, [sp, #68]	; 0x44
    c866:	9b04      	ldr	r3, [sp, #16]
    c868:	9310      	str	r3, [sp, #64]	; 0x40
    c86a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    c86e:	4618      	mov	r0, r3
    c870:	f7f4 fc0a 	bl	1088 <__aeabi_fcmpgt>
    c874:	b988      	cbnz	r0, c89a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    c876:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    c878:	6829      	ldr	r1, [r5, #0]
    c87a:	4650      	mov	r0, sl
    c87c:	f7f4 fbe6 	bl	104c <__aeabi_fcmplt>
    c880:	b968      	cbnz	r0, c89e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    c882:	682b      	ldr	r3, [r5, #0]
    c884:	9a03      	ldr	r2, [sp, #12]
    c886:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c88a:	3401      	adds	r4, #1
    c88c:	455c      	cmp	r4, fp
    c88e:	da08      	bge.n	c8a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    c890:	2600      	movs	r6, #0
      float total = 0.f;
    c892:	2500      	movs	r5, #0
    c894:	e7d9      	b.n	c84a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    c896:	2100      	movs	r1, #0
    c898:	e7de      	b.n	c858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    c89a:	ad10      	add	r5, sp, #64	; 0x40
    c89c:	e7ec      	b.n	c878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    c89e:	ad0f      	add	r5, sp, #60	; 0x3c
    c8a0:	e7ef      	b.n	c882 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    c8a2:	3701      	adds	r7, #1
    c8a4:	9b05      	ldr	r3, [sp, #20]
    c8a6:	429f      	cmp	r7, r3
    c8a8:	da0c      	bge.n	c8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c8aa:	2400      	movs	r4, #0
    c8ac:	e7ee      	b.n	c88c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    c8ae:	bf00      	nop
    c8b0:	0006b6c0 	.word	0x0006b6c0
    c8b4:	0006b6c8 	.word	0x0006b6c8
    c8b8:	0006b6bc 	.word	0x0006b6bc
    c8bc:	0006b6c4 	.word	0x0006b6c4
    c8c0:	0006b338 	.word	0x0006b338
    if (size_ > kMaxSmallSize) {
    c8c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c8c6:	2b05      	cmp	r3, #5
    c8c8:	dd03      	ble.n	c8d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    c8ca:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c8cc:	b108      	cbz	r0, c8d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    c8ce:	f009 fbb3 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c8d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    c8d4:	2b05      	cmp	r3, #5
    c8d6:	dd03      	ble.n	c8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    c8d8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    c8da:	b108      	cbz	r0, c8e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    c8dc:	f009 fbac 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c8e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c8e2:	2b05      	cmp	r3, #5
    c8e4:	dd03      	ble.n	c8ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    c8e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c8e8:	b108      	cbz	r0, c8ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    c8ea:	f009 fba5 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c8ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c8f0:	2b05      	cmp	r3, #5
    c8f2:	dd03      	ble.n	c8fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    c8f4:	981d      	ldr	r0, [sp, #116]	; 0x74
    c8f6:	b108      	cbz	r0, c8fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    c8f8:	f009 fb9e 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    c8fc:	2000      	movs	r0, #0
      break;
    c8fe:	e6d3      	b.n	c6a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    c900:	a812      	add	r0, sp, #72	; 0x48
    c902:	f007 ff86 	bl	14812 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    c906:	4641      	mov	r1, r8
    c908:	a834      	add	r0, sp, #208	; 0xd0
    c90a:	f007 ffd5 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c90e:	4640      	mov	r0, r8
    c910:	f007 f9f3 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c914:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    c916:	4649      	mov	r1, r9
    c918:	a83a      	add	r0, sp, #232	; 0xe8
    c91a:	f007 ffcd 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c91e:	4648      	mov	r0, r9
    c920:	f007 f9eb 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c924:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    c926:	4639      	mov	r1, r7
    c928:	a840      	add	r0, sp, #256	; 0x100
    c92a:	f007 ffc5 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c92e:	4638      	mov	r0, r7
    c930:	f007 fa16 	bl	13d60 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    c934:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    c936:	4629      	mov	r1, r5
    c938:	a846      	add	r0, sp, #280	; 0x118
    c93a:	f007 ffbd 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    c93e:	4628      	mov	r0, r5
    c940:	f007 f9e1 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    c944:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    c946:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c948:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    c94a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c94c:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    c94e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c950:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    c952:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    c956:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    c95a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    c95c:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    c95e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c960:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    c962:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    c964:	2b01      	cmp	r3, #1
    c966:	dd33      	ble.n	c9d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    c968:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    c96a:	2802      	cmp	r0, #2
    c96c:	d132      	bne.n	c9d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c96e:	4291      	cmp	r1, r2
    c970:	dc32      	bgt.n	c9d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    c972:	9a46      	ldr	r2, [sp, #280]	; 0x118
    c974:	2a00      	cmp	r2, #0
    c976:	dd31      	ble.n	c9dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c978:	2a05      	cmp	r2, #5
    c97a:	dd31      	ble.n	c9e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    c97c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c97e:	6812      	ldr	r2, [r2, #0]
    c980:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    c982:	9a46      	ldr	r2, [sp, #280]	; 0x118
    c984:	2a01      	cmp	r2, #1
    c986:	dd2e      	ble.n	c9e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c988:	2a05      	cmp	r2, #5
    c98a:	dd2e      	ble.n	c9ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    c98c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c98e:	6852      	ldr	r2, [r2, #4]
    c990:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    c992:	1e9a      	subs	r2, r3, #2
    c994:	d42c      	bmi.n	c9f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    c996:	993a      	ldr	r1, [sp, #232]	; 0xe8
    c998:	428a      	cmp	r2, r1
    c99a:	da2b      	bge.n	c9f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c99c:	2905      	cmp	r1, #5
    c99e:	dd2b      	ble.n	c9f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    c9a0:	993b      	ldr	r1, [sp, #236]	; 0xec
    c9a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    c9a6:	9901      	ldr	r1, [sp, #4]
    c9a8:	428a      	cmp	r2, r1
    c9aa:	db2b      	blt.n	ca04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    c9ac:	3b01      	subs	r3, #1
    c9ae:	d42b      	bmi.n	ca08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    c9b0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    c9b2:	4293      	cmp	r3, r2
    c9b4:	da2a      	bge.n	ca0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9b6:	2a05      	cmp	r2, #5
    c9b8:	dd2a      	ble.n	ca10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    c9ba:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    c9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9c0:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    c9c2:	f04f 0a00 	mov.w	sl, #0
    c9c6:	4653      	mov	r3, sl
    c9c8:	46ca      	mov	sl, r9
    c9ca:	46d9      	mov	r9, fp
    c9cc:	469b      	mov	fp, r3
    c9ce:	e0ee      	b.n	cbae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    c9d0:	f009 fb47 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    c9d4:	f009 fb45 	bl	16062 <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    c9d8:	f009 fb43 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c9dc:	f009 fb41 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9e0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    c9e2:	920c      	str	r2, [sp, #48]	; 0x30
    c9e4:	e7cd      	b.n	c982 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    c9e6:	f009 fb3c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9ea:	9a48      	ldr	r2, [sp, #288]	; 0x120
    c9ec:	9201      	str	r2, [sp, #4]
    c9ee:	e7d0      	b.n	c992 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    c9f0:	f009 fb37 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    c9f4:	f009 fb35 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c9f8:	a94e      	add	r1, sp, #312	; 0x138
    c9fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    c9fe:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    ca02:	e7d0      	b.n	c9a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    ca04:	f009 fb2d 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    ca08:	f009 fb2b 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    ca0c:	f009 fb29 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca10:	aa4e      	add	r2, sp, #312	; 0x138
    ca12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ca16:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    ca1a:	930d      	str	r3, [sp, #52]	; 0x34
    ca1c:	e7d1      	b.n	c9c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    ca1e:	9b07      	ldr	r3, [sp, #28]
    ca20:	b123      	cbz	r3, ca2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    ca22:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    ca26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca28:	4413      	add	r3, r2
    ca2a:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    ca2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    ca2e:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    ca32:	f1b9 0f00 	cmp.w	r9, #0
    ca36:	f340 808f 	ble.w	cb58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    ca3a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    ca3c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ca3e:	4592      	cmp	sl, r2
    ca40:	f000 808d 	beq.w	cb5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    ca44:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    ca46:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    ca48:	4653      	mov	r3, sl
    ca4a:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    ca4c:	fb02 f304 	mul.w	r3, r2, r4
    ca50:	fb0a 3101 	mla	r1, sl, r1, r3
    ca54:	fba2 230a 	umull	r2, r3, r2, sl
    ca58:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ca5a:	2a00      	cmp	r2, #0
    ca5c:	f173 0100 	sbcs.w	r1, r3, #0
    ca60:	f2c0 8084 	blt.w	cb6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    ca64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ca68:	1852      	adds	r2, r2, r1
    ca6a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    ca6e:	4611      	mov	r1, r2
    ca70:	461c      	mov	r4, r3
    ca72:	2a00      	cmp	r2, #0
    ca74:	f173 0000 	sbcs.w	r0, r3, #0
    ca78:	db7a      	blt.n	cb70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    ca7a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ca7c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ca80:	2f00      	cmp	r7, #0
    ca82:	d17d      	bne.n	cb80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    ca84:	2e00      	cmp	r6, #0
    ca86:	db7e      	blt.n	cb86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    ca88:	2e1f      	cmp	r6, #31
    ca8a:	f300 8083 	bgt.w	cb94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ca8e:	2701      	movs	r7, #1
    ca90:	fa07 f006 	lsl.w	r0, r7, r6
    ca94:	3801      	subs	r0, #1
    ca96:	f007 f93a 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ca9a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ca9c:	2000      	movs	r0, #0
    ca9e:	f007 f936 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    caa2:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    caa4:	4638      	mov	r0, r7
    caa6:	f007 f932 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    caaa:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    caac:	4641      	mov	r1, r8
    caae:	4620      	mov	r0, r4
    cab0:	f007 f92e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cab4:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cab6:	4639      	mov	r1, r7
    cab8:	4640      	mov	r0, r8
    caba:	f007 f92b 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cabe:	4680      	mov	r8, r0
    cac0:	9902      	ldr	r1, [sp, #8]
    cac2:	4620      	mov	r0, r4
    cac4:	f007 f932 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cac8:	9f03      	ldr	r7, [sp, #12]
    caca:	4639      	mov	r1, r7
    cacc:	f007 f920 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cad0:	4601      	mov	r1, r0
    cad2:	4640      	mov	r0, r8
    cad4:	f007 f920 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cad8:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    cada:	4631      	mov	r1, r6
    cadc:	4620      	mov	r0, r4
    cade:	f007 f919 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cae2:	4604      	mov	r4, r0
    cae4:	4641      	mov	r1, r8
    cae6:	9804      	ldr	r0, [sp, #16]
    cae8:	f007 f928 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    caec:	4639      	mov	r1, r7
    caee:	f007 f90f 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    caf2:	4601      	mov	r1, r0
    caf4:	4620      	mov	r0, r4
    caf6:	f007 f90f 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    cafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cafc:	4418      	add	r0, r3
    cafe:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    cb00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb02:	4298      	cmp	r0, r3
    cb04:	db4d      	blt.n	cba2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    cb06:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    cb08:	681b      	ldr	r3, [r3, #0]
    cb0a:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    cb0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cb0e:	4293      	cmp	r3, r2
    cb10:	dc49      	bgt.n	cba6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    cb12:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    cb14:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    cb16:	9b01      	ldr	r3, [sp, #4]
    cb18:	fb03 530b 	mla	r3, r3, fp, r5
    cb1c:	9908      	ldr	r1, [sp, #32]
    cb1e:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    cb20:	3501      	adds	r5, #1
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	429d      	cmp	r5, r3
    cb26:	da40      	bge.n	cbaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    cb28:	2300      	movs	r3, #0
    cb2a:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    cb2c:	980d      	ldr	r0, [sp, #52]	; 0x34
    cb2e:	4283      	cmp	r3, r0
    cb30:	f6bf af75 	bge.w	ca1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    cb34:	fb00 320b 	mla	r2, r0, fp, r3
    cb38:	9905      	ldr	r1, [sp, #20]
    cb3a:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    cb3c:	fb00 3205 	mla	r2, r0, r5, r3
    cb40:	9c06      	ldr	r4, [sp, #24]
    cb42:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    cb44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cb46:	4422      	add	r2, r4
    cb48:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cb4a:	4421      	add	r1, r4
    cb4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cb4e:	fb01 4202 	mla	r2, r1, r2, r4
    cb52:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    cb54:	3301      	adds	r3, #1
    cb56:	e7ea      	b.n	cb2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    cb58:	f1c9 0600 	rsb	r6, r9, #0
    cb5c:	e76e      	b.n	ca3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cb5e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cb62:	d001      	beq.n	cb68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    cb64:	2700      	movs	r7, #0
    cb66:	e76e      	b.n	ca46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    cb68:	2701      	movs	r7, #1
    cb6a:	e76c      	b.n	ca46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cb6c:	4921      	ldr	r1, [pc, #132]	; (cbf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    cb6e:	e77b      	b.n	ca68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cb70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cb74:	1851      	adds	r1, r2, r1
    cb76:	f04f 0400 	mov.w	r4, #0
    cb7a:	eb43 0404 	adc.w	r4, r3, r4
    cb7e:	e77c      	b.n	ca7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cb80:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cb84:	e77e      	b.n	ca84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    cb86:	4b1c      	ldr	r3, [pc, #112]	; (cbf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    cb88:	4a1c      	ldr	r2, [pc, #112]	; (cbfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    cb8a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    cb8e:	481c      	ldr	r0, [pc, #112]	; (cc00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    cb90:	f003 fe96 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    cb94:	4b1b      	ldr	r3, [pc, #108]	; (cc04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    cb96:	4a19      	ldr	r2, [pc, #100]	; (cbfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    cb98:	f240 1167 	movw	r1, #359	; 0x167
    cb9c:	4818      	ldr	r0, [pc, #96]	; (cc00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    cb9e:	f003 fe8f 	bl	108c0 <__assert_func>
	return __b;
    cba2:	ab0f      	add	r3, sp, #60	; 0x3c
    cba4:	e7b0      	b.n	cb08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    cba6:	ab10      	add	r3, sp, #64	; 0x40
    cba8:	e7b4      	b.n	cb14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    cbaa:	f10b 0b01 	add.w	fp, fp, #1
    cbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbb0:	459b      	cmp	fp, r3
    cbb2:	da01      	bge.n	cbb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    cbb4:	2500      	movs	r5, #0
    cbb6:	e7b4      	b.n	cb22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    cbb8:	9b46      	ldr	r3, [sp, #280]	; 0x118
    cbba:	2b05      	cmp	r3, #5
    cbbc:	dd03      	ble.n	cbc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    cbbe:	9847      	ldr	r0, [sp, #284]	; 0x11c
    cbc0:	b108      	cbz	r0, cbc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    cbc2:	f009 fa39 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    cbc6:	9b40      	ldr	r3, [sp, #256]	; 0x100
    cbc8:	2b05      	cmp	r3, #5
    cbca:	dd03      	ble.n	cbd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    cbcc:	9841      	ldr	r0, [sp, #260]	; 0x104
    cbce:	b108      	cbz	r0, cbd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    cbd0:	f009 fa32 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    cbd4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    cbd6:	2b05      	cmp	r3, #5
    cbd8:	dd03      	ble.n	cbe2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    cbda:	983b      	ldr	r0, [sp, #236]	; 0xec
    cbdc:	b108      	cbz	r0, cbe2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    cbde:	f009 fa2b 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    cbe2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    cbe4:	2b05      	cmp	r3, #5
    cbe6:	dd03      	ble.n	cbf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    cbe8:	9835      	ldr	r0, [sp, #212]	; 0xd4
    cbea:	b108      	cbz	r0, cbf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    cbec:	f009 fa24 	bl	16038 <_ZdaPv>
  return kTfLiteOk;
    cbf0:	2000      	movs	r0, #0
      break;
    cbf2:	e559      	b.n	c6a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    cbf4:	c0000001 	.word	0xc0000001
    cbf8:	0006b180 	.word	0x0006b180
    cbfc:	0006b190 	.word	0x0006b190
    cc00:	0006b1e8 	.word	0x0006b1e8
    cc04:	0006b244 	.word	0x0006b244

0000cc08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cc08:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cc0a:	4288      	cmp	r0, r1
    cc0c:	d01e      	beq.n	cc4c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cc0e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cc10:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cc12:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cc14:	fb01 f407 	mul.w	r4, r1, r7
    cc18:	fb00 4403 	mla	r4, r0, r3, r4
    cc1c:	fba1 2300 	umull	r2, r3, r1, r0
    cc20:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cc22:	2a00      	cmp	r2, #0
    cc24:	f173 0100 	sbcs.w	r1, r3, #0
    cc28:	db17      	blt.n	cc5a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cc2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cc2e:	1852      	adds	r2, r2, r1
    cc30:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cc34:	4611      	mov	r1, r2
    cc36:	4618      	mov	r0, r3
    cc38:	2a00      	cmp	r2, #0
    cc3a:	f173 0400 	sbcs.w	r4, r3, #0
    cc3e:	db0e      	blt.n	cc5e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cc40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cc42:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cc46:	b995      	cbnz	r5, cc6e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    cc48:	bcf0      	pop	{r4, r5, r6, r7}
    cc4a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cc4c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cc50:	d001      	beq.n	cc56 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cc52:	2500      	movs	r5, #0
    cc54:	e7dc      	b.n	cc10 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cc56:	2501      	movs	r5, #1
    cc58:	e7da      	b.n	cc10 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cc5a:	4906      	ldr	r1, [pc, #24]	; (cc74 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cc5c:	e7e7      	b.n	cc2e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cc5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cc62:	1851      	adds	r1, r2, r1
    cc64:	f04f 0000 	mov.w	r0, #0
    cc68:	eb43 0000 	adc.w	r0, r3, r0
    cc6c:	e7e8      	b.n	cc40 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cc6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cc72:	e7e9      	b.n	cc48 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cc74:	c0000001 	.word	0xc0000001

0000cc78 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cc78:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cc7a:	4288      	cmp	r0, r1
    cc7c:	d01e      	beq.n	ccbc <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cc7e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cc80:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cc82:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cc84:	fb01 f407 	mul.w	r4, r1, r7
    cc88:	fb00 4403 	mla	r4, r0, r3, r4
    cc8c:	fba1 2300 	umull	r2, r3, r1, r0
    cc90:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cc92:	2a00      	cmp	r2, #0
    cc94:	f173 0100 	sbcs.w	r1, r3, #0
    cc98:	db17      	blt.n	ccca <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cc9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cc9e:	1852      	adds	r2, r2, r1
    cca0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cca4:	4611      	mov	r1, r2
    cca6:	4618      	mov	r0, r3
    cca8:	2a00      	cmp	r2, #0
    ccaa:	f173 0400 	sbcs.w	r4, r3, #0
    ccae:	db0e      	blt.n	ccce <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    ccb0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    ccb2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ccb6:	b995      	cbnz	r5, ccde <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    ccb8:	bcf0      	pop	{r4, r5, r6, r7}
    ccba:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    ccbc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    ccc0:	d001      	beq.n	ccc6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    ccc2:	2500      	movs	r5, #0
    ccc4:	e7dc      	b.n	cc80 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    ccc6:	2501      	movs	r5, #1
    ccc8:	e7da      	b.n	cc80 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    ccca:	4906      	ldr	r1, [pc, #24]	; (cce4 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cccc:	e7e7      	b.n	cc9e <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    ccce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ccd2:	1851      	adds	r1, r2, r1
    ccd4:	f04f 0000 	mov.w	r0, #0
    ccd8:	eb43 0000 	adc.w	r0, r3, r0
    ccdc:	e7e8      	b.n	ccb0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ccde:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cce2:	e7e9      	b.n	ccb8 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cce4:	c0000001 	.word	0xc0000001

0000cce8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    cce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccec:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ccee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ccf2:	f007 f80c 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ccf6:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ccf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ccfc:	f007 f807 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd00:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    cd02:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    cd06:	f007 f802 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd0a:	4601      	mov	r1, r0
    cd0c:	4620      	mov	r0, r4
    cd0e:	f007 f815 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cd12:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    cd14:	480b      	ldr	r0, [pc, #44]	; (cd44 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    cd16:	f006 fffa 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd1a:	4601      	mov	r1, r0
    cd1c:	4620      	mov	r0, r4
    cd1e:	f007 f805 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cd22:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    cd24:	2102      	movs	r1, #2
    cd26:	4620      	mov	r0, r4
    cd28:	f007 fe2f 	bl	1498a <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    cd2c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    cd2e:	4641      	mov	r1, r8
    cd30:	4638      	mov	r0, r7
    cd32:	f007 fe4b 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    cd36:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    cd38:	4631      	mov	r1, r6
    cd3a:	4628      	mov	r0, r5
    cd3c:	f007 fe46 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd44:	e0000001 	.word	0xe0000001

0000cd48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd4c:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    cd4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    cd52:	f006 ffdc 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd56:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    cd58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cd5c:	f006 ffd7 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd60:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    cd62:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    cd66:	f006 ffd2 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd6a:	4601      	mov	r1, r0
    cd6c:	4620      	mov	r0, r4
    cd6e:	f006 ffe5 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cd72:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    cd74:	480b      	ldr	r0, [pc, #44]	; (cda4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    cd76:	f006 ffca 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cd7a:	4601      	mov	r1, r0
    cd7c:	4620      	mov	r0, r4
    cd7e:	f006 ffd5 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cd82:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    cd84:	2101      	movs	r1, #1
    cd86:	4620      	mov	r0, r4
    cd88:	f007 fdff 	bl	1498a <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    cd8c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    cd8e:	4641      	mov	r1, r8
    cd90:	4638      	mov	r0, r7
    cd92:	f007 fe1b 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    cd96:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    cd98:	4631      	mov	r1, r6
    cd9a:	4628      	mov	r0, r5
    cd9c:	f007 fe16 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cda4:	c0000001 	.word	0xc0000001

0000cda8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdac:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    cdae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cdb2:	f006 ffac 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdb6:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    cdb8:	4620      	mov	r0, r4
    cdba:	f007 fe18 	bl	149ee <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cdbe:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cdc0:	2000      	movs	r0, #0
    cdc2:	f006 ffa4 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdc6:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cdc8:	2000      	movs	r0, #0
    cdca:	f006 ffa0 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdce:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    cdd0:	2001      	movs	r0, #1
    cdd2:	f006 ff9c 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdd6:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cdd8:	4629      	mov	r1, r5
    cdda:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cdde:	f006 ff97 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cde2:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cde4:	2101      	movs	r1, #1
    cde6:	4628      	mov	r0, r5
    cde8:	f006 ff94 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cdec:	4605      	mov	r5, r0
    cdee:	4641      	mov	r1, r8
    cdf0:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cdf4:	f006 ff9a 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cdf8:	4621      	mov	r1, r4
    cdfa:	f006 ff89 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cdfe:	4601      	mov	r1, r0
    ce00:	4628      	mov	r0, r5
    ce02:	f006 ff89 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ce06:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ce08:	2100      	movs	r1, #0
    ce0a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    ce0e:	f006 ff81 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce12:	4605      	mov	r5, r0
    ce14:	4641      	mov	r1, r8
    ce16:	4630      	mov	r0, r6
    ce18:	f006 ff90 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce1c:	4621      	mov	r1, r4
    ce1e:	f006 ff77 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce22:	4601      	mov	r1, r0
    ce24:	4628      	mov	r0, r5
    ce26:	f006 ff77 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ce2a:	f006 ff70 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce2e:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    ce30:	2000      	movs	r0, #0
    ce32:	f006 ff6c 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce36:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    ce38:	2000      	movs	r0, #0
    ce3a:	f006 ff68 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce3e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    ce40:	2001      	movs	r0, #1
    ce42:	f006 ff64 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce46:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ce48:	f8df a0a8 	ldr.w	sl, [pc, #168]	; cef4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    ce4c:	4629      	mov	r1, r5
    ce4e:	4650      	mov	r0, sl
    ce50:	f006 ff5e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce54:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    ce56:	2101      	movs	r1, #1
    ce58:	4628      	mov	r0, r5
    ce5a:	f006 ff5b 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce5e:	4605      	mov	r5, r0
    ce60:	4649      	mov	r1, r9
    ce62:	4650      	mov	r0, sl
    ce64:	f006 ff62 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ce68:	4621      	mov	r1, r4
    ce6a:	f006 ff51 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce6e:	4601      	mov	r1, r0
    ce70:	4628      	mov	r0, r5
    ce72:	f006 ff51 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ce76:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    ce78:	2100      	movs	r1, #0
    ce7a:	4650      	mov	r0, sl
    ce7c:	f006 ff4a 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ce80:	4605      	mov	r5, r0
    ce82:	4649      	mov	r1, r9
    ce84:	4640      	mov	r0, r8
    ce86:	f006 ff59 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce8a:	4621      	mov	r1, r4
    ce8c:	f006 ff40 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ce90:	4601      	mov	r1, r0
    ce92:	4628      	mov	r0, r5
    ce94:	f006 ff40 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    ce98:	f006 ff39 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce9c:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    ce9e:	4638      	mov	r0, r7
    cea0:	f7ff feb2 	bl	cc08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cea4:	4601      	mov	r1, r0
    cea6:	4630      	mov	r0, r6
    cea8:	f007 fdbc 	bl	14a24 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ceac:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    ceae:	2600      	movs	r6, #0
    ceb0:	e017      	b.n	cee2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    ceb2:	4621      	mov	r1, r4
    ceb4:	4638      	mov	r0, r7
    ceb6:	f7ff fea7 	bl	cc08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ceba:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    cebc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    cec0:	f006 ff25 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    cec4:	4629      	mov	r1, r5
    cec6:	f007 fdb2 	bl	14a2e <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    ceca:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    cecc:	4620      	mov	r0, r4
    cece:	f7ff fed3 	bl	cc78 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    ced2:	f007 fdb7 	bl	14a44 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    ced6:	4601      	mov	r1, r0
    ced8:	4620      	mov	r0, r4
    ceda:	f007 fda3 	bl	14a24 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cede:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    cee0:	3601      	adds	r6, #1
    cee2:	2e02      	cmp	r6, #2
    cee4:	dde5      	ble.n	ceb2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    cee6:	4620      	mov	r0, r4
    cee8:	f007 fda0 	bl	14a2c <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    ceec:	f007 fdae 	bl	14a4c <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    cef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cef4:	c3c3c3c4 	.word	0xc3c3c3c4

0000cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cef8:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cefa:	4288      	cmp	r0, r1
    cefc:	d01e      	beq.n	cf3c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cefe:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cf00:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cf02:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cf04:	fb01 f407 	mul.w	r4, r1, r7
    cf08:	fb00 4403 	mla	r4, r0, r3, r4
    cf0c:	fba1 2300 	umull	r2, r3, r1, r0
    cf10:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cf12:	2a00      	cmp	r2, #0
    cf14:	f173 0100 	sbcs.w	r1, r3, #0
    cf18:	db17      	blt.n	cf4a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cf1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cf1e:	1852      	adds	r2, r2, r1
    cf20:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cf24:	4611      	mov	r1, r2
    cf26:	4618      	mov	r0, r3
    cf28:	2a00      	cmp	r2, #0
    cf2a:	f173 0400 	sbcs.w	r4, r3, #0
    cf2e:	db0e      	blt.n	cf4e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cf30:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cf32:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cf36:	b995      	cbnz	r5, cf5e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    cf38:	bcf0      	pop	{r4, r5, r6, r7}
    cf3a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cf3c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cf40:	d001      	beq.n	cf46 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cf42:	2500      	movs	r5, #0
    cf44:	e7dc      	b.n	cf00 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cf46:	2501      	movs	r5, #1
    cf48:	e7da      	b.n	cf00 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cf4a:	4906      	ldr	r1, [pc, #24]	; (cf64 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cf4c:	e7e7      	b.n	cf1e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cf4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cf52:	1851      	adds	r1, r2, r1
    cf54:	f04f 0000 	mov.w	r0, #0
    cf58:	eb43 0000 	adc.w	r0, r3, r0
    cf5c:	e7e8      	b.n	cf30 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cf5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cf62:	e7e9      	b.n	cf38 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cf64:	c0000001 	.word	0xc0000001

0000cf68 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    cf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf6c:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cf6e:	2000      	movs	r0, #0
    cf70:	f006 fecd 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf74:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cf76:	2000      	movs	r0, #0
    cf78:	f006 fec9 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf7c:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    cf7e:	2001      	movs	r0, #1
    cf80:	f006 fec5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf84:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cf86:	f8df 9124 	ldr.w	r9, [pc, #292]	; d0ac <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    cf8a:	4629      	mov	r1, r5
    cf8c:	4648      	mov	r0, r9
    cf8e:	f006 febf 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf92:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cf94:	2101      	movs	r1, #1
    cf96:	4628      	mov	r0, r5
    cf98:	f006 febc 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cf9c:	4605      	mov	r5, r0
    cf9e:	4639      	mov	r1, r7
    cfa0:	4648      	mov	r0, r9
    cfa2:	f006 fec3 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cfa6:	4621      	mov	r1, r4
    cfa8:	f006 feb2 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cfac:	4601      	mov	r1, r0
    cfae:	4628      	mov	r0, r5
    cfb0:	f006 feb2 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cfb4:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    cfb6:	2100      	movs	r1, #0
    cfb8:	4648      	mov	r0, r9
    cfba:	f006 feab 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cfbe:	4605      	mov	r5, r0
    cfc0:	4639      	mov	r1, r7
    cfc2:	4630      	mov	r0, r6
    cfc4:	f006 feba 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cfc8:	4621      	mov	r1, r4
    cfca:	f006 fea1 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cfce:	4601      	mov	r1, r0
    cfd0:	4628      	mov	r0, r5
    cfd2:	f006 fea1 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cfd6:	f006 fe9a 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cfda:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cfdc:	2000      	movs	r0, #0
    cfde:	f006 fe96 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cfe2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cfe4:	2000      	movs	r0, #0
    cfe6:	f006 fe92 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cfea:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    cfec:	2001      	movs	r0, #1
    cfee:	f006 fe8e 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cff2:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cff4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d0b0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    cff8:	4629      	mov	r1, r5
    cffa:	4650      	mov	r0, sl
    cffc:	f006 fe88 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d000:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d002:	2101      	movs	r1, #1
    d004:	4628      	mov	r0, r5
    d006:	f006 fe85 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d00a:	4605      	mov	r5, r0
    d00c:	4649      	mov	r1, r9
    d00e:	4650      	mov	r0, sl
    d010:	f006 fe8c 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d014:	4621      	mov	r1, r4
    d016:	f006 fe7b 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d01a:	4601      	mov	r1, r0
    d01c:	4628      	mov	r0, r5
    d01e:	f006 fe7b 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d022:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    d024:	2100      	movs	r1, #0
    d026:	4650      	mov	r0, sl
    d028:	f006 fe74 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d02c:	4605      	mov	r5, r0
    d02e:	4649      	mov	r1, r9
    d030:	4638      	mov	r0, r7
    d032:	f006 fe83 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d036:	4621      	mov	r1, r4
    d038:	f006 fe6a 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d03c:	4601      	mov	r1, r0
    d03e:	4628      	mov	r0, r5
    d040:	f006 fe6a 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d044:	f006 fe63 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d048:	4607      	mov	r7, r0
    d04a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d04e:	f006 fe5e 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d052:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    d054:	4640      	mov	r0, r8
    d056:	f007 fd01 	bl	14a5c <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d05a:	4604      	mov	r4, r0
  F x2 = x * x;
    d05c:	4601      	mov	r1, r0
    d05e:	f7ff ff4b 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d062:	4605      	mov	r5, r0
  F x3 = x2 * x;
    d064:	4621      	mov	r1, r4
    d066:	f7ff ff47 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d06a:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    d06c:	4629      	mov	r1, r5
    d06e:	4628      	mov	r0, r5
    d070:	f7ff ff42 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    d074:	f007 fd31 	bl	14ada <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    d078:	4641      	mov	r1, r8
    d07a:	f007 fcef 	bl	14a5c <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d07e:	4639      	mov	r1, r7
    d080:	f7ff ff3a 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d084:	4629      	mov	r1, r5
    d086:	f007 fce9 	bl	14a5c <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d08a:	f007 fceb 	bl	14a64 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    d08e:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    d090:	4620      	mov	r0, r4
    d092:	f007 fce3 	bl	14a5c <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d096:	4601      	mov	r1, r0
    d098:	4630      	mov	r0, r6
    d09a:	f7ff ff2d 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d09e:	4601      	mov	r1, r0
    d0a0:	4630      	mov	r0, r6
    d0a2:	f007 fd22 	bl	14aea <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    d0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d0aa:	bf00      	nop
    d0ac:	70f5a894 	.word	0x70f5a894
    d0b0:	2aaaaaab 	.word	0x2aaaaaab

0000d0b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0b8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    d0ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    d0be:	f006 fe26 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0c2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    d0c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d0c8:	f006 fe21 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0cc:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    d0ce:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    d0d2:	f006 fe1c 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0d6:	4601      	mov	r1, r0
    d0d8:	4620      	mov	r0, r4
    d0da:	f006 fe2f 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d0de:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    d0e0:	480b      	ldr	r0, [pc, #44]	; (d110 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    d0e2:	f006 fe14 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0e6:	4601      	mov	r1, r0
    d0e8:	4620      	mov	r0, r4
    d0ea:	f006 fe1f 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d0ee:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    d0f0:	2105      	movs	r1, #5
    d0f2:	4620      	mov	r0, r4
    d0f4:	f007 fc49 	bl	1498a <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    d0f8:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    d0fa:	4641      	mov	r1, r8
    d0fc:	4638      	mov	r0, r7
    d0fe:	f007 fc65 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    d102:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    d104:	4631      	mov	r1, r6
    d106:	4628      	mov	r0, r5
    d108:	f007 fc60 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d110:	fc000001 	.word	0xfc000001

0000d114 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    d114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d118:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    d11a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    d11e:	f006 fdf6 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d122:	4604      	mov	r4, r0
    d124:	2001      	movs	r0, #1
    d126:	f006 fdf2 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d12a:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    d12c:	4620      	mov	r0, r4
    d12e:	f007 fce4 	bl	14afa <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d132:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    d134:	4630      	mov	r0, r6
    d136:	f007 fce4 	bl	14b02 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d13a:	4621      	mov	r1, r4
    d13c:	f007 fcdd 	bl	14afa <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d140:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    d142:	f007 fd22 	bl	14b8a <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    d146:	f7ff ff0f 	bl	cf68 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    d14a:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    d14c:	4631      	mov	r1, r6
    d14e:	4628      	mov	r0, r5
    d150:	f007 fcd3 	bl	14afa <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d154:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d156:	2000      	movs	r0, #0
    d158:	f006 fdd9 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d15c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d15e:	2000      	movs	r0, #0
    d160:	f006 fdd5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d164:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d166:	2001      	movs	r0, #1
    d168:	f006 fdd1 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d16c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d16e:	f8df b428 	ldr.w	fp, [pc, #1064]	; d598 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    d172:	4641      	mov	r1, r8
    d174:	4658      	mov	r0, fp
    d176:	f006 fdcb 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d17a:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d17c:	2101      	movs	r1, #1
    d17e:	4640      	mov	r0, r8
    d180:	f006 fdc8 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d184:	4680      	mov	r8, r0
    d186:	4651      	mov	r1, sl
    d188:	4658      	mov	r0, fp
    d18a:	f006 fdcf 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d18e:	4639      	mov	r1, r7
    d190:	f006 fdbe 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d194:	4601      	mov	r1, r0
    d196:	4640      	mov	r0, r8
    d198:	f006 fdbe 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d19c:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d19e:	2100      	movs	r1, #0
    d1a0:	4658      	mov	r0, fp
    d1a2:	f006 fdb7 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d1a6:	4680      	mov	r8, r0
    d1a8:	4651      	mov	r1, sl
    d1aa:	4648      	mov	r0, r9
    d1ac:	f006 fdc6 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d1b0:	4639      	mov	r1, r7
    d1b2:	f006 fdad 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d1b6:	4601      	mov	r1, r0
    d1b8:	4640      	mov	r0, r8
    d1ba:	f006 fdad 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d1be:	f006 fda6 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1c2:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    d1c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    d1c8:	f006 fda1 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1cc:	4601      	mov	r1, r0
    d1ce:	4628      	mov	r0, r5
    d1d0:	f006 fd9e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d1d4:	f006 fda4 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d1d8:	4607      	mov	r7, r0
    d1da:	4641      	mov	r1, r8
    d1dc:	4620      	mov	r0, r4
    d1de:	f7ff fe8b 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d1e2:	4601      	mov	r1, r0
    d1e4:	4622      	mov	r2, r4
    d1e6:	4638      	mov	r0, r7
    d1e8:	f007 fc34 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d1ec:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d1ee:	2000      	movs	r0, #0
    d1f0:	f006 fd8d 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1f4:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d1f6:	2000      	movs	r0, #0
    d1f8:	f006 fd89 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1fc:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d1fe:	2001      	movs	r0, #1
    d200:	f006 fd85 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d204:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d206:	f8df b394 	ldr.w	fp, [pc, #916]	; d59c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    d20a:	4641      	mov	r1, r8
    d20c:	4658      	mov	r0, fp
    d20e:	f006 fd7f 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d212:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d214:	2101      	movs	r1, #1
    d216:	4640      	mov	r0, r8
    d218:	f006 fd7c 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d21c:	4680      	mov	r8, r0
    d21e:	4651      	mov	r1, sl
    d220:	4658      	mov	r0, fp
    d222:	f006 fd83 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d226:	4639      	mov	r1, r7
    d228:	f006 fd72 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d22c:	4601      	mov	r1, r0
    d22e:	4640      	mov	r0, r8
    d230:	f006 fd72 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d234:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d236:	2100      	movs	r1, #0
    d238:	4658      	mov	r0, fp
    d23a:	f006 fd6b 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d23e:	4680      	mov	r8, r0
    d240:	4651      	mov	r1, sl
    d242:	4648      	mov	r0, r9
    d244:	f006 fd7a 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d248:	4639      	mov	r1, r7
    d24a:	f006 fd61 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d24e:	4601      	mov	r1, r0
    d250:	4640      	mov	r0, r8
    d252:	f006 fd61 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d256:	f006 fd5a 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d25a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    d25c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d260:	f006 fd55 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d264:	4601      	mov	r1, r0
    d266:	4628      	mov	r0, r5
    d268:	f006 fd52 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d26c:	f006 fd58 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d270:	4607      	mov	r7, r0
    d272:	4641      	mov	r1, r8
    d274:	4620      	mov	r0, r4
    d276:	f7ff fe3f 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d27a:	4601      	mov	r1, r0
    d27c:	4622      	mov	r2, r4
    d27e:	4638      	mov	r0, r7
    d280:	f007 fbe8 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d284:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d286:	2000      	movs	r0, #0
    d288:	f006 fd41 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d28c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d28e:	2000      	movs	r0, #0
    d290:	f006 fd3d 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d294:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d296:	2001      	movs	r0, #1
    d298:	f006 fd39 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d29c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d29e:	f8df b300 	ldr.w	fp, [pc, #768]	; d5a0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    d2a2:	4641      	mov	r1, r8
    d2a4:	4658      	mov	r0, fp
    d2a6:	f006 fd33 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2aa:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d2ac:	2101      	movs	r1, #1
    d2ae:	4640      	mov	r0, r8
    d2b0:	f006 fd30 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d2b4:	4680      	mov	r8, r0
    d2b6:	4651      	mov	r1, sl
    d2b8:	4658      	mov	r0, fp
    d2ba:	f006 fd37 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d2be:	4639      	mov	r1, r7
    d2c0:	f006 fd26 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2c4:	4601      	mov	r1, r0
    d2c6:	4640      	mov	r0, r8
    d2c8:	f006 fd26 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d2cc:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d2ce:	2100      	movs	r1, #0
    d2d0:	4658      	mov	r0, fp
    d2d2:	f006 fd1f 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d2d6:	4680      	mov	r8, r0
    d2d8:	4651      	mov	r1, sl
    d2da:	4648      	mov	r0, r9
    d2dc:	f006 fd2e 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d2e0:	4639      	mov	r1, r7
    d2e2:	f006 fd15 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2e6:	4601      	mov	r1, r0
    d2e8:	4640      	mov	r0, r8
    d2ea:	f006 fd15 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d2ee:	f006 fd0e 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2f2:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    d2f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d2f8:	f006 fd09 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2fc:	4601      	mov	r1, r0
    d2fe:	4628      	mov	r0, r5
    d300:	f006 fd06 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d304:	f006 fd0c 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d308:	4607      	mov	r7, r0
    d30a:	4641      	mov	r1, r8
    d30c:	4620      	mov	r0, r4
    d30e:	f7ff fdf3 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d312:	4601      	mov	r1, r0
    d314:	4622      	mov	r2, r4
    d316:	4638      	mov	r0, r7
    d318:	f007 fb9c 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d31c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d31e:	2000      	movs	r0, #0
    d320:	f006 fcf5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d324:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d326:	2000      	movs	r0, #0
    d328:	f006 fcf1 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d32c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d32e:	2001      	movs	r0, #1
    d330:	f006 fced 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d334:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d336:	f8df b26c 	ldr.w	fp, [pc, #620]	; d5a4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    d33a:	4641      	mov	r1, r8
    d33c:	4658      	mov	r0, fp
    d33e:	f006 fce7 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d342:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d344:	2101      	movs	r1, #1
    d346:	4640      	mov	r0, r8
    d348:	f006 fce4 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d34c:	4680      	mov	r8, r0
    d34e:	4651      	mov	r1, sl
    d350:	4658      	mov	r0, fp
    d352:	f006 fceb 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d356:	4639      	mov	r1, r7
    d358:	f006 fcda 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d35c:	4601      	mov	r1, r0
    d35e:	4640      	mov	r0, r8
    d360:	f006 fcda 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d364:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d366:	2100      	movs	r1, #0
    d368:	4658      	mov	r0, fp
    d36a:	f006 fcd3 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d36e:	4680      	mov	r8, r0
    d370:	4651      	mov	r1, sl
    d372:	4648      	mov	r0, r9
    d374:	f006 fce2 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d378:	4639      	mov	r1, r7
    d37a:	f006 fcc9 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d37e:	4601      	mov	r1, r0
    d380:	4640      	mov	r0, r8
    d382:	f006 fcc9 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d386:	f006 fcc2 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d38a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    d38c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    d390:	f006 fcbd 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d394:	4601      	mov	r1, r0
    d396:	4628      	mov	r0, r5
    d398:	f006 fcba 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d39c:	f006 fcc0 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d3a0:	4607      	mov	r7, r0
    d3a2:	4641      	mov	r1, r8
    d3a4:	4620      	mov	r0, r4
    d3a6:	f7ff fda7 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d3aa:	4601      	mov	r1, r0
    d3ac:	4622      	mov	r2, r4
    d3ae:	4638      	mov	r0, r7
    d3b0:	f007 fb50 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d3b4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d3b6:	2000      	movs	r0, #0
    d3b8:	f006 fca9 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d3bc:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d3be:	2000      	movs	r0, #0
    d3c0:	f006 fca5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d3c4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d3c6:	2001      	movs	r0, #1
    d3c8:	f006 fca1 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d3cc:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d3ce:	f8df b1d8 	ldr.w	fp, [pc, #472]	; d5a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    d3d2:	4641      	mov	r1, r8
    d3d4:	4658      	mov	r0, fp
    d3d6:	f006 fc9b 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d3da:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d3dc:	2101      	movs	r1, #1
    d3de:	4640      	mov	r0, r8
    d3e0:	f006 fc98 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d3e4:	4680      	mov	r8, r0
    d3e6:	4651      	mov	r1, sl
    d3e8:	4658      	mov	r0, fp
    d3ea:	f006 fc9f 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d3ee:	4639      	mov	r1, r7
    d3f0:	f006 fc8e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d3f4:	4601      	mov	r1, r0
    d3f6:	4640      	mov	r0, r8
    d3f8:	f006 fc8e 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d3fc:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d3fe:	2100      	movs	r1, #0
    d400:	4658      	mov	r0, fp
    d402:	f006 fc87 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d406:	4680      	mov	r8, r0
    d408:	4651      	mov	r1, sl
    d40a:	4648      	mov	r0, r9
    d40c:	f006 fc96 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d410:	4639      	mov	r1, r7
    d412:	f006 fc7d 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d416:	4601      	mov	r1, r0
    d418:	4640      	mov	r0, r8
    d41a:	f006 fc7d 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d41e:	f006 fc76 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d422:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    d424:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d428:	f006 fc71 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d42c:	4601      	mov	r1, r0
    d42e:	4628      	mov	r0, r5
    d430:	f006 fc6e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d434:	f006 fc74 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d438:	4607      	mov	r7, r0
    d43a:	4641      	mov	r1, r8
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff fd5b 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d442:	4601      	mov	r1, r0
    d444:	4622      	mov	r2, r4
    d446:	4638      	mov	r0, r7
    d448:	f007 fb04 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d44c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d44e:	2000      	movs	r0, #0
    d450:	f006 fc5d 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d454:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d456:	2000      	movs	r0, #0
    d458:	f006 fc59 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d45c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d45e:	2001      	movs	r0, #1
    d460:	f006 fc55 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d464:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d466:	f8df b144 	ldr.w	fp, [pc, #324]	; d5ac <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    d46a:	4641      	mov	r1, r8
    d46c:	4658      	mov	r0, fp
    d46e:	f006 fc4f 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d472:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d474:	2101      	movs	r1, #1
    d476:	4640      	mov	r0, r8
    d478:	f006 fc4c 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d47c:	4680      	mov	r8, r0
    d47e:	4651      	mov	r1, sl
    d480:	4658      	mov	r0, fp
    d482:	f006 fc53 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d486:	4639      	mov	r1, r7
    d488:	f006 fc42 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d48c:	4601      	mov	r1, r0
    d48e:	4640      	mov	r0, r8
    d490:	f006 fc42 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d494:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d496:	2100      	movs	r1, #0
    d498:	4658      	mov	r0, fp
    d49a:	f006 fc3b 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d49e:	4680      	mov	r8, r0
    d4a0:	4651      	mov	r1, sl
    d4a2:	4648      	mov	r0, r9
    d4a4:	f006 fc4a 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d4a8:	4639      	mov	r1, r7
    d4aa:	f006 fc31 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d4ae:	4601      	mov	r1, r0
    d4b0:	4640      	mov	r0, r8
    d4b2:	f006 fc31 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d4b6:	f006 fc2a 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4ba:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    d4bc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    d4c0:	f006 fc25 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4c4:	4601      	mov	r1, r0
    d4c6:	4628      	mov	r0, r5
    d4c8:	f006 fc22 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d4cc:	f006 fc28 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d4d0:	4607      	mov	r7, r0
    d4d2:	4641      	mov	r1, r8
    d4d4:	4620      	mov	r0, r4
    d4d6:	f7ff fd0f 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d4da:	4601      	mov	r1, r0
    d4dc:	4622      	mov	r2, r4
    d4de:	4638      	mov	r0, r7
    d4e0:	f007 fab8 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d4e4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d4e6:	2000      	movs	r0, #0
    d4e8:	f006 fc11 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4ec:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d4ee:	2000      	movs	r0, #0
    d4f0:	f006 fc0d 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4f4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d4f6:	2001      	movs	r0, #1
    d4f8:	f006 fc09 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4fc:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d4fe:	4641      	mov	r1, r8
    d500:	20f2      	movs	r0, #242	; 0xf2
    d502:	f006 fc05 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d506:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d508:	2101      	movs	r1, #1
    d50a:	4640      	mov	r0, r8
    d50c:	f006 fc02 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d510:	4680      	mov	r8, r0
    d512:	4651      	mov	r1, sl
    d514:	20f2      	movs	r0, #242	; 0xf2
    d516:	f006 fc09 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d51a:	4639      	mov	r1, r7
    d51c:	f006 fbf8 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d520:	4601      	mov	r1, r0
    d522:	4640      	mov	r0, r8
    d524:	f006 fbf8 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d528:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d52a:	2100      	movs	r1, #0
    d52c:	20f2      	movs	r0, #242	; 0xf2
    d52e:	f006 fbf1 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d532:	4680      	mov	r8, r0
    d534:	4651      	mov	r1, sl
    d536:	4648      	mov	r0, r9
    d538:	f006 fc00 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d53c:	4639      	mov	r1, r7
    d53e:	f006 fbe7 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d542:	4601      	mov	r1, r0
    d544:	4640      	mov	r0, r8
    d546:	f006 fbe7 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d54a:	f006 fbe0 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d54e:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    d550:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d554:	f006 fbdb 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d558:	4601      	mov	r1, r0
    d55a:	4628      	mov	r0, r5
    d55c:	f006 fbd8 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d560:	f006 fbde 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d564:	4605      	mov	r5, r0
    d566:	4639      	mov	r1, r7
    d568:	4620      	mov	r0, r4
    d56a:	f7ff fcc5 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d56e:	4601      	mov	r1, r0
    d570:	4622      	mov	r2, r4
    d572:	4628      	mov	r0, r5
    d574:	f007 fa6e 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d578:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d57a:	4630      	mov	r0, r6
    d57c:	f007 fb01 	bl	14b82 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    d580:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    d582:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d586:	f006 fbc2 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d58a:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d58c:	4622      	mov	r2, r4
    d58e:	4628      	mov	r0, r5
    d590:	f007 fa60 	bl	14a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    d594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d598:	63afbe7b 	.word	0x63afbe7b
    d59c:	4da2cbf2 	.word	0x4da2cbf2
    d5a0:	2f16ac6c 	.word	0x2f16ac6c
    d5a4:	1152aaa4 	.word	0x1152aaa4
    d5a8:	02582ab7 	.word	0x02582ab7
    d5ac:	000afe11 	.word	0x000afe11

0000d5b0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b4:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d5b6:	694f      	ldr	r7, [r1, #20]
    d5b8:	b35f      	cbz	r7, d612 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d5ba:	4604      	mov	r4, r0
    d5bc:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d5be:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d5c2:	f1b8 0f00 	cmp.w	r8, #0
    d5c6:	d026      	beq.n	d616 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d5c8:	4b23      	ldr	r3, [pc, #140]	; (d658 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d5ca:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d5cc:	b328      	cbz	r0, d61a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d5ce:	b335      	cbz	r5, d61e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d5d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d5d2:	682b      	ldr	r3, [r5, #0]
    d5d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d5d8:	6859      	ldr	r1, [r3, #4]
    d5da:	4790      	blx	r2
    d5dc:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d5de:	4b1f      	ldr	r3, [pc, #124]	; (d65c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d5e0:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d5e2:	b1f4      	cbz	r4, d622 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d5e4:	b1fd      	cbz	r5, d626 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d5e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d5e8:	686b      	ldr	r3, [r5, #4]
    d5ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d5ee:	6859      	ldr	r1, [r3, #4]
    d5f0:	4620      	mov	r0, r4
    d5f2:	4790      	blx	r2

  switch (input->type) {
    d5f4:	7a33      	ldrb	r3, [r6, #8]
    d5f6:	2b01      	cmp	r3, #1
    d5f8:	d017      	beq.n	d62a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d5fa:	2b09      	cmp	r3, #9
    d5fc:	d021      	beq.n	d642 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    d5fe:	6965      	ldr	r5, [r4, #20]
    d600:	4618      	mov	r0, r3
    d602:	f7fb fdeb 	bl	91dc <TfLiteTypeGetName>
    d606:	4602      	mov	r2, r0
    d608:	4915      	ldr	r1, [pc, #84]	; (d660 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d60a:	4620      	mov	r0, r4
    d60c:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    d60e:	2001      	movs	r0, #1
    d610:	e014      	b.n	d63c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d612:	f008 fd26 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d616:	f008 fd24 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    d61a:	f008 fd22 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    d61e:	f008 fd20 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    d622:	f008 fd1e 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    d626:	f008 fd1c 	bl	16062 <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    d62a:	9001      	str	r0, [sp, #4]
    d62c:	9600      	str	r6, [sp, #0]
    d62e:	4643      	mov	r3, r8
    d630:	463a      	mov	r2, r7
    d632:	4629      	mov	r1, r5
    d634:	4620      	mov	r0, r4
    d636:	f007 fcd7 	bl	14fe8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    d63a:	2000      	movs	r0, #0
}
    d63c:	b002      	add	sp, #8
    d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    d642:	9001      	str	r0, [sp, #4]
    d644:	9600      	str	r6, [sp, #0]
    d646:	4643      	mov	r3, r8
    d648:	463a      	mov	r2, r7
    d64a:	4629      	mov	r1, r5
    d64c:	4620      	mov	r0, r4
    d64e:	f008 f868 	bl	15722 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    d652:	2000      	movs	r0, #0
      break;
    d654:	e7f2      	b.n	d63c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d656:	bf00      	nop
    d658:	0006b774 	.word	0x0006b774
    d65c:	0006b778 	.word	0x0006b778
    d660:	0006b6cc 	.word	0x0006b6cc

0000d664 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    d664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d668:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d66a:	694f      	ldr	r7, [r1, #20]
    d66c:	b35f      	cbz	r7, d6c6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d66e:	4604      	mov	r4, r0
    d670:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    d672:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d676:	f1b8 0f00 	cmp.w	r8, #0
    d67a:	d026      	beq.n	d6ca <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d67c:	4b23      	ldr	r3, [pc, #140]	; (d70c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d67e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d680:	b328      	cbz	r0, d6ce <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d682:	b335      	cbz	r5, d6d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d684:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d686:	682b      	ldr	r3, [r5, #0]
    d688:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d68c:	6859      	ldr	r1, [r3, #4]
    d68e:	4790      	blx	r2
    d690:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d692:	4b1f      	ldr	r3, [pc, #124]	; (d710 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d694:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d696:	b1f4      	cbz	r4, d6d6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d698:	b1fd      	cbz	r5, d6da <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d69a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d69c:	686b      	ldr	r3, [r5, #4]
    d69e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d6a2:	6859      	ldr	r1, [r3, #4]
    d6a4:	4620      	mov	r0, r4
    d6a6:	4790      	blx	r2
  switch (input->type) {
    d6a8:	7a33      	ldrb	r3, [r6, #8]
    d6aa:	2b01      	cmp	r3, #1
    d6ac:	d017      	beq.n	d6de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d6ae:	2b09      	cmp	r3, #9
    d6b0:	d021      	beq.n	d6f6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    d6b2:	6965      	ldr	r5, [r4, #20]
    d6b4:	4618      	mov	r0, r3
    d6b6:	f7fb fd91 	bl	91dc <TfLiteTypeGetName>
    d6ba:	4602      	mov	r2, r0
    d6bc:	4915      	ldr	r1, [pc, #84]	; (d714 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d6be:	4620      	mov	r0, r4
    d6c0:	47a8      	blx	r5
      return kTfLiteError;
    d6c2:	2001      	movs	r0, #1
    d6c4:	e014      	b.n	d6f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d6c6:	f008 fccc 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d6ca:	f008 fcca 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    d6ce:	f008 fcc8 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    d6d2:	f008 fcc6 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    d6d6:	f008 fcc4 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    d6da:	f008 fcc2 	bl	16062 <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    d6de:	9001      	str	r0, [sp, #4]
    d6e0:	9600      	str	r6, [sp, #0]
    d6e2:	4643      	mov	r3, r8
    d6e4:	463a      	mov	r2, r7
    d6e6:	4629      	mov	r1, r5
    d6e8:	4620      	mov	r0, r4
    d6ea:	f007 faac 	bl	14c46 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    d6ee:	2000      	movs	r0, #0
}
    d6f0:	b002      	add	sp, #8
    d6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    d6f6:	9001      	str	r0, [sp, #4]
    d6f8:	9600      	str	r6, [sp, #0]
    d6fa:	4643      	mov	r3, r8
    d6fc:	463a      	mov	r2, r7
    d6fe:	4629      	mov	r1, r5
    d700:	4620      	mov	r0, r4
    d702:	f007 fe3f 	bl	15384 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    d706:	2000      	movs	r0, #0
      break;
    d708:	e7f2      	b.n	d6f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d70a:	bf00      	nop
    d70c:	0006b774 	.word	0x0006b774
    d710:	0006b778 	.word	0x0006b778
    d714:	0006b6f0 	.word	0x0006b6f0

0000d718 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    d718:	b470      	push	{r4, r5, r6}
    d71a:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d71c:	4604      	mov	r4, r0
    d71e:	4d05      	ldr	r5, [pc, #20]	; (d734 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    d720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d72c:	4630      	mov	r0, r6
    d72e:	bc70      	pop	{r4, r5, r6}
    d730:	4770      	bx	lr
    d732:	bf00      	nop
    d734:	00017040 	.word	0x00017040

0000d738 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    d738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d73c:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d73e:	694f      	ldr	r7, [r1, #20]
    d740:	b34f      	cbz	r7, d796 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    d742:	4605      	mov	r5, r0
    d744:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d746:	690e      	ldr	r6, [r1, #16]
    d748:	b33e      	cbz	r6, d79a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    d74a:	2200      	movs	r2, #0
    d74c:	f006 fa0c 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d750:	4680      	mov	r8, r0
    d752:	b320      	cbz	r0, d79e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    d754:	2200      	movs	r2, #0
    d756:	4621      	mov	r1, r4
    d758:	4628      	mov	r0, r5
    d75a:	f006 fa24 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d75e:	4681      	mov	r9, r0
    d760:	b350      	cbz	r0, d7b8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    d762:	9600      	str	r6, [sp, #0]
    d764:	4603      	mov	r3, r0
    d766:	4642      	mov	r2, r8
    d768:	4639      	mov	r1, r7
    d76a:	4628      	mov	r0, r5
    d76c:	f007 fa19 	bl	14ba2 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    d770:	4604      	mov	r4, r0
    d772:	b9e8      	cbnz	r0, d7b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    d774:	f898 3000 	ldrb.w	r3, [r8]
    d778:	2b01      	cmp	r3, #1
    d77a:	d027      	beq.n	d7cc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    d77c:	2b09      	cmp	r3, #9
    d77e:	d117      	bne.n	d7b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    d780:	7d39      	ldrb	r1, [r7, #20]
    d782:	f106 0314 	add.w	r3, r6, #20
    d786:	9300      	str	r3, [sp, #0]
    d788:	f106 0310 	add.w	r3, r6, #16
    d78c:	464a      	mov	r2, r9
    d78e:	4628      	mov	r0, r5
    d790:	f7fb ff42 	bl	9618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    d794:	e00c      	b.n	d7b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d796:	f008 fc64 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d79a:	f008 fc62 	bl	16062 <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    d79e:	696c      	ldr	r4, [r5, #20]
    d7a0:	4b0e      	ldr	r3, [pc, #56]	; (d7dc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    d7a2:	9300      	str	r3, [sp, #0]
    d7a4:	233a      	movs	r3, #58	; 0x3a
    d7a6:	4a0e      	ldr	r2, [pc, #56]	; (d7e0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d7a8:	490e      	ldr	r1, [pc, #56]	; (d7e4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d7aa:	4628      	mov	r0, r5
    d7ac:	47a0      	blx	r4
    d7ae:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    d7b0:	4620      	mov	r0, r4
    d7b2:	b003      	add	sp, #12
    d7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d7b8:	696c      	ldr	r4, [r5, #20]
    d7ba:	4b0b      	ldr	r3, [pc, #44]	; (d7e8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    d7bc:	9300      	str	r3, [sp, #0]
    d7be:	233c      	movs	r3, #60	; 0x3c
    d7c0:	4a07      	ldr	r2, [pc, #28]	; (d7e0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d7c2:	4908      	ldr	r1, [pc, #32]	; (d7e4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d7c4:	4628      	mov	r0, r5
    d7c6:	47a0      	blx	r4
    d7c8:	2401      	movs	r4, #1
    d7ca:	e7f1      	b.n	d7b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    d7cc:	f106 021c 	add.w	r2, r6, #28
    d7d0:	f106 0118 	add.w	r1, r6, #24
    d7d4:	7d38      	ldrb	r0, [r7, #20]
    d7d6:	f7fc fe7f 	bl	a4d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    d7da:	e7e9      	b.n	d7b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    d7dc:	0006b3e0 	.word	0x0006b3e0
    d7e0:	0006b71c 	.word	0x0006b71c
    d7e4:	0006a9cc 	.word	0x0006a9cc
    d7e8:	0006b408 	.word	0x0006b408

0000d7ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    d7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7f0:	b084      	sub	sp, #16
    d7f2:	4604      	mov	r4, r0
    d7f4:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    d7f6:	2200      	movs	r2, #0
    d7f8:	f006 f9b6 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d7fc:	b308      	cbz	r0, d842 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    d7fe:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    d800:	2200      	movs	r2, #0
    d802:	4639      	mov	r1, r7
    d804:	4620      	mov	r0, r4
    d806:	f006 f9ce 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d80a:	4606      	mov	r6, r0
    d80c:	b328      	cbz	r0, d85a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    d80e:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    d812:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    d816:	2201      	movs	r2, #1
    d818:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    d81a:	f8d8 1000 	ldr.w	r1, [r8]
    d81e:	4561      	cmp	r1, ip
    d820:	dd25      	ble.n	d86e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    d822:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    d826:	f8d1 e004 	ldr.w	lr, [r1, #4]
    d82a:	4670      	mov	r0, lr
    d82c:	17c1      	asrs	r1, r0, #31
    d82e:	fb02 f101 	mul.w	r1, r2, r1
    d832:	fb0e 1103 	mla	r1, lr, r3, r1
    d836:	fba2 230e 	umull	r2, r3, r2, lr
    d83a:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    d83c:	f10c 0c01 	add.w	ip, ip, #1
    d840:	e7eb      	b.n	d81a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    d842:	6965      	ldr	r5, [r4, #20]
    d844:	4b3e      	ldr	r3, [pc, #248]	; (d940 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    d846:	9300      	str	r3, [sp, #0]
    d848:	2323      	movs	r3, #35	; 0x23
    d84a:	4a3e      	ldr	r2, [pc, #248]	; (d944 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d84c:	493e      	ldr	r1, [pc, #248]	; (d948 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d84e:	4620      	mov	r0, r4
    d850:	47a8      	blx	r5
    d852:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    d854:	b004      	add	sp, #16
    d856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d85a:	6965      	ldr	r5, [r4, #20]
    d85c:	4b3b      	ldr	r3, [pc, #236]	; (d94c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    d85e:	9300      	str	r3, [sp, #0]
    d860:	2325      	movs	r3, #37	; 0x25
    d862:	4a38      	ldr	r2, [pc, #224]	; (d944 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d864:	4938      	ldr	r1, [pc, #224]	; (d948 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d866:	4620      	mov	r0, r4
    d868:	47a8      	blx	r5
    d86a:	2001      	movs	r0, #1
    d86c:	e7f2      	b.n	d854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    d86e:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d870:	683b      	ldr	r3, [r7, #0]
    d872:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d874:	2b01      	cmp	r3, #1
    d876:	d004      	beq.n	d882 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    d878:	2300      	movs	r3, #0
  int stretch_dim = -1;
    d87a:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    d87e:	2701      	movs	r7, #1
    d880:	e01b      	b.n	d8ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d882:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    d884:	2b01      	cmp	r3, #1
    d886:	d1f7      	bne.n	d878 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d888:	6843      	ldr	r3, [r0, #4]
    d88a:	2b00      	cmp	r3, #0
    d88c:	d1f4      	bne.n	d878 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    d88e:	6003      	str	r3, [r0, #0]
    d890:	e7f2      	b.n	d878 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d892:	6965      	ldr	r5, [r4, #20]
    d894:	f04f 33ff 	mov.w	r3, #4294967295
    d898:	9303      	str	r3, [sp, #12]
    d89a:	f8cd c008 	str.w	ip, [sp, #8]
    d89e:	4b2c      	ldr	r3, [pc, #176]	; (d950 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    d8a0:	9301      	str	r3, [sp, #4]
    d8a2:	4b2c      	ldr	r3, [pc, #176]	; (d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    d8a4:	9300      	str	r3, [sp, #0]
    d8a6:	233a      	movs	r3, #58	; 0x3a
    d8a8:	4a26      	ldr	r2, [pc, #152]	; (d944 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d8aa:	492b      	ldr	r1, [pc, #172]	; (d958 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    d8ac:	4620      	mov	r0, r4
    d8ae:	47a8      	blx	r5
    d8b0:	2001      	movs	r0, #1
    d8b2:	e7cf      	b.n	d854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    d8b4:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    d8b8:	3301      	adds	r3, #1
    d8ba:	6801      	ldr	r1, [r0, #0]
    d8bc:	4299      	cmp	r1, r3
    d8be:	dd0a      	ble.n	d8d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    d8c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    d8c4:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    d8c6:	f1b1 3fff 	cmp.w	r1, #4294967295
    d8ca:	d1f3      	bne.n	d8b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d8cc:	f1bc 3fff 	cmp.w	ip, #4294967295
    d8d0:	d1df      	bne.n	d892 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    d8d2:	469c      	mov	ip, r3
    d8d4:	e7f0      	b.n	d8b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    d8d6:	f1bc 3fff 	cmp.w	ip, #4294967295
    d8da:	d006      	beq.n	d8ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    d8dc:	fb92 f3f7 	sdiv	r3, r2, r7
    d8e0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    d8e4:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    d8e6:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d8ea:	7828      	ldrb	r0, [r5, #0]
    d8ec:	7833      	ldrb	r3, [r6, #0]
    d8ee:	4298      	cmp	r0, r3
    d8f0:	d10f      	bne.n	d912 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    d8f2:	4297      	cmp	r7, r2
    d8f4:	d021      	beq.n	d93a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    d8f6:	6965      	ldr	r5, [r4, #20]
    d8f8:	9703      	str	r7, [sp, #12]
    d8fa:	9202      	str	r2, [sp, #8]
    d8fc:	4b17      	ldr	r3, [pc, #92]	; (d95c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    d8fe:	9301      	str	r3, [sp, #4]
    d900:	4b17      	ldr	r3, [pc, #92]	; (d960 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    d902:	9300      	str	r3, [sp, #0]
    d904:	2346      	movs	r3, #70	; 0x46
    d906:	4a0f      	ldr	r2, [pc, #60]	; (d944 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d908:	4913      	ldr	r1, [pc, #76]	; (d958 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    d90a:	4620      	mov	r0, r4
    d90c:	47a8      	blx	r5
    d90e:	2001      	movs	r0, #1
    d910:	e7a0      	b.n	d854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d912:	6967      	ldr	r7, [r4, #20]
    d914:	f7fb fc62 	bl	91dc <TfLiteTypeGetName>
    d918:	4605      	mov	r5, r0
    d91a:	7830      	ldrb	r0, [r6, #0]
    d91c:	f7fb fc5e 	bl	91dc <TfLiteTypeGetName>
    d920:	9003      	str	r0, [sp, #12]
    d922:	9502      	str	r5, [sp, #8]
    d924:	4b0f      	ldr	r3, [pc, #60]	; (d964 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    d926:	9301      	str	r3, [sp, #4]
    d928:	4b0f      	ldr	r3, [pc, #60]	; (d968 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    d92a:	9300      	str	r3, [sp, #0]
    d92c:	2345      	movs	r3, #69	; 0x45
    d92e:	4a05      	ldr	r2, [pc, #20]	; (d944 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d930:	490e      	ldr	r1, [pc, #56]	; (d96c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    d932:	4620      	mov	r0, r4
    d934:	47b8      	blx	r7
    d936:	2001      	movs	r0, #1
    d938:	e78c      	b.n	d854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    d93a:	2000      	movs	r0, #0
    d93c:	e78a      	b.n	d854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    d93e:	bf00      	nop
    d940:	0006b3e0 	.word	0x0006b3e0
    d944:	0006b77c 	.word	0x0006b77c
    d948:	0006a9cc 	.word	0x0006a9cc
    d94c:	0006b408 	.word	0x0006b408
    d950:	0006b7cc 	.word	0x0006b7cc
    d954:	0006b7d0 	.word	0x0006b7d0
    d958:	0006ac8c 	.word	0x0006ac8c
    d95c:	0006b7dc 	.word	0x0006b7dc
    d960:	0006b7f0 	.word	0x0006b7f0
    d964:	0006b2a0 	.word	0x0006b2a0
    d968:	0006b2b0 	.word	0x0006b2b0
    d96c:	0006b618 	.word	0x0006b618

0000d970 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    d970:	b570      	push	{r4, r5, r6, lr}
    d972:	b084      	sub	sp, #16
    d974:	4605      	mov	r5, r0
    d976:	460c      	mov	r4, r1
    d978:	680b      	ldr	r3, [r1, #0]
    d97a:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    d97c:	2b01      	cmp	r3, #1
    d97e:	d00a      	beq.n	d996 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    d980:	2b02      	cmp	r3, #2
    d982:	d008      	beq.n	d996 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    d984:	6944      	ldr	r4, [r0, #20]
    d986:	4b1a      	ldr	r3, [pc, #104]	; (d9f0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    d988:	9300      	str	r3, [sp, #0]
    d98a:	234b      	movs	r3, #75	; 0x4b
    d98c:	4a19      	ldr	r2, [pc, #100]	; (d9f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d98e:	491a      	ldr	r1, [pc, #104]	; (d9f8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    d990:	47a0      	blx	r4
    d992:	2001      	movs	r0, #1
    d994:	e011      	b.n	d9ba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    d996:	6863      	ldr	r3, [r4, #4]
    d998:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    d99a:	2b01      	cmp	r3, #1
    d99c:	d00f      	beq.n	d9be <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    d99e:	696e      	ldr	r6, [r5, #20]
    d9a0:	2401      	movs	r4, #1
    d9a2:	9403      	str	r4, [sp, #12]
    d9a4:	9302      	str	r3, [sp, #8]
    d9a6:	4b15      	ldr	r3, [pc, #84]	; (d9fc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    d9a8:	9301      	str	r3, [sp, #4]
    d9aa:	4b15      	ldr	r3, [pc, #84]	; (da00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    d9ac:	9300      	str	r3, [sp, #0]
    d9ae:	234c      	movs	r3, #76	; 0x4c
    d9b0:	4a10      	ldr	r2, [pc, #64]	; (d9f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d9b2:	4914      	ldr	r1, [pc, #80]	; (da04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    d9b4:	4628      	mov	r0, r5
    d9b6:	47b0      	blx	r6
    d9b8:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    d9ba:	b004      	add	sp, #16
    d9bc:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    d9be:	4621      	mov	r1, r4
    d9c0:	4628      	mov	r0, r5
    d9c2:	f7ff ff13 	bl	d7ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    d9c6:	2800      	cmp	r0, #0
    d9c8:	d0f7      	beq.n	d9ba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    d9ca:	696e      	ldr	r6, [r5, #20]
    d9cc:	4621      	mov	r1, r4
    d9ce:	4628      	mov	r0, r5
    d9d0:	f7ff ff0c 	bl	d7ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    d9d4:	2300      	movs	r3, #0
    d9d6:	9303      	str	r3, [sp, #12]
    d9d8:	9002      	str	r0, [sp, #8]
    d9da:	4b0b      	ldr	r3, [pc, #44]	; (da08 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    d9dc:	9301      	str	r3, [sp, #4]
    d9de:	4b0b      	ldr	r3, [pc, #44]	; (da0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    d9e0:	9300      	str	r3, [sp, #0]
    d9e2:	234d      	movs	r3, #77	; 0x4d
    d9e4:	4a03      	ldr	r2, [pc, #12]	; (d9f4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    d9e6:	4907      	ldr	r1, [pc, #28]	; (da04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    d9e8:	4628      	mov	r0, r5
    d9ea:	47b0      	blx	r6
    d9ec:	2001      	movs	r0, #1
    d9ee:	e7e4      	b.n	d9ba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    d9f0:	0006b804 	.word	0x0006b804
    d9f4:	0006b77c 	.word	0x0006b77c
    d9f8:	0006a9cc 	.word	0x0006a9cc
    d9fc:	0006ba14 	.word	0x0006ba14
    da00:	0006b834 	.word	0x0006b834
    da04:	0006ac8c 	.word	0x0006ac8c
    da08:	0006b848 	.word	0x0006b848
    da0c:	0006b854 	.word	0x0006b854

0000da10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    da10:	b470      	push	{r4, r5, r6}
    da12:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    da14:	4604      	mov	r4, r0
    da16:	4d05      	ldr	r5, [pc, #20]	; (da2c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    da18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    da1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    da1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    da20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    da24:	4630      	mov	r0, r6
    da26:	bc70      	pop	{r4, r5, r6}
    da28:	4770      	bx	lr
    da2a:	bf00      	nop
    da2c:	00017080 	.word	0x00017080

0000da30 <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    da30:	b470      	push	{r4, r5, r6}
    da32:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    da34:	4604      	mov	r4, r0
    da36:	4d05      	ldr	r5, [pc, #20]	; (da4c <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    da38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    da3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    da3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    da40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    da44:	4630      	mov	r0, r6
    da46:	bc70      	pop	{r4, r5, r6}
    da48:	4770      	bx	lr
    da4a:	bf00      	nop
    da4c:	000170a0 	.word	0x000170a0

0000da50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da54:	b091      	sub	sp, #68	; 0x44
    da56:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    da58:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    da5c:	68c2      	ldr	r2, [r0, #12]
    da5e:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    da60:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    da62:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    da64:	1e68      	subs	r0, r5, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    da66:	2200      	movs	r2, #0
    da68:	e011      	b.n	da8e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    da6a:	f008 fafa 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    da6e:	f008 faf8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    da72:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    da76:	6866      	ldr	r6, [r4, #4]
    da78:	e017      	b.n	daaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    da7a:	f008 faf2 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    da7e:	f008 faf0 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    da82:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    da86:	6864      	ldr	r4, [r4, #4]
    if (i != skip_dim) {
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    da88:	42b4      	cmp	r4, r6
    da8a:	d119      	bne.n	dac0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    da8c:	3201      	adds	r2, #1
    da8e:	4295      	cmp	r5, r2
    da90:	dd18      	ble.n	dac4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    da92:	4290      	cmp	r0, r2
    da94:	d0fa      	beq.n	da8c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    da96:	2a00      	cmp	r2, #0
    da98:	dbe7      	blt.n	da6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    da9a:	680c      	ldr	r4, [r1, #0]
    da9c:	42a2      	cmp	r2, r4
    da9e:	dae6      	bge.n	da6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    daa0:	2c05      	cmp	r4, #5
    daa2:	dde6      	ble.n	da72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    daa4:	684c      	ldr	r4, [r1, #4]
    daa6:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    daaa:	2a00      	cmp	r2, #0
    daac:	dbe5      	blt.n	da7a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    daae:	681c      	ldr	r4, [r3, #0]
    dab0:	42a2      	cmp	r2, r4
    dab2:	dae4      	bge.n	da7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dab4:	2c05      	cmp	r4, #5
    dab6:	dde4      	ble.n	da82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    dab8:	685c      	ldr	r4, [r3, #4]
    daba:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    dabe:	e7e3      	b.n	da88 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    dac0:	f008 facf 	bl	16062 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    dac4:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dac6:	2800      	cmp	r0, #0
    dac8:	db08      	blt.n	dadc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    daca:	42a8      	cmp	r0, r5
    dacc:	da06      	bge.n	dadc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dace:	2d05      	cmp	r5, #5
    dad0:	dd06      	ble.n	dae0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    dad2:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    dad4:	2200      	movs	r2, #0
  int flat_size = 1;
    dad6:	2401      	movs	r4, #1
    dad8:	46ac      	mov	ip, r5
    dada:	e007      	b.n	daec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dadc:	f008 fac1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dae0:	1d0e      	adds	r6, r1, #4
    dae2:	e7f7      	b.n	dad4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dae4:	2501      	movs	r5, #1
    dae6:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    daea:	3201      	adds	r2, #1
    daec:	4594      	cmp	ip, r2
    daee:	dd04      	ble.n	dafa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    daf0:	4290      	cmp	r0, r2
    daf2:	d0f7      	beq.n	dae4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    daf4:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    daf8:	e7f5      	b.n	dae6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    dafa:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    dafc:	2800      	cmp	r0, #0
    dafe:	db2e      	blt.n	db5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    db00:	680a      	ldr	r2, [r1, #0]
    db02:	4290      	cmp	r0, r2
    db04:	da2d      	bge.n	db62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db06:	2a05      	cmp	r2, #5
    db08:	dd2d      	ble.n	db66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    db0a:	684a      	ldr	r2, [r1, #4]
    db0c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    db10:	2800      	cmp	r0, #0
    db12:	db2c      	blt.n	db6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    db14:	6819      	ldr	r1, [r3, #0]
    db16:	4288      	cmp	r0, r1
    db18:	da2b      	bge.n	db72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db1a:	2905      	cmp	r1, #5
    db1c:	dd2b      	ble.n	db76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    db1e:	6859      	ldr	r1, [r3, #4]
    db20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    db24:	4291      	cmp	r1, r2
    db26:	d12a      	bne.n	db7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db28:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    db2a:	2800      	cmp	r0, #0
    db2c:	db29      	blt.n	db82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    db2e:	6819      	ldr	r1, [r3, #0]
    db30:	4288      	cmp	r0, r1
    db32:	da28      	bge.n	db86 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db34:	2905      	cmp	r1, #5
    db36:	dd28      	ble.n	db8a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    db38:	685b      	ldr	r3, [r3, #4]
    db3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    db3e:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    db40:	429a      	cmp	r2, r3
    db42:	dc26      	bgt.n	db92 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    db44:	ab0f      	add	r3, sp, #60	; 0x3c
    db46:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    db4a:	f04f 0a00 	mov.w	sl, #0
    db4e:	4642      	mov	r2, r8
    db50:	46d0      	mov	r8, sl
    db52:	9702      	str	r7, [sp, #8]
    db54:	464b      	mov	r3, r9
    db56:	46d9      	mov	r9, fp
    db58:	469b      	mov	fp, r3
    db5a:	4692      	mov	sl, r2
    db5c:	e15d      	b.n	de1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    db5e:	f008 fa80 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    db62:	f008 fa7e 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db66:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    db6a:	684a      	ldr	r2, [r1, #4]
    db6c:	e7d0      	b.n	db10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    db6e:	f008 fa78 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    db72:	f008 fa76 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db76:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    db7a:	6849      	ldr	r1, [r1, #4]
    db7c:	e7d2      	b.n	db24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    db7e:	f008 fa70 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    db82:	f008 fa6e 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    db86:	f008 fa6c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    db8e:	685b      	ldr	r3, [r3, #4]
    db90:	e7d5      	b.n	db3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    db92:	ab0e      	add	r3, sp, #56	; 0x38
    db94:	e7d7      	b.n	db46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    db96:	f991 2000 	ldrsb.w	r2, [r1]
    db9a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    db9e:	3301      	adds	r3, #1
    dba0:	454b      	cmp	r3, r9
    dba2:	da0c      	bge.n	dbbe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dba4:	fb09 3208 	mla	r2, r9, r8, r3
    dba8:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    dbac:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    dbb0:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    dbb4:	4282      	cmp	r2, r0
    dbb6:	dcee      	bgt.n	db96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    dbb8:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    dbbc:	e7eb      	b.n	db96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    dbbe:	2000      	movs	r0, #0
    dbc0:	f006 f8a5 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    dbc4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dbc6:	2400      	movs	r4, #0
    dbc8:	9f06      	ldr	r7, [sp, #24]
    dbca:	9e02      	ldr	r6, [sp, #8]
    dbcc:	e01a      	b.n	dc04 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dbce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dbd2:	d002      	beq.n	dbda <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    dbd4:	f04f 0c00 	mov.w	ip, #0
    dbd8:	e024      	b.n	dc24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    dbda:	f04f 0c01 	mov.w	ip, #1
    dbde:	e021      	b.n	dc24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dbe0:	4993      	ldr	r1, [pc, #588]	; (de30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    dbe2:	e02f      	b.n	dc44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dbe4:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    dbe6:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dbea:	f1bc 0f00 	cmp.w	ip, #0
    dbee:	d13a      	bne.n	dc66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    dbf0:	f7ff fa90 	bl	d114 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    dbf4:	f006 ffc1 	bl	14b7a <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    dbf8:	4601      	mov	r1, r0
    dbfa:	4628      	mov	r0, r5
    dbfc:	f006 ff79 	bl	14af2 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    dc00:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dc02:	3401      	adds	r4, #1
    dc04:	454c      	cmp	r4, r9
    dc06:	da31      	bge.n	dc6c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    dc08:	fb09 4308 	mla	r3, r9, r8, r4
    dc0c:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    dc10:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    dc14:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    dc16:	4296      	cmp	r6, r2
    dc18:	dcf3      	bgt.n	dc02 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    dc1a:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dc1c:	4592      	cmp	sl, r2
    dc1e:	d0d6      	beq.n	dbce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    dc20:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    dc24:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    dc26:	fb0a f301 	mul.w	r3, sl, r1
    dc2a:	4650      	mov	r0, sl
    dc2c:	17c1      	asrs	r1, r0, #31
    dc2e:	fb02 3101 	mla	r1, r2, r1, r3
    dc32:	fbaa 2302 	umull	r2, r3, sl, r2
    dc36:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dc38:	2a00      	cmp	r2, #0
    dc3a:	f173 0100 	sbcs.w	r1, r3, #0
    dc3e:	dbcf      	blt.n	dbe0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    dc40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dc44:	1852      	adds	r2, r2, r1
    dc46:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    dc4a:	4611      	mov	r1, r2
    dc4c:	4618      	mov	r0, r3
    dc4e:	2a00      	cmp	r2, #0
    dc50:	f173 0e00 	sbcs.w	lr, r3, #0
    dc54:	dac6      	bge.n	dbe4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    dc56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dc5a:	1851      	adds	r1, r2, r1
    dc5c:	f04f 0000 	mov.w	r0, #0
    dc60:	eb43 0000 	adc.w	r0, r3, r0
    dc64:	e7be      	b.n	dbe4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dc66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dc6a:	e7c1      	b.n	dbf0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    dc6c:	4628      	mov	r0, r5
    dc6e:	f006 fe4d 	bl	1490c <_ZN6tflite17CountLeadingZerosIjEEiT_>
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    dc72:	f1c0 030c 	rsb	r3, r0, #12
    dc76:	9307      	str	r3, [sp, #28]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    dc78:	fa05 f000 	lsl.w	r0, r5, r0
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    dc7c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    dc80:	f7ff f892 	bl	cda8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    dc84:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    dc86:	2600      	movs	r6, #0
    dc88:	f8cd 8000 	str.w	r8, [sp]
    dc8c:	4657      	mov	r7, sl
    dc8e:	46ca      	mov	sl, r9
    dc90:	f8cd b004 	str.w	fp, [sp, #4]
    dc94:	e02b      	b.n	dcee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dc96:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dc9a:	d001      	beq.n	dca0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    dc9c:	2500      	movs	r5, #0
    dc9e:	e039      	b.n	dd14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    dca0:	2501      	movs	r5, #1
    dca2:	e037      	b.n	dd14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dca4:	4962      	ldr	r1, [pc, #392]	; (de30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    dca6:	e045      	b.n	dd34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dcac:	1851      	adds	r1, r2, r1
    dcae:	f04f 0000 	mov.w	r0, #0
    dcb2:	eb43 0000 	adc.w	r0, r3, r0
    dcb6:	e046      	b.n	dd46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dcb8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dcbc:	e048      	b.n	dd50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    dcbe:	4b5d      	ldr	r3, [pc, #372]	; (de34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    dcc0:	4a5d      	ldr	r2, [pc, #372]	; (de38 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    dcc2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    dcc6:	485d      	ldr	r0, [pc, #372]	; (de3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    dcc8:	f002 fdfa 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    dccc:	4b5c      	ldr	r3, [pc, #368]	; (de40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    dcce:	4a5a      	ldr	r2, [pc, #360]	; (de38 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    dcd0:	f240 1167 	movw	r1, #359	; 0x167
    dcd4:	4859      	ldr	r0, [pc, #356]	; (de3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    dcd6:	f002 fdf3 	bl	108c0 <__assert_func>
	return __b;
    dcda:	ab0c      	add	r3, sp, #48	; 0x30
    dcdc:	e089      	b.n	ddf2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    dcde:	ab0d      	add	r3, sp, #52	; 0x34
    dce0:	e08e      	b.n	de00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    dce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    dce6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dce8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    dcec:	3601      	adds	r6, #1
    dcee:	4556      	cmp	r6, sl
    dcf0:	f280 808b 	bge.w	de0a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    dcf4:	9b00      	ldr	r3, [sp, #0]
    dcf6:	fb0a 6403 	mla	r4, sl, r3, r6
    dcfa:	9b01      	ldr	r3, [sp, #4]
    dcfc:	571a      	ldrsb	r2, [r3, r4]
    dcfe:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    dd02:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    dd04:	9b02      	ldr	r3, [sp, #8]
    dd06:	4293      	cmp	r3, r2
    dd08:	dceb      	bgt.n	dce2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    dd0a:	9b06      	ldr	r3, [sp, #24]
    dd0c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dd0e:	4297      	cmp	r7, r2
    dd10:	d0c1      	beq.n	dc96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    dd12:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    dd14:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    dd16:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    dd1a:	fb02 f309 	mul.w	r3, r2, r9
    dd1e:	fb07 3101 	mla	r1, r7, r1, r3
    dd22:	fba2 2307 	umull	r2, r3, r2, r7
    dd26:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dd28:	2a00      	cmp	r2, #0
    dd2a:	f173 0100 	sbcs.w	r1, r3, #0
    dd2e:	dbb9      	blt.n	dca4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    dd30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dd34:	1852      	adds	r2, r2, r1
    dd36:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    dd3a:	4611      	mov	r1, r2
    dd3c:	4618      	mov	r0, r3
    dd3e:	2a00      	cmp	r2, #0
    dd40:	f173 0c00 	sbcs.w	ip, r3, #0
    dd44:	dbb0      	blt.n	dca8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    dd46:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    dd48:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dd4c:	2d00      	cmp	r5, #0
    dd4e:	d1b3      	bne.n	dcb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    dd50:	f7ff f9e0 	bl	d114 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    dd54:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    dd56:	9808      	ldr	r0, [sp, #32]
    dd58:	f7ff f8ce 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    dd5c:	4605      	mov	r5, r0
  assert(exponent >= 0);
    dd5e:	9b07      	ldr	r3, [sp, #28]
    dd60:	f113 090f 	adds.w	r9, r3, #15
    dd64:	d4ab      	bmi.n	dcbe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    dd66:	f1b9 0f1f 	cmp.w	r9, #31
    dd6a:	dcaf      	bgt.n	dccc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    dd6c:	f04f 0b01 	mov.w	fp, #1
    dd70:	fa0b f009 	lsl.w	r0, fp, r9
    dd74:	3801      	subs	r0, #1
    dd76:	f005 ffca 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dd7a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    dd7c:	2000      	movs	r0, #0
    dd7e:	f005 ffc6 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dd82:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    dd84:	4658      	mov	r0, fp
    dd86:	f005 ffc2 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    dd8a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    dd8c:	4641      	mov	r1, r8
    dd8e:	4628      	mov	r0, r5
    dd90:	f005 ffbe 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    dd94:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    dd96:	4659      	mov	r1, fp
    dd98:	4640      	mov	r0, r8
    dd9a:	f005 ffbb 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dd9e:	4680      	mov	r8, r0
    dda0:	9903      	ldr	r1, [sp, #12]
    dda2:	4628      	mov	r0, r5
    dda4:	f005 ffc2 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    dda8:	f8dd b010 	ldr.w	fp, [sp, #16]
    ddac:	4659      	mov	r1, fp
    ddae:	f005 ffaf 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ddb2:	4601      	mov	r1, r0
    ddb4:	4640      	mov	r0, r8
    ddb6:	f005 ffaf 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    ddba:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    ddbc:	4649      	mov	r1, r9
    ddbe:	4628      	mov	r0, r5
    ddc0:	f005 ffa8 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ddc4:	4605      	mov	r5, r0
    ddc6:	4641      	mov	r1, r8
    ddc8:	9805      	ldr	r0, [sp, #20]
    ddca:	f005 ffb7 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ddce:	4659      	mov	r1, fp
    ddd0:	f005 ff9e 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ddd4:	4601      	mov	r1, r0
    ddd6:	4628      	mov	r0, r5
    ddd8:	f005 ff9e 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    dddc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    dde0:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    dde2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    dde6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    dde8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    ddec:	f6bf af75 	bge.w	dcda <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    ddf0:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    ddf2:	4a14      	ldr	r2, [pc, #80]	; (de44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    ddf4:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    ddf6:	681a      	ldr	r2, [r3, #0]
    ddf8:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    ddfc:	f6ff af6f 	blt.w	dcde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    de00:	681b      	ldr	r3, [r3, #0]
    de02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    de04:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    de08:	e770      	b.n	dcec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    de0a:	f8dd 8000 	ldr.w	r8, [sp]
    de0e:	46d1      	mov	r9, sl
    de10:	46ba      	mov	sl, r7
    de12:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    de16:	f108 0801 	add.w	r8, r8, #1
    de1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de1c:	4598      	cmp	r8, r3
    de1e:	da04      	bge.n	de2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    de20:	2380      	movs	r3, #128	; 0x80
    de22:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    de26:	2300      	movs	r3, #0
    de28:	e6ba      	b.n	dba0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
    de2a:	b011      	add	sp, #68	; 0x44
    de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de30:	c0000001 	.word	0xc0000001
    de34:	0006b180 	.word	0x0006b180
    de38:	0006b190 	.word	0x0006b190
    de3c:	0006b1e8 	.word	0x0006b1e8
    de40:	0006b244 	.word	0x0006b244
    de44:	ffff8000 	.word	0xffff8000

0000de48 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de4c:	b091      	sub	sp, #68	; 0x44
    de4e:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
    de50:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    de54:	68c2      	ldr	r2, [r0, #12]
    de56:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    de58:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    de5a:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    de5c:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    de5e:	2200      	movs	r2, #0
    de60:	e011      	b.n	de86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    de62:	f008 f8fe 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    de66:	f008 f8fc 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    de6a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    de6e:	6866      	ldr	r6, [r4, #4]
    de70:	e017      	b.n	dea2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    de72:	f008 f8f6 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    de76:	f008 f8f4 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    de7a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    de7e:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    de80:	42b4      	cmp	r4, r6
    de82:	d119      	bne.n	deb8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    de84:	3201      	adds	r2, #1
    de86:	4295      	cmp	r5, r2
    de88:	dd18      	ble.n	debc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    de8a:	4290      	cmp	r0, r2
    de8c:	d0fa      	beq.n	de84 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    de8e:	2a00      	cmp	r2, #0
    de90:	dbe7      	blt.n	de62 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    de92:	680c      	ldr	r4, [r1, #0]
    de94:	42a2      	cmp	r2, r4
    de96:	dae6      	bge.n	de66 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    de98:	2c05      	cmp	r4, #5
    de9a:	dde6      	ble.n	de6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    de9c:	684c      	ldr	r4, [r1, #4]
    de9e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dea2:	2a00      	cmp	r2, #0
    dea4:	dbe5      	blt.n	de72 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    dea6:	681c      	ldr	r4, [r3, #0]
    dea8:	42a2      	cmp	r2, r4
    deaa:	dae4      	bge.n	de76 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    deac:	2c05      	cmp	r4, #5
    deae:	dde4      	ble.n	de7a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    deb0:	685c      	ldr	r4, [r3, #4]
    deb2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    deb6:	e7e3      	b.n	de80 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    deb8:	f008 f8d3 	bl	16062 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    debc:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    debe:	2800      	cmp	r0, #0
    dec0:	db08      	blt.n	ded4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    dec2:	42a8      	cmp	r0, r5
    dec4:	da06      	bge.n	ded4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dec6:	2d05      	cmp	r5, #5
    dec8:	dd06      	ble.n	ded8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    deca:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    decc:	2200      	movs	r2, #0
  int flat_size = 1;
    dece:	2401      	movs	r4, #1
    ded0:	46ac      	mov	ip, r5
    ded2:	e007      	b.n	dee4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    ded4:	f008 f8c5 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ded8:	1d0e      	adds	r6, r1, #4
    deda:	e7f7      	b.n	decc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dedc:	2501      	movs	r5, #1
    dede:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    dee2:	3201      	adds	r2, #1
    dee4:	4594      	cmp	ip, r2
    dee6:	dd04      	ble.n	def2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dee8:	4290      	cmp	r0, r2
    deea:	d0f7      	beq.n	dedc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    deec:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    def0:	e7f5      	b.n	dede <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    def2:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    def4:	2800      	cmp	r0, #0
    def6:	db2e      	blt.n	df56 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    def8:	680a      	ldr	r2, [r1, #0]
    defa:	4290      	cmp	r0, r2
    defc:	da2d      	bge.n	df5a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    defe:	2a05      	cmp	r2, #5
    df00:	dd2d      	ble.n	df5e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    df02:	684a      	ldr	r2, [r1, #4]
    df04:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    df08:	2800      	cmp	r0, #0
    df0a:	db2c      	blt.n	df66 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    df0c:	6819      	ldr	r1, [r3, #0]
    df0e:	4288      	cmp	r0, r1
    df10:	da2b      	bge.n	df6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df12:	2905      	cmp	r1, #5
    df14:	dd2b      	ble.n	df6e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    df16:	6859      	ldr	r1, [r3, #4]
    df18:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    df1c:	4291      	cmp	r1, r2
    df1e:	d12a      	bne.n	df76 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    df20:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    df22:	2800      	cmp	r0, #0
    df24:	db29      	blt.n	df7a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    df26:	6819      	ldr	r1, [r3, #0]
    df28:	4288      	cmp	r0, r1
    df2a:	da28      	bge.n	df7e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df2c:	2905      	cmp	r1, #5
    df2e:	dd28      	ble.n	df82 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    df30:	685b      	ldr	r3, [r3, #4]
    df32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    df36:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    df38:	429a      	cmp	r2, r3
    df3a:	dc26      	bgt.n	df8a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    df3c:	ab0f      	add	r3, sp, #60	; 0x3c
    df3e:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
    df42:	f04f 0a00 	mov.w	sl, #0
    df46:	4642      	mov	r2, r8
    df48:	46d0      	mov	r8, sl
    df4a:	9702      	str	r7, [sp, #8]
    df4c:	464b      	mov	r3, r9
    df4e:	46d9      	mov	r9, fp
    df50:	469b      	mov	fp, r3
    df52:	4692      	mov	sl, r2
    df54:	e158      	b.n	e208 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
    df56:	f008 f884 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    df5a:	f008 f882 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df5e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    df62:	684a      	ldr	r2, [r1, #4]
    df64:	e7d0      	b.n	df08 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    df66:	f008 f87c 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    df6a:	f008 f87a 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df6e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    df72:	6849      	ldr	r1, [r1, #4]
    df74:	e7d2      	b.n	df1c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    df76:	f008 f874 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    df7a:	f008 f872 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    df7e:	f008 f870 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df82:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    df86:	685b      	ldr	r3, [r3, #4]
    df88:	e7d5      	b.n	df36 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    df8a:	ab0e      	add	r3, sp, #56	; 0x38
    df8c:	e7d7      	b.n	df3e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    df8e:	f991 2000 	ldrsb.w	r2, [r1]
    df92:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    df96:	3301      	adds	r3, #1
    df98:	454b      	cmp	r3, r9
    df9a:	da0c      	bge.n	dfb6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    df9c:	fb09 3208 	mla	r2, r9, r8, r3
    dfa0:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    dfa4:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    dfa8:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    dfac:	4282      	cmp	r2, r0
    dfae:	dcee      	bgt.n	df8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    dfb0:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    dfb4:	e7eb      	b.n	df8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    dfb6:	2000      	movs	r0, #0
    dfb8:	f005 fea9 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    dfbc:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dfbe:	2400      	movs	r4, #0
    dfc0:	9f06      	ldr	r7, [sp, #24]
    dfc2:	9e02      	ldr	r6, [sp, #8]
    dfc4:	e01a      	b.n	dffc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dfc6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dfca:	d002      	beq.n	dfd2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    dfcc:	f04f 0c00 	mov.w	ip, #0
    dfd0:	e024      	b.n	e01c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    dfd2:	f04f 0c01 	mov.w	ip, #1
    dfd6:	e021      	b.n	e01c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dfd8:	4991      	ldr	r1, [pc, #580]	; (e220 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    dfda:	e02f      	b.n	e03c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dfdc:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    dfde:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dfe2:	f1bc 0f00 	cmp.w	ip, #0
    dfe6:	d13a      	bne.n	e05e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    dfe8:	f7ff f894 	bl	d114 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    dfec:	f006 fdc5 	bl	14b7a <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    dff0:	4601      	mov	r1, r0
    dff2:	4628      	mov	r0, r5
    dff4:	f006 fd7d 	bl	14af2 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    dff8:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dffa:	3401      	adds	r4, #1
    dffc:	454c      	cmp	r4, r9
    dffe:	da31      	bge.n	e064 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e000:	fb09 4308 	mla	r3, r9, r8, r4
    e004:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    e008:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    e00c:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    e00e:	4296      	cmp	r6, r2
    e010:	dcf3      	bgt.n	dffa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    e012:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e014:	4592      	cmp	sl, r2
    e016:	d0d6      	beq.n	dfc6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    e018:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    e01c:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    e01e:	fb0a f301 	mul.w	r3, sl, r1
    e022:	4650      	mov	r0, sl
    e024:	17c1      	asrs	r1, r0, #31
    e026:	fb02 3101 	mla	r1, r2, r1, r3
    e02a:	fbaa 2302 	umull	r2, r3, sl, r2
    e02e:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e030:	2a00      	cmp	r2, #0
    e032:	f173 0100 	sbcs.w	r1, r3, #0
    e036:	dbcf      	blt.n	dfd8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    e038:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e03c:	1852      	adds	r2, r2, r1
    e03e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e042:	4611      	mov	r1, r2
    e044:	4618      	mov	r0, r3
    e046:	2a00      	cmp	r2, #0
    e048:	f173 0e00 	sbcs.w	lr, r3, #0
    e04c:	dac6      	bge.n	dfdc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    e04e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e052:	1851      	adds	r1, r2, r1
    e054:	f04f 0000 	mov.w	r0, #0
    e058:	eb43 0000 	adc.w	r0, r3, r0
    e05c:	e7be      	b.n	dfdc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e05e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e062:	e7c1      	b.n	dfe8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    e064:	4628      	mov	r0, r5
    e066:	f006 fc51 	bl	1490c <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    e06a:	f1c0 030c 	rsb	r3, r0, #12
    e06e:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    e070:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    e074:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    e078:	f7fe fe96 	bl	cda8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    e07c:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
    e07e:	2600      	movs	r6, #0
    e080:	f8cd 8000 	str.w	r8, [sp]
    e084:	4657      	mov	r7, sl
    e086:	46ca      	mov	sl, r9
    e088:	f8cd b004 	str.w	fp, [sp, #4]
    e08c:	e029      	b.n	e0e2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e08e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e092:	d001      	beq.n	e098 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    e094:	2500      	movs	r5, #0
    e096:	e037      	b.n	e108 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
    e098:	2501      	movs	r5, #1
    e09a:	e035      	b.n	e108 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e09c:	4960      	ldr	r1, [pc, #384]	; (e220 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    e09e:	e043      	b.n	e128 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e0a4:	1851      	adds	r1, r2, r1
    e0a6:	f04f 0000 	mov.w	r0, #0
    e0aa:	eb43 0000 	adc.w	r0, r3, r0
    e0ae:	e044      	b.n	e13a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e0b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e0b4:	e046      	b.n	e144 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
    e0b6:	4b5b      	ldr	r3, [pc, #364]	; (e224 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
    e0b8:	4a5b      	ldr	r2, [pc, #364]	; (e228 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    e0ba:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e0be:	485b      	ldr	r0, [pc, #364]	; (e22c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    e0c0:	f002 fbfe 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    e0c4:	4b5a      	ldr	r3, [pc, #360]	; (e230 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    e0c6:	4a58      	ldr	r2, [pc, #352]	; (e228 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    e0c8:	f240 1167 	movw	r1, #359	; 0x167
    e0cc:	4857      	ldr	r0, [pc, #348]	; (e22c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    e0ce:	f002 fbf7 	bl	108c0 <__assert_func>
	return __b;
    e0d2:	ab0c      	add	r3, sp, #48	; 0x30
    e0d4:	e084      	b.n	e1e0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
    e0d6:	ab0d      	add	r3, sp, #52	; 0x34
    e0d8:	e08a      	b.n	e1f0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e0da:	2380      	movs	r3, #128	; 0x80
    e0dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e0de:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
    e0e0:	3601      	adds	r6, #1
    e0e2:	4556      	cmp	r6, sl
    e0e4:	f280 8088 	bge.w	e1f8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e0e8:	9b00      	ldr	r3, [sp, #0]
    e0ea:	fb0a 6403 	mla	r4, sl, r3, r6
    e0ee:	9b01      	ldr	r3, [sp, #4]
    e0f0:	571a      	ldrsb	r2, [r3, r4]
    e0f2:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    e0f6:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    e0f8:	9b02      	ldr	r3, [sp, #8]
    e0fa:	4293      	cmp	r3, r2
    e0fc:	dced      	bgt.n	e0da <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    e0fe:	9b06      	ldr	r3, [sp, #24]
    e100:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e102:	4297      	cmp	r7, r2
    e104:	d0c3      	beq.n	e08e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    e106:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    e108:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    e10a:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    e10e:	fb02 f309 	mul.w	r3, r2, r9
    e112:	fb07 3101 	mla	r1, r7, r1, r3
    e116:	fba2 2307 	umull	r2, r3, r2, r7
    e11a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e11c:	2a00      	cmp	r2, #0
    e11e:	f173 0100 	sbcs.w	r1, r3, #0
    e122:	dbbb      	blt.n	e09c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    e124:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e128:	1852      	adds	r2, r2, r1
    e12a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e12e:	4611      	mov	r1, r2
    e130:	4618      	mov	r0, r3
    e132:	2a00      	cmp	r2, #0
    e134:	f173 0c00 	sbcs.w	ip, r3, #0
    e138:	dbb2      	blt.n	e0a0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    e13a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e13c:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e140:	2d00      	cmp	r5, #0
    e142:	d1b5      	bne.n	e0b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    e144:	f7fe ffe6 	bl	d114 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e148:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    e14a:	9808      	ldr	r0, [sp, #32]
    e14c:	f7fe fed4 	bl	cef8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    e150:	4605      	mov	r5, r0
  assert(exponent >= 0);
    e152:	9b07      	ldr	r3, [sp, #28]
    e154:	f113 0917 	adds.w	r9, r3, #23
    e158:	d4ad      	bmi.n	e0b6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    e15a:	f1b9 0f1f 	cmp.w	r9, #31
    e15e:	dcb1      	bgt.n	e0c4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e160:	f04f 0b01 	mov.w	fp, #1
    e164:	fa0b f009 	lsl.w	r0, fp, r9
    e168:	3801      	subs	r0, #1
    e16a:	f005 fdd0 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e16e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e170:	2000      	movs	r0, #0
    e172:	f005 fdcc 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e176:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    e178:	4658      	mov	r0, fp
    e17a:	f005 fdc8 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e17e:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    e180:	4641      	mov	r1, r8
    e182:	4628      	mov	r0, r5
    e184:	f005 fdc4 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e188:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e18a:	4659      	mov	r1, fp
    e18c:	4640      	mov	r0, r8
    e18e:	f005 fdc1 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e192:	4680      	mov	r8, r0
    e194:	9903      	ldr	r1, [sp, #12]
    e196:	4628      	mov	r0, r5
    e198:	f005 fdc8 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e19c:	f8dd b010 	ldr.w	fp, [sp, #16]
    e1a0:	4659      	mov	r1, fp
    e1a2:	f005 fdb5 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e1a6:	4601      	mov	r1, r0
    e1a8:	4640      	mov	r0, r8
    e1aa:	f005 fdb5 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e1ae:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    e1b0:	4649      	mov	r1, r9
    e1b2:	4628      	mov	r0, r5
    e1b4:	f005 fdae 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e1b8:	4605      	mov	r5, r0
    e1ba:	4641      	mov	r1, r8
    e1bc:	9805      	ldr	r0, [sp, #20]
    e1be:	f005 fdbd 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e1c2:	4659      	mov	r1, fp
    e1c4:	f005 fda4 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e1c8:	4601      	mov	r1, r0
    e1ca:	4628      	mov	r0, r5
    e1cc:	f005 fda4 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    e1d0:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
    e1d2:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    e1d4:	237f      	movs	r3, #127	; 0x7f
    e1d6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    e1d8:	4298      	cmp	r0, r3
    e1da:	f73f af7a 	bgt.w	e0d2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    e1de:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    e1e0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    e1e4:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    e1e6:	681a      	ldr	r2, [r3, #0]
    e1e8:	f112 0f80 	cmn.w	r2, #128	; 0x80
    e1ec:	f6ff af73 	blt.w	e0d6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e1f0:	681b      	ldr	r3, [r3, #0]
    e1f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e1f4:	5513      	strb	r3, [r2, r4]
    e1f6:	e773      	b.n	e0e0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
    e1f8:	f8dd 8000 	ldr.w	r8, [sp]
    e1fc:	46d1      	mov	r9, sl
    e1fe:	46ba      	mov	sl, r7
    e200:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    e204:	f108 0801 	add.w	r8, r8, #1
    e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e20a:	4598      	cmp	r8, r3
    e20c:	da04      	bge.n	e218 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e20e:	2380      	movs	r3, #128	; 0x80
    e210:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    e214:	2300      	movs	r3, #0
    e216:	e6bf      	b.n	df98 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
    e218:	b011      	add	sp, #68	; 0x44
    e21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e21e:	bf00      	nop
    e220:	c0000001 	.word	0xc0000001
    e224:	0006b180 	.word	0x0006b180
    e228:	0006b190 	.word	0x0006b190
    e22c:	0006b1e8 	.word	0x0006b1e8
    e230:	0006b244 	.word	0x0006b244

0000e234 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    e234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e238:	b0bf      	sub	sp, #252	; 0xfc
    e23a:	4604      	mov	r4, r0
    e23c:	460d      	mov	r5, r1
    e23e:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
    e240:	7a03      	ldrb	r3, [r0, #8]
    e242:	2b09      	cmp	r3, #9
    e244:	d152      	bne.n	e2ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
    e246:	7a0b      	ldrb	r3, [r1, #8]
    e248:	2b07      	cmp	r3, #7
    e24a:	d027      	beq.n	e29c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
    e24c:	4601      	mov	r1, r0
    e24e:	a81e      	add	r0, sp, #120	; 0x78
    e250:	f006 fb32 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e254:	4620      	mov	r0, r4
    e256:	f005 fd50 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e25a:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e25c:	4629      	mov	r1, r5
    e25e:	a824      	add	r0, sp, #144	; 0x90
    e260:	f006 fb2a 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e264:	4628      	mov	r0, r5
    e266:	f005 fd4e 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e26a:	9000      	str	r0, [sp, #0]
    e26c:	ab24      	add	r3, sp, #144	; 0x90
    e26e:	4622      	mov	r2, r4
    e270:	a91e      	add	r1, sp, #120	; 0x78
    e272:	4658      	mov	r0, fp
    e274:	f7ff fde8 	bl	de48 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e278:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e27a:	2b05      	cmp	r3, #5
    e27c:	dd03      	ble.n	e286 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
    e27e:	9825      	ldr	r0, [sp, #148]	; 0x94
    e280:	b108      	cbz	r0, e286 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
    e282:	f007 fed9 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e286:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e288:	2b05      	cmp	r3, #5
    e28a:	f340 828b 	ble.w	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e28e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e290:	2800      	cmp	r0, #0
    e292:	f000 8287 	beq.w	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e296:	f007 fecf 	bl	16038 <_ZdaPv>
    e29a:	e283      	b.n	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
    e29c:	4601      	mov	r1, r0
    e29e:	a812      	add	r0, sp, #72	; 0x48
    e2a0:	f006 fb0a 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e2a4:	4620      	mov	r0, r4
    e2a6:	f005 fd28 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e2aa:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e2ac:	4629      	mov	r1, r5
    e2ae:	a818      	add	r0, sp, #96	; 0x60
    e2b0:	f006 fb02 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e2b4:	4628      	mov	r0, r5
    e2b6:	f005 fd4f 	bl	13d58 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e2ba:	9000      	str	r0, [sp, #0]
    e2bc:	ab18      	add	r3, sp, #96	; 0x60
    e2be:	4622      	mov	r2, r4
    e2c0:	a912      	add	r1, sp, #72	; 0x48
    e2c2:	4658      	mov	r0, fp
    e2c4:	f7ff fbc4 	bl	da50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e2c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e2ca:	2b05      	cmp	r3, #5
    e2cc:	dd03      	ble.n	e2d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
    e2ce:	9819      	ldr	r0, [sp, #100]	; 0x64
    e2d0:	b108      	cbz	r0, e2d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
    e2d2:	f007 feb1 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e2d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e2d8:	2b05      	cmp	r3, #5
    e2da:	f340 8263 	ble.w	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e2de:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e2e0:	2800      	cmp	r0, #0
    e2e2:	f000 825f 	beq.w	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e2e6:	f007 fea7 	bl	16038 <_ZdaPv>
    e2ea:	e25b      	b.n	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
    e2ec:	4601      	mov	r1, r0
    e2ee:	a82a      	add	r0, sp, #168	; 0xa8
    e2f0:	f006 fae2 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e2f4:	4620      	mov	r0, r4
    e2f6:	f005 fd29 	bl	13d4c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    e2fa:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
    e2fc:	4629      	mov	r1, r5
    e2fe:	a830      	add	r0, sp, #192	; 0xc0
    e300:	f006 fada 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e304:	4628      	mov	r0, r5
    e306:	f005 fd27 	bl	13d58 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e30a:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
    e30c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e30e:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
    e310:	2300      	movs	r3, #0
    e312:	e015      	b.n	e340 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
    e314:	f007 fea5 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e318:	f007 fea3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e31c:	a93e      	add	r1, sp, #248	; 0xf8
    e31e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e322:	f851 1c4c 	ldr.w	r1, [r1, #-76]
    e326:	e019      	b.n	e35c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
    e328:	f007 fe9b 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e32c:	f007 fe99 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e330:	a83e      	add	r0, sp, #248	; 0xf8
    e332:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e336:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e33a:	4288      	cmp	r0, r1
    e33c:	d119      	bne.n	e372 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
    e33e:	3301      	adds	r3, #1
    e340:	429c      	cmp	r4, r3
    e342:	dd18      	ble.n	e376 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
    e344:	429a      	cmp	r2, r3
    e346:	d0fa      	beq.n	e33e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
    e348:	2b00      	cmp	r3, #0
    e34a:	dbe3      	blt.n	e314 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
    e34c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    e34e:	428b      	cmp	r3, r1
    e350:	dae2      	bge.n	e318 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e352:	2905      	cmp	r1, #5
    e354:	dde2      	ble.n	e31c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
    e356:	992b      	ldr	r1, [sp, #172]	; 0xac
    e358:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e35c:	2b00      	cmp	r3, #0
    e35e:	dbe3      	blt.n	e328 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
    e360:	9830      	ldr	r0, [sp, #192]	; 0xc0
    e362:	4283      	cmp	r3, r0
    e364:	dae2      	bge.n	e32c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e366:	2805      	cmp	r0, #5
    e368:	dde2      	ble.n	e330 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
    e36a:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e36c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e370:	e7e3      	b.n	e33a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e372:	f007 fe76 	bl	16062 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e376:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e378:	2a00      	cmp	r2, #0
    e37a:	db05      	blt.n	e388 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    e37c:	4282      	cmp	r2, r0
    e37e:	da03      	bge.n	e388 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e380:	2805      	cmp	r0, #5
    e382:	dd03      	ble.n	e38c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
    e384:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    e386:	e002      	b.n	e38e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e388:	f007 fe6b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e38c:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
    e38e:	2300      	movs	r3, #0
  int flat_size = 1;
    e390:	2501      	movs	r5, #1
    e392:	e004      	b.n	e39e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e394:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    e398:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
    e39c:	3301      	adds	r3, #1
    e39e:	4298      	cmp	r0, r3
    e3a0:	dd03      	ble.n	e3aa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e3a2:	429a      	cmp	r2, r3
    e3a4:	d1f6      	bne.n	e394 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
    e3a6:	2101      	movs	r1, #1
    e3a8:	e7f6      	b.n	e398 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
    e3aa:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
    e3ac:	2a00      	cmp	r2, #0
    e3ae:	db2a      	blt.n	e406 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
    e3b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e3b2:	429a      	cmp	r2, r3
    e3b4:	da29      	bge.n	e40a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e3b6:	2b05      	cmp	r3, #5
    e3b8:	dd29      	ble.n	e40e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
    e3ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    e3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e3c0:	2a00      	cmp	r2, #0
    e3c2:	db2a      	blt.n	e41a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
    e3c4:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e3c6:	428a      	cmp	r2, r1
    e3c8:	da29      	bge.n	e41e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e3ca:	2905      	cmp	r1, #5
    e3cc:	dd29      	ble.n	e422 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
    e3ce:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e3d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e3d4:	4299      	cmp	r1, r3
    e3d6:	d12a      	bne.n	e42e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e3d8:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
    e3da:	2a00      	cmp	r2, #0
    e3dc:	db29      	blt.n	e432 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
    e3de:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e3e0:	428a      	cmp	r2, r1
    e3e2:	da28      	bge.n	e436 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e3e4:	2905      	cmp	r1, #5
    e3e6:	dd28      	ble.n	e43a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
    e3e8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e3ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e3ee:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
    e3f0:	4293      	cmp	r3, r2
    e3f2:	dc28      	bgt.n	e446 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
    e3f4:	ab3b      	add	r3, sp, #236	; 0xec
    e3f6:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    e3fa:	f04f 0800 	mov.w	r8, #0
    e3fe:	46c1      	mov	r9, r8
    e400:	46d8      	mov	r8, fp
    e402:	46d3      	mov	fp, sl
    e404:	e1b6      	b.n	e774 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
    e406:	f007 fe2c 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e40a:	f007 fe2a 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e40e:	ab3e      	add	r3, sp, #248	; 0xf8
    e410:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    e414:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    e418:	e7d2      	b.n	e3c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
    e41a:	f007 fe22 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e41e:	f007 fe20 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e422:	a93e      	add	r1, sp, #248	; 0xf8
    e424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    e428:	f851 1c34 	ldr.w	r1, [r1, #-52]
    e42c:	e7d2      	b.n	e3d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e42e:	f007 fe18 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e432:	f007 fe16 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e436:	f007 fe14 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e43a:	a93e      	add	r1, sp, #248	; 0xf8
    e43c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e440:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e444:	e7d3      	b.n	e3ee <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
    e446:	ab3a      	add	r3, sp, #232	; 0xe8
    e448:	e7d5      	b.n	e3f6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e44a:	f9b2 2000 	ldrsh.w	r2, [r2]
    e44e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e452:	3301      	adds	r3, #1
    e454:	455b      	cmp	r3, fp
    e456:	da0c      	bge.n	e472 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e458:	fb0b 3109 	mla	r1, fp, r9, r3
    e45c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
    e460:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
    e464:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
    e468:	428c      	cmp	r4, r1
    e46a:	dbee      	blt.n	e44a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
    e46c:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
    e470:	e7eb      	b.n	e44a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    e472:	fb0b f309 	mul.w	r3, fp, r9
    e476:	9307      	str	r3, [sp, #28]
    e478:	9a06      	ldr	r2, [sp, #24]
    e47a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e47e:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e480:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    e482:	46b2      	mov	sl, r6
    e484:	f8cd 9010 	str.w	r9, [sp, #16]
    e488:	e07c      	b.n	e584 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
    e48a:	426d      	negs	r5, r5
    e48c:	e091      	b.n	e5b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e48e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e492:	d001      	beq.n	e498 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
    e494:	2700      	movs	r7, #0
    e496:	e091      	b.n	e5bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
    e498:	2701      	movs	r7, #1
    e49a:	e08f      	b.n	e5bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e49c:	49c3      	ldr	r1, [pc, #780]	; (e7ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
    e49e:	e0a1      	b.n	e5e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e4a0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e4a2:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e4a6:	2f00      	cmp	r7, #0
    e4a8:	f040 80ae 	bne.w	e608 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
    e4ac:	2d00      	cmp	r5, #0
    e4ae:	f2c0 80ae 	blt.w	e60e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
    e4b2:	2d1f      	cmp	r5, #31
    e4b4:	f300 80b2 	bgt.w	e61c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e4b8:	2701      	movs	r7, #1
    e4ba:	fa07 f005 	lsl.w	r0, r7, r5
    e4be:	3801      	subs	r0, #1
    e4c0:	f005 fc25 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e4c4:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e4c6:	2000      	movs	r0, #0
    e4c8:	f005 fc21 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e4cc:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
    e4ce:	4638      	mov	r0, r7
    e4d0:	f005 fc1d 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e4d4:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
    e4d6:	4649      	mov	r1, r9
    e4d8:	4620      	mov	r0, r4
    e4da:	f005 fc19 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e4de:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e4e0:	4639      	mov	r1, r7
    e4e2:	4648      	mov	r0, r9
    e4e4:	f005 fc16 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e4e8:	4681      	mov	r9, r0
    e4ea:	9908      	ldr	r1, [sp, #32]
    e4ec:	4620      	mov	r0, r4
    e4ee:	f005 fc1d 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e4f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e4f4:	4639      	mov	r1, r7
    e4f6:	f005 fc0b 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e4fa:	4601      	mov	r1, r0
    e4fc:	4648      	mov	r0, r9
    e4fe:	f005 fc0b 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e502:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    e504:	4629      	mov	r1, r5
    e506:	4620      	mov	r0, r4
    e508:	f005 fc04 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e50c:	4604      	mov	r4, r0
    e50e:	4649      	mov	r1, r9
    e510:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e512:	f005 fc13 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e516:	4639      	mov	r1, r7
    e518:	f005 fbfa 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e51c:	4601      	mov	r1, r0
    e51e:	4620      	mov	r0, r4
    e520:	f005 fbfa 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
    e524:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    e528:	307f      	adds	r0, #127	; 0x7f
    e52a:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    e52c:	4ba0      	ldr	r3, [pc, #640]	; (e7b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e52e:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
    e530:	4298      	cmp	r0, r3
    e532:	db7a      	blt.n	e62a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
    e534:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
    e536:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e53a:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
    e53c:	681a      	ldr	r2, [r3, #0]
    e53e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e542:	da74      	bge.n	e62e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
    e544:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    e548:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e54c:	11da      	asrs	r2, r3, #7
    e54e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    e552:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
    e554:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    e558:	d26b      	bcs.n	e632 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
    e55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
    e55e:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e562:	3201      	adds	r2, #1
    e564:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    e568:	1a52      	subs	r2, r2, r1
    e56a:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e56c:	fb03 f302 	mul.w	r3, r3, r2
    e570:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e572:	f343 13cf 	sbfx	r3, r3, #7, #16
    e576:	440b      	add	r3, r1
    e578:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
    e57a:	9a03      	ldr	r2, [sp, #12]
    e57c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e57e:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    e580:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
    e582:	3601      	adds	r6, #1
    e584:	455e      	cmp	r6, fp
    e586:	da5b      	bge.n	e640 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
    e588:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
    e58c:	0072      	lsls	r2, r6, #1
    e58e:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    e590:	9a04      	ldr	r2, [sp, #16]
    e592:	fb0b 6202 	mla	r2, fp, r2, r6
    e596:	9905      	ldr	r1, [sp, #20]
    e598:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
    e59c:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
    e59e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e5a2:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
    e5a6:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    e5aa:	2d00      	cmp	r5, #0
    e5ac:	f77f af6d 	ble.w	e48a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
    e5b0:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    e5b2:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e5b4:	4293      	cmp	r3, r2
    e5b6:	f43f af6a 	beq.w	e48e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
    e5ba:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    e5bc:	4610      	mov	r0, r2
    e5be:	17d1      	asrs	r1, r2, #31
    e5c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
    e5c4:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    e5c6:	fb02 f001 	mul.w	r0, r2, r1
    e5ca:	9909      	ldr	r1, [sp, #36]	; 0x24
    e5cc:	fb03 0101 	mla	r1, r3, r1, r0
    e5d0:	fba2 2303 	umull	r2, r3, r2, r3
    e5d4:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e5d6:	2a00      	cmp	r2, #0
    e5d8:	f173 0100 	sbcs.w	r1, r3, #0
    e5dc:	f6ff af5e 	blt.w	e49c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
    e5e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e5e4:	1852      	adds	r2, r2, r1
    e5e6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e5ea:	4611      	mov	r1, r2
    e5ec:	461c      	mov	r4, r3
    e5ee:	2a00      	cmp	r2, #0
    e5f0:	f173 0000 	sbcs.w	r0, r3, #0
    e5f4:	f6bf af54 	bge.w	e4a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
    e5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e5fc:	1851      	adds	r1, r2, r1
    e5fe:	f04f 0400 	mov.w	r4, #0
    e602:	eb43 0404 	adc.w	r4, r3, r4
    e606:	e74b      	b.n	e4a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e608:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e60c:	e74e      	b.n	e4ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
    e60e:	4b69      	ldr	r3, [pc, #420]	; (e7b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
    e610:	4a69      	ldr	r2, [pc, #420]	; (e7b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e612:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e616:	4869      	ldr	r0, [pc, #420]	; (e7bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e618:	f002 f952 	bl	108c0 <__assert_func>
  assert(exponent <= 31);
    e61c:	4b68      	ldr	r3, [pc, #416]	; (e7c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
    e61e:	4a66      	ldr	r2, [pc, #408]	; (e7b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e620:	f240 1167 	movw	r1, #359	; 0x167
    e624:	4865      	ldr	r0, [pc, #404]	; (e7bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e626:	f002 f94b 	bl	108c0 <__assert_func>
	return __b;
    e62a:	ab3d      	add	r3, sp, #244	; 0xf4
    e62c:	e783      	b.n	e536 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
    e62e:	ab3c      	add	r3, sp, #240	; 0xf0
    e630:	e788      	b.n	e544 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
    e632:	4b64      	ldr	r3, [pc, #400]	; (e7c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e634:	4a64      	ldr	r2, [pc, #400]	; (e7c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e636:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e63a:	4864      	ldr	r0, [pc, #400]	; (e7cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e63c:	f002 f940 	bl	108c0 <__assert_func>
    e640:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    e644:	4650      	mov	r0, sl
    e646:	f006 f961 	bl	1490c <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e64a:	4652      	mov	r2, sl
    e64c:	17d3      	asrs	r3, r2, #31
    e64e:	b2c1      	uxtb	r1, r0
    e650:	1e4d      	subs	r5, r1, #1
    e652:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
    e656:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
    e65a:	fa03 f205 	lsl.w	r2, r3, r5
    e65e:	fa0a f404 	lsl.w	r4, sl, r4
    e662:	4322      	orrs	r2, r4
    e664:	fa2a f101 	lsr.w	r1, sl, r1
    e668:	430a      	orrs	r2, r1
    e66a:	fa0a f305 	lsl.w	r3, sl, r5
    e66e:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
    e672:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
    e676:	0b9b      	lsrs	r3, r3, #14
    e678:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    e67c:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
    e680:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    e682:	4a4b      	ldr	r2, [pc, #300]	; (e7b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e684:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
    e686:	4293      	cmp	r3, r2
    e688:	db25      	blt.n	e6d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
    e68a:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
    e68c:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e690:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
    e692:	681a      	ldr	r2, [r3, #0]
    e694:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e698:	da1f      	bge.n	e6da <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
    e69a:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
    e69e:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e6a2:	11d3      	asrs	r3, r2, #7
    e6a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    e6a8:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
    e6aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e6ae:	d216      	bcs.n	e6de <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
    e6b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
    e6b4:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e6b8:	3301      	adds	r3, #1
    e6ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
    e6be:	1b1b      	subs	r3, r3, r4
    e6c0:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e6c2:	fb02 f303 	mul.w	r3, r2, r3
    e6c6:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e6c8:	f343 13cf 	sbfx	r3, r3, #7, #16
    e6cc:	18e2      	adds	r2, r4, r3
    e6ce:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
    e6d0:	2100      	movs	r1, #0
    e6d2:	465f      	mov	r7, fp
    e6d4:	e01e      	b.n	e714 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
    e6d6:	ab39      	add	r3, sp, #228	; 0xe4
    e6d8:	e7d8      	b.n	e68c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
    e6da:	ab38      	add	r3, sp, #224	; 0xe0
    e6dc:	e7dd      	b.n	e69a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
    e6de:	4b39      	ldr	r3, [pc, #228]	; (e7c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e6e0:	4a39      	ldr	r2, [pc, #228]	; (e7c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e6e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e6e6:	4839      	ldr	r0, [pc, #228]	; (e7cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e6e8:	f002 f8ea 	bl	108c0 <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e6ec:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    e6ee:	2400      	movs	r4, #0
    e6f0:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
    e6f2:	42a3      	cmp	r3, r4
    e6f4:	db37      	blt.n	e766 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
    e6f6:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
    e6f8:	f647 74ff 	movw	r4, #32767	; 0x7fff
    e6fc:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
    e6fe:	681c      	ldr	r4, [r3, #0]
    e700:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e704:	da31      	bge.n	e76a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
    e706:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
    e708:	9b07      	ldr	r3, [sp, #28]
    e70a:	440b      	add	r3, r1
    e70c:	9d06      	ldr	r5, [sp, #24]
    e70e:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e712:	3101      	adds	r1, #1
    e714:	42b9      	cmp	r1, r7
    e716:	da2a      	bge.n	e76e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
    e718:	f1c0 031f 	rsb	r3, r0, #31
    e71c:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    e71e:	1e5c      	subs	r4, r3, #1
    e720:	2601      	movs	r6, #1
    e722:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e724:	9c03      	ldr	r4, [sp, #12]
    e726:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
    e72a:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e72c:	fa0f fa82 	sxth.w	sl, r2
    e730:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e734:	fb04 fc0b 	mul.w	ip, r4, fp
    e738:	fb02 cc05 	mla	ip, r2, r5, ip
    e73c:	fba4 450a 	umull	r4, r5, r4, sl
    e740:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e742:	19a4      	adds	r4, r4, r6
    e744:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
    e748:	f1c3 0c20 	rsb	ip, r3, #32
    e74c:	f1b3 0620 	subs.w	r6, r3, #32
    e750:	fa24 f303 	lsr.w	r3, r4, r3
    e754:	fa05 fc0c 	lsl.w	ip, r5, ip
    e758:	ea43 030c 	orr.w	r3, r3, ip
    e75c:	d4c6      	bmi.n	e6ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
    e75e:	fa45 f606 	asr.w	r6, r5, r6
    e762:	4333      	orrs	r3, r6
    e764:	e7c2      	b.n	e6ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
    e766:	ab37      	add	r3, sp, #220	; 0xdc
    e768:	e7c6      	b.n	e6f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
    e76a:	ab36      	add	r3, sp, #216	; 0xd8
    e76c:	e7cb      	b.n	e706 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
    e76e:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
    e770:	f109 0901 	add.w	r9, r9, #1
    e774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e776:	4599      	cmp	r9, r3
    e778:	da06      	bge.n	e788 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    e77a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e77e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e782:	2300      	movs	r3, #0
    e784:	9805      	ldr	r0, [sp, #20]
    e786:	e665      	b.n	e454 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
    e788:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    e78a:	2b05      	cmp	r3, #5
    e78c:	dd03      	ble.n	e796 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
    e78e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e790:	b108      	cbz	r0, e796 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
    e792:	f007 fc51 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e796:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e798:	2b05      	cmp	r3, #5
    e79a:	dd03      	ble.n	e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e79c:	982b      	ldr	r0, [sp, #172]	; 0xac
    e79e:	b108      	cbz	r0, e7a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e7a0:	f007 fc4a 	bl	16038 <_ZdaPv>
}
    e7a4:	b03f      	add	sp, #252	; 0xfc
    e7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7aa:	bf00      	nop
    e7ac:	c0000001 	.word	0xc0000001
    e7b0:	ffff8000 	.word	0xffff8000
    e7b4:	0006b180 	.word	0x0006b180
    e7b8:	0006b190 	.word	0x0006b190
    e7bc:	0006b1e8 	.word	0x0006b1e8
    e7c0:	0006b244 	.word	0x0006b244
    e7c4:	0006b874 	.word	0x0006b874
    e7c8:	0006b8a0 	.word	0x0006b8a0
    e7cc:	0006b0c4 	.word	0x0006b0c4

0000e7d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7d4:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
    e7d6:	2800      	cmp	r0, #0
    e7d8:	d030      	beq.n	e83c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    e7da:	460c      	mov	r4, r1
    e7dc:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
    e7de:	2900      	cmp	r1, #0
    e7e0:	d02e      	beq.n	e840 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e7e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e7e4:	680a      	ldr	r2, [r1, #0]
    e7e6:	6851      	ldr	r1, [r2, #4]
    e7e8:	4798      	blx	r3
    e7ea:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    e7ec:	b356      	cbz	r6, e844 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
    e7ee:	b35c      	cbz	r4, e848 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e7f0:	6d73      	ldr	r3, [r6, #84]	; 0x54
    e7f2:	6862      	ldr	r2, [r4, #4]
    e7f4:	6851      	ldr	r1, [r2, #4]
    e7f6:	4630      	mov	r0, r6
    e7f8:	4798      	blx	r3
    e7fa:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e7fc:	6924      	ldr	r4, [r4, #16]
    e7fe:	b32c      	cbz	r4, e84c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
    e800:	ad04      	add	r5, sp, #16
    e802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e80a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e80c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e80e:	e894 0003 	ldmia.w	r4, {r0, r1}
    e812:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
    e816:	7a38      	ldrb	r0, [r7, #8]
    e818:	2807      	cmp	r0, #7
    e81a:	f000 811a 	beq.w	ea52 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e81e:	2809      	cmp	r0, #9
    e820:	f000 8117 	beq.w	ea52 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e824:	2801      	cmp	r0, #1
    e826:	d013      	beq.n	e850 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e828:	6974      	ldr	r4, [r6, #20]
    e82a:	f7fa fcd7 	bl	91dc <TfLiteTypeGetName>
    e82e:	4602      	mov	r2, r0
    e830:	7a3b      	ldrb	r3, [r7, #8]
    e832:	498c      	ldr	r1, [pc, #560]	; (ea64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    e834:	4630      	mov	r0, r6
    e836:	47a0      	blx	r4
      return kTfLiteError;
    e838:	2001      	movs	r0, #1
    e83a:	e110      	b.n	ea5e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
    e83c:	f007 fc11 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    e840:	f007 fc0f 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
    e844:	f007 fc0d 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
    e848:	f007 fc0b 	bl	16062 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e84c:	f007 fc09 	bl	16062 <abort>
          op_data, tflite::micro::GetTensorShape(input),
    e850:	4639      	mov	r1, r7
    e852:	a812      	add	r0, sp, #72	; 0x48
    e854:	f006 f830 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e858:	4638      	mov	r0, r7
    e85a:	f005 fa44 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e85e:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
    e860:	4649      	mov	r1, r9
    e862:	a818      	add	r0, sp, #96	; 0x60
    e864:	f006 f828 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e868:	4648      	mov	r0, r9
    e86a:	f005 fa42 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e86e:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
    e870:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e872:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
    e874:	2300      	movs	r3, #0
    e876:	e013      	b.n	e8a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
    e878:	f007 fbf3 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e87c:	f007 fbf1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e880:	aa20      	add	r2, sp, #128	; 0x80
    e882:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e886:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e88a:	e017      	b.n	e8bc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
    e88c:	f007 fbe9 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e890:	f007 fbe7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e894:	9919      	ldr	r1, [sp, #100]	; 0x64
    e896:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e89a:	4291      	cmp	r1, r2
    e89c:	d11b      	bne.n	e8d6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
    e89e:	3301      	adds	r3, #1
    e8a0:	4298      	cmp	r0, r3
    e8a2:	dd1a      	ble.n	e8da <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
    e8a4:	429c      	cmp	r4, r3
    e8a6:	d0fa      	beq.n	e89e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	dbe5      	blt.n	e878 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    e8ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e8ae:	4293      	cmp	r3, r2
    e8b0:	dae4      	bge.n	e87c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8b2:	2a05      	cmp	r2, #5
    e8b4:	dde4      	ble.n	e880 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    e8b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e8b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e8bc:	2b00      	cmp	r3, #0
    e8be:	dbe5      	blt.n	e88c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
    e8c0:	9918      	ldr	r1, [sp, #96]	; 0x60
    e8c2:	428b      	cmp	r3, r1
    e8c4:	dae4      	bge.n	e890 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e8c6:	2905      	cmp	r1, #5
    e8c8:	dce4      	bgt.n	e894 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    e8ca:	a920      	add	r1, sp, #128	; 0x80
    e8cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e8d0:	f851 1c1c 	ldr.w	r1, [r1, #-28]
    e8d4:	e7e1      	b.n	e89a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e8d6:	f007 fbc4 	bl	16062 <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e8da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e8dc:	2c00      	cmp	r4, #0
    e8de:	db08      	blt.n	e8f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    e8e0:	429c      	cmp	r4, r3
    e8e2:	da06      	bge.n	e8f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e8e4:	2b05      	cmp	r3, #5
    e8e6:	dd06      	ble.n	e8f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
    e8e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
    e8ea:	2200      	movs	r2, #0
  int flat_size = 1;
    e8ec:	f04f 0a01 	mov.w	sl, #1
    e8f0:	e007      	b.n	e902 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e8f2:	f007 fbb6 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e8f6:	a813      	add	r0, sp, #76	; 0x4c
    e8f8:	e7f7      	b.n	e8ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e8fa:	2101      	movs	r1, #1
    e8fc:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
    e900:	3201      	adds	r2, #1
    e902:	4293      	cmp	r3, r2
    e904:	dd04      	ble.n	e910 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e906:	4294      	cmp	r4, r2
    e908:	d0f7      	beq.n	e8fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
    e90a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    e90e:	e7f5      	b.n	e8fc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
    e910:	2c00      	cmp	r4, #0
    e912:	db25      	blt.n	e960 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
    e914:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e916:	429c      	cmp	r4, r3
    e918:	da24      	bge.n	e964 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e91a:	2b05      	cmp	r3, #5
    e91c:	dd24      	ble.n	e968 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
    e91e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e920:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e924:	2c00      	cmp	r4, #0
    e926:	db25      	blt.n	e974 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
    e928:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e92a:	429c      	cmp	r4, r3
    e92c:	da24      	bge.n	e978 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e92e:	2b05      	cmp	r3, #5
    e930:	dd24      	ble.n	e97c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    e932:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e934:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e938:	4293      	cmp	r3, r2
    e93a:	d125      	bne.n	e988 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e93c:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
    e93e:	2c00      	cmp	r4, #0
    e940:	db24      	blt.n	e98c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
    e942:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e944:	429c      	cmp	r4, r3
    e946:	da23      	bge.n	e990 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e948:	2b05      	cmp	r3, #5
    e94a:	dd23      	ble.n	e994 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    e94c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e94e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e952:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
    e954:	429a      	cmp	r2, r3
    e956:	dc23      	bgt.n	e9a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
    e958:	ab1f      	add	r3, sp, #124	; 0x7c
    e95a:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
    e95c:	2400      	movs	r4, #0
    e95e:	e061      	b.n	ea24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
    e960:	f007 fb7f 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e964:	f007 fb7d 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e968:	ab20      	add	r3, sp, #128	; 0x80
    e96a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e96e:	f853 2c34 	ldr.w	r2, [r3, #-52]
    e972:	e7d7      	b.n	e924 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
    e974:	f007 fb75 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e978:	f007 fb73 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e97c:	ab20      	add	r3, sp, #128	; 0x80
    e97e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e982:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    e986:	e7d7      	b.n	e938 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e988:	f007 fb6b 	bl	16062 <abort>
    TFLITE_DCHECK_GE(i, 0);
    e98c:	f007 fb69 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
    e990:	f007 fb67 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e994:	ab20      	add	r3, sp, #128	; 0x80
    e996:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e99a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    e99e:	e7d8      	b.n	e952 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
    e9a0:	ab1e      	add	r3, sp, #120	; 0x78
    e9a2:	e7da      	b.n	e95a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
    e9a4:	683b      	ldr	r3, [r7, #0]
    e9a6:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e9a8:	3601      	adds	r6, #1
    e9aa:	42ae      	cmp	r6, r5
    e9ac:	da0c      	bge.n	e9c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
    e9ae:	fb05 6304 	mla	r3, r5, r4, r6
    e9b2:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
    e9b6:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    e9ba:	9803      	ldr	r0, [sp, #12]
    e9bc:	f7f2 fb46 	bl	104c <__aeabi_fcmplt>
    e9c0:	2800      	cmp	r0, #0
    e9c2:	d1ef      	bne.n	e9a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
    e9c4:	af03      	add	r7, sp, #12
    e9c6:	e7ed      	b.n	e9a4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
    e9c8:	2700      	movs	r7, #0
    float sum = 0.f;
    e9ca:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
    e9cc:	42af      	cmp	r7, r5
    e9ce:	da1a      	bge.n	ea06 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    e9d0:	fb05 7b04 	mla	fp, r5, r4, r7
    e9d4:	9903      	ldr	r1, [sp, #12]
    e9d6:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
    e9da:	f7f2 f88f 	bl	afc <__aeabi_fsub>
    e9de:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
    e9e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e9e4:	f7f2 f836 	bl	a54 <__aeabi_d2f>
    e9e8:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    e9ea:	9801      	ldr	r0, [sp, #4]
    e9ec:	f7f2 f990 	bl	d10 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    e9f0:	f001 fdce 	bl	10590 <expf>
    e9f4:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
    e9f6:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
    e9fa:	4630      	mov	r0, r6
    e9fc:	f7f2 f880 	bl	b00 <__addsf3>
    ea00:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
    ea02:	3701      	adds	r7, #1
    ea04:	e7e2      	b.n	e9cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
    ea06:	2700      	movs	r7, #0
    ea08:	42af      	cmp	r7, r5
    ea0a:	da0a      	bge.n	ea22 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    ea0c:	fb05 7b04 	mla	fp, r5, r4, r7
    ea10:	4631      	mov	r1, r6
    ea12:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
    ea16:	f7f2 fa2f 	bl	e78 <__aeabi_fdiv>
    ea1a:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
    ea1e:	3701      	adds	r7, #1
    ea20:	e7f2      	b.n	ea08 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
    ea22:	3401      	adds	r4, #1
    ea24:	4554      	cmp	r4, sl
    ea26:	da04      	bge.n	ea32 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
    ea28:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    ea2c:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    ea2e:	2600      	movs	r6, #0
    ea30:	e7bb      	b.n	e9aa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
    ea32:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ea34:	2b05      	cmp	r3, #5
    ea36:	dd03      	ble.n	ea40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
    ea38:	9819      	ldr	r0, [sp, #100]	; 0x64
    ea3a:	b108      	cbz	r0, ea40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
    ea3c:	f007 fafc 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    ea40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea42:	2b05      	cmp	r3, #5
    ea44:	dd03      	ble.n	ea4e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
    ea46:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ea48:	b108      	cbz	r0, ea4e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    ea4a:	f007 faf5 	bl	16038 <_ZdaPv>
      return kTfLiteOk;
    ea4e:	2000      	movs	r0, #0
    ea50:	e005      	b.n	ea5e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
    ea52:	aa04      	add	r2, sp, #16
    ea54:	4649      	mov	r1, r9
    ea56:	4638      	mov	r0, r7
    ea58:	f7ff fbec 	bl	e234 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
    ea5c:	2000      	movs	r0, #0
}
    ea5e:	b021      	add	sp, #132	; 0x84
    ea60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea64:	0006b338 	.word	0x0006b338

0000ea68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea6c:	b097      	sub	sp, #92	; 0x5c
    ea6e:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    ea70:	680b      	ldr	r3, [r1, #0]
    ea72:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    ea74:	2b01      	cmp	r3, #1
    ea76:	d00f      	beq.n	ea98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
    ea78:	6946      	ldr	r6, [r0, #20]
    ea7a:	2501      	movs	r5, #1
    ea7c:	9503      	str	r5, [sp, #12]
    ea7e:	9302      	str	r3, [sp, #8]
    ea80:	4ba9      	ldr	r3, [pc, #676]	; (ed28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    ea82:	9301      	str	r3, [sp, #4]
    ea84:	4ba9      	ldr	r3, [pc, #676]	; (ed2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    ea86:	9300      	str	r3, [sp, #0]
    ea88:	235d      	movs	r3, #93	; 0x5d
    ea8a:	4aa9      	ldr	r2, [pc, #676]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ea8c:	49a9      	ldr	r1, [pc, #676]	; (ed34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ea8e:	47b0      	blx	r6
    ea90:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    ea92:	b017      	add	sp, #92	; 0x5c
    ea94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea98:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    ea9a:	684b      	ldr	r3, [r1, #4]
    ea9c:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    ea9e:	2b01      	cmp	r3, #1
    eaa0:	d00d      	beq.n	eabe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
    eaa2:	6946      	ldr	r6, [r0, #20]
    eaa4:	2501      	movs	r5, #1
    eaa6:	9503      	str	r5, [sp, #12]
    eaa8:	9302      	str	r3, [sp, #8]
    eaaa:	4b9f      	ldr	r3, [pc, #636]	; (ed28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    eaac:	9301      	str	r3, [sp, #4]
    eaae:	4ba2      	ldr	r3, [pc, #648]	; (ed38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
    eab0:	9300      	str	r3, [sp, #0]
    eab2:	235e      	movs	r3, #94	; 0x5e
    eab4:	4a9e      	ldr	r2, [pc, #632]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eab6:	499f      	ldr	r1, [pc, #636]	; (ed34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    eab8:	47b0      	blx	r6
    eaba:	4628      	mov	r0, r5
    eabc:	e7e9      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
    eabe:	2200      	movs	r2, #0
    eac0:	f005 f852 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    eac4:	4606      	mov	r6, r0
    eac6:	b340      	cbz	r0, eb1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    eac8:	6883      	ldr	r3, [r0, #8]
    eaca:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    eacc:	2b00      	cmp	r3, #0
    eace:	dd2e      	ble.n	eb2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
    ead0:	2200      	movs	r2, #0
    ead2:	4629      	mov	r1, r5
    ead4:	4620      	mov	r0, r4
    ead6:	f005 f866 	bl	13ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    eada:	9005      	str	r0, [sp, #20]
    eadc:	2800      	cmp	r0, #0
    eade:	d030      	beq.n	eb42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    eae0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    eae4:	f1b9 0f00 	cmp.w	r9, #0
    eae8:	d035      	beq.n	eb56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
    eaea:	7833      	ldrb	r3, [r6, #0]
    eaec:	2b07      	cmp	r3, #7
    eaee:	d03c      	beq.n	eb6a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
    eaf0:	9b05      	ldr	r3, [sp, #20]
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	2b07      	cmp	r3, #7
    eaf6:	d05d      	beq.n	ebb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    eaf8:	7832      	ldrb	r2, [r6, #0]
    eafa:	4293      	cmp	r3, r2
    eafc:	d069      	beq.n	ebd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    eafe:	6965      	ldr	r5, [r4, #20]
    eb00:	9303      	str	r3, [sp, #12]
    eb02:	9202      	str	r2, [sp, #8]
    eb04:	4b8d      	ldr	r3, [pc, #564]	; (ed3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    eb06:	9301      	str	r3, [sp, #4]
    eb08:	4b8d      	ldr	r3, [pc, #564]	; (ed40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    eb0a:	9300      	str	r3, [sp, #0]
    eb0c:	2378      	movs	r3, #120	; 0x78
    eb0e:	4a88      	ldr	r2, [pc, #544]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb10:	4988      	ldr	r1, [pc, #544]	; (ed34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    eb12:	4620      	mov	r0, r4
    eb14:	47a8      	blx	r5
    eb16:	2001      	movs	r0, #1
    eb18:	e7bb      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
    eb1a:	6965      	ldr	r5, [r4, #20]
    eb1c:	4b89      	ldr	r3, [pc, #548]	; (ed44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
    eb1e:	9300      	str	r3, [sp, #0]
    eb20:	2360      	movs	r3, #96	; 0x60
    eb22:	4a83      	ldr	r2, [pc, #524]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb24:	4988      	ldr	r1, [pc, #544]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    eb26:	4620      	mov	r0, r4
    eb28:	47a8      	blx	r5
    eb2a:	2001      	movs	r0, #1
    eb2c:	e7b1      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    eb2e:	6965      	ldr	r5, [r4, #20]
    eb30:	4b86      	ldr	r3, [pc, #536]	; (ed4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    eb32:	9300      	str	r3, [sp, #0]
    eb34:	2361      	movs	r3, #97	; 0x61
    eb36:	4a7e      	ldr	r2, [pc, #504]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb38:	4983      	ldr	r1, [pc, #524]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    eb3a:	4620      	mov	r0, r4
    eb3c:	47a8      	blx	r5
    eb3e:	2001      	movs	r0, #1
    eb40:	e7a7      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
    eb42:	6965      	ldr	r5, [r4, #20]
    eb44:	4b82      	ldr	r3, [pc, #520]	; (ed50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    eb46:	9300      	str	r3, [sp, #0]
    eb48:	2363      	movs	r3, #99	; 0x63
    eb4a:	4a79      	ldr	r2, [pc, #484]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb4c:	497e      	ldr	r1, [pc, #504]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    eb4e:	4620      	mov	r0, r4
    eb50:	47a8      	blx	r5
    eb52:	2001      	movs	r0, #1
    eb54:	e79d      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    eb56:	6965      	ldr	r5, [r4, #20]
    eb58:	4b7e      	ldr	r3, [pc, #504]	; (ed54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    eb5a:	9300      	str	r3, [sp, #0]
    eb5c:	2365      	movs	r3, #101	; 0x65
    eb5e:	4a74      	ldr	r2, [pc, #464]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb60:	4979      	ldr	r1, [pc, #484]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    eb62:	4620      	mov	r0, r4
    eb64:	47a8      	blx	r5
    eb66:	2001      	movs	r0, #1
    eb68:	e793      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    eb6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    eb6c:	f240 4102 	movw	r1, #1026	; 0x402
    eb70:	4620      	mov	r0, r4
    eb72:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    eb74:	b150      	cbz	r0, eb8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    eb76:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    eb7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    eb7c:	f240 4102 	movw	r1, #1026	; 0x402
    eb80:	4620      	mov	r0, r4
    eb82:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    eb84:	b160      	cbz	r0, eba0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
    eb86:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    eb8a:	e7b1      	b.n	eaf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    eb8c:	6965      	ldr	r5, [r4, #20]
    eb8e:	4b72      	ldr	r3, [pc, #456]	; (ed58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    eb90:	9300      	str	r3, [sp, #0]
    eb92:	236b      	movs	r3, #107	; 0x6b
    eb94:	4a66      	ldr	r2, [pc, #408]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb96:	496c      	ldr	r1, [pc, #432]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    eb98:	4620      	mov	r0, r4
    eb9a:	47a8      	blx	r5
    eb9c:	2001      	movs	r0, #1
    eb9e:	e778      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    eba0:	6965      	ldr	r5, [r4, #20]
    eba2:	4b6e      	ldr	r3, [pc, #440]	; (ed5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    eba4:	9300      	str	r3, [sp, #0]
    eba6:	236f      	movs	r3, #111	; 0x6f
    eba8:	4a61      	ldr	r2, [pc, #388]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ebaa:	4967      	ldr	r1, [pc, #412]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ebac:	4620      	mov	r0, r4
    ebae:	47a8      	blx	r5
    ebb0:	2001      	movs	r0, #1
    ebb2:	e76e      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
    ebb4:	7833      	ldrb	r3, [r6, #0]
    ebb6:	2b09      	cmp	r3, #9
    ebb8:	d00b      	beq.n	ebd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ebba:	2b07      	cmp	r3, #7
    ebbc:	d009      	beq.n	ebd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ebbe:	6965      	ldr	r5, [r4, #20]
    ebc0:	4b67      	ldr	r3, [pc, #412]	; (ed60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    ebc2:	9300      	str	r3, [sp, #0]
    ebc4:	2375      	movs	r3, #117	; 0x75
    ebc6:	4a5a      	ldr	r2, [pc, #360]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ebc8:	495f      	ldr	r1, [pc, #380]	; (ed48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ebca:	4620      	mov	r0, r4
    ebcc:	47a8      	blx	r5
    ebce:	2001      	movs	r0, #1
    ebd0:	e75f      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
    ebd2:	7833      	ldrb	r3, [r6, #0]
    ebd4:	2b07      	cmp	r3, #7
    ebd6:	f040 81b7 	bne.w	ef48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    ebda:	9b05      	ldr	r3, [sp, #20]
    ebdc:	f8d3 b010 	ldr.w	fp, [r3, #16]
    ebe0:	f1bb 0f00 	cmp.w	fp, #0
    ebe4:	d00f      	beq.n	ec06 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    ebe6:	6965      	ldr	r5, [r4, #20]
    ebe8:	2300      	movs	r3, #0
    ebea:	9303      	str	r3, [sp, #12]
    ebec:	f8cd b008 	str.w	fp, [sp, #8]
    ebf0:	4b5c      	ldr	r3, [pc, #368]	; (ed64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    ebf2:	9301      	str	r3, [sp, #4]
    ebf4:	4b5c      	ldr	r3, [pc, #368]	; (ed68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    ebf6:	9300      	str	r3, [sp, #0]
    ebf8:	237d      	movs	r3, #125	; 0x7d
    ebfa:	4a4d      	ldr	r2, [pc, #308]	; (ed30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ebfc:	494d      	ldr	r1, [pc, #308]	; (ed34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ebfe:	4620      	mov	r0, r4
    ec00:	47a8      	blx	r5
    ec02:	2001      	movs	r0, #1
    ec04:	e745      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    ec06:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    ec0a:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
    ec0c:	465f      	mov	r7, fp
    ec0e:	f8cd 901c 	str.w	r9, [sp, #28]
    ec12:	f8cd b020 	str.w	fp, [sp, #32]
    ec16:	469b      	mov	fp, r3
    ec18:	9609      	str	r6, [sp, #36]	; 0x24
    ec1a:	e007      	b.n	ec2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
    ec1c:	ae14      	add	r6, sp, #80	; 0x50
    ec1e:	e079      	b.n	ed14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ec20:	6830      	ldr	r0, [r6, #0]
    ec22:	f7f2 fa3b 	bl	109c <__aeabi_f2iz>
    ec26:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    ec2a:	4657      	mov	r7, sl
    ec2c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    ec30:	f280 80a4 	bge.w	ed7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    ec34:	4638      	mov	r0, r7
    ec36:	f7f2 f817 	bl	c68 <__aeabi_i2f>
    ec3a:	494c      	ldr	r1, [pc, #304]	; (ed6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ec3c:	f7f2 f868 	bl	d10 <__aeabi_fmul>
    ec40:	494b      	ldr	r1, [pc, #300]	; (ed70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ec42:	f7f1 ff5b 	bl	afc <__aeabi_fsub>
    ec46:	4606      	mov	r6, r0
    ec48:	f006 ff8b 	bl	15b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ec4c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec50:	f7f2 f85e 	bl	d10 <__aeabi_fmul>
    ec54:	f7f1 fbe4 	bl	420 <__aeabi_f2d>
    ec58:	f001 fc52 	bl	10500 <round>
    ec5c:	f7f1 fefa 	bl	a54 <__aeabi_d2f>
    ec60:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ec62:	f107 0a01 	add.w	sl, r7, #1
    ec66:	4650      	mov	r0, sl
    ec68:	f7f1 fffe 	bl	c68 <__aeabi_i2f>
    ec6c:	493f      	ldr	r1, [pc, #252]	; (ed6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ec6e:	f7f2 f84f 	bl	d10 <__aeabi_fmul>
    ec72:	493f      	ldr	r1, [pc, #252]	; (ed70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ec74:	f7f1 ff42 	bl	afc <__aeabi_fsub>
    ec78:	f006 ff73 	bl	15b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ec7c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec80:	f7f2 f846 	bl	d10 <__aeabi_fmul>
    ec84:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ec86:	4630      	mov	r0, r6
    ec88:	f006 ff6b 	bl	15b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ec8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ec90:	f7f2 f83e 	bl	d10 <__aeabi_fmul>
    ec94:	f7f1 fbc4 	bl	420 <__aeabi_f2d>
    ec98:	f001 fc32 	bl	10500 <round>
    ec9c:	f7f1 feda 	bl	a54 <__aeabi_d2f>
    eca0:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    eca2:	4648      	mov	r0, r9
    eca4:	f7f1 ff2c 	bl	b00 <__addsf3>
    eca8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ecac:	f7f2 f830 	bl	d10 <__aeabi_fmul>
    ecb0:	f7f1 fbb6 	bl	420 <__aeabi_f2d>
    ecb4:	f001 fc24 	bl	10500 <round>
    ecb8:	f7f1 fecc 	bl	a54 <__aeabi_d2f>
    ecbc:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    ecbe:	492d      	ldr	r1, [pc, #180]	; (ed74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    ecc0:	4630      	mov	r0, r6
    ecc2:	f7f1 ff1d 	bl	b00 <__addsf3>
    ecc6:	f006 ff4c 	bl	15b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ecca:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ecce:	f7f2 f81f 	bl	d10 <__aeabi_fmul>
    ecd2:	f7f1 fba5 	bl	420 <__aeabi_f2d>
    ecd6:	f001 fc13 	bl	10500 <round>
    ecda:	f7f1 febb 	bl	a54 <__aeabi_d2f>
    ecde:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    ece0:	4648      	mov	r0, r9
    ece2:	f7f1 ff0b 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    ece6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ecea:	f7f2 f811 	bl	d10 <__aeabi_fmul>
    ecee:	f7f1 fb97 	bl	420 <__aeabi_f2d>
    ecf2:	f001 fc05 	bl	10500 <round>
    ecf6:	f7f1 fead 	bl	a54 <__aeabi_d2f>
    ecfa:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ecfc:	4640      	mov	r0, r8
    ecfe:	f7f1 fefd 	bl	afc <__aeabi_fsub>
    ed02:	9015      	str	r0, [sp, #84]	; 0x54
    ed04:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ed08:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
    ed0a:	f7f2 f99f 	bl	104c <__aeabi_fcmplt>
    ed0e:	2800      	cmp	r0, #0
    ed10:	d184      	bne.n	ec1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
    ed12:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
    ed14:	4918      	ldr	r1, [pc, #96]	; (ed78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    ed16:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
    ed18:	6830      	ldr	r0, [r6, #0]
    ed1a:	f7f2 f9b5 	bl	1088 <__aeabi_fcmpgt>
    ed1e:	2800      	cmp	r0, #0
    ed20:	f43f af7e 	beq.w	ec20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
    ed24:	ae13      	add	r6, sp, #76	; 0x4c
    ed26:	e77b      	b.n	ec20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
    ed28:	0006ba14 	.word	0x0006ba14
    ed2c:	0006b9ec 	.word	0x0006b9ec
    ed30:	0006b8e4 	.word	0x0006b8e4
    ed34:	0006ac8c 	.word	0x0006ac8c
    ed38:	0006b834 	.word	0x0006b834
    ed3c:	0006b2a0 	.word	0x0006b2a0
    ed40:	0006b2b0 	.word	0x0006b2b0
    ed44:	0006b3e0 	.word	0x0006b3e0
    ed48:	0006a9cc 	.word	0x0006a9cc
    ed4c:	0006b9fc 	.word	0x0006b9fc
    ed50:	0006b408 	.word	0x0006b408
    ed54:	0006ba18 	.word	0x0006ba18
    ed58:	0006ba34 	.word	0x0006ba34
    ed5c:	0006ba4c 	.word	0x0006ba4c
    ed60:	0006ad2c 	.word	0x0006ad2c
    ed64:	0006b078 	.word	0x0006b078
    ed68:	0006b93c 	.word	0x0006b93c
    ed6c:	3ca00000 	.word	0x3ca00000
    ed70:	41200000 	.word	0x41200000
    ed74:	3c200000 	.word	0x3c200000
    ed78:	46fffe00 	.word	0x46fffe00
    ed7c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ed80:	f8dd b020 	ldr.w	fp, [sp, #32]
    ed84:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    ed86:	2000      	movs	r0, #0
    ed88:	f006 feeb 	bl	15b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ed8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ed90:	f7f1 ffbe 	bl	d10 <__aeabi_fmul>
    ed94:	f7f1 fb44 	bl	420 <__aeabi_f2d>
    ed98:	f001 fbb2 	bl	10500 <round>
    ed9c:	f7f1 fe5a 	bl	a54 <__aeabi_d2f>
    eda0:	9012      	str	r0, [sp, #72]	; 0x48
    eda2:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    eda6:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
    eda8:	f7f2 f950 	bl	104c <__aeabi_fcmplt>
    edac:	b9a0      	cbnz	r0, edd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
    edae:	af12      	add	r7, sp, #72	; 0x48
    edb0:	496c      	ldr	r1, [pc, #432]	; (ef64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    edb2:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
    edb4:	6838      	ldr	r0, [r7, #0]
    edb6:	f7f2 f967 	bl	1088 <__aeabi_fcmpgt>
    edba:	b978      	cbnz	r0, eddc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
    edbc:	6838      	ldr	r0, [r7, #0]
    edbe:	f7f2 f96d 	bl	109c <__aeabi_f2iz>
    edc2:	9b06      	ldr	r3, [sp, #24]
    edc4:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    edc8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    edcc:	9306      	str	r3, [sp, #24]
    edce:	f8cd 901c 	str.w	r9, [sp, #28]
    edd2:	469a      	mov	sl, r3
    edd4:	9608      	str	r6, [sp, #32]
    edd6:	e00b      	b.n	edf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
    edd8:	af11      	add	r7, sp, #68	; 0x44
    edda:	e7e9      	b.n	edb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
    eddc:	af10      	add	r7, sp, #64	; 0x40
    edde:	e7ed      	b.n	edbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
    ede0:	ae0e      	add	r6, sp, #56	; 0x38
    ede2:	e07b      	b.n	eedc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ede4:	6830      	ldr	r0, [r6, #0]
    ede6:	f7f2 f959 	bl	109c <__aeabi_f2iz>
    edea:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    edee:	46cb      	mov	fp, r9
    edf0:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    edf4:	da7c      	bge.n	eef0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    edf6:	4658      	mov	r0, fp
    edf8:	f7f1 ff36 	bl	c68 <__aeabi_i2f>
    edfc:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ee00:	f7f1 ff86 	bl	d10 <__aeabi_fmul>
    ee04:	2100      	movs	r1, #0
    ee06:	f7f1 fe7b 	bl	b00 <__addsf3>
    ee0a:	4606      	mov	r6, r0
    ee0c:	f006 fe9e 	bl	15b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ee10:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ee14:	f7f1 ff7c 	bl	d10 <__aeabi_fmul>
    ee18:	f7f1 fb02 	bl	420 <__aeabi_f2d>
    ee1c:	f001 fb70 	bl	10500 <round>
    ee20:	f7f1 fe18 	bl	a54 <__aeabi_d2f>
    ee24:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ee26:	f10b 0901 	add.w	r9, fp, #1
    ee2a:	4648      	mov	r0, r9
    ee2c:	f7f1 ff1c 	bl	c68 <__aeabi_i2f>
    ee30:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ee34:	f7f1 ff6c 	bl	d10 <__aeabi_fmul>
    ee38:	2100      	movs	r1, #0
    ee3a:	f7f1 fe61 	bl	b00 <__addsf3>
    ee3e:	f006 fe85 	bl	15b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ee42:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ee46:	f7f1 ff63 	bl	d10 <__aeabi_fmul>
    ee4a:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ee4c:	4630      	mov	r0, r6
    ee4e:	f006 fe7d 	bl	15b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ee52:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ee56:	f7f1 ff5b 	bl	d10 <__aeabi_fmul>
    ee5a:	f7f1 fae1 	bl	420 <__aeabi_f2d>
    ee5e:	f001 fb4f 	bl	10500 <round>
    ee62:	f7f1 fdf7 	bl	a54 <__aeabi_d2f>
    ee66:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ee68:	4640      	mov	r0, r8
    ee6a:	f7f1 fe49 	bl	b00 <__addsf3>
    ee6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ee72:	f7f1 ff4d 	bl	d10 <__aeabi_fmul>
    ee76:	f7f1 fad3 	bl	420 <__aeabi_f2d>
    ee7a:	f001 fb41 	bl	10500 <round>
    ee7e:	f7f1 fde9 	bl	a54 <__aeabi_d2f>
    ee82:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    ee84:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
    ee88:	4630      	mov	r0, r6
    ee8a:	f7f1 fe39 	bl	b00 <__addsf3>
    ee8e:	f006 fe5d 	bl	15b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ee92:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ee96:	f7f1 ff3b 	bl	d10 <__aeabi_fmul>
    ee9a:	f7f1 fac1 	bl	420 <__aeabi_f2d>
    ee9e:	f001 fb2f 	bl	10500 <round>
    eea2:	f7f1 fdd7 	bl	a54 <__aeabi_d2f>
    eea6:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    eea8:	4640      	mov	r0, r8
    eeaa:	f7f1 fe27 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    eeae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    eeb2:	f7f1 ff2d 	bl	d10 <__aeabi_fmul>
    eeb6:	f7f1 fab3 	bl	420 <__aeabi_f2d>
    eeba:	f001 fb21 	bl	10500 <round>
    eebe:	f7f1 fdc9 	bl	a54 <__aeabi_d2f>
    eec2:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    eec4:	4638      	mov	r0, r7
    eec6:	f7f1 fe19 	bl	afc <__aeabi_fsub>
    eeca:	900f      	str	r0, [sp, #60]	; 0x3c
    eecc:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    eed0:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
    eed2:	f7f2 f8bb 	bl	104c <__aeabi_fcmplt>
    eed6:	2800      	cmp	r0, #0
    eed8:	d182      	bne.n	ede0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
    eeda:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
    eedc:	4921      	ldr	r1, [pc, #132]	; (ef64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    eede:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
    eee0:	6830      	ldr	r0, [r6, #0]
    eee2:	f7f2 f8d1 	bl	1088 <__aeabi_fcmpgt>
    eee6:	2800      	cmp	r0, #0
    eee8:	f43f af7c 	beq.w	ede4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
    eeec:	ae0d      	add	r6, sp, #52	; 0x34
    eeee:	e779      	b.n	ede4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    eef0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    eef4:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    eef6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    eefa:	f006 fe27 	bl	15b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    eefe:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ef02:	f7f1 ff05 	bl	d10 <__aeabi_fmul>
    ef06:	f7f1 fa8b 	bl	420 <__aeabi_f2d>
    ef0a:	f001 faf9 	bl	10500 <round>
    ef0e:	f7f1 fda1 	bl	a54 <__aeabi_d2f>
    ef12:	900c      	str	r0, [sp, #48]	; 0x30
    ef14:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ef18:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
    ef1a:	f7f2 f897 	bl	104c <__aeabi_fcmplt>
    ef1e:	b9e0      	cbnz	r0, ef5a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
    ef20:	af0c      	add	r7, sp, #48	; 0x30
    ef22:	4910      	ldr	r1, [pc, #64]	; (ef64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    ef24:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
    ef26:	6838      	ldr	r0, [r7, #0]
    ef28:	f7f2 f8ae 	bl	1088 <__aeabi_fcmpgt>
    ef2c:	b9b8      	cbnz	r0, ef5e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
    ef2e:	6838      	ldr	r0, [r7, #0]
    ef30:	f7f2 f8b4 	bl	109c <__aeabi_f2iz>
    ef34:	9b06      	ldr	r3, [sp, #24]
    ef36:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
    ef3a:	9a05      	ldr	r2, [sp, #20]
    ef3c:	6913      	ldr	r3, [r2, #16]
    ef3e:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
    ef42:	68d3      	ldr	r3, [r2, #12]
    ef44:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
    ef48:	f8cd 9000 	str.w	r9, [sp]
    ef4c:	696b      	ldr	r3, [r5, #20]
    ef4e:	9a05      	ldr	r2, [sp, #20]
    ef50:	4631      	mov	r1, r6
    ef52:	4620      	mov	r0, r4
    ef54:	f7f2 fb4c 	bl	15f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
    ef58:	e59b      	b.n	ea92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
    ef5a:	af0b      	add	r7, sp, #44	; 0x2c
    ef5c:	e7e1      	b.n	ef22 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
    ef5e:	af0a      	add	r7, sp, #40	; 0x28
    ef60:	e7e5      	b.n	ef2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
    ef62:	bf00      	nop
    ef64:	46fffe00 	.word	0x46fffe00

0000ef68 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    ef68:	4b03      	ldr	r3, [pc, #12]	; (ef78 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    ef6a:	4a04      	ldr	r2, [pc, #16]	; (ef7c <z_device_state_init+0x14>)
    ef6c:	4293      	cmp	r3, r2
    ef6e:	d201      	bcs.n	ef74 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    ef70:	3318      	adds	r3, #24
    ef72:	e7fa      	b.n	ef6a <z_device_state_init+0x2>
	}
}
    ef74:	4770      	bx	lr
    ef76:	bf00      	nop
    ef78:	00016cd0 	.word	0x00016cd0
    ef7c:	00016d48 	.word	0x00016d48

0000ef80 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    ef80:	b570      	push	{r4, r5, r6, lr}
    ef82:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ef84:	4b11      	ldr	r3, [pc, #68]	; (efcc <z_sys_init_run_level+0x4c>)
    ef86:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ef8a:	e009      	b.n	efa0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    ef8c:	4240      	negs	r0, r0
    ef8e:	e017      	b.n	efc0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    ef90:	68eb      	ldr	r3, [r5, #12]
    ef92:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    ef94:	68ea      	ldr	r2, [r5, #12]
    ef96:	7853      	ldrb	r3, [r2, #1]
    ef98:	f043 0301 	orr.w	r3, r3, #1
    ef9c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ef9e:	3408      	adds	r4, #8
    efa0:	1c73      	adds	r3, r6, #1
    efa2:	4a0a      	ldr	r2, [pc, #40]	; (efcc <z_sys_init_run_level+0x4c>)
    efa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efa8:	42a3      	cmp	r3, r4
    efaa:	d90d      	bls.n	efc8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    efac:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    efae:	6823      	ldr	r3, [r4, #0]
    efb0:	4628      	mov	r0, r5
    efb2:	4798      	blx	r3
		if (dev != NULL) {
    efb4:	2d00      	cmp	r5, #0
    efb6:	d0f2      	beq.n	ef9e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    efb8:	2800      	cmp	r0, #0
    efba:	d0eb      	beq.n	ef94 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    efbc:	2800      	cmp	r0, #0
    efbe:	dbe5      	blt.n	ef8c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    efc0:	28ff      	cmp	r0, #255	; 0xff
    efc2:	dde5      	ble.n	ef90 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    efc4:	20ff      	movs	r0, #255	; 0xff
    efc6:	e7e3      	b.n	ef90 <z_sys_init_run_level+0x10>
		}
	}
}
    efc8:	bd70      	pop	{r4, r5, r6, pc}
    efca:	bf00      	nop
    efcc:	0006ba70 	.word	0x0006ba70

0000efd0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    efd0:	4b01      	ldr	r3, [pc, #4]	; (efd8 <z_impl_z_errno+0x8>)
    efd2:	6898      	ldr	r0, [r3, #8]
}
    efd4:	3094      	adds	r0, #148	; 0x94
    efd6:	4770      	bx	lr
    efd8:	20020a18 	.word	0x20020a18

0000efdc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    efde:	b089      	sub	sp, #36	; 0x24
    efe0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    efe2:	4b15      	ldr	r3, [pc, #84]	; (f038 <init_idle_thread+0x5c>)
    efe4:	25b0      	movs	r5, #176	; 0xb0
    efe6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    efea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    efee:	4e13      	ldr	r6, [pc, #76]	; (f03c <init_idle_thread+0x60>)
    eff0:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    eff4:	af06      	add	r7, sp, #24
    eff6:	4603      	mov	r3, r0
    eff8:	4a11      	ldr	r2, [pc, #68]	; (f040 <init_idle_thread+0x64>)
    effa:	2108      	movs	r1, #8
    effc:	4638      	mov	r0, r7
    effe:	f002 ff06 	bl	11e0e <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f002:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f006:	480f      	ldr	r0, [pc, #60]	; (f044 <init_idle_thread+0x68>)
    f008:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    f00c:	9705      	str	r7, [sp, #20]
    f00e:	2301      	movs	r3, #1
    f010:	9304      	str	r3, [sp, #16]
    f012:	230f      	movs	r3, #15
    f014:	9303      	str	r3, [sp, #12]
    f016:	2300      	movs	r3, #0
    f018:	9302      	str	r3, [sp, #8]
    f01a:	9301      	str	r3, [sp, #4]
    f01c:	9400      	str	r4, [sp, #0]
    f01e:	4b0a      	ldr	r3, [pc, #40]	; (f048 <init_idle_thread+0x6c>)
    f020:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f024:	4631      	mov	r1, r6
    f026:	4628      	mov	r0, r5
    f028:	f000 f946 	bl	f2b8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f02c:	7b6b      	ldrb	r3, [r5, #13]
    f02e:	f023 0304 	bic.w	r3, r3, #4
    f032:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    f034:	b009      	add	sp, #36	; 0x24
    f036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f038:	20000360 	.word	0x20000360
    f03c:	20028c48 	.word	0x20028c48
    f040:	0006ba88 	.word	0x0006ba88
    f044:	20020a18 	.word	0x20020a18
    f048:	00015cbb 	.word	0x00015cbb

0000f04c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    f04c:	b570      	push	{r4, r5, r6, lr}
    f04e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    f050:	f000 fdfe 	bl	fc50 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    f054:	4d1a      	ldr	r5, [pc, #104]	; (f0c0 <prepare_multithreading+0x74>)
    f056:	4b1b      	ldr	r3, [pc, #108]	; (f0c4 <prepare_multithreading+0x78>)
    f058:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f05a:	4b1b      	ldr	r3, [pc, #108]	; (f0c8 <prepare_multithreading+0x7c>)
    f05c:	9305      	str	r3, [sp, #20]
    f05e:	2301      	movs	r3, #1
    f060:	9304      	str	r3, [sp, #16]
    f062:	2400      	movs	r4, #0
    f064:	9403      	str	r4, [sp, #12]
    f066:	9402      	str	r4, [sp, #8]
    f068:	9401      	str	r4, [sp, #4]
    f06a:	9400      	str	r4, [sp, #0]
    f06c:	4b17      	ldr	r3, [pc, #92]	; (f0cc <prepare_multithreading+0x80>)
    f06e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    f072:	4917      	ldr	r1, [pc, #92]	; (f0d0 <prepare_multithreading+0x84>)
    f074:	4628      	mov	r0, r5
    f076:	f000 f91f 	bl	f2b8 <z_setup_new_thread>
    f07a:	4606      	mov	r6, r0
    f07c:	7b6b      	ldrb	r3, [r5, #13]
    f07e:	f023 0304 	bic.w	r3, r3, #4
    f082:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    f084:	4628      	mov	r0, r5
    f086:	f006 fe82 	bl	15d8e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f08a:	2c00      	cmp	r4, #0
    f08c:	dd02      	ble.n	f094 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    f08e:	4630      	mov	r0, r6
    f090:	b006      	add	sp, #24
    f092:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    f094:	4620      	mov	r0, r4
    f096:	f7ff ffa1 	bl	efdc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    f09a:	4b0e      	ldr	r3, [pc, #56]	; (f0d4 <prepare_multithreading+0x88>)
    f09c:	22b0      	movs	r2, #176	; 0xb0
    f09e:	fb02 3204 	mla	r2, r2, r4, r3
    f0a2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    f0a6:	4b07      	ldr	r3, [pc, #28]	; (f0c4 <prepare_multithreading+0x78>)
    f0a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f0ac:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    f0ae:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    f0b0:	4a09      	ldr	r2, [pc, #36]	; (f0d8 <prepare_multithreading+0x8c>)
    f0b2:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    f0b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    f0ba:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f0bc:	3401      	adds	r4, #1
    f0be:	e7e4      	b.n	f08a <prepare_multithreading+0x3e>
    f0c0:	20000410 	.word	0x20000410
    f0c4:	20020a18 	.word	0x20020a18
    f0c8:	0006ba94 	.word	0x0006ba94
    f0cc:	0000f0dd 	.word	0x0000f0dd
    f0d0:	20020c48 	.word	0x20020c48
    f0d4:	20000360 	.word	0x20000360
    f0d8:	20028d88 	.word	0x20028d88

0000f0dc <bg_thread_main>:
{
    f0dc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    f0de:	4b0b      	ldr	r3, [pc, #44]	; (f10c <bg_thread_main+0x30>)
    f0e0:	2201      	movs	r2, #1
    f0e2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f0e4:	2002      	movs	r0, #2
    f0e6:	f7ff ff4b 	bl	ef80 <z_sys_init_run_level>
	boot_banner();
    f0ea:	f001 f83b 	bl	10164 <boot_banner>
	z_cpp_init_static();
    f0ee:	f003 fa9f 	bl	12630 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    f0f2:	2003      	movs	r0, #3
    f0f4:	f7ff ff44 	bl	ef80 <z_sys_init_run_level>
	z_init_static_threads();
    f0f8:	f000 f942 	bl	f380 <z_init_static_threads>
	main();
    f0fc:	f002 fe20 	bl	11d40 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f100:	4a03      	ldr	r2, [pc, #12]	; (f110 <bg_thread_main+0x34>)
    f102:	7b13      	ldrb	r3, [r2, #12]
    f104:	f023 0301 	bic.w	r3, r3, #1
    f108:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f10a:	bd08      	pop	{r3, pc}
    f10c:	20020a87 	.word	0x20020a87
    f110:	20000410 	.word	0x20000410

0000f114 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    f114:	b508      	push	{r3, lr}
    f116:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f118:	4a01      	ldr	r2, [pc, #4]	; (f120 <switch_to_main_thread+0xc>)
    f11a:	4802      	ldr	r0, [pc, #8]	; (f124 <switch_to_main_thread+0x10>)
    f11c:	f7f5 f900 	bl	4320 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f120:	0000f0dd 	.word	0x0000f0dd
    f124:	20000410 	.word	0x20000410

0000f128 <z_bss_zero>:
{
    f128:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    f12a:	4803      	ldr	r0, [pc, #12]	; (f138 <z_bss_zero+0x10>)
    f12c:	4a03      	ldr	r2, [pc, #12]	; (f13c <z_bss_zero+0x14>)
    f12e:	1a12      	subs	r2, r2, r0
    f130:	2100      	movs	r1, #0
    f132:	f006 ffbc 	bl	160ae <memset>
}
    f136:	bd08      	pop	{r3, pc}
    f138:	20000340 	.word	0x20000340
    f13c:	20020c48 	.word	0x20020c48

0000f140 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    f140:	b500      	push	{lr}
    f142:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    f144:	4b1c      	ldr	r3, [pc, #112]	; (f1b8 <z_cstart+0x78>)
	uint32_t msp =
    f146:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f14a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    f14e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f152:	4c1a      	ldr	r4, [pc, #104]	; (f1bc <z_cstart+0x7c>)
    f154:	23e0      	movs	r3, #224	; 0xe0
    f156:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    f15a:	2500      	movs	r5, #0
    f15c:	77e5      	strb	r5, [r4, #31]
    f15e:	7625      	strb	r5, [r4, #24]
    f160:	7665      	strb	r5, [r4, #25]
    f162:	76a5      	strb	r5, [r4, #26]
    f164:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f168:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f16a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    f16e:	6263      	str	r3, [r4, #36]	; 0x24
    f170:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    f174:	f7f5 fa18 	bl	45a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    f178:	f7f4 ffe6 	bl	4148 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    f17c:	f04f 33ff 	mov.w	r3, #4294967295
    f180:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    f182:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    f184:	f7f5 fc48 	bl	4a18 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f188:	f7f5 fad0 	bl	472c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    f18c:	2401      	movs	r4, #1
    f18e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    f192:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    f196:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    f198:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    f19a:	4b09      	ldr	r3, [pc, #36]	; (f1c0 <z_cstart+0x80>)
    f19c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    f1a0:	f7ff fee2 	bl	ef68 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f1a4:	4628      	mov	r0, r5
    f1a6:	f7ff feeb 	bl	ef80 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f1aa:	4620      	mov	r0, r4
    f1ac:	f7ff fee8 	bl	ef80 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    f1b0:	f7ff ff4c 	bl	f04c <prepare_multithreading>
    f1b4:	f7ff ffae 	bl	f114 <switch_to_main_thread>
    f1b8:	20028d88 	.word	0x20028d88
    f1bc:	e000ed00 	.word	0xe000ed00
    f1c0:	20020a18 	.word	0x20020a18

0000f1c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    f1c4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f1c6:	4c06      	ldr	r4, [pc, #24]	; (f1e0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    f1c8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f1ca:	4b06      	ldr	r3, [pc, #24]	; (f1e4 <init_mem_slab_module+0x20>)
    f1cc:	429c      	cmp	r4, r3
    f1ce:	d206      	bcs.n	f1de <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    f1d0:	4620      	mov	r0, r4
    f1d2:	f006 fcf9 	bl	15bc8 <create_free_list>
		if (rc < 0) {
    f1d6:	2800      	cmp	r0, #0
    f1d8:	db01      	blt.n	f1de <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f1da:	3420      	adds	r4, #32
    f1dc:	e7f5      	b.n	f1ca <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    f1de:	bd10      	pop	{r4, pc}
    f1e0:	200002b4 	.word	0x200002b4
    f1e4:	200002b4 	.word	0x200002b4

0000f1e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    f1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1ea:	b083      	sub	sp, #12
    f1ec:	460c      	mov	r4, r1
    f1ee:	461f      	mov	r7, r3
    f1f0:	f04f 0320 	mov.w	r3, #32
    f1f4:	f3ef 8111 	mrs	r1, BASEPRI
    f1f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f1fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    f200:	6983      	ldr	r3, [r0, #24]
    f202:	b16b      	cbz	r3, f220 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    f204:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f206:	6983      	ldr	r3, [r0, #24]
    f208:	681b      	ldr	r3, [r3, #0]
    f20a:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    f20c:	69c3      	ldr	r3, [r0, #28]
    f20e:	3301      	adds	r3, #1
    f210:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    f212:	2000      	movs	r0, #0
	__asm__ volatile(
    f214:	f381 8811 	msr	BASEPRI, r1
    f218:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    f21c:	b003      	add	sp, #12
    f21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f220:	4616      	mov	r6, r2
    f222:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    f226:	ea56 0307 	orrs.w	r3, r6, r7
    f22a:	d104      	bne.n	f236 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    f22c:	2300      	movs	r3, #0
    f22e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f230:	f06f 000b 	mvn.w	r0, #11
    f234:	e7ee      	b.n	f214 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    f236:	e9cd 6700 	strd	r6, r7, [sp]
    f23a:	4602      	mov	r2, r0
    f23c:	4628      	mov	r0, r5
    f23e:	f000 fbdd 	bl	f9fc <z_pend_curr>
		if (result == 0) {
    f242:	2800      	cmp	r0, #0
    f244:	d1ea      	bne.n	f21c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    f246:	4b02      	ldr	r3, [pc, #8]	; (f250 <k_mem_slab_alloc+0x68>)
    f248:	689b      	ldr	r3, [r3, #8]
    f24a:	695b      	ldr	r3, [r3, #20]
    f24c:	6023      	str	r3, [r4, #0]
		return result;
    f24e:	e7e5      	b.n	f21c <k_mem_slab_alloc+0x34>
    f250:	20020a18 	.word	0x20020a18

0000f254 <z_thread_monitor_exit>:
	__asm__ volatile(
    f254:	f04f 0320 	mov.w	r3, #32
    f258:	f3ef 8111 	mrs	r1, BASEPRI
    f25c:	f383 8812 	msr	BASEPRI_MAX, r3
    f260:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    f264:	4b0a      	ldr	r3, [pc, #40]	; (f290 <z_thread_monitor_exit+0x3c>)
    f266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f268:	4283      	cmp	r3, r0
    f26a:	d104      	bne.n	f276 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    f26c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    f26e:	4b08      	ldr	r3, [pc, #32]	; (f290 <z_thread_monitor_exit+0x3c>)
    f270:	629a      	str	r2, [r3, #40]	; 0x28
    f272:	e007      	b.n	f284 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    f274:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    f276:	b113      	cbz	r3, f27e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    f278:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    f27a:	4282      	cmp	r2, r0
    f27c:	d1fa      	bne.n	f274 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    f27e:	b10b      	cbz	r3, f284 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    f280:	6f02      	ldr	r2, [r0, #112]	; 0x70
    f282:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    f284:	f381 8811 	msr	BASEPRI, r1
    f288:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    f28c:	4770      	bx	lr
    f28e:	bf00      	nop
    f290:	20020a18 	.word	0x20020a18

0000f294 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    f294:	b538      	push	{r3, r4, r5, lr}
    f296:	4614      	mov	r4, r2
    f298:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f29a:	ea54 0305 	orrs.w	r3, r4, r5
    f29e:	d102      	bne.n	f2a6 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    f2a0:	f006 fcf6 	bl	15c90 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    f2a4:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f2a6:	462b      	mov	r3, r5
    f2a8:	4902      	ldr	r1, [pc, #8]	; (f2b4 <schedule_new_thread+0x20>)
    f2aa:	3018      	adds	r0, #24
    f2ac:	f000 fe2e 	bl	ff0c <z_add_timeout>
    f2b0:	e7f8      	b.n	f2a4 <schedule_new_thread+0x10>
    f2b2:	bf00      	nop
    f2b4:	00015dc7 	.word	0x00015dc7

0000f2b8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2bc:	b085      	sub	sp, #20
    f2be:	4604      	mov	r4, r0
    f2c0:	460f      	mov	r7, r1
    f2c2:	4615      	mov	r5, r2
    f2c4:	461e      	mov	r6, r3
    f2c6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    f2ca:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f2ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    f2d2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f2d6:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f2da:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    f2dc:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    f2de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f2e0:	2204      	movs	r2, #4
    f2e2:	9911      	ldr	r1, [sp, #68]	; 0x44
    f2e4:	f006 fcd8 	bl	15c98 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    f2e8:	462a      	mov	r2, r5
    f2ea:	4639      	mov	r1, r7
    f2ec:	4620      	mov	r0, r4
    f2ee:	f006 fcbd 	bl	15c6c <setup_thread_stack>
    f2f2:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f2f4:	f8cd 8008 	str.w	r8, [sp, #8]
    f2f8:	f8cd 9004 	str.w	r9, [sp, #4]
    f2fc:	f8cd a000 	str.w	sl, [sp]
    f300:	4633      	mov	r3, r6
    f302:	4602      	mov	r2, r0
    f304:	4639      	mov	r1, r7
    f306:	4620      	mov	r0, r4
    f308:	f7f4 ffea 	bl	42e0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    f30c:	2300      	movs	r3, #0
    f30e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    f310:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    f312:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    f316:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    f31a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    f31e:	f04f 0320 	mov.w	r3, #32
    f322:	f3ef 8211 	mrs	r2, BASEPRI
    f326:	f383 8812 	msr	BASEPRI_MAX, r3
    f32a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    f32e:	4b13      	ldr	r3, [pc, #76]	; (f37c <z_setup_new_thread+0xc4>)
    f330:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f332:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    f334:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    f336:	f382 8811 	msr	BASEPRI, r2
    f33a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    f33e:	f1bb 0f00 	cmp.w	fp, #0
    f342:	d013      	beq.n	f36c <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f344:	221f      	movs	r2, #31
    f346:	4659      	mov	r1, fp
    f348:	f104 0074 	add.w	r0, r4, #116	; 0x74
    f34c:	f007 f828 	bl	163a0 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    f350:	2300      	movs	r3, #0
    f352:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    f356:	4b09      	ldr	r3, [pc, #36]	; (f37c <z_setup_new_thread+0xc4>)
    f358:	689b      	ldr	r3, [r3, #8]
    f35a:	b15b      	cbz	r3, f374 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    f35c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    f360:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    f364:	4628      	mov	r0, r5
    f366:	b005      	add	sp, #20
    f368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    f36c:	2300      	movs	r3, #0
    f36e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    f372:	e7f0      	b.n	f356 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    f374:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    f378:	e7f4      	b.n	f364 <z_setup_new_thread+0xac>
    f37a:	bf00      	nop
    f37c:	20020a18 	.word	0x20020a18

0000f380 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    f380:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    f384:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f386:	4c23      	ldr	r4, [pc, #140]	; (f414 <z_init_static_threads+0x94>)
    f388:	4b23      	ldr	r3, [pc, #140]	; (f418 <z_init_static_threads+0x98>)
    f38a:	429c      	cmp	r4, r3
    f38c:	d215      	bcs.n	f3ba <z_init_static_threads+0x3a>
		z_setup_new_thread(
    f38e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f390:	9305      	str	r3, [sp, #20]
    f392:	6a23      	ldr	r3, [r4, #32]
    f394:	9304      	str	r3, [sp, #16]
    f396:	69e3      	ldr	r3, [r4, #28]
    f398:	9303      	str	r3, [sp, #12]
    f39a:	69a3      	ldr	r3, [r4, #24]
    f39c:	9302      	str	r3, [sp, #8]
    f39e:	6963      	ldr	r3, [r4, #20]
    f3a0:	9301      	str	r3, [sp, #4]
    f3a2:	6923      	ldr	r3, [r4, #16]
    f3a4:	9300      	str	r3, [sp, #0]
    f3a6:	68e3      	ldr	r3, [r4, #12]
    f3a8:	68a2      	ldr	r2, [r4, #8]
    f3aa:	6861      	ldr	r1, [r4, #4]
    f3ac:	6820      	ldr	r0, [r4, #0]
    f3ae:	f7ff ff83 	bl	f2b8 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    f3b2:	6823      	ldr	r3, [r4, #0]
    f3b4:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f3b6:	3430      	adds	r4, #48	; 0x30
    f3b8:	e7e6      	b.n	f388 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    f3ba:	f000 f9d7 	bl	f76c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f3be:	4c15      	ldr	r4, [pc, #84]	; (f414 <z_init_static_threads+0x94>)
    f3c0:	e01b      	b.n	f3fa <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    f3c2:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    f3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f3c8:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    f3cc:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    f3d0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    f3d4:	03d8      	lsls	r0, r3, #15
    f3d6:	f240 35e7 	movw	r5, #999	; 0x3e7
    f3da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f3de:	2300      	movs	r3, #0
    f3e0:	1940      	adds	r0, r0, r5
    f3e2:	f04f 0500 	mov.w	r5, #0
    f3e6:	eb45 0101 	adc.w	r1, r5, r1
    f3ea:	f7f1 fe7d 	bl	10e8 <__aeabi_uldivmod>
    f3ee:	4602      	mov	r2, r0
    f3f0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    f3f2:	4630      	mov	r0, r6
    f3f4:	f7ff ff4e 	bl	f294 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    f3f8:	3430      	adds	r4, #48	; 0x30
    f3fa:	4b07      	ldr	r3, [pc, #28]	; (f418 <z_init_static_threads+0x98>)
    f3fc:	429c      	cmp	r4, r3
    f3fe:	d204      	bcs.n	f40a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f400:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f402:	f1b3 3fff 	cmp.w	r3, #4294967295
    f406:	d0f7      	beq.n	f3f8 <z_init_static_threads+0x78>
    f408:	e7db      	b.n	f3c2 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    f40a:	f000 fbad 	bl	fb68 <k_sched_unlock>
}
    f40e:	b006      	add	sp, #24
    f410:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    f414:	200002b4 	.word	0x200002b4
    f418:	200002b4 	.word	0x200002b4

0000f41c <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    f41c:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    f41e:	f006 fdb1 	bl	15f84 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    f422:	4b04      	ldr	r3, [pc, #16]	; (f434 <pm_save_idle+0x18>)
    f424:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    f426:	f7f4 fd41 	bl	3eac <pm_system_suspend>
    f42a:	b100      	cbz	r0, f42e <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    f42c:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    f42e:	f7f4 fe91 	bl	4154 <arch_cpu_idle>
    f432:	e7fb      	b.n	f42c <pm_save_idle+0x10>
    f434:	20020a18 	.word	0x20020a18

0000f438 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f43c:	b083      	sub	sp, #12
    f43e:	4604      	mov	r4, r0
    f440:	461d      	mov	r5, r3
	__asm__ volatile(
    f442:	f04f 0320 	mov.w	r3, #32
    f446:	f3ef 8711 	mrs	r7, BASEPRI
    f44a:	f383 8812 	msr	BASEPRI_MAX, r3
    f44e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f452:	68c1      	ldr	r1, [r0, #12]
    f454:	b999      	cbnz	r1, f47e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    f456:	2900      	cmp	r1, #0
    f458:	d14f      	bne.n	f4fa <z_impl_k_mutex_lock+0xc2>
    f45a:	4b3a      	ldr	r3, [pc, #232]	; (f544 <z_impl_k_mutex_lock+0x10c>)
    f45c:	689b      	ldr	r3, [r3, #8]
    f45e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f462:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    f464:	3101      	adds	r1, #1
    f466:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    f468:	4b36      	ldr	r3, [pc, #216]	; (f544 <z_impl_k_mutex_lock+0x10c>)
    f46a:	689b      	ldr	r3, [r3, #8]
    f46c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    f46e:	f387 8811 	msr	BASEPRI, r7
    f472:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    f476:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f478:	b003      	add	sp, #12
    f47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f47e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f480:	6882      	ldr	r2, [r0, #8]
    f482:	4b30      	ldr	r3, [pc, #192]	; (f544 <z_impl_k_mutex_lock+0x10c>)
    f484:	689b      	ldr	r3, [r3, #8]
    f486:	429a      	cmp	r2, r3
    f488:	d0e5      	beq.n	f456 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f48a:	ea55 0106 	orrs.w	r1, r5, r6
    f48e:	bf0c      	ite	eq
    f490:	f04f 0801 	moveq.w	r8, #1
    f494:	f04f 0800 	movne.w	r8, #0
    f498:	d031      	beq.n	f4fe <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    f49a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f49e:	4649      	mov	r1, r9
    f4a0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f4a4:	f006 fc15 	bl	15cd2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f4a8:	4581      	cmp	r9, r0
    f4aa:	dc2f      	bgt.n	f50c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    f4ac:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f4b0:	9600      	str	r6, [sp, #0]
    f4b2:	9501      	str	r5, [sp, #4]
    f4b4:	4622      	mov	r2, r4
    f4b6:	4639      	mov	r1, r7
    f4b8:	4823      	ldr	r0, [pc, #140]	; (f548 <z_impl_k_mutex_lock+0x110>)
    f4ba:	f000 fa9f 	bl	f9fc <z_pend_curr>
	if (got_mutex == 0) {
    f4be:	2800      	cmp	r0, #0
    f4c0:	d0da      	beq.n	f478 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    f4c2:	f04f 0320 	mov.w	r3, #32
    f4c6:	f3ef 8511 	mrs	r5, BASEPRI
    f4ca:	f383 8812 	msr	BASEPRI_MAX, r3
    f4ce:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f4d2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f4d4:	429c      	cmp	r4, r3
    f4d6:	d01f      	beq.n	f518 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f4d8:	b1f3      	cbz	r3, f518 <z_impl_k_mutex_lock+0xe0>
    f4da:	6921      	ldr	r1, [r4, #16]
    f4dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f4e0:	f006 fbf7 	bl	15cd2 <new_prio_for_inheritance>
    f4e4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f4e6:	4620      	mov	r0, r4
    f4e8:	f006 fbfe 	bl	15ce8 <adjust_owner_prio>
    f4ec:	b9b0      	cbnz	r0, f51c <z_impl_k_mutex_lock+0xe4>
    f4ee:	f1b9 0f00 	cmp.w	r9, #0
    f4f2:	d015      	beq.n	f520 <z_impl_k_mutex_lock+0xe8>
    f4f4:	f04f 0801 	mov.w	r8, #1
    f4f8:	e012      	b.n	f520 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    f4fa:	6923      	ldr	r3, [r4, #16]
    f4fc:	e7b1      	b.n	f462 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    f4fe:	f387 8811 	msr	BASEPRI, r7
    f502:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    f506:	f06f 000f 	mvn.w	r0, #15
    f50a:	e7b5      	b.n	f478 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    f50c:	4601      	mov	r1, r0
    f50e:	4620      	mov	r0, r4
    f510:	f006 fbea 	bl	15ce8 <adjust_owner_prio>
    f514:	4681      	mov	r9, r0
    f516:	e7cb      	b.n	f4b0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f518:	6921      	ldr	r1, [r4, #16]
    f51a:	e7e4      	b.n	f4e6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f51c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    f520:	f1b8 0f00 	cmp.w	r8, #0
    f524:	d106      	bne.n	f534 <z_impl_k_mutex_lock+0xfc>
    f526:	f385 8811 	msr	BASEPRI, r5
    f52a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    f52e:	f06f 000a 	mvn.w	r0, #10
    f532:	e7a1      	b.n	f478 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    f534:	4629      	mov	r1, r5
    f536:	4804      	ldr	r0, [pc, #16]	; (f548 <z_impl_k_mutex_lock+0x110>)
    f538:	f000 f8fc 	bl	f734 <z_reschedule>
	return -EAGAIN;
    f53c:	f06f 000a 	mvn.w	r0, #10
    f540:	e79a      	b.n	f478 <z_impl_k_mutex_lock+0x40>
    f542:	bf00      	nop
    f544:	20020a18 	.word	0x20020a18
    f548:	20020a44 	.word	0x20020a44

0000f54c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f54c:	6882      	ldr	r2, [r0, #8]
    f54e:	2a00      	cmp	r2, #0
    f550:	d035      	beq.n	f5be <z_impl_k_mutex_unlock+0x72>
{
    f552:	b538      	push	{r3, r4, r5, lr}
    f554:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f556:	4b1d      	ldr	r3, [pc, #116]	; (f5cc <z_impl_k_mutex_unlock+0x80>)
    f558:	689b      	ldr	r3, [r3, #8]
    f55a:	429a      	cmp	r2, r3
    f55c:	d132      	bne.n	f5c4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    f55e:	7bda      	ldrb	r2, [r3, #15]
    f560:	3a01      	subs	r2, #1
    f562:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f564:	68c3      	ldr	r3, [r0, #12]
    f566:	2b01      	cmp	r3, #1
    f568:	d905      	bls.n	f576 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    f56a:	3b01      	subs	r3, #1
    f56c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    f56e:	f000 fafb 	bl	fb68 <k_sched_unlock>

	return 0;
    f572:	2000      	movs	r0, #0
}
    f574:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f576:	f04f 0320 	mov.w	r3, #32
    f57a:	f3ef 8511 	mrs	r5, BASEPRI
    f57e:	f383 8812 	msr	BASEPRI_MAX, r3
    f582:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f586:	6901      	ldr	r1, [r0, #16]
    f588:	f006 fbae 	bl	15ce8 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f58c:	4620      	mov	r0, r4
    f58e:	f006 fc99 	bl	15ec4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    f592:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f594:	b160      	cbz	r0, f5b0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    f596:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f59a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f59c:	2300      	movs	r3, #0
    f59e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    f5a2:	f006 fbf4 	bl	15d8e <z_ready_thread>
		z_reschedule(&lock, key);
    f5a6:	4629      	mov	r1, r5
    f5a8:	4809      	ldr	r0, [pc, #36]	; (f5d0 <z_impl_k_mutex_unlock+0x84>)
    f5aa:	f000 f8c3 	bl	f734 <z_reschedule>
    f5ae:	e7de      	b.n	f56e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    f5b0:	2300      	movs	r3, #0
    f5b2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    f5b4:	f385 8811 	msr	BASEPRI, r5
    f5b8:	f3bf 8f6f 	isb	sy
    f5bc:	e7d7      	b.n	f56e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    f5be:	f06f 0015 	mvn.w	r0, #21
}
    f5c2:	4770      	bx	lr
		return -EPERM;
    f5c4:	f04f 30ff 	mov.w	r0, #4294967295
    f5c8:	e7d4      	b.n	f574 <z_impl_k_mutex_unlock+0x28>
    f5ca:	bf00      	nop
    f5cc:	20020a18 	.word	0x20020a18
    f5d0:	20020a44 	.word	0x20020a44

0000f5d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f5d4:	b538      	push	{r3, r4, r5, lr}
    f5d6:	4604      	mov	r4, r0
	__asm__ volatile(
    f5d8:	f04f 0320 	mov.w	r3, #32
    f5dc:	f3ef 8511 	mrs	r5, BASEPRI
    f5e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f5e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f5e8:	f006 fc6c 	bl	15ec4 <z_unpend_first_thread>

	if (thread != NULL) {
    f5ec:	b148      	cbz	r0, f602 <z_impl_k_sem_give+0x2e>
    f5ee:	2200      	movs	r2, #0
    f5f0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f5f4:	f006 fbcb 	bl	15d8e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f5f8:	4629      	mov	r1, r5
    f5fa:	4807      	ldr	r0, [pc, #28]	; (f618 <z_impl_k_sem_give+0x44>)
    f5fc:	f000 f89a 	bl	f734 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f600:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f602:	68a3      	ldr	r3, [r4, #8]
    f604:	68e2      	ldr	r2, [r4, #12]
    f606:	4293      	cmp	r3, r2
    f608:	d003      	beq.n	f612 <z_impl_k_sem_give+0x3e>
    f60a:	2201      	movs	r2, #1
    f60c:	4413      	add	r3, r2
    f60e:	60a3      	str	r3, [r4, #8]
}
    f610:	e7f2      	b.n	f5f8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f612:	2200      	movs	r2, #0
    f614:	e7fa      	b.n	f60c <z_impl_k_sem_give+0x38>
    f616:	bf00      	nop
    f618:	20020a48 	.word	0x20020a48

0000f61c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f61c:	b530      	push	{r4, r5, lr}
    f61e:	b083      	sub	sp, #12
    f620:	461d      	mov	r5, r3
    f622:	f04f 0320 	mov.w	r3, #32
    f626:	f3ef 8111 	mrs	r1, BASEPRI
    f62a:	f383 8812 	msr	BASEPRI_MAX, r3
    f62e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    f632:	6883      	ldr	r3, [r0, #8]
    f634:	b143      	cbz	r3, f648 <z_impl_k_sem_take+0x2c>
		sem->count--;
    f636:	3b01      	subs	r3, #1
    f638:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f63a:	f381 8811 	msr	BASEPRI, r1
    f63e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f642:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    f644:	b003      	add	sp, #12
    f646:	bd30      	pop	{r4, r5, pc}
    f648:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f64a:	ea54 0305 	orrs.w	r3, r4, r5
    f64e:	d006      	beq.n	f65e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f650:	e9cd 4500 	strd	r4, r5, [sp]
    f654:	4602      	mov	r2, r0
    f656:	4805      	ldr	r0, [pc, #20]	; (f66c <z_impl_k_sem_take+0x50>)
    f658:	f000 f9d0 	bl	f9fc <z_pend_curr>
	return ret;
    f65c:	e7f2      	b.n	f644 <z_impl_k_sem_take+0x28>
    f65e:	f381 8811 	msr	BASEPRI, r1
    f662:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f666:	f06f 000f 	mvn.w	r0, #15
    f66a:	e7eb      	b.n	f644 <z_impl_k_sem_take+0x28>
    f66c:	20020a48 	.word	0x20020a48

0000f670 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    f670:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f672:	f1b3 3fff 	cmp.w	r3, #4294967295
    f676:	bf08      	it	eq
    f678:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    f67c:	d100      	bne.n	f680 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    f67e:	bd38      	pop	{r3, r4, r5, pc}
    f680:	4902      	ldr	r1, [pc, #8]	; (f68c <add_thread_timeout+0x1c>)
    f682:	3018      	adds	r0, #24
    f684:	f000 fc42 	bl	ff0c <z_add_timeout>
    f688:	e7f9      	b.n	f67e <add_thread_timeout+0xe>
    f68a:	bf00      	nop
    f68c:	00015dc7 	.word	0x00015dc7

0000f690 <z_reset_time_slice>:
{
    f690:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    f692:	4b08      	ldr	r3, [pc, #32]	; (f6b4 <z_reset_time_slice+0x24>)
    f694:	681b      	ldr	r3, [r3, #0]
    f696:	b903      	cbnz	r3, f69a <z_reset_time_slice+0xa>
}
    f698:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    f69a:	f7f6 faeb 	bl	5c74 <sys_clock_elapsed>
    f69e:	4603      	mov	r3, r0
    f6a0:	4a04      	ldr	r2, [pc, #16]	; (f6b4 <z_reset_time_slice+0x24>)
    f6a2:	6810      	ldr	r0, [r2, #0]
    f6a4:	4403      	add	r3, r0
    f6a6:	4a04      	ldr	r2, [pc, #16]	; (f6b8 <z_reset_time_slice+0x28>)
    f6a8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    f6aa:	2100      	movs	r1, #0
    f6ac:	f006 fc80 	bl	15fb0 <z_set_timeout_expiry>
}
    f6b0:	e7f2      	b.n	f698 <z_reset_time_slice+0x8>
    f6b2:	bf00      	nop
    f6b4:	20020a58 	.word	0x20020a58
    f6b8:	20020a18 	.word	0x20020a18

0000f6bc <k_sched_time_slice_set>:
{
    f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6c0:	4606      	mov	r6, r0
    f6c2:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    f6c4:	2300      	movs	r3, #0
	__asm__ volatile(
    f6c6:	f04f 0220 	mov.w	r2, #32
    f6ca:	f3ef 8711 	mrs	r7, BASEPRI
    f6ce:	f382 8812 	msr	BASEPRI_MAX, r2
    f6d2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f6d6:	e009      	b.n	f6ec <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    f6d8:	4b13      	ldr	r3, [pc, #76]	; (f728 <k_sched_time_slice_set+0x6c>)
    f6da:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    f6de:	f7ff ffd7 	bl	f690 <z_reset_time_slice>
	__asm__ volatile(
    f6e2:	f387 8811 	msr	BASEPRI, r7
    f6e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f6ea:	2301      	movs	r3, #1
    f6ec:	b9cb      	cbnz	r3, f722 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    f6ee:	2300      	movs	r3, #0
    f6f0:	4a0e      	ldr	r2, [pc, #56]	; (f72c <k_sched_time_slice_set+0x70>)
    f6f2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    f6f4:	0c75      	lsrs	r5, r6, #17
    f6f6:	03f4      	lsls	r4, r6, #15
    f6f8:	f240 30e7 	movw	r0, #999	; 0x3e7
    f6fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f700:	2300      	movs	r3, #0
    f702:	1820      	adds	r0, r4, r0
    f704:	f04f 0100 	mov.w	r1, #0
    f708:	eb45 0101 	adc.w	r1, r5, r1
    f70c:	f7f1 fcec 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f710:	4b07      	ldr	r3, [pc, #28]	; (f730 <k_sched_time_slice_set+0x74>)
    f712:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    f714:	2e00      	cmp	r6, #0
    f716:	dddf      	ble.n	f6d8 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    f718:	2802      	cmp	r0, #2
    f71a:	bfb8      	it	lt
    f71c:	2002      	movlt	r0, #2
    f71e:	6018      	str	r0, [r3, #0]
    f720:	e7da      	b.n	f6d8 <k_sched_time_slice_set+0x1c>
}
    f722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f726:	bf00      	nop
    f728:	20020a54 	.word	0x20020a54
    f72c:	20020a18 	.word	0x20020a18
    f730:	20020a58 	.word	0x20020a58

0000f734 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    f734:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    f736:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f738:	b921      	cbnz	r1, f744 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f73a:	f3ef 8305 	mrs	r3, IPSR
    f73e:	b913      	cbnz	r3, f746 <z_reschedule+0x12>
    f740:	2101      	movs	r1, #1
    f742:	e000      	b.n	f746 <z_reschedule+0x12>
    f744:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    f746:	f011 0f01 	tst.w	r1, #1
    f74a:	d007      	beq.n	f75c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    f74c:	4b06      	ldr	r3, [pc, #24]	; (f768 <z_reschedule+0x34>)
    f74e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    f750:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    f752:	429a      	cmp	r2, r3
    f754:	d002      	beq.n	f75c <z_reschedule+0x28>
	ret = arch_swap(key);
    f756:	f7f4 fd69 	bl	422c <arch_swap>
		z_swap(lock, key);
    f75a:	e003      	b.n	f764 <z_reschedule+0x30>
    f75c:	f380 8811 	msr	BASEPRI, r0
    f760:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    f764:	bd08      	pop	{r3, pc}
    f766:	bf00      	nop
    f768:	20020a18 	.word	0x20020a18

0000f76c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    f76c:	2300      	movs	r3, #0
	__asm__ volatile(
    f76e:	f04f 0220 	mov.w	r2, #32
    f772:	f3ef 8111 	mrs	r1, BASEPRI
    f776:	f382 8812 	msr	BASEPRI_MAX, r2
    f77a:	f3bf 8f6f 	isb	sy
    f77e:	b953      	cbnz	r3, f796 <k_sched_lock+0x2a>
    f780:	4b05      	ldr	r3, [pc, #20]	; (f798 <k_sched_lock+0x2c>)
    f782:	689a      	ldr	r2, [r3, #8]
    f784:	7bd3      	ldrb	r3, [r2, #15]
    f786:	3b01      	subs	r3, #1
    f788:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    f78a:	f381 8811 	msr	BASEPRI, r1
    f78e:	f3bf 8f6f 	isb	sy
    f792:	2301      	movs	r3, #1
    f794:	e7f3      	b.n	f77e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    f796:	4770      	bx	lr
    f798:	20020a18 	.word	0x20020a18

0000f79c <update_cache>:
{
    f79c:	b538      	push	{r3, r4, r5, lr}
    f79e:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    f7a0:	480f      	ldr	r0, [pc, #60]	; (f7e0 <update_cache+0x44>)
    f7a2:	f006 faed 	bl	15d80 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f7a6:	4605      	mov	r5, r0
    f7a8:	b170      	cbz	r0, f7c8 <update_cache+0x2c>
	if (preempt_ok != 0) {
    f7aa:	b984      	cbnz	r4, f7ce <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    f7ac:	4b0d      	ldr	r3, [pc, #52]	; (f7e4 <update_cache+0x48>)
    f7ae:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    f7b0:	7b5a      	ldrb	r2, [r3, #13]
    f7b2:	f012 0f1f 	tst.w	r2, #31
    f7b6:	d10a      	bne.n	f7ce <update_cache+0x32>
	return node->next != NULL;
    f7b8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f7ba:	b942      	cbnz	r2, f7ce <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f7bc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    f7be:	2a7f      	cmp	r2, #127	; 0x7f
    f7c0:	d905      	bls.n	f7ce <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    f7c2:	4a08      	ldr	r2, [pc, #32]	; (f7e4 <update_cache+0x48>)
    f7c4:	61d3      	str	r3, [r2, #28]
    f7c6:	e00a      	b.n	f7de <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f7c8:	4b06      	ldr	r3, [pc, #24]	; (f7e4 <update_cache+0x48>)
    f7ca:	68dd      	ldr	r5, [r3, #12]
    f7cc:	e7ed      	b.n	f7aa <update_cache+0xe>
		if (thread != _current) {
    f7ce:	4b05      	ldr	r3, [pc, #20]	; (f7e4 <update_cache+0x48>)
    f7d0:	689b      	ldr	r3, [r3, #8]
    f7d2:	42ab      	cmp	r3, r5
    f7d4:	d001      	beq.n	f7da <update_cache+0x3e>
			z_reset_time_slice();
    f7d6:	f7ff ff5b 	bl	f690 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    f7da:	4b02      	ldr	r3, [pc, #8]	; (f7e4 <update_cache+0x48>)
    f7dc:	61dd      	str	r5, [r3, #28]
}
    f7de:	bd38      	pop	{r3, r4, r5, pc}
    f7e0:	20020a38 	.word	0x20020a38
    f7e4:	20020a18 	.word	0x20020a18

0000f7e8 <move_thread_to_end_of_prio_q>:
{
    f7e8:	b538      	push	{r3, r4, r5, lr}
    f7ea:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    f7ec:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f7ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f7f2:	2b00      	cmp	r3, #0
    f7f4:	db28      	blt.n	f848 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    f7f6:	7b6b      	ldrb	r3, [r5, #13]
    f7f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f7fc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    f7fe:	4b1a      	ldr	r3, [pc, #104]	; (f868 <move_thread_to_end_of_prio_q+0x80>)
    f800:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f804:	429c      	cmp	r4, r3
    f806:	d02d      	beq.n	f864 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f808:	b16c      	cbz	r4, f826 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f80a:	4621      	mov	r1, r4
    f80c:	4628      	mov	r0, r5
    f80e:	f006 fa90 	bl	15d32 <z_sched_prio_cmp>
    f812:	2800      	cmp	r0, #0
    f814:	dc20      	bgt.n	f858 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f816:	b134      	cbz	r4, f826 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    f818:	4b13      	ldr	r3, [pc, #76]	; (f868 <move_thread_to_end_of_prio_q+0x80>)
    f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f81c:	429c      	cmp	r4, r3
    f81e:	d002      	beq.n	f826 <move_thread_to_end_of_prio_q+0x3e>
    f820:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f822:	2c00      	cmp	r4, #0
    f824:	d1f0      	bne.n	f808 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    f826:	4b10      	ldr	r3, [pc, #64]	; (f868 <move_thread_to_end_of_prio_q+0x80>)
    f828:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    f82a:	f103 0120 	add.w	r1, r3, #32
    f82e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    f830:	606a      	str	r2, [r5, #4]

	tail->next = node;
    f832:	6015      	str	r5, [r2, #0]
	list->tail = node;
    f834:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    f836:	4b0c      	ldr	r3, [pc, #48]	; (f868 <move_thread_to_end_of_prio_q+0x80>)
    f838:	6898      	ldr	r0, [r3, #8]
    f83a:	42a8      	cmp	r0, r5
    f83c:	bf14      	ite	ne
    f83e:	2000      	movne	r0, #0
    f840:	2001      	moveq	r0, #1
    f842:	f7ff ffab 	bl	f79c <update_cache>
}
    f846:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f84c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    f84e:	4601      	mov	r1, r0
    f850:	4806      	ldr	r0, [pc, #24]	; (f86c <move_thread_to_end_of_prio_q+0x84>)
    f852:	f006 fa8d 	bl	15d70 <z_priq_dumb_remove>
}
    f856:	e7ce      	b.n	f7f6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    f858:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    f85a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f85c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f85e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f860:	6065      	str	r5, [r4, #4]
}
    f862:	e7e8      	b.n	f836 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f864:	2400      	movs	r4, #0
    f866:	e7cf      	b.n	f808 <move_thread_to_end_of_prio_q+0x20>
    f868:	20020a18 	.word	0x20020a18
    f86c:	20020a38 	.word	0x20020a38

0000f870 <z_time_slice>:
{
    f870:	b510      	push	{r4, lr}
	__asm__ volatile(
    f872:	f04f 0320 	mov.w	r3, #32
    f876:	f3ef 8411 	mrs	r4, BASEPRI
    f87a:	f383 8812 	msr	BASEPRI_MAX, r3
    f87e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f882:	4b1c      	ldr	r3, [pc, #112]	; (f8f4 <z_time_slice+0x84>)
    f884:	689b      	ldr	r3, [r3, #8]
    f886:	4a1c      	ldr	r2, [pc, #112]	; (f8f8 <z_time_slice+0x88>)
    f888:	6812      	ldr	r2, [r2, #0]
    f88a:	4293      	cmp	r3, r2
    f88c:	d01d      	beq.n	f8ca <z_time_slice+0x5a>
	pending_current = NULL;
    f88e:	4a1a      	ldr	r2, [pc, #104]	; (f8f8 <z_time_slice+0x88>)
    f890:	2100      	movs	r1, #0
    f892:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    f894:	4a19      	ldr	r2, [pc, #100]	; (f8fc <z_time_slice+0x8c>)
    f896:	6812      	ldr	r2, [r2, #0]
    f898:	b322      	cbz	r2, f8e4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f89a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    f89c:	2a7f      	cmp	r2, #127	; 0x7f
    f89e:	d821      	bhi.n	f8e4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    f8a0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    f8a2:	f012 0f1f 	tst.w	r2, #31
    f8a6:	d11d      	bne.n	f8e4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f8a8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    f8ac:	4a14      	ldr	r2, [pc, #80]	; (f900 <z_time_slice+0x90>)
    f8ae:	6812      	ldr	r2, [r2, #0]
    f8b0:	4291      	cmp	r1, r2
    f8b2:	db17      	blt.n	f8e4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    f8b4:	4a13      	ldr	r2, [pc, #76]	; (f904 <z_time_slice+0x94>)
    f8b6:	4293      	cmp	r3, r2
    f8b8:	d014      	beq.n	f8e4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    f8ba:	4a0e      	ldr	r2, [pc, #56]	; (f8f4 <z_time_slice+0x84>)
    f8bc:	6912      	ldr	r2, [r2, #16]
    f8be:	4282      	cmp	r2, r0
    f8c0:	dd0a      	ble.n	f8d8 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    f8c2:	1a10      	subs	r0, r2, r0
    f8c4:	4b0b      	ldr	r3, [pc, #44]	; (f8f4 <z_time_slice+0x84>)
    f8c6:	6118      	str	r0, [r3, #16]
    f8c8:	e00f      	b.n	f8ea <z_time_slice+0x7a>
		z_reset_time_slice();
    f8ca:	f7ff fee1 	bl	f690 <z_reset_time_slice>
	__asm__ volatile(
    f8ce:	f384 8811 	msr	BASEPRI, r4
    f8d2:	f3bf 8f6f 	isb	sy
		return;
    f8d6:	e00c      	b.n	f8f2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    f8d8:	4618      	mov	r0, r3
    f8da:	f7ff ff85 	bl	f7e8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    f8de:	f7ff fed7 	bl	f690 <z_reset_time_slice>
    f8e2:	e002      	b.n	f8ea <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    f8e4:	4b03      	ldr	r3, [pc, #12]	; (f8f4 <z_time_slice+0x84>)
    f8e6:	2200      	movs	r2, #0
    f8e8:	611a      	str	r2, [r3, #16]
    f8ea:	f384 8811 	msr	BASEPRI, r4
    f8ee:	f3bf 8f6f 	isb	sy
}
    f8f2:	bd10      	pop	{r4, pc}
    f8f4:	20020a18 	.word	0x20020a18
    f8f8:	20020a4c 	.word	0x20020a4c
    f8fc:	20020a58 	.word	0x20020a58
    f900:	20020a54 	.word	0x20020a54
    f904:	20000360 	.word	0x20000360

0000f908 <ready_thread>:
{
    f908:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    f90a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    f90c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    f910:	2a00      	cmp	r2, #0
    f912:	db2d      	blt.n	f970 <ready_thread+0x68>
    f914:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    f916:	f013 0f1f 	tst.w	r3, #31
    f91a:	d105      	bne.n	f928 <ready_thread+0x20>
	return node->next != NULL;
    f91c:	6982      	ldr	r2, [r0, #24]
    f91e:	b10a      	cbz	r2, f924 <ready_thread+0x1c>
    f920:	2200      	movs	r2, #0
    f922:	e002      	b.n	f92a <ready_thread+0x22>
    f924:	2201      	movs	r2, #1
    f926:	e000      	b.n	f92a <ready_thread+0x22>
    f928:	2200      	movs	r2, #0
    f92a:	b30a      	cbz	r2, f970 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    f92c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f930:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    f932:	4b14      	ldr	r3, [pc, #80]	; (f984 <ready_thread+0x7c>)
    f934:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f938:	429d      	cmp	r5, r3
    f93a:	d020      	beq.n	f97e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f93c:	b16d      	cbz	r5, f95a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f93e:	4629      	mov	r1, r5
    f940:	4620      	mov	r0, r4
    f942:	f006 f9f6 	bl	15d32 <z_sched_prio_cmp>
    f946:	2800      	cmp	r0, #0
    f948:	dc13      	bgt.n	f972 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f94a:	b135      	cbz	r5, f95a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    f94c:	4b0d      	ldr	r3, [pc, #52]	; (f984 <ready_thread+0x7c>)
    f94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f950:	429d      	cmp	r5, r3
    f952:	d002      	beq.n	f95a <ready_thread+0x52>
    f954:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f956:	2d00      	cmp	r5, #0
    f958:	d1f0      	bne.n	f93c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    f95a:	4b0a      	ldr	r3, [pc, #40]	; (f984 <ready_thread+0x7c>)
    f95c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    f95e:	f103 0120 	add.w	r1, r3, #32
    f962:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    f964:	6062      	str	r2, [r4, #4]
	tail->next = node;
    f966:	6014      	str	r4, [r2, #0]
	list->tail = node;
    f968:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    f96a:	2000      	movs	r0, #0
    f96c:	f7ff ff16 	bl	f79c <update_cache>
}
    f970:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    f972:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    f974:	6063      	str	r3, [r4, #4]
	node->next = successor;
    f976:	6025      	str	r5, [r4, #0]
	prev->next = node;
    f978:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    f97a:	606c      	str	r4, [r5, #4]
}
    f97c:	e7f5      	b.n	f96a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f97e:	2500      	movs	r5, #0
    f980:	e7dc      	b.n	f93c <ready_thread+0x34>
    f982:	bf00      	nop
    f984:	20020a18 	.word	0x20020a18

0000f988 <z_sched_start>:
{
    f988:	b510      	push	{r4, lr}
	__asm__ volatile(
    f98a:	f04f 0320 	mov.w	r3, #32
    f98e:	f3ef 8411 	mrs	r4, BASEPRI
    f992:	f383 8812 	msr	BASEPRI_MAX, r3
    f996:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    f99a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    f99c:	f013 0f04 	tst.w	r3, #4
    f9a0:	d104      	bne.n	f9ac <z_sched_start+0x24>
	__asm__ volatile(
    f9a2:	f384 8811 	msr	BASEPRI, r4
    f9a6:	f3bf 8f6f 	isb	sy
}
    f9aa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f9ac:	f023 0304 	bic.w	r3, r3, #4
    f9b0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    f9b2:	f7ff ffa9 	bl	f908 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    f9b6:	4621      	mov	r1, r4
    f9b8:	4801      	ldr	r0, [pc, #4]	; (f9c0 <z_sched_start+0x38>)
    f9ba:	f7ff febb 	bl	f734 <z_reschedule>
    f9be:	e7f4      	b.n	f9aa <z_sched_start+0x22>
    f9c0:	20020a50 	.word	0x20020a50

0000f9c4 <unready_thread>:
{
    f9c4:	b510      	push	{r4, lr}
    f9c6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    f9c8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f9ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	db08      	blt.n	f9e4 <unready_thread+0x20>
	update_cache(thread == _current);
    f9d2:	4b08      	ldr	r3, [pc, #32]	; (f9f4 <unready_thread+0x30>)
    f9d4:	6898      	ldr	r0, [r3, #8]
    f9d6:	42a0      	cmp	r0, r4
    f9d8:	bf14      	ite	ne
    f9da:	2000      	movne	r0, #0
    f9dc:	2001      	moveq	r0, #1
    f9de:	f7ff fedd 	bl	f79c <update_cache>
}
    f9e2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f9e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f9e8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    f9ea:	4601      	mov	r1, r0
    f9ec:	4802      	ldr	r0, [pc, #8]	; (f9f8 <unready_thread+0x34>)
    f9ee:	f006 f9bf 	bl	15d70 <z_priq_dumb_remove>
}
    f9f2:	e7ee      	b.n	f9d2 <unready_thread+0xe>
    f9f4:	20020a18 	.word	0x20020a18
    f9f8:	20020a38 	.word	0x20020a38

0000f9fc <z_pend_curr>:
{
    f9fc:	b510      	push	{r4, lr}
    f9fe:	460c      	mov	r4, r1
    fa00:	4611      	mov	r1, r2
	pending_current = _current;
    fa02:	4b06      	ldr	r3, [pc, #24]	; (fa1c <z_pend_curr+0x20>)
    fa04:	6898      	ldr	r0, [r3, #8]
    fa06:	4b06      	ldr	r3, [pc, #24]	; (fa20 <z_pend_curr+0x24>)
    fa08:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    fa0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fa0e:	f006 fa38 	bl	15e82 <pend>
    fa12:	4620      	mov	r0, r4
    fa14:	f7f4 fc0a 	bl	422c <arch_swap>
}
    fa18:	bd10      	pop	{r4, pc}
    fa1a:	bf00      	nop
    fa1c:	20020a18 	.word	0x20020a18
    fa20:	20020a4c 	.word	0x20020a4c

0000fa24 <z_set_prio>:
{
    fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa28:	4604      	mov	r4, r0
    fa2a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    fa2c:	2300      	movs	r3, #0
	__asm__ volatile(
    fa2e:	f04f 0220 	mov.w	r2, #32
    fa32:	f3ef 8611 	mrs	r6, BASEPRI
    fa36:	f382 8812 	msr	BASEPRI_MAX, r2
    fa3a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    fa3e:	4698      	mov	r8, r3
    fa40:	e008      	b.n	fa54 <z_set_prio+0x30>
		if (need_sched) {
    fa42:	f012 0801 	ands.w	r8, r2, #1
    fa46:	d111      	bne.n	fa6c <z_set_prio+0x48>
			thread->base.prio = prio;
    fa48:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    fa4a:	f386 8811 	msr	BASEPRI, r6
    fa4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fa52:	2301      	movs	r3, #1
    fa54:	461a      	mov	r2, r3
    fa56:	2b00      	cmp	r3, #0
    fa58:	d13d      	bne.n	fad6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    fa5a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fa5c:	f013 0f1f 	tst.w	r3, #31
    fa60:	d1ef      	bne.n	fa42 <z_set_prio+0x1e>
	return node->next != NULL;
    fa62:	69a1      	ldr	r1, [r4, #24]
    fa64:	2900      	cmp	r1, #0
    fa66:	d1ec      	bne.n	fa42 <z_set_prio+0x1e>
    fa68:	2201      	movs	r2, #1
    fa6a:	e7ea      	b.n	fa42 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fa6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fa70:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    fa72:	f8df 906c 	ldr.w	r9, [pc, #108]	; fae0 <z_set_prio+0xbc>
    fa76:	4621      	mov	r1, r4
    fa78:	4648      	mov	r0, r9
    fa7a:	f006 f979 	bl	15d70 <z_priq_dumb_remove>
				thread->base.prio = prio;
    fa7e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    fa80:	7b63      	ldrb	r3, [r4, #13]
    fa82:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa86:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    fa88:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa8c:	454d      	cmp	r5, r9
    fa8e:	d020      	beq.n	fad2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa90:	b16d      	cbz	r5, faae <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fa92:	4629      	mov	r1, r5
    fa94:	4620      	mov	r0, r4
    fa96:	f006 f94c 	bl	15d32 <z_sched_prio_cmp>
    fa9a:	2800      	cmp	r0, #0
    fa9c:	dc13      	bgt.n	fac6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fa9e:	b135      	cbz	r5, faae <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    faa0:	4b0e      	ldr	r3, [pc, #56]	; (fadc <z_set_prio+0xb8>)
    faa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    faa4:	429d      	cmp	r5, r3
    faa6:	d002      	beq.n	faae <z_set_prio+0x8a>
    faa8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    faaa:	2d00      	cmp	r5, #0
    faac:	d1f0      	bne.n	fa90 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    faae:	4b0b      	ldr	r3, [pc, #44]	; (fadc <z_set_prio+0xb8>)
    fab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fab2:	f103 0120 	add.w	r1, r3, #32
    fab6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    fab8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    faba:	6014      	str	r4, [r2, #0]
	list->tail = node;
    fabc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    fabe:	2001      	movs	r0, #1
    fac0:	f7ff fe6c 	bl	f79c <update_cache>
    fac4:	e7c1      	b.n	fa4a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    fac6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    fac8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    faca:	6025      	str	r5, [r4, #0]
	prev->next = node;
    facc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    face:	606c      	str	r4, [r5, #4]
}
    fad0:	e7f5      	b.n	fabe <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fad2:	2500      	movs	r5, #0
    fad4:	e7dc      	b.n	fa90 <z_set_prio+0x6c>
}
    fad6:	4640      	mov	r0, r8
    fad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fadc:	20020a18 	.word	0x20020a18
    fae0:	20020a38 	.word	0x20020a38

0000fae4 <z_impl_k_thread_suspend>:
{
    fae4:	b538      	push	{r3, r4, r5, lr}
    fae6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fae8:	3018      	adds	r0, #24
    faea:	f006 fa2d 	bl	15f48 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    faee:	2300      	movs	r3, #0
	__asm__ volatile(
    faf0:	f04f 0220 	mov.w	r2, #32
    faf4:	f3ef 8511 	mrs	r5, BASEPRI
    faf8:	f382 8812 	msr	BASEPRI_MAX, r2
    fafc:	f3bf 8f6f 	isb	sy
    fb00:	e010      	b.n	fb24 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fb02:	7b63      	ldrb	r3, [r4, #13]
    fb04:	f043 0310 	orr.w	r3, r3, #16
    fb08:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    fb0a:	4b15      	ldr	r3, [pc, #84]	; (fb60 <z_impl_k_thread_suspend+0x7c>)
    fb0c:	6898      	ldr	r0, [r3, #8]
    fb0e:	42a0      	cmp	r0, r4
    fb10:	bf14      	ite	ne
    fb12:	2000      	movne	r0, #0
    fb14:	2001      	moveq	r0, #1
    fb16:	f7ff fe41 	bl	f79c <update_cache>
	__asm__ volatile(
    fb1a:	f385 8811 	msr	BASEPRI, r5
    fb1e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fb22:	2301      	movs	r3, #1
    fb24:	b963      	cbnz	r3, fb40 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    fb26:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    fb28:	f994 300d 	ldrsb.w	r3, [r4, #13]
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	dae8      	bge.n	fb02 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fb30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fb34:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    fb36:	4621      	mov	r1, r4
    fb38:	480a      	ldr	r0, [pc, #40]	; (fb64 <z_impl_k_thread_suspend+0x80>)
    fb3a:	f006 f919 	bl	15d70 <z_priq_dumb_remove>
}
    fb3e:	e7e0      	b.n	fb02 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    fb40:	4b07      	ldr	r3, [pc, #28]	; (fb60 <z_impl_k_thread_suspend+0x7c>)
    fb42:	689b      	ldr	r3, [r3, #8]
    fb44:	42a3      	cmp	r3, r4
    fb46:	d000      	beq.n	fb4a <z_impl_k_thread_suspend+0x66>
}
    fb48:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    fb4a:	f04f 0320 	mov.w	r3, #32
    fb4e:	f3ef 8011 	mrs	r0, BASEPRI
    fb52:	f383 8812 	msr	BASEPRI_MAX, r3
    fb56:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fb5a:	f006 f8f4 	bl	15d46 <z_reschedule_irqlock>
    fb5e:	e7f3      	b.n	fb48 <z_impl_k_thread_suspend+0x64>
    fb60:	20020a18 	.word	0x20020a18
    fb64:	20020a38 	.word	0x20020a38

0000fb68 <k_sched_unlock>:

void k_sched_unlock(void)
{
    fb68:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    fb6a:	2300      	movs	r3, #0
    fb6c:	f04f 0220 	mov.w	r2, #32
    fb70:	f3ef 8411 	mrs	r4, BASEPRI
    fb74:	f382 8812 	msr	BASEPRI_MAX, r2
    fb78:	f3bf 8f6f 	isb	sy
    fb7c:	b96b      	cbnz	r3, fb9a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    fb7e:	4b0c      	ldr	r3, [pc, #48]	; (fbb0 <k_sched_unlock+0x48>)
    fb80:	689a      	ldr	r2, [r3, #8]
    fb82:	7bd3      	ldrb	r3, [r2, #15]
    fb84:	3301      	adds	r3, #1
    fb86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fb88:	2000      	movs	r0, #0
    fb8a:	f7ff fe07 	bl	f79c <update_cache>
	__asm__ volatile(
    fb8e:	f384 8811 	msr	BASEPRI, r4
    fb92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fb96:	2301      	movs	r3, #1
    fb98:	e7f0      	b.n	fb7c <k_sched_unlock+0x14>
	__asm__ volatile(
    fb9a:	f04f 0320 	mov.w	r3, #32
    fb9e:	f3ef 8011 	mrs	r0, BASEPRI
    fba2:	f383 8812 	msr	BASEPRI_MAX, r3
    fba6:	f3bf 8f6f 	isb	sy
    fbaa:	f006 f8cc 	bl	15d46 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    fbae:	bd10      	pop	{r4, pc}
    fbb0:	20020a18 	.word	0x20020a18

0000fbb4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    fbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    fbb6:	7b43      	ldrb	r3, [r0, #13]
    fbb8:	f013 0f08 	tst.w	r3, #8
    fbbc:	d145      	bne.n	fc4a <end_thread+0x96>
    fbbe:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    fbc0:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    fbc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fbc8:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    fbca:	f013 0f80 	tst.w	r3, #128	; 0x80
    fbce:	d114      	bne.n	fbfa <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    fbd0:	68ab      	ldr	r3, [r5, #8]
    fbd2:	b15b      	cbz	r3, fbec <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fbd4:	4628      	mov	r0, r5
    fbd6:	f006 f8aa 	bl	15d2e <pended_on_thread>
    fbda:	4629      	mov	r1, r5
    fbdc:	f006 f8c8 	bl	15d70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fbe0:	7b6b      	ldrb	r3, [r5, #13]
    fbe2:	f023 0302 	bic.w	r3, r3, #2
    fbe6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    fbe8:	2300      	movs	r3, #0
    fbea:	60ab      	str	r3, [r5, #8]
    fbec:	f105 0018 	add.w	r0, r5, #24
    fbf0:	f006 f9aa 	bl	15f48 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    fbf4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fbf8:	e01c      	b.n	fc34 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fbfe:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    fc00:	4601      	mov	r1, r0
    fc02:	4812      	ldr	r0, [pc, #72]	; (fc4c <end_thread+0x98>)
    fc04:	f006 f8b4 	bl	15d70 <z_priq_dumb_remove>
}
    fc08:	e7e2      	b.n	fbd0 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fc0a:	4620      	mov	r0, r4
    fc0c:	f006 f88f 	bl	15d2e <pended_on_thread>
    fc10:	4621      	mov	r1, r4
    fc12:	f006 f8ad 	bl	15d70 <z_priq_dumb_remove>
    fc16:	7b63      	ldrb	r3, [r4, #13]
    fc18:	f023 0302 	bic.w	r3, r3, #2
    fc1c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    fc1e:	2600      	movs	r6, #0
    fc20:	60a6      	str	r6, [r4, #8]
    fc22:	f104 0018 	add.w	r0, r4, #24
    fc26:	f006 f98f 	bl	15f48 <z_abort_timeout>
    fc2a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    fc2e:	4620      	mov	r0, r4
    fc30:	f7ff fe6a 	bl	f908 <ready_thread>
	return list->head == list;
    fc34:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc36:	42bc      	cmp	r4, r7
    fc38:	d001      	beq.n	fc3e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fc3a:	2c00      	cmp	r4, #0
    fc3c:	d1e5      	bne.n	fc0a <end_thread+0x56>
		update_cache(1);
    fc3e:	2001      	movs	r0, #1
    fc40:	f7ff fdac 	bl	f79c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    fc44:	4628      	mov	r0, r5
    fc46:	f7ff fb05 	bl	f254 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    fc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc4c:	20020a38 	.word	0x20020a38

0000fc50 <z_sched_init>:
{
    fc50:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    fc52:	4b05      	ldr	r3, [pc, #20]	; (fc68 <z_sched_init+0x18>)
    fc54:	f103 0220 	add.w	r2, r3, #32
    fc58:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    fc5a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fc5c:	2100      	movs	r1, #0
    fc5e:	4608      	mov	r0, r1
    fc60:	f7ff fd2c 	bl	f6bc <k_sched_time_slice_set>
}
    fc64:	bd08      	pop	{r3, pc}
    fc66:	bf00      	nop
    fc68:	20020a18 	.word	0x20020a18

0000fc6c <z_impl_k_yield>:
{
    fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc6e:	f04f 0320 	mov.w	r3, #32
    fc72:	f3ef 8611 	mrs	r6, BASEPRI
    fc76:	f383 8812 	msr	BASEPRI_MAX, r3
    fc7a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    fc7e:	4c1c      	ldr	r4, [pc, #112]	; (fcf0 <z_impl_k_yield+0x84>)
    fc80:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fc82:	7b4b      	ldrb	r3, [r1, #13]
    fc84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fc88:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    fc8a:	f104 0720 	add.w	r7, r4, #32
    fc8e:	4638      	mov	r0, r7
    fc90:	f006 f86e 	bl	15d70 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    fc94:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    fc96:	7b6b      	ldrb	r3, [r5, #13]
    fc98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fc9c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    fc9e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fca0:	42bc      	cmp	r4, r7
    fca2:	d023      	beq.n	fcec <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fca4:	b16c      	cbz	r4, fcc2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fca6:	4621      	mov	r1, r4
    fca8:	4628      	mov	r0, r5
    fcaa:	f006 f842 	bl	15d32 <z_sched_prio_cmp>
    fcae:	2800      	cmp	r0, #0
    fcb0:	dc16      	bgt.n	fce0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fcb2:	b134      	cbz	r4, fcc2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    fcb4:	4b0e      	ldr	r3, [pc, #56]	; (fcf0 <z_impl_k_yield+0x84>)
    fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fcb8:	429c      	cmp	r4, r3
    fcba:	d002      	beq.n	fcc2 <z_impl_k_yield+0x56>
    fcbc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fcbe:	2c00      	cmp	r4, #0
    fcc0:	d1f0      	bne.n	fca4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    fcc2:	4b0b      	ldr	r3, [pc, #44]	; (fcf0 <z_impl_k_yield+0x84>)
    fcc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fcc6:	f103 0120 	add.w	r1, r3, #32
    fcca:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    fccc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    fcce:	6015      	str	r5, [r2, #0]
	list->tail = node;
    fcd0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    fcd2:	2001      	movs	r0, #1
    fcd4:	f7ff fd62 	bl	f79c <update_cache>
    fcd8:	4630      	mov	r0, r6
    fcda:	f7f4 faa7 	bl	422c <arch_swap>
}
    fcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    fce0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    fce2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    fce4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    fce6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fce8:	6065      	str	r5, [r4, #4]
}
    fcea:	e7f2      	b.n	fcd2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fcec:	2400      	movs	r4, #0
    fcee:	e7d9      	b.n	fca4 <z_impl_k_yield+0x38>
    fcf0:	20020a18 	.word	0x20020a18

0000fcf4 <z_tick_sleep>:
{
    fcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	460d      	mov	r5, r1
	if (ticks == 0) {
    fcfc:	ea54 0105 	orrs.w	r1, r4, r5
    fd00:	d037      	beq.n	fd72 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    fd02:	f06f 0101 	mvn.w	r1, #1
    fd06:	1a0a      	subs	r2, r1, r0
    fd08:	f04f 31ff 	mov.w	r1, #4294967295
    fd0c:	eb61 0305 	sbc.w	r3, r1, r5
    fd10:	2a01      	cmp	r2, #1
    fd12:	f173 0300 	sbcs.w	r3, r3, #0
    fd16:	db30      	blt.n	fd7a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    fd18:	f06f 0601 	mvn.w	r6, #1
    fd1c:	1a36      	subs	r6, r6, r0
    fd1e:	f04f 0320 	mov.w	r3, #32
    fd22:	f3ef 8811 	mrs	r8, BASEPRI
    fd26:	f383 8812 	msr	BASEPRI_MAX, r3
    fd2a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    fd2e:	4f16      	ldr	r7, [pc, #88]	; (fd88 <z_tick_sleep+0x94>)
    fd30:	68b8      	ldr	r0, [r7, #8]
    fd32:	4b16      	ldr	r3, [pc, #88]	; (fd8c <z_tick_sleep+0x98>)
    fd34:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    fd36:	f7ff fe45 	bl	f9c4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    fd3a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fd3c:	4622      	mov	r2, r4
    fd3e:	462b      	mov	r3, r5
    fd40:	4913      	ldr	r1, [pc, #76]	; (fd90 <z_tick_sleep+0x9c>)
    fd42:	3018      	adds	r0, #24
    fd44:	f000 f8e2 	bl	ff0c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    fd48:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fd4a:	7b53      	ldrb	r3, [r2, #13]
    fd4c:	f043 0310 	orr.w	r3, r3, #16
    fd50:	7353      	strb	r3, [r2, #13]
    fd52:	4640      	mov	r0, r8
    fd54:	f7f4 fa6a 	bl	422c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    fd58:	2500      	movs	r5, #0
    fd5a:	f006 f954 	bl	16006 <sys_clock_tick_get_32>
    fd5e:	1a34      	subs	r4, r6, r0
    fd60:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    fd64:	2c01      	cmp	r4, #1
    fd66:	f175 0300 	sbcs.w	r3, r5, #0
    fd6a:	da0a      	bge.n	fd82 <z_tick_sleep+0x8e>
	return 0;
    fd6c:	2000      	movs	r0, #0
}
    fd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    fd72:	f7ff ff7b 	bl	fc6c <z_impl_k_yield>
		return 0;
    fd76:	2000      	movs	r0, #0
    fd78:	e7f9      	b.n	fd6e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    fd7a:	f006 f944 	bl	16006 <sys_clock_tick_get_32>
    fd7e:	1906      	adds	r6, r0, r4
    fd80:	e7cd      	b.n	fd1e <z_tick_sleep+0x2a>
		return ticks;
    fd82:	4620      	mov	r0, r4
    fd84:	e7f3      	b.n	fd6e <z_tick_sleep+0x7a>
    fd86:	bf00      	nop
    fd88:	20020a18 	.word	0x20020a18
    fd8c:	20020a4c 	.word	0x20020a4c
    fd90:	00015dc7 	.word	0x00015dc7

0000fd94 <z_impl_k_sleep>:
{
    fd94:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fd96:	f1b1 3fff 	cmp.w	r1, #4294967295
    fd9a:	bf08      	it	eq
    fd9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    fda0:	d01a      	beq.n	fdd8 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    fda2:	f7ff ffa7 	bl	fcf4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    fda6:	4604      	mov	r4, r0
    fda8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    fdaa:	0169      	lsls	r1, r5, #5
    fdac:	0143      	lsls	r3, r0, #5
    fdae:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    fdb2:	1a18      	subs	r0, r3, r0
    fdb4:	eb62 0305 	sbc.w	r3, r2, r5
    fdb8:	009a      	lsls	r2, r3, #2
    fdba:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    fdbe:	0081      	lsls	r1, r0, #2
    fdc0:	4613      	mov	r3, r2
    fdc2:	1908      	adds	r0, r1, r4
    fdc4:	eb45 0303 	adc.w	r3, r5, r3
    fdc8:	00da      	lsls	r2, r3, #3
    fdca:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    fdce:	00c1      	lsls	r1, r0, #3
    fdd0:	0bc8      	lsrs	r0, r1, #15
    fdd2:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    fdd6:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    fdd8:	4b03      	ldr	r3, [pc, #12]	; (fde8 <z_impl_k_sleep+0x54>)
    fdda:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    fddc:	f7ff fe82 	bl	fae4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    fde0:	f04f 30ff 	mov.w	r0, #4294967295
    fde4:	e7f7      	b.n	fdd6 <z_impl_k_sleep+0x42>
    fde6:	bf00      	nop
    fde8:	20020a18 	.word	0x20020a18

0000fdec <z_impl_z_current_get>:
}
    fdec:	4b01      	ldr	r3, [pc, #4]	; (fdf4 <z_impl_z_current_get+0x8>)
    fdee:	6898      	ldr	r0, [r3, #8]
    fdf0:	4770      	bx	lr
    fdf2:	bf00      	nop
    fdf4:	20020a18 	.word	0x20020a18

0000fdf8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    fdf8:	b538      	push	{r3, r4, r5, lr}
    fdfa:	f04f 0320 	mov.w	r3, #32
    fdfe:	f3ef 8511 	mrs	r5, BASEPRI
    fe02:	f383 8812 	msr	BASEPRI_MAX, r3
    fe06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    fe0a:	7b43      	ldrb	r3, [r0, #13]
    fe0c:	f013 0f08 	tst.w	r3, #8
    fe10:	d004      	beq.n	fe1c <z_thread_abort+0x24>
	__asm__ volatile(
    fe12:	f385 8811 	msr	BASEPRI, r5
    fe16:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    fe1a:	bd38      	pop	{r3, r4, r5, pc}
    fe1c:	4604      	mov	r4, r0
	end_thread(thread);
    fe1e:	f7ff fec9 	bl	fbb4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    fe22:	4b08      	ldr	r3, [pc, #32]	; (fe44 <z_thread_abort+0x4c>)
    fe24:	689b      	ldr	r3, [r3, #8]
    fe26:	42a3      	cmp	r3, r4
    fe28:	d004      	beq.n	fe34 <z_thread_abort+0x3c>
    fe2a:	f385 8811 	msr	BASEPRI, r5
    fe2e:	f3bf 8f6f 	isb	sy
    fe32:	e7f2      	b.n	fe1a <z_thread_abort+0x22>
    fe34:	f3ef 8305 	mrs	r3, IPSR
    fe38:	2b00      	cmp	r3, #0
    fe3a:	d1f6      	bne.n	fe2a <z_thread_abort+0x32>
    fe3c:	4628      	mov	r0, r5
    fe3e:	f7f4 f9f5 	bl	422c <arch_swap>
	return ret;
    fe42:	e7f2      	b.n	fe2a <z_thread_abort+0x32>
    fe44:	20020a18 	.word	0x20020a18

0000fe48 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    fe48:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    fe4a:	4806      	ldr	r0, [pc, #24]	; (fe64 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fe4c:	4a06      	ldr	r2, [pc, #24]	; (fe68 <z_data_copy+0x20>)
    fe4e:	1a12      	subs	r2, r2, r0
    fe50:	4906      	ldr	r1, [pc, #24]	; (fe6c <z_data_copy+0x24>)
    fe52:	f006 f91f 	bl	16094 <memcpy>
    fe56:	4a06      	ldr	r2, [pc, #24]	; (fe70 <z_data_copy+0x28>)
    fe58:	4906      	ldr	r1, [pc, #24]	; (fe74 <z_data_copy+0x2c>)
    fe5a:	4807      	ldr	r0, [pc, #28]	; (fe78 <z_data_copy+0x30>)
    fe5c:	f006 f91a 	bl	16094 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    fe60:	bd08      	pop	{r3, pc}
    fe62:	bf00      	nop
    fe64:	20000000 	.word	0x20000000
    fe68:	20000340 	.word	0x20000340
    fe6c:	0006bd88 	.word	0x0006bd88
    fe70:	00000000 	.word	0x00000000
    fe74:	0006bd88 	.word	0x0006bd88
    fe78:	20000000 	.word	0x20000000

0000fe7c <first>:
	return list->head == list;
    fe7c:	4b03      	ldr	r3, [pc, #12]	; (fe8c <first+0x10>)
    fe7e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe80:	4298      	cmp	r0, r3
    fe82:	d000      	beq.n	fe86 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    fe84:	4770      	bx	lr
    fe86:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    fe88:	e7fc      	b.n	fe84 <first+0x8>
    fe8a:	bf00      	nop
    fe8c:	20000064 	.word	0x20000064

0000fe90 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fe90:	b130      	cbz	r0, fea0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    fe92:	4a04      	ldr	r2, [pc, #16]	; (fea4 <next+0x14>)
    fe94:	6852      	ldr	r2, [r2, #4]
    fe96:	4290      	cmp	r0, r2
    fe98:	d001      	beq.n	fe9e <next+0xe>
    fe9a:	6800      	ldr	r0, [r0, #0]
    fe9c:	4770      	bx	lr
    fe9e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    fea0:	4770      	bx	lr
    fea2:	bf00      	nop
    fea4:	20000064 	.word	0x20000064

0000fea8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    fea8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    feaa:	4b04      	ldr	r3, [pc, #16]	; (febc <elapsed+0x14>)
    feac:	681b      	ldr	r3, [r3, #0]
    feae:	b10b      	cbz	r3, feb4 <elapsed+0xc>
    feb0:	2000      	movs	r0, #0
}
    feb2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    feb4:	f7f5 fede 	bl	5c74 <sys_clock_elapsed>
    feb8:	e7fb      	b.n	feb2 <elapsed+0xa>
    feba:	bf00      	nop
    febc:	20020a5c 	.word	0x20020a5c

0000fec0 <next_timeout>:

static int32_t next_timeout(void)
{
    fec0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    fec2:	f7ff ffdb 	bl	fe7c <first>
    fec6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    fec8:	f7ff ffee 	bl	fea8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    fecc:	b18c      	cbz	r4, fef2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fece:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    fed2:	1a12      	subs	r2, r2, r0
    fed4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    fed8:	2a01      	cmp	r2, #1
    feda:	f173 0100 	sbcs.w	r1, r3, #0
    fede:	db11      	blt.n	ff04 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    fee0:	4610      	mov	r0, r2
    fee2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    fee6:	f173 0300 	sbcs.w	r3, r3, #0
    feea:	db04      	blt.n	fef6 <next_timeout+0x36>
    feec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fef0:	e001      	b.n	fef6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    fef2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fef6:	4b04      	ldr	r3, [pc, #16]	; (ff08 <next_timeout+0x48>)
    fef8:	691b      	ldr	r3, [r3, #16]
    fefa:	b113      	cbz	r3, ff02 <next_timeout+0x42>
    fefc:	4283      	cmp	r3, r0
    fefe:	da00      	bge.n	ff02 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    ff00:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    ff02:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    ff04:	2000      	movs	r0, #0
    ff06:	e7f6      	b.n	fef6 <next_timeout+0x36>
    ff08:	20020a18 	.word	0x20020a18

0000ff0c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff10:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ff12:	f1b3 3fff 	cmp.w	r3, #4294967295
    ff16:	bf08      	it	eq
    ff18:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ff1c:	f000 8096 	beq.w	1004c <z_add_timeout+0x140>
    ff20:	4682      	mov	sl, r0
    ff22:	4614      	mov	r4, r2
    ff24:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    ff26:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    ff28:	2300      	movs	r3, #0
	__asm__ volatile(
    ff2a:	f04f 0220 	mov.w	r2, #32
    ff2e:	f3ef 8b11 	mrs	fp, BASEPRI
    ff32:	f382 8812 	msr	BASEPRI_MAX, r2
    ff36:	f3bf 8f6f 	isb	sy
    ff3a:	e02e      	b.n	ff9a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    ff3c:	2201      	movs	r2, #1
    ff3e:	2300      	movs	r3, #0
    ff40:	e04b      	b.n	ffda <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    ff42:	f7ff ffb1 	bl	fea8 <elapsed>
    ff46:	1822      	adds	r2, r4, r0
    ff48:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    ff4c:	3201      	adds	r2, #1
    ff4e:	f143 0300 	adc.w	r3, r3, #0
    ff52:	f8ca 2010 	str.w	r2, [sl, #16]
    ff56:	f8ca 3014 	str.w	r3, [sl, #20]
    ff5a:	e042      	b.n	ffe2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    ff5c:	9b00      	ldr	r3, [sp, #0]
    ff5e:	1ac2      	subs	r2, r0, r3
    ff60:	9b01      	ldr	r3, [sp, #4]
    ff62:	eb61 0303 	sbc.w	r3, r1, r3
    ff66:	f8cc 2010 	str.w	r2, [ip, #16]
    ff6a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    ff6e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    ff72:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    ff76:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    ff7a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    ff7e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    ff82:	f1bc 0f00 	cmp.w	ip, #0
    ff86:	d049      	beq.n	1001c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    ff88:	f7ff ff78 	bl	fe7c <first>
    ff8c:	4582      	cmp	sl, r0
    ff8e:	d050      	beq.n	10032 <z_add_timeout+0x126>
	__asm__ volatile(
    ff90:	f38b 8811 	msr	BASEPRI, fp
    ff94:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ff98:	2301      	movs	r3, #1
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	d156      	bne.n	1004c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ff9e:	f06f 0301 	mvn.w	r3, #1
    ffa2:	ebb3 0804 	subs.w	r8, r3, r4
    ffa6:	f04f 30ff 	mov.w	r0, #4294967295
    ffaa:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ffae:	f1b8 0f00 	cmp.w	r8, #0
    ffb2:	f179 0300 	sbcs.w	r3, r9, #0
    ffb6:	dbc4      	blt.n	ff42 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ffb8:	4a26      	ldr	r2, [pc, #152]	; (10054 <z_add_timeout+0x148>)
    ffba:	6813      	ldr	r3, [r2, #0]
    ffbc:	6852      	ldr	r2, [r2, #4]
    ffbe:	18e3      	adds	r3, r4, r3
    ffc0:	eb45 0202 	adc.w	r2, r5, r2
    ffc4:	f06f 0101 	mvn.w	r1, #1
    ffc8:	1ace      	subs	r6, r1, r3
    ffca:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    ffce:	4632      	mov	r2, r6
    ffd0:	463b      	mov	r3, r7
    ffd2:	2e01      	cmp	r6, #1
    ffd4:	f177 0100 	sbcs.w	r1, r7, #0
    ffd8:	dbb0      	blt.n	ff3c <z_add_timeout+0x30>
    ffda:	f8ca 2010 	str.w	r2, [sl, #16]
    ffde:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ffe2:	f7ff ff4b 	bl	fe7c <first>
    ffe6:	4684      	mov	ip, r0
    ffe8:	f1bc 0f00 	cmp.w	ip, #0
    ffec:	d0c9      	beq.n	ff82 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    ffee:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    fff2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    fff6:	e9cd 2300 	strd	r2, r3, [sp]
    fffa:	4282      	cmp	r2, r0
    fffc:	418b      	sbcs	r3, r1
    fffe:	dbad      	blt.n	ff5c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   10000:	9b00      	ldr	r3, [sp, #0]
   10002:	1a1a      	subs	r2, r3, r0
   10004:	9b01      	ldr	r3, [sp, #4]
   10006:	eb63 0301 	sbc.w	r3, r3, r1
   1000a:	f8ca 2010 	str.w	r2, [sl, #16]
   1000e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   10012:	4660      	mov	r0, ip
   10014:	f7ff ff3c 	bl	fe90 <next>
   10018:	4684      	mov	ip, r0
   1001a:	e7e5      	b.n	ffe8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1001c:	4b0e      	ldr	r3, [pc, #56]	; (10058 <z_add_timeout+0x14c>)
   1001e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   10020:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   10024:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   10028:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1002c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   10030:	e7aa      	b.n	ff88 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   10032:	f7ff ff45 	bl	fec0 <next_timeout>

			if (next_time == 0 ||
   10036:	4603      	mov	r3, r0
   10038:	b118      	cbz	r0, 10042 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1003a:	4a08      	ldr	r2, [pc, #32]	; (1005c <z_add_timeout+0x150>)
   1003c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1003e:	4282      	cmp	r2, r0
   10040:	d0a6      	beq.n	ff90 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   10042:	2100      	movs	r1, #0
   10044:	4618      	mov	r0, r3
   10046:	f7f5 fde1 	bl	5c0c <sys_clock_set_timeout>
   1004a:	e7a1      	b.n	ff90 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1004c:	b003      	add	sp, #12
   1004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10052:	bf00      	nop
   10054:	200004c0 	.word	0x200004c0
   10058:	20000064 	.word	0x20000064
   1005c:	20020a18 	.word	0x20020a18

00010060 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   10060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10062:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10064:	f7ff fc04 	bl	f870 <z_time_slice>
	__asm__ volatile(
   10068:	f04f 0320 	mov.w	r3, #32
   1006c:	f3ef 8511 	mrs	r5, BASEPRI
   10070:	f383 8812 	msr	BASEPRI_MAX, r3
   10074:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10078:	4b28      	ldr	r3, [pc, #160]	; (1011c <sys_clock_announce+0xbc>)
   1007a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1007c:	f7ff fefe 	bl	fe7c <first>
   10080:	4604      	mov	r4, r0
   10082:	b350      	cbz	r0, 100da <sys_clock_announce+0x7a>
   10084:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   10088:	4b24      	ldr	r3, [pc, #144]	; (1011c <sys_clock_announce+0xbc>)
   1008a:	681b      	ldr	r3, [r3, #0]
   1008c:	17d9      	asrs	r1, r3, #31
   1008e:	42b3      	cmp	r3, r6
   10090:	eb71 0207 	sbcs.w	r2, r1, r7
   10094:	db21      	blt.n	100da <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10096:	4a22      	ldr	r2, [pc, #136]	; (10120 <sys_clock_announce+0xc0>)
   10098:	e9d2 0100 	ldrd	r0, r1, [r2]
   1009c:	1980      	adds	r0, r0, r6
   1009e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   100a2:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   100a6:	1b9b      	subs	r3, r3, r6
   100a8:	4a1c      	ldr	r2, [pc, #112]	; (1011c <sys_clock_announce+0xbc>)
   100aa:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   100ac:	2200      	movs	r2, #0
   100ae:	2300      	movs	r3, #0
   100b0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   100b4:	4620      	mov	r0, r4
   100b6:	f005 ff30 	bl	15f1a <remove_timeout>
	__asm__ volatile(
   100ba:	f385 8811 	msr	BASEPRI, r5
   100be:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   100c2:	68a3      	ldr	r3, [r4, #8]
   100c4:	4620      	mov	r0, r4
   100c6:	4798      	blx	r3
	__asm__ volatile(
   100c8:	f04f 0320 	mov.w	r3, #32
   100cc:	f3ef 8511 	mrs	r5, BASEPRI
   100d0:	f383 8812 	msr	BASEPRI_MAX, r3
   100d4:	f3bf 8f6f 	isb	sy
   100d8:	e7d0      	b.n	1007c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   100da:	b144      	cbz	r4, 100ee <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   100dc:	4b0f      	ldr	r3, [pc, #60]	; (1011c <sys_clock_announce+0xbc>)
   100de:	6819      	ldr	r1, [r3, #0]
   100e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   100e4:	1a52      	subs	r2, r2, r1
   100e6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   100ea:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   100ee:	480c      	ldr	r0, [pc, #48]	; (10120 <sys_clock_announce+0xc0>)
   100f0:	490a      	ldr	r1, [pc, #40]	; (1011c <sys_clock_announce+0xbc>)
   100f2:	680c      	ldr	r4, [r1, #0]
   100f4:	e9d0 2300 	ldrd	r2, r3, [r0]
   100f8:	1912      	adds	r2, r2, r4
   100fa:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   100fe:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   10102:	2400      	movs	r4, #0
   10104:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10106:	f7ff fedb 	bl	fec0 <next_timeout>
   1010a:	4621      	mov	r1, r4
   1010c:	f7f5 fd7e 	bl	5c0c <sys_clock_set_timeout>
	__asm__ volatile(
   10110:	f385 8811 	msr	BASEPRI, r5
   10114:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1011a:	bf00      	nop
   1011c:	20020a5c 	.word	0x20020a5c
   10120:	200004c0 	.word	0x200004c0

00010124 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10124:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   10126:	2100      	movs	r1, #0
	__asm__ volatile(
   10128:	f04f 0320 	mov.w	r3, #32
   1012c:	f3ef 8411 	mrs	r4, BASEPRI
   10130:	f383 8812 	msr	BASEPRI_MAX, r3
   10134:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   10138:	2200      	movs	r2, #0
   1013a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1013c:	b969      	cbnz	r1, 1015a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1013e:	f7f5 fd99 	bl	5c74 <sys_clock_elapsed>
   10142:	4b07      	ldr	r3, [pc, #28]	; (10160 <sys_clock_tick_get+0x3c>)
   10144:	e9d3 2300 	ldrd	r2, r3, [r3]
   10148:	1812      	adds	r2, r2, r0
   1014a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1014e:	f384 8811 	msr	BASEPRI, r4
   10152:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10156:	2101      	movs	r1, #1
   10158:	e7f0      	b.n	1013c <sys_clock_tick_get+0x18>
	}
	return t;
}
   1015a:	4610      	mov	r0, r2
   1015c:	4619      	mov	r1, r3
   1015e:	bd10      	pop	{r4, pc}
   10160:	200004c0 	.word	0x200004c0

00010164 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   10164:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10166:	4a03      	ldr	r2, [pc, #12]	; (10174 <boot_banner+0x10>)
   10168:	4903      	ldr	r1, [pc, #12]	; (10178 <boot_banner+0x14>)
   1016a:	4804      	ldr	r0, [pc, #16]	; (1017c <boot_banner+0x18>)
   1016c:	f001 fe41 	bl	11df2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   10170:	bd08      	pop	{r3, pc}
   10172:	bf00      	nop
   10174:	00068948 	.word	0x00068948
   10178:	0006ba9c 	.word	0x0006ba9c
   1017c:	0006baa8 	.word	0x0006baa8

00010180 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   10180:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10182:	4c06      	ldr	r4, [pc, #24]	; (1019c <statics_init+0x1c>)
   10184:	4b06      	ldr	r3, [pc, #24]	; (101a0 <statics_init+0x20>)
   10186:	429c      	cmp	r4, r3
   10188:	d206      	bcs.n	10198 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1018a:	68a2      	ldr	r2, [r4, #8]
   1018c:	6861      	ldr	r1, [r4, #4]
   1018e:	4620      	mov	r0, r4
   10190:	f005 ff47 	bl	16022 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10194:	3418      	adds	r4, #24
   10196:	e7f5      	b.n	10184 <statics_init+0x4>
		}
	}
	return 0;
}
   10198:	2000      	movs	r0, #0
   1019a:	bd10      	pop	{r4, pc}
   1019c:	200002b4 	.word	0x200002b4
   101a0:	200002b4 	.word	0x200002b4

000101a4 <nrf_cc3xx_platform_init_no_rng>:
   101a4:	b510      	push	{r4, lr}
   101a6:	4c0a      	ldr	r4, [pc, #40]	; (101d0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   101a8:	6823      	ldr	r3, [r4, #0]
   101aa:	b11b      	cbz	r3, 101b4 <nrf_cc3xx_platform_init_no_rng+0x10>
   101ac:	2301      	movs	r3, #1
   101ae:	2000      	movs	r0, #0
   101b0:	6023      	str	r3, [r4, #0]
   101b2:	bd10      	pop	{r4, pc}
   101b4:	f000 f8d4 	bl	10360 <CC_LibInitNoRng>
   101b8:	2800      	cmp	r0, #0
   101ba:	d0f7      	beq.n	101ac <nrf_cc3xx_platform_init_no_rng+0x8>
   101bc:	3801      	subs	r0, #1
   101be:	2807      	cmp	r0, #7
   101c0:	d803      	bhi.n	101ca <nrf_cc3xx_platform_init_no_rng+0x26>
   101c2:	4b04      	ldr	r3, [pc, #16]	; (101d4 <nrf_cc3xx_platform_init_no_rng+0x30>)
   101c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   101c8:	bd10      	pop	{r4, pc}
   101ca:	4803      	ldr	r0, [pc, #12]	; (101d8 <nrf_cc3xx_platform_init_no_rng+0x34>)
   101cc:	bd10      	pop	{r4, pc}
   101ce:	bf00      	nop
   101d0:	20020a60 	.word	0x20020a60
   101d4:	0006bad0 	.word	0x0006bad0
   101d8:	ffff8ffe 	.word	0xffff8ffe

000101dc <nrf_cc3xx_platform_abort>:
   101dc:	f3bf 8f4f 	dsb	sy
   101e0:	4905      	ldr	r1, [pc, #20]	; (101f8 <nrf_cc3xx_platform_abort+0x1c>)
   101e2:	4b06      	ldr	r3, [pc, #24]	; (101fc <nrf_cc3xx_platform_abort+0x20>)
   101e4:	68ca      	ldr	r2, [r1, #12]
   101e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   101ea:	4313      	orrs	r3, r2
   101ec:	60cb      	str	r3, [r1, #12]
   101ee:	f3bf 8f4f 	dsb	sy
   101f2:	bf00      	nop
   101f4:	e7fd      	b.n	101f2 <nrf_cc3xx_platform_abort+0x16>
   101f6:	bf00      	nop
   101f8:	e000ed00 	.word	0xe000ed00
   101fc:	05fa0004 	.word	0x05fa0004

00010200 <CC_PalAbort>:
   10200:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   10204:	2100      	movs	r1, #0
   10206:	b430      	push	{r4, r5}
   10208:	4a08      	ldr	r2, [pc, #32]	; (1022c <CC_PalAbort+0x2c>)
   1020a:	4c09      	ldr	r4, [pc, #36]	; (10230 <CC_PalAbort+0x30>)
   1020c:	4d09      	ldr	r5, [pc, #36]	; (10234 <CC_PalAbort+0x34>)
   1020e:	6023      	str	r3, [r4, #0]
   10210:	602b      	str	r3, [r5, #0]
   10212:	6013      	str	r3, [r2, #0]
   10214:	60e3      	str	r3, [r4, #12]
   10216:	60eb      	str	r3, [r5, #12]
   10218:	60d3      	str	r3, [r2, #12]
   1021a:	61a3      	str	r3, [r4, #24]
   1021c:	4a06      	ldr	r2, [pc, #24]	; (10238 <CC_PalAbort+0x38>)
   1021e:	4c07      	ldr	r4, [pc, #28]	; (1023c <CC_PalAbort+0x3c>)
   10220:	61ab      	str	r3, [r5, #24]
   10222:	6863      	ldr	r3, [r4, #4]
   10224:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   10228:	bc30      	pop	{r4, r5}
   1022a:	4718      	bx	r3
   1022c:	50845408 	.word	0x50845408
   10230:	50845400 	.word	0x50845400
   10234:	50845404 	.word	0x50845404
   10238:	50844000 	.word	0x50844000
   1023c:	2000006c 	.word	0x2000006c

00010240 <nrf_cc3xx_platform_set_abort>:
   10240:	4b02      	ldr	r3, [pc, #8]	; (1024c <nrf_cc3xx_platform_set_abort+0xc>)
   10242:	e9d0 1200 	ldrd	r1, r2, [r0]
   10246:	e9c3 1200 	strd	r1, r2, [r3]
   1024a:	4770      	bx	lr
   1024c:	2000006c 	.word	0x2000006c

00010250 <mutex_free>:
   10250:	b510      	push	{r4, lr}
   10252:	4604      	mov	r4, r0
   10254:	b130      	cbz	r0, 10264 <mutex_free+0x14>
   10256:	6863      	ldr	r3, [r4, #4]
   10258:	06db      	lsls	r3, r3, #27
   1025a:	d502      	bpl.n	10262 <mutex_free+0x12>
   1025c:	2300      	movs	r3, #0
   1025e:	6023      	str	r3, [r4, #0]
   10260:	6063      	str	r3, [r4, #4]
   10262:	bd10      	pop	{r4, pc}
   10264:	4b02      	ldr	r3, [pc, #8]	; (10270 <mutex_free+0x20>)
   10266:	4803      	ldr	r0, [pc, #12]	; (10274 <mutex_free+0x24>)
   10268:	685b      	ldr	r3, [r3, #4]
   1026a:	4798      	blx	r3
   1026c:	e7f3      	b.n	10256 <mutex_free+0x6>
   1026e:	bf00      	nop
   10270:	2000006c 	.word	0x2000006c
   10274:	0006baf0 	.word	0x0006baf0

00010278 <mutex_unlock>:
   10278:	b168      	cbz	r0, 10296 <mutex_unlock+0x1e>
   1027a:	6843      	ldr	r3, [r0, #4]
   1027c:	b13b      	cbz	r3, 1028e <mutex_unlock+0x16>
   1027e:	06db      	lsls	r3, r3, #27
   10280:	d507      	bpl.n	10292 <mutex_unlock+0x1a>
   10282:	f3bf 8f5f 	dmb	sy
   10286:	2300      	movs	r3, #0
   10288:	6003      	str	r3, [r0, #0]
   1028a:	4618      	mov	r0, r3
   1028c:	4770      	bx	lr
   1028e:	4803      	ldr	r0, [pc, #12]	; (1029c <mutex_unlock+0x24>)
   10290:	4770      	bx	lr
   10292:	4803      	ldr	r0, [pc, #12]	; (102a0 <mutex_unlock+0x28>)
   10294:	4770      	bx	lr
   10296:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1029a:	4770      	bx	lr
   1029c:	ffff8fea 	.word	0xffff8fea
   102a0:	ffff8fe9 	.word	0xffff8fe9

000102a4 <mutex_init>:
   102a4:	b510      	push	{r4, lr}
   102a6:	4604      	mov	r4, r0
   102a8:	b120      	cbz	r0, 102b4 <mutex_init+0x10>
   102aa:	2200      	movs	r2, #0
   102ac:	2311      	movs	r3, #17
   102ae:	6022      	str	r2, [r4, #0]
   102b0:	6063      	str	r3, [r4, #4]
   102b2:	bd10      	pop	{r4, pc}
   102b4:	4801      	ldr	r0, [pc, #4]	; (102bc <mutex_init+0x18>)
   102b6:	f7ff ffa3 	bl	10200 <CC_PalAbort>
   102ba:	e7f6      	b.n	102aa <mutex_init+0x6>
   102bc:	0006bb18 	.word	0x0006bb18

000102c0 <mutex_lock>:
   102c0:	b1a0      	cbz	r0, 102ec <mutex_lock+0x2c>
   102c2:	6843      	ldr	r3, [r0, #4]
   102c4:	b183      	cbz	r3, 102e8 <mutex_lock+0x28>
   102c6:	06db      	lsls	r3, r3, #27
   102c8:	d50c      	bpl.n	102e4 <mutex_lock+0x24>
   102ca:	2201      	movs	r2, #1
   102cc:	e8d0 3fef 	ldaex	r3, [r0]
   102d0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   102d4:	2900      	cmp	r1, #0
   102d6:	d1f9      	bne.n	102cc <mutex_lock+0xc>
   102d8:	2b01      	cmp	r3, #1
   102da:	d0f7      	beq.n	102cc <mutex_lock+0xc>
   102dc:	f3bf 8f5f 	dmb	sy
   102e0:	2000      	movs	r0, #0
   102e2:	4770      	bx	lr
   102e4:	4803      	ldr	r0, [pc, #12]	; (102f4 <mutex_lock+0x34>)
   102e6:	4770      	bx	lr
   102e8:	4803      	ldr	r0, [pc, #12]	; (102f8 <mutex_lock+0x38>)
   102ea:	4770      	bx	lr
   102ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   102f0:	4770      	bx	lr
   102f2:	bf00      	nop
   102f4:	ffff8fe9 	.word	0xffff8fe9
   102f8:	ffff8fea 	.word	0xffff8fea

000102fc <nrf_cc3xx_platform_set_mutexes>:
   102fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10300:	4c14      	ldr	r4, [pc, #80]	; (10354 <nrf_cc3xx_platform_set_mutexes+0x58>)
   10302:	6802      	ldr	r2, [r0, #0]
   10304:	68c3      	ldr	r3, [r0, #12]
   10306:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   1030a:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1030e:	e9c4 2500 	strd	r2, r5, [r4]
   10312:	4b11      	ldr	r3, [pc, #68]	; (10358 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   10314:	680e      	ldr	r6, [r1, #0]
   10316:	6848      	ldr	r0, [r1, #4]
   10318:	4d10      	ldr	r5, [pc, #64]	; (1035c <nrf_cc3xx_platform_set_mutexes+0x60>)
   1031a:	e9c3 6000 	strd	r6, r0, [r3]
   1031e:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   10322:	6908      	ldr	r0, [r1, #16]
   10324:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   10328:	e9c3 7602 	strd	r7, r6, [r3, #8]
   1032c:	6118      	str	r0, [r3, #16]
   1032e:	06cb      	lsls	r3, r1, #27
   10330:	d50d      	bpl.n	1034e <nrf_cc3xx_platform_set_mutexes+0x52>
   10332:	2300      	movs	r3, #0
   10334:	f505 7088 	add.w	r0, r5, #272	; 0x110
   10338:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1033c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   10340:	4790      	blx	r2
   10342:	6823      	ldr	r3, [r4, #0]
   10344:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   10348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1034c:	4718      	bx	r3
   1034e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10352:	bf00      	nop
   10354:	2000007c 	.word	0x2000007c
   10358:	2000008c 	.word	0x2000008c
   1035c:	20020a88 	.word	0x20020a88

00010360 <CC_LibInitNoRng>:
   10360:	b508      	push	{r3, lr}
   10362:	f000 f80f 	bl	10384 <CC_HalInit>
   10366:	b928      	cbnz	r0, 10374 <CC_LibInitNoRng+0x14>
   10368:	f000 f80e 	bl	10388 <CC_PalInit>
   1036c:	b930      	cbnz	r0, 1037c <CC_LibInitNoRng+0x1c>
   1036e:	4a04      	ldr	r2, [pc, #16]	; (10380 <CC_LibInitNoRng+0x20>)
   10370:	6010      	str	r0, [r2, #0]
   10372:	bd08      	pop	{r3, pc}
   10374:	f000 f836 	bl	103e4 <CC_PalTerminate>
   10378:	2003      	movs	r0, #3
   1037a:	bd08      	pop	{r3, pc}
   1037c:	2004      	movs	r0, #4
   1037e:	bd08      	pop	{r3, pc}
   10380:	50845a0c 	.word	0x50845a0c

00010384 <CC_HalInit>:
   10384:	2000      	movs	r0, #0
   10386:	4770      	bx	lr

00010388 <CC_PalInit>:
   10388:	b510      	push	{r4, lr}
   1038a:	4811      	ldr	r0, [pc, #68]	; (103d0 <CC_PalInit+0x48>)
   1038c:	f000 f848 	bl	10420 <CC_PalMutexCreate>
   10390:	b100      	cbz	r0, 10394 <CC_PalInit+0xc>
   10392:	bd10      	pop	{r4, pc}
   10394:	480f      	ldr	r0, [pc, #60]	; (103d4 <CC_PalInit+0x4c>)
   10396:	f000 f843 	bl	10420 <CC_PalMutexCreate>
   1039a:	2800      	cmp	r0, #0
   1039c:	d1f9      	bne.n	10392 <CC_PalInit+0xa>
   1039e:	4c0e      	ldr	r4, [pc, #56]	; (103d8 <CC_PalInit+0x50>)
   103a0:	4620      	mov	r0, r4
   103a2:	f000 f83d 	bl	10420 <CC_PalMutexCreate>
   103a6:	2800      	cmp	r0, #0
   103a8:	d1f3      	bne.n	10392 <CC_PalInit+0xa>
   103aa:	4b0c      	ldr	r3, [pc, #48]	; (103dc <CC_PalInit+0x54>)
   103ac:	480c      	ldr	r0, [pc, #48]	; (103e0 <CC_PalInit+0x58>)
   103ae:	601c      	str	r4, [r3, #0]
   103b0:	f000 f836 	bl	10420 <CC_PalMutexCreate>
   103b4:	4601      	mov	r1, r0
   103b6:	2800      	cmp	r0, #0
   103b8:	d1eb      	bne.n	10392 <CC_PalInit+0xa>
   103ba:	f000 f82d 	bl	10418 <CC_PalDmaInit>
   103be:	4604      	mov	r4, r0
   103c0:	b108      	cbz	r0, 103c6 <CC_PalInit+0x3e>
   103c2:	4620      	mov	r0, r4
   103c4:	bd10      	pop	{r4, pc}
   103c6:	f000 f83f 	bl	10448 <CC_PalPowerSaveModeInit>
   103ca:	4620      	mov	r0, r4
   103cc:	e7fa      	b.n	103c4 <CC_PalInit+0x3c>
   103ce:	bf00      	nop
   103d0:	200000c4 	.word	0x200000c4
   103d4:	200000b8 	.word	0x200000b8
   103d8:	200000c0 	.word	0x200000c0
   103dc:	200000c8 	.word	0x200000c8
   103e0:	200000bc 	.word	0x200000bc

000103e4 <CC_PalTerminate>:
   103e4:	b508      	push	{r3, lr}
   103e6:	4808      	ldr	r0, [pc, #32]	; (10408 <CC_PalTerminate+0x24>)
   103e8:	f000 f824 	bl	10434 <CC_PalMutexDestroy>
   103ec:	4807      	ldr	r0, [pc, #28]	; (1040c <CC_PalTerminate+0x28>)
   103ee:	f000 f821 	bl	10434 <CC_PalMutexDestroy>
   103f2:	4807      	ldr	r0, [pc, #28]	; (10410 <CC_PalTerminate+0x2c>)
   103f4:	f000 f81e 	bl	10434 <CC_PalMutexDestroy>
   103f8:	4806      	ldr	r0, [pc, #24]	; (10414 <CC_PalTerminate+0x30>)
   103fa:	f000 f81b 	bl	10434 <CC_PalMutexDestroy>
   103fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10402:	f000 b80b 	b.w	1041c <CC_PalDmaTerminate>
   10406:	bf00      	nop
   10408:	200000c4 	.word	0x200000c4
   1040c:	200000b8 	.word	0x200000b8
   10410:	200000c0 	.word	0x200000c0
   10414:	200000bc 	.word	0x200000bc

00010418 <CC_PalDmaInit>:
   10418:	2000      	movs	r0, #0
   1041a:	4770      	bx	lr

0001041c <CC_PalDmaTerminate>:
   1041c:	4770      	bx	lr
   1041e:	bf00      	nop

00010420 <CC_PalMutexCreate>:
   10420:	b508      	push	{r3, lr}
   10422:	4b03      	ldr	r3, [pc, #12]	; (10430 <CC_PalMutexCreate+0x10>)
   10424:	6802      	ldr	r2, [r0, #0]
   10426:	681b      	ldr	r3, [r3, #0]
   10428:	6810      	ldr	r0, [r2, #0]
   1042a:	4798      	blx	r3
   1042c:	2000      	movs	r0, #0
   1042e:	bd08      	pop	{r3, pc}
   10430:	2000007c 	.word	0x2000007c

00010434 <CC_PalMutexDestroy>:
   10434:	b508      	push	{r3, lr}
   10436:	4b03      	ldr	r3, [pc, #12]	; (10444 <CC_PalMutexDestroy+0x10>)
   10438:	6802      	ldr	r2, [r0, #0]
   1043a:	685b      	ldr	r3, [r3, #4]
   1043c:	6810      	ldr	r0, [r2, #0]
   1043e:	4798      	blx	r3
   10440:	2000      	movs	r0, #0
   10442:	bd08      	pop	{r3, pc}
   10444:	2000007c 	.word	0x2000007c

00010448 <CC_PalPowerSaveModeInit>:
   10448:	b570      	push	{r4, r5, r6, lr}
   1044a:	4c09      	ldr	r4, [pc, #36]	; (10470 <CC_PalPowerSaveModeInit+0x28>)
   1044c:	4d09      	ldr	r5, [pc, #36]	; (10474 <CC_PalPowerSaveModeInit+0x2c>)
   1044e:	6920      	ldr	r0, [r4, #16]
   10450:	68ab      	ldr	r3, [r5, #8]
   10452:	4798      	blx	r3
   10454:	b118      	cbz	r0, 1045e <CC_PalPowerSaveModeInit+0x16>
   10456:	4b08      	ldr	r3, [pc, #32]	; (10478 <CC_PalPowerSaveModeInit+0x30>)
   10458:	4808      	ldr	r0, [pc, #32]	; (1047c <CC_PalPowerSaveModeInit+0x34>)
   1045a:	685b      	ldr	r3, [r3, #4]
   1045c:	4798      	blx	r3
   1045e:	2100      	movs	r1, #0
   10460:	4a07      	ldr	r2, [pc, #28]	; (10480 <CC_PalPowerSaveModeInit+0x38>)
   10462:	68eb      	ldr	r3, [r5, #12]
   10464:	6011      	str	r1, [r2, #0]
   10466:	6920      	ldr	r0, [r4, #16]
   10468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1046c:	4718      	bx	r3
   1046e:	bf00      	nop
   10470:	2000008c 	.word	0x2000008c
   10474:	2000007c 	.word	0x2000007c
   10478:	2000006c 	.word	0x2000006c
   1047c:	0006bb3c 	.word	0x0006bb3c
   10480:	20020a74 	.word	0x20020a74

00010484 <_ZSt15get_new_handlerv>:
   10484:	4b01      	ldr	r3, [pc, #4]	; (1048c <_ZSt15get_new_handlerv+0x8>)
   10486:	e8d3 0faf 	lda	r0, [r3]
   1048a:	4770      	bx	lr
   1048c:	20020a78 	.word	0x20020a78

00010490 <frexp>:
   10490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10492:	f8df c064 	ldr.w	ip, [pc, #100]	; 104f8 <frexp+0x68>
   10496:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1049a:	2700      	movs	r7, #0
   1049c:	4604      	mov	r4, r0
   1049e:	4563      	cmp	r3, ip
   104a0:	460d      	mov	r5, r1
   104a2:	4616      	mov	r6, r2
   104a4:	6017      	str	r7, [r2, #0]
   104a6:	dc20      	bgt.n	104ea <frexp+0x5a>
   104a8:	4684      	mov	ip, r0
   104aa:	ea53 0c0c 	orrs.w	ip, r3, ip
   104ae:	d01c      	beq.n	104ea <frexp+0x5a>
   104b0:	f8df c048 	ldr.w	ip, [pc, #72]	; 104fc <frexp+0x6c>
   104b4:	460a      	mov	r2, r1
   104b6:	ea01 0c0c 	and.w	ip, r1, ip
   104ba:	f1bc 0f00 	cmp.w	ip, #0
   104be:	d109      	bne.n	104d4 <frexp+0x44>
   104c0:	2200      	movs	r2, #0
   104c2:	4b0b      	ldr	r3, [pc, #44]	; (104f0 <frexp+0x60>)
   104c4:	f7f0 f804 	bl	4d0 <__aeabi_dmul>
   104c8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   104cc:	4604      	mov	r4, r0
   104ce:	460a      	mov	r2, r1
   104d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   104d4:	4907      	ldr	r1, [pc, #28]	; (104f4 <frexp+0x64>)
   104d6:	151b      	asrs	r3, r3, #20
   104d8:	4011      	ands	r1, r2
   104da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   104de:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
   104e2:	443b      	add	r3, r7
   104e4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   104e8:	6033      	str	r3, [r6, #0]
   104ea:	4620      	mov	r0, r4
   104ec:	4629      	mov	r1, r5
   104ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104f0:	43500000 	.word	0x43500000
   104f4:	800fffff 	.word	0x800fffff
   104f8:	7fefffff 	.word	0x7fefffff
   104fc:	7ff00000 	.word	0x7ff00000

00010500 <round>:
   10500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10502:	f3c1 570a 	ubfx	r7, r1, #20, #11
   10506:	460d      	mov	r5, r1
   10508:	460b      	mov	r3, r1
   1050a:	4602      	mov	r2, r0
   1050c:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   10510:	2c13      	cmp	r4, #19
   10512:	dc12      	bgt.n	1053a <round+0x3a>
   10514:	2c00      	cmp	r4, #0
   10516:	db2c      	blt.n	10572 <round+0x72>
   10518:	491b      	ldr	r1, [pc, #108]	; (10588 <round+0x88>)
   1051a:	4121      	asrs	r1, r4
   1051c:	ea05 0001 	and.w	r0, r5, r1
   10520:	4310      	orrs	r0, r2
   10522:	d007      	beq.n	10534 <round+0x34>
   10524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   10528:	2200      	movs	r2, #0
   1052a:	4123      	asrs	r3, r4
   1052c:	441d      	add	r5, r3
   1052e:	ea25 0501 	bic.w	r5, r5, r1
   10532:	462b      	mov	r3, r5
   10534:	4610      	mov	r0, r2
   10536:	4619      	mov	r1, r3
   10538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1053a:	2c33      	cmp	r4, #51	; 0x33
   1053c:	dd07      	ble.n	1054e <round+0x4e>
   1053e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   10542:	d1f7      	bne.n	10534 <round+0x34>
   10544:	f7ef fe0e 	bl	164 <__adddf3>
   10548:	4602      	mov	r2, r0
   1054a:	460b      	mov	r3, r1
   1054c:	e7f2      	b.n	10534 <round+0x34>
   1054e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   10552:	f04f 31ff 	mov.w	r1, #4294967295
   10556:	fa21 f707 	lsr.w	r7, r1, r7
   1055a:	4238      	tst	r0, r7
   1055c:	d0ea      	beq.n	10534 <round+0x34>
   1055e:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   10562:	2201      	movs	r2, #1
   10564:	409a      	lsls	r2, r3
   10566:	1882      	adds	r2, r0, r2
   10568:	bf28      	it	cs
   1056a:	3501      	addcs	r5, #1
   1056c:	ea22 0207 	bic.w	r2, r2, r7
   10570:	e7df      	b.n	10532 <round+0x32>
   10572:	3401      	adds	r4, #1
   10574:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   10578:	d002      	beq.n	10580 <round+0x80>
   1057a:	461d      	mov	r5, r3
   1057c:	2200      	movs	r2, #0
   1057e:	e7d8      	b.n	10532 <round+0x32>
   10580:	4d02      	ldr	r5, [pc, #8]	; (1058c <round+0x8c>)
   10582:	2200      	movs	r2, #0
   10584:	431d      	orrs	r5, r3
   10586:	e7d4      	b.n	10532 <round+0x32>
   10588:	000fffff 	.word	0x000fffff
   1058c:	3ff00000 	.word	0x3ff00000

00010590 <expf>:
   10590:	b5f0      	push	{r4, r5, r6, r7, lr}
   10592:	4e33      	ldr	r6, [pc, #204]	; (10660 <expf+0xd0>)
   10594:	b08b      	sub	sp, #44	; 0x2c
   10596:	4605      	mov	r5, r0
   10598:	f000 f86e 	bl	10678 <__ieee754_expf>
   1059c:	f996 3000 	ldrsb.w	r3, [r6]
   105a0:	4604      	mov	r4, r0
   105a2:	3301      	adds	r3, #1
   105a4:	d00f      	beq.n	105c6 <expf+0x36>
   105a6:	4628      	mov	r0, r5
   105a8:	f000 f982 	bl	108b0 <finitef>
   105ac:	b158      	cbz	r0, 105c6 <expf+0x36>
   105ae:	492d      	ldr	r1, [pc, #180]	; (10664 <expf+0xd4>)
   105b0:	4628      	mov	r0, r5
   105b2:	f7f0 fd69 	bl	1088 <__aeabi_fcmpgt>
   105b6:	4607      	mov	r7, r0
   105b8:	2800      	cmp	r0, #0
   105ba:	d134      	bne.n	10626 <expf+0x96>
   105bc:	492a      	ldr	r1, [pc, #168]	; (10668 <expf+0xd8>)
   105be:	4628      	mov	r0, r5
   105c0:	f7f0 fd44 	bl	104c <__aeabi_fcmplt>
   105c4:	b910      	cbnz	r0, 105cc <expf+0x3c>
   105c6:	4620      	mov	r0, r4
   105c8:	b00b      	add	sp, #44	; 0x2c
   105ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105cc:	4b27      	ldr	r3, [pc, #156]	; (1066c <expf+0xdc>)
   105ce:	2204      	movs	r2, #4
   105d0:	4628      	mov	r0, r5
   105d2:	9708      	str	r7, [sp, #32]
   105d4:	2400      	movs	r4, #0
   105d6:	2500      	movs	r5, #0
   105d8:	e9cd 2300 	strd	r2, r3, [sp]
   105dc:	f7ef ff20 	bl	420 <__aeabi_f2d>
   105e0:	f996 3000 	ldrsb.w	r3, [r6]
   105e4:	2b02      	cmp	r3, #2
   105e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   105ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   105ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   105f2:	d013      	beq.n	1061c <expf+0x8c>
   105f4:	4668      	mov	r0, sp
   105f6:	f000 f959 	bl	108ac <matherr>
   105fa:	b178      	cbz	r0, 1061c <expf+0x8c>
   105fc:	9b08      	ldr	r3, [sp, #32]
   105fe:	bb4b      	cbnz	r3, 10654 <expf+0xc4>
   10600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10604:	f7f0 fa26 	bl	a54 <__aeabi_d2f>
   10608:	4604      	mov	r4, r0
   1060a:	4620      	mov	r0, r4
   1060c:	b00b      	add	sp, #44	; 0x2c
   1060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10610:	2000      	movs	r0, #0
   10612:	4917      	ldr	r1, [pc, #92]	; (10670 <expf+0xe0>)
   10614:	2b02      	cmp	r3, #2
   10616:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1061a:	d1eb      	bne.n	105f4 <expf+0x64>
   1061c:	f002 f8e8 	bl	127f0 <__errno>
   10620:	2322      	movs	r3, #34	; 0x22
   10622:	6003      	str	r3, [r0, #0]
   10624:	e7ea      	b.n	105fc <expf+0x6c>
   10626:	2300      	movs	r3, #0
   10628:	2103      	movs	r1, #3
   1062a:	4a10      	ldr	r2, [pc, #64]	; (1066c <expf+0xdc>)
   1062c:	4628      	mov	r0, r5
   1062e:	9308      	str	r3, [sp, #32]
   10630:	e9cd 1200 	strd	r1, r2, [sp]
   10634:	f7ef fef4 	bl	420 <__aeabi_f2d>
   10638:	f996 3000 	ldrsb.w	r3, [r6]
   1063c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10640:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10644:	2b00      	cmp	r3, #0
   10646:	d1e3      	bne.n	10610 <expf+0x80>
   10648:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1064c:	4b09      	ldr	r3, [pc, #36]	; (10674 <expf+0xe4>)
   1064e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10652:	e7cf      	b.n	105f4 <expf+0x64>
   10654:	f002 f8cc 	bl	127f0 <__errno>
   10658:	9b08      	ldr	r3, [sp, #32]
   1065a:	6003      	str	r3, [r0, #0]
   1065c:	e7d0      	b.n	10600 <expf+0x70>
   1065e:	bf00      	nop
   10660:	2000029c 	.word	0x2000029c
   10664:	42b17180 	.word	0x42b17180
   10668:	c2cff1b5 	.word	0xc2cff1b5
   1066c:	0006bb5c 	.word	0x0006bb5c
   10670:	7ff00000 	.word	0x7ff00000
   10674:	47efffff 	.word	0x47efffff

00010678 <__ieee754_expf>:
   10678:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   1067c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   10680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10684:	4604      	mov	r4, r0
   10686:	d86e      	bhi.n	10766 <__ieee754_expf+0xee>
   10688:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   1068c:	f000 80bf 	beq.w	1080e <__ieee754_expf+0x196>
   10690:	4976      	ldr	r1, [pc, #472]	; (1086c <__ieee754_expf+0x1f4>)
   10692:	4288      	cmp	r0, r1
   10694:	dc6c      	bgt.n	10770 <__ieee754_expf+0xf8>
   10696:	b12d      	cbz	r5, 106a4 <__ieee754_expf+0x2c>
   10698:	4b75      	ldr	r3, [pc, #468]	; (10870 <__ieee754_expf+0x1f8>)
   1069a:	429a      	cmp	r2, r3
   1069c:	d902      	bls.n	106a4 <__ieee754_expf+0x2c>
   1069e:	2000      	movs	r0, #0
   106a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106a4:	4b73      	ldr	r3, [pc, #460]	; (10874 <__ieee754_expf+0x1fc>)
   106a6:	429a      	cmp	r2, r3
   106a8:	d968      	bls.n	1077c <__ieee754_expf+0x104>
   106aa:	4b73      	ldr	r3, [pc, #460]	; (10878 <__ieee754_expf+0x200>)
   106ac:	429a      	cmp	r2, r3
   106ae:	f200 80ba 	bhi.w	10826 <__ieee754_expf+0x1ae>
   106b2:	4b72      	ldr	r3, [pc, #456]	; (1087c <__ieee754_expf+0x204>)
   106b4:	4620      	mov	r0, r4
   106b6:	f1c5 0401 	rsb	r4, r5, #1
   106ba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   106be:	f7f0 fa1d 	bl	afc <__aeabi_fsub>
   106c2:	4b6f      	ldr	r3, [pc, #444]	; (10880 <__ieee754_expf+0x208>)
   106c4:	4680      	mov	r8, r0
   106c6:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   106ca:	1b65      	subs	r5, r4, r5
   106cc:	4649      	mov	r1, r9
   106ce:	4640      	mov	r0, r8
   106d0:	f7f0 fa14 	bl	afc <__aeabi_fsub>
   106d4:	4601      	mov	r1, r0
   106d6:	4606      	mov	r6, r0
   106d8:	4604      	mov	r4, r0
   106da:	f7f0 fb19 	bl	d10 <__aeabi_fmul>
   106de:	4969      	ldr	r1, [pc, #420]	; (10884 <__ieee754_expf+0x20c>)
   106e0:	4607      	mov	r7, r0
   106e2:	f7f0 fb15 	bl	d10 <__aeabi_fmul>
   106e6:	4968      	ldr	r1, [pc, #416]	; (10888 <__ieee754_expf+0x210>)
   106e8:	f7f0 fa08 	bl	afc <__aeabi_fsub>
   106ec:	4639      	mov	r1, r7
   106ee:	f7f0 fb0f 	bl	d10 <__aeabi_fmul>
   106f2:	4966      	ldr	r1, [pc, #408]	; (1088c <__ieee754_expf+0x214>)
   106f4:	f7f0 fa04 	bl	b00 <__addsf3>
   106f8:	4639      	mov	r1, r7
   106fa:	f7f0 fb09 	bl	d10 <__aeabi_fmul>
   106fe:	4964      	ldr	r1, [pc, #400]	; (10890 <__ieee754_expf+0x218>)
   10700:	f7f0 f9fc 	bl	afc <__aeabi_fsub>
   10704:	4639      	mov	r1, r7
   10706:	f7f0 fb03 	bl	d10 <__aeabi_fmul>
   1070a:	4962      	ldr	r1, [pc, #392]	; (10894 <__ieee754_expf+0x21c>)
   1070c:	f7f0 f9f8 	bl	b00 <__addsf3>
   10710:	4639      	mov	r1, r7
   10712:	f7f0 fafd 	bl	d10 <__aeabi_fmul>
   10716:	4601      	mov	r1, r0
   10718:	4630      	mov	r0, r6
   1071a:	f7f0 f9ef 	bl	afc <__aeabi_fsub>
   1071e:	4607      	mov	r7, r0
   10720:	4682      	mov	sl, r0
   10722:	2d00      	cmp	r5, #0
   10724:	d05c      	beq.n	107e0 <__ieee754_expf+0x168>
   10726:	4639      	mov	r1, r7
   10728:	4630      	mov	r0, r6
   1072a:	f7f0 faf1 	bl	d10 <__aeabi_fmul>
   1072e:	4604      	mov	r4, r0
   10730:	4639      	mov	r1, r7
   10732:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10736:	f7f0 f9e1 	bl	afc <__aeabi_fsub>
   1073a:	4601      	mov	r1, r0
   1073c:	4620      	mov	r0, r4
   1073e:	f7f0 fb9b 	bl	e78 <__aeabi_fdiv>
   10742:	4601      	mov	r1, r0
   10744:	4648      	mov	r0, r9
   10746:	f7f0 f9d9 	bl	afc <__aeabi_fsub>
   1074a:	4641      	mov	r1, r8
   1074c:	f7f0 f9d6 	bl	afc <__aeabi_fsub>
   10750:	4601      	mov	r1, r0
   10752:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10756:	f7f0 f9d1 	bl	afc <__aeabi_fsub>
   1075a:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1075e:	db5a      	blt.n	10816 <__ieee754_expf+0x19e>
   10760:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   10764:	e002      	b.n	1076c <__ieee754_expf+0xf4>
   10766:	4601      	mov	r1, r0
   10768:	f7f0 f9ca 	bl	b00 <__addsf3>
   1076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10770:	4949      	ldr	r1, [pc, #292]	; (10898 <__ieee754_expf+0x220>)
   10772:	4608      	mov	r0, r1
   10774:	f7f0 facc 	bl	d10 <__aeabi_fmul>
   10778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1077c:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   10780:	d209      	bcs.n	10796 <__ieee754_expf+0x11e>
   10782:	4945      	ldr	r1, [pc, #276]	; (10898 <__ieee754_expf+0x220>)
   10784:	4620      	mov	r0, r4
   10786:	f7f0 f9bb 	bl	b00 <__addsf3>
   1078a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1078e:	f7f0 fc7b 	bl	1088 <__aeabi_fcmpgt>
   10792:	2800      	cmp	r0, #0
   10794:	d164      	bne.n	10860 <__ieee754_expf+0x1e8>
   10796:	4621      	mov	r1, r4
   10798:	4620      	mov	r0, r4
   1079a:	f7f0 fab9 	bl	d10 <__aeabi_fmul>
   1079e:	4939      	ldr	r1, [pc, #228]	; (10884 <__ieee754_expf+0x20c>)
   107a0:	4605      	mov	r5, r0
   107a2:	f7f0 fab5 	bl	d10 <__aeabi_fmul>
   107a6:	4938      	ldr	r1, [pc, #224]	; (10888 <__ieee754_expf+0x210>)
   107a8:	f7f0 f9a8 	bl	afc <__aeabi_fsub>
   107ac:	4629      	mov	r1, r5
   107ae:	f7f0 faaf 	bl	d10 <__aeabi_fmul>
   107b2:	4936      	ldr	r1, [pc, #216]	; (1088c <__ieee754_expf+0x214>)
   107b4:	f7f0 f9a4 	bl	b00 <__addsf3>
   107b8:	4629      	mov	r1, r5
   107ba:	f7f0 faa9 	bl	d10 <__aeabi_fmul>
   107be:	4934      	ldr	r1, [pc, #208]	; (10890 <__ieee754_expf+0x218>)
   107c0:	f7f0 f99c 	bl	afc <__aeabi_fsub>
   107c4:	4629      	mov	r1, r5
   107c6:	f7f0 faa3 	bl	d10 <__aeabi_fmul>
   107ca:	4932      	ldr	r1, [pc, #200]	; (10894 <__ieee754_expf+0x21c>)
   107cc:	f7f0 f998 	bl	b00 <__addsf3>
   107d0:	4629      	mov	r1, r5
   107d2:	f7f0 fa9d 	bl	d10 <__aeabi_fmul>
   107d6:	4601      	mov	r1, r0
   107d8:	4620      	mov	r0, r4
   107da:	f7f0 f98f 	bl	afc <__aeabi_fsub>
   107de:	4682      	mov	sl, r0
   107e0:	4651      	mov	r1, sl
   107e2:	4620      	mov	r0, r4
   107e4:	f7f0 fa94 	bl	d10 <__aeabi_fmul>
   107e8:	4605      	mov	r5, r0
   107ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   107ee:	4650      	mov	r0, sl
   107f0:	f7f0 f984 	bl	afc <__aeabi_fsub>
   107f4:	4601      	mov	r1, r0
   107f6:	4628      	mov	r0, r5
   107f8:	f7f0 fb3e 	bl	e78 <__aeabi_fdiv>
   107fc:	4621      	mov	r1, r4
   107fe:	f7f0 f97d 	bl	afc <__aeabi_fsub>
   10802:	4601      	mov	r1, r0
   10804:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10808:	f7f0 f978 	bl	afc <__aeabi_fsub>
   1080c:	e7ae      	b.n	1076c <__ieee754_expf+0xf4>
   1080e:	2d00      	cmp	r5, #0
   10810:	f47f af45 	bne.w	1069e <__ieee754_expf+0x26>
   10814:	e7aa      	b.n	1076c <__ieee754_expf+0xf4>
   10816:	3564      	adds	r5, #100	; 0x64
   10818:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   1081c:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   10820:	f7f0 fa76 	bl	d10 <__aeabi_fmul>
   10824:	e7a2      	b.n	1076c <__ieee754_expf+0xf4>
   10826:	491d      	ldr	r1, [pc, #116]	; (1089c <__ieee754_expf+0x224>)
   10828:	4620      	mov	r0, r4
   1082a:	f7f0 fa71 	bl	d10 <__aeabi_fmul>
   1082e:	4b1c      	ldr	r3, [pc, #112]	; (108a0 <__ieee754_expf+0x228>)
   10830:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   10834:	f7f0 f964 	bl	b00 <__addsf3>
   10838:	f7f0 fc30 	bl	109c <__aeabi_f2iz>
   1083c:	4605      	mov	r5, r0
   1083e:	f7f0 fa13 	bl	c68 <__aeabi_i2f>
   10842:	4918      	ldr	r1, [pc, #96]	; (108a4 <__ieee754_expf+0x22c>)
   10844:	4606      	mov	r6, r0
   10846:	f7f0 fa63 	bl	d10 <__aeabi_fmul>
   1084a:	4601      	mov	r1, r0
   1084c:	4620      	mov	r0, r4
   1084e:	f7f0 f955 	bl	afc <__aeabi_fsub>
   10852:	4915      	ldr	r1, [pc, #84]	; (108a8 <__ieee754_expf+0x230>)
   10854:	4680      	mov	r8, r0
   10856:	4630      	mov	r0, r6
   10858:	f7f0 fa5a 	bl	d10 <__aeabi_fmul>
   1085c:	4681      	mov	r9, r0
   1085e:	e735      	b.n	106cc <__ieee754_expf+0x54>
   10860:	4620      	mov	r0, r4
   10862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10866:	f7f0 f94b 	bl	b00 <__addsf3>
   1086a:	e77f      	b.n	1076c <__ieee754_expf+0xf4>
   1086c:	42b17217 	.word	0x42b17217
   10870:	42cff1b5 	.word	0x42cff1b5
   10874:	3eb17218 	.word	0x3eb17218
   10878:	3f851591 	.word	0x3f851591
   1087c:	0006bb6c 	.word	0x0006bb6c
   10880:	0006bb74 	.word	0x0006bb74
   10884:	3331bb4c 	.word	0x3331bb4c
   10888:	35ddea0e 	.word	0x35ddea0e
   1088c:	388ab355 	.word	0x388ab355
   10890:	3b360b61 	.word	0x3b360b61
   10894:	3e2aaaab 	.word	0x3e2aaaab
   10898:	7149f2ca 	.word	0x7149f2ca
   1089c:	3fb8aa3b 	.word	0x3fb8aa3b
   108a0:	0006bb64 	.word	0x0006bb64
   108a4:	3f317180 	.word	0x3f317180
   108a8:	3717f7d1 	.word	0x3717f7d1

000108ac <matherr>:
   108ac:	2000      	movs	r0, #0
   108ae:	4770      	bx	lr

000108b0 <finitef>:
   108b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   108b4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   108b8:	bfac      	ite	ge
   108ba:	2000      	movge	r0, #0
   108bc:	2001      	movlt	r0, #1
   108be:	4770      	bx	lr

000108c0 <__assert_func>:
   108c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   108c2:	4614      	mov	r4, r2
   108c4:	461a      	mov	r2, r3
   108c6:	4b09      	ldr	r3, [pc, #36]	; (108ec <__assert_func+0x2c>)
   108c8:	4605      	mov	r5, r0
   108ca:	681b      	ldr	r3, [r3, #0]
   108cc:	68d8      	ldr	r0, [r3, #12]
   108ce:	b14c      	cbz	r4, 108e4 <__assert_func+0x24>
   108d0:	4b07      	ldr	r3, [pc, #28]	; (108f0 <__assert_func+0x30>)
   108d2:	9100      	str	r1, [sp, #0]
   108d4:	4907      	ldr	r1, [pc, #28]	; (108f4 <__assert_func+0x34>)
   108d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
   108da:	462b      	mov	r3, r5
   108dc:	f000 f80e 	bl	108fc <fiprintf>
   108e0:	f005 fbbf 	bl	16062 <abort>
   108e4:	4b04      	ldr	r3, [pc, #16]	; (108f8 <__assert_func+0x38>)
   108e6:	461c      	mov	r4, r3
   108e8:	e7f3      	b.n	108d2 <__assert_func+0x12>
   108ea:	bf00      	nop
   108ec:	200000cc 	.word	0x200000cc
   108f0:	0006bbec 	.word	0x0006bbec
   108f4:	0006bbf9 	.word	0x0006bbf9
   108f8:	0006bc27 	.word	0x0006bc27

000108fc <fiprintf>:
   108fc:	b40e      	push	{r1, r2, r3}
   108fe:	b503      	push	{r0, r1, lr}
   10900:	ab03      	add	r3, sp, #12
   10902:	4601      	mov	r1, r0
   10904:	4805      	ldr	r0, [pc, #20]	; (1091c <fiprintf+0x20>)
   10906:	f853 2b04 	ldr.w	r2, [r3], #4
   1090a:	6800      	ldr	r0, [r0, #0]
   1090c:	9301      	str	r3, [sp, #4]
   1090e:	f000 f8bf 	bl	10a90 <_vfiprintf_r>
   10912:	b002      	add	sp, #8
   10914:	f85d eb04 	ldr.w	lr, [sp], #4
   10918:	b003      	add	sp, #12
   1091a:	4770      	bx	lr
   1091c:	200000cc 	.word	0x200000cc

00010920 <malloc>:
   10920:	4b02      	ldr	r3, [pc, #8]	; (1092c <malloc+0xc>)
   10922:	4601      	mov	r1, r0
   10924:	6818      	ldr	r0, [r3, #0]
   10926:	f000 b859 	b.w	109dc <_malloc_r>
   1092a:	bf00      	nop
   1092c:	200000cc 	.word	0x200000cc

00010930 <free>:
   10930:	4b02      	ldr	r3, [pc, #8]	; (1093c <free+0xc>)
   10932:	4601      	mov	r1, r0
   10934:	6818      	ldr	r0, [r3, #0]
   10936:	f000 b803 	b.w	10940 <_free_r>
   1093a:	bf00      	nop
   1093c:	200000cc 	.word	0x200000cc

00010940 <_free_r>:
   10940:	b538      	push	{r3, r4, r5, lr}
   10942:	4605      	mov	r5, r0
   10944:	2900      	cmp	r1, #0
   10946:	d045      	beq.n	109d4 <_free_r+0x94>
   10948:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1094c:	1f0c      	subs	r4, r1, #4
   1094e:	2b00      	cmp	r3, #0
   10950:	bfb8      	it	lt
   10952:	18e4      	addlt	r4, r4, r3
   10954:	f001 f88c 	bl	11a70 <__malloc_lock>
   10958:	4a1f      	ldr	r2, [pc, #124]	; (109d8 <_free_r+0x98>)
   1095a:	6813      	ldr	r3, [r2, #0]
   1095c:	4610      	mov	r0, r2
   1095e:	b933      	cbnz	r3, 1096e <_free_r+0x2e>
   10960:	6063      	str	r3, [r4, #4]
   10962:	6014      	str	r4, [r2, #0]
   10964:	4628      	mov	r0, r5
   10966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1096a:	f001 b887 	b.w	11a7c <__malloc_unlock>
   1096e:	42a3      	cmp	r3, r4
   10970:	d90b      	bls.n	1098a <_free_r+0x4a>
   10972:	6821      	ldr	r1, [r4, #0]
   10974:	1862      	adds	r2, r4, r1
   10976:	4293      	cmp	r3, r2
   10978:	bf02      	ittt	eq
   1097a:	681a      	ldreq	r2, [r3, #0]
   1097c:	685b      	ldreq	r3, [r3, #4]
   1097e:	1852      	addeq	r2, r2, r1
   10980:	6063      	str	r3, [r4, #4]
   10982:	bf08      	it	eq
   10984:	6022      	streq	r2, [r4, #0]
   10986:	6004      	str	r4, [r0, #0]
   10988:	e7ec      	b.n	10964 <_free_r+0x24>
   1098a:	461a      	mov	r2, r3
   1098c:	685b      	ldr	r3, [r3, #4]
   1098e:	b10b      	cbz	r3, 10994 <_free_r+0x54>
   10990:	42a3      	cmp	r3, r4
   10992:	d9fa      	bls.n	1098a <_free_r+0x4a>
   10994:	6811      	ldr	r1, [r2, #0]
   10996:	1850      	adds	r0, r2, r1
   10998:	42a0      	cmp	r0, r4
   1099a:	d10b      	bne.n	109b4 <_free_r+0x74>
   1099c:	6820      	ldr	r0, [r4, #0]
   1099e:	4401      	add	r1, r0
   109a0:	1850      	adds	r0, r2, r1
   109a2:	6011      	str	r1, [r2, #0]
   109a4:	4283      	cmp	r3, r0
   109a6:	d1dd      	bne.n	10964 <_free_r+0x24>
   109a8:	6818      	ldr	r0, [r3, #0]
   109aa:	685b      	ldr	r3, [r3, #4]
   109ac:	4401      	add	r1, r0
   109ae:	6053      	str	r3, [r2, #4]
   109b0:	6011      	str	r1, [r2, #0]
   109b2:	e7d7      	b.n	10964 <_free_r+0x24>
   109b4:	d902      	bls.n	109bc <_free_r+0x7c>
   109b6:	230c      	movs	r3, #12
   109b8:	602b      	str	r3, [r5, #0]
   109ba:	e7d3      	b.n	10964 <_free_r+0x24>
   109bc:	6820      	ldr	r0, [r4, #0]
   109be:	1821      	adds	r1, r4, r0
   109c0:	428b      	cmp	r3, r1
   109c2:	bf02      	ittt	eq
   109c4:	6819      	ldreq	r1, [r3, #0]
   109c6:	685b      	ldreq	r3, [r3, #4]
   109c8:	1809      	addeq	r1, r1, r0
   109ca:	6063      	str	r3, [r4, #4]
   109cc:	bf08      	it	eq
   109ce:	6021      	streq	r1, [r4, #0]
   109d0:	6054      	str	r4, [r2, #4]
   109d2:	e7c7      	b.n	10964 <_free_r+0x24>
   109d4:	bd38      	pop	{r3, r4, r5, pc}
   109d6:	bf00      	nop
   109d8:	20020a7c 	.word	0x20020a7c

000109dc <_malloc_r>:
   109dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109de:	1ccd      	adds	r5, r1, #3
   109e0:	4606      	mov	r6, r0
   109e2:	f025 0503 	bic.w	r5, r5, #3
   109e6:	3508      	adds	r5, #8
   109e8:	2d0c      	cmp	r5, #12
   109ea:	bf38      	it	cc
   109ec:	250c      	movcc	r5, #12
   109ee:	2d00      	cmp	r5, #0
   109f0:	db01      	blt.n	109f6 <_malloc_r+0x1a>
   109f2:	42a9      	cmp	r1, r5
   109f4:	d903      	bls.n	109fe <_malloc_r+0x22>
   109f6:	230c      	movs	r3, #12
   109f8:	6033      	str	r3, [r6, #0]
   109fa:	2000      	movs	r0, #0
   109fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   109fe:	f001 f837 	bl	11a70 <__malloc_lock>
   10a02:	4921      	ldr	r1, [pc, #132]	; (10a88 <_malloc_r+0xac>)
   10a04:	680a      	ldr	r2, [r1, #0]
   10a06:	4614      	mov	r4, r2
   10a08:	b99c      	cbnz	r4, 10a32 <_malloc_r+0x56>
   10a0a:	4f20      	ldr	r7, [pc, #128]	; (10a8c <_malloc_r+0xb0>)
   10a0c:	683b      	ldr	r3, [r7, #0]
   10a0e:	b923      	cbnz	r3, 10a1a <_malloc_r+0x3e>
   10a10:	4621      	mov	r1, r4
   10a12:	4630      	mov	r0, r6
   10a14:	f000 fcbc 	bl	11390 <_sbrk_r>
   10a18:	6038      	str	r0, [r7, #0]
   10a1a:	4629      	mov	r1, r5
   10a1c:	4630      	mov	r0, r6
   10a1e:	f000 fcb7 	bl	11390 <_sbrk_r>
   10a22:	1c43      	adds	r3, r0, #1
   10a24:	d123      	bne.n	10a6e <_malloc_r+0x92>
   10a26:	230c      	movs	r3, #12
   10a28:	4630      	mov	r0, r6
   10a2a:	6033      	str	r3, [r6, #0]
   10a2c:	f001 f826 	bl	11a7c <__malloc_unlock>
   10a30:	e7e3      	b.n	109fa <_malloc_r+0x1e>
   10a32:	6823      	ldr	r3, [r4, #0]
   10a34:	1b5b      	subs	r3, r3, r5
   10a36:	d417      	bmi.n	10a68 <_malloc_r+0x8c>
   10a38:	2b0b      	cmp	r3, #11
   10a3a:	d903      	bls.n	10a44 <_malloc_r+0x68>
   10a3c:	6023      	str	r3, [r4, #0]
   10a3e:	441c      	add	r4, r3
   10a40:	6025      	str	r5, [r4, #0]
   10a42:	e004      	b.n	10a4e <_malloc_r+0x72>
   10a44:	6863      	ldr	r3, [r4, #4]
   10a46:	42a2      	cmp	r2, r4
   10a48:	bf0c      	ite	eq
   10a4a:	600b      	streq	r3, [r1, #0]
   10a4c:	6053      	strne	r3, [r2, #4]
   10a4e:	4630      	mov	r0, r6
   10a50:	f001 f814 	bl	11a7c <__malloc_unlock>
   10a54:	f104 000b 	add.w	r0, r4, #11
   10a58:	1d23      	adds	r3, r4, #4
   10a5a:	f020 0007 	bic.w	r0, r0, #7
   10a5e:	1ac2      	subs	r2, r0, r3
   10a60:	d0cc      	beq.n	109fc <_malloc_r+0x20>
   10a62:	1a1b      	subs	r3, r3, r0
   10a64:	50a3      	str	r3, [r4, r2]
   10a66:	e7c9      	b.n	109fc <_malloc_r+0x20>
   10a68:	4622      	mov	r2, r4
   10a6a:	6864      	ldr	r4, [r4, #4]
   10a6c:	e7cc      	b.n	10a08 <_malloc_r+0x2c>
   10a6e:	1cc4      	adds	r4, r0, #3
   10a70:	f024 0403 	bic.w	r4, r4, #3
   10a74:	42a0      	cmp	r0, r4
   10a76:	d0e3      	beq.n	10a40 <_malloc_r+0x64>
   10a78:	1a21      	subs	r1, r4, r0
   10a7a:	4630      	mov	r0, r6
   10a7c:	f000 fc88 	bl	11390 <_sbrk_r>
   10a80:	3001      	adds	r0, #1
   10a82:	d1dd      	bne.n	10a40 <_malloc_r+0x64>
   10a84:	e7cf      	b.n	10a26 <_malloc_r+0x4a>
   10a86:	bf00      	nop
   10a88:	20020a7c 	.word	0x20020a7c
   10a8c:	20020a80 	.word	0x20020a80

00010a90 <_vfiprintf_r>:
   10a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a94:	460d      	mov	r5, r1
   10a96:	b09d      	sub	sp, #116	; 0x74
   10a98:	4614      	mov	r4, r2
   10a9a:	4698      	mov	r8, r3
   10a9c:	4606      	mov	r6, r0
   10a9e:	b118      	cbz	r0, 10aa8 <_vfiprintf_r+0x18>
   10aa0:	6983      	ldr	r3, [r0, #24]
   10aa2:	b90b      	cbnz	r3, 10aa8 <_vfiprintf_r+0x18>
   10aa4:	f000 ff22 	bl	118ec <__sinit>
   10aa8:	4b89      	ldr	r3, [pc, #548]	; (10cd0 <_vfiprintf_r+0x240>)
   10aaa:	429d      	cmp	r5, r3
   10aac:	d11b      	bne.n	10ae6 <_vfiprintf_r+0x56>
   10aae:	6875      	ldr	r5, [r6, #4]
   10ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10ab2:	07d9      	lsls	r1, r3, #31
   10ab4:	d405      	bmi.n	10ac2 <_vfiprintf_r+0x32>
   10ab6:	89ab      	ldrh	r3, [r5, #12]
   10ab8:	059a      	lsls	r2, r3, #22
   10aba:	d402      	bmi.n	10ac2 <_vfiprintf_r+0x32>
   10abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10abe:	f001 fe8b 	bl	127d8 <__retarget_lock_acquire_recursive>
   10ac2:	89ab      	ldrh	r3, [r5, #12]
   10ac4:	071b      	lsls	r3, r3, #28
   10ac6:	d501      	bpl.n	10acc <_vfiprintf_r+0x3c>
   10ac8:	692b      	ldr	r3, [r5, #16]
   10aca:	b9eb      	cbnz	r3, 10b08 <_vfiprintf_r+0x78>
   10acc:	4629      	mov	r1, r5
   10ace:	4630      	mov	r0, r6
   10ad0:	f000 fd9c 	bl	1160c <__swsetup_r>
   10ad4:	b1c0      	cbz	r0, 10b08 <_vfiprintf_r+0x78>
   10ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10ad8:	07dc      	lsls	r4, r3, #31
   10ada:	d50e      	bpl.n	10afa <_vfiprintf_r+0x6a>
   10adc:	f04f 30ff 	mov.w	r0, #4294967295
   10ae0:	b01d      	add	sp, #116	; 0x74
   10ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ae6:	4b7b      	ldr	r3, [pc, #492]	; (10cd4 <_vfiprintf_r+0x244>)
   10ae8:	429d      	cmp	r5, r3
   10aea:	d101      	bne.n	10af0 <_vfiprintf_r+0x60>
   10aec:	68b5      	ldr	r5, [r6, #8]
   10aee:	e7df      	b.n	10ab0 <_vfiprintf_r+0x20>
   10af0:	4b79      	ldr	r3, [pc, #484]	; (10cd8 <_vfiprintf_r+0x248>)
   10af2:	429d      	cmp	r5, r3
   10af4:	bf08      	it	eq
   10af6:	68f5      	ldreq	r5, [r6, #12]
   10af8:	e7da      	b.n	10ab0 <_vfiprintf_r+0x20>
   10afa:	89ab      	ldrh	r3, [r5, #12]
   10afc:	0598      	lsls	r0, r3, #22
   10afe:	d4ed      	bmi.n	10adc <_vfiprintf_r+0x4c>
   10b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10b02:	f001 fe71 	bl	127e8 <__retarget_lock_release_recursive>
   10b06:	e7e9      	b.n	10adc <_vfiprintf_r+0x4c>
   10b08:	2300      	movs	r3, #0
   10b0a:	f8cd 800c 	str.w	r8, [sp, #12]
   10b0e:	f04f 0901 	mov.w	r9, #1
   10b12:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 10cdc <_vfiprintf_r+0x24c>
   10b16:	9309      	str	r3, [sp, #36]	; 0x24
   10b18:	2320      	movs	r3, #32
   10b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10b1e:	2330      	movs	r3, #48	; 0x30
   10b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10b24:	4623      	mov	r3, r4
   10b26:	469a      	mov	sl, r3
   10b28:	f813 2b01 	ldrb.w	r2, [r3], #1
   10b2c:	b10a      	cbz	r2, 10b32 <_vfiprintf_r+0xa2>
   10b2e:	2a25      	cmp	r2, #37	; 0x25
   10b30:	d1f9      	bne.n	10b26 <_vfiprintf_r+0x96>
   10b32:	ebba 0b04 	subs.w	fp, sl, r4
   10b36:	d00b      	beq.n	10b50 <_vfiprintf_r+0xc0>
   10b38:	465b      	mov	r3, fp
   10b3a:	4622      	mov	r2, r4
   10b3c:	4629      	mov	r1, r5
   10b3e:	4630      	mov	r0, r6
   10b40:	f005 fad2 	bl	160e8 <__sfputs_r>
   10b44:	3001      	adds	r0, #1
   10b46:	f000 80aa 	beq.w	10c9e <_vfiprintf_r+0x20e>
   10b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b4c:	445a      	add	r2, fp
   10b4e:	9209      	str	r2, [sp, #36]	; 0x24
   10b50:	f89a 3000 	ldrb.w	r3, [sl]
   10b54:	2b00      	cmp	r3, #0
   10b56:	f000 80a2 	beq.w	10c9e <_vfiprintf_r+0x20e>
   10b5a:	2300      	movs	r3, #0
   10b5c:	f04f 32ff 	mov.w	r2, #4294967295
   10b60:	f10a 0a01 	add.w	sl, sl, #1
   10b64:	9304      	str	r3, [sp, #16]
   10b66:	9307      	str	r3, [sp, #28]
   10b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10b6c:	931a      	str	r3, [sp, #104]	; 0x68
   10b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10b72:	4654      	mov	r4, sl
   10b74:	2205      	movs	r2, #5
   10b76:	4859      	ldr	r0, [pc, #356]	; (10cdc <_vfiprintf_r+0x24c>)
   10b78:	f814 1b01 	ldrb.w	r1, [r4], #1
   10b7c:	f005 fa7c 	bl	16078 <memchr>
   10b80:	9a04      	ldr	r2, [sp, #16]
   10b82:	b9d8      	cbnz	r0, 10bbc <_vfiprintf_r+0x12c>
   10b84:	06d1      	lsls	r1, r2, #27
   10b86:	bf44      	itt	mi
   10b88:	2320      	movmi	r3, #32
   10b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10b8e:	0713      	lsls	r3, r2, #28
   10b90:	bf44      	itt	mi
   10b92:	232b      	movmi	r3, #43	; 0x2b
   10b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10b98:	f89a 3000 	ldrb.w	r3, [sl]
   10b9c:	2b2a      	cmp	r3, #42	; 0x2a
   10b9e:	d015      	beq.n	10bcc <_vfiprintf_r+0x13c>
   10ba0:	9a07      	ldr	r2, [sp, #28]
   10ba2:	4654      	mov	r4, sl
   10ba4:	2000      	movs	r0, #0
   10ba6:	f04f 0c0a 	mov.w	ip, #10
   10baa:	4621      	mov	r1, r4
   10bac:	f811 3b01 	ldrb.w	r3, [r1], #1
   10bb0:	3b30      	subs	r3, #48	; 0x30
   10bb2:	2b09      	cmp	r3, #9
   10bb4:	d94e      	bls.n	10c54 <_vfiprintf_r+0x1c4>
   10bb6:	b1b0      	cbz	r0, 10be6 <_vfiprintf_r+0x156>
   10bb8:	9207      	str	r2, [sp, #28]
   10bba:	e014      	b.n	10be6 <_vfiprintf_r+0x156>
   10bbc:	eba0 0308 	sub.w	r3, r0, r8
   10bc0:	46a2      	mov	sl, r4
   10bc2:	fa09 f303 	lsl.w	r3, r9, r3
   10bc6:	4313      	orrs	r3, r2
   10bc8:	9304      	str	r3, [sp, #16]
   10bca:	e7d2      	b.n	10b72 <_vfiprintf_r+0xe2>
   10bcc:	9b03      	ldr	r3, [sp, #12]
   10bce:	1d19      	adds	r1, r3, #4
   10bd0:	681b      	ldr	r3, [r3, #0]
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	9103      	str	r1, [sp, #12]
   10bd6:	bfbb      	ittet	lt
   10bd8:	425b      	neglt	r3, r3
   10bda:	f042 0202 	orrlt.w	r2, r2, #2
   10bde:	9307      	strge	r3, [sp, #28]
   10be0:	9307      	strlt	r3, [sp, #28]
   10be2:	bfb8      	it	lt
   10be4:	9204      	strlt	r2, [sp, #16]
   10be6:	7823      	ldrb	r3, [r4, #0]
   10be8:	2b2e      	cmp	r3, #46	; 0x2e
   10bea:	d10c      	bne.n	10c06 <_vfiprintf_r+0x176>
   10bec:	7863      	ldrb	r3, [r4, #1]
   10bee:	2b2a      	cmp	r3, #42	; 0x2a
   10bf0:	d135      	bne.n	10c5e <_vfiprintf_r+0x1ce>
   10bf2:	9b03      	ldr	r3, [sp, #12]
   10bf4:	3402      	adds	r4, #2
   10bf6:	1d1a      	adds	r2, r3, #4
   10bf8:	681b      	ldr	r3, [r3, #0]
   10bfa:	2b00      	cmp	r3, #0
   10bfc:	9203      	str	r2, [sp, #12]
   10bfe:	bfb8      	it	lt
   10c00:	f04f 33ff 	movlt.w	r3, #4294967295
   10c04:	9305      	str	r3, [sp, #20]
   10c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10cec <_vfiprintf_r+0x25c>
   10c0a:	2203      	movs	r2, #3
   10c0c:	7821      	ldrb	r1, [r4, #0]
   10c0e:	4650      	mov	r0, sl
   10c10:	f005 fa32 	bl	16078 <memchr>
   10c14:	b140      	cbz	r0, 10c28 <_vfiprintf_r+0x198>
   10c16:	2340      	movs	r3, #64	; 0x40
   10c18:	eba0 000a 	sub.w	r0, r0, sl
   10c1c:	3401      	adds	r4, #1
   10c1e:	fa03 f000 	lsl.w	r0, r3, r0
   10c22:	9b04      	ldr	r3, [sp, #16]
   10c24:	4303      	orrs	r3, r0
   10c26:	9304      	str	r3, [sp, #16]
   10c28:	f814 1b01 	ldrb.w	r1, [r4], #1
   10c2c:	2206      	movs	r2, #6
   10c2e:	482c      	ldr	r0, [pc, #176]	; (10ce0 <_vfiprintf_r+0x250>)
   10c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10c34:	f005 fa20 	bl	16078 <memchr>
   10c38:	2800      	cmp	r0, #0
   10c3a:	d03f      	beq.n	10cbc <_vfiprintf_r+0x22c>
   10c3c:	4b29      	ldr	r3, [pc, #164]	; (10ce4 <_vfiprintf_r+0x254>)
   10c3e:	bb1b      	cbnz	r3, 10c88 <_vfiprintf_r+0x1f8>
   10c40:	9b03      	ldr	r3, [sp, #12]
   10c42:	3307      	adds	r3, #7
   10c44:	f023 0307 	bic.w	r3, r3, #7
   10c48:	3308      	adds	r3, #8
   10c4a:	9303      	str	r3, [sp, #12]
   10c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c4e:	443b      	add	r3, r7
   10c50:	9309      	str	r3, [sp, #36]	; 0x24
   10c52:	e767      	b.n	10b24 <_vfiprintf_r+0x94>
   10c54:	fb0c 3202 	mla	r2, ip, r2, r3
   10c58:	460c      	mov	r4, r1
   10c5a:	2001      	movs	r0, #1
   10c5c:	e7a5      	b.n	10baa <_vfiprintf_r+0x11a>
   10c5e:	2300      	movs	r3, #0
   10c60:	3401      	adds	r4, #1
   10c62:	f04f 0c0a 	mov.w	ip, #10
   10c66:	4619      	mov	r1, r3
   10c68:	9305      	str	r3, [sp, #20]
   10c6a:	4620      	mov	r0, r4
   10c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10c70:	3a30      	subs	r2, #48	; 0x30
   10c72:	2a09      	cmp	r2, #9
   10c74:	d903      	bls.n	10c7e <_vfiprintf_r+0x1ee>
   10c76:	2b00      	cmp	r3, #0
   10c78:	d0c5      	beq.n	10c06 <_vfiprintf_r+0x176>
   10c7a:	9105      	str	r1, [sp, #20]
   10c7c:	e7c3      	b.n	10c06 <_vfiprintf_r+0x176>
   10c7e:	fb0c 2101 	mla	r1, ip, r1, r2
   10c82:	4604      	mov	r4, r0
   10c84:	2301      	movs	r3, #1
   10c86:	e7f0      	b.n	10c6a <_vfiprintf_r+0x1da>
   10c88:	ab03      	add	r3, sp, #12
   10c8a:	462a      	mov	r2, r5
   10c8c:	a904      	add	r1, sp, #16
   10c8e:	4630      	mov	r0, r6
   10c90:	9300      	str	r3, [sp, #0]
   10c92:	4b15      	ldr	r3, [pc, #84]	; (10ce8 <_vfiprintf_r+0x258>)
   10c94:	f000 f82c 	bl	10cf0 <_printf_float>
   10c98:	4607      	mov	r7, r0
   10c9a:	1c78      	adds	r0, r7, #1
   10c9c:	d1d6      	bne.n	10c4c <_vfiprintf_r+0x1bc>
   10c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10ca0:	07d9      	lsls	r1, r3, #31
   10ca2:	d405      	bmi.n	10cb0 <_vfiprintf_r+0x220>
   10ca4:	89ab      	ldrh	r3, [r5, #12]
   10ca6:	059a      	lsls	r2, r3, #22
   10ca8:	d402      	bmi.n	10cb0 <_vfiprintf_r+0x220>
   10caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10cac:	f001 fd9c 	bl	127e8 <__retarget_lock_release_recursive>
   10cb0:	89ab      	ldrh	r3, [r5, #12]
   10cb2:	065b      	lsls	r3, r3, #25
   10cb4:	f53f af12 	bmi.w	10adc <_vfiprintf_r+0x4c>
   10cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10cba:	e711      	b.n	10ae0 <_vfiprintf_r+0x50>
   10cbc:	ab03      	add	r3, sp, #12
   10cbe:	462a      	mov	r2, r5
   10cc0:	a904      	add	r1, sp, #16
   10cc2:	4630      	mov	r0, r6
   10cc4:	9300      	str	r3, [sp, #0]
   10cc6:	4b08      	ldr	r3, [pc, #32]	; (10ce8 <_vfiprintf_r+0x258>)
   10cc8:	f000 fa3c 	bl	11144 <_printf_i>
   10ccc:	e7e4      	b.n	10c98 <_vfiprintf_r+0x208>
   10cce:	bf00      	nop
   10cd0:	0006bba0 	.word	0x0006bba0
   10cd4:	0006bbc0 	.word	0x0006bbc0
   10cd8:	0006bb80 	.word	0x0006bb80
   10cdc:	0006bd29 	.word	0x0006bd29
   10ce0:	0006bd33 	.word	0x0006bd33
   10ce4:	00010cf1 	.word	0x00010cf1
   10ce8:	000160e9 	.word	0x000160e9
   10cec:	0006bd2f 	.word	0x0006bd2f

00010cf0 <_printf_float>:
   10cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cf4:	b091      	sub	sp, #68	; 0x44
   10cf6:	460c      	mov	r4, r1
   10cf8:	4616      	mov	r6, r2
   10cfa:	461f      	mov	r7, r3
   10cfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   10d00:	4605      	mov	r5, r0
   10d02:	f000 fe71 	bl	119e8 <_localeconv_r>
   10d06:	6803      	ldr	r3, [r0, #0]
   10d08:	4618      	mov	r0, r3
   10d0a:	9309      	str	r3, [sp, #36]	; 0x24
   10d0c:	f7f0 fbe2 	bl	14d4 <strlen>
   10d10:	2300      	movs	r3, #0
   10d12:	900a      	str	r0, [sp, #40]	; 0x28
   10d14:	930e      	str	r3, [sp, #56]	; 0x38
   10d16:	f8d8 3000 	ldr.w	r3, [r8]
   10d1a:	f894 9018 	ldrb.w	r9, [r4, #24]
   10d1e:	3307      	adds	r3, #7
   10d20:	f8d4 b000 	ldr.w	fp, [r4]
   10d24:	f023 0307 	bic.w	r3, r3, #7
   10d28:	f103 0208 	add.w	r2, r3, #8
   10d2c:	f8c8 2000 	str.w	r2, [r8]
   10d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   10d38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   10d3c:	f04f 32ff 	mov.w	r2, #4294967295
   10d40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10d44:	4640      	mov	r0, r8
   10d46:	930b      	str	r3, [sp, #44]	; 0x2c
   10d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10d4a:	4b9b      	ldr	r3, [pc, #620]	; (10fb8 <_printf_float+0x2c8>)
   10d4c:	f7f0 fba2 	bl	1494 <__aeabi_dcmpun>
   10d50:	bb70      	cbnz	r0, 10db0 <_printf_float+0xc0>
   10d52:	f04f 32ff 	mov.w	r2, #4294967295
   10d56:	4b98      	ldr	r3, [pc, #608]	; (10fb8 <_printf_float+0x2c8>)
   10d58:	4640      	mov	r0, r8
   10d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10d5c:	f7ef fe34 	bl	9c8 <__aeabi_dcmple>
   10d60:	bb30      	cbnz	r0, 10db0 <_printf_float+0xc0>
   10d62:	2200      	movs	r2, #0
   10d64:	2300      	movs	r3, #0
   10d66:	4640      	mov	r0, r8
   10d68:	4651      	mov	r1, sl
   10d6a:	f7ef fe23 	bl	9b4 <__aeabi_dcmplt>
   10d6e:	b110      	cbz	r0, 10d76 <_printf_float+0x86>
   10d70:	232d      	movs	r3, #45	; 0x2d
   10d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10d76:	4b91      	ldr	r3, [pc, #580]	; (10fbc <_printf_float+0x2cc>)
   10d78:	4891      	ldr	r0, [pc, #580]	; (10fc0 <_printf_float+0x2d0>)
   10d7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   10d7e:	bf94      	ite	ls
   10d80:	4698      	movls	r8, r3
   10d82:	4680      	movhi	r8, r0
   10d84:	2303      	movs	r3, #3
   10d86:	f04f 0a00 	mov.w	sl, #0
   10d8a:	6123      	str	r3, [r4, #16]
   10d8c:	f02b 0304 	bic.w	r3, fp, #4
   10d90:	6023      	str	r3, [r4, #0]
   10d92:	4633      	mov	r3, r6
   10d94:	aa0f      	add	r2, sp, #60	; 0x3c
   10d96:	4621      	mov	r1, r4
   10d98:	4628      	mov	r0, r5
   10d9a:	9700      	str	r7, [sp, #0]
   10d9c:	f005 fa54 	bl	16248 <_printf_common>
   10da0:	3001      	adds	r0, #1
   10da2:	f040 808f 	bne.w	10ec4 <_printf_float+0x1d4>
   10da6:	f04f 30ff 	mov.w	r0, #4294967295
   10daa:	b011      	add	sp, #68	; 0x44
   10dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10db0:	4642      	mov	r2, r8
   10db2:	4653      	mov	r3, sl
   10db4:	4640      	mov	r0, r8
   10db6:	4651      	mov	r1, sl
   10db8:	f7f0 fb6c 	bl	1494 <__aeabi_dcmpun>
   10dbc:	b140      	cbz	r0, 10dd0 <_printf_float+0xe0>
   10dbe:	f1ba 0f00 	cmp.w	sl, #0
   10dc2:	4880      	ldr	r0, [pc, #512]	; (10fc4 <_printf_float+0x2d4>)
   10dc4:	bfbc      	itt	lt
   10dc6:	232d      	movlt	r3, #45	; 0x2d
   10dc8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   10dcc:	4b7e      	ldr	r3, [pc, #504]	; (10fc8 <_printf_float+0x2d8>)
   10dce:	e7d4      	b.n	10d7a <_printf_float+0x8a>
   10dd0:	6863      	ldr	r3, [r4, #4]
   10dd2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   10dd6:	1c5a      	adds	r2, r3, #1
   10dd8:	d142      	bne.n	10e60 <_printf_float+0x170>
   10dda:	2306      	movs	r3, #6
   10ddc:	6063      	str	r3, [r4, #4]
   10dde:	2200      	movs	r2, #0
   10de0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   10de4:	4628      	mov	r0, r5
   10de6:	910b      	str	r1, [sp, #44]	; 0x2c
   10de8:	9206      	str	r2, [sp, #24]
   10dea:	aa0e      	add	r2, sp, #56	; 0x38
   10dec:	6023      	str	r3, [r4, #0]
   10dee:	e9cd 9204 	strd	r9, r2, [sp, #16]
   10df2:	aa0d      	add	r2, sp, #52	; 0x34
   10df4:	9203      	str	r2, [sp, #12]
   10df6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   10dfa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10dfe:	6863      	ldr	r3, [r4, #4]
   10e00:	4642      	mov	r2, r8
   10e02:	9300      	str	r3, [sp, #0]
   10e04:	4653      	mov	r3, sl
   10e06:	f005 f981 	bl	1610c <__cvt>
   10e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10e0c:	4680      	mov	r8, r0
   10e0e:	2947      	cmp	r1, #71	; 0x47
   10e10:	990d      	ldr	r1, [sp, #52]	; 0x34
   10e12:	d108      	bne.n	10e26 <_printf_float+0x136>
   10e14:	1cc8      	adds	r0, r1, #3
   10e16:	db02      	blt.n	10e1e <_printf_float+0x12e>
   10e18:	6863      	ldr	r3, [r4, #4]
   10e1a:	4299      	cmp	r1, r3
   10e1c:	dd40      	ble.n	10ea0 <_printf_float+0x1b0>
   10e1e:	f1a9 0902 	sub.w	r9, r9, #2
   10e22:	fa5f f989 	uxtb.w	r9, r9
   10e26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10e2a:	d81f      	bhi.n	10e6c <_printf_float+0x17c>
   10e2c:	3901      	subs	r1, #1
   10e2e:	464a      	mov	r2, r9
   10e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
   10e34:	910d      	str	r1, [sp, #52]	; 0x34
   10e36:	f005 f9c9 	bl	161cc <__exponent>
   10e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10e3c:	4682      	mov	sl, r0
   10e3e:	1813      	adds	r3, r2, r0
   10e40:	2a01      	cmp	r2, #1
   10e42:	6123      	str	r3, [r4, #16]
   10e44:	dc02      	bgt.n	10e4c <_printf_float+0x15c>
   10e46:	6822      	ldr	r2, [r4, #0]
   10e48:	07d2      	lsls	r2, r2, #31
   10e4a:	d501      	bpl.n	10e50 <_printf_float+0x160>
   10e4c:	3301      	adds	r3, #1
   10e4e:	6123      	str	r3, [r4, #16]
   10e50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   10e54:	2b00      	cmp	r3, #0
   10e56:	d09c      	beq.n	10d92 <_printf_float+0xa2>
   10e58:	232d      	movs	r3, #45	; 0x2d
   10e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10e5e:	e798      	b.n	10d92 <_printf_float+0xa2>
   10e60:	2947      	cmp	r1, #71	; 0x47
   10e62:	d1bc      	bne.n	10dde <_printf_float+0xee>
   10e64:	2b00      	cmp	r3, #0
   10e66:	d1ba      	bne.n	10dde <_printf_float+0xee>
   10e68:	2301      	movs	r3, #1
   10e6a:	e7b7      	b.n	10ddc <_printf_float+0xec>
   10e6c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   10e70:	d118      	bne.n	10ea4 <_printf_float+0x1b4>
   10e72:	2900      	cmp	r1, #0
   10e74:	6863      	ldr	r3, [r4, #4]
   10e76:	dd0b      	ble.n	10e90 <_printf_float+0x1a0>
   10e78:	6121      	str	r1, [r4, #16]
   10e7a:	b913      	cbnz	r3, 10e82 <_printf_float+0x192>
   10e7c:	6822      	ldr	r2, [r4, #0]
   10e7e:	07d0      	lsls	r0, r2, #31
   10e80:	d502      	bpl.n	10e88 <_printf_float+0x198>
   10e82:	3301      	adds	r3, #1
   10e84:	440b      	add	r3, r1
   10e86:	6123      	str	r3, [r4, #16]
   10e88:	f04f 0a00 	mov.w	sl, #0
   10e8c:	65a1      	str	r1, [r4, #88]	; 0x58
   10e8e:	e7df      	b.n	10e50 <_printf_float+0x160>
   10e90:	b913      	cbnz	r3, 10e98 <_printf_float+0x1a8>
   10e92:	6822      	ldr	r2, [r4, #0]
   10e94:	07d2      	lsls	r2, r2, #31
   10e96:	d501      	bpl.n	10e9c <_printf_float+0x1ac>
   10e98:	3302      	adds	r3, #2
   10e9a:	e7f4      	b.n	10e86 <_printf_float+0x196>
   10e9c:	2301      	movs	r3, #1
   10e9e:	e7f2      	b.n	10e86 <_printf_float+0x196>
   10ea0:	f04f 0967 	mov.w	r9, #103	; 0x67
   10ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10ea6:	4299      	cmp	r1, r3
   10ea8:	db05      	blt.n	10eb6 <_printf_float+0x1c6>
   10eaa:	6823      	ldr	r3, [r4, #0]
   10eac:	6121      	str	r1, [r4, #16]
   10eae:	07d8      	lsls	r0, r3, #31
   10eb0:	d5ea      	bpl.n	10e88 <_printf_float+0x198>
   10eb2:	1c4b      	adds	r3, r1, #1
   10eb4:	e7e7      	b.n	10e86 <_printf_float+0x196>
   10eb6:	2900      	cmp	r1, #0
   10eb8:	bfd4      	ite	le
   10eba:	f1c1 0202 	rsble	r2, r1, #2
   10ebe:	2201      	movgt	r2, #1
   10ec0:	4413      	add	r3, r2
   10ec2:	e7e0      	b.n	10e86 <_printf_float+0x196>
   10ec4:	6823      	ldr	r3, [r4, #0]
   10ec6:	055a      	lsls	r2, r3, #21
   10ec8:	d407      	bmi.n	10eda <_printf_float+0x1ea>
   10eca:	6923      	ldr	r3, [r4, #16]
   10ecc:	4642      	mov	r2, r8
   10ece:	4631      	mov	r1, r6
   10ed0:	4628      	mov	r0, r5
   10ed2:	47b8      	blx	r7
   10ed4:	3001      	adds	r0, #1
   10ed6:	d12b      	bne.n	10f30 <_printf_float+0x240>
   10ed8:	e765      	b.n	10da6 <_printf_float+0xb6>
   10eda:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10ede:	f240 80dc 	bls.w	1109a <_printf_float+0x3aa>
   10ee2:	2200      	movs	r2, #0
   10ee4:	2300      	movs	r3, #0
   10ee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10eea:	f7ef fd59 	bl	9a0 <__aeabi_dcmpeq>
   10eee:	2800      	cmp	r0, #0
   10ef0:	d033      	beq.n	10f5a <_printf_float+0x26a>
   10ef2:	2301      	movs	r3, #1
   10ef4:	4a35      	ldr	r2, [pc, #212]	; (10fcc <_printf_float+0x2dc>)
   10ef6:	4631      	mov	r1, r6
   10ef8:	4628      	mov	r0, r5
   10efa:	47b8      	blx	r7
   10efc:	3001      	adds	r0, #1
   10efe:	f43f af52 	beq.w	10da6 <_printf_float+0xb6>
   10f02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10f06:	429a      	cmp	r2, r3
   10f08:	db02      	blt.n	10f10 <_printf_float+0x220>
   10f0a:	6823      	ldr	r3, [r4, #0]
   10f0c:	07d8      	lsls	r0, r3, #31
   10f0e:	d50f      	bpl.n	10f30 <_printf_float+0x240>
   10f10:	4631      	mov	r1, r6
   10f12:	4628      	mov	r0, r5
   10f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10f18:	47b8      	blx	r7
   10f1a:	3001      	adds	r0, #1
   10f1c:	f43f af43 	beq.w	10da6 <_printf_float+0xb6>
   10f20:	f04f 0800 	mov.w	r8, #0
   10f24:	f104 091a 	add.w	r9, r4, #26
   10f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10f2a:	3b01      	subs	r3, #1
   10f2c:	4543      	cmp	r3, r8
   10f2e:	dc09      	bgt.n	10f44 <_printf_float+0x254>
   10f30:	6823      	ldr	r3, [r4, #0]
   10f32:	079b      	lsls	r3, r3, #30
   10f34:	f100 8101 	bmi.w	1113a <_printf_float+0x44a>
   10f38:	68e0      	ldr	r0, [r4, #12]
   10f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10f3c:	4298      	cmp	r0, r3
   10f3e:	bfb8      	it	lt
   10f40:	4618      	movlt	r0, r3
   10f42:	e732      	b.n	10daa <_printf_float+0xba>
   10f44:	2301      	movs	r3, #1
   10f46:	464a      	mov	r2, r9
   10f48:	4631      	mov	r1, r6
   10f4a:	4628      	mov	r0, r5
   10f4c:	47b8      	blx	r7
   10f4e:	3001      	adds	r0, #1
   10f50:	f43f af29 	beq.w	10da6 <_printf_float+0xb6>
   10f54:	f108 0801 	add.w	r8, r8, #1
   10f58:	e7e6      	b.n	10f28 <_printf_float+0x238>
   10f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f5c:	2b00      	cmp	r3, #0
   10f5e:	dc37      	bgt.n	10fd0 <_printf_float+0x2e0>
   10f60:	2301      	movs	r3, #1
   10f62:	4a1a      	ldr	r2, [pc, #104]	; (10fcc <_printf_float+0x2dc>)
   10f64:	4631      	mov	r1, r6
   10f66:	4628      	mov	r0, r5
   10f68:	47b8      	blx	r7
   10f6a:	3001      	adds	r0, #1
   10f6c:	f43f af1b 	beq.w	10da6 <_printf_float+0xb6>
   10f70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10f74:	4313      	orrs	r3, r2
   10f76:	d102      	bne.n	10f7e <_printf_float+0x28e>
   10f78:	6823      	ldr	r3, [r4, #0]
   10f7a:	07d9      	lsls	r1, r3, #31
   10f7c:	d5d8      	bpl.n	10f30 <_printf_float+0x240>
   10f7e:	4631      	mov	r1, r6
   10f80:	4628      	mov	r0, r5
   10f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   10f86:	47b8      	blx	r7
   10f88:	3001      	adds	r0, #1
   10f8a:	f43f af0c 	beq.w	10da6 <_printf_float+0xb6>
   10f8e:	f04f 0900 	mov.w	r9, #0
   10f92:	f104 0a1a 	add.w	sl, r4, #26
   10f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10f98:	425b      	negs	r3, r3
   10f9a:	454b      	cmp	r3, r9
   10f9c:	dc01      	bgt.n	10fa2 <_printf_float+0x2b2>
   10f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fa0:	e794      	b.n	10ecc <_printf_float+0x1dc>
   10fa2:	2301      	movs	r3, #1
   10fa4:	4652      	mov	r2, sl
   10fa6:	4631      	mov	r1, r6
   10fa8:	4628      	mov	r0, r5
   10faa:	47b8      	blx	r7
   10fac:	3001      	adds	r0, #1
   10fae:	f43f aefa 	beq.w	10da6 <_printf_float+0xb6>
   10fb2:	f109 0901 	add.w	r9, r9, #1
   10fb6:	e7ee      	b.n	10f96 <_printf_float+0x2a6>
   10fb8:	7fefffff 	.word	0x7fefffff
   10fbc:	0006bd3a 	.word	0x0006bd3a
   10fc0:	0006bd3e 	.word	0x0006bd3e
   10fc4:	0006bd46 	.word	0x0006bd46
   10fc8:	0006bd42 	.word	0x0006bd42
   10fcc:	0006bd4a 	.word	0x0006bd4a
   10fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10fd4:	429a      	cmp	r2, r3
   10fd6:	bfa8      	it	ge
   10fd8:	461a      	movge	r2, r3
   10fda:	2a00      	cmp	r2, #0
   10fdc:	4691      	mov	r9, r2
   10fde:	dc37      	bgt.n	11050 <_printf_float+0x360>
   10fe0:	f04f 0b00 	mov.w	fp, #0
   10fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   10fe8:	f104 021a 	add.w	r2, r4, #26
   10fec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   10ff0:	ebaa 0309 	sub.w	r3, sl, r9
   10ff4:	455b      	cmp	r3, fp
   10ff6:	dc33      	bgt.n	11060 <_printf_float+0x370>
   10ff8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   10ffc:	429a      	cmp	r2, r3
   10ffe:	db3b      	blt.n	11078 <_printf_float+0x388>
   11000:	6823      	ldr	r3, [r4, #0]
   11002:	07da      	lsls	r2, r3, #31
   11004:	d438      	bmi.n	11078 <_printf_float+0x388>
   11006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11008:	990d      	ldr	r1, [sp, #52]	; 0x34
   1100a:	eba2 030a 	sub.w	r3, r2, sl
   1100e:	eba2 0901 	sub.w	r9, r2, r1
   11012:	4599      	cmp	r9, r3
   11014:	bfa8      	it	ge
   11016:	4699      	movge	r9, r3
   11018:	f1b9 0f00 	cmp.w	r9, #0
   1101c:	dc34      	bgt.n	11088 <_printf_float+0x398>
   1101e:	f04f 0800 	mov.w	r8, #0
   11022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   11026:	f104 0a1a 	add.w	sl, r4, #26
   1102a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   1102e:	1a9b      	subs	r3, r3, r2
   11030:	eba3 0309 	sub.w	r3, r3, r9
   11034:	4543      	cmp	r3, r8
   11036:	f77f af7b 	ble.w	10f30 <_printf_float+0x240>
   1103a:	2301      	movs	r3, #1
   1103c:	4652      	mov	r2, sl
   1103e:	4631      	mov	r1, r6
   11040:	4628      	mov	r0, r5
   11042:	47b8      	blx	r7
   11044:	3001      	adds	r0, #1
   11046:	f43f aeae 	beq.w	10da6 <_printf_float+0xb6>
   1104a:	f108 0801 	add.w	r8, r8, #1
   1104e:	e7ec      	b.n	1102a <_printf_float+0x33a>
   11050:	4613      	mov	r3, r2
   11052:	4631      	mov	r1, r6
   11054:	4642      	mov	r2, r8
   11056:	4628      	mov	r0, r5
   11058:	47b8      	blx	r7
   1105a:	3001      	adds	r0, #1
   1105c:	d1c0      	bne.n	10fe0 <_printf_float+0x2f0>
   1105e:	e6a2      	b.n	10da6 <_printf_float+0xb6>
   11060:	2301      	movs	r3, #1
   11062:	4631      	mov	r1, r6
   11064:	4628      	mov	r0, r5
   11066:	920b      	str	r2, [sp, #44]	; 0x2c
   11068:	47b8      	blx	r7
   1106a:	3001      	adds	r0, #1
   1106c:	f43f ae9b 	beq.w	10da6 <_printf_float+0xb6>
   11070:	f10b 0b01 	add.w	fp, fp, #1
   11074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11076:	e7b9      	b.n	10fec <_printf_float+0x2fc>
   11078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1107c:	4631      	mov	r1, r6
   1107e:	4628      	mov	r0, r5
   11080:	47b8      	blx	r7
   11082:	3001      	adds	r0, #1
   11084:	d1bf      	bne.n	11006 <_printf_float+0x316>
   11086:	e68e      	b.n	10da6 <_printf_float+0xb6>
   11088:	464b      	mov	r3, r9
   1108a:	eb08 020a 	add.w	r2, r8, sl
   1108e:	4631      	mov	r1, r6
   11090:	4628      	mov	r0, r5
   11092:	47b8      	blx	r7
   11094:	3001      	adds	r0, #1
   11096:	d1c2      	bne.n	1101e <_printf_float+0x32e>
   11098:	e685      	b.n	10da6 <_printf_float+0xb6>
   1109a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1109c:	2a01      	cmp	r2, #1
   1109e:	dc01      	bgt.n	110a4 <_printf_float+0x3b4>
   110a0:	07db      	lsls	r3, r3, #31
   110a2:	d537      	bpl.n	11114 <_printf_float+0x424>
   110a4:	2301      	movs	r3, #1
   110a6:	4642      	mov	r2, r8
   110a8:	4631      	mov	r1, r6
   110aa:	4628      	mov	r0, r5
   110ac:	47b8      	blx	r7
   110ae:	3001      	adds	r0, #1
   110b0:	f43f ae79 	beq.w	10da6 <_printf_float+0xb6>
   110b4:	4631      	mov	r1, r6
   110b6:	4628      	mov	r0, r5
   110b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   110bc:	47b8      	blx	r7
   110be:	3001      	adds	r0, #1
   110c0:	f43f ae71 	beq.w	10da6 <_printf_float+0xb6>
   110c4:	2200      	movs	r2, #0
   110c6:	2300      	movs	r3, #0
   110c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   110cc:	f7ef fc68 	bl	9a0 <__aeabi_dcmpeq>
   110d0:	b9d8      	cbnz	r0, 1110a <_printf_float+0x41a>
   110d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   110d4:	f108 0201 	add.w	r2, r8, #1
   110d8:	3b01      	subs	r3, #1
   110da:	4631      	mov	r1, r6
   110dc:	4628      	mov	r0, r5
   110de:	47b8      	blx	r7
   110e0:	3001      	adds	r0, #1
   110e2:	d10e      	bne.n	11102 <_printf_float+0x412>
   110e4:	e65f      	b.n	10da6 <_printf_float+0xb6>
   110e6:	2301      	movs	r3, #1
   110e8:	464a      	mov	r2, r9
   110ea:	4631      	mov	r1, r6
   110ec:	4628      	mov	r0, r5
   110ee:	47b8      	blx	r7
   110f0:	3001      	adds	r0, #1
   110f2:	f43f ae58 	beq.w	10da6 <_printf_float+0xb6>
   110f6:	f108 0801 	add.w	r8, r8, #1
   110fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   110fc:	3b01      	subs	r3, #1
   110fe:	4543      	cmp	r3, r8
   11100:	dcf1      	bgt.n	110e6 <_printf_float+0x3f6>
   11102:	4653      	mov	r3, sl
   11104:	f104 0250 	add.w	r2, r4, #80	; 0x50
   11108:	e6e1      	b.n	10ece <_printf_float+0x1de>
   1110a:	f04f 0800 	mov.w	r8, #0
   1110e:	f104 091a 	add.w	r9, r4, #26
   11112:	e7f2      	b.n	110fa <_printf_float+0x40a>
   11114:	2301      	movs	r3, #1
   11116:	4642      	mov	r2, r8
   11118:	e7df      	b.n	110da <_printf_float+0x3ea>
   1111a:	2301      	movs	r3, #1
   1111c:	464a      	mov	r2, r9
   1111e:	4631      	mov	r1, r6
   11120:	4628      	mov	r0, r5
   11122:	47b8      	blx	r7
   11124:	3001      	adds	r0, #1
   11126:	f43f ae3e 	beq.w	10da6 <_printf_float+0xb6>
   1112a:	f108 0801 	add.w	r8, r8, #1
   1112e:	68e3      	ldr	r3, [r4, #12]
   11130:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11132:	1a5b      	subs	r3, r3, r1
   11134:	4543      	cmp	r3, r8
   11136:	dcf0      	bgt.n	1111a <_printf_float+0x42a>
   11138:	e6fe      	b.n	10f38 <_printf_float+0x248>
   1113a:	f04f 0800 	mov.w	r8, #0
   1113e:	f104 0919 	add.w	r9, r4, #25
   11142:	e7f4      	b.n	1112e <_printf_float+0x43e>

00011144 <_printf_i>:
   11144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11148:	460c      	mov	r4, r1
   1114a:	4691      	mov	r9, r2
   1114c:	4680      	mov	r8, r0
   1114e:	469a      	mov	sl, r3
   11150:	7e27      	ldrb	r7, [r4, #24]
   11152:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11156:	990c      	ldr	r1, [sp, #48]	; 0x30
   11158:	2f78      	cmp	r7, #120	; 0x78
   1115a:	d807      	bhi.n	1116c <_printf_i+0x28>
   1115c:	2f62      	cmp	r7, #98	; 0x62
   1115e:	d80a      	bhi.n	11176 <_printf_i+0x32>
   11160:	2f00      	cmp	r7, #0
   11162:	f000 80d8 	beq.w	11316 <_printf_i+0x1d2>
   11166:	2f58      	cmp	r7, #88	; 0x58
   11168:	f000 80a3 	beq.w	112b2 <_printf_i+0x16e>
   1116c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   11170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   11174:	e03a      	b.n	111ec <_printf_i+0xa8>
   11176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1117a:	2b15      	cmp	r3, #21
   1117c:	d8f6      	bhi.n	1116c <_printf_i+0x28>
   1117e:	a001      	add	r0, pc, #4	; (adr r0, 11184 <_printf_i+0x40>)
   11180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   11184:	000111dd 	.word	0x000111dd
   11188:	000111f1 	.word	0x000111f1
   1118c:	0001116d 	.word	0x0001116d
   11190:	0001116d 	.word	0x0001116d
   11194:	0001116d 	.word	0x0001116d
   11198:	0001116d 	.word	0x0001116d
   1119c:	000111f1 	.word	0x000111f1
   111a0:	0001116d 	.word	0x0001116d
   111a4:	0001116d 	.word	0x0001116d
   111a8:	0001116d 	.word	0x0001116d
   111ac:	0001116d 	.word	0x0001116d
   111b0:	000112fd 	.word	0x000112fd
   111b4:	00011221 	.word	0x00011221
   111b8:	000112df 	.word	0x000112df
   111bc:	0001116d 	.word	0x0001116d
   111c0:	0001116d 	.word	0x0001116d
   111c4:	0001131f 	.word	0x0001131f
   111c8:	0001116d 	.word	0x0001116d
   111cc:	00011221 	.word	0x00011221
   111d0:	0001116d 	.word	0x0001116d
   111d4:	0001116d 	.word	0x0001116d
   111d8:	000112e7 	.word	0x000112e7
   111dc:	680b      	ldr	r3, [r1, #0]
   111de:	f104 0642 	add.w	r6, r4, #66	; 0x42
   111e2:	1d1a      	adds	r2, r3, #4
   111e4:	681b      	ldr	r3, [r3, #0]
   111e6:	600a      	str	r2, [r1, #0]
   111e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   111ec:	2301      	movs	r3, #1
   111ee:	e0a3      	b.n	11338 <_printf_i+0x1f4>
   111f0:	6825      	ldr	r5, [r4, #0]
   111f2:	6808      	ldr	r0, [r1, #0]
   111f4:	062e      	lsls	r6, r5, #24
   111f6:	f100 0304 	add.w	r3, r0, #4
   111fa:	d50a      	bpl.n	11212 <_printf_i+0xce>
   111fc:	6805      	ldr	r5, [r0, #0]
   111fe:	600b      	str	r3, [r1, #0]
   11200:	2d00      	cmp	r5, #0
   11202:	da03      	bge.n	1120c <_printf_i+0xc8>
   11204:	232d      	movs	r3, #45	; 0x2d
   11206:	426d      	negs	r5, r5
   11208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1120c:	485e      	ldr	r0, [pc, #376]	; (11388 <_printf_i+0x244>)
   1120e:	230a      	movs	r3, #10
   11210:	e019      	b.n	11246 <_printf_i+0x102>
   11212:	f015 0f40 	tst.w	r5, #64	; 0x40
   11216:	6805      	ldr	r5, [r0, #0]
   11218:	600b      	str	r3, [r1, #0]
   1121a:	bf18      	it	ne
   1121c:	b22d      	sxthne	r5, r5
   1121e:	e7ef      	b.n	11200 <_printf_i+0xbc>
   11220:	680b      	ldr	r3, [r1, #0]
   11222:	6825      	ldr	r5, [r4, #0]
   11224:	1d18      	adds	r0, r3, #4
   11226:	6008      	str	r0, [r1, #0]
   11228:	0628      	lsls	r0, r5, #24
   1122a:	d501      	bpl.n	11230 <_printf_i+0xec>
   1122c:	681d      	ldr	r5, [r3, #0]
   1122e:	e002      	b.n	11236 <_printf_i+0xf2>
   11230:	0669      	lsls	r1, r5, #25
   11232:	d5fb      	bpl.n	1122c <_printf_i+0xe8>
   11234:	881d      	ldrh	r5, [r3, #0]
   11236:	2f6f      	cmp	r7, #111	; 0x6f
   11238:	4853      	ldr	r0, [pc, #332]	; (11388 <_printf_i+0x244>)
   1123a:	bf0c      	ite	eq
   1123c:	2308      	moveq	r3, #8
   1123e:	230a      	movne	r3, #10
   11240:	2100      	movs	r1, #0
   11242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   11246:	6866      	ldr	r6, [r4, #4]
   11248:	2e00      	cmp	r6, #0
   1124a:	60a6      	str	r6, [r4, #8]
   1124c:	bfa2      	ittt	ge
   1124e:	6821      	ldrge	r1, [r4, #0]
   11250:	f021 0104 	bicge.w	r1, r1, #4
   11254:	6021      	strge	r1, [r4, #0]
   11256:	b90d      	cbnz	r5, 1125c <_printf_i+0x118>
   11258:	2e00      	cmp	r6, #0
   1125a:	d04d      	beq.n	112f8 <_printf_i+0x1b4>
   1125c:	4616      	mov	r6, r2
   1125e:	fbb5 f1f3 	udiv	r1, r5, r3
   11262:	fb03 5711 	mls	r7, r3, r1, r5
   11266:	5dc7      	ldrb	r7, [r0, r7]
   11268:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1126c:	462f      	mov	r7, r5
   1126e:	460d      	mov	r5, r1
   11270:	42bb      	cmp	r3, r7
   11272:	d9f4      	bls.n	1125e <_printf_i+0x11a>
   11274:	2b08      	cmp	r3, #8
   11276:	d10b      	bne.n	11290 <_printf_i+0x14c>
   11278:	6823      	ldr	r3, [r4, #0]
   1127a:	07df      	lsls	r7, r3, #31
   1127c:	d508      	bpl.n	11290 <_printf_i+0x14c>
   1127e:	6923      	ldr	r3, [r4, #16]
   11280:	6861      	ldr	r1, [r4, #4]
   11282:	4299      	cmp	r1, r3
   11284:	bfde      	ittt	le
   11286:	2330      	movle	r3, #48	; 0x30
   11288:	f806 3c01 	strble.w	r3, [r6, #-1]
   1128c:	f106 36ff 	addle.w	r6, r6, #4294967295
   11290:	1b92      	subs	r2, r2, r6
   11292:	6122      	str	r2, [r4, #16]
   11294:	464b      	mov	r3, r9
   11296:	aa03      	add	r2, sp, #12
   11298:	4621      	mov	r1, r4
   1129a:	4640      	mov	r0, r8
   1129c:	f8cd a000 	str.w	sl, [sp]
   112a0:	f004 ffd2 	bl	16248 <_printf_common>
   112a4:	3001      	adds	r0, #1
   112a6:	d14c      	bne.n	11342 <_printf_i+0x1fe>
   112a8:	f04f 30ff 	mov.w	r0, #4294967295
   112ac:	b004      	add	sp, #16
   112ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112b2:	4835      	ldr	r0, [pc, #212]	; (11388 <_printf_i+0x244>)
   112b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   112b8:	6823      	ldr	r3, [r4, #0]
   112ba:	680e      	ldr	r6, [r1, #0]
   112bc:	061f      	lsls	r7, r3, #24
   112be:	f856 5b04 	ldr.w	r5, [r6], #4
   112c2:	600e      	str	r6, [r1, #0]
   112c4:	d514      	bpl.n	112f0 <_printf_i+0x1ac>
   112c6:	07d9      	lsls	r1, r3, #31
   112c8:	bf44      	itt	mi
   112ca:	f043 0320 	orrmi.w	r3, r3, #32
   112ce:	6023      	strmi	r3, [r4, #0]
   112d0:	b91d      	cbnz	r5, 112da <_printf_i+0x196>
   112d2:	6823      	ldr	r3, [r4, #0]
   112d4:	f023 0320 	bic.w	r3, r3, #32
   112d8:	6023      	str	r3, [r4, #0]
   112da:	2310      	movs	r3, #16
   112dc:	e7b0      	b.n	11240 <_printf_i+0xfc>
   112de:	6823      	ldr	r3, [r4, #0]
   112e0:	f043 0320 	orr.w	r3, r3, #32
   112e4:	6023      	str	r3, [r4, #0]
   112e6:	2378      	movs	r3, #120	; 0x78
   112e8:	4828      	ldr	r0, [pc, #160]	; (1138c <_printf_i+0x248>)
   112ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   112ee:	e7e3      	b.n	112b8 <_printf_i+0x174>
   112f0:	065e      	lsls	r6, r3, #25
   112f2:	bf48      	it	mi
   112f4:	b2ad      	uxthmi	r5, r5
   112f6:	e7e6      	b.n	112c6 <_printf_i+0x182>
   112f8:	4616      	mov	r6, r2
   112fa:	e7bb      	b.n	11274 <_printf_i+0x130>
   112fc:	680b      	ldr	r3, [r1, #0]
   112fe:	6826      	ldr	r6, [r4, #0]
   11300:	1d1d      	adds	r5, r3, #4
   11302:	6960      	ldr	r0, [r4, #20]
   11304:	600d      	str	r5, [r1, #0]
   11306:	0635      	lsls	r5, r6, #24
   11308:	681b      	ldr	r3, [r3, #0]
   1130a:	d501      	bpl.n	11310 <_printf_i+0x1cc>
   1130c:	6018      	str	r0, [r3, #0]
   1130e:	e002      	b.n	11316 <_printf_i+0x1d2>
   11310:	0671      	lsls	r1, r6, #25
   11312:	d5fb      	bpl.n	1130c <_printf_i+0x1c8>
   11314:	8018      	strh	r0, [r3, #0]
   11316:	2300      	movs	r3, #0
   11318:	4616      	mov	r6, r2
   1131a:	6123      	str	r3, [r4, #16]
   1131c:	e7ba      	b.n	11294 <_printf_i+0x150>
   1131e:	680b      	ldr	r3, [r1, #0]
   11320:	1d1a      	adds	r2, r3, #4
   11322:	600a      	str	r2, [r1, #0]
   11324:	2100      	movs	r1, #0
   11326:	681e      	ldr	r6, [r3, #0]
   11328:	6862      	ldr	r2, [r4, #4]
   1132a:	4630      	mov	r0, r6
   1132c:	f004 fea4 	bl	16078 <memchr>
   11330:	b108      	cbz	r0, 11336 <_printf_i+0x1f2>
   11332:	1b80      	subs	r0, r0, r6
   11334:	6060      	str	r0, [r4, #4]
   11336:	6863      	ldr	r3, [r4, #4]
   11338:	6123      	str	r3, [r4, #16]
   1133a:	2300      	movs	r3, #0
   1133c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   11340:	e7a8      	b.n	11294 <_printf_i+0x150>
   11342:	6923      	ldr	r3, [r4, #16]
   11344:	4632      	mov	r2, r6
   11346:	4649      	mov	r1, r9
   11348:	4640      	mov	r0, r8
   1134a:	47d0      	blx	sl
   1134c:	3001      	adds	r0, #1
   1134e:	d0ab      	beq.n	112a8 <_printf_i+0x164>
   11350:	6823      	ldr	r3, [r4, #0]
   11352:	079b      	lsls	r3, r3, #30
   11354:	d413      	bmi.n	1137e <_printf_i+0x23a>
   11356:	68e0      	ldr	r0, [r4, #12]
   11358:	9b03      	ldr	r3, [sp, #12]
   1135a:	4298      	cmp	r0, r3
   1135c:	bfb8      	it	lt
   1135e:	4618      	movlt	r0, r3
   11360:	e7a4      	b.n	112ac <_printf_i+0x168>
   11362:	2301      	movs	r3, #1
   11364:	4632      	mov	r2, r6
   11366:	4649      	mov	r1, r9
   11368:	4640      	mov	r0, r8
   1136a:	47d0      	blx	sl
   1136c:	3001      	adds	r0, #1
   1136e:	d09b      	beq.n	112a8 <_printf_i+0x164>
   11370:	3501      	adds	r5, #1
   11372:	68e3      	ldr	r3, [r4, #12]
   11374:	9903      	ldr	r1, [sp, #12]
   11376:	1a5b      	subs	r3, r3, r1
   11378:	42ab      	cmp	r3, r5
   1137a:	dcf2      	bgt.n	11362 <_printf_i+0x21e>
   1137c:	e7eb      	b.n	11356 <_printf_i+0x212>
   1137e:	2500      	movs	r5, #0
   11380:	f104 0619 	add.w	r6, r4, #25
   11384:	e7f5      	b.n	11372 <_printf_i+0x22e>
   11386:	bf00      	nop
   11388:	0006bd4c 	.word	0x0006bd4c
   1138c:	0006bd5d 	.word	0x0006bd5d

00011390 <_sbrk_r>:
   11390:	b538      	push	{r3, r4, r5, lr}
   11392:	2300      	movs	r3, #0
   11394:	4d05      	ldr	r5, [pc, #20]	; (113ac <_sbrk_r+0x1c>)
   11396:	4604      	mov	r4, r0
   11398:	4608      	mov	r0, r1
   1139a:	602b      	str	r3, [r5, #0]
   1139c:	f7f3 fb9e 	bl	4adc <_sbrk>
   113a0:	1c43      	adds	r3, r0, #1
   113a2:	d102      	bne.n	113aa <_sbrk_r+0x1a>
   113a4:	682b      	ldr	r3, [r5, #0]
   113a6:	b103      	cbz	r3, 113aa <_sbrk_r+0x1a>
   113a8:	6023      	str	r3, [r4, #0]
   113aa:	bd38      	pop	{r3, r4, r5, pc}
   113ac:	20020c44 	.word	0x20020c44

000113b0 <raise>:
   113b0:	4b02      	ldr	r3, [pc, #8]	; (113bc <raise+0xc>)
   113b2:	4601      	mov	r1, r0
   113b4:	6818      	ldr	r0, [r3, #0]
   113b6:	f004 bfb7 	b.w	16328 <_raise_r>
   113ba:	bf00      	nop
   113bc:	200000cc 	.word	0x200000cc

000113c0 <_kill_r>:
   113c0:	b538      	push	{r3, r4, r5, lr}
   113c2:	2300      	movs	r3, #0
   113c4:	4d06      	ldr	r5, [pc, #24]	; (113e0 <_kill_r+0x20>)
   113c6:	4604      	mov	r4, r0
   113c8:	4608      	mov	r0, r1
   113ca:	4611      	mov	r1, r2
   113cc:	602b      	str	r3, [r5, #0]
   113ce:	f001 f9f1 	bl	127b4 <_kill>
   113d2:	1c43      	adds	r3, r0, #1
   113d4:	d102      	bne.n	113dc <_kill_r+0x1c>
   113d6:	682b      	ldr	r3, [r5, #0]
   113d8:	b103      	cbz	r3, 113dc <_kill_r+0x1c>
   113da:	6023      	str	r3, [r4, #0]
   113dc:	bd38      	pop	{r3, r4, r5, pc}
   113de:	bf00      	nop
   113e0:	20020c44 	.word	0x20020c44

000113e4 <strtok>:
   113e4:	4b13      	ldr	r3, [pc, #76]	; (11434 <strtok+0x50>)
   113e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113ea:	681f      	ldr	r7, [r3, #0]
   113ec:	4605      	mov	r5, r0
   113ee:	460e      	mov	r6, r1
   113f0:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   113f2:	b9b4      	cbnz	r4, 11422 <strtok+0x3e>
   113f4:	2050      	movs	r0, #80	; 0x50
   113f6:	f7ff fa93 	bl	10920 <malloc>
   113fa:	65b8      	str	r0, [r7, #88]	; 0x58
   113fc:	6184      	str	r4, [r0, #24]
   113fe:	7704      	strb	r4, [r0, #28]
   11400:	6244      	str	r4, [r0, #36]	; 0x24
   11402:	e9c0 4400 	strd	r4, r4, [r0]
   11406:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1140a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   1140e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   11412:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   11416:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   1141a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   1141e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   11422:	6dba      	ldr	r2, [r7, #88]	; 0x58
   11424:	4631      	mov	r1, r6
   11426:	4628      	mov	r0, r5
   11428:	2301      	movs	r3, #1
   1142a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1142e:	f004 bfd7 	b.w	163e0 <__strtok_r>
   11432:	bf00      	nop
   11434:	200000cc 	.word	0x200000cc

00011438 <_strtol_l.isra.0>:
   11438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1143c:	468c      	mov	ip, r1
   1143e:	4686      	mov	lr, r0
   11440:	4e38      	ldr	r6, [pc, #224]	; (11524 <_strtol_l.isra.0+0xec>)
   11442:	4660      	mov	r0, ip
   11444:	f81c 4b01 	ldrb.w	r4, [ip], #1
   11448:	5da5      	ldrb	r5, [r4, r6]
   1144a:	f015 0508 	ands.w	r5, r5, #8
   1144e:	d1f8      	bne.n	11442 <_strtol_l.isra.0+0xa>
   11450:	2c2d      	cmp	r4, #45	; 0x2d
   11452:	d133      	bne.n	114bc <_strtol_l.isra.0+0x84>
   11454:	f89c 4000 	ldrb.w	r4, [ip]
   11458:	f04f 0801 	mov.w	r8, #1
   1145c:	f100 0c02 	add.w	ip, r0, #2
   11460:	2b00      	cmp	r3, #0
   11462:	d05b      	beq.n	1151c <_strtol_l.isra.0+0xe4>
   11464:	2b10      	cmp	r3, #16
   11466:	d10c      	bne.n	11482 <_strtol_l.isra.0+0x4a>
   11468:	2c30      	cmp	r4, #48	; 0x30
   1146a:	d10a      	bne.n	11482 <_strtol_l.isra.0+0x4a>
   1146c:	f89c 0000 	ldrb.w	r0, [ip]
   11470:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11474:	2858      	cmp	r0, #88	; 0x58
   11476:	d14c      	bne.n	11512 <_strtol_l.isra.0+0xda>
   11478:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1147c:	2310      	movs	r3, #16
   1147e:	f10c 0c02 	add.w	ip, ip, #2
   11482:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   11486:	2600      	movs	r6, #0
   11488:	3f01      	subs	r7, #1
   1148a:	4630      	mov	r0, r6
   1148c:	fbb7 f9f3 	udiv	r9, r7, r3
   11490:	fb03 7a19 	mls	sl, r3, r9, r7
   11494:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   11498:	2d09      	cmp	r5, #9
   1149a:	d817      	bhi.n	114cc <_strtol_l.isra.0+0x94>
   1149c:	462c      	mov	r4, r5
   1149e:	42a3      	cmp	r3, r4
   114a0:	dd23      	ble.n	114ea <_strtol_l.isra.0+0xb2>
   114a2:	1c75      	adds	r5, r6, #1
   114a4:	d007      	beq.n	114b6 <_strtol_l.isra.0+0x7e>
   114a6:	4581      	cmp	r9, r0
   114a8:	d31c      	bcc.n	114e4 <_strtol_l.isra.0+0xac>
   114aa:	d101      	bne.n	114b0 <_strtol_l.isra.0+0x78>
   114ac:	45a2      	cmp	sl, r4
   114ae:	db19      	blt.n	114e4 <_strtol_l.isra.0+0xac>
   114b0:	fb00 4003 	mla	r0, r0, r3, r4
   114b4:	2601      	movs	r6, #1
   114b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   114ba:	e7eb      	b.n	11494 <_strtol_l.isra.0+0x5c>
   114bc:	2c2b      	cmp	r4, #43	; 0x2b
   114be:	46a8      	mov	r8, r5
   114c0:	bf04      	itt	eq
   114c2:	f89c 4000 	ldrbeq.w	r4, [ip]
   114c6:	f100 0c02 	addeq.w	ip, r0, #2
   114ca:	e7c9      	b.n	11460 <_strtol_l.isra.0+0x28>
   114cc:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   114d0:	2d19      	cmp	r5, #25
   114d2:	d801      	bhi.n	114d8 <_strtol_l.isra.0+0xa0>
   114d4:	3c37      	subs	r4, #55	; 0x37
   114d6:	e7e2      	b.n	1149e <_strtol_l.isra.0+0x66>
   114d8:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   114dc:	2d19      	cmp	r5, #25
   114de:	d804      	bhi.n	114ea <_strtol_l.isra.0+0xb2>
   114e0:	3c57      	subs	r4, #87	; 0x57
   114e2:	e7dc      	b.n	1149e <_strtol_l.isra.0+0x66>
   114e4:	f04f 36ff 	mov.w	r6, #4294967295
   114e8:	e7e5      	b.n	114b6 <_strtol_l.isra.0+0x7e>
   114ea:	1c73      	adds	r3, r6, #1
   114ec:	d106      	bne.n	114fc <_strtol_l.isra.0+0xc4>
   114ee:	2322      	movs	r3, #34	; 0x22
   114f0:	4638      	mov	r0, r7
   114f2:	f8ce 3000 	str.w	r3, [lr]
   114f6:	b942      	cbnz	r2, 1150a <_strtol_l.isra.0+0xd2>
   114f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   114fc:	f1b8 0f00 	cmp.w	r8, #0
   11500:	d000      	beq.n	11504 <_strtol_l.isra.0+0xcc>
   11502:	4240      	negs	r0, r0
   11504:	2a00      	cmp	r2, #0
   11506:	d0f7      	beq.n	114f8 <_strtol_l.isra.0+0xc0>
   11508:	b10e      	cbz	r6, 1150e <_strtol_l.isra.0+0xd6>
   1150a:	f10c 31ff 	add.w	r1, ip, #4294967295
   1150e:	6011      	str	r1, [r2, #0]
   11510:	e7f2      	b.n	114f8 <_strtol_l.isra.0+0xc0>
   11512:	2430      	movs	r4, #48	; 0x30
   11514:	2b00      	cmp	r3, #0
   11516:	d1b4      	bne.n	11482 <_strtol_l.isra.0+0x4a>
   11518:	2308      	movs	r3, #8
   1151a:	e7b2      	b.n	11482 <_strtol_l.isra.0+0x4a>
   1151c:	2c30      	cmp	r4, #48	; 0x30
   1151e:	d0a5      	beq.n	1146c <_strtol_l.isra.0+0x34>
   11520:	230a      	movs	r3, #10
   11522:	e7ae      	b.n	11482 <_strtol_l.isra.0+0x4a>
   11524:	0006bc29 	.word	0x0006bc29

00011528 <strtol>:
   11528:	4613      	mov	r3, r2
   1152a:	460a      	mov	r2, r1
   1152c:	4601      	mov	r1, r0
   1152e:	4802      	ldr	r0, [pc, #8]	; (11538 <strtol+0x10>)
   11530:	6800      	ldr	r0, [r0, #0]
   11532:	f7ff bf81 	b.w	11438 <_strtol_l.isra.0>
   11536:	bf00      	nop
   11538:	200000cc 	.word	0x200000cc

0001153c <viprintf>:
   1153c:	4b09      	ldr	r3, [pc, #36]	; (11564 <viprintf+0x28>)
   1153e:	b570      	push	{r4, r5, r6, lr}
   11540:	681c      	ldr	r4, [r3, #0]
   11542:	4605      	mov	r5, r0
   11544:	460e      	mov	r6, r1
   11546:	b124      	cbz	r4, 11552 <viprintf+0x16>
   11548:	69a3      	ldr	r3, [r4, #24]
   1154a:	b913      	cbnz	r3, 11552 <viprintf+0x16>
   1154c:	4620      	mov	r0, r4
   1154e:	f000 f9cd 	bl	118ec <__sinit>
   11552:	4633      	mov	r3, r6
   11554:	462a      	mov	r2, r5
   11556:	68a1      	ldr	r1, [r4, #8]
   11558:	4620      	mov	r0, r4
   1155a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1155e:	f7ff ba97 	b.w	10a90 <_vfiprintf_r>
   11562:	bf00      	nop
   11564:	200000cc 	.word	0x200000cc

00011568 <__swbuf_r>:
   11568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1156a:	460e      	mov	r6, r1
   1156c:	4614      	mov	r4, r2
   1156e:	4605      	mov	r5, r0
   11570:	b118      	cbz	r0, 1157a <__swbuf_r+0x12>
   11572:	6983      	ldr	r3, [r0, #24]
   11574:	b90b      	cbnz	r3, 1157a <__swbuf_r+0x12>
   11576:	f000 f9b9 	bl	118ec <__sinit>
   1157a:	4b21      	ldr	r3, [pc, #132]	; (11600 <__swbuf_r+0x98>)
   1157c:	429c      	cmp	r4, r3
   1157e:	d12b      	bne.n	115d8 <__swbuf_r+0x70>
   11580:	686c      	ldr	r4, [r5, #4]
   11582:	69a3      	ldr	r3, [r4, #24]
   11584:	60a3      	str	r3, [r4, #8]
   11586:	89a3      	ldrh	r3, [r4, #12]
   11588:	071a      	lsls	r2, r3, #28
   1158a:	d52f      	bpl.n	115ec <__swbuf_r+0x84>
   1158c:	6923      	ldr	r3, [r4, #16]
   1158e:	b36b      	cbz	r3, 115ec <__swbuf_r+0x84>
   11590:	6923      	ldr	r3, [r4, #16]
   11592:	b2f6      	uxtb	r6, r6
   11594:	6820      	ldr	r0, [r4, #0]
   11596:	4637      	mov	r7, r6
   11598:	1ac0      	subs	r0, r0, r3
   1159a:	6963      	ldr	r3, [r4, #20]
   1159c:	4283      	cmp	r3, r0
   1159e:	dc04      	bgt.n	115aa <__swbuf_r+0x42>
   115a0:	4621      	mov	r1, r4
   115a2:	4628      	mov	r0, r5
   115a4:	f000 f924 	bl	117f0 <_fflush_r>
   115a8:	bb30      	cbnz	r0, 115f8 <__swbuf_r+0x90>
   115aa:	68a3      	ldr	r3, [r4, #8]
   115ac:	3001      	adds	r0, #1
   115ae:	3b01      	subs	r3, #1
   115b0:	60a3      	str	r3, [r4, #8]
   115b2:	6823      	ldr	r3, [r4, #0]
   115b4:	1c5a      	adds	r2, r3, #1
   115b6:	6022      	str	r2, [r4, #0]
   115b8:	701e      	strb	r6, [r3, #0]
   115ba:	6963      	ldr	r3, [r4, #20]
   115bc:	4283      	cmp	r3, r0
   115be:	d004      	beq.n	115ca <__swbuf_r+0x62>
   115c0:	89a3      	ldrh	r3, [r4, #12]
   115c2:	07db      	lsls	r3, r3, #31
   115c4:	d506      	bpl.n	115d4 <__swbuf_r+0x6c>
   115c6:	2e0a      	cmp	r6, #10
   115c8:	d104      	bne.n	115d4 <__swbuf_r+0x6c>
   115ca:	4621      	mov	r1, r4
   115cc:	4628      	mov	r0, r5
   115ce:	f000 f90f 	bl	117f0 <_fflush_r>
   115d2:	b988      	cbnz	r0, 115f8 <__swbuf_r+0x90>
   115d4:	4638      	mov	r0, r7
   115d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115d8:	4b0a      	ldr	r3, [pc, #40]	; (11604 <__swbuf_r+0x9c>)
   115da:	429c      	cmp	r4, r3
   115dc:	d101      	bne.n	115e2 <__swbuf_r+0x7a>
   115de:	68ac      	ldr	r4, [r5, #8]
   115e0:	e7cf      	b.n	11582 <__swbuf_r+0x1a>
   115e2:	4b09      	ldr	r3, [pc, #36]	; (11608 <__swbuf_r+0xa0>)
   115e4:	429c      	cmp	r4, r3
   115e6:	bf08      	it	eq
   115e8:	68ec      	ldreq	r4, [r5, #12]
   115ea:	e7ca      	b.n	11582 <__swbuf_r+0x1a>
   115ec:	4621      	mov	r1, r4
   115ee:	4628      	mov	r0, r5
   115f0:	f000 f80c 	bl	1160c <__swsetup_r>
   115f4:	2800      	cmp	r0, #0
   115f6:	d0cb      	beq.n	11590 <__swbuf_r+0x28>
   115f8:	f04f 37ff 	mov.w	r7, #4294967295
   115fc:	e7ea      	b.n	115d4 <__swbuf_r+0x6c>
   115fe:	bf00      	nop
   11600:	0006bba0 	.word	0x0006bba0
   11604:	0006bbc0 	.word	0x0006bbc0
   11608:	0006bb80 	.word	0x0006bb80

0001160c <__swsetup_r>:
   1160c:	4b32      	ldr	r3, [pc, #200]	; (116d8 <__swsetup_r+0xcc>)
   1160e:	b570      	push	{r4, r5, r6, lr}
   11610:	681d      	ldr	r5, [r3, #0]
   11612:	4606      	mov	r6, r0
   11614:	460c      	mov	r4, r1
   11616:	b125      	cbz	r5, 11622 <__swsetup_r+0x16>
   11618:	69ab      	ldr	r3, [r5, #24]
   1161a:	b913      	cbnz	r3, 11622 <__swsetup_r+0x16>
   1161c:	4628      	mov	r0, r5
   1161e:	f000 f965 	bl	118ec <__sinit>
   11622:	4b2e      	ldr	r3, [pc, #184]	; (116dc <__swsetup_r+0xd0>)
   11624:	429c      	cmp	r4, r3
   11626:	d10f      	bne.n	11648 <__swsetup_r+0x3c>
   11628:	686c      	ldr	r4, [r5, #4]
   1162a:	89a3      	ldrh	r3, [r4, #12]
   1162c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11630:	0719      	lsls	r1, r3, #28
   11632:	d42c      	bmi.n	1168e <__swsetup_r+0x82>
   11634:	06dd      	lsls	r5, r3, #27
   11636:	d411      	bmi.n	1165c <__swsetup_r+0x50>
   11638:	2309      	movs	r3, #9
   1163a:	6033      	str	r3, [r6, #0]
   1163c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   11640:	f04f 30ff 	mov.w	r0, #4294967295
   11644:	81a3      	strh	r3, [r4, #12]
   11646:	e03e      	b.n	116c6 <__swsetup_r+0xba>
   11648:	4b25      	ldr	r3, [pc, #148]	; (116e0 <__swsetup_r+0xd4>)
   1164a:	429c      	cmp	r4, r3
   1164c:	d101      	bne.n	11652 <__swsetup_r+0x46>
   1164e:	68ac      	ldr	r4, [r5, #8]
   11650:	e7eb      	b.n	1162a <__swsetup_r+0x1e>
   11652:	4b24      	ldr	r3, [pc, #144]	; (116e4 <__swsetup_r+0xd8>)
   11654:	429c      	cmp	r4, r3
   11656:	bf08      	it	eq
   11658:	68ec      	ldreq	r4, [r5, #12]
   1165a:	e7e6      	b.n	1162a <__swsetup_r+0x1e>
   1165c:	0758      	lsls	r0, r3, #29
   1165e:	d512      	bpl.n	11686 <__swsetup_r+0x7a>
   11660:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11662:	b141      	cbz	r1, 11676 <__swsetup_r+0x6a>
   11664:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11668:	4299      	cmp	r1, r3
   1166a:	d002      	beq.n	11672 <__swsetup_r+0x66>
   1166c:	4630      	mov	r0, r6
   1166e:	f7ff f967 	bl	10940 <_free_r>
   11672:	2300      	movs	r3, #0
   11674:	6363      	str	r3, [r4, #52]	; 0x34
   11676:	89a3      	ldrh	r3, [r4, #12]
   11678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1167c:	81a3      	strh	r3, [r4, #12]
   1167e:	2300      	movs	r3, #0
   11680:	6063      	str	r3, [r4, #4]
   11682:	6923      	ldr	r3, [r4, #16]
   11684:	6023      	str	r3, [r4, #0]
   11686:	89a3      	ldrh	r3, [r4, #12]
   11688:	f043 0308 	orr.w	r3, r3, #8
   1168c:	81a3      	strh	r3, [r4, #12]
   1168e:	6923      	ldr	r3, [r4, #16]
   11690:	b94b      	cbnz	r3, 116a6 <__swsetup_r+0x9a>
   11692:	89a3      	ldrh	r3, [r4, #12]
   11694:	f403 7320 	and.w	r3, r3, #640	; 0x280
   11698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1169c:	d003      	beq.n	116a6 <__swsetup_r+0x9a>
   1169e:	4621      	mov	r1, r4
   116a0:	4630      	mov	r0, r6
   116a2:	f000 f9a5 	bl	119f0 <__smakebuf_r>
   116a6:	89a0      	ldrh	r0, [r4, #12]
   116a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   116ac:	f010 0301 	ands.w	r3, r0, #1
   116b0:	d00a      	beq.n	116c8 <__swsetup_r+0xbc>
   116b2:	2300      	movs	r3, #0
   116b4:	60a3      	str	r3, [r4, #8]
   116b6:	6963      	ldr	r3, [r4, #20]
   116b8:	425b      	negs	r3, r3
   116ba:	61a3      	str	r3, [r4, #24]
   116bc:	6923      	ldr	r3, [r4, #16]
   116be:	b943      	cbnz	r3, 116d2 <__swsetup_r+0xc6>
   116c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   116c4:	d1ba      	bne.n	1163c <__swsetup_r+0x30>
   116c6:	bd70      	pop	{r4, r5, r6, pc}
   116c8:	0781      	lsls	r1, r0, #30
   116ca:	bf58      	it	pl
   116cc:	6963      	ldrpl	r3, [r4, #20]
   116ce:	60a3      	str	r3, [r4, #8]
   116d0:	e7f4      	b.n	116bc <__swsetup_r+0xb0>
   116d2:	2000      	movs	r0, #0
   116d4:	e7f7      	b.n	116c6 <__swsetup_r+0xba>
   116d6:	bf00      	nop
   116d8:	200000cc 	.word	0x200000cc
   116dc:	0006bba0 	.word	0x0006bba0
   116e0:	0006bbc0 	.word	0x0006bbc0
   116e4:	0006bb80 	.word	0x0006bb80

000116e8 <__sflush_r>:
   116e8:	898a      	ldrh	r2, [r1, #12]
   116ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116ee:	4605      	mov	r5, r0
   116f0:	0710      	lsls	r0, r2, #28
   116f2:	460c      	mov	r4, r1
   116f4:	d458      	bmi.n	117a8 <__sflush_r+0xc0>
   116f6:	684b      	ldr	r3, [r1, #4]
   116f8:	2b00      	cmp	r3, #0
   116fa:	dc05      	bgt.n	11708 <__sflush_r+0x20>
   116fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   116fe:	2b00      	cmp	r3, #0
   11700:	dc02      	bgt.n	11708 <__sflush_r+0x20>
   11702:	2000      	movs	r0, #0
   11704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1170a:	2e00      	cmp	r6, #0
   1170c:	d0f9      	beq.n	11702 <__sflush_r+0x1a>
   1170e:	2300      	movs	r3, #0
   11710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11714:	682f      	ldr	r7, [r5, #0]
   11716:	602b      	str	r3, [r5, #0]
   11718:	d032      	beq.n	11780 <__sflush_r+0x98>
   1171a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1171c:	89a3      	ldrh	r3, [r4, #12]
   1171e:	075a      	lsls	r2, r3, #29
   11720:	d505      	bpl.n	1172e <__sflush_r+0x46>
   11722:	6863      	ldr	r3, [r4, #4]
   11724:	1ac0      	subs	r0, r0, r3
   11726:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11728:	b10b      	cbz	r3, 1172e <__sflush_r+0x46>
   1172a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1172c:	1ac0      	subs	r0, r0, r3
   1172e:	2300      	movs	r3, #0
   11730:	4602      	mov	r2, r0
   11732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   11734:	4628      	mov	r0, r5
   11736:	6a21      	ldr	r1, [r4, #32]
   11738:	47b0      	blx	r6
   1173a:	1c43      	adds	r3, r0, #1
   1173c:	89a3      	ldrh	r3, [r4, #12]
   1173e:	d106      	bne.n	1174e <__sflush_r+0x66>
   11740:	6829      	ldr	r1, [r5, #0]
   11742:	291d      	cmp	r1, #29
   11744:	d82c      	bhi.n	117a0 <__sflush_r+0xb8>
   11746:	4a29      	ldr	r2, [pc, #164]	; (117ec <__sflush_r+0x104>)
   11748:	40ca      	lsrs	r2, r1
   1174a:	07d6      	lsls	r6, r2, #31
   1174c:	d528      	bpl.n	117a0 <__sflush_r+0xb8>
   1174e:	2200      	movs	r2, #0
   11750:	04d9      	lsls	r1, r3, #19
   11752:	6062      	str	r2, [r4, #4]
   11754:	6922      	ldr	r2, [r4, #16]
   11756:	6022      	str	r2, [r4, #0]
   11758:	d504      	bpl.n	11764 <__sflush_r+0x7c>
   1175a:	1c42      	adds	r2, r0, #1
   1175c:	d101      	bne.n	11762 <__sflush_r+0x7a>
   1175e:	682b      	ldr	r3, [r5, #0]
   11760:	b903      	cbnz	r3, 11764 <__sflush_r+0x7c>
   11762:	6560      	str	r0, [r4, #84]	; 0x54
   11764:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11766:	602f      	str	r7, [r5, #0]
   11768:	2900      	cmp	r1, #0
   1176a:	d0ca      	beq.n	11702 <__sflush_r+0x1a>
   1176c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11770:	4299      	cmp	r1, r3
   11772:	d002      	beq.n	1177a <__sflush_r+0x92>
   11774:	4628      	mov	r0, r5
   11776:	f7ff f8e3 	bl	10940 <_free_r>
   1177a:	2000      	movs	r0, #0
   1177c:	6360      	str	r0, [r4, #52]	; 0x34
   1177e:	e7c1      	b.n	11704 <__sflush_r+0x1c>
   11780:	6a21      	ldr	r1, [r4, #32]
   11782:	2301      	movs	r3, #1
   11784:	4628      	mov	r0, r5
   11786:	47b0      	blx	r6
   11788:	1c41      	adds	r1, r0, #1
   1178a:	d1c7      	bne.n	1171c <__sflush_r+0x34>
   1178c:	682b      	ldr	r3, [r5, #0]
   1178e:	2b00      	cmp	r3, #0
   11790:	d0c4      	beq.n	1171c <__sflush_r+0x34>
   11792:	2b1d      	cmp	r3, #29
   11794:	d001      	beq.n	1179a <__sflush_r+0xb2>
   11796:	2b16      	cmp	r3, #22
   11798:	d101      	bne.n	1179e <__sflush_r+0xb6>
   1179a:	602f      	str	r7, [r5, #0]
   1179c:	e7b1      	b.n	11702 <__sflush_r+0x1a>
   1179e:	89a3      	ldrh	r3, [r4, #12]
   117a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   117a4:	81a3      	strh	r3, [r4, #12]
   117a6:	e7ad      	b.n	11704 <__sflush_r+0x1c>
   117a8:	690f      	ldr	r7, [r1, #16]
   117aa:	2f00      	cmp	r7, #0
   117ac:	d0a9      	beq.n	11702 <__sflush_r+0x1a>
   117ae:	0793      	lsls	r3, r2, #30
   117b0:	680e      	ldr	r6, [r1, #0]
   117b2:	600f      	str	r7, [r1, #0]
   117b4:	bf0c      	ite	eq
   117b6:	694b      	ldreq	r3, [r1, #20]
   117b8:	2300      	movne	r3, #0
   117ba:	eba6 0807 	sub.w	r8, r6, r7
   117be:	608b      	str	r3, [r1, #8]
   117c0:	f1b8 0f00 	cmp.w	r8, #0
   117c4:	dd9d      	ble.n	11702 <__sflush_r+0x1a>
   117c6:	4643      	mov	r3, r8
   117c8:	463a      	mov	r2, r7
   117ca:	6a21      	ldr	r1, [r4, #32]
   117cc:	4628      	mov	r0, r5
   117ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   117d0:	47b0      	blx	r6
   117d2:	2800      	cmp	r0, #0
   117d4:	dc06      	bgt.n	117e4 <__sflush_r+0xfc>
   117d6:	89a3      	ldrh	r3, [r4, #12]
   117d8:	f04f 30ff 	mov.w	r0, #4294967295
   117dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   117e0:	81a3      	strh	r3, [r4, #12]
   117e2:	e78f      	b.n	11704 <__sflush_r+0x1c>
   117e4:	4407      	add	r7, r0
   117e6:	eba8 0800 	sub.w	r8, r8, r0
   117ea:	e7e9      	b.n	117c0 <__sflush_r+0xd8>
   117ec:	20400001 	.word	0x20400001

000117f0 <_fflush_r>:
   117f0:	b538      	push	{r3, r4, r5, lr}
   117f2:	690b      	ldr	r3, [r1, #16]
   117f4:	4605      	mov	r5, r0
   117f6:	460c      	mov	r4, r1
   117f8:	b913      	cbnz	r3, 11800 <_fflush_r+0x10>
   117fa:	2500      	movs	r5, #0
   117fc:	4628      	mov	r0, r5
   117fe:	bd38      	pop	{r3, r4, r5, pc}
   11800:	b118      	cbz	r0, 1180a <_fflush_r+0x1a>
   11802:	6983      	ldr	r3, [r0, #24]
   11804:	b90b      	cbnz	r3, 1180a <_fflush_r+0x1a>
   11806:	f000 f871 	bl	118ec <__sinit>
   1180a:	4b14      	ldr	r3, [pc, #80]	; (1185c <_fflush_r+0x6c>)
   1180c:	429c      	cmp	r4, r3
   1180e:	d11b      	bne.n	11848 <_fflush_r+0x58>
   11810:	686c      	ldr	r4, [r5, #4]
   11812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11816:	2b00      	cmp	r3, #0
   11818:	d0ef      	beq.n	117fa <_fflush_r+0xa>
   1181a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1181c:	07d0      	lsls	r0, r2, #31
   1181e:	d404      	bmi.n	1182a <_fflush_r+0x3a>
   11820:	0599      	lsls	r1, r3, #22
   11822:	d402      	bmi.n	1182a <_fflush_r+0x3a>
   11824:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11826:	f000 ffd7 	bl	127d8 <__retarget_lock_acquire_recursive>
   1182a:	4628      	mov	r0, r5
   1182c:	4621      	mov	r1, r4
   1182e:	f7ff ff5b 	bl	116e8 <__sflush_r>
   11832:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11834:	4605      	mov	r5, r0
   11836:	07da      	lsls	r2, r3, #31
   11838:	d4e0      	bmi.n	117fc <_fflush_r+0xc>
   1183a:	89a3      	ldrh	r3, [r4, #12]
   1183c:	059b      	lsls	r3, r3, #22
   1183e:	d4dd      	bmi.n	117fc <_fflush_r+0xc>
   11840:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11842:	f000 ffd1 	bl	127e8 <__retarget_lock_release_recursive>
   11846:	e7d9      	b.n	117fc <_fflush_r+0xc>
   11848:	4b05      	ldr	r3, [pc, #20]	; (11860 <_fflush_r+0x70>)
   1184a:	429c      	cmp	r4, r3
   1184c:	d101      	bne.n	11852 <_fflush_r+0x62>
   1184e:	68ac      	ldr	r4, [r5, #8]
   11850:	e7df      	b.n	11812 <_fflush_r+0x22>
   11852:	4b04      	ldr	r3, [pc, #16]	; (11864 <_fflush_r+0x74>)
   11854:	429c      	cmp	r4, r3
   11856:	bf08      	it	eq
   11858:	68ec      	ldreq	r4, [r5, #12]
   1185a:	e7da      	b.n	11812 <_fflush_r+0x22>
   1185c:	0006bba0 	.word	0x0006bba0
   11860:	0006bbc0 	.word	0x0006bbc0
   11864:	0006bb80 	.word	0x0006bb80

00011868 <std>:
   11868:	2300      	movs	r3, #0
   1186a:	b510      	push	{r4, lr}
   1186c:	4604      	mov	r4, r0
   1186e:	6083      	str	r3, [r0, #8]
   11870:	8181      	strh	r1, [r0, #12]
   11872:	4619      	mov	r1, r3
   11874:	6643      	str	r3, [r0, #100]	; 0x64
   11876:	81c2      	strh	r2, [r0, #14]
   11878:	2208      	movs	r2, #8
   1187a:	6183      	str	r3, [r0, #24]
   1187c:	e9c0 3300 	strd	r3, r3, [r0]
   11880:	e9c0 3304 	strd	r3, r3, [r0, #16]
   11884:	305c      	adds	r0, #92	; 0x5c
   11886:	f004 fc12 	bl	160ae <memset>
   1188a:	4b05      	ldr	r3, [pc, #20]	; (118a0 <std+0x38>)
   1188c:	6224      	str	r4, [r4, #32]
   1188e:	6263      	str	r3, [r4, #36]	; 0x24
   11890:	4b04      	ldr	r3, [pc, #16]	; (118a4 <std+0x3c>)
   11892:	62a3      	str	r3, [r4, #40]	; 0x28
   11894:	4b04      	ldr	r3, [pc, #16]	; (118a8 <std+0x40>)
   11896:	62e3      	str	r3, [r4, #44]	; 0x2c
   11898:	4b04      	ldr	r3, [pc, #16]	; (118ac <std+0x44>)
   1189a:	6323      	str	r3, [r4, #48]	; 0x30
   1189c:	bd10      	pop	{r4, pc}
   1189e:	bf00      	nop
   118a0:	00016ba1 	.word	0x00016ba1
   118a4:	00016bc3 	.word	0x00016bc3
   118a8:	00016bfb 	.word	0x00016bfb
   118ac:	00016c1f 	.word	0x00016c1f

000118b0 <_cleanup_r>:
   118b0:	4901      	ldr	r1, [pc, #4]	; (118b8 <_cleanup_r+0x8>)
   118b2:	f004 be62 	b.w	1657a <_fwalk_reent>
   118b6:	bf00      	nop
   118b8:	000117f1 	.word	0x000117f1

000118bc <__sfp_lock_acquire>:
   118bc:	4801      	ldr	r0, [pc, #4]	; (118c4 <__sfp_lock_acquire+0x8>)
   118be:	f000 bf8b 	b.w	127d8 <__retarget_lock_acquire_recursive>
   118c2:	bf00      	nop
   118c4:	200002c8 	.word	0x200002c8

000118c8 <__sfp_lock_release>:
   118c8:	4801      	ldr	r0, [pc, #4]	; (118d0 <__sfp_lock_release+0x8>)
   118ca:	f000 bf8d 	b.w	127e8 <__retarget_lock_release_recursive>
   118ce:	bf00      	nop
   118d0:	200002c8 	.word	0x200002c8

000118d4 <__sinit_lock_acquire>:
   118d4:	4801      	ldr	r0, [pc, #4]	; (118dc <__sinit_lock_acquire+0x8>)
   118d6:	f000 bf7f 	b.w	127d8 <__retarget_lock_acquire_recursive>
   118da:	bf00      	nop
   118dc:	200002dc 	.word	0x200002dc

000118e0 <__sinit_lock_release>:
   118e0:	4801      	ldr	r0, [pc, #4]	; (118e8 <__sinit_lock_release+0x8>)
   118e2:	f000 bf81 	b.w	127e8 <__retarget_lock_release_recursive>
   118e6:	bf00      	nop
   118e8:	200002dc 	.word	0x200002dc

000118ec <__sinit>:
   118ec:	b510      	push	{r4, lr}
   118ee:	4604      	mov	r4, r0
   118f0:	f7ff fff0 	bl	118d4 <__sinit_lock_acquire>
   118f4:	69a3      	ldr	r3, [r4, #24]
   118f6:	b11b      	cbz	r3, 11900 <__sinit+0x14>
   118f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   118fc:	f7ff bff0 	b.w	118e0 <__sinit_lock_release>
   11900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   11904:	6523      	str	r3, [r4, #80]	; 0x50
   11906:	4620      	mov	r0, r4
   11908:	4b12      	ldr	r3, [pc, #72]	; (11954 <__sinit+0x68>)
   1190a:	4a13      	ldr	r2, [pc, #76]	; (11958 <__sinit+0x6c>)
   1190c:	681b      	ldr	r3, [r3, #0]
   1190e:	62a2      	str	r2, [r4, #40]	; 0x28
   11910:	42a3      	cmp	r3, r4
   11912:	bf04      	itt	eq
   11914:	2301      	moveq	r3, #1
   11916:	61a3      	streq	r3, [r4, #24]
   11918:	f000 f820 	bl	1195c <__sfp>
   1191c:	6060      	str	r0, [r4, #4]
   1191e:	4620      	mov	r0, r4
   11920:	f000 f81c 	bl	1195c <__sfp>
   11924:	60a0      	str	r0, [r4, #8]
   11926:	4620      	mov	r0, r4
   11928:	f000 f818 	bl	1195c <__sfp>
   1192c:	2200      	movs	r2, #0
   1192e:	2104      	movs	r1, #4
   11930:	60e0      	str	r0, [r4, #12]
   11932:	6860      	ldr	r0, [r4, #4]
   11934:	f7ff ff98 	bl	11868 <std>
   11938:	2201      	movs	r2, #1
   1193a:	2109      	movs	r1, #9
   1193c:	68a0      	ldr	r0, [r4, #8]
   1193e:	f7ff ff93 	bl	11868 <std>
   11942:	2202      	movs	r2, #2
   11944:	2112      	movs	r1, #18
   11946:	68e0      	ldr	r0, [r4, #12]
   11948:	f7ff ff8e 	bl	11868 <std>
   1194c:	2301      	movs	r3, #1
   1194e:	61a3      	str	r3, [r4, #24]
   11950:	e7d2      	b.n	118f8 <__sinit+0xc>
   11952:	bf00      	nop
   11954:	0006bb7c 	.word	0x0006bb7c
   11958:	000118b1 	.word	0x000118b1

0001195c <__sfp>:
   1195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1195e:	4607      	mov	r7, r0
   11960:	f7ff ffac 	bl	118bc <__sfp_lock_acquire>
   11964:	4b1e      	ldr	r3, [pc, #120]	; (119e0 <__sfp+0x84>)
   11966:	681e      	ldr	r6, [r3, #0]
   11968:	69b3      	ldr	r3, [r6, #24]
   1196a:	b913      	cbnz	r3, 11972 <__sfp+0x16>
   1196c:	4630      	mov	r0, r6
   1196e:	f7ff ffbd 	bl	118ec <__sinit>
   11972:	3648      	adds	r6, #72	; 0x48
   11974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   11978:	3b01      	subs	r3, #1
   1197a:	d503      	bpl.n	11984 <__sfp+0x28>
   1197c:	6833      	ldr	r3, [r6, #0]
   1197e:	b30b      	cbz	r3, 119c4 <__sfp+0x68>
   11980:	6836      	ldr	r6, [r6, #0]
   11982:	e7f7      	b.n	11974 <__sfp+0x18>
   11984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   11988:	b9d5      	cbnz	r5, 119c0 <__sfp+0x64>
   1198a:	4b16      	ldr	r3, [pc, #88]	; (119e4 <__sfp+0x88>)
   1198c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11990:	6665      	str	r5, [r4, #100]	; 0x64
   11992:	60e3      	str	r3, [r4, #12]
   11994:	f000 ff17 	bl	127c6 <__retarget_lock_init_recursive>
   11998:	f7ff ff96 	bl	118c8 <__sfp_lock_release>
   1199c:	2208      	movs	r2, #8
   1199e:	4629      	mov	r1, r5
   119a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   119a4:	6025      	str	r5, [r4, #0]
   119a6:	61a5      	str	r5, [r4, #24]
   119a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   119ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
   119b0:	f004 fb7d 	bl	160ae <memset>
   119b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   119b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   119bc:	4620      	mov	r0, r4
   119be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119c0:	3468      	adds	r4, #104	; 0x68
   119c2:	e7d9      	b.n	11978 <__sfp+0x1c>
   119c4:	2104      	movs	r1, #4
   119c6:	4638      	mov	r0, r7
   119c8:	f004 fdc1 	bl	1654e <__sfmoreglue>
   119cc:	4604      	mov	r4, r0
   119ce:	6030      	str	r0, [r6, #0]
   119d0:	2800      	cmp	r0, #0
   119d2:	d1d5      	bne.n	11980 <__sfp+0x24>
   119d4:	f7ff ff78 	bl	118c8 <__sfp_lock_release>
   119d8:	230c      	movs	r3, #12
   119da:	603b      	str	r3, [r7, #0]
   119dc:	e7ee      	b.n	119bc <__sfp+0x60>
   119de:	bf00      	nop
   119e0:	0006bb7c 	.word	0x0006bb7c
   119e4:	ffff0001 	.word	0xffff0001

000119e8 <_localeconv_r>:
   119e8:	4800      	ldr	r0, [pc, #0]	; (119ec <_localeconv_r+0x4>)
   119ea:	4770      	bx	lr
   119ec:	20000220 	.word	0x20000220

000119f0 <__smakebuf_r>:
   119f0:	898b      	ldrh	r3, [r1, #12]
   119f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   119f4:	079d      	lsls	r5, r3, #30
   119f6:	4606      	mov	r6, r0
   119f8:	460c      	mov	r4, r1
   119fa:	d507      	bpl.n	11a0c <__smakebuf_r+0x1c>
   119fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   11a00:	6023      	str	r3, [r4, #0]
   11a02:	6123      	str	r3, [r4, #16]
   11a04:	2301      	movs	r3, #1
   11a06:	6163      	str	r3, [r4, #20]
   11a08:	b002      	add	sp, #8
   11a0a:	bd70      	pop	{r4, r5, r6, pc}
   11a0c:	ab01      	add	r3, sp, #4
   11a0e:	466a      	mov	r2, sp
   11a10:	f004 fdd2 	bl	165b8 <__swhatbuf_r>
   11a14:	9900      	ldr	r1, [sp, #0]
   11a16:	4605      	mov	r5, r0
   11a18:	4630      	mov	r0, r6
   11a1a:	f7fe ffdf 	bl	109dc <_malloc_r>
   11a1e:	b948      	cbnz	r0, 11a34 <__smakebuf_r+0x44>
   11a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11a24:	059a      	lsls	r2, r3, #22
   11a26:	d4ef      	bmi.n	11a08 <__smakebuf_r+0x18>
   11a28:	f023 0303 	bic.w	r3, r3, #3
   11a2c:	f043 0302 	orr.w	r3, r3, #2
   11a30:	81a3      	strh	r3, [r4, #12]
   11a32:	e7e3      	b.n	119fc <__smakebuf_r+0xc>
   11a34:	4b0d      	ldr	r3, [pc, #52]	; (11a6c <__smakebuf_r+0x7c>)
   11a36:	62b3      	str	r3, [r6, #40]	; 0x28
   11a38:	89a3      	ldrh	r3, [r4, #12]
   11a3a:	6020      	str	r0, [r4, #0]
   11a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11a40:	6120      	str	r0, [r4, #16]
   11a42:	81a3      	strh	r3, [r4, #12]
   11a44:	9b00      	ldr	r3, [sp, #0]
   11a46:	6163      	str	r3, [r4, #20]
   11a48:	9b01      	ldr	r3, [sp, #4]
   11a4a:	b15b      	cbz	r3, 11a64 <__smakebuf_r+0x74>
   11a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11a50:	4630      	mov	r0, r6
   11a52:	f000 f89b 	bl	11b8c <_isatty_r>
   11a56:	b128      	cbz	r0, 11a64 <__smakebuf_r+0x74>
   11a58:	89a3      	ldrh	r3, [r4, #12]
   11a5a:	f023 0303 	bic.w	r3, r3, #3
   11a5e:	f043 0301 	orr.w	r3, r3, #1
   11a62:	81a3      	strh	r3, [r4, #12]
   11a64:	89a0      	ldrh	r0, [r4, #12]
   11a66:	4305      	orrs	r5, r0
   11a68:	81a5      	strh	r5, [r4, #12]
   11a6a:	e7cd      	b.n	11a08 <__smakebuf_r+0x18>
   11a6c:	000118b1 	.word	0x000118b1

00011a70 <__malloc_lock>:
   11a70:	4801      	ldr	r0, [pc, #4]	; (11a78 <__malloc_lock+0x8>)
   11a72:	f000 beb1 	b.w	127d8 <__retarget_lock_acquire_recursive>
   11a76:	bf00      	nop
   11a78:	200002b4 	.word	0x200002b4

00011a7c <__malloc_unlock>:
   11a7c:	4801      	ldr	r0, [pc, #4]	; (11a84 <__malloc_unlock+0x8>)
   11a7e:	f000 beb3 	b.w	127e8 <__retarget_lock_release_recursive>
   11a82:	bf00      	nop
   11a84:	200002b4 	.word	0x200002b4

00011a88 <__pow5mult>:
   11a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11a8c:	4615      	mov	r5, r2
   11a8e:	f012 0203 	ands.w	r2, r2, #3
   11a92:	4606      	mov	r6, r0
   11a94:	460f      	mov	r7, r1
   11a96:	d007      	beq.n	11aa8 <__pow5mult+0x20>
   11a98:	3a01      	subs	r2, #1
   11a9a:	4c21      	ldr	r4, [pc, #132]	; (11b20 <__pow5mult+0x98>)
   11a9c:	2300      	movs	r3, #0
   11a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   11aa2:	f004 fdf8 	bl	16696 <__multadd>
   11aa6:	4607      	mov	r7, r0
   11aa8:	10ad      	asrs	r5, r5, #2
   11aaa:	d035      	beq.n	11b18 <__pow5mult+0x90>
   11aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   11aae:	b93c      	cbnz	r4, 11ac0 <__pow5mult+0x38>
   11ab0:	2010      	movs	r0, #16
   11ab2:	f7fe ff35 	bl	10920 <malloc>
   11ab6:	6270      	str	r0, [r6, #36]	; 0x24
   11ab8:	6004      	str	r4, [r0, #0]
   11aba:	60c4      	str	r4, [r0, #12]
   11abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   11ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   11ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   11ac8:	b94c      	cbnz	r4, 11ade <__pow5mult+0x56>
   11aca:	f240 2171 	movw	r1, #625	; 0x271
   11ace:	4630      	mov	r0, r6
   11ad0:	f004 fe6e 	bl	167b0 <__i2b>
   11ad4:	2300      	movs	r3, #0
   11ad6:	4604      	mov	r4, r0
   11ad8:	f8c8 0008 	str.w	r0, [r8, #8]
   11adc:	6003      	str	r3, [r0, #0]
   11ade:	f04f 0900 	mov.w	r9, #0
   11ae2:	07eb      	lsls	r3, r5, #31
   11ae4:	d50a      	bpl.n	11afc <__pow5mult+0x74>
   11ae6:	4639      	mov	r1, r7
   11ae8:	4622      	mov	r2, r4
   11aea:	4630      	mov	r0, r6
   11aec:	f004 fe69 	bl	167c2 <__multiply>
   11af0:	4680      	mov	r8, r0
   11af2:	4639      	mov	r1, r7
   11af4:	4630      	mov	r0, r6
   11af6:	4647      	mov	r7, r8
   11af8:	f004 fdb6 	bl	16668 <_Bfree>
   11afc:	106d      	asrs	r5, r5, #1
   11afe:	d00b      	beq.n	11b18 <__pow5mult+0x90>
   11b00:	6820      	ldr	r0, [r4, #0]
   11b02:	b938      	cbnz	r0, 11b14 <__pow5mult+0x8c>
   11b04:	4622      	mov	r2, r4
   11b06:	4621      	mov	r1, r4
   11b08:	4630      	mov	r0, r6
   11b0a:	f004 fe5a 	bl	167c2 <__multiply>
   11b0e:	6020      	str	r0, [r4, #0]
   11b10:	f8c0 9000 	str.w	r9, [r0]
   11b14:	4604      	mov	r4, r0
   11b16:	e7e4      	b.n	11ae2 <__pow5mult+0x5a>
   11b18:	4638      	mov	r0, r7
   11b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11b1e:	bf00      	nop
   11b20:	0006bbe0 	.word	0x0006bbe0

00011b24 <_write_r>:
   11b24:	b538      	push	{r3, r4, r5, lr}
   11b26:	4604      	mov	r4, r0
   11b28:	4d06      	ldr	r5, [pc, #24]	; (11b44 <_write_r+0x20>)
   11b2a:	4608      	mov	r0, r1
   11b2c:	4611      	mov	r1, r2
   11b2e:	2200      	movs	r2, #0
   11b30:	602a      	str	r2, [r5, #0]
   11b32:	461a      	mov	r2, r3
   11b34:	f000 fe2e 	bl	12794 <_write>
   11b38:	1c43      	adds	r3, r0, #1
   11b3a:	d102      	bne.n	11b42 <_write_r+0x1e>
   11b3c:	682b      	ldr	r3, [r5, #0]
   11b3e:	b103      	cbz	r3, 11b42 <_write_r+0x1e>
   11b40:	6023      	str	r3, [r4, #0]
   11b42:	bd38      	pop	{r3, r4, r5, pc}
   11b44:	20020c44 	.word	0x20020c44

00011b48 <_close_r>:
   11b48:	b538      	push	{r3, r4, r5, lr}
   11b4a:	2300      	movs	r3, #0
   11b4c:	4d05      	ldr	r5, [pc, #20]	; (11b64 <_close_r+0x1c>)
   11b4e:	4604      	mov	r4, r0
   11b50:	4608      	mov	r0, r1
   11b52:	602b      	str	r3, [r5, #0]
   11b54:	f000 fe24 	bl	127a0 <_close>
   11b58:	1c43      	adds	r3, r0, #1
   11b5a:	d102      	bne.n	11b62 <_close_r+0x1a>
   11b5c:	682b      	ldr	r3, [r5, #0]
   11b5e:	b103      	cbz	r3, 11b62 <_close_r+0x1a>
   11b60:	6023      	str	r3, [r4, #0]
   11b62:	bd38      	pop	{r3, r4, r5, pc}
   11b64:	20020c44 	.word	0x20020c44

00011b68 <_fstat_r>:
   11b68:	b538      	push	{r3, r4, r5, lr}
   11b6a:	2300      	movs	r3, #0
   11b6c:	4d06      	ldr	r5, [pc, #24]	; (11b88 <_fstat_r+0x20>)
   11b6e:	4604      	mov	r4, r0
   11b70:	4608      	mov	r0, r1
   11b72:	4611      	mov	r1, r2
   11b74:	602b      	str	r3, [r5, #0]
   11b76:	f000 fe21 	bl	127bc <_fstat>
   11b7a:	1c43      	adds	r3, r0, #1
   11b7c:	d102      	bne.n	11b84 <_fstat_r+0x1c>
   11b7e:	682b      	ldr	r3, [r5, #0]
   11b80:	b103      	cbz	r3, 11b84 <_fstat_r+0x1c>
   11b82:	6023      	str	r3, [r4, #0]
   11b84:	bd38      	pop	{r3, r4, r5, pc}
   11b86:	bf00      	nop
   11b88:	20020c44 	.word	0x20020c44

00011b8c <_isatty_r>:
   11b8c:	b538      	push	{r3, r4, r5, lr}
   11b8e:	2300      	movs	r3, #0
   11b90:	4d05      	ldr	r5, [pc, #20]	; (11ba8 <_isatty_r+0x1c>)
   11b92:	4604      	mov	r4, r0
   11b94:	4608      	mov	r0, r1
   11b96:	602b      	str	r3, [r5, #0]
   11b98:	f000 fe07 	bl	127aa <_isatty>
   11b9c:	1c43      	adds	r3, r0, #1
   11b9e:	d102      	bne.n	11ba6 <_isatty_r+0x1a>
   11ba0:	682b      	ldr	r3, [r5, #0]
   11ba2:	b103      	cbz	r3, 11ba6 <_isatty_r+0x1a>
   11ba4:	6023      	str	r3, [r4, #0]
   11ba6:	bd38      	pop	{r3, r4, r5, pc}
   11ba8:	20020c44 	.word	0x20020c44

00011bac <_lseek_r>:
   11bac:	b538      	push	{r3, r4, r5, lr}
   11bae:	4604      	mov	r4, r0
   11bb0:	4d06      	ldr	r5, [pc, #24]	; (11bcc <_lseek_r+0x20>)
   11bb2:	4608      	mov	r0, r1
   11bb4:	4611      	mov	r1, r2
   11bb6:	2200      	movs	r2, #0
   11bb8:	602a      	str	r2, [r5, #0]
   11bba:	461a      	mov	r2, r3
   11bbc:	f000 fdf3 	bl	127a6 <_lseek>
   11bc0:	1c43      	adds	r3, r0, #1
   11bc2:	d102      	bne.n	11bca <_lseek_r+0x1e>
   11bc4:	682b      	ldr	r3, [r5, #0]
   11bc6:	b103      	cbz	r3, 11bca <_lseek_r+0x1e>
   11bc8:	6023      	str	r3, [r4, #0]
   11bca:	bd38      	pop	{r3, r4, r5, pc}
   11bcc:	20020c44 	.word	0x20020c44

00011bd0 <_read_r>:
   11bd0:	b538      	push	{r3, r4, r5, lr}
   11bd2:	4604      	mov	r4, r0
   11bd4:	4d06      	ldr	r5, [pc, #24]	; (11bf0 <_read_r+0x20>)
   11bd6:	4608      	mov	r0, r1
   11bd8:	4611      	mov	r1, r2
   11bda:	2200      	movs	r2, #0
   11bdc:	602a      	str	r2, [r5, #0]
   11bde:	461a      	mov	r2, r3
   11be0:	f000 fdd2 	bl	12788 <_read>
   11be4:	1c43      	adds	r3, r0, #1
   11be6:	d102      	bne.n	11bee <_read_r+0x1e>
   11be8:	682b      	ldr	r3, [r5, #0]
   11bea:	b103      	cbz	r3, 11bee <_read_r+0x1e>
   11bec:	6023      	str	r3, [r4, #0]
   11bee:	bd38      	pop	{r3, r4, r5, pc}
   11bf0:	20020c44 	.word	0x20020c44

00011bf4 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   11bf4:	4601      	mov	r1, r0
  long ret = 0;
   11bf6:	2000      	movs	r0, #0
   11bf8:	e007      	b.n	11c0a <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   11bfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   11bfe:	b2d2      	uxtb	r2, r2
   11c00:	2a05      	cmp	r2, #5
   11c02:	d80e      	bhi.n	11c22 <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   11c04:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   11c06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   11c0a:	780b      	ldrb	r3, [r1, #0]
   11c0c:	b193      	cbz	r3, 11c34 <_Z9ee_hexdecPc+0x40>
   11c0e:	2800      	cmp	r0, #0
   11c10:	db10      	blt.n	11c34 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   11c12:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   11c14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11c18:	b2d2      	uxtb	r2, r2
   11c1a:	2a09      	cmp	r2, #9
   11c1c:	d8ed      	bhi.n	11bfa <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   11c1e:	3b30      	subs	r3, #48	; 0x30
   11c20:	e7f1      	b.n	11c06 <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   11c22:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   11c26:	b2d2      	uxtb	r2, r2
   11c28:	2a05      	cmp	r2, #5
   11c2a:	d801      	bhi.n	11c30 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   11c2c:	3b37      	subs	r3, #55	; 0x37
   11c2e:	e7ea      	b.n	11c06 <_Z9ee_hexdecPc+0x12>
      return -1;
   11c30:	f04f 30ff 	mov.w	r0, #4294967295
}
   11c34:	4770      	bx	lr

00011c36 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   11c36:	2200      	movs	r2, #0
   11c38:	6002      	str	r2, [r0, #0]
   11c3a:	6042      	str	r2, [r0, #4]
   11c3c:	6082      	str	r2, [r0, #8]
  }
   11c3e:	4770      	bx	lr

00011c40 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   11c40:	2001      	movs	r0, #1
   11c42:	4770      	bx	lr

00011c44 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   11c44:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   11c46:	6803      	ldr	r3, [r0, #0]
   11c48:	699b      	ldr	r3, [r3, #24]
   11c4a:	4798      	blx	r3
  }
   11c4c:	bd08      	pop	{r3, pc}

00011c4e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   11c4e:	b508      	push	{r3, lr}
    return FindOp(op);
   11c50:	6803      	ldr	r3, [r0, #0]
   11c52:	69db      	ldr	r3, [r3, #28]
   11c54:	4798      	blx	r3
  }
   11c56:	bd08      	pop	{r3, pc}

00011c58 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11c58:	2920      	cmp	r1, #32
   11c5a:	d00e      	beq.n	11c7a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   11c5c:	b410      	push	{r4}
   11c5e:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11c60:	2300      	movs	r3, #0
   11c62:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
   11c66:	429a      	cmp	r2, r3
   11c68:	d909      	bls.n	11c7e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   11c6a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   11c6e:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   11c70:	6992      	ldr	r2, [r2, #24]
   11c72:	428a      	cmp	r2, r1
   11c74:	d004      	beq.n	11c80 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11c76:	3301      	adds	r3, #1
   11c78:	e7f3      	b.n	11c62 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11c7a:	2000      	movs	r0, #0
  }
   11c7c:	4770      	bx	lr
    return nullptr;
   11c7e:	2000      	movs	r0, #0
  }
   11c80:	bc10      	pop	{r4}
   11c82:	4770      	bx	lr

00011c84 <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   11c84:	4770      	bx	lr

00011c86 <_ZN6tflite16MicroModelRunnerIaaLi6EED1Ev>:
class MicroModelRunner {
   11c86:	b510      	push	{r4, lr}
   11c88:	4604      	mov	r4, r0
   11c8a:	300c      	adds	r0, #12
   11c8c:	f001 fc66 	bl	1355c <_ZN6tflite16MicroInterpreterD1Ev>
   11c90:	4620      	mov	r0, r4
   11c92:	bd10      	pop	{r4, pc}

00011c94 <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
   11c94:	b510      	push	{r4, lr}
   11c96:	4604      	mov	r4, r0
   11c98:	f004 f9cc 	bl	16034 <_ZdlPv>
   11c9c:	4620      	mov	r0, r4
   11c9e:	bd10      	pop	{r4, pc}

00011ca0 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   11ca0:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11ca2:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
   11ca6:	2c06      	cmp	r4, #6
   11ca8:	d801      	bhi.n	11cae <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11caa:	2300      	movs	r3, #0
   11cac:	e002      	b.n	11cb4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11cae:	f004 f9d8 	bl	16062 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11cb2:	3301      	adds	r3, #1
   11cb4:	429c      	cmp	r4, r3
   11cb6:	d908      	bls.n	11cca <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   11cb8:	18c2      	adds	r2, r0, r3
   11cba:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
   11cbe:	428a      	cmp	r2, r1
   11cc0:	d1f7      	bne.n	11cb2 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   11cc2:	3334      	adds	r3, #52	; 0x34
   11cc4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   11cc8:	e000      	b.n	11ccc <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   11cca:	2000      	movs	r0, #0
  }
   11ccc:	bd10      	pop	{r4, pc}

00011cce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   11cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cd0:	4605      	mov	r5, r0
   11cd2:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11cd4:	2400      	movs	r4, #0
   11cd6:	e000      	b.n	11cda <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xc>
   11cd8:	3401      	adds	r4, #1
   11cda:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   11cde:	42a3      	cmp	r3, r4
   11ce0:	d90e      	bls.n	11d00 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   11ce2:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11ce6:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11ce8:	699b      	ldr	r3, [r3, #24]
   11cea:	2b20      	cmp	r3, #32
   11cec:	d1f4      	bne.n	11cd8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   11cee:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11cf2:	4639      	mov	r1, r7
   11cf4:	69d8      	ldr	r0, [r3, #28]
   11cf6:	f7ef fbe3 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11cfa:	2800      	cmp	r0, #0
   11cfc:	d1ec      	bne.n	11cd8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
   11cfe:	e000      	b.n	11d02 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x34>
    return nullptr;
   11d00:	2600      	movs	r6, #0
  }
   11d02:	4630      	mov	r0, r6
   11d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011d06 <_Z6th_prev>:
void th_pre() {}
   11d06:	4770      	bx	lr

00011d08 <_Z7th_postv>:
void th_post() {}
   11d08:	4770      	bx	lr

00011d0a <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   11d0a:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   11d0c:	f7f0 fe36 	bl	297c <_Z33ee_serial_command_parser_callbackPc>
}
   11d10:	bd08      	pop	{r3, pc}

00011d12 <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   11d12:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   11d14:	f004 fb57 	bl	163c6 <strnlen>
}
   11d18:	bd08      	pop	{r3, pc}

00011d1a <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   11d1a:	b508      	push	{r3, lr}
   11d1c:	f7ff fc0e 	bl	1153c <viprintf>
   11d20:	bd08      	pop	{r3, pc}

00011d22 <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   11d22:	b40f      	push	{r0, r1, r2, r3}
   11d24:	b500      	push	{lr}
   11d26:	b083      	sub	sp, #12
   11d28:	a904      	add	r1, sp, #16
   11d2a:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   11d2e:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   11d30:	f7ff fff3 	bl	11d1a <_Z10th_vprintfPKcSt9__va_list>
}
   11d34:	b003      	add	sp, #12
   11d36:	f85d eb04 	ldr.w	lr, [sp], #4
   11d3a:	b004      	add	sp, #16
   11d3c:	4770      	bx	lr

00011d3e <_Z24th_serialport_initializev>:
}
   11d3e:	4770      	bx	lr

00011d40 <main>:
SHELL_CMD_ARG_REGISTER(start, 0, "test", cmd_start, 1, 10);

#endif /* CONFIG_SHELL */


int main(int argc, char *argv[]) {
   11d40:	b508      	push	{r3, lr}
console_init();
   11d42:	f7f2 f82b 	bl	3d9c <console_init>

ee_benchmark_initialize();
   11d46:	f7f0 fc5b 	bl	2600 <_Z23ee_benchmark_initializev>
    c = (int) cmd_buf[i];
    ee_serial_callback(c);
  }
  }
#else
  console_init();
   11d4a:	f7f2 f827 	bl	3d9c <console_init>

  while (1) {
    int c;

    c = console_getchar();
   11d4e:	f7f2 f813 	bl	3d78 <console_getchar>
    if (c < 0) {
   11d52:	2800      	cmp	r0, #0
   11d54:	dbfb      	blt.n	11d4e <main+0xe>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   11d56:	b2c0      	uxtb	r0, r0
   11d58:	f7f0 fc32 	bl	25c0 <_Z18ee_serial_callbackc>
   11d5c:	e7f7      	b.n	11d4e <main+0xe>

00011d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   11d5e:	4770      	bx	lr

00011d60 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   11d60:	b510      	push	{r4, lr}
   11d62:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   11d64:	6800      	ldr	r0, [r0, #0]
   11d66:	f7ff fffa 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   11d6a:	4420      	add	r0, r4
   11d6c:	bd10      	pop	{r4, pc}

00011d6e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   11d6e:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   11d70:	f7ff fff6 	bl	11d60 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   11d74:	bd08      	pop	{r3, pc}

00011d76 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11d76:	4602      	mov	r2, r0
   11d78:	b158      	cbz	r0, 11d92 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11d7a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11d7c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11d80:	2b01      	cmp	r3, #1
   11d82:	d003      	beq.n	11d8c <sys_notify_validate+0x16>
   11d84:	2b03      	cmp	r3, #3
   11d86:	d107      	bne.n	11d98 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11d88:	6803      	ldr	r3, [r0, #0]
   11d8a:	b143      	cbz	r3, 11d9e <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11d8c:	2000      	movs	r0, #0
   11d8e:	6090      	str	r0, [r2, #8]
   11d90:	4770      	bx	lr
		return -EINVAL;
   11d92:	f06f 0015 	mvn.w	r0, #21
   11d96:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   11d98:	f06f 0015 	mvn.w	r0, #21
   11d9c:	4770      	bx	lr
			rv = -EINVAL;
   11d9e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11da2:	4770      	bx	lr

00011da4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11da4:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11da6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11da8:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11dac:	6081      	str	r1, [r0, #8]
	switch (method) {
   11dae:	2a03      	cmp	r2, #3
   11db0:	d103      	bne.n	11dba <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11db2:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11db4:	2200      	movs	r2, #0
   11db6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11db8:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   11dba:	2000      	movs	r0, #0
   11dbc:	e7fa      	b.n	11db4 <sys_notify_finalize+0x10>

00011dbe <arch_printk_char_out>:
}
   11dbe:	2000      	movs	r0, #0
   11dc0:	4770      	bx	lr

00011dc2 <str_out>:
{
   11dc2:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11dc4:	680c      	ldr	r4, [r1, #0]
   11dc6:	b154      	cbz	r4, 11dde <str_out+0x1c>
   11dc8:	688a      	ldr	r2, [r1, #8]
   11dca:	684b      	ldr	r3, [r1, #4]
   11dcc:	429a      	cmp	r2, r3
   11dce:	da06      	bge.n	11dde <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   11dd0:	3b01      	subs	r3, #1
   11dd2:	429a      	cmp	r2, r3
   11dd4:	d008      	beq.n	11de8 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   11dd6:	1c53      	adds	r3, r2, #1
   11dd8:	608b      	str	r3, [r1, #8]
   11dda:	54a0      	strb	r0, [r4, r2]
   11ddc:	e002      	b.n	11de4 <str_out+0x22>
		ctx->count++;
   11dde:	688b      	ldr	r3, [r1, #8]
   11de0:	3301      	adds	r3, #1
   11de2:	608b      	str	r3, [r1, #8]
}
   11de4:	bc10      	pop	{r4}
   11de6:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   11de8:	1c53      	adds	r3, r2, #1
   11dea:	608b      	str	r3, [r1, #8]
   11dec:	2300      	movs	r3, #0
   11dee:	54a3      	strb	r3, [r4, r2]
   11df0:	e7f8      	b.n	11de4 <str_out+0x22>

00011df2 <printk>:
{
   11df2:	b40f      	push	{r0, r1, r2, r3}
   11df4:	b500      	push	{lr}
   11df6:	b083      	sub	sp, #12
   11df8:	a904      	add	r1, sp, #16
   11dfa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11dfe:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11e00:	f7f1 f8da 	bl	2fb8 <vprintk>
}
   11e04:	b003      	add	sp, #12
   11e06:	f85d eb04 	ldr.w	lr, [sp], #4
   11e0a:	b004      	add	sp, #16
   11e0c:	4770      	bx	lr

00011e0e <snprintk>:
{
   11e0e:	b40c      	push	{r2, r3}
   11e10:	b500      	push	{lr}
   11e12:	b083      	sub	sp, #12
   11e14:	ab04      	add	r3, sp, #16
   11e16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11e1a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11e1c:	f7f1 f8dc 	bl	2fd8 <vsnprintk>
}
   11e20:	b003      	add	sp, #12
   11e22:	f85d eb04 	ldr.w	lr, [sp], #4
   11e26:	b002      	add	sp, #8
   11e28:	4770      	bx	lr

00011e2a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e2a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e2e:	8b81      	ldrh	r1, [r0, #28]
   11e30:	f021 0107 	bic.w	r1, r1, #7
   11e34:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e36:	8381      	strh	r1, [r0, #28]
}
   11e38:	4770      	bx	lr

00011e3a <notify_monitors>:
{
   11e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e3e:	4606      	mov	r6, r0
   11e40:	460f      	mov	r7, r1
   11e42:	4690      	mov	r8, r2
	return list->head;
   11e44:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11e46:	b119      	cbz	r1, 11e50 <notify_monitors+0x16>
   11e48:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   11e4a:	b131      	cbz	r1, 11e5a <notify_monitors+0x20>
	return node->next;
   11e4c:	680c      	ldr	r4, [r1, #0]
   11e4e:	e004      	b.n	11e5a <notify_monitors+0x20>
   11e50:	460c      	mov	r4, r1
   11e52:	e002      	b.n	11e5a <notify_monitors+0x20>
   11e54:	4623      	mov	r3, r4
   11e56:	4621      	mov	r1, r4
   11e58:	461c      	mov	r4, r3
   11e5a:	b159      	cbz	r1, 11e74 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   11e5c:	684d      	ldr	r5, [r1, #4]
   11e5e:	4643      	mov	r3, r8
   11e60:	463a      	mov	r2, r7
   11e62:	4630      	mov	r0, r6
   11e64:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11e66:	2c00      	cmp	r4, #0
   11e68:	d0f4      	beq.n	11e54 <notify_monitors+0x1a>
   11e6a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11e6c:	2c00      	cmp	r4, #0
   11e6e:	d0f2      	beq.n	11e56 <notify_monitors+0x1c>
	return node->next;
   11e70:	6823      	ldr	r3, [r4, #0]
   11e72:	e7f0      	b.n	11e56 <notify_monitors+0x1c>
}
   11e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e78 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e78:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   11e7a:	f013 0307 	ands.w	r3, r3, #7
   11e7e:	d103      	bne.n	11e88 <process_recheck+0x10>
	return list->head;
   11e80:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   11e82:	b10a      	cbz	r2, 11e88 <process_recheck+0x10>
		evt = EVT_START;
   11e84:	2003      	movs	r0, #3
   11e86:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11e88:	2b02      	cmp	r3, #2
   11e8a:	d003      	beq.n	11e94 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   11e8c:	2b01      	cmp	r3, #1
   11e8e:	d006      	beq.n	11e9e <process_recheck+0x26>
	int evt = EVT_NOP;
   11e90:	2000      	movs	r0, #0
   11e92:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   11e94:	8bc2      	ldrh	r2, [r0, #30]
   11e96:	2a00      	cmp	r2, #0
   11e98:	d1f8      	bne.n	11e8c <process_recheck+0x14>
		evt = EVT_STOP;
   11e9a:	2004      	movs	r0, #4
   11e9c:	4770      	bx	lr
   11e9e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   11ea0:	b10b      	cbz	r3, 11ea6 <process_recheck+0x2e>
		evt = EVT_RESET;
   11ea2:	2005      	movs	r0, #5
}
   11ea4:	4770      	bx	lr
	int evt = EVT_NOP;
   11ea6:	2000      	movs	r0, #0
   11ea8:	4770      	bx	lr

00011eaa <process_complete>:
{
   11eaa:	b538      	push	{r3, r4, r5, lr}
   11eac:	4604      	mov	r4, r0
   11eae:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11eb0:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   11eb2:	2a00      	cmp	r2, #0
   11eb4:	db07      	blt.n	11ec6 <process_complete+0x1c>
   11eb6:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11eba:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11ebc:	2a01      	cmp	r2, #1
   11ebe:	d90e      	bls.n	11ede <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11ec0:	2b04      	cmp	r3, #4
   11ec2:	d032      	beq.n	11f2a <process_complete+0x80>
}
   11ec4:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   11ec6:	e9d0 0100 	ldrd	r0, r1, [r0]
   11eca:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   11ece:	2300      	movs	r3, #0
   11ed0:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   11ed2:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   11ed4:	2101      	movs	r1, #1
   11ed6:	4620      	mov	r0, r4
   11ed8:	f7ff ffa7 	bl	11e2a <set_state>
   11edc:	e7f2      	b.n	11ec4 <process_complete+0x1a>
		*clients = mgr->clients;
   11ede:	e9d0 0100 	ldrd	r0, r1, [r0]
   11ee2:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   11ee6:	2200      	movs	r2, #0
   11ee8:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   11eea:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   11eec:	2b06      	cmp	r3, #6
   11eee:	d117      	bne.n	11f20 <process_complete+0x76>
	return list->head;
   11ef0:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11ef2:	b13b      	cbz	r3, 11f04 <process_complete+0x5a>
				mgr->refs += 1U;
   11ef4:	8be2      	ldrh	r2, [r4, #30]
   11ef6:	3201      	adds	r2, #1
   11ef8:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   11efa:	2b00      	cmp	r3, #0
   11efc:	d0f9      	beq.n	11ef2 <process_complete+0x48>
	return node->next;
   11efe:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11f00:	2b00      	cmp	r3, #0
   11f02:	d1f6      	bne.n	11ef2 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   11f04:	2102      	movs	r1, #2
   11f06:	4620      	mov	r0, r4
   11f08:	f7ff ff8f 	bl	11e2a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11f0c:	4620      	mov	r0, r4
   11f0e:	f7ff ffb3 	bl	11e78 <process_recheck>
   11f12:	2800      	cmp	r0, #0
   11f14:	d0d6      	beq.n	11ec4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11f16:	8ba3      	ldrh	r3, [r4, #28]
   11f18:	f043 0320 	orr.w	r3, r3, #32
   11f1c:	83a3      	strh	r3, [r4, #28]
   11f1e:	e7d1      	b.n	11ec4 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   11f20:	2100      	movs	r1, #0
   11f22:	4620      	mov	r0, r4
   11f24:	f7ff ff81 	bl	11e2a <set_state>
   11f28:	e7f0      	b.n	11f0c <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   11f2a:	2100      	movs	r1, #0
   11f2c:	f7ff ff7d 	bl	11e2a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11f30:	4620      	mov	r0, r4
   11f32:	f7ff ffa1 	bl	11e78 <process_recheck>
   11f36:	2800      	cmp	r0, #0
   11f38:	d0c4      	beq.n	11ec4 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11f3a:	8ba3      	ldrh	r3, [r4, #28]
   11f3c:	f043 0320 	orr.w	r3, r3, #32
   11f40:	83a3      	strh	r3, [r4, #28]
}
   11f42:	e7bf      	b.n	11ec4 <process_complete+0x1a>

00011f44 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   11f44:	b158      	cbz	r0, 11f5e <validate_args+0x1a>
{
   11f46:	b510      	push	{r4, lr}
   11f48:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11f4a:	b159      	cbz	r1, 11f64 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   11f4c:	1d08      	adds	r0, r1, #4
   11f4e:	f7ff ff12 	bl	11d76 <sys_notify_validate>
	if ((rv == 0)
   11f52:	b918      	cbnz	r0, 11f5c <validate_args+0x18>
	    && ((cli->notify.flags
   11f54:	68a3      	ldr	r3, [r4, #8]
   11f56:	f033 0303 	bics.w	r3, r3, #3
   11f5a:	d106      	bne.n	11f6a <validate_args+0x26>
}
   11f5c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11f5e:	f06f 0015 	mvn.w	r0, #21
}
   11f62:	4770      	bx	lr
		return -EINVAL;
   11f64:	f06f 0015 	mvn.w	r0, #21
   11f68:	e7f8      	b.n	11f5c <validate_args+0x18>
		rv = -EINVAL;
   11f6a:	f06f 0015 	mvn.w	r0, #21
   11f6e:	e7f5      	b.n	11f5c <validate_args+0x18>

00011f70 <notify_one>:
{
   11f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f74:	4607      	mov	r7, r0
   11f76:	460c      	mov	r4, r1
   11f78:	4616      	mov	r6, r2
   11f7a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11f7c:	4619      	mov	r1, r3
   11f7e:	1d20      	adds	r0, r4, #4
   11f80:	f7ff ff10 	bl	11da4 <sys_notify_finalize>
	if (cb) {
   11f84:	b128      	cbz	r0, 11f92 <notify_one+0x22>
   11f86:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   11f88:	462b      	mov	r3, r5
   11f8a:	4632      	mov	r2, r6
   11f8c:	4621      	mov	r1, r4
   11f8e:	4638      	mov	r0, r7
   11f90:	47c0      	blx	r8
}
   11f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011f96 <notify_all>:
{
   11f96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f9a:	4681      	mov	r9, r0
   11f9c:	460c      	mov	r4, r1
   11f9e:	4690      	mov	r8, r2
   11fa0:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   11fa2:	e005      	b.n	11fb0 <notify_all+0x1a>
	list->tail = node;
   11fa4:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   11fa6:	463b      	mov	r3, r7
   11fa8:	4642      	mov	r2, r8
   11faa:	4648      	mov	r0, r9
   11fac:	f7ff ffe0 	bl	11f70 <notify_one>
	return list->head;
   11fb0:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   11fb2:	b129      	cbz	r1, 11fc0 <notify_all+0x2a>
	return node->next;
   11fb4:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   11fb6:	6025      	str	r5, [r4, #0]
	return list->tail;
   11fb8:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11fba:	428e      	cmp	r6, r1
   11fbc:	d1f3      	bne.n	11fa6 <notify_all+0x10>
   11fbe:	e7f1      	b.n	11fa4 <notify_all+0xe>
}
   11fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011fc4 <transition_complete>:
{
   11fc4:	b510      	push	{r4, lr}
	__asm__ volatile(
   11fc6:	f04f 0420 	mov.w	r4, #32
   11fca:	f3ef 8211 	mrs	r2, BASEPRI
   11fce:	f384 8812 	msr	BASEPRI_MAX, r4
   11fd2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11fd6:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11fd8:	2101      	movs	r1, #1
   11fda:	f7f1 f813 	bl	3004 <process_event>
}
   11fde:	bd10      	pop	{r4, pc}

00011fe0 <onoff_manager_init>:
	if ((mgr == NULL)
   11fe0:	b170      	cbz	r0, 12000 <onoff_manager_init+0x20>
{
   11fe2:	b538      	push	{r3, r4, r5, lr}
   11fe4:	460c      	mov	r4, r1
   11fe6:	4605      	mov	r5, r0
	    || (transitions == NULL)
   11fe8:	b169      	cbz	r1, 12006 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   11fea:	680b      	ldr	r3, [r1, #0]
   11fec:	b173      	cbz	r3, 1200c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   11fee:	684b      	ldr	r3, [r1, #4]
   11ff0:	b17b      	cbz	r3, 12012 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11ff2:	2220      	movs	r2, #32
   11ff4:	2100      	movs	r1, #0
   11ff6:	f004 f85a 	bl	160ae <memset>
   11ffa:	612c      	str	r4, [r5, #16]
	return 0;
   11ffc:	2000      	movs	r0, #0
}
   11ffe:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12000:	f06f 0015 	mvn.w	r0, #21
}
   12004:	4770      	bx	lr
		return -EINVAL;
   12006:	f06f 0015 	mvn.w	r0, #21
   1200a:	e7f8      	b.n	11ffe <onoff_manager_init+0x1e>
   1200c:	f06f 0015 	mvn.w	r0, #21
   12010:	e7f5      	b.n	11ffe <onoff_manager_init+0x1e>
   12012:	f06f 0015 	mvn.w	r0, #21
   12016:	e7f2      	b.n	11ffe <onoff_manager_init+0x1e>

00012018 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1201a:	4604      	mov	r4, r0
   1201c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1201e:	f7ff ff91 	bl	11f44 <validate_args>

	if (rv < 0) {
   12022:	1e06      	subs	r6, r0, #0
   12024:	db37      	blt.n	12096 <onoff_request+0x7e>
   12026:	f04f 0320 	mov.w	r3, #32
   1202a:	f3ef 8211 	mrs	r2, BASEPRI
   1202e:	f383 8812 	msr	BASEPRI_MAX, r3
   12032:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12036:	8ba5      	ldrh	r5, [r4, #28]
   12038:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1203c:	8be3      	ldrh	r3, [r4, #30]
   1203e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12042:	428b      	cmp	r3, r1
   12044:	d02f      	beq.n	120a6 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   12046:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   12048:	2d02      	cmp	r5, #2
   1204a:	d00c      	beq.n	12066 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1204c:	b18d      	cbz	r5, 12072 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1204e:	2d04      	cmp	r5, #4
   12050:	d00f      	beq.n	12072 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   12052:	2d06      	cmp	r5, #6
   12054:	d00d      	beq.n	12072 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   12056:	2d05      	cmp	r5, #5
   12058:	d01f      	beq.n	1209a <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1205a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1205e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   12060:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   12062:	4608      	mov	r0, r1
   12064:	e00a      	b.n	1207c <onoff_request+0x64>
		mgr->refs += 1U;
   12066:	3301      	adds	r3, #1
   12068:	83e3      	strh	r3, [r4, #30]
		notify = true;
   1206a:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1206c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1206e:	4618      	mov	r0, r3
   12070:	e004      	b.n	1207c <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   12072:	fab5 f385 	clz	r3, r5
   12076:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   12078:	2100      	movs	r1, #0
		add_client = true;
   1207a:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1207c:	b128      	cbz	r0, 1208a <onoff_request+0x72>
	parent->next = child;
   1207e:	2000      	movs	r0, #0
   12080:	6038      	str	r0, [r7, #0]
	return list->tail;
   12082:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   12084:	b1a8      	cbz	r0, 120b2 <onoff_request+0x9a>
	parent->next = child;
   12086:	6007      	str	r7, [r0, #0]
	list->tail = node;
   12088:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1208a:	b9ab      	cbnz	r3, 120b8 <onoff_request+0xa0>
	__asm__ volatile(
   1208c:	f382 8811 	msr	BASEPRI, r2
   12090:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   12094:	b9a9      	cbnz	r1, 120c2 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   12096:	4630      	mov	r0, r6
   12098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1209a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1209e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   120a0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   120a2:	4608      	mov	r0, r1
   120a4:	e7ea      	b.n	1207c <onoff_request+0x64>
		rv = -EAGAIN;
   120a6:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   120aa:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   120ac:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   120ae:	4608      	mov	r0, r1
   120b0:	e7e4      	b.n	1207c <onoff_request+0x64>
   120b2:	6067      	str	r7, [r4, #4]
	list->head = node;
   120b4:	6027      	str	r7, [r4, #0]
}
   120b6:	e7e8      	b.n	1208a <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   120b8:	2102      	movs	r1, #2
   120ba:	4620      	mov	r0, r4
   120bc:	f7f0 ffa2 	bl	3004 <process_event>
   120c0:	e7e9      	b.n	12096 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   120c2:	2300      	movs	r3, #0
   120c4:	462a      	mov	r2, r5
   120c6:	4639      	mov	r1, r7
   120c8:	4620      	mov	r0, r4
   120ca:	f7ff ff51 	bl	11f70 <notify_one>
   120ce:	e7e2      	b.n	12096 <onoff_request+0x7e>

000120d0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   120d0:	b508      	push	{r3, lr}
   120d2:	4604      	mov	r4, r0
   120d4:	4608      	mov	r0, r1
   120d6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   120d8:	461a      	mov	r2, r3
   120da:	47a0      	blx	r4
	return z_impl_z_current_get();
   120dc:	f7fd fe86 	bl	fdec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   120e0:	f7f2 fb0e 	bl	4700 <z_impl_k_thread_abort>

000120e4 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   120e4:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   120e6:	1d13      	adds	r3, r2, #4
   120e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   120ec:	b9d3      	cbnz	r3, 12124 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   120ee:	2301      	movs	r3, #1
   120f0:	fa03 f402 	lsl.w	r4, r3, r2
   120f4:	68c3      	ldr	r3, [r0, #12]
   120f6:	4323      	orrs	r3, r4
   120f8:	60c3      	str	r3, [r0, #12]
		b->next = c;
   120fa:	3204      	adds	r2, #4
   120fc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12100:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   12104:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   12106:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1210a:	d307      	bcc.n	1211c <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1210c:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   1210e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   12110:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   12114:	d304      	bcc.n	12120 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   12116:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   12118:	bc70      	pop	{r4, r5, r6}
   1211a:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1211c:	8099      	strh	r1, [r3, #4]
   1211e:	e7f6      	b.n	1210e <free_list_add_bidx+0x2a>
   12120:	80d9      	strh	r1, [r3, #6]
   12122:	e7f9      	b.n	12118 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   12124:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   12128:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1212a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1212e:	d318      	bcc.n	12162 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   12130:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   12132:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   12136:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1213a:	d314      	bcc.n	12166 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   1213c:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   1213e:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   12140:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12144:	d311      	bcc.n	1216a <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   12146:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   12148:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   1214c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1214e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12152:	d30c      	bcc.n	1216e <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   12154:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   12156:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1215c:	d309      	bcc.n	12172 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   1215e:	60a1      	str	r1, [r4, #8]
   12160:	e7da      	b.n	12118 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   12162:	88a2      	ldrh	r2, [r4, #4]
   12164:	e7e5      	b.n	12132 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   12166:	80aa      	strh	r2, [r5, #4]
   12168:	e7e9      	b.n	1213e <free_list_add_bidx+0x5a>
   1216a:	80eb      	strh	r3, [r5, #6]
   1216c:	e7ec      	b.n	12148 <free_list_add_bidx+0x64>
   1216e:	80d1      	strh	r1, [r2, #6]
   12170:	e7f1      	b.n	12156 <free_list_add_bidx+0x72>
   12172:	80a1      	strh	r1, [r4, #4]
   12174:	e7d0      	b.n	12118 <free_list_add_bidx+0x34>

00012176 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   12176:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   12178:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   1217a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1217e:	d307      	bcc.n	12190 <free_list_add+0x1a>
	void *cmem = &buf[c];
   12180:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   12184:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   12186:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   12188:	2a01      	cmp	r2, #1
   1218a:	d002      	beq.n	12192 <free_list_add+0x1c>
   1218c:	2200      	movs	r2, #0
   1218e:	e000      	b.n	12192 <free_list_add+0x1c>
   12190:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   12192:	b9a2      	cbnz	r2, 121be <free_list_add+0x48>
	void *cmem = &buf[c];
   12194:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   12198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1219c:	d310      	bcc.n	121c0 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   1219e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   121a0:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   121a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   121a6:	d30d      	bcc.n	121c4 <free_list_add+0x4e>
   121a8:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   121aa:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   121ac:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   121b0:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   121b2:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   121b6:	f1c2 021f 	rsb	r2, r2, #31
   121ba:	f7ff ff93 	bl	120e4 <free_list_add_bidx>
	}
}
   121be:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   121c0:	8852      	ldrh	r2, [r2, #2]
   121c2:	e7ed      	b.n	121a0 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   121c4:	2304      	movs	r3, #4
   121c6:	e7f0      	b.n	121aa <free_list_add+0x34>

000121c8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   121c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121ca:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   121cc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   121d0:	d32a      	bcc.n	12228 <sys_heap_init+0x60>
   121d2:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   121d4:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   121d6:	1dc8      	adds	r0, r1, #7
   121d8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   121dc:	440d      	add	r5, r1
   121de:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   121e2:	1a2d      	subs	r5, r5, r0
   121e4:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   121e6:	4606      	mov	r6, r0
	heap->heap = h;
   121e8:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   121ea:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   121ec:	2300      	movs	r3, #0
   121ee:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   121f0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   121f4:	d31a      	bcc.n	1222c <sys_heap_init+0x64>
   121f6:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   121f8:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   121fa:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   121fe:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   12200:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12204:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12208:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   1220c:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1220e:	f103 0e07 	add.w	lr, r3, #7
   12212:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   12216:	2300      	movs	r3, #0
   12218:	4563      	cmp	r3, ip
   1221a:	da09      	bge.n	12230 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   1221c:	1d1a      	adds	r2, r3, #4
   1221e:	2400      	movs	r4, #0
   12220:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   12224:	3301      	adds	r3, #1
   12226:	e7f7      	b.n	12218 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   12228:	2504      	movs	r5, #4
   1222a:	e7d3      	b.n	121d4 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   1222c:	2304      	movs	r3, #4
   1222e:	e7e3      	b.n	121f8 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12230:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   12232:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12236:	d333      	bcc.n	122a0 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   12238:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   1223a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1223e:	d331      	bcc.n	122a4 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   12240:	2300      	movs	r3, #0
   12242:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   12244:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12248:	d32f      	bcc.n	122aa <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1224a:	6843      	ldr	r3, [r0, #4]
   1224c:	f043 0301 	orr.w	r3, r3, #1
   12250:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12252:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12254:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   12256:	f02e 0307 	bic.w	r3, lr, #7
   1225a:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   1225c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12260:	d328      	bcc.n	122b4 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   12262:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   12264:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   12266:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1226a:	d325      	bcc.n	122b8 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   1226c:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   1226e:	f025 0307 	bic.w	r3, r5, #7
   12272:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   12274:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   12276:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1227a:	d31f      	bcc.n	122bc <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   1227c:	2400      	movs	r4, #0
   1227e:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   12280:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   12282:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   12286:	d31c      	bcc.n	122c2 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   12288:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   1228a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1228c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12290:	d319      	bcc.n	122c6 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   12292:	686b      	ldr	r3, [r5, #4]
   12294:	f043 0301 	orr.w	r3, r3, #1
   12298:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1229a:	f7ff ff6c 	bl	12176 <free_list_add>
}
   1229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   122a0:	8043      	strh	r3, [r0, #2]
   122a2:	e7ca      	b.n	1223a <sys_heap_init+0x72>
   122a4:	2300      	movs	r3, #0
   122a6:	8003      	strh	r3, [r0, #0]
   122a8:	e7cc      	b.n	12244 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   122aa:	8843      	ldrh	r3, [r0, #2]
   122ac:	f043 0301 	orr.w	r3, r3, #1
   122b0:	8043      	strh	r3, [r0, #2]
   122b2:	e7ce      	b.n	12252 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   122b4:	8066      	strh	r6, [r4, #2]
   122b6:	e7d5      	b.n	12264 <sys_heap_init+0x9c>
   122b8:	52c1      	strh	r1, [r0, r3]
   122ba:	e7d8      	b.n	1226e <sys_heap_init+0xa6>
   122bc:	2400      	movs	r4, #0
   122be:	806c      	strh	r4, [r5, #2]
   122c0:	e7de      	b.n	12280 <sys_heap_init+0xb8>
   122c2:	52c2      	strh	r2, [r0, r3]
   122c4:	e7e1      	b.n	1228a <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   122c6:	886b      	ldrh	r3, [r5, #2]
   122c8:	f043 0301 	orr.w	r3, r3, #1
   122cc:	806b      	strh	r3, [r5, #2]
   122ce:	e7e4      	b.n	1229a <sys_heap_init+0xd2>

000122d0 <outs>:
{
   122d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122d4:	4607      	mov	r7, r0
   122d6:	460e      	mov	r6, r1
   122d8:	4614      	mov	r4, r2
   122da:	4698      	mov	r8, r3
	size_t count = 0;
   122dc:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   122de:	e006      	b.n	122ee <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   122e0:	4631      	mov	r1, r6
   122e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   122e6:	47b8      	blx	r7
		if (rc < 0) {
   122e8:	2800      	cmp	r0, #0
   122ea:	db09      	blt.n	12300 <outs+0x30>
		++count;
   122ec:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   122ee:	4544      	cmp	r4, r8
   122f0:	d3f6      	bcc.n	122e0 <outs+0x10>
   122f2:	f1b8 0f00 	cmp.w	r8, #0
   122f6:	d102      	bne.n	122fe <outs+0x2e>
   122f8:	7823      	ldrb	r3, [r4, #0]
   122fa:	2b00      	cmp	r3, #0
   122fc:	d1f0      	bne.n	122e0 <outs+0x10>
	return (int)count;
   122fe:	4628      	mov	r0, r5
}
   12300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012304 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   12304:	4770      	bx	lr

00012306 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   12306:	b084      	sub	sp, #16
   12308:	ab04      	add	r3, sp, #16
   1230a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1230e:	2300      	movs	r3, #0
   12310:	f383 8811 	msr	BASEPRI, r3
   12314:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12318:	b004      	add	sp, #16
   1231a:	4770      	bx	lr

0001231c <tty_putchar>:
{
   1231c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12320:	4604      	mov	r4, r0
   12322:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   12324:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   12328:	f003 fcac 	bl	15c84 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   1232c:	b330      	cbz	r0, 1237c <tty_putchar+0x60>
   1232e:	2200      	movs	r2, #0
   12330:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   12332:	4630      	mov	r0, r6
   12334:	f7fd f972 	bl	f61c <z_impl_k_sem_take>
	if (res < 0) {
   12338:	2800      	cmp	r0, #0
   1233a:	db1d      	blt.n	12378 <tty_putchar+0x5c>
	__asm__ volatile(
   1233c:	f04f 0320 	mov.w	r3, #32
   12340:	f3ef 8111 	mrs	r1, BASEPRI
   12344:	f383 8812 	msr	BASEPRI_MAX, r3
   12348:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1234c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   1234e:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   12350:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   12352:	4298      	cmp	r0, r3
   12354:	d800      	bhi.n	12358 <tty_putchar+0x3c>
		tx_next = 0;
   12356:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   12358:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   1235a:	4298      	cmp	r0, r3
   1235c:	d02e      	beq.n	123bc <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   1235e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12360:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   12362:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   12364:	f381 8811 	msr	BASEPRI, r1
   12368:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1236c:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   1236e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   12370:	69db      	ldr	r3, [r3, #28]
   12372:	b353      	cbz	r3, 123ca <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   12374:	4798      	blx	r3
	return 0;
   12376:	2000      	movs	r0, #0
}
   12378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1237c:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   1237e:	f1b3 3fff 	cmp.w	r3, #4294967295
   12382:	d017      	beq.n	123b4 <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   12384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12388:	ea4f 79e3 	mov.w	r9, r3, asr #31
   1238c:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   12390:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   12394:	03d8      	lsls	r0, r3, #15
   12396:	f240 37e7 	movw	r7, #999	; 0x3e7
   1239a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1239e:	2300      	movs	r3, #0
   123a0:	19c0      	adds	r0, r0, r7
   123a2:	f04f 0700 	mov.w	r7, #0
   123a6:	eb47 0101 	adc.w	r1, r7, r1
   123aa:	f7ee fe9d 	bl	10e8 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   123ae:	4602      	mov	r2, r0
   123b0:	460b      	mov	r3, r1
   123b2:	e7be      	b.n	12332 <tty_putchar+0x16>
   123b4:	f04f 32ff 	mov.w	r2, #4294967295
   123b8:	4613      	mov	r3, r2
   123ba:	e7ba      	b.n	12332 <tty_putchar+0x16>
   123bc:	f381 8811 	msr	BASEPRI, r1
   123c0:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   123c4:	f06f 001b 	mvn.w	r0, #27
   123c8:	e7d6      	b.n	12378 <tty_putchar+0x5c>
	return 0;
   123ca:	2000      	movs	r0, #0
   123cc:	e7d4      	b.n	12378 <tty_putchar+0x5c>

000123ce <tty_getchar>:
{
   123ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123d0:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   123d2:	1d05      	adds	r5, r0, #4
   123d4:	6a03      	ldr	r3, [r0, #32]
   123d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   123da:	d031      	beq.n	12440 <tty_getchar+0x72>
   123dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   123e0:	17df      	asrs	r7, r3, #31
   123e2:	03f9      	lsls	r1, r7, #15
   123e4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   123e8:	03d8      	lsls	r0, r3, #15
   123ea:	f240 36e7 	movw	r6, #999	; 0x3e7
   123ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   123f2:	2300      	movs	r3, #0
   123f4:	1980      	adds	r0, r0, r6
   123f6:	f04f 0600 	mov.w	r6, #0
   123fa:	eb46 0101 	adc.w	r1, r6, r1
   123fe:	f7ee fe73 	bl	10e8 <__aeabi_uldivmod>
   12402:	4602      	mov	r2, r0
   12404:	460b      	mov	r3, r1
   12406:	4628      	mov	r0, r5
   12408:	f7fd f908 	bl	f61c <z_impl_k_sem_take>
	if (res < 0) {
   1240c:	2800      	cmp	r0, #0
   1240e:	db16      	blt.n	1243e <tty_getchar+0x70>
	__asm__ volatile(
   12410:	f04f 0320 	mov.w	r3, #32
   12414:	f3ef 8111 	mrs	r1, BASEPRI
   12418:	f383 8812 	msr	BASEPRI_MAX, r3
   1241c:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   12420:	6960      	ldr	r0, [r4, #20]
   12422:	8ba2      	ldrh	r2, [r4, #28]
   12424:	1c53      	adds	r3, r2, #1
   12426:	b29b      	uxth	r3, r3
   12428:	83a3      	strh	r3, [r4, #28]
   1242a:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1242c:	69a2      	ldr	r2, [r4, #24]
   1242e:	4293      	cmp	r3, r2
   12430:	d301      	bcc.n	12436 <tty_getchar+0x68>
		tty->rx_get = 0U;
   12432:	2300      	movs	r3, #0
   12434:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   12436:	f381 8811 	msr	BASEPRI, r1
   1243a:	f3bf 8f6f 	isb	sy
}
   1243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   12440:	f04f 32ff 	mov.w	r2, #4294967295
   12444:	4613      	mov	r3, r2
   12446:	e7de      	b.n	12406 <tty_getchar+0x38>

00012448 <tty_read_unbuf>:
{
   12448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1244c:	b083      	sub	sp, #12
   1244e:	4681      	mov	r9, r0
   12450:	460e      	mov	r6, r1
   12452:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   12454:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   12456:	f04f 0800 	mov.w	r8, #0
	while (size) {
   1245a:	e01a      	b.n	12492 <tty_read_unbuf+0x4a>
		return -ENOSYS;
   1245c:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   12460:	f1b8 0f00 	cmp.w	r8, #0
   12464:	d003      	beq.n	1246e <tty_read_unbuf+0x26>
	return out_size;
   12466:	4640      	mov	r0, r8
}
   12468:	b003      	add	sp, #12
   1246a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   1246e:	f000 f9bf 	bl	127f0 <__errno>
   12472:	6004      	str	r4, [r0, #0]
				return -1;
   12474:	f04f 30ff 	mov.w	r0, #4294967295
   12478:	e7f6      	b.n	12468 <tty_read_unbuf+0x20>
		if (size == 0 ||
   1247a:	2d00      	cmp	r5, #0
   1247c:	d0f3      	beq.n	12466 <tty_read_unbuf+0x1e>
   1247e:	f1b7 3fff 	cmp.w	r7, #4294967295
   12482:	d003      	beq.n	1248c <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   12484:	1e7b      	subs	r3, r7, #1
   12486:	2f00      	cmp	r7, #0
   12488:	d0ed      	beq.n	12466 <tty_read_unbuf+0x1e>
   1248a:	461f      	mov	r7, r3
		if (res == -1) {
   1248c:	f1b4 3fff 	cmp.w	r4, #4294967295
   12490:	d018      	beq.n	124c4 <tty_read_unbuf+0x7c>
	while (size) {
   12492:	2d00      	cmp	r5, #0
   12494:	d0e7      	beq.n	12466 <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   12496:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   1249a:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   1249c:	681b      	ldr	r3, [r3, #0]
   1249e:	2b00      	cmp	r3, #0
   124a0:	d0dc      	beq.n	1245c <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   124a2:	f10d 0107 	add.w	r1, sp, #7
   124a6:	4798      	blx	r3
   124a8:	4604      	mov	r4, r0
		if (res <= -2) {
   124aa:	f1b0 3fff 	cmp.w	r0, #4294967295
   124ae:	dbd7      	blt.n	12460 <tty_read_unbuf+0x18>
		if (res == 0) {
   124b0:	2800      	cmp	r0, #0
   124b2:	d1e2      	bne.n	1247a <tty_read_unbuf+0x32>
			*p++ = c;
   124b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   124b8:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   124bc:	f108 0801 	add.w	r8, r8, #1
			size--;
   124c0:	3d01      	subs	r5, #1
   124c2:	e7da      	b.n	1247a <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   124c4:	2021      	movs	r0, #33	; 0x21
   124c6:	2100      	movs	r1, #0
   124c8:	f7fd fc64 	bl	fd94 <z_impl_k_sleep>
   124cc:	e7e1      	b.n	12492 <tty_read_unbuf+0x4a>

000124ce <tty_irq_input_hook>:
{
   124ce:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   124d0:	8bc2      	ldrh	r2, [r0, #30]
   124d2:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   124d4:	6984      	ldr	r4, [r0, #24]
   124d6:	429c      	cmp	r4, r3
   124d8:	d800      	bhi.n	124dc <tty_irq_input_hook+0xe>
		rx_next = 0;
   124da:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   124dc:	8b84      	ldrh	r4, [r0, #28]
   124de:	429c      	cmp	r4, r3
   124e0:	d007      	beq.n	124f2 <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   124e2:	6944      	ldr	r4, [r0, #20]
   124e4:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   124e6:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   124e8:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   124ea:	f7fd f873 	bl	f5d4 <z_impl_k_sem_give>
}
   124ee:	2001      	movs	r0, #1
   124f0:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   124f2:	217e      	movs	r1, #126	; 0x7e
   124f4:	f7ff ff12 	bl	1231c <tty_putchar>
		return 1;
   124f8:	e7f9      	b.n	124ee <tty_irq_input_hook+0x20>

000124fa <tty_uart_isr>:
{
   124fa:	b530      	push	{r4, r5, lr}
   124fc:	b083      	sub	sp, #12
   124fe:	4604      	mov	r4, r0
   12500:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   12502:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   12504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12506:	b103      	cbz	r3, 1250a <tty_uart_isr+0x10>
	return api->irq_update(dev);
   12508:	4798      	blx	r3
	const struct uart_driver_api *api =
   1250a:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   1250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1250e:	b143      	cbz	r3, 12522 <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   12510:	4620      	mov	r0, r4
   12512:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   12514:	b180      	cbz	r0, 12538 <tty_uart_isr+0x3e>
   12516:	e004      	b.n	12522 <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   12518:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1251c:	4628      	mov	r0, r5
   1251e:	f7ff ffd6 	bl	124ce <tty_irq_input_hook>
	const struct uart_driver_api *api =
   12522:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   12524:	699b      	ldr	r3, [r3, #24]
   12526:	2b00      	cmp	r3, #0
   12528:	d0f6      	beq.n	12518 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   1252a:	2201      	movs	r2, #1
   1252c:	f10d 0107 	add.w	r1, sp, #7
   12530:	4620      	mov	r0, r4
   12532:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   12534:	2800      	cmp	r0, #0
   12536:	d1ef      	bne.n	12518 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   12538:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   1253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1253c:	b113      	cbz	r3, 12544 <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   1253e:	4620      	mov	r0, r4
   12540:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   12542:	b1b8      	cbz	r0, 12574 <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   12544:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   12546:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   12548:	4299      	cmp	r1, r3
   1254a:	d015      	beq.n	12578 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1254c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1254e:	1c4a      	adds	r2, r1, #1
   12550:	87aa      	strh	r2, [r5, #60]	; 0x3c
   12552:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   12554:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   12556:	695b      	ldr	r3, [r3, #20]
   12558:	b113      	cbz	r3, 12560 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   1255a:	2201      	movs	r2, #1
   1255c:	4620      	mov	r0, r4
   1255e:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   12560:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   12562:	6bab      	ldr	r3, [r5, #56]	; 0x38
   12564:	429a      	cmp	r2, r3
   12566:	d301      	bcc.n	1256c <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   12568:	2300      	movs	r3, #0
   1256a:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   1256c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   12570:	f7fd f830 	bl	f5d4 <z_impl_k_sem_give>
}
   12574:	b003      	add	sp, #12
   12576:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   12578:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   1257a:	6a1b      	ldr	r3, [r3, #32]
   1257c:	2b00      	cmp	r3, #0
   1257e:	d0f9      	beq.n	12574 <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   12580:	4620      	mov	r0, r4
   12582:	4798      	blx	r3
   12584:	e7f6      	b.n	12574 <tty_uart_isr+0x7a>

00012586 <tty_read>:
{
   12586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1258a:	4607      	mov	r7, r0
   1258c:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   1258e:	6983      	ldr	r3, [r0, #24]
   12590:	b17b      	cbz	r3, 125b2 <tty_read+0x2c>
	size_t out_size = 0;
   12592:	2600      	movs	r6, #0
	while (size--) {
   12594:	f102 38ff 	add.w	r8, r2, #4294967295
   12598:	b1ba      	cbz	r2, 125ca <tty_read+0x44>
		res = tty_getchar(tty);
   1259a:	4638      	mov	r0, r7
   1259c:	f7ff ff17 	bl	123ce <tty_getchar>
		if (res < 0) {
   125a0:	1e04      	subs	r4, r0, #0
   125a2:	db0a      	blt.n	125ba <tty_read+0x34>
		*p++ = (uint8_t)res;
   125a4:	4629      	mov	r1, r5
   125a6:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   125aa:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   125ac:	460d      	mov	r5, r1
	while (size--) {
   125ae:	4642      	mov	r2, r8
   125b0:	e7f0      	b.n	12594 <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   125b2:	f7ff ff49 	bl	12448 <tty_read_unbuf>
   125b6:	4604      	mov	r4, r0
   125b8:	e008      	b.n	125cc <tty_read+0x46>
			if (out_size == 0) {
   125ba:	b10e      	cbz	r6, 125c0 <tty_read+0x3a>
			return out_size;
   125bc:	4634      	mov	r4, r6
   125be:	e005      	b.n	125cc <tty_read+0x46>
				errno = -res;
   125c0:	f000 f916 	bl	127f0 <__errno>
   125c4:	4263      	negs	r3, r4
   125c6:	6003      	str	r3, [r0, #0]
				return res;
   125c8:	e000      	b.n	125cc <tty_read+0x46>
	return out_size;
   125ca:	4634      	mov	r4, r6
}
   125cc:	4620      	mov	r0, r4
   125ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000125d2 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   125d2:	b570      	push	{r4, r5, r6, lr}
   125d4:	4604      	mov	r4, r0
   125d6:	460e      	mov	r6, r1
   125d8:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   125da:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   125dc:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   125de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   125e0:	b103      	cbz	r3, 125e4 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   125e2:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   125e4:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   125e6:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   125e8:	b90d      	cbnz	r5, 125ee <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   125ea:	2000      	movs	r0, #0
   125ec:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   125ee:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   125f0:	f04f 32ff 	mov.w	r2, #4294967295
   125f4:	2100      	movs	r1, #0
   125f6:	f003 fb89 	bl	15d0c <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   125fa:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   125fc:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   125fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12600:	2b00      	cmp	r3, #0
   12602:	d0f2      	beq.n	125ea <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   12604:	4798      	blx	r3
   12606:	e7f0      	b.n	125ea <tty_set_rx_buf+0x18>

00012608 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   12608:	b570      	push	{r4, r5, r6, lr}
   1260a:	4604      	mov	r4, r0
   1260c:	460e      	mov	r6, r1
   1260e:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   12610:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   12612:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   12614:	6a1b      	ldr	r3, [r3, #32]
   12616:	b103      	cbz	r3, 1261a <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   12618:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   1261a:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   1261c:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   1261e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   12622:	1e69      	subs	r1, r5, #1
   12624:	f04f 32ff 	mov.w	r2, #4294967295
   12628:	f003 fb70 	bl	15d0c <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   1262c:	2000      	movs	r0, #0
   1262e:	bd70      	pop	{r4, r5, r6, pc}

00012630 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   12630:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   12632:	f7f1 fbeb 	bl	3e0c <__do_global_ctors_aux>
	__do_init_array_aux();
   12636:	f7f1 fbdb 	bl	3df0 <__do_init_array_aux>
}
   1263a:	bd08      	pop	{r3, pc}

0001263c <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   1263c:	2000      	movs	r0, #0
   1263e:	4770      	bx	lr

00012640 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   12640:	2200      	movs	r2, #0
   12642:	6002      	str	r2, [r0, #0]
   12644:	6042      	str	r2, [r0, #4]
   12646:	6082      	str	r2, [r0, #8]
}
   12648:	4770      	bx	lr

0001264a <abort_function>:
{
   1264a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1264c:	2000      	movs	r0, #0
   1264e:	f7f1 faf5 	bl	3c3c <sys_reboot>

00012652 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12652:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12654:	f003 fa9e 	bl	15b94 <z_fatal_error>
}
   12658:	bd08      	pop	{r3, pc}

0001265a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1265a:	b508      	push	{r3, lr}
   1265c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1265e:	6800      	ldr	r0, [r0, #0]
   12660:	f7ff fff7 	bl	12652 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   12664:	bd08      	pop	{r3, pc}

00012666 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   12666:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12668:	2100      	movs	r1, #0
   1266a:	2001      	movs	r0, #1
   1266c:	f7ff fff1 	bl	12652 <z_arm_fatal_error>
}
   12670:	bd08      	pop	{r3, pc}

00012672 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   12672:	b508      	push	{r3, lr}
	handler();
   12674:	f7f1 fdba 	bl	41ec <z_SysNmiOnReset>
	z_arm_int_exit();
   12678:	f7f1 fe88 	bl	438c <z_arm_exc_exit>
}
   1267c:	bd08      	pop	{r3, pc}

0001267e <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   1267e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12682:	f383 880b 	msr	PSPLIM, r3
}
   12686:	4770      	bx	lr

00012688 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   12688:	b508      	push	{r3, lr}
   1268a:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   1268c:	4601      	mov	r1, r0
   1268e:	4618      	mov	r0, r3
   12690:	f7ff ffd4 	bl	1263c <__cxa_atexit>
}
   12694:	bd08      	pop	{r3, pc}

00012696 <memory_fault_recoverable>:
}
   12696:	2000      	movs	r0, #0
   12698:	4770      	bx	lr

0001269a <debug_monitor>:
	*recoverable = false;
   1269a:	2300      	movs	r3, #0
   1269c:	700b      	strb	r3, [r1, #0]
}
   1269e:	4770      	bx	lr

000126a0 <fault_handle>:
{
   126a0:	b508      	push	{r3, lr}
	*recoverable = false;
   126a2:	2300      	movs	r3, #0
   126a4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   126a6:	1ecb      	subs	r3, r1, #3
   126a8:	2b09      	cmp	r3, #9
   126aa:	d81a      	bhi.n	126e2 <fault_handle+0x42>
   126ac:	e8df f003 	tbb	[pc, r3]
   126b0:	110d0905 	.word	0x110d0905
   126b4:	19191919 	.word	0x19191919
   126b8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   126ba:	4611      	mov	r1, r2
   126bc:	f7f1 fee2 	bl	4484 <hard_fault>
		break;
   126c0:	e010      	b.n	126e4 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   126c2:	2100      	movs	r1, #0
   126c4:	f7f1 fe70 	bl	43a8 <mem_manage_fault>
		break;
   126c8:	e00c      	b.n	126e4 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   126ca:	2100      	movs	r1, #0
   126cc:	f7f1 fe98 	bl	4400 <bus_fault>
		break;
   126d0:	e008      	b.n	126e4 <fault_handle+0x44>
		reason = usage_fault(esf);
   126d2:	f7f1 febf 	bl	4454 <usage_fault>
		break;
   126d6:	e005      	b.n	126e4 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   126d8:	4611      	mov	r1, r2
   126da:	f7ff ffde 	bl	1269a <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   126de:	2000      	movs	r0, #0
		break;
   126e0:	e000      	b.n	126e4 <fault_handle+0x44>
	*recoverable = false;
   126e2:	2000      	movs	r0, #0
}
   126e4:	bd08      	pop	{r3, pc}

000126e6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   126e6:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   126ea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   126ee:	d001      	beq.n	126f4 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   126f0:	b2c0      	uxtb	r0, r0
   126f2:	4770      	bx	lr
	}

	return -EINVAL;
   126f4:	f06f 0015 	mvn.w	r0, #21
}
   126f8:	4770      	bx	lr

000126fa <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   126fa:	6843      	ldr	r3, [r0, #4]
		&&
   126fc:	2b1f      	cmp	r3, #31
   126fe:	d90a      	bls.n	12716 <mpu_partition_is_valid+0x1c>
		&&
   12700:	f013 0f1f 	tst.w	r3, #31
   12704:	d001      	beq.n	1270a <mpu_partition_is_valid+0x10>
		&&
   12706:	2000      	movs	r0, #0
   12708:	4770      	bx	lr
		((part->start &
   1270a:	6803      	ldr	r3, [r0, #0]
		&&
   1270c:	f013 0f1f 	tst.w	r3, #31
   12710:	d003      	beq.n	1271a <mpu_partition_is_valid+0x20>
   12712:	2000      	movs	r0, #0
   12714:	4770      	bx	lr
   12716:	2000      	movs	r0, #0
   12718:	4770      	bx	lr
   1271a:	2001      	movs	r0, #1
}
   1271c:	4770      	bx	lr

0001271e <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   1271e:	2807      	cmp	r0, #7
   12720:	d805      	bhi.n	1272e <region_allocate_and_init+0x10>
{
   12722:	b510      	push	{r4, lr}
   12724:	4604      	mov	r4, r0
	region_init(index, region_conf);
   12726:	f7f2 f827 	bl	4778 <region_init>
	return index;
   1272a:	4620      	mov	r0, r4
}
   1272c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1272e:	f06f 0015 	mvn.w	r0, #21
}
   12732:	4770      	bx	lr

00012734 <mpu_configure_region>:
{
   12734:	b530      	push	{r4, r5, lr}
   12736:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   12738:	680b      	ldr	r3, [r1, #0]
   1273a:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1273c:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1273e:	890d      	ldrh	r5, [r1, #8]
   12740:	f89d 2008 	ldrb.w	r2, [sp, #8]
   12744:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   12748:	7a89      	ldrb	r1, [r1, #10]
   1274a:	f361 1247 	bfi	r2, r1, #5, #3
   1274e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12752:	f023 031f 	bic.w	r3, r3, #31
   12756:	4423      	add	r3, r4
   12758:	3b01      	subs	r3, #1
   1275a:	f023 031f 	bic.w	r3, r3, #31
   1275e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   12760:	4669      	mov	r1, sp
   12762:	f7ff ffdc 	bl	1271e <region_allocate_and_init>
}
   12766:	b005      	add	sp, #20
   12768:	bd30      	pop	{r4, r5, pc}

0001276a <arm_core_mpu_configure_static_mpu_regions>:
{
   1276a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1276c:	f7f2 f8e2 	bl	4934 <mpu_configure_static_mpu_regions>
}
   12770:	bd08      	pop	{r3, pc}

00012772 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   12772:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12774:	f7f2 f8e8 	bl	4948 <mpu_mark_areas_for_dynamic_regions>
}
   12778:	bd08      	pop	{r3, pc}

0001277a <malloc_prepare>:
}
   1277a:	2000      	movs	r0, #0
   1277c:	4770      	bx	lr

0001277e <_stdout_hook_default>:
}
   1277e:	f04f 30ff 	mov.w	r0, #4294967295
   12782:	4770      	bx	lr

00012784 <_stdin_hook_default>:
}
   12784:	2000      	movs	r0, #0
   12786:	4770      	bx	lr

00012788 <_read>:
{
   12788:	b508      	push	{r3, lr}
   1278a:	4608      	mov	r0, r1
   1278c:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   1278e:	f7f2 f96b 	bl	4a68 <z_impl_zephyr_read_stdin>
}
   12792:	bd08      	pop	{r3, pc}

00012794 <_write>:
{
   12794:	b508      	push	{r3, lr}
   12796:	4608      	mov	r0, r1
   12798:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1279a:	f7f2 f97b 	bl	4a94 <z_impl_zephyr_write_stdout>
}
   1279e:	bd08      	pop	{r3, pc}

000127a0 <_close>:
}
   127a0:	f04f 30ff 	mov.w	r0, #4294967295
   127a4:	4770      	bx	lr

000127a6 <_lseek>:
}
   127a6:	2000      	movs	r0, #0
   127a8:	4770      	bx	lr

000127aa <_isatty>:
}
   127aa:	2802      	cmp	r0, #2
   127ac:	bfcc      	ite	gt
   127ae:	2000      	movgt	r0, #0
   127b0:	2001      	movle	r0, #1
   127b2:	4770      	bx	lr

000127b4 <_kill>:
}
   127b4:	2000      	movs	r0, #0
   127b6:	4770      	bx	lr

000127b8 <_getpid>:
}
   127b8:	2000      	movs	r0, #0
   127ba:	4770      	bx	lr

000127bc <_fstat>:
	st->st_mode = S_IFCHR;
   127bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   127c0:	604b      	str	r3, [r1, #4]
}
   127c2:	2000      	movs	r0, #0
   127c4:	4770      	bx	lr

000127c6 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   127c6:	b510      	push	{r4, lr}
   127c8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   127ca:	2014      	movs	r0, #20
   127cc:	f7fe f8a8 	bl	10920 <malloc>
   127d0:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   127d2:	f003 fa94 	bl	15cfe <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   127d6:	bd10      	pop	{r4, pc}

000127d8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   127d8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   127da:	f04f 32ff 	mov.w	r2, #4294967295
   127de:	f04f 33ff 	mov.w	r3, #4294967295
   127e2:	f7fc fe29 	bl	f438 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   127e6:	bd08      	pop	{r3, pc}

000127e8 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   127e8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   127ea:	f7fc feaf 	bl	f54c <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   127ee:	bd08      	pop	{r3, pc}

000127f0 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   127f0:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   127f2:	f7fc fbed 	bl	efd0 <z_impl_z_errno>
	return z_errno();
}
   127f6:	bd08      	pop	{r3, pc}

000127f8 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   127f8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   127fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   127fe:	0089      	lsls	r1, r1, #2
   12800:	3180      	adds	r1, #128	; 0x80
}
   12802:	4408      	add	r0, r1
   12804:	4770      	bx	lr

00012806 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   12806:	6840      	ldr	r0, [r0, #4]
}
   12808:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1280c:	4770      	bx	lr

0001280e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1280e:	6900      	ldr	r0, [r0, #16]
}
   12810:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   12814:	4770      	bx	lr

00012816 <get_status>:
{
   12816:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   12818:	b2c9      	uxtb	r1, r1
   1281a:	f7ff ffed 	bl	127f8 <get_sub_data>
   1281e:	6880      	ldr	r0, [r0, #8]
}
   12820:	f000 0007 	and.w	r0, r0, #7
   12824:	bd08      	pop	{r3, pc}

00012826 <set_off_state>:
	__asm__ volatile(
   12826:	f04f 0320 	mov.w	r3, #32
   1282a:	f3ef 8211 	mrs	r2, BASEPRI
   1282e:	f383 8812 	msr	BASEPRI_MAX, r3
   12832:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   12836:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12838:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1283c:	d001      	beq.n	12842 <set_off_state+0x1c>
   1283e:	428b      	cmp	r3, r1
   12840:	d107      	bne.n	12852 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12842:	2301      	movs	r3, #1
   12844:	6003      	str	r3, [r0, #0]
	int err = 0;
   12846:	2000      	movs	r0, #0
	__asm__ volatile(
   12848:	f382 8811 	msr	BASEPRI, r2
   1284c:	f3bf 8f6f 	isb	sy
}
   12850:	4770      	bx	lr
		err = -EPERM;
   12852:	f04f 30ff 	mov.w	r0, #4294967295
   12856:	e7f7      	b.n	12848 <set_off_state+0x22>

00012858 <set_starting_state>:
{
   12858:	b410      	push	{r4}
	__asm__ volatile(
   1285a:	f04f 0320 	mov.w	r3, #32
   1285e:	f3ef 8211 	mrs	r2, BASEPRI
   12862:	f383 8812 	msr	BASEPRI_MAX, r3
   12866:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1286a:	6803      	ldr	r3, [r0, #0]
   1286c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   12870:	f003 0307 	and.w	r3, r3, #7
   12874:	2b01      	cmp	r3, #1
   12876:	d009      	beq.n	1288c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   12878:	428c      	cmp	r4, r1
   1287a:	d00a      	beq.n	12892 <set_starting_state+0x3a>
		err = -EPERM;
   1287c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   12880:	f382 8811 	msr	BASEPRI, r2
   12884:	f3bf 8f6f 	isb	sy
}
   12888:	bc10      	pop	{r4}
   1288a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1288c:	6001      	str	r1, [r0, #0]
	int err = 0;
   1288e:	2000      	movs	r0, #0
   12890:	e7f6      	b.n	12880 <set_starting_state+0x28>
		err = -EALREADY;
   12892:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12896:	e7f3      	b.n	12880 <set_starting_state+0x28>

00012898 <set_on_state>:
	__asm__ volatile(
   12898:	f04f 0320 	mov.w	r3, #32
   1289c:	f3ef 8211 	mrs	r2, BASEPRI
   128a0:	f383 8812 	msr	BASEPRI_MAX, r3
   128a4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   128a8:	6803      	ldr	r3, [r0, #0]
   128aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   128ae:	f043 0302 	orr.w	r3, r3, #2
   128b2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   128b4:	f382 8811 	msr	BASEPRI, r2
   128b8:	f3bf 8f6f 	isb	sy
}
   128bc:	4770      	bx	lr

000128be <clkstarted_handle>:
{
   128be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128c0:	4606      	mov	r6, r0
   128c2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   128c4:	f7ff ff98 	bl	127f8 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   128c8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   128ca:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   128cc:	2300      	movs	r3, #0
   128ce:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   128d2:	f7ff ffe1 	bl	12898 <set_on_state>
	if (callback) {
   128d6:	b11d      	cbz	r5, 128e0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   128d8:	463a      	mov	r2, r7
   128da:	4621      	mov	r1, r4
   128dc:	4630      	mov	r0, r6
   128de:	47a8      	blx	r5
}
   128e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000128e2 <stop>:
{
   128e2:	b570      	push	{r4, r5, r6, lr}
   128e4:	4606      	mov	r6, r0
   128e6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   128e8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   128ea:	4621      	mov	r1, r4
   128ec:	f7ff ff84 	bl	127f8 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   128f0:	4629      	mov	r1, r5
   128f2:	3008      	adds	r0, #8
   128f4:	f7ff ff97 	bl	12826 <set_off_state>
	if (err < 0) {
   128f8:	2800      	cmp	r0, #0
   128fa:	db06      	blt.n	1290a <stop+0x28>
	get_sub_config(dev, type)->stop();
   128fc:	4621      	mov	r1, r4
   128fe:	4630      	mov	r0, r6
   12900:	f7ff ff81 	bl	12806 <get_sub_config>
   12904:	6843      	ldr	r3, [r0, #4]
   12906:	4798      	blx	r3
	return 0;
   12908:	2000      	movs	r0, #0
}
   1290a:	bd70      	pop	{r4, r5, r6, pc}

0001290c <api_stop>:
{
   1290c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1290e:	2280      	movs	r2, #128	; 0x80
   12910:	f7ff ffe7 	bl	128e2 <stop>
}
   12914:	bd08      	pop	{r3, pc}

00012916 <async_start>:
{
   12916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1291a:	4606      	mov	r6, r0
   1291c:	4690      	mov	r8, r2
   1291e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   12920:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   12922:	4629      	mov	r1, r5
   12924:	f7ff ff68 	bl	127f8 <get_sub_data>
   12928:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1292a:	9906      	ldr	r1, [sp, #24]
   1292c:	3008      	adds	r0, #8
   1292e:	f7ff ff93 	bl	12858 <set_starting_state>
	if (err < 0) {
   12932:	2800      	cmp	r0, #0
   12934:	db09      	blt.n	1294a <async_start+0x34>
	subdata->cb = cb;
   12936:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1293a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1293c:	4629      	mov	r1, r5
   1293e:	4630      	mov	r0, r6
   12940:	f7ff ff61 	bl	12806 <get_sub_config>
   12944:	6803      	ldr	r3, [r0, #0]
   12946:	4798      	blx	r3
	return 0;
   12948:	2000      	movs	r0, #0
}
   1294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001294e <api_start>:
{
   1294e:	b510      	push	{r4, lr}
   12950:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   12952:	2480      	movs	r4, #128	; 0x80
   12954:	9400      	str	r4, [sp, #0]
   12956:	f7ff ffde 	bl	12916 <async_start>
}
   1295a:	b002      	add	sp, #8
   1295c:	bd10      	pop	{r4, pc}

0001295e <onoff_started_callback>:
{
   1295e:	b510      	push	{r4, lr}
   12960:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   12962:	b2c9      	uxtb	r1, r1
   12964:	f7ff ff53 	bl	1280e <get_onoff_manager>
	notify(mgr, 0);
   12968:	2100      	movs	r1, #0
   1296a:	47a0      	blx	r4
}
   1296c:	bd10      	pop	{r4, pc}

0001296e <hfclk_start>:
{
   1296e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12970:	2001      	movs	r0, #1
   12972:	f7f3 fabd 	bl	5ef0 <nrfx_clock_start>
}
   12976:	bd08      	pop	{r3, pc}

00012978 <hfclkaudio_start>:
{
   12978:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1297a:	2003      	movs	r0, #3
   1297c:	f7f3 fab8 	bl	5ef0 <nrfx_clock_start>
}
   12980:	bd08      	pop	{r3, pc}

00012982 <hfclk192m_start>:
{
   12982:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   12984:	2002      	movs	r0, #2
   12986:	f7f3 fab3 	bl	5ef0 <nrfx_clock_start>
}
   1298a:	bd08      	pop	{r3, pc}

0001298c <lfclk_start>:
{
   1298c:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1298e:	2000      	movs	r0, #0
   12990:	f7f3 faae 	bl	5ef0 <nrfx_clock_start>
}
   12994:	bd08      	pop	{r3, pc}

00012996 <hfclk_stop>:
{
   12996:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12998:	2001      	movs	r0, #1
   1299a:	f7f3 fb03 	bl	5fa4 <nrfx_clock_stop>
}
   1299e:	bd08      	pop	{r3, pc}

000129a0 <hfclkaudio_stop>:
{
   129a0:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   129a2:	2003      	movs	r0, #3
   129a4:	f7f3 fafe 	bl	5fa4 <nrfx_clock_stop>
}
   129a8:	bd08      	pop	{r3, pc}

000129aa <hfclk192m_stop>:
{
   129aa:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   129ac:	2002      	movs	r0, #2
   129ae:	f7f3 faf9 	bl	5fa4 <nrfx_clock_stop>
}
   129b2:	bd08      	pop	{r3, pc}

000129b4 <lfclk_stop>:
{
   129b4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   129b6:	2000      	movs	r0, #0
   129b8:	f7f3 faf4 	bl	5fa4 <nrfx_clock_stop>
}
   129bc:	bd08      	pop	{r3, pc}

000129be <blocking_start_callback>:
{
   129be:	b508      	push	{r3, lr}
   129c0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   129c2:	f7fc fe07 	bl	f5d4 <z_impl_k_sem_give>
}
   129c6:	bd08      	pop	{r3, pc}

000129c8 <debug_hook_out_nop>:
}
   129c8:	2000      	movs	r0, #0
   129ca:	4770      	bx	lr

000129cc <gpio_nrfx_port_get_raw>:
	return port->config;
   129cc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129ce:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   129d0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   129d2:	600b      	str	r3, [r1, #0]
}
   129d4:	2000      	movs	r0, #0
   129d6:	4770      	bx	lr

000129d8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   129d8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129da:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   129dc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   129de:	4042      	eors	r2, r0
   129e0:	400a      	ands	r2, r1
   129e2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   129e4:	605a      	str	r2, [r3, #4]
}
   129e6:	2000      	movs	r0, #0
   129e8:	4770      	bx	lr

000129ea <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   129ea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129ec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   129ee:	6099      	str	r1, [r3, #8]
}
   129f0:	2000      	movs	r0, #0
   129f2:	4770      	bx	lr

000129f4 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   129f4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   129f6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   129f8:	60d9      	str	r1, [r3, #12]
}
   129fa:	2000      	movs	r0, #0
   129fc:	4770      	bx	lr

000129fe <gpio_nrfx_port_toggle_bits>:
	return port->config;
   129fe:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12a00:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12a02:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   12a04:	404b      	eors	r3, r1
    p_reg->OUT = value;
   12a06:	6053      	str	r3, [r2, #4]
}
   12a08:	2000      	movs	r0, #0
   12a0a:	4770      	bx	lr

00012a0c <gpio_nrfx_manage_callback>:
{
   12a0c:	b470      	push	{r4, r5, r6}
	return port->data;
   12a0e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12a10:	1d05      	adds	r5, r0, #4
	return list->head;
   12a12:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12a14:	b1db      	cbz	r3, 12a4e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   12a16:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12a18:	2400      	movs	r4, #0
   12a1a:	e00a      	b.n	12a32 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   12a1c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   12a1e:	6043      	str	r3, [r0, #4]
	return list->tail;
   12a20:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   12a22:	42a1      	cmp	r1, r4
   12a24:	d10f      	bne.n	12a46 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12a26:	606b      	str	r3, [r5, #4]
}
   12a28:	e00d      	b.n	12a46 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12a2a:	606c      	str	r4, [r5, #4]
}
   12a2c:	e00b      	b.n	12a46 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12a2e:	461c      	mov	r4, r3
   12a30:	681b      	ldr	r3, [r3, #0]
   12a32:	b15b      	cbz	r3, 12a4c <gpio_nrfx_manage_callback+0x40>
   12a34:	429e      	cmp	r6, r3
   12a36:	d1fa      	bne.n	12a2e <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   12a38:	2c00      	cmp	r4, #0
   12a3a:	d0ef      	beq.n	12a1c <gpio_nrfx_manage_callback+0x10>
	return node->next;
   12a3c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   12a3e:	6023      	str	r3, [r4, #0]
	return list->tail;
   12a40:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   12a42:	4299      	cmp	r1, r3
   12a44:	d0f1      	beq.n	12a2a <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   12a46:	2300      	movs	r3, #0
   12a48:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12a4a:	e000      	b.n	12a4e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   12a4c:	b152      	cbz	r2, 12a64 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   12a4e:	b162      	cbz	r2, 12a6a <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   12a50:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   12a52:	600b      	str	r3, [r1, #0]
	list->head = node;
   12a54:	6041      	str	r1, [r0, #4]
	return list->tail;
   12a56:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   12a58:	b10b      	cbz	r3, 12a5e <gpio_nrfx_manage_callback+0x52>
	return 0;
   12a5a:	2000      	movs	r0, #0
   12a5c:	e006      	b.n	12a6c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   12a5e:	6069      	str	r1, [r5, #4]
   12a60:	2000      	movs	r0, #0
}
   12a62:	e003      	b.n	12a6c <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   12a64:	f06f 0015 	mvn.w	r0, #21
   12a68:	e000      	b.n	12a6c <gpio_nrfx_manage_callback+0x60>
	return 0;
   12a6a:	2000      	movs	r0, #0
}
   12a6c:	bc70      	pop	{r4, r5, r6}
   12a6e:	4770      	bx	lr

00012a70 <endtx_isr>:
	return dev->config;
   12a70:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12a72:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   12a74:	f04f 0120 	mov.w	r1, #32
   12a78:	f3ef 8211 	mrs	r2, BASEPRI
   12a7c:	f381 8812 	msr	BASEPRI_MAX, r1
   12a80:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a84:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12a88:	b131      	cbz	r1, 12a98 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12a8a:	2100      	movs	r1, #0
   12a8c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   12a90:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12a94:	2101      	movs	r1, #1
   12a96:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   12a98:	f382 8811 	msr	BASEPRI, r2
   12a9c:	f3bf 8f6f 	isb	sy
}
   12aa0:	4770      	bx	lr

00012aa2 <uarte_nrfx_isr_int>:
{
   12aa2:	b538      	push	{r3, r4, r5, lr}
   12aa4:	4604      	mov	r4, r0
	return dev->config;
   12aa6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12aa8:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12aaa:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12aae:	f413 7f80 	tst.w	r3, #256	; 0x100
   12ab2:	d003      	beq.n	12abc <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ab4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d139      	bne.n	12b30 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   12abc:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12abe:	685b      	ldr	r3, [r3, #4]
   12ac0:	f013 0f10 	tst.w	r3, #16
   12ac4:	d01a      	beq.n	12afc <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   12ac6:	f04f 0320 	mov.w	r3, #32
   12aca:	f3ef 8211 	mrs	r2, BASEPRI
   12ace:	f383 8812 	msr	BASEPRI_MAX, r3
   12ad2:	f3bf 8f6f 	isb	sy
   12ad6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12ada:	b113      	cbz	r3, 12ae2 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12adc:	2300      	movs	r3, #0
   12ade:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   12ae2:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   12ae4:	68db      	ldr	r3, [r3, #12]
   12ae6:	b10b      	cbz	r3, 12aec <uarte_nrfx_isr_int+0x4a>
   12ae8:	691b      	ldr	r3, [r3, #16]
   12aea:	b91b      	cbnz	r3, 12af4 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   12aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12af0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   12af4:	f382 8811 	msr	BASEPRI, r2
   12af8:	f3bf 8f6f 	isb	sy
	return dev->data;
   12afc:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   12afe:	68da      	ldr	r2, [r3, #12]
   12b00:	b1aa      	cbz	r2, 12b2e <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12b02:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12b06:	b121      	cbz	r1, 12b12 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   12b08:	2100      	movs	r1, #0
   12b0a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   12b0c:	68da      	ldr	r2, [r3, #12]
   12b0e:	7b92      	ldrb	r2, [r2, #14]
   12b10:	b98a      	cbnz	r2, 12b36 <uarte_nrfx_isr_int+0x94>
   12b12:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   12b16:	b122      	cbz	r2, 12b22 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12b18:	2200      	movs	r2, #0
   12b1a:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   12b1e:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   12b22:	68da      	ldr	r2, [r3, #12]
   12b24:	6813      	ldr	r3, [r2, #0]
   12b26:	b113      	cbz	r3, 12b2e <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   12b28:	6851      	ldr	r1, [r2, #4]
   12b2a:	4620      	mov	r0, r4
   12b2c:	4798      	blx	r3
}
   12b2e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   12b30:	f7ff ff9e 	bl	12a70 <endtx_isr>
   12b34:	e7c2      	b.n	12abc <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   12b36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   12b3a:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   12b3e:	68db      	ldr	r3, [r3, #12]
   12b40:	7399      	strb	r1, [r3, #14]
			return;
   12b42:	e7f4      	b.n	12b2e <uarte_nrfx_isr_int+0x8c>

00012b44 <uarte_nrfx_configure>:
{
   12b44:	b530      	push	{r4, r5, lr}
   12b46:	b083      	sub	sp, #12
   12b48:	4605      	mov	r5, r0
   12b4a:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   12b4c:	794b      	ldrb	r3, [r1, #5]
   12b4e:	2b01      	cmp	r3, #1
   12b50:	d006      	beq.n	12b60 <uarte_nrfx_configure+0x1c>
   12b52:	2b03      	cmp	r3, #3
   12b54:	d011      	beq.n	12b7a <uarte_nrfx_configure+0x36>
   12b56:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   12b5a:	4610      	mov	r0, r2
   12b5c:	b003      	add	sp, #12
   12b5e:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   12b60:	2300      	movs	r3, #0
   12b62:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12b66:	79a3      	ldrb	r3, [r4, #6]
   12b68:	2b03      	cmp	r3, #3
   12b6a:	d14f      	bne.n	12c0c <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
   12b6c:	79e3      	ldrb	r3, [r4, #7]
   12b6e:	b143      	cbz	r3, 12b82 <uarte_nrfx_configure+0x3e>
   12b70:	2b01      	cmp	r3, #1
   12b72:	d015      	beq.n	12ba0 <uarte_nrfx_configure+0x5c>
   12b74:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12b78:	e7ef      	b.n	12b5a <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12b7a:	2310      	movs	r3, #16
   12b7c:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   12b80:	e7f1      	b.n	12b66 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   12b82:	2300      	movs	r3, #0
   12b84:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   12b88:	2300      	movs	r3, #0
   12b8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   12b8e:	7923      	ldrb	r3, [r4, #4]
   12b90:	2b01      	cmp	r3, #1
   12b92:	d033      	beq.n	12bfc <uarte_nrfx_configure+0xb8>
   12b94:	2b02      	cmp	r3, #2
   12b96:	d02d      	beq.n	12bf4 <uarte_nrfx_configure+0xb0>
   12b98:	b173      	cbz	r3, 12bb8 <uarte_nrfx_configure+0x74>
   12b9a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12b9e:	e7dc      	b.n	12b5a <uarte_nrfx_configure+0x16>
	return dev->config;
   12ba0:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   12ba2:	685b      	ldr	r3, [r3, #4]
   12ba4:	f003 0201 	and.w	r2, r3, #1
   12ba8:	f003 0302 	and.w	r3, r3, #2
   12bac:	4313      	orrs	r3, r2
   12bae:	d030      	beq.n	12c12 <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   12bb0:	2301      	movs	r3, #1
   12bb2:	f88d 3000 	strb.w	r3, [sp]
		break;
   12bb6:	e7e7      	b.n	12b88 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   12bb8:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12bbc:	6821      	ldr	r1, [r4, #0]
   12bbe:	4628      	mov	r0, r5
   12bc0:	f7f2 fc58 	bl	5474 <baudrate_set>
   12bc4:	4602      	mov	r2, r0
   12bc6:	bb38      	cbnz	r0, 12c18 <uarte_nrfx_configure+0xd4>
	return dev->config;
   12bc8:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   12bca:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12bcc:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   12bd0:	f89d 0002 	ldrb.w	r0, [sp, #2]
   12bd4:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   12bd6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12bda:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   12bdc:	f89d 0000 	ldrb.w	r0, [sp]
   12be0:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12be2:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   12be6:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   12be8:	3304      	adds	r3, #4
   12bea:	e894 0003 	ldmia.w	r4, {r0, r1}
   12bee:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   12bf2:	e7b2      	b.n	12b5a <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12bf4:	230e      	movs	r3, #14
   12bf6:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   12bfa:	e7df      	b.n	12bbc <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12bfc:	230e      	movs	r3, #14
   12bfe:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   12c02:	f44f 7380 	mov.w	r3, #256	; 0x100
   12c06:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   12c0a:	e7d7      	b.n	12bbc <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
   12c0c:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12c10:	e7a3      	b.n	12b5a <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   12c12:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12c16:	e7a0      	b.n	12b5a <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   12c18:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12c1c:	e79d      	b.n	12b5a <uarte_nrfx_configure+0x16>

00012c1e <uarte_nrfx_config_get>:
{
   12c1e:	460b      	mov	r3, r1
	return dev->data;
   12c20:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   12c22:	6891      	ldr	r1, [r2, #8]
   12c24:	6850      	ldr	r0, [r2, #4]
   12c26:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12c2a:	2000      	movs	r0, #0
   12c2c:	4770      	bx	lr

00012c2e <uarte_nrfx_err_check>:
	return dev->config;
   12c2e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12c30:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12c32:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12c36:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12c3a:	4770      	bx	lr

00012c3c <is_tx_ready>:
	return dev->config;
   12c3c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12c3e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12c40:	685b      	ldr	r3, [r3, #4]
   12c42:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12c46:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12c4a:	b929      	cbnz	r1, 12c58 <is_tx_ready+0x1c>
   12c4c:	b933      	cbnz	r3, 12c5c <is_tx_ready+0x20>
   12c4e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   12c52:	b92b      	cbnz	r3, 12c60 <is_tx_ready+0x24>
   12c54:	2000      	movs	r0, #0
   12c56:	4770      	bx	lr
   12c58:	2001      	movs	r0, #1
   12c5a:	4770      	bx	lr
   12c5c:	2000      	movs	r0, #0
   12c5e:	4770      	bx	lr
   12c60:	2001      	movs	r0, #1
}
   12c62:	4770      	bx	lr

00012c64 <uarte_enable>:
	return dev->config;
   12c64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12c66:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12c68:	2208      	movs	r2, #8
   12c6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   12c6e:	4770      	bx	lr

00012c70 <tx_start>:
{
   12c70:	b510      	push	{r4, lr}
	return dev->config;
   12c72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12c74:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12c76:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12c7a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c7e:	2300      	movs	r3, #0
   12c80:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12c84:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   12c88:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   12c8c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   12c90:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12c92:	685b      	ldr	r3, [r3, #4]
   12c94:	f013 0f10 	tst.w	r3, #16
   12c98:	d102      	bne.n	12ca0 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12c9a:	2301      	movs	r3, #1
   12c9c:	60a3      	str	r3, [r4, #8]
}
   12c9e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   12ca0:	2101      	movs	r1, #1
   12ca2:	f7ff ffdf 	bl	12c64 <uarte_enable>
    p_reg->INTENSET = mask;
   12ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12caa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   12cae:	e7f4      	b.n	12c9a <tx_start+0x2a>

00012cb0 <uarte_nrfx_poll_in>:
{
   12cb0:	b410      	push	{r4}
	return dev->data;
   12cb2:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   12cb4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12cb6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12cb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12cbc:	b152      	cbz	r2, 12cd4 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   12cbe:	7d62      	ldrb	r2, [r4, #21]
   12cc0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12cc2:	2000      	movs	r0, #0
   12cc4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12cc8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ccc:	2201      	movs	r2, #1
   12cce:	601a      	str	r2, [r3, #0]
}
   12cd0:	bc10      	pop	{r4}
   12cd2:	4770      	bx	lr
		return -1;
   12cd4:	f04f 30ff 	mov.w	r0, #4294967295
   12cd8:	e7fa      	b.n	12cd0 <uarte_nrfx_poll_in+0x20>

00012cda <uarte_nrfx_fifo_fill>:
{
   12cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cde:	4680      	mov	r8, r0
	return dev->data;
   12ce0:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   12ce2:	68fb      	ldr	r3, [r7, #12]
   12ce4:	899e      	ldrh	r6, [r3, #12]
   12ce6:	4296      	cmp	r6, r2
   12ce8:	bfa8      	it	ge
   12cea:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   12cec:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12cee:	2201      	movs	r2, #1
   12cf0:	e8d3 0fef 	ldaex	r0, [r3]
   12cf4:	2800      	cmp	r0, #0
   12cf6:	d103      	bne.n	12d00 <uarte_nrfx_fifo_fill+0x26>
   12cf8:	e8c3 2fe4 	stlex	r4, r2, [r3]
   12cfc:	2c00      	cmp	r4, #0
   12cfe:	d1f7      	bne.n	12cf0 <uarte_nrfx_fifo_fill+0x16>
   12d00:	d101      	bne.n	12d06 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   12d02:	2300      	movs	r3, #0
   12d04:	e006      	b.n	12d14 <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   12d06:	2600      	movs	r6, #0
   12d08:	e019      	b.n	12d3e <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   12d0a:	68fc      	ldr	r4, [r7, #12]
   12d0c:	68a4      	ldr	r4, [r4, #8]
   12d0e:	5ccd      	ldrb	r5, [r1, r3]
   12d10:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   12d12:	3301      	adds	r3, #1
   12d14:	42b3      	cmp	r3, r6
   12d16:	dbf8      	blt.n	12d0a <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   12d18:	f04f 0320 	mov.w	r3, #32
   12d1c:	f3ef 8411 	mrs	r4, BASEPRI
   12d20:	f383 8812 	msr	BASEPRI_MAX, r3
   12d24:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   12d28:	4640      	mov	r0, r8
   12d2a:	f7ff ff87 	bl	12c3c <is_tx_ready>
   12d2e:	b948      	cbnz	r0, 12d44 <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   12d30:	68fb      	ldr	r3, [r7, #12]
   12d32:	2600      	movs	r6, #0
   12d34:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   12d36:	f384 8811 	msr	BASEPRI, r4
   12d3a:	f3bf 8f6f 	isb	sy
}
   12d3e:	4630      	mov	r0, r6
   12d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   12d44:	68fb      	ldr	r3, [r7, #12]
   12d46:	4632      	mov	r2, r6
   12d48:	6899      	ldr	r1, [r3, #8]
   12d4a:	4640      	mov	r0, r8
   12d4c:	f7ff ff90 	bl	12c70 <tx_start>
   12d50:	e7f1      	b.n	12d36 <uarte_nrfx_fifo_fill+0x5c>

00012d52 <uarte_nrfx_fifo_read>:
	return dev->config;
   12d52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d54:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   12d56:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12d58:	2a00      	cmp	r2, #0
   12d5a:	dd0c      	ble.n	12d76 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12d60:	b15a      	cbz	r2, 12d7a <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12d62:	2200      	movs	r2, #0
   12d64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12d68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   12d6c:	7d42      	ldrb	r2, [r0, #21]
   12d6e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d70:	2001      	movs	r0, #1
   12d72:	6018      	str	r0, [r3, #0]
}
   12d74:	4770      	bx	lr
	int num_rx = 0;
   12d76:	2000      	movs	r0, #0
   12d78:	4770      	bx	lr
   12d7a:	2000      	movs	r0, #0
}
   12d7c:	4770      	bx	lr

00012d7e <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   12d7e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d80:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   12d82:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   12d84:	f04f 0020 	mov.w	r0, #32
   12d88:	f3ef 8311 	mrs	r3, BASEPRI
   12d8c:	f380 8812 	msr	BASEPRI_MAX, r0
   12d90:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   12d94:	68c9      	ldr	r1, [r1, #12]
   12d96:	2000      	movs	r0, #0
   12d98:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   12d9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12d9e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   12da2:	f383 8811 	msr	BASEPRI, r3
   12da6:	f3bf 8f6f 	isb	sy
}
   12daa:	4770      	bx	lr

00012dac <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   12dac:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   12dae:	68db      	ldr	r3, [r3, #12]
   12db0:	2201      	movs	r2, #1
   12db2:	739a      	strb	r2, [r3, #14]
}
   12db4:	4770      	bx	lr

00012db6 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   12db6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12db8:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   12dba:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   12dbc:	68db      	ldr	r3, [r3, #12]
   12dbe:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12dc0:	b94a      	cbnz	r2, 12dd6 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12dc2:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   12dc6:	b15a      	cbz	r2, 12de0 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   12dc8:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12dcc:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   12dd0:	d008      	beq.n	12de4 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   12dd2:	2001      	movs	r0, #1
   12dd4:	e000      	b.n	12dd8 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12dd6:	2000      	movs	r0, #0
	if (ready) {
   12dd8:	b108      	cbz	r0, 12dde <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   12dda:	2200      	movs	r2, #0
   12ddc:	611a      	str	r2, [r3, #16]
}
   12dde:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12de0:	2000      	movs	r0, #0
   12de2:	e7f9      	b.n	12dd8 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12de4:	2000      	movs	r0, #0
   12de6:	e7f7      	b.n	12dd8 <uarte_nrfx_irq_tx_ready_complete+0x22>

00012de8 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   12de8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12dea:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12dec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   12df0:	3800      	subs	r0, #0
   12df2:	bf18      	it	ne
   12df4:	2001      	movne	r0, #1
   12df6:	4770      	bx	lr

00012df8 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   12df8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12dfa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12dfc:	2210      	movs	r2, #16
   12dfe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12e02:	4770      	bx	lr

00012e04 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   12e04:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12e06:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12e08:	2210      	movs	r2, #16
   12e0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12e0e:	4770      	bx	lr

00012e10 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   12e10:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12e12:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12e14:	f44f 7200 	mov.w	r2, #512	; 0x200
   12e18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12e1c:	4770      	bx	lr

00012e1e <uarte_nrfx_irq_err_disable>:
	return dev->config;
   12e1e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12e20:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12e22:	f44f 7200 	mov.w	r2, #512	; 0x200
   12e26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12e2a:	4770      	bx	lr

00012e2c <uarte_nrfx_irq_is_pending>:
{
   12e2c:	b538      	push	{r3, r4, r5, lr}
   12e2e:	4604      	mov	r4, r0
	return dev->config;
   12e30:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12e32:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12e34:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   12e38:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   12e3c:	d106      	bne.n	12e4c <uarte_nrfx_irq_is_pending+0x20>
   12e3e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   12e42:	f013 0f10 	tst.w	r3, #16
   12e46:	d107      	bne.n	12e58 <uarte_nrfx_irq_is_pending+0x2c>
   12e48:	2000      	movs	r0, #0
}
   12e4a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   12e4c:	f7ff ffb3 	bl	12db6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   12e50:	2800      	cmp	r0, #0
   12e52:	d0f4      	beq.n	12e3e <uarte_nrfx_irq_is_pending+0x12>
		||
   12e54:	2001      	movs	r0, #1
   12e56:	e7f8      	b.n	12e4a <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   12e58:	4620      	mov	r0, r4
   12e5a:	f7ff ffc5 	bl	12de8 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   12e5e:	2800      	cmp	r0, #0
   12e60:	d0f3      	beq.n	12e4a <uarte_nrfx_irq_is_pending+0x1e>
		||
   12e62:	2001      	movs	r0, #1
   12e64:	e7f1      	b.n	12e4a <uarte_nrfx_irq_is_pending+0x1e>

00012e66 <uarte_nrfx_irq_update>:
}
   12e66:	2001      	movs	r0, #1
   12e68:	4770      	bx	lr

00012e6a <uarte_nrfx_irq_callback_set>:
	return dev->data;
   12e6a:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   12e6c:	68d8      	ldr	r0, [r3, #12]
   12e6e:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   12e70:	68db      	ldr	r3, [r3, #12]
   12e72:	605a      	str	r2, [r3, #4]
}
   12e74:	4770      	bx	lr

00012e76 <wait_tx_ready>:
{
   12e76:	b570      	push	{r4, r5, r6, lr}
   12e78:	4606      	mov	r6, r0
   12e7a:	e014      	b.n	12ea6 <wait_tx_ready+0x30>
		if (res) {
   12e7c:	b17d      	cbz	r5, 12e9e <wait_tx_ready+0x28>
	__asm__ volatile(
   12e7e:	f04f 0320 	mov.w	r3, #32
   12e82:	f3ef 8411 	mrs	r4, BASEPRI
   12e86:	f383 8812 	msr	BASEPRI_MAX, r3
   12e8a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12e8e:	4630      	mov	r0, r6
   12e90:	f7ff fed4 	bl	12c3c <is_tx_ready>
   12e94:	b9a0      	cbnz	r0, 12ec0 <wait_tx_ready+0x4a>
	__asm__ volatile(
   12e96:	f384 8811 	msr	BASEPRI, r4
   12e9a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   12e9e:	2021      	movs	r0, #33	; 0x21
   12ea0:	2100      	movs	r1, #0
   12ea2:	f7fc ff77 	bl	fd94 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12ea6:	2464      	movs	r4, #100	; 0x64
   12ea8:	4630      	mov	r0, r6
   12eaa:	f7ff fec7 	bl	12c3c <is_tx_ready>
   12eae:	4605      	mov	r5, r0
   12eb0:	2800      	cmp	r0, #0
   12eb2:	d1e3      	bne.n	12e7c <wait_tx_ready+0x6>
   12eb4:	2001      	movs	r0, #1
   12eb6:	f000 f8a1 	bl	12ffc <nrfx_busy_wait>
   12eba:	3c01      	subs	r4, #1
   12ebc:	d1f4      	bne.n	12ea8 <wait_tx_ready+0x32>
   12ebe:	e7dd      	b.n	12e7c <wait_tx_ready+0x6>
}
   12ec0:	4620      	mov	r0, r4
   12ec2:	bd70      	pop	{r4, r5, r6, pc}

00012ec4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12ec4:	b510      	push	{r4, lr}
   12ec6:	4604      	mov	r4, r0
   12ec8:	2200      	movs	r2, #0
   12eca:	2101      	movs	r1, #1
   12ecc:	2008      	movs	r0, #8
   12ece:	f7f1 f977 	bl	41c0 <z_arm_irq_priority_set>
   12ed2:	2008      	movs	r0, #8
   12ed4:	f7f1 f956 	bl	4184 <arch_irq_enable>
   12ed8:	2101      	movs	r1, #1
   12eda:	4620      	mov	r0, r4
   12edc:	f7f2 fbca 	bl	5674 <uarte_instance_init>
   12ee0:	bd10      	pop	{r4, pc}

00012ee2 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   12ee2:	4770      	bx	lr

00012ee4 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   12ee4:	4770      	bx	lr

00012ee6 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   12ee6:	4770      	bx	lr

00012ee8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   12ee8:	1a40      	subs	r0, r0, r1
}
   12eea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12eee:	4770      	bx	lr

00012ef0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   12ef0:	f100 0350 	add.w	r3, r0, #80	; 0x50
   12ef4:	009b      	lsls	r3, r3, #2
   12ef6:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12ef8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   12efc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   12f00:	2200      	movs	r2, #0
   12f02:	601a      	str	r2, [r3, #0]
   12f04:	681b      	ldr	r3, [r3, #0]
}
   12f06:	4770      	bx	lr

00012f08 <absolute_time_to_cc>:
}
   12f08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12f0c:	4770      	bx	lr

00012f0e <full_int_lock>:
	__asm__ volatile(
   12f0e:	f04f 0320 	mov.w	r3, #32
   12f12:	f3ef 8011 	mrs	r0, BASEPRI
   12f16:	f383 8812 	msr	BASEPRI_MAX, r3
   12f1a:	f3bf 8f6f 	isb	sy
}
   12f1e:	4770      	bx	lr

00012f20 <full_int_unlock>:
	__asm__ volatile(
   12f20:	f380 8811 	msr	BASEPRI, r0
   12f24:	f3bf 8f6f 	isb	sy
}
   12f28:	4770      	bx	lr

00012f2a <set_absolute_alarm>:
{
   12f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f2c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   12f2e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   12f32:	f7f2 fc71 	bl	5818 <get_comparator>
   12f36:	4607      	mov	r7, r0
   12f38:	e019      	b.n	12f6e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   12f3a:	2013      	movs	r0, #19
   12f3c:	f003 f86b 	bl	16016 <z_impl_k_busy_wait>
}
   12f40:	e022      	b.n	12f88 <set_absolute_alarm+0x5e>
		event_clear(chan);
   12f42:	4630      	mov	r0, r6
   12f44:	f7ff ffd4 	bl	12ef0 <event_clear>
		event_enable(chan);
   12f48:	4630      	mov	r0, r6
   12f4a:	f7f2 fc6d 	bl	5828 <event_enable>
		set_comparator(chan, cc_val);
   12f4e:	4629      	mov	r1, r5
   12f50:	4630      	mov	r0, r6
   12f52:	f7f2 fc57 	bl	5804 <set_comparator>
		now2 = counter();
   12f56:	f7f2 fc7b 	bl	5850 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12f5a:	4284      	cmp	r4, r0
   12f5c:	d01e      	beq.n	12f9c <set_absolute_alarm+0x72>
   12f5e:	1c81      	adds	r1, r0, #2
   12f60:	4628      	mov	r0, r5
   12f62:	f7ff ffc1 	bl	12ee8 <counter_sub>
	} while ((now2 != now) &&
   12f66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12f6a:	d917      	bls.n	12f9c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   12f6c:	462f      	mov	r7, r5
		now = counter();
   12f6e:	f7f2 fc6f 	bl	5850 <counter>
   12f72:	4604      	mov	r4, r0
		set_comparator(chan, now);
   12f74:	4601      	mov	r1, r0
   12f76:	4630      	mov	r0, r6
   12f78:	f7f2 fc44 	bl	5804 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   12f7c:	4621      	mov	r1, r4
   12f7e:	4638      	mov	r0, r7
   12f80:	f7ff ffb2 	bl	12ee8 <counter_sub>
   12f84:	2801      	cmp	r0, #1
   12f86:	d0d8      	beq.n	12f3a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12f88:	1ca7      	adds	r7, r4, #2
   12f8a:	4639      	mov	r1, r7
   12f8c:	4628      	mov	r0, r5
   12f8e:	f7ff ffab 	bl	12ee8 <counter_sub>
   12f92:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12f96:	d9d4      	bls.n	12f42 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   12f98:	463d      	mov	r5, r7
   12f9a:	e7d2      	b.n	12f42 <set_absolute_alarm+0x18>
}
   12f9c:	4628      	mov	r0, r5
   12f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012fa0 <compare_set>:
{
   12fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fa2:	b083      	sub	sp, #12
   12fa4:	4604      	mov	r4, r0
   12fa6:	4617      	mov	r7, r2
   12fa8:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   12faa:	f7f2 fc57 	bl	585c <compare_int_lock>
   12fae:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   12fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12fb2:	9301      	str	r3, [sp, #4]
   12fb4:	9b08      	ldr	r3, [sp, #32]
   12fb6:	9300      	str	r3, [sp, #0]
   12fb8:	463a      	mov	r2, r7
   12fba:	462b      	mov	r3, r5
   12fbc:	4620      	mov	r0, r4
   12fbe:	f7f2 fd2b 	bl	5a18 <compare_set_nolocks>
   12fc2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   12fc4:	4631      	mov	r1, r6
   12fc6:	4620      	mov	r0, r4
   12fc8:	f7f2 fca2 	bl	5910 <compare_int_unlock>
}
   12fcc:	4628      	mov	r0, r5
   12fce:	b003      	add	sp, #12
   12fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012fd2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   12fd2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   12fd4:	2000      	movs	r0, #0
   12fd6:	f7f1 fb47 	bl	4668 <sys_arch_reboot>

00012fda <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   12fda:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   12fdc:	f7fd f8e2 	bl	101a4 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   12fe0:	bd08      	pop	{r3, pc}

00012fe2 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   12fe2:	b510      	push	{r4, lr}
   12fe4:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   12fe6:	f7f0 ffc5 	bl	3f74 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   12fea:	f7f1 f899 	bl	4120 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   12fee:	4620      	mov	r0, r4
   12ff0:	f7ff fff3 	bl	12fda <hw_cc3xx_init_internal>
	return res;
}
   12ff4:	bd10      	pop	{r4, pc}

00012ff6 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   12ff6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   12ff8:	4780      	blx	r0
}
   12ffa:	bd08      	pop	{r3, pc}

00012ffc <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   12ffc:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   12ffe:	f003 f80a 	bl	16016 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   13002:	bd08      	pop	{r3, pc}

00013004 <nrfx_clock_enable>:
{
   13004:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   13006:	2005      	movs	r0, #5
   13008:	f7f1 f8cc 	bl	41a4 <arch_irq_is_enabled>
   1300c:	b138      	cbz	r0, 1301e <nrfx_clock_enable+0x1a>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1300e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13012:	2201      	movs	r2, #1
   13014:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   13018:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   1301c:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1301e:	2005      	movs	r0, #5
   13020:	f7f1 f8b0 	bl	4184 <arch_irq_enable>
   13024:	e7f3      	b.n	1300e <nrfx_clock_enable+0xa>

00013026 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   13026:	2301      	movs	r3, #1
   13028:	4083      	lsls	r3, r0
   1302a:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   1302e:	bf14      	ite	ne
   13030:	2001      	movne	r0, #1
   13032:	2000      	moveq	r0, #0
   13034:	4770      	bx	lr

00013036 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   13036:	4770      	bx	lr

00013038 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   13038:	6903      	ldr	r3, [r0, #16]
   1303a:	6183      	str	r3, [r0, #24]
   1303c:	4770      	bx	lr

0001303e <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   1303e:	b510      	push	{r4, lr}
   13040:	4604      	mov	r4, r0
   13042:	f002 fff7 	bl	16034 <_ZdlPv>
   13046:	4620      	mov	r0, r4
   13048:	bd10      	pop	{r4, pc}

0001304a <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   1304a:	b510      	push	{r4, lr}
   1304c:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   1304e:	4413      	add	r3, r2
   13050:	f7f3 f9e8 	bl	6424 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   13054:	4620      	mov	r0, r4
   13056:	bd10      	pop	{r4, pc}

00013058 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   13058:	6880      	ldr	r0, [r0, #8]
   1305a:	4770      	bx	lr

0001305c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   1305c:	b570      	push	{r4, r5, r6, lr}
   1305e:	4604      	mov	r4, r0
   13060:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   13062:	6980      	ldr	r0, [r0, #24]
   13064:	f000 f823 	bl	130ae <_ZN6tflite14AlignPointerUpEPhj>
   13068:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   1306a:	4631      	mov	r1, r6
   1306c:	6960      	ldr	r0, [r4, #20]
   1306e:	f000 f825 	bl	130bc <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   13072:	1b40      	subs	r0, r0, r5
   13074:	bd70      	pop	{r4, r5, r6, pc}

00013076 <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   13076:	4770      	bx	lr

00013078 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   13078:	b508      	push	{r3, lr}
   1307a:	4608      	mov	r0, r1
  Log(format, args);
   1307c:	4611      	mov	r1, r2
   1307e:	f7f3 fa17 	bl	64b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   13082:	2000      	movs	r0, #0
   13084:	bd08      	pop	{r3, pc}

00013086 <_ZN6tflite18MicroErrorReporterD0Ev>:
   13086:	b510      	push	{r4, lr}
   13088:	4604      	mov	r4, r0
   1308a:	f002 ffd3 	bl	16034 <_ZdlPv>
   1308e:	4620      	mov	r0, r4
   13090:	bd10      	pop	{r4, pc}

00013092 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   13092:	b40f      	push	{r0, r1, r2, r3}
   13094:	b500      	push	{lr}
   13096:	b083      	sub	sp, #12
   13098:	a904      	add	r1, sp, #16
   1309a:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   1309e:	9101      	str	r1, [sp, #4]
  Log(format, args);
   130a0:	f7f3 fa06 	bl	64b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   130a4:	b003      	add	sp, #12
   130a6:	f85d eb04 	ldr.w	lr, [sp], #4
   130aa:	b004      	add	sp, #16
   130ac:	4770      	bx	lr

000130ae <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   130ae:	4408      	add	r0, r1
   130b0:	3801      	subs	r0, #1
   130b2:	fbb0 f0f1 	udiv	r0, r0, r1
}
   130b6:	fb01 f000 	mul.w	r0, r1, r0
   130ba:	4770      	bx	lr

000130bc <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   130bc:	fbb0 f0f1 	udiv	r0, r0, r1
}
   130c0:	fb01 f000 	mul.w	r0, r1, r0
   130c4:	4770      	bx	lr

000130c6 <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   130c6:	4408      	add	r0, r1
   130c8:	3801      	subs	r0, #1
   130ca:	fbb0 f0f1 	udiv	r0, r0, r1
}
   130ce:	fb01 f000 	mul.w	r0, r1, r0
   130d2:	4770      	bx	lr

000130d4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   130d4:	3801      	subs	r0, #1
   130d6:	280f      	cmp	r0, #15
   130d8:	d83d      	bhi.n	13156 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   130da:	e8df f000 	tbb	[pc, r0]
   130de:	180c      	.short	0x180c
   130e0:	303c2820 	.word	0x303c2820
   130e4:	08243414 	.word	0x08243414
   130e8:	3c2c3810 	.word	0x3c2c3810
   130ec:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
   130ee:	2302      	movs	r3, #2
   130f0:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   130f2:	2000      	movs	r0, #0
      break;
   130f4:	4770      	bx	lr
      *size = sizeof(float);
   130f6:	2304      	movs	r3, #4
   130f8:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   130fa:	2000      	movs	r0, #0
      break;
   130fc:	4770      	bx	lr
      *size = sizeof(double);
   130fe:	2308      	movs	r3, #8
   13100:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13102:	2000      	movs	r0, #0
      break;
   13104:	4770      	bx	lr
      *size = sizeof(int16_t);
   13106:	2302      	movs	r3, #2
   13108:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1310a:	2000      	movs	r0, #0
      break;
   1310c:	4770      	bx	lr
      *size = sizeof(int32_t);
   1310e:	2304      	movs	r3, #4
   13110:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13112:	2000      	movs	r0, #0
      break;
   13114:	4770      	bx	lr
      *size = sizeof(uint32_t);
   13116:	2304      	movs	r3, #4
   13118:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1311a:	2000      	movs	r0, #0
      break;
   1311c:	4770      	bx	lr
      *size = sizeof(uint8_t);
   1311e:	2301      	movs	r3, #1
   13120:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13122:	2000      	movs	r0, #0
      break;
   13124:	4770      	bx	lr
      *size = sizeof(int8_t);
   13126:	2301      	movs	r3, #1
   13128:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1312a:	2000      	movs	r0, #0
      break;
   1312c:	4770      	bx	lr
      *size = sizeof(int64_t);
   1312e:	2308      	movs	r3, #8
   13130:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13132:	2000      	movs	r0, #0
      break;
   13134:	4770      	bx	lr
      *size = sizeof(uint64_t);
   13136:	2308      	movs	r3, #8
   13138:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1313a:	2000      	movs	r0, #0
      break;
   1313c:	4770      	bx	lr
      *size = sizeof(bool);
   1313e:	2301      	movs	r3, #1
   13140:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13142:	2000      	movs	r0, #0
      break;
   13144:	4770      	bx	lr
      *size = sizeof(float) * 2;
   13146:	2308      	movs	r3, #8
   13148:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1314a:	2000      	movs	r0, #0
      break;
   1314c:	4770      	bx	lr
      *size = sizeof(double) * 2;
   1314e:	2310      	movs	r3, #16
   13150:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13152:	2000      	movs	r0, #0
      break;
   13154:	4770      	bx	lr
  return kTfLiteOk;
   13156:	2001      	movs	r0, #1
}
   13158:	4770      	bx	lr

0001315a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   1315a:	b530      	push	{r4, r5, lr}
   1315c:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   1315e:	b129      	cbz	r1, 1316c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   13160:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   13162:	6842      	ldr	r2, [r0, #4]
   13164:	b1c2      	cbz	r2, 13198 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   13166:	2300      	movs	r3, #0
  int element_count = 1;
   13168:	2401      	movs	r4, #1
   1316a:	e007      	b.n	1317c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   1316c:	f002 ff79 	bl	16062 <abort>
      element_count *= eval_tensor->dims->data[n];
   13170:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   13174:	6849      	ldr	r1, [r1, #4]
   13176:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   1317a:	3301      	adds	r3, #1
   1317c:	6811      	ldr	r1, [r2, #0]
   1317e:	4299      	cmp	r1, r3
   13180:	dcf6      	bgt.n	13170 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   13182:	a901      	add	r1, sp, #4
   13184:	7a00      	ldrb	r0, [r0, #8]
   13186:	f7ff ffa5 	bl	130d4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   1318a:	b918      	cbnz	r0, 13194 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   1318c:	9b01      	ldr	r3, [sp, #4]
   1318e:	fb03 f404 	mul.w	r4, r3, r4
   13192:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   13194:	b003      	add	sp, #12
   13196:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   13198:	2401      	movs	r4, #1
   1319a:	e7f2      	b.n	13182 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

0001319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   1319c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1319e:	6800      	ldr	r0, [r0, #0]
   131a0:	f7fe fddd 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   131a4:	bd08      	pop	{r3, pc}

000131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   131a6:	4770      	bx	lr

000131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   131a8:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   131aa:	6800      	ldr	r0, [r0, #0]
   131ac:	f7ff fffb 	bl	131a6 <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   131b0:	bd08      	pop	{r3, pc}

000131b2 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   131b2:	4770      	bx	lr

000131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   131b4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   131b6:	8800      	ldrh	r0, [r0, #0]
   131b8:	f7ff fffb 	bl	131b2 <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   131bc:	bd08      	pop	{r3, pc}

000131be <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   131be:	4770      	bx	lr

000131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   131c0:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   131c2:	f990 0000 	ldrsb.w	r0, [r0]
   131c6:	f7ff fffa 	bl	131be <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   131ca:	bd08      	pop	{r3, pc}

000131cc <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   131cc:	4770      	bx	lr

000131ce <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   131ce:	3901      	subs	r1, #1
  char* p1 = start;
   131d0:	4603      	mov	r3, r0
  while (p1 < p2) {
   131d2:	4288      	cmp	r0, r1
   131d4:	d20a      	bcs.n	131ec <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   131d6:	b410      	push	{r4}
    char tmp = *p1;
   131d8:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   131da:	780c      	ldrb	r4, [r1, #0]
   131dc:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   131e0:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   131e4:	428b      	cmp	r3, r1
   131e6:	d3f7      	bcc.n	131d8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   131e8:	bc10      	pop	{r4}
   131ea:	4770      	bx	lr
   131ec:	4770      	bx	lr

000131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   131ee:	b410      	push	{r4}
   131f0:	4604      	mov	r4, r0
  while (*current != 0) {
   131f2:	7803      	ldrb	r3, [r0, #0]
   131f4:	b10b      	cbz	r3, 131fa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   131f6:	3001      	adds	r0, #1
  while (*current != 0) {
   131f8:	e7fb      	b.n	131f2 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   131fa:	3901      	subs	r1, #1
   131fc:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   131fe:	7813      	ldrb	r3, [r2, #0]
   13200:	b12b      	cbz	r3, 1320e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   13202:	4288      	cmp	r0, r1
   13204:	d203      	bcs.n	1320e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   13206:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   1320a:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   1320c:	e7f7      	b.n	131fe <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   1320e:	2300      	movs	r3, #0
   13210:	7003      	strb	r3, [r0, #0]
}
   13212:	bc10      	pop	{r4}
   13214:	4770      	bx	lr

00013216 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   13216:	b538      	push	{r3, r4, r5, lr}
   13218:	4605      	mov	r5, r0
   1321a:	4608      	mov	r0, r1
   1321c:	460c      	mov	r4, r1
   1321e:	e008      	b.n	13232 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   13220:	3330      	adds	r3, #48	; 0x30
   13222:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   13224:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   13228:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   1322c:	42aa      	cmp	r2, r5
   1322e:	d809      	bhi.n	13244 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   13230:	461d      	mov	r5, r3
    int32_t digit = i % base;
   13232:	fbb5 f3f2 	udiv	r3, r5, r2
   13236:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   1323a:	2b09      	cmp	r3, #9
   1323c:	ddf0      	ble.n	13220 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   1323e:	3357      	adds	r3, #87	; 0x57
   13240:	b2db      	uxtb	r3, r3
   13242:	e7ef      	b.n	13224 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   13244:	2300      	movs	r3, #0
   13246:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   13248:	4621      	mov	r1, r4
   1324a:	f7ff ffc0 	bl	131ce <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   1324e:	4620      	mov	r0, r4
   13250:	bd38      	pop	{r3, r4, r5, pc}

00013252 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   13252:	b508      	push	{r3, lr}
  if (i < 0) {
   13254:	2800      	cmp	r0, #0
   13256:	db03      	blt.n	13260 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   13258:	220a      	movs	r2, #10
   1325a:	f7ff ffdc 	bl	13216 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   1325e:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   13260:	222d      	movs	r2, #45	; 0x2d
   13262:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   13266:	4240      	negs	r0, r0
   13268:	e7f6      	b.n	13258 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

0001326a <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   1326a:	b530      	push	{r4, r5, lr}
   1326c:	b08d      	sub	sp, #52	; 0x34
   1326e:	4604      	mov	r4, r0
   13270:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   13272:	4669      	mov	r1, sp
   13274:	4610      	mov	r0, r2
   13276:	f7ff ffec 	bl	13252 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   1327a:	466a      	mov	r2, sp
   1327c:	4629      	mov	r1, r5
   1327e:	4620      	mov	r0, r4
   13280:	f7ff ffb5 	bl	131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   13284:	b00d      	add	sp, #52	; 0x34
   13286:	bd30      	pop	{r4, r5, pc}

00013288 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   13288:	b530      	push	{r4, r5, lr}
   1328a:	b08d      	sub	sp, #52	; 0x34
   1328c:	4604      	mov	r4, r0
   1328e:	460d      	mov	r5, r1
   13290:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   13292:	461a      	mov	r2, r3
   13294:	4669      	mov	r1, sp
   13296:	f7ff ffbe 	bl	13216 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   1329a:	466a      	mov	r2, sp
   1329c:	4629      	mov	r1, r5
   1329e:	4620      	mov	r0, r4
   132a0:	f7ff ffa5 	bl	131ee <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   132a4:	b00d      	add	sp, #52	; 0x34
   132a6:	bd30      	pop	{r4, r5, pc}

000132a8 <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   132a8:	b510      	push	{r4, lr}
   132aa:	4604      	mov	r4, r0
   132ac:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   132ae:	4621      	mov	r1, r4
   132b0:	f7ff ffcf 	bl	13252 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   132b4:	1b00      	subs	r0, r0, r4
   132b6:	bd10      	pop	{r4, pc}

000132b8 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   132b8:	b510      	push	{r4, lr}
   132ba:	4604      	mov	r4, r0
   132bc:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   132be:	220a      	movs	r2, #10
   132c0:	4621      	mov	r1, r4
   132c2:	f7ff ffa8 	bl	13216 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   132c6:	1b00      	subs	r0, r0, r4
   132c8:	bd10      	pop	{r4, pc}

000132ca <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   132ca:	b510      	push	{r4, lr}
   132cc:	4604      	mov	r4, r0
   132ce:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   132d0:	2210      	movs	r2, #16
   132d2:	4621      	mov	r1, r4
   132d4:	f7ff ff9f 	bl	13216 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   132d8:	1b00      	subs	r0, r0, r4
   132da:	bd10      	pop	{r4, pc}

000132dc <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   132dc:	b510      	push	{r4, lr}
   132de:	4604      	mov	r4, r0
   132e0:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   132e2:	4621      	mov	r1, r4
   132e4:	f7f3 f97e 	bl	65e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   132e8:	1b00      	subs	r0, r0, r4
   132ea:	bd10      	pop	{r4, pc}

000132ec <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   132ec:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   132ee:	2300      	movs	r3, #0
  int result = 1;
   132f0:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   132f2:	6811      	ldr	r1, [r2, #0]
   132f4:	4299      	cmp	r1, r3
   132f6:	dd06      	ble.n	13306 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   132f8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   132fc:	6849      	ldr	r1, [r1, #4]
   132fe:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   13302:	3301      	adds	r3, #1
   13304:	e7f5      	b.n	132f2 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   13306:	4770      	bx	lr

00013308 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   13308:	b538      	push	{r3, r4, r5, lr}
   1330a:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   1330c:	f7ff ff4c 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13310:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13312:	4628      	mov	r0, r5
   13314:	f7ff ff4e 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13318:	280a      	cmp	r0, #10
   1331a:	d90e      	bls.n	1333a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   1331c:	f105 000a 	add.w	r0, r5, #10
   13320:	f7ff ff48 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   13324:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13326:	b150      	cbz	r0, 1333e <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   13328:	4620      	mov	r0, r4
   1332a:	f7ff ff37 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   1332e:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   13330:	b138      	cbz	r0, 13342 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   13332:	6800      	ldr	r0, [r0, #0]
   13334:	f7fe fd13 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   13338:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1333a:	2000      	movs	r0, #0
   1333c:	e7f2      	b.n	13324 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1333e:	2000      	movs	r0, #0
   13340:	e7f6      	b.n	13330 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   13342:	2000      	movs	r0, #0
   13344:	e7f8      	b.n	13338 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

00013346 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   13346:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   13348:	7800      	ldrb	r0, [r0, #0]
   1334a:	f7ff ff3f 	bl	131cc <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   1334e:	bd08      	pop	{r3, pc}

00013350 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   13350:	4770      	bx	lr

00013352 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   13352:	4770      	bx	lr

00013354 <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   13354:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   13356:	6800      	ldr	r0, [r0, #0]
   13358:	f7ff fffb 	bl	13352 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   1335c:	bd08      	pop	{r3, pc}

0001335e <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   1335e:	4770      	bx	lr

00013360 <_ZN6tflite10MicroGraphD0Ev>:
   13360:	b510      	push	{r4, lr}
   13362:	4604      	mov	r4, r0
   13364:	f002 fe66 	bl	16034 <_ZdlPv>
   13368:	4620      	mov	r0, r4
   1336a:	bd10      	pop	{r4, pc}

0001336c <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   1336c:	6101      	str	r1, [r0, #16]
}
   1336e:	4770      	bx	lr

00013370 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   13370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13374:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   13376:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   1337a:	2700      	movs	r7, #0
   1337c:	e017      	b.n	133ae <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   1337e:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   13380:	2200      	movs	r2, #0
      if (registration->init) {
   13382:	681b      	ldr	r3, [r3, #0]
   13384:	b113      	cbz	r3, 1338c <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   13386:	6870      	ldr	r0, [r6, #4]
   13388:	4798      	blx	r3
        node->user_data =
   1338a:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   1338c:	3501      	adds	r5, #1
   1338e:	4545      	cmp	r5, r8
   13390:	d20c      	bcs.n	133ac <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   13392:	6933      	ldr	r3, [r6, #16]
   13394:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   13398:	242c      	movs	r4, #44	; 0x2c
   1339a:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   1339e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   133a0:	695a      	ldr	r2, [r3, #20]
   133a2:	2a20      	cmp	r2, #32
   133a4:	d1eb      	bne.n	1337e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   133a6:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   133a8:	69e2      	ldr	r2, [r4, #28]
   133aa:	e7ea      	b.n	13382 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   133ac:	3701      	adds	r7, #1
   133ae:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   133b0:	6818      	ldr	r0, [r3, #0]
   133b2:	f7fe fcd4 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   133b6:	4287      	cmp	r7, r0
   133b8:	d207      	bcs.n	133ca <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   133ba:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   133bc:	4639      	mov	r1, r7
   133be:	68b0      	ldr	r0, [r6, #8]
   133c0:	f7f3 fa66 	bl	6890 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   133c4:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   133c6:	2500      	movs	r5, #0
   133c8:	e7e1      	b.n	1338e <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   133ca:	f8c6 9014 	str.w	r9, [r6, #20]
}
   133ce:	2000      	movs	r0, #0
   133d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000133d4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   133d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133d8:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   133da:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   133de:	2600      	movs	r6, #0
   133e0:	e013      	b.n	1340a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   133e2:	3401      	adds	r4, #1
   133e4:	42bc      	cmp	r4, r7
   133e6:	d20f      	bcs.n	13408 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   133e8:	692b      	ldr	r3, [r5, #16]
   133ea:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   133ee:	232c      	movs	r3, #44	; 0x2c
   133f0:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   133f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   133f6:	2a00      	cmp	r2, #0
   133f8:	d0f3      	beq.n	133e2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   133fa:	6852      	ldr	r2, [r2, #4]
   133fc:	2a00      	cmp	r2, #0
   133fe:	d0f0      	beq.n	133e2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   13400:	6919      	ldr	r1, [r3, #16]
   13402:	6868      	ldr	r0, [r5, #4]
   13404:	4790      	blx	r2
   13406:	e7ec      	b.n	133e2 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   13408:	3601      	adds	r6, #1
   1340a:	69ab      	ldr	r3, [r5, #24]
   1340c:	6818      	ldr	r0, [r3, #0]
   1340e:	f7fe fca6 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   13412:	4286      	cmp	r6, r0
   13414:	d207      	bcs.n	13426 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   13416:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   13418:	4631      	mov	r1, r6
   1341a:	68a8      	ldr	r0, [r5, #8]
   1341c:	f7f3 fa38 	bl	6890 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   13420:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   13422:	2400      	movs	r4, #0
   13424:	e7de      	b.n	133e4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   13426:	f8c5 8014 	str.w	r8, [r5, #20]
}
   1342a:	2000      	movs	r0, #0
   1342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013430 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   13430:	b538      	push	{r3, r4, r5, lr}
   13432:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   13434:	4620      	mov	r0, r4
   13436:	f7ff feb7 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   1343a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   1343c:	4628      	mov	r0, r5
   1343e:	f7ff feb9 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13442:	2808      	cmp	r0, #8
   13444:	d90d      	bls.n	13462 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   13446:	f105 0008 	add.w	r0, r5, #8
   1344a:	f7ff feb3 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   1344e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13450:	b148      	cbz	r0, 13466 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   13452:	4620      	mov	r0, r4
   13454:	f7ff fea2 	bl	1319c <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   13458:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   1345a:	6820      	ldr	r0, [r4, #0]
   1345c:	f7fe fc7f 	bl	11d5e <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   13460:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13462:	2000      	movs	r0, #0
   13464:	e7f3      	b.n	1344e <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13466:	2400      	movs	r4, #0
   13468:	e7f7      	b.n	1345a <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

0001346a <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   1346a:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   1346c:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   1346e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   13470:	6803      	ldr	r3, [r0, #0]
   13472:	68db      	ldr	r3, [r3, #12]
   13474:	4798      	blx	r3
}
   13476:	bd08      	pop	{r3, pc}

00013478 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   13478:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   1347a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   1347e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   13482:	4770      	bx	lr

00013484 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   13484:	b570      	push	{r4, r5, r6, lr}
   13486:	b082      	sub	sp, #8
   13488:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   1348a:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   1348c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   1348e:	6802      	ldr	r2, [r0, #0]
   13490:	6855      	ldr	r5, [r2, #4]
   13492:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   13494:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   13498:	6821      	ldr	r1, [r4, #0]
   1349a:	9600      	str	r6, [sp, #0]
   1349c:	47a8      	blx	r5
}
   1349e:	b002      	add	sp, #8
   134a0:	bd70      	pop	{r4, r5, r6, pc}

000134a2 <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   134a2:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   134a4:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   134a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   134aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   134ae:	6858      	ldr	r0, [r3, #4]
   134b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   134b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   134b8:	4770      	bx	lr

000134ba <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   134ba:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   134bc:	336c      	adds	r3, #108	; 0x6c
   134be:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   134c0:	2000      	movs	r0, #0
   134c2:	4770      	bx	lr

000134c4 <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   134c4:	b508      	push	{r3, lr}
   134c6:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   134c8:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   134ca:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   134ce:	6e80      	ldr	r0, [r0, #104]	; 0x68
   134d0:	f7f4 fb7c 	bl	7bcc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   134d4:	bd08      	pop	{r3, pc}

000134d6 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   134d6:	b40e      	push	{r1, r2, r3}
   134d8:	b500      	push	{lr}
   134da:	b082      	sub	sp, #8
   134dc:	aa03      	add	r2, sp, #12
   134de:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   134e2:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   134e4:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   134e6:	6898      	ldr	r0, [r3, #8]
   134e8:	6803      	ldr	r3, [r0, #0]
   134ea:	689b      	ldr	r3, [r3, #8]
   134ec:	4798      	blx	r3
}
   134ee:	b002      	add	sp, #8
   134f0:	f85d eb04 	ldr.w	lr, [sp], #4
   134f4:	b003      	add	sp, #12
   134f6:	4770      	bx	lr

000134f8 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   134f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134fc:	4604      	mov	r4, r0
   134fe:	460d      	mov	r5, r1
   13500:	461e      	mov	r6, r3
   13502:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   13506:	6001      	str	r1, [r0, #0]
   13508:	6042      	str	r2, [r0, #4]
   1350a:	f8c0 8008 	str.w	r8, [r0, #8]
   1350e:	f100 070c 	add.w	r7, r0, #12
   13512:	225c      	movs	r2, #92	; 0x5c
   13514:	2100      	movs	r1, #0
   13516:	4638      	mov	r0, r7
   13518:	f002 fdc9 	bl	160ae <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   1351c:	4642      	mov	r2, r8
   1351e:	9906      	ldr	r1, [sp, #24]
   13520:	4630      	mov	r0, r6
   13522:	f000 f90a 	bl	1373a <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   13526:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   13528:	66a0      	str	r0, [r4, #104]	; 0x68
   1352a:	462a      	mov	r2, r5
   1352c:	4639      	mov	r1, r7
   1352e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   13532:	f7f3 faa3 	bl	6a7c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   13536:	2300      	movs	r3, #0
   13538:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   1353c:	2201      	movs	r2, #1
   1353e:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   13542:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   13546:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1354a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   1354e:	9908      	ldr	r1, [sp, #32]
   13550:	4620      	mov	r0, r4
   13552:	f7f3 fd23 	bl	6f9c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   13556:	4620      	mov	r0, r4
   13558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001355c <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   1355c:	b510      	push	{r4, lr}
   1355e:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   13560:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   13562:	b113      	cbz	r3, 1356a <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   13564:	306c      	adds	r0, #108	; 0x6c
   13566:	f7ff ff35 	bl	133d4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   1356a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1356e:	f7ff fef6 	bl	1335e <_ZN6tflite10MicroGraphD1Ev>
}
   13572:	4620      	mov	r0, r4
   13574:	bd10      	pop	{r4, pc}

00013576 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   13576:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   13578:	306c      	adds	r0, #108	; 0x6c
   1357a:	f7f3 fc1b 	bl	6db4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   1357e:	bd08      	pop	{r3, pc}

00013580 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   13580:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   13582:	6840      	ldr	r0, [r0, #4]
   13584:	6803      	ldr	r3, [r0, #0]
   13586:	68db      	ldr	r3, [r3, #12]
   13588:	4798      	blx	r3
  }
   1358a:	bd08      	pop	{r3, pc}

0001358c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   1358c:	4770      	bx	lr

0001358e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   1358e:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   13590:	6844      	ldr	r4, [r0, #4]
   13592:	6843      	ldr	r3, [r0, #4]
   13594:	6885      	ldr	r5, [r0, #8]
   13596:	441d      	add	r5, r3
   13598:	42a5      	cmp	r5, r4
   1359a:	d91a      	bls.n	135d2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   1359c:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   1359e:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   135a2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   135a6:	6806      	ldr	r6, [r0, #0]
   135a8:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   135ac:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   135b0:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   135b4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   135b8:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   135bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
   135c0:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   135c2:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   135c4:	f04f 33ff 	mov.w	r3, #4294967295
   135c8:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   135ca:	2301      	movs	r3, #1
   135cc:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   135ce:	441c      	add	r4, r3
   135d0:	e7df      	b.n	13592 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   135d2:	2000      	movs	r0, #0
   135d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000135d6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   135d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135da:	b085      	sub	sp, #20
   135dc:	9001      	str	r0, [sp, #4]
   135de:	4688      	mov	r8, r1
   135e0:	4693      	mov	fp, r2
   135e2:	461f      	mov	r7, r3
   135e4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   135e8:	2400      	movs	r4, #0
  int planner_index = 0;
   135ea:	4626      	mov	r6, r4
   135ec:	e000      	b.n	135f0 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   135ee:	3401      	adds	r4, #1
   135f0:	454c      	cmp	r4, r9
   135f2:	d21a      	bcs.n	1362a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   135f4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   135f8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   135fc:	7d2b      	ldrb	r3, [r5, #20]
   135fe:	2b00      	cmp	r3, #0
   13600:	d0f5      	beq.n	135ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   13602:	f04f 33ff 	mov.w	r3, #4294967295
   13606:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   13608:	f8d8 3000 	ldr.w	r3, [r8]
   1360c:	f8d3 a014 	ldr.w	sl, [r3, #20]
   13610:	ab03      	add	r3, sp, #12
   13612:	4632      	mov	r2, r6
   13614:	9901      	ldr	r1, [sp, #4]
   13616:	4640      	mov	r0, r8
   13618:	47d0      	blx	sl
   1361a:	4603      	mov	r3, r0
   1361c:	b930      	cbnz	r0, 1362c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   1361e:	686a      	ldr	r2, [r5, #4]
   13620:	9b03      	ldr	r3, [sp, #12]
   13622:	445b      	add	r3, fp
   13624:	6013      	str	r3, [r2, #0]
      ++planner_index;
   13626:	3601      	adds	r6, #1
   13628:	e7e1      	b.n	135ee <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   1362a:	2300      	movs	r3, #0
}
   1362c:	4618      	mov	r0, r3
   1362e:	b005      	add	sp, #20
   13630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013634 <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   13634:	4770      	bx	lr

00013636 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   13636:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   13638:	6840      	ldr	r0, [r0, #4]
   1363a:	6803      	ldr	r3, [r0, #0]
   1363c:	68db      	ldr	r3, [r3, #12]
   1363e:	2210      	movs	r2, #16
   13640:	4798      	blx	r3
}
   13642:	bd08      	pop	{r3, pc}

00013644 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   13644:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   13646:	6840      	ldr	r0, [r0, #4]
   13648:	6803      	ldr	r3, [r0, #0]
   1364a:	695b      	ldr	r3, [r3, #20]
   1364c:	4798      	blx	r3
}
   1364e:	bd08      	pop	{r3, pc}

00013650 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   13650:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   13652:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   13654:	6803      	ldr	r3, [r0, #0]
   13656:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   13658:	2204      	movs	r2, #4
   1365a:	2140      	movs	r1, #64	; 0x40
   1365c:	4798      	blx	r3
}
   1365e:	bd08      	pop	{r3, pc}

00013660 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   13660:	4770      	bx	lr

00013662 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   13662:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   13664:	b161      	cbz	r1, 13680 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   13666:	4613      	mov	r3, r2
   13668:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   1366a:	6942      	ldr	r2, [r0, #20]
   1366c:	b132      	cbz	r2, 1367c <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   1366e:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   13670:	6802      	ldr	r2, [r0, #0]
   13672:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   13674:	2204      	movs	r2, #4
   13676:	0099      	lsls	r1, r3, #2
   13678:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   1367a:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   1367c:	2000      	movs	r0, #0
   1367e:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   13680:	f002 fcef 	bl	16062 <abort>

00013684 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   13684:	b510      	push	{r4, lr}
   13686:	4604      	mov	r4, r0
   13688:	f002 fcd4 	bl	16034 <_ZdlPv>
   1368c:	4620      	mov	r0, r4
   1368e:	bd10      	pop	{r4, pc}

00013690 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   13690:	b510      	push	{r4, lr}
   13692:	4604      	mov	r4, r0
   13694:	f002 fcce 	bl	16034 <_ZdlPv>
   13698:	4620      	mov	r0, r4
   1369a:	bd10      	pop	{r4, pc}

0001369c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   1369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136a0:	b082      	sub	sp, #8
   136a2:	4682      	mov	sl, r0
   136a4:	4689      	mov	r9, r1
   136a6:	4617      	mov	r7, r2
   136a8:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   136aa:	2500      	movs	r5, #0
   136ac:	e00a      	b.n	136c4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   136ae:	68e1      	ldr	r1, [r4, #12]
   136b0:	9301      	str	r3, [sp, #4]
   136b2:	9100      	str	r1, [sp, #0]
   136b4:	68a3      	ldr	r3, [r4, #8]
   136b6:	4651      	mov	r1, sl
   136b8:	4648      	mov	r0, r9
   136ba:	f000 f8c9 	bl	13850 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   136be:	4603      	mov	r3, r0
   136c0:	bb08      	cbnz	r0, 13706 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   136c2:	3501      	adds	r5, #1
   136c4:	4545      	cmp	r5, r8
   136c6:	d21d      	bcs.n	13704 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   136c8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   136cc:	00e3      	lsls	r3, r4, #3
   136ce:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   136d2:	7d26      	ldrb	r6, [r4, #20]
   136d4:	2e00      	cmp	r6, #0
   136d6:	d0f4      	beq.n	136c2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   136d8:	2110      	movs	r1, #16
   136da:	58f8      	ldr	r0, [r7, r3]
   136dc:	f7ff fcf3 	bl	130c6 <_ZN6tflite11AlignSizeUpEjj>
   136e0:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   136e2:	6923      	ldr	r3, [r4, #16]
   136e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   136e8:	d1e1      	bne.n	136ae <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   136ea:	f8d9 3000 	ldr.w	r3, [r9]
   136ee:	689e      	ldr	r6, [r3, #8]
   136f0:	68e3      	ldr	r3, [r4, #12]
   136f2:	9300      	str	r3, [sp, #0]
   136f4:	68a3      	ldr	r3, [r4, #8]
   136f6:	4651      	mov	r1, sl
   136f8:	4648      	mov	r0, r9
   136fa:	47b0      	blx	r6
   136fc:	4603      	mov	r3, r0
   136fe:	2800      	cmp	r0, #0
   13700:	d0df      	beq.n	136c2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   13702:	e000      	b.n	13706 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   13704:	2300      	movs	r3, #0
}
   13706:	4618      	mov	r0, r3
   13708:	b002      	add	sp, #8
   1370a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001370e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   1370e:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   13710:	b178      	cbz	r0, 13732 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   13712:	460c      	mov	r4, r1
   13714:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   13716:	b171      	cbz	r1, 13736 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   13718:	6803      	ldr	r3, [r0, #0]
   1371a:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   1371c:	2204      	movs	r2, #4
   1371e:	211c      	movs	r1, #28
   13720:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   13722:	4606      	mov	r6, r0
   13724:	b118      	cbz	r0, 1372e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   13726:	4622      	mov	r2, r4
   13728:	4629      	mov	r1, r5
   1372a:	f7f4 fa41 	bl	7bb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   1372e:	4630      	mov	r0, r6
   13730:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   13732:	f002 fc96 	bl	16062 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   13736:	f002 fc94 	bl	16062 <abort>

0001373a <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   1373a:	b570      	push	{r4, r5, r6, lr}
   1373c:	4604      	mov	r4, r0
   1373e:	460e      	mov	r6, r1
   13740:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   13742:	2110      	movs	r1, #16
   13744:	f7ff fcb3 	bl	130ae <_ZN6tflite14AlignPointerUpEPhj>
   13748:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   1374a:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   1374c:	1a22      	subs	r2, r4, r0
   1374e:	4628      	mov	r0, r5
   13750:	f7f2 fe76 	bl	6440 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   13754:	4629      	mov	r1, r5
   13756:	f7ff ffda 	bl	1370e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   1375a:	bd70      	pop	{r4, r5, r6, pc}

0001375c <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   1375c:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   1375e:	2300      	movs	r3, #0
   13760:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   13762:	6840      	ldr	r0, [r0, #4]
   13764:	6803      	ldr	r3, [r0, #0]
   13766:	689b      	ldr	r3, [r3, #8]
   13768:	2204      	movs	r2, #4
   1376a:	2160      	movs	r1, #96	; 0x60
   1376c:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   1376e:	bd08      	pop	{r3, pc}

00013770 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   13770:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   13772:	6840      	ldr	r0, [r0, #4]
   13774:	f7ff fc70 	bl	13058 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   13778:	2104      	movs	r1, #4
   1377a:	f7ff fc98 	bl	130ae <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   1377e:	bd08      	pop	{r3, pc}

00013780 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   13780:	b570      	push	{r4, r5, r6, lr}
   13782:	4605      	mov	r5, r0
   13784:	460e      	mov	r6, r1
  ResetTempAllocations();
   13786:	6803      	ldr	r3, [r0, #0]
   13788:	689b      	ldr	r3, [r3, #8]
   1378a:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   1378c:	4628      	mov	r0, r5
   1378e:	f7ff ffef 	bl	13770 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   13792:	2300      	movs	r3, #0
   13794:	e000      	b.n	13798 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   13796:	3301      	adds	r3, #1
   13798:	6969      	ldr	r1, [r5, #20]
   1379a:	4299      	cmp	r1, r3
   1379c:	d907      	bls.n	137ae <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   1379e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   137a2:	6854      	ldr	r4, [r2, #4]
   137a4:	f1b4 3fff 	cmp.w	r4, #4294967295
   137a8:	d1f5      	bne.n	13796 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   137aa:	6056      	str	r6, [r2, #4]
   137ac:	e7f3      	b.n	13796 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   137ae:	6868      	ldr	r0, [r5, #4]
   137b0:	6803      	ldr	r3, [r0, #0]
   137b2:	689b      	ldr	r3, [r3, #8]
   137b4:	310c      	adds	r1, #12
   137b6:	2204      	movs	r2, #4
   137b8:	00c9      	lsls	r1, r1, #3
   137ba:	4798      	blx	r3
}
   137bc:	bd70      	pop	{r4, r5, r6, pc}

000137be <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   137be:	6880      	ldr	r0, [r0, #8]
   137c0:	4770      	bx	lr

000137c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   137c2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   137c4:	b119      	cbz	r1, 137ce <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   137c6:	b122      	cbz	r2, 137d2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   137c8:	601a      	str	r2, [r3, #0]
}
   137ca:	2000      	movs	r0, #0
   137cc:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   137ce:	f002 fc48 	bl	16062 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   137d2:	f002 fc46 	bl	16062 <abort>

000137d6 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   137d6:	b508      	push	{r3, lr}
   137d8:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   137da:	460a      	mov	r2, r1
   137dc:	68c1      	ldr	r1, [r0, #12]
   137de:	6840      	ldr	r0, [r0, #4]
   137e0:	f7ff ffef 	bl	137c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   137e4:	bd08      	pop	{r3, pc}

000137e6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   137e6:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   137e8:	b119      	cbz	r1, 137f2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   137ea:	b122      	cbz	r2, 137f6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   137ec:	601a      	str	r2, [r3, #0]
}
   137ee:	2000      	movs	r0, #0
   137f0:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   137f2:	f002 fc36 	bl	16062 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   137f6:	f002 fc34 	bl	16062 <abort>

000137fa <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   137fa:	4770      	bx	lr

000137fc <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   137fc:	6880      	ldr	r0, [r0, #8]
   137fe:	4770      	bx	lr

00013800 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   13800:	b510      	push	{r4, lr}
   13802:	4604      	mov	r4, r0
}
   13804:	f002 fc16 	bl	16034 <_ZdlPv>
   13808:	4620      	mov	r0, r4
   1380a:	bd10      	pop	{r4, pc}

0001380c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   1380c:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   1380e:	2301      	movs	r3, #1
    any_swapped = false;
   13810:	2700      	movs	r7, #0
   13812:	e000      	b.n	13816 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   13814:	3301      	adds	r3, #1
   13816:	4293      	cmp	r3, r2
   13818:	da16      	bge.n	13848 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   1381a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1381e:	3c01      	subs	r4, #1
   13820:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   13824:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   13828:	42b5      	cmp	r5, r6
   1382a:	daf3      	bge.n	13814 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   1382c:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   13830:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   13834:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   13838:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   1383c:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   13840:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   13844:	2701      	movs	r7, #1
   13846:	e7e5      	b.n	13814 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   13848:	2f00      	cmp	r7, #0
   1384a:	d1e0      	bne.n	1380e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   1384c:	bcf0      	pop	{r4, r5, r6, r7}
   1384e:	4770      	bx	lr

00013850 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   13850:	b570      	push	{r4, r5, r6, lr}
   13852:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   13854:	68c5      	ldr	r5, [r0, #12]
   13856:	6886      	ldr	r6, [r0, #8]
   13858:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   1385c:	6804      	ldr	r4, [r0, #0]
   1385e:	68a4      	ldr	r4, [r4, #8]
   13860:	9e06      	ldr	r6, [sp, #24]
   13862:	9600      	str	r6, [sp, #0]
   13864:	47a0      	blx	r4
   13866:	b918      	cbnz	r0, 13870 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   13868:	9b07      	ldr	r3, [sp, #28]
   1386a:	606b      	str	r3, [r5, #4]
}
   1386c:	b002      	add	sp, #8
   1386e:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   13870:	2001      	movs	r0, #1
   13872:	e7fb      	b.n	1386c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

00013874 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   13874:	68c0      	ldr	r0, [r0, #12]
   13876:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   13878:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   1387c:	6888      	ldr	r0, [r1, #8]
   1387e:	4298      	cmp	r0, r3
   13880:	dc04      	bgt.n	1388c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   13882:	68cb      	ldr	r3, [r1, #12]
   13884:	4293      	cmp	r3, r2
   13886:	db03      	blt.n	13890 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   13888:	2001      	movs	r0, #1
   1388a:	4770      	bx	lr
    return false;
   1388c:	2000      	movs	r0, #0
   1388e:	4770      	bx	lr
    return false;
   13890:	2000      	movs	r0, #0
}
   13892:	4770      	bx	lr

00013894 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   13894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13896:	4605      	mov	r5, r0
   13898:	4616      	mov	r6, r2
   1389a:	461f      	mov	r7, r3
  if (start == nullptr) {
   1389c:	b1c9      	cbz	r1, 138d2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   1389e:	688b      	ldr	r3, [r1, #8]
   138a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   138a4:	d01c      	beq.n	138e0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   138a6:	6984      	ldr	r4, [r0, #24]
   138a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   138ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   138b0:	463b      	mov	r3, r7
   138b2:	4632      	mov	r2, r6
   138b4:	4621      	mov	r1, r4
   138b6:	4628      	mov	r0, r5
   138b8:	f7ff ffdc 	bl	13874 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   138bc:	b998      	cbnz	r0, 138e6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   138be:	68a4      	ldr	r4, [r4, #8]
   138c0:	f1b4 3fff 	cmp.w	r4, #4294967295
   138c4:	d00e      	beq.n	138e4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   138c6:	69a9      	ldr	r1, [r5, #24]
   138c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   138cc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   138d0:	e7ee      	b.n	138b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   138d2:	6984      	ldr	r4, [r0, #24]
   138d4:	6a03      	ldr	r3, [r0, #32]
   138d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   138da:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   138de:	e7e7      	b.n	138b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   138e0:	2400      	movs	r4, #0
   138e2:	e000      	b.n	138e6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   138e4:	2400      	movs	r4, #0
}
   138e6:	4620      	mov	r0, r4
   138e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000138ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   138ea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   138ee:	2b00      	cmp	r3, #0
   138f0:	f000 80d5 	beq.w	13a9e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   138f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f8:	b083      	sub	sp, #12
   138fa:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   138fc:	6886      	ldr	r6, [r0, #8]
   138fe:	2e00      	cmp	r6, #0
   13900:	f000 80ca 	beq.w	13a98 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   13904:	2000      	movs	r0, #0
   13906:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   1390a:	4603      	mov	r3, r0
   1390c:	e00e      	b.n	1392c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   1390e:	6925      	ldr	r5, [r4, #16]
   13910:	5852      	ldr	r2, [r2, r1]
   13912:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   13916:	6962      	ldr	r2, [r4, #20]
   13918:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   1391c:	68e2      	ldr	r2, [r4, #12]
   1391e:	4411      	add	r1, r2
   13920:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13922:	6849      	ldr	r1, [r1, #4]
   13924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   13928:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   1392a:	3301      	adds	r3, #1
   1392c:	68a2      	ldr	r2, [r4, #8]
   1392e:	429a      	cmp	r2, r3
   13930:	dd15      	ble.n	1395e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   13932:	68e2      	ldr	r2, [r4, #12]
   13934:	0119      	lsls	r1, r3, #4
   13936:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   1393a:	686d      	ldr	r5, [r5, #4]
   1393c:	f1b5 3fff 	cmp.w	r5, #4294967295
   13940:	d1e5      	bne.n	1390e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   13942:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   13944:	6925      	ldr	r5, [r4, #16]
   13946:	5852      	ldr	r2, [r2, r1]
   13948:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   1394c:	6962      	ldr	r2, [r4, #20]
   1394e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   13952:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13954:	f04f 31ff 	mov.w	r1, #4294967295
   13958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   1395c:	e7e5      	b.n	1392a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   1395e:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   13960:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   13962:	1a12      	subs	r2, r2, r0
   13964:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   13968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1396c:	f7ff ff4e 	bl	1380c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   13970:	2300      	movs	r3, #0
   13972:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   13974:	2301      	movs	r3, #1
   13976:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   13978:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   1397c:	f04f 33ff 	mov.w	r3, #4294967295
   13980:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   13984:	6963      	ldr	r3, [r4, #20]
   13986:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   13988:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   1398c:	68e2      	ldr	r2, [r4, #12]
   1398e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   13992:	6852      	ldr	r2, [r2, #4]
   13994:	f1b2 3fff 	cmp.w	r2, #4294967295
   13998:	d007      	beq.n	139aa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   1399a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139a0:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   139a4:	f04f 0901 	mov.w	r9, #1
   139a8:	e036      	b.n	13a18 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   139aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   139ac:	2100      	movs	r1, #0
   139ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   139b2:	e7f2      	b.n	1399a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   139b4:	2100      	movs	r1, #0
    int candidate_offset = 0;
   139b6:	460d      	mov	r5, r1
   139b8:	f8cd a000 	str.w	sl, [sp]
   139bc:	f8cd 9004 	str.w	r9, [sp, #4]
   139c0:	4681      	mov	r9, r0
   139c2:	4692      	mov	sl, r2
   139c4:	e004      	b.n	139d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   139c6:	b1d9      	cbz	r1, 13a00 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   139c8:	680b      	ldr	r3, [r1, #0]
   139ca:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   139cc:	459b      	cmp	fp, r3
   139ce:	dd12      	ble.n	139f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   139d0:	460e      	mov	r6, r1
   139d2:	4653      	mov	r3, sl
   139d4:	464a      	mov	r2, r9
   139d6:	4620      	mov	r0, r4
   139d8:	f7ff ff5c 	bl	13894 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   139dc:	4601      	mov	r1, r0
        if (prior_entry) {
   139de:	2e00      	cmp	r6, #0
   139e0:	d0f1      	beq.n	139c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   139e2:	6873      	ldr	r3, [r6, #4]
   139e4:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   139e6:	6833      	ldr	r3, [r6, #0]
   139e8:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   139ec:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   139ee:	429d      	cmp	r5, r3
   139f0:	dae9      	bge.n	139c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   139f2:	461d      	mov	r5, r3
   139f4:	e7e7      	b.n	139c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   139f6:	f8dd a000 	ldr.w	sl, [sp]
   139fa:	f8dd 9004 	ldr.w	r9, [sp, #4]
   139fe:	e01f      	b.n	13a40 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   13a00:	f8dd a000 	ldr.w	sl, [sp]
   13a04:	f8dd 9004 	ldr.w	r9, [sp, #4]
   13a08:	e01a      	b.n	13a40 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   13a0a:	6a23      	ldr	r3, [r4, #32]
   13a0c:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   13a10:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   13a12:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   13a14:	f109 0901 	add.w	r9, r9, #1
   13a18:	68a3      	ldr	r3, [r4, #8]
   13a1a:	454b      	cmp	r3, r9
   13a1c:	dd3c      	ble.n	13a98 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   13a1e:	6963      	ldr	r3, [r4, #20]
   13a20:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   13a24:	f8d4 800c 	ldr.w	r8, [r4, #12]
   13a28:	013a      	lsls	r2, r7, #4
   13a2a:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   13a2e:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   13a32:	689a      	ldr	r2, [r3, #8]
   13a34:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   13a36:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   13a38:	685d      	ldr	r5, [r3, #4]
   13a3a:	f1b5 3fff 	cmp.w	r5, #4294967295
   13a3e:	d0b9      	beq.n	139b4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   13a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13a42:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   13a46:	69a2      	ldr	r2, [r4, #24]
   13a48:	69e3      	ldr	r3, [r4, #28]
   13a4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a4e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   13a52:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   13a56:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   13a5a:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   13a5c:	1c7b      	adds	r3, r7, #1
   13a5e:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   13a60:	f8da 3000 	ldr.w	r3, [sl]
   13a64:	42ab      	cmp	r3, r5
   13a66:	dcd0      	bgt.n	13a0a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   13a68:	4650      	mov	r0, sl
   13a6a:	e000      	b.n	13a6e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   13a6c:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   13a6e:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   13a70:	f1b3 3fff 	cmp.w	r3, #4294967295
   13a74:	d00c      	beq.n	13a90 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   13a76:	69a2      	ldr	r2, [r4, #24]
   13a78:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   13a7c:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   13a80:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   13a84:	42aa      	cmp	r2, r5
   13a86:	ddf1      	ble.n	13a6c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   13a88:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   13a8c:	6087      	str	r7, [r0, #8]
          break;
   13a8e:	e7c1      	b.n	13a14 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   13a90:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   13a92:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   13a96:	e7bd      	b.n	13a14 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   13a98:	b003      	add	sp, #12
   13a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a9e:	4770      	bx	lr

00013aa0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   13aa0:	b570      	push	{r4, r5, r6, lr}
   13aa2:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   13aa4:	f7ff ff21 	bl	138ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   13aa8:	68a3      	ldr	r3, [r4, #8]
   13aaa:	b1d3      	cbz	r3, 13ae2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   13aac:	69a6      	ldr	r6, [r4, #24]
   13aae:	6a23      	ldr	r3, [r4, #32]
   13ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13ab4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   13ab8:	2000      	movs	r0, #0
   13aba:	e007      	b.n	13acc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   13abc:	689b      	ldr	r3, [r3, #8]
   13abe:	f1b3 3fff 	cmp.w	r3, #4294967295
   13ac2:	d00f      	beq.n	13ae4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   13ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13ac8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   13acc:	b153      	cbz	r3, 13ae4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   13ace:	68e5      	ldr	r5, [r4, #12]
   13ad0:	685a      	ldr	r2, [r3, #4]
   13ad2:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   13ad4:	681a      	ldr	r2, [r3, #0]
   13ad6:	5869      	ldr	r1, [r5, r1]
   13ad8:	440a      	add	r2, r1
    if (current_size > max_size) {
   13ada:	4290      	cmp	r0, r2
   13adc:	d2ee      	bcs.n	13abc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   13ade:	4610      	mov	r0, r2
   13ae0:	e7ec      	b.n	13abc <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   13ae2:	2000      	movs	r0, #0
}
   13ae4:	bd70      	pop	{r4, r5, r6, pc}

00013ae6 <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   13ae6:	3001      	adds	r0, #1
}
   13ae8:	0080      	lsls	r0, r0, #2
   13aea:	4770      	bx	lr

00013aec <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   13aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13af0:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   13af2:	2401      	movs	r4, #1
   13af4:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   13af8:	1a12      	subs	r2, r2, r0
   13afa:	f1a2 0120 	sub.w	r1, r2, #32
   13afe:	f1c2 0320 	rsb	r3, r2, #32
   13b02:	fa04 f101 	lsl.w	r1, r4, r1
   13b06:	fa24 f303 	lsr.w	r3, r4, r3
   13b0a:	ea41 0703 	orr.w	r7, r1, r3
   13b0e:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   13b12:	f10c 30ff 	add.w	r0, ip, #4294967295
   13b16:	f7ec fc71 	bl	3fc <__aeabi_i2d>
   13b1a:	4680      	mov	r8, r0
   13b1c:	4689      	mov	r9, r1
   13b1e:	4628      	mov	r0, r5
   13b20:	4639      	mov	r1, r7
   13b22:	f7ec fca7 	bl	474 <__aeabi_l2d>
   13b26:	4602      	mov	r2, r0
   13b28:	460b      	mov	r3, r1
   13b2a:	4640      	mov	r0, r8
   13b2c:	4649      	mov	r1, r9
   13b2e:	f7ec fccf 	bl	4d0 <__aeabi_dmul>
   13b32:	4680      	mov	r8, r0
   13b34:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   13b36:	f1a6 0120 	sub.w	r1, r6, #32
   13b3a:	f1c6 0320 	rsb	r3, r6, #32
   13b3e:	fa04 f101 	lsl.w	r1, r4, r1
   13b42:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   13b46:	fa04 f006 	lsl.w	r0, r4, r6
   13b4a:	4319      	orrs	r1, r3
   13b4c:	f7ec fc92 	bl	474 <__aeabi_l2d>
   13b50:	4602      	mov	r2, r0
   13b52:	460b      	mov	r3, r1
  const double max_input_rescaled =
   13b54:	4640      	mov	r0, r8
   13b56:	4649      	mov	r1, r9
   13b58:	f7ec fde4 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   13b5c:	f7ed fee4 	bl	1928 <floor>
   13b60:	f7ec ff50 	bl	a04 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   13b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   13b68:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13b6a:	680b      	ldr	r3, [r1, #0]
   13b6c:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13b70:	2a00      	cmp	r2, #0
   13b72:	db10      	blt.n	13b96 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   13b74:	428a      	cmp	r2, r1
   13b76:	da10      	bge.n	13b9a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13b7c:	f1b1 3fff 	cmp.w	r1, #4294967295
   13b80:	d00d      	beq.n	13b9e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13b82:	2900      	cmp	r1, #0
   13b84:	db0d      	blt.n	13ba2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13b86:	6883      	ldr	r3, [r0, #8]
   13b88:	b113      	cbz	r3, 13b90 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13b8a:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13b8e:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13b90:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13b92:	4798      	blx	r3
   13b94:	e7fb      	b.n	13b8e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13b96:	2000      	movs	r0, #0
   13b98:	e7f9      	b.n	13b8e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13b9a:	2000      	movs	r0, #0
   13b9c:	e7f7      	b.n	13b8e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13b9e:	2000      	movs	r0, #0
   13ba0:	e7f5      	b.n	13b8e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13ba2:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   13ba4:	e7f3      	b.n	13b8e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00013ba6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   13ba6:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13ba8:	684b      	ldr	r3, [r1, #4]
   13baa:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13bae:	2a00      	cmp	r2, #0
   13bb0:	db10      	blt.n	13bd4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   13bb2:	4291      	cmp	r1, r2
   13bb4:	dd10      	ble.n	13bd8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13bba:	f1b1 3fff 	cmp.w	r1, #4294967295
   13bbe:	d00d      	beq.n	13bdc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13bc0:	2900      	cmp	r1, #0
   13bc2:	db0d      	blt.n	13be0 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13bc4:	6883      	ldr	r3, [r0, #8]
   13bc6:	b113      	cbz	r3, 13bce <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13bc8:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13bcc:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13bce:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13bd0:	4798      	blx	r3
   13bd2:	e7fb      	b.n	13bcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13bd4:	2000      	movs	r0, #0
   13bd6:	e7f9      	b.n	13bcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13bd8:	2000      	movs	r0, #0
   13bda:	e7f7      	b.n	13bcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13bdc:	2000      	movs	r0, #0
   13bde:	e7f5      	b.n	13bcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13be0:	2000      	movs	r0, #0
   13be2:	e7f3      	b.n	13bcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00013be4 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   13be4:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   13be6:	f7ff ffbf 	bl	13b68 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   13bea:	bd08      	pop	{r3, pc}

00013bec <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   13bec:	1e43      	subs	r3, r0, #1
   13bee:	2b04      	cmp	r3, #4
   13bf0:	d804      	bhi.n	13bfc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   13bf2:	e8df f003 	tbb	[pc, r3]
   13bf6:	0404      	.short	0x0404
   13bf8:	0404      	.short	0x0404
   13bfa:	04          	.byte	0x04
   13bfb:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   13bfc:	2000      	movs	r0, #0
}
   13bfe:	4770      	bx	lr

00013c00 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   13c00:	b118      	cbz	r0, 13c0a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   13c02:	2801      	cmp	r0, #1
   13c04:	d103      	bne.n	13c0e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   13c06:	2002      	movs	r0, #2
   13c08:	4770      	bx	lr
  switch (padding) {
   13c0a:	2001      	movs	r0, #1
   13c0c:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   13c0e:	2000      	movs	r0, #0
}
   13c10:	4770      	bx	lr

00013c12 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   13c12:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   13c14:	b118      	cbz	r0, 13c1e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   13c16:	b121      	cbz	r1, 13c22 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   13c18:	b12a      	cbz	r2, 13c26 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   13c1a:	b133      	cbz	r3, 13c2a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   13c1c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   13c1e:	f002 fa20 	bl	16062 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   13c22:	f002 fa1e 	bl	16062 <abort>
  TFLITE_DCHECK(allocator != nullptr);
   13c26:	f002 fa1c 	bl	16062 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   13c2a:	f002 fa1a 	bl	16062 <abort>

00013c2e <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   13c2e:	b40e      	push	{r1, r2, r3}
   13c30:	b500      	push	{lr}
   13c32:	b082      	sub	sp, #8
   13c34:	aa03      	add	r2, sp, #12
   13c36:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13c3a:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13c3c:	6803      	ldr	r3, [r0, #0]
   13c3e:	689b      	ldr	r3, [r3, #8]
   13c40:	4798      	blx	r3
  va_end(args);
  return code;
}
   13c42:	b002      	add	sp, #8
   13c44:	f85d eb04 	ldr.w	lr, [sp], #4
   13c48:	b003      	add	sp, #12
   13c4a:	4770      	bx	lr

00013c4c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   13c4c:	b40c      	push	{r2, r3}
   13c4e:	b500      	push	{lr}
   13c50:	b083      	sub	sp, #12
   13c52:	aa04      	add	r2, sp, #16
   13c54:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13c58:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13c5a:	6803      	ldr	r3, [r0, #0]
   13c5c:	689b      	ldr	r3, [r3, #8]
   13c5e:	4798      	blx	r3
  va_end(args);
  return code;
}
   13c60:	b003      	add	sp, #12
   13c62:	f85d eb04 	ldr.w	lr, [sp], #4
   13c66:	b002      	add	sp, #8
   13c68:	4770      	bx	lr

00013c6a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   13c6a:	b570      	push	{r4, r5, r6, lr}
   13c6c:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   13c6e:	b368      	cbz	r0, 13ccc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   13c70:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   13c72:	f7ff fa99 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13c76:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13c78:	4628      	mov	r0, r5
   13c7a:	f7ff fa9b 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13c7e:	280a      	cmp	r0, #10
   13c80:	d926      	bls.n	13cd0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   13c82:	f105 000a 	add.w	r0, r5, #10
   13c86:	f7ff fa95 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13c8a:	b318      	cbz	r0, 13cd4 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   13c8c:	4420      	add	r0, r4
   13c8e:	f7ff fa8b 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   13c92:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   13c94:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   13c98:	4620      	mov	r0, r4
   13c9a:	f7ff fa85 	bl	131a8 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13c9e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13ca0:	4630      	mov	r0, r6
   13ca2:	f7ff fa87 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13ca6:	2804      	cmp	r0, #4
   13ca8:	d916      	bls.n	13cd8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   13caa:	1d30      	adds	r0, r6, #4
   13cac:	f7ff fa82 	bl	131b4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13cb0:	b1a0      	cbz	r0, 13cdc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   13cb2:	4420      	add	r0, r4
   13cb4:	f7ff fa84 	bl	131c0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   13cb8:	b2c0      	uxtb	r0, r0
   13cba:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   13cbe:	42a8      	cmp	r0, r5
   13cc0:	d80e      	bhi.n	13ce0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   13cc2:	f10d 0306 	add.w	r3, sp, #6
}
   13cc6:	7818      	ldrb	r0, [r3, #0]
   13cc8:	b002      	add	sp, #8
   13cca:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   13ccc:	f002 f9c9 	bl	16062 <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13cd0:	2000      	movs	r0, #0
   13cd2:	e7da      	b.n	13c8a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13cd4:	2000      	movs	r0, #0
   13cd6:	e7dc      	b.n	13c92 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13cd8:	2000      	movs	r0, #0
   13cda:	e7e9      	b.n	13cb0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13cdc:	2000      	movs	r0, #0
   13cde:	e7eb      	b.n	13cb8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   13ce0:	f10d 0307 	add.w	r3, sp, #7
   13ce4:	e7ef      	b.n	13cc6 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00013ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13ce6:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13ce8:	b108      	cbz	r0, 13cee <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   13cea:	6800      	ldr	r0, [r0, #0]
   13cec:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13cee:	f002 f9b8 	bl	16062 <abort>

00013cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13cf2:	b108      	cbz	r0, 13cf8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   13cf4:	6800      	ldr	r0, [r0, #0]
   13cf6:	4770      	bx	lr
}
   13cf8:	4770      	bx	lr

00013cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13cfa:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13cfc:	b108      	cbz	r0, 13d02 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13cfe:	6800      	ldr	r0, [r0, #0]
   13d00:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13d02:	f002 f9ae 	bl	16062 <abort>

00013d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13d06:	b108      	cbz	r0, 13d0c <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   13d08:	6800      	ldr	r0, [r0, #0]
   13d0a:	4770      	bx	lr
}
   13d0c:	4770      	bx	lr

00013d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   13d0e:	4770      	bx	lr

00013d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   13d10:	4008      	ands	r0, r1
   13d12:	4770      	bx	lr

00013d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   13d14:	4108      	asrs	r0, r1
   13d16:	4770      	bx	lr

00013d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   13d18:	4408      	add	r0, r1
   13d1a:	4770      	bx	lr

00013d1c <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   13d1c:	43c0      	mvns	r0, r0
   13d1e:	4770      	bx	lr

00013d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   13d20:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   13d22:	b110      	cbz	r0, 13d2a <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   13d24:	2000      	movs	r0, #0
   13d26:	f7ff fff9 	bl	13d1c <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   13d2a:	bd08      	pop	{r3, pc}

00013d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   13d2c:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   13d2e:	4288      	cmp	r0, r1
   13d30:	bfac      	ite	ge
   13d32:	2000      	movge	r0, #0
   13d34:	2001      	movlt	r0, #1
   13d36:	f7ff fff3 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13d3a:	bd08      	pop	{r3, pc}

00013d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   13d3c:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   13d3e:	4288      	cmp	r0, r1
   13d40:	bfd4      	ite	le
   13d42:	2000      	movle	r0, #0
   13d44:	2001      	movgt	r0, #1
   13d46:	f7ff ffeb 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13d4a:	bd08      	pop	{r3, pc}

00013d4c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13d4c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13d4e:	b108      	cbz	r0, 13d54 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13d50:	6800      	ldr	r0, [r0, #0]
   13d52:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13d54:	f002 f985 	bl	16062 <abort>

00013d58 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13d58:	b108      	cbz	r0, 13d5e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   13d5a:	6800      	ldr	r0, [r0, #0]
   13d5c:	4770      	bx	lr
}
   13d5e:	4770      	bx	lr

00013d60 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13d60:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13d62:	b108      	cbz	r0, 13d68 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13d64:	6800      	ldr	r0, [r0, #0]
   13d66:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13d68:	f002 f97b 	bl	16062 <abort>

00013d6c <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13d6c:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13d6e:	b108      	cbz	r0, 13d74 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13d70:	6800      	ldr	r0, [r0, #0]
   13d72:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13d74:	f002 f975 	bl	16062 <abort>

00013d78 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   13d78:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13d7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13d7c:	b113      	cbz	r3, 13d84 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   13d7e:	2134      	movs	r1, #52	; 0x34
   13d80:	4798      	blx	r3
}
   13d82:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13d84:	f002 f96d 	bl	16062 <abort>

00013d88 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   13d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d8c:	b0a3      	sub	sp, #140	; 0x8c
   13d8e:	9217      	str	r2, [sp, #92]	; 0x5c
   13d90:	461e      	mov	r6, r3
   13d92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   13d94:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   13d96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   13d9a:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   13d9c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   13da0:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   13da2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   13da6:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   13da8:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   13dac:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   13dae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   13db2:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   13db4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   13db8:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   13dba:	6b02      	ldr	r2, [r0, #48]	; 0x30
   13dbc:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   13dbe:	6b42      	ldr	r2, [r0, #52]	; 0x34
   13dc0:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   13dc2:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13dc4:	2a04      	cmp	r2, #4
   13dc6:	d173      	bne.n	13eb0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   13dc8:	468b      	mov	fp, r1
   13dca:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13dcc:	2a04      	cmp	r2, #4
   13dce:	d171      	bne.n	13eb4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   13dd0:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13dd2:	2a04      	cmp	r2, #4
   13dd4:	d170      	bne.n	13eb8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   13dd6:	680a      	ldr	r2, [r1, #0]
   13dd8:	2a00      	cmp	r2, #0
   13dda:	dd6f      	ble.n	13ebc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ddc:	2a05      	cmp	r2, #5
   13dde:	dd6f      	ble.n	13ec0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   13de0:	684a      	ldr	r2, [r1, #4]
   13de2:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13de4:	6839      	ldr	r1, [r7, #0]
   13de6:	2900      	cmp	r1, #0
   13de8:	dd6c      	ble.n	13ec4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13dea:	2905      	cmp	r1, #5
   13dec:	dd6c      	ble.n	13ec8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   13dee:	6879      	ldr	r1, [r7, #4]
   13df0:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13df2:	4291      	cmp	r1, r2
   13df4:	d16a      	bne.n	13ecc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13df6:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   13df8:	6839      	ldr	r1, [r7, #0]
   13dfa:	2900      	cmp	r1, #0
   13dfc:	dd68      	ble.n	13ed0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13dfe:	2905      	cmp	r1, #5
   13e00:	dd68      	ble.n	13ed4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   13e02:	6879      	ldr	r1, [r7, #4]
   13e04:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13e06:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   13e08:	428a      	cmp	r2, r1
   13e0a:	dc65      	bgt.n	13ed8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   13e0c:	aa21      	add	r2, sp, #132	; 0x84
   13e0e:	6812      	ldr	r2, [r2, #0]
   13e10:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   13e12:	f8db 2000 	ldr.w	r2, [fp]
   13e16:	2a03      	cmp	r2, #3
   13e18:	dd60      	ble.n	13edc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e1a:	2a05      	cmp	r2, #5
   13e1c:	dd60      	ble.n	13ee0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   13e1e:	f8db 2004 	ldr.w	r2, [fp, #4]
   13e22:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   13e24:	6831      	ldr	r1, [r6, #0]
   13e26:	2903      	cmp	r1, #3
   13e28:	dd5d      	ble.n	13ee6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e2a:	2905      	cmp	r1, #5
   13e2c:	dd5d      	ble.n	13eea <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   13e2e:	6871      	ldr	r1, [r6, #4]
   13e30:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13e32:	4291      	cmp	r1, r2
   13e34:	d15b      	bne.n	13eee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13e36:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   13e38:	6831      	ldr	r1, [r6, #0]
   13e3a:	2903      	cmp	r1, #3
   13e3c:	dd59      	ble.n	13ef2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e3e:	2905      	cmp	r1, #5
   13e40:	dd59      	ble.n	13ef6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   13e42:	6871      	ldr	r1, [r6, #4]
   13e44:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13e46:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   13e48:	428a      	cmp	r2, r1
   13e4a:	dc56      	bgt.n	13efa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   13e4c:	aa1f      	add	r2, sp, #124	; 0x7c
   13e4e:	6812      	ldr	r2, [r2, #0]
   13e50:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   13e52:	6832      	ldr	r2, [r6, #0]
   13e54:	2a00      	cmp	r2, #0
   13e56:	dd52      	ble.n	13efe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e58:	2a05      	cmp	r2, #5
   13e5a:	dd52      	ble.n	13f02 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   13e5c:	6872      	ldr	r2, [r6, #4]
   13e5e:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13e60:	6839      	ldr	r1, [r7, #0]
   13e62:	2903      	cmp	r1, #3
   13e64:	dd4f      	ble.n	13f06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e66:	2905      	cmp	r1, #5
   13e68:	dd4f      	ble.n	13f0a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   13e6a:	6879      	ldr	r1, [r7, #4]
   13e6c:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13e6e:	4291      	cmp	r1, r2
   13e70:	d14d      	bne.n	13f0e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13e72:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   13e74:	6839      	ldr	r1, [r7, #0]
   13e76:	2903      	cmp	r1, #3
   13e78:	dd4b      	ble.n	13f12 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13e7a:	2905      	cmp	r1, #5
   13e7c:	dd4b      	ble.n	13f16 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   13e7e:	6879      	ldr	r1, [r7, #4]
   13e80:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13e82:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   13e84:	428a      	cmp	r2, r1
   13e86:	dc48      	bgt.n	13f1a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   13e88:	aa1d      	add	r2, sp, #116	; 0x74
   13e8a:	6812      	ldr	r2, [r2, #0]
   13e8c:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   13e8e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   13e90:	2a00      	cmp	r2, #0
   13e92:	d049      	beq.n	13f28 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13e94:	681c      	ldr	r4, [r3, #0]
   13e96:	2c05      	cmp	r4, #5
   13e98:	dd41      	ble.n	13f1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   13e9a:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   13e9c:	2200      	movs	r2, #0
    int buffer_size = 1;
   13e9e:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   13ea0:	42a2      	cmp	r2, r4
   13ea2:	da3e      	bge.n	13f22 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   13ea4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13ea8:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   13eac:	3201      	adds	r2, #1
   13eae:	e7f7      	b.n	13ea0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13eb0:	f002 f8d7 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13eb4:	f002 f8d5 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13eb8:	f002 f8d3 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13ebc:	f002 f8d1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ec0:	684a      	ldr	r2, [r1, #4]
   13ec2:	e78f      	b.n	13de4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   13ec4:	f002 f8cd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ec8:	6879      	ldr	r1, [r7, #4]
   13eca:	e792      	b.n	13df2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13ecc:	f002 f8c9 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13ed0:	f002 f8c7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ed4:	6879      	ldr	r1, [r7, #4]
   13ed6:	e796      	b.n	13e06 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   13ed8:	aa20      	add	r2, sp, #128	; 0x80
   13eda:	e798      	b.n	13e0e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   13edc:	f002 f8c1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ee0:	f8db 2010 	ldr.w	r2, [fp, #16]
   13ee4:	e79e      	b.n	13e24 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   13ee6:	f002 f8bc 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13eea:	6931      	ldr	r1, [r6, #16]
   13eec:	e7a1      	b.n	13e32 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13eee:	f002 f8b8 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13ef2:	f002 f8b6 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ef6:	6931      	ldr	r1, [r6, #16]
   13ef8:	e7a5      	b.n	13e46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   13efa:	aa1e      	add	r2, sp, #120	; 0x78
   13efc:	e7a7      	b.n	13e4e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   13efe:	f002 f8b0 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f02:	6872      	ldr	r2, [r6, #4]
   13f04:	e7ac      	b.n	13e60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   13f06:	f002 f8ac 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f0a:	6939      	ldr	r1, [r7, #16]
   13f0c:	e7af      	b.n	13e6e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13f0e:	f002 f8a8 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13f12:	f002 f8a6 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f16:	6939      	ldr	r1, [r7, #16]
   13f18:	e7b3      	b.n	13e82 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   13f1a:	aa1c      	add	r2, sp, #112	; 0x70
   13f1c:	e7b5      	b.n	13e8a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13f1e:	3304      	adds	r3, #4
   13f20:	e7bc      	b.n	13e9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   13f22:	9b05      	ldr	r3, [sp, #20]
   13f24:	4299      	cmp	r1, r3
   13f26:	d161      	bne.n	13fec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   13f28:	f8db 3000 	ldr.w	r3, [fp]
   13f2c:	2b01      	cmp	r3, #1
   13f2e:	dd5f      	ble.n	13ff0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f30:	2b05      	cmp	r3, #5
   13f32:	dd5f      	ble.n	13ff4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   13f34:	f8db 3004 	ldr.w	r3, [fp, #4]
   13f38:	685b      	ldr	r3, [r3, #4]
   13f3a:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   13f3c:	f8db 3000 	ldr.w	r3, [fp]
   13f40:	2b02      	cmp	r3, #2
   13f42:	dd5b      	ble.n	13ffc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f44:	2b05      	cmp	r3, #5
   13f46:	dd5b      	ble.n	14000 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   13f48:	f8db 3004 	ldr.w	r3, [fp, #4]
   13f4c:	689b      	ldr	r3, [r3, #8]
   13f4e:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   13f50:	6833      	ldr	r3, [r6, #0]
   13f52:	2b01      	cmp	r3, #1
   13f54:	dd58      	ble.n	14008 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f56:	2b05      	cmp	r3, #5
   13f58:	dd58      	ble.n	1400c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   13f5a:	6873      	ldr	r3, [r6, #4]
   13f5c:	685b      	ldr	r3, [r3, #4]
   13f5e:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   13f60:	6833      	ldr	r3, [r6, #0]
   13f62:	2b02      	cmp	r3, #2
   13f64:	dd55      	ble.n	14012 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f66:	2b05      	cmp	r3, #5
   13f68:	dd55      	ble.n	14016 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   13f6a:	6873      	ldr	r3, [r6, #4]
   13f6c:	689b      	ldr	r3, [r3, #8]
   13f6e:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   13f70:	683b      	ldr	r3, [r7, #0]
   13f72:	2b01      	cmp	r3, #1
   13f74:	dd52      	ble.n	1401c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f76:	2b05      	cmp	r3, #5
   13f78:	dd52      	ble.n	14020 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   13f7a:	687b      	ldr	r3, [r7, #4]
   13f7c:	685b      	ldr	r3, [r3, #4]
   13f7e:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   13f80:	683b      	ldr	r3, [r7, #0]
   13f82:	2b02      	cmp	r3, #2
   13f84:	dd4f      	ble.n	14026 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f86:	2b05      	cmp	r3, #5
   13f88:	dd4f      	ble.n	1402a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	689b      	ldr	r3, [r3, #8]
   13f8e:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   13f90:	f04f 0a00 	mov.w	sl, #0
   13f94:	46d1      	mov	r9, sl
   13f96:	46da      	mov	sl, fp
   13f98:	46b3      	mov	fp, r6
   13f9a:	463e      	mov	r6, r7
   13f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13f9e:	4599      	cmp	r9, r3
   13fa0:	f280 8143 	bge.w	1422a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   13fa4:	2300      	movs	r3, #0
   13fa6:	9300      	str	r3, [sp, #0]
   13fa8:	46c8      	mov	r8, r9
   13faa:	46d9      	mov	r9, fp
   13fac:	46d3      	mov	fp, sl
   13fae:	46b2      	mov	sl, r6
   13fb0:	9b00      	ldr	r3, [sp, #0]
   13fb2:	9907      	ldr	r1, [sp, #28]
   13fb4:	428b      	cmp	r3, r1
   13fb6:	f280 8132 	bge.w	1421e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   13fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13fbc:	fb02 f303 	mul.w	r3, r2, r3
   13fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13fc2:	1a9b      	subs	r3, r3, r2
   13fc4:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   13fc6:	2300      	movs	r3, #0
   13fc8:	9301      	str	r3, [sp, #4]
   13fca:	4647      	mov	r7, r8
   13fcc:	46d8      	mov	r8, fp
   13fce:	9b01      	ldr	r3, [sp, #4]
   13fd0:	9906      	ldr	r1, [sp, #24]
   13fd2:	428b      	cmp	r3, r1
   13fd4:	f280 811d 	bge.w	14212 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   13fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13fda:	fb02 f303 	mul.w	r3, r2, r3
   13fde:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13fe0:	1a9b      	subs	r3, r3, r2
   13fe2:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   13fe4:	f04f 0b00 	mov.w	fp, #0
   13fe8:	463e      	mov	r6, r7
   13fea:	e0f3      	b.n	141d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   13fec:	f002 f839 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   13ff0:	f002 f837 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ff4:	f8db 3008 	ldr.w	r3, [fp, #8]
   13ff8:	930b      	str	r3, [sp, #44]	; 0x2c
   13ffa:	e79f      	b.n	13f3c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   13ffc:	f002 f831 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14000:	f8db 300c 	ldr.w	r3, [fp, #12]
   14004:	930a      	str	r3, [sp, #40]	; 0x28
   14006:	e7a3      	b.n	13f50 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   14008:	f002 f82b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1400c:	68b3      	ldr	r3, [r6, #8]
   1400e:	9309      	str	r3, [sp, #36]	; 0x24
   14010:	e7a6      	b.n	13f60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   14012:	f002 f826 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14016:	68f3      	ldr	r3, [r6, #12]
   14018:	9308      	str	r3, [sp, #32]
   1401a:	e7a9      	b.n	13f70 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   1401c:	f002 f821 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14020:	68bb      	ldr	r3, [r7, #8]
   14022:	9307      	str	r3, [sp, #28]
   14024:	e7ac      	b.n	13f80 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   14026:	f002 f81c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1402a:	68fb      	ldr	r3, [r7, #12]
   1402c:	9306      	str	r3, [sp, #24]
   1402e:	e7af      	b.n	13f90 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14030:	f002 f817 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14034:	f002 f815 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14038:	f002 f813 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1403c:	f002 f811 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14040:	f002 f80f 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14044:	f002 f80d 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14048:	f002 f80b 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1404c:	f002 f809 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14050:	f002 f807 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14054:	f002 f805 	bl	16062 <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   14058:	3501      	adds	r5, #1
   1405a:	9b08      	ldr	r3, [sp, #32]
   1405c:	429d      	cmp	r5, r3
   1405e:	da69      	bge.n	14134 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   14060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14062:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14064:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   14068:	f1ba 0f00 	cmp.w	sl, #0
   1406c:	dbf4      	blt.n	14058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   1406e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14070:	459a      	cmp	sl, r3
   14072:	daf1      	bge.n	14058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   14074:	2e00      	cmp	r6, #0
   14076:	dbef      	blt.n	14058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   14078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1407a:	429e      	cmp	r6, r3
   1407c:	daec      	bge.n	14058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   1407e:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   14080:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14082:	429c      	cmp	r4, r3
   14084:	dae8      	bge.n	14058 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   14086:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1408a:	2b04      	cmp	r3, #4
   1408c:	d1d0      	bne.n	14030 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1408e:	9a03      	ldr	r2, [sp, #12]
   14090:	2a00      	cmp	r2, #0
   14092:	dbcf      	blt.n	14034 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   14094:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14098:	429a      	cmp	r2, r3
   1409a:	dacb      	bge.n	14034 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1409c:	2e00      	cmp	r6, #0
   1409e:	dbcb      	blt.n	14038 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   140a0:	f8d8 1008 	ldr.w	r1, [r8, #8]
   140a4:	428e      	cmp	r6, r1
   140a6:	dac7      	bge.n	14038 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   140a8:	f1ba 0f00 	cmp.w	sl, #0
   140ac:	dbc6      	blt.n	1403c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   140ae:	f8d8 200c 	ldr.w	r2, [r8, #12]
   140b2:	4592      	cmp	sl, r2
   140b4:	dac2      	bge.n	1403c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   140b6:	2c00      	cmp	r4, #0
   140b8:	dbc2      	blt.n	14040 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   140ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
   140be:	429c      	cmp	r4, r3
   140c0:	dabe      	bge.n	14040 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   140c2:	9803      	ldr	r0, [sp, #12]
   140c4:	fb01 6100 	mla	r1, r1, r0, r6
   140c8:	fb01 a202 	mla	r2, r1, r2, sl
   140cc:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   140d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   140d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   140d6:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   140da:	2b04      	cmp	r3, #4
   140dc:	d1b2      	bne.n	14044 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   140de:	f1bb 0f00 	cmp.w	fp, #0
   140e2:	dbb1      	blt.n	14048 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   140e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
   140e8:	459b      	cmp	fp, r3
   140ea:	daad      	bge.n	14048 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   140ec:	2f00      	cmp	r7, #0
   140ee:	dbad      	blt.n	1404c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   140f0:	f8d9 1008 	ldr.w	r1, [r9, #8]
   140f4:	428f      	cmp	r7, r1
   140f6:	daa9      	bge.n	1404c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   140f8:	2d00      	cmp	r5, #0
   140fa:	dba9      	blt.n	14050 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   140fc:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14100:	4295      	cmp	r5, r2
   14102:	daa5      	bge.n	14050 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14104:	2c00      	cmp	r4, #0
   14106:	dba5      	blt.n	14054 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   14108:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1410c:	429c      	cmp	r4, r3
   1410e:	daa1      	bge.n	14054 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14110:	fb01 710b 	mla	r1, r1, fp, r7
   14114:	fb01 5202 	mla	r2, r1, r2, r5
   14118:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   1411c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1411e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14122:	f7ec fdf5 	bl	d10 <__aeabi_fmul>
   14126:	4601      	mov	r1, r0
   14128:	9802      	ldr	r0, [sp, #8]
   1412a:	f7ec fce9 	bl	b00 <__addsf3>
   1412e:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   14130:	3401      	adds	r4, #1
   14132:	e7a5      	b.n	14080 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   14134:	3701      	adds	r7, #1
   14136:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14138:	429f      	cmp	r7, r3
   1413a:	da05      	bge.n	14148 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   1413c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1413e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14140:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   14144:	2500      	movs	r5, #0
   14146:	e788      	b.n	1405a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   14148:	9e03      	ldr	r6, [sp, #12]
   1414a:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   1414e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   14150:	2b00      	cmp	r3, #0
   14152:	d049      	beq.n	141e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   14154:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   14158:	9802      	ldr	r0, [sp, #8]
   1415a:	f7ec fcd1 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   1415e:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14162:	2b04      	cmp	r3, #4
   14164:	d142      	bne.n	141ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14166:	2e00      	cmp	r6, #0
   14168:	db42      	blt.n	141f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   1416a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1416e:	429e      	cmp	r6, r3
   14170:	da3e      	bge.n	141f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14172:	9b00      	ldr	r3, [sp, #0]
   14174:	2b00      	cmp	r3, #0
   14176:	db3d      	blt.n	141f4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   14178:	f8da 2008 	ldr.w	r2, [sl, #8]
   1417c:	4293      	cmp	r3, r2
   1417e:	da39      	bge.n	141f4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14180:	9901      	ldr	r1, [sp, #4]
   14182:	2900      	cmp	r1, #0
   14184:	db38      	blt.n	141f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   14186:	f8da 300c 	ldr.w	r3, [sl, #12]
   1418a:	4299      	cmp	r1, r3
   1418c:	da34      	bge.n	141f8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1418e:	f1bb 0f00 	cmp.w	fp, #0
   14192:	db33      	blt.n	141fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   14194:	f8da 4010 	ldr.w	r4, [sl, #16]
   14198:	45a3      	cmp	fp, r4
   1419a:	da2f      	bge.n	141fc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1419c:	9900      	ldr	r1, [sp, #0]
   1419e:	fb02 1206 	mla	r2, r2, r6, r1
   141a2:	9901      	ldr	r1, [sp, #4]
   141a4:	fb02 1303 	mla	r3, r2, r3, r1
   141a8:	fb03 b404 	mla	r4, r3, r4, fp
   141ac:	9019      	str	r0, [sp, #100]	; 0x64
   141ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   141b0:	911a      	str	r1, [sp, #104]	; 0x68
   141b2:	9b04      	ldr	r3, [sp, #16]
   141b4:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   141b6:	f7ec ff49 	bl	104c <__aeabi_fcmplt>
   141ba:	bb08      	cbnz	r0, 14200 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   141bc:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   141be:	6829      	ldr	r1, [r5, #0]
   141c0:	9804      	ldr	r0, [sp, #16]
   141c2:	f7ec ff43 	bl	104c <__aeabi_fcmplt>
   141c6:	b9e8      	cbnz	r0, 14204 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
  return min(max(x, output_activation_min), output_activation_max);
   141c8:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   141ca:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   141cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   141d0:	f10b 0b01 	add.w	fp, fp, #1
   141d4:	9b05      	ldr	r3, [sp, #20]
   141d6:	459b      	cmp	fp, r3
   141d8:	da16      	bge.n	14208 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   141da:	2700      	movs	r7, #0
          float total = 0.f;
   141dc:	2300      	movs	r3, #0
   141de:	9302      	str	r3, [sp, #8]
   141e0:	9603      	str	r6, [sp, #12]
   141e2:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   141e6:	e7a6      	b.n	14136 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   141e8:	2100      	movs	r1, #0
   141ea:	e7b5      	b.n	14158 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   141ec:	f001 ff39 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   141f0:	f001 ff37 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   141f4:	f001 ff35 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   141f8:	f001 ff33 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   141fc:	f001 ff31 	bl	16062 <abort>
	return __b;
   14200:	ad1a      	add	r5, sp, #104	; 0x68
   14202:	e7dc      	b.n	141be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   14204:	ad1b      	add	r5, sp, #108	; 0x6c
   14206:	e7df      	b.n	141c8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   14208:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1420a:	9b01      	ldr	r3, [sp, #4]
   1420c:	3301      	adds	r3, #1
   1420e:	9301      	str	r3, [sp, #4]
   14210:	e6dd      	b.n	13fce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   14212:	46c3      	mov	fp, r8
   14214:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14216:	9b00      	ldr	r3, [sp, #0]
   14218:	3301      	adds	r3, #1
   1421a:	9300      	str	r3, [sp, #0]
   1421c:	e6c8      	b.n	13fb0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   1421e:	4656      	mov	r6, sl
   14220:	46da      	mov	sl, fp
   14222:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   14224:	f108 0901 	add.w	r9, r8, #1
   14228:	e6b8      	b.n	13f9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   1422a:	b023      	add	sp, #140	; 0x8c
   1422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014230 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   14230:	b570      	push	{r4, r5, r6, lr}
   14232:	4604      	mov	r4, r0
   14234:	460e      	mov	r6, r1
   14236:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   14238:	6913      	ldr	r3, [r2, #16]
   1423a:	425b      	negs	r3, r3
   1423c:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   1423e:	6953      	ldr	r3, [r2, #20]
   14240:	425b      	negs	r3, r3
   14242:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   14244:	6993      	ldr	r3, [r2, #24]
   14246:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   14248:	69d3      	ldr	r3, [r2, #28]
   1424a:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   1424c:	6a13      	ldr	r3, [r2, #32]
   1424e:	425b      	negs	r3, r3
   14250:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   14252:	7808      	ldrb	r0, [r1, #0]
   14254:	f000 fb54 	bl	14900 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   14258:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   1425a:	686b      	ldr	r3, [r5, #4]
   1425c:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   1425e:	682b      	ldr	r3, [r5, #0]
   14260:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   14262:	68b3      	ldr	r3, [r6, #8]
   14264:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   14266:	6873      	ldr	r3, [r6, #4]
   14268:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   1426a:	6973      	ldr	r3, [r6, #20]
   1426c:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   1426e:	6933      	ldr	r3, [r6, #16]
   14270:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   14272:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14274:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   14276:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   14278:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   1427a:	4620      	mov	r0, r4
   1427c:	bd70      	pop	{r4, r5, r6, pc}

0001427e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   1427e:	b570      	push	{r4, r5, r6, lr}
   14280:	4604      	mov	r4, r0
   14282:	460d      	mov	r5, r1
   14284:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   14286:	f100 0234 	add.w	r2, r0, #52	; 0x34
   1428a:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1428e:	7b28      	ldrb	r0, [r5, #12]
   14290:	f7f6 f922 	bl	a4d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   14294:	7828      	ldrb	r0, [r5, #0]
   14296:	f000 fb33 	bl	14900 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   1429a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   1429c:	6833      	ldr	r3, [r6, #0]
   1429e:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   142a0:	6873      	ldr	r3, [r6, #4]
   142a2:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   142a4:	686b      	ldr	r3, [r5, #4]
   142a6:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   142a8:	68ab      	ldr	r3, [r5, #8]
   142aa:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   142ac:	692b      	ldr	r3, [r5, #16]
   142ae:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   142b0:	696b      	ldr	r3, [r5, #20]
   142b2:	8223      	strh	r3, [r4, #16]
}
   142b4:	4620      	mov	r0, r4
   142b6:	bd70      	pop	{r4, r5, r6, pc}

000142b8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   142b8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   142ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   142bc:	b113      	cbz	r3, 142c4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   142be:	2134      	movs	r1, #52	; 0x34
   142c0:	4798      	blx	r3
}
   142c2:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   142c4:	f001 fecd 	bl	16062 <abort>

000142c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142cc:	b0a1      	sub	sp, #132	; 0x84
   142ce:	9217      	str	r2, [sp, #92]	; 0x5c
   142d0:	461e      	mov	r6, r3
   142d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   142d4:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   142d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   142dc:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   142de:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   142e2:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   142e4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   142e8:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   142ea:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   142ee:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   142f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   142f4:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   142f6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   142fa:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   142fc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   14300:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   14302:	6b02      	ldr	r2, [r0, #48]	; 0x30
   14304:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   14306:	6b42      	ldr	r2, [r0, #52]	; 0x34
   14308:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   1430a:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1430c:	2a04      	cmp	r2, #4
   1430e:	f040 80b2 	bne.w	14476 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   14312:	468b      	mov	fp, r1
   14314:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   14316:	2a04      	cmp	r2, #4
   14318:	f040 80af 	bne.w	1447a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   1431c:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14320:	2a04      	cmp	r2, #4
   14322:	f040 80ac 	bne.w	1447e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   14326:	680a      	ldr	r2, [r1, #0]
   14328:	2a00      	cmp	r2, #0
   1432a:	f340 80aa 	ble.w	14482 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1432e:	2a05      	cmp	r2, #5
   14330:	f340 80a9 	ble.w	14486 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   14334:	684a      	ldr	r2, [r1, #4]
   14336:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   14338:	f8d9 1000 	ldr.w	r1, [r9]
   1433c:	2900      	cmp	r1, #0
   1433e:	f340 80a4 	ble.w	1448a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14342:	2905      	cmp	r1, #5
   14344:	f340 80a3 	ble.w	1448e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   14348:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1434c:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1434e:	4291      	cmp	r1, r2
   14350:	f040 80a0 	bne.w	14494 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14354:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   14356:	f8d9 1000 	ldr.w	r1, [r9]
   1435a:	2900      	cmp	r1, #0
   1435c:	f340 809c 	ble.w	14498 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14360:	2905      	cmp	r1, #5
   14362:	f340 809b 	ble.w	1449c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   14366:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1436a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1436c:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   1436e:	428a      	cmp	r2, r1
   14370:	f300 8097 	bgt.w	144a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   14374:	aa1f      	add	r2, sp, #124	; 0x7c
   14376:	6812      	ldr	r2, [r2, #0]
   14378:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   1437a:	6832      	ldr	r2, [r6, #0]
   1437c:	2a03      	cmp	r2, #3
   1437e:	f340 8092 	ble.w	144a6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14382:	2a05      	cmp	r2, #5
   14384:	f340 8091 	ble.w	144aa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   14388:	6872      	ldr	r2, [r6, #4]
   1438a:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   1438c:	f8d9 1000 	ldr.w	r1, [r9]
   14390:	2903      	cmp	r1, #3
   14392:	f340 808c 	ble.w	144ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14396:	2905      	cmp	r1, #5
   14398:	f340 808b 	ble.w	144b2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   1439c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   143a0:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   143a2:	4291      	cmp	r1, r2
   143a4:	f040 8088 	bne.w	144b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   143a8:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   143aa:	f8d9 1000 	ldr.w	r1, [r9]
   143ae:	2903      	cmp	r1, #3
   143b0:	f340 8084 	ble.w	144bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143b4:	2905      	cmp	r1, #5
   143b6:	f340 8083 	ble.w	144c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   143ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
   143be:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   143c0:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   143c2:	428a      	cmp	r2, r1
   143c4:	dc7f      	bgt.n	144c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   143c6:	aa1d      	add	r2, sp, #116	; 0x74
   143c8:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   143ca:	f8db 2000 	ldr.w	r2, [fp]
   143ce:	2a01      	cmp	r2, #1
   143d0:	dd7b      	ble.n	144ca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143d2:	2a05      	cmp	r2, #5
   143d4:	dd7b      	ble.n	144ce <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   143d6:	f8db 2004 	ldr.w	r2, [fp, #4]
   143da:	6852      	ldr	r2, [r2, #4]
   143dc:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   143de:	f8db 2000 	ldr.w	r2, [fp]
   143e2:	2a02      	cmp	r2, #2
   143e4:	dd77      	ble.n	144d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143e6:	2a05      	cmp	r2, #5
   143e8:	dd77      	ble.n	144da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   143ea:	f8db 2004 	ldr.w	r2, [fp, #4]
   143ee:	6892      	ldr	r2, [r2, #8]
   143f0:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   143f2:	f8db 2000 	ldr.w	r2, [fp]
   143f6:	2a03      	cmp	r2, #3
   143f8:	dd73      	ble.n	144e2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   143fa:	2a05      	cmp	r2, #5
   143fc:	dd73      	ble.n	144e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   143fe:	f8db 2004 	ldr.w	r2, [fp, #4]
   14402:	68d2      	ldr	r2, [r2, #12]
   14404:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   14406:	6832      	ldr	r2, [r6, #0]
   14408:	2a01      	cmp	r2, #1
   1440a:	dd70      	ble.n	144ee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1440c:	2a05      	cmp	r2, #5
   1440e:	dd70      	ble.n	144f2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   14410:	6872      	ldr	r2, [r6, #4]
   14412:	6852      	ldr	r2, [r2, #4]
   14414:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   14416:	6832      	ldr	r2, [r6, #0]
   14418:	2a02      	cmp	r2, #2
   1441a:	dd6d      	ble.n	144f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1441c:	2a05      	cmp	r2, #5
   1441e:	dd6d      	ble.n	144fc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   14420:	6872      	ldr	r2, [r6, #4]
   14422:	6892      	ldr	r2, [r2, #8]
   14424:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   14426:	f8d9 2000 	ldr.w	r2, [r9]
   1442a:	2a01      	cmp	r2, #1
   1442c:	dd69      	ble.n	14502 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1442e:	2a05      	cmp	r2, #5
   14430:	dd69      	ble.n	14506 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   14432:	f8d9 2004 	ldr.w	r2, [r9, #4]
   14436:	6852      	ldr	r2, [r2, #4]
   14438:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   1443a:	f8d9 2000 	ldr.w	r2, [r9]
   1443e:	2a02      	cmp	r2, #2
   14440:	dd65      	ble.n	1450e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14442:	2a05      	cmp	r2, #5
   14444:	dd65      	ble.n	14512 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   14446:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1444a:	6892      	ldr	r2, [r2, #8]
   1444c:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   1444e:	9a04      	ldr	r2, [sp, #16]
   14450:	9805      	ldr	r0, [sp, #20]
   14452:	fb02 f200 	mul.w	r2, r2, r0
   14456:	428a      	cmp	r2, r1
   14458:	d15f      	bne.n	1451a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1445a:	681c      	ldr	r4, [r3, #0]
   1445c:	2c05      	cmp	r4, #5
   1445e:	dd5e      	ble.n	1451e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   14460:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   14462:	2200      	movs	r2, #0
    int buffer_size = 1;
   14464:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   14466:	42a2      	cmp	r2, r4
   14468:	da5b      	bge.n	14522 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   1446a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1446e:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   14472:	3201      	adds	r2, #1
   14474:	e7f7      	b.n	14466 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14476:	f001 fdf4 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1447a:	f001 fdf2 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1447e:	f001 fdf0 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14482:	f001 fdee 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14486:	684a      	ldr	r2, [r1, #4]
   14488:	e756      	b.n	14338 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   1448a:	f001 fdea 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1448e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14492:	e75c      	b.n	1434e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14494:	f001 fde5 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14498:	f001 fde3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1449c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   144a0:	e764      	b.n	1436c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   144a2:	aa1e      	add	r2, sp, #120	; 0x78
   144a4:	e767      	b.n	14376 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   144a6:	f001 fddc 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144aa:	6932      	ldr	r2, [r6, #16]
   144ac:	e76e      	b.n	1438c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   144ae:	f001 fdd8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
   144b6:	e774      	b.n	143a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   144b8:	f001 fdd3 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   144bc:	f001 fdd1 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
   144c4:	e77c      	b.n	143c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   144c6:	aa1c      	add	r2, sp, #112	; 0x70
   144c8:	e77e      	b.n	143c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   144ca:	f001 fdca 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144ce:	f8db 2008 	ldr.w	r2, [fp, #8]
   144d2:	920c      	str	r2, [sp, #48]	; 0x30
   144d4:	e783      	b.n	143de <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   144d6:	f001 fdc4 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144da:	f8db 200c 	ldr.w	r2, [fp, #12]
   144de:	920b      	str	r2, [sp, #44]	; 0x2c
   144e0:	e787      	b.n	143f2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   144e2:	f001 fdbe 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144e6:	f8db 2010 	ldr.w	r2, [fp, #16]
   144ea:	9204      	str	r2, [sp, #16]
   144ec:	e78b      	b.n	14406 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   144ee:	f001 fdb8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144f2:	68b2      	ldr	r2, [r6, #8]
   144f4:	920a      	str	r2, [sp, #40]	; 0x28
   144f6:	e78e      	b.n	14416 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   144f8:	f001 fdb3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144fc:	68f2      	ldr	r2, [r6, #12]
   144fe:	9209      	str	r2, [sp, #36]	; 0x24
   14500:	e791      	b.n	14426 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   14502:	f001 fdae 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14506:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1450a:	9208      	str	r2, [sp, #32]
   1450c:	e795      	b.n	1443a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   1450e:	f001 fda8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14512:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14516:	9207      	str	r2, [sp, #28]
   14518:	e799      	b.n	1444e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   1451a:	f001 fda2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1451e:	3304      	adds	r3, #4
   14520:	e79f      	b.n	14462 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   14522:	428d      	cmp	r5, r1
   14524:	d11e      	bne.n	14564 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   14526:	f04f 0a00 	mov.w	sl, #0
   1452a:	464c      	mov	r4, r9
   1452c:	46d1      	mov	r9, sl
   1452e:	46b2      	mov	sl, r6
   14530:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14532:	4599      	cmp	r9, r3
   14534:	f280 811a 	bge.w	1476c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14538:	2300      	movs	r3, #0
   1453a:	9300      	str	r3, [sp, #0]
   1453c:	46c8      	mov	r8, r9
   1453e:	46d1      	mov	r9, sl
   14540:	46a2      	mov	sl, r4
   14542:	9b00      	ldr	r3, [sp, #0]
   14544:	9a08      	ldr	r2, [sp, #32]
   14546:	4293      	cmp	r3, r2
   14548:	f280 810b 	bge.w	14762 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1454c:	2300      	movs	r3, #0
   1454e:	9301      	str	r3, [sp, #4]
   14550:	4647      	mov	r7, r8
   14552:	46d0      	mov	r8, sl
   14554:	9b01      	ldr	r3, [sp, #4]
   14556:	9a07      	ldr	r2, [sp, #28]
   14558:	4293      	cmp	r3, r2
   1455a:	f280 80fc 	bge.w	14756 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   1455e:	f04f 0a00 	mov.w	sl, #0
   14562:	e0ee      	b.n	14742 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   14564:	f001 fd7d 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14568:	f001 fd7b 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1456c:	f001 fd79 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14570:	f001 fd77 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14574:	f001 fd75 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14578:	f001 fd73 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1457c:	f001 fd71 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14580:	f001 fd6f 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14584:	f001 fd6d 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14588:	f001 fd6b 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1458c:	f001 fd69 	bl	16062 <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   14590:	3601      	adds	r6, #1
   14592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14594:	429e      	cmp	r6, r3
   14596:	da60      	bge.n	1465a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   14598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1459a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1459c:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   145a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   145a2:	9915      	ldr	r1, [sp, #84]	; 0x54
   145a4:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   145a8:	2b00      	cmp	r3, #0
   145aa:	dbf1      	blt.n	14590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   145ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   145ae:	428b      	cmp	r3, r1
   145b0:	daee      	bge.n	14590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   145b2:	2a00      	cmp	r2, #0
   145b4:	dbec      	blt.n	14590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   145b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   145b8:	428a      	cmp	r2, r1
   145ba:	dae9      	bge.n	14590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   145bc:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   145c0:	2904      	cmp	r1, #4
   145c2:	d1d1      	bne.n	14568 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   145c4:	2f00      	cmp	r7, #0
   145c6:	dbd1      	blt.n	1456c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   145c8:	f8db 1004 	ldr.w	r1, [fp, #4]
   145cc:	428f      	cmp	r7, r1
   145ce:	dacd      	bge.n	1456c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   145d0:	2a00      	cmp	r2, #0
   145d2:	dbcd      	blt.n	14570 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   145d4:	f8db c008 	ldr.w	ip, [fp, #8]
   145d8:	4562      	cmp	r2, ip
   145da:	dac9      	bge.n	14570 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   145dc:	2b00      	cmp	r3, #0
   145de:	dbc9      	blt.n	14574 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   145e0:	f8db 000c 	ldr.w	r0, [fp, #12]
   145e4:	4283      	cmp	r3, r0
   145e6:	dac5      	bge.n	14574 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   145e8:	f1ba 0f00 	cmp.w	sl, #0
   145ec:	dbc4      	blt.n	14578 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   145ee:	f8db 1010 	ldr.w	r1, [fp, #16]
   145f2:	458a      	cmp	sl, r1
   145f4:	dac0      	bge.n	14578 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   145f6:	fb0c 2207 	mla	r2, ip, r7, r2
   145fa:	fb02 3300 	mla	r3, r2, r0, r3
   145fe:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   14602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14604:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   14608:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1460c:	2b04      	cmp	r3, #4
   1460e:	d1b5      	bne.n	1457c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14610:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14614:	2b00      	cmp	r3, #0
   14616:	ddb3      	ble.n	14580 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14618:	2d00      	cmp	r5, #0
   1461a:	dbb3      	blt.n	14584 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   1461c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14620:	429d      	cmp	r5, r3
   14622:	daaf      	bge.n	14584 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14624:	2e00      	cmp	r6, #0
   14626:	dbaf      	blt.n	14588 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   14628:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1462c:	4296      	cmp	r6, r2
   1462e:	daab      	bge.n	14588 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14630:	2c00      	cmp	r4, #0
   14632:	dbab      	blt.n	1458c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   14634:	f8d9 3010 	ldr.w	r3, [r9, #16]
   14638:	429c      	cmp	r4, r3
   1463a:	daa7      	bge.n	1458c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1463c:	fb02 6205 	mla	r2, r2, r5, r6
   14640:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   14644:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   14646:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1464a:	f7ec fb61 	bl	d10 <__aeabi_fmul>
   1464e:	4601      	mov	r1, r0
   14650:	9803      	ldr	r0, [sp, #12]
   14652:	f7ec fa55 	bl	b00 <__addsf3>
   14656:	9003      	str	r0, [sp, #12]
   14658:	e79a      	b.n	14590 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1465a:	3501      	adds	r5, #1
   1465c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1465e:	429d      	cmp	r5, r3
   14660:	da01      	bge.n	14666 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   14662:	2600      	movs	r6, #0
   14664:	e795      	b.n	14592 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   14666:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   14668:	2b00      	cmp	r3, #0
   1466a:	d058      	beq.n	1471e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   1466c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   14670:	9803      	ldr	r0, [sp, #12]
   14672:	f7ec fa45 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   14676:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1467a:	2b04      	cmp	r3, #4
   1467c:	d151      	bne.n	14722 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1467e:	2f00      	cmp	r7, #0
   14680:	db51      	blt.n	14726 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   14682:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14686:	429f      	cmp	r7, r3
   14688:	da4d      	bge.n	14726 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1468a:	9b00      	ldr	r3, [sp, #0]
   1468c:	2b00      	cmp	r3, #0
   1468e:	db4c      	blt.n	1472a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   14690:	f8d8 2008 	ldr.w	r2, [r8, #8]
   14694:	4293      	cmp	r3, r2
   14696:	da48      	bge.n	1472a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14698:	9901      	ldr	r1, [sp, #4]
   1469a:	2900      	cmp	r1, #0
   1469c:	db47      	blt.n	1472e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   1469e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   146a2:	4299      	cmp	r1, r3
   146a4:	da43      	bge.n	1472e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   146a6:	2c00      	cmp	r4, #0
   146a8:	db43      	blt.n	14732 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   146aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
   146ae:	428c      	cmp	r4, r1
   146b0:	da3f      	bge.n	14732 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   146b2:	9d00      	ldr	r5, [sp, #0]
   146b4:	fb02 5207 	mla	r2, r2, r7, r5
   146b8:	9d01      	ldr	r5, [sp, #4]
   146ba:	fb02 5303 	mla	r3, r2, r3, r5
   146be:	fb03 4401 	mla	r4, r3, r1, r4
   146c2:	9019      	str	r0, [sp, #100]	; 0x64
   146c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   146c6:	911a      	str	r1, [sp, #104]	; 0x68
   146c8:	9b06      	ldr	r3, [sp, #24]
   146ca:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   146cc:	f7ec fcbe 	bl	104c <__aeabi_fcmplt>
   146d0:	2800      	cmp	r0, #0
   146d2:	d130      	bne.n	14736 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   146d4:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   146d6:	6829      	ldr	r1, [r5, #0]
   146d8:	9806      	ldr	r0, [sp, #24]
   146da:	f7ec fcb7 	bl	104c <__aeabi_fcmplt>
   146de:	bb60      	cbnz	r0, 1473a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   146e0:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   146e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   146e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   146e8:	9b02      	ldr	r3, [sp, #8]
   146ea:	3301      	adds	r3, #1
   146ec:	9302      	str	r3, [sp, #8]
   146ee:	9902      	ldr	r1, [sp, #8]
   146f0:	9b05      	ldr	r3, [sp, #20]
   146f2:	4299      	cmp	r1, r3
   146f4:	da23      	bge.n	1473e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   146f6:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   146fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   146fc:	9a01      	ldr	r2, [sp, #4]
   146fe:	fb03 f302 	mul.w	r3, r3, r2
   14702:	9a11      	ldr	r2, [sp, #68]	; 0x44
   14704:	1a9b      	subs	r3, r3, r2
   14706:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   14708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1470a:	9a00      	ldr	r2, [sp, #0]
   1470c:	fb03 f302 	mul.w	r3, r3, r2
   14710:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14712:	1a9b      	subs	r3, r3, r2
   14714:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   14716:	2500      	movs	r5, #0
            float total = 0.f;
   14718:	2300      	movs	r3, #0
   1471a:	9303      	str	r3, [sp, #12]
   1471c:	e79e      	b.n	1465c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   1471e:	2100      	movs	r1, #0
   14720:	e7a6      	b.n	14670 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14722:	f001 fc9e 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14726:	f001 fc9c 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1472a:	f001 fc9a 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1472e:	f001 fc98 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14732:	f001 fc96 	bl	16062 <abort>
	return __b;
   14736:	ad1a      	add	r5, sp, #104	; 0x68
   14738:	e7cd      	b.n	146d6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   1473a:	ad1b      	add	r5, sp, #108	; 0x6c
   1473c:	e7d0      	b.n	146e0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   1473e:	f10a 0a01 	add.w	sl, sl, #1
   14742:	9b04      	ldr	r3, [sp, #16]
   14744:	459a      	cmp	sl, r3
   14746:	da02      	bge.n	1474e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   14748:	2300      	movs	r3, #0
   1474a:	9302      	str	r3, [sp, #8]
   1474c:	e7cf      	b.n	146ee <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	3301      	adds	r3, #1
   14752:	9301      	str	r3, [sp, #4]
   14754:	e6fe      	b.n	14554 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   14756:	46c2      	mov	sl, r8
   14758:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1475a:	9b00      	ldr	r3, [sp, #0]
   1475c:	3301      	adds	r3, #1
   1475e:	9300      	str	r3, [sp, #0]
   14760:	e6ef      	b.n	14542 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   14762:	4654      	mov	r4, sl
   14764:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   14766:	f108 0901 	add.w	r9, r8, #1
   1476a:	e6e1      	b.n	14530 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   1476c:	b021      	add	sp, #132	; 0x84
   1476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014772 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   14772:	b570      	push	{r4, r5, r6, lr}
   14774:	4604      	mov	r4, r0
   14776:	460e      	mov	r6, r1
   14778:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   1477a:	6913      	ldr	r3, [r2, #16]
   1477c:	425b      	negs	r3, r3
   1477e:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   14780:	6953      	ldr	r3, [r2, #20]
   14782:	425b      	negs	r3, r3
   14784:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   14786:	6993      	ldr	r3, [r2, #24]
   14788:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   1478a:	69d3      	ldr	r3, [r2, #28]
   1478c:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   1478e:	6a13      	ldr	r3, [r2, #32]
   14790:	425b      	negs	r3, r3
   14792:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   14794:	7808      	ldrb	r0, [r1, #0]
   14796:	f000 f8b3 	bl	14900 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   1479a:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   1479c:	686b      	ldr	r3, [r5, #4]
   1479e:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   147a0:	682b      	ldr	r3, [r5, #0]
   147a2:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   147a4:	68b3      	ldr	r3, [r6, #8]
   147a6:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   147a8:	6873      	ldr	r3, [r6, #4]
   147aa:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   147ac:	69b3      	ldr	r3, [r6, #24]
   147ae:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   147b0:	6973      	ldr	r3, [r6, #20]
   147b2:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   147b4:	68f3      	ldr	r3, [r6, #12]
   147b6:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   147b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   147ba:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   147bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   147be:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   147c0:	4620      	mov	r0, r4
   147c2:	bd70      	pop	{r4, r5, r6, pc}

000147c4 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   147c4:	b570      	push	{r4, r5, r6, lr}
   147c6:	4604      	mov	r4, r0
   147c8:	460d      	mov	r5, r1
   147ca:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   147cc:	f100 0234 	add.w	r2, r0, #52	; 0x34
   147d0:	f100 0130 	add.w	r1, r0, #48	; 0x30
   147d4:	7c28      	ldrb	r0, [r5, #16]
   147d6:	f7f5 fe7f 	bl	a4d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   147da:	7828      	ldrb	r0, [r5, #0]
   147dc:	f000 f890 	bl	14900 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   147e0:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   147e2:	6833      	ldr	r3, [r6, #0]
   147e4:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   147e6:	6873      	ldr	r3, [r6, #4]
   147e8:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   147ea:	686b      	ldr	r3, [r5, #4]
   147ec:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   147ee:	68ab      	ldr	r3, [r5, #8]
   147f0:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   147f2:	696b      	ldr	r3, [r5, #20]
   147f4:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   147f6:	69ab      	ldr	r3, [r5, #24]
   147f8:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   147fa:	68eb      	ldr	r3, [r5, #12]
   147fc:	8263      	strh	r3, [r4, #18]
}
   147fe:	4620      	mov	r0, r4
   14800:	bd70      	pop	{r4, r5, r6, pc}

00014802 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   14802:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14804:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14806:	b113      	cbz	r3, 1480e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   14808:	2120      	movs	r1, #32
   1480a:	4798      	blx	r3
}
   1480c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1480e:	f001 fc28 	bl	16062 <abort>

00014812 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   14812:	694a      	ldr	r2, [r1, #20]
   14814:	4252      	negs	r2, r2
   14816:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   14818:	698a      	ldr	r2, [r1, #24]
   1481a:	4252      	negs	r2, r2
   1481c:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   1481e:	69ca      	ldr	r2, [r1, #28]
   14820:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   14822:	680a      	ldr	r2, [r1, #0]
   14824:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   14826:	684a      	ldr	r2, [r1, #4]
   14828:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   1482a:	688a      	ldr	r2, [r1, #8]
   1482c:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   1482e:	68ca      	ldr	r2, [r1, #12]
   14830:	6182      	str	r2, [r0, #24]
  return op_params;
}
   14832:	4770      	bx	lr

00014834 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   14834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14838:	b084      	sub	sp, #16
   1483a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1483c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   1483e:	2a01      	cmp	r2, #1
   14840:	d103      	bne.n	1484a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   14842:	2000      	movs	r0, #0
}
   14844:	b004      	add	sp, #16
   14846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1484a:	4604      	mov	r4, r0
   1484c:	4688      	mov	r8, r1
   1484e:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   14850:	2200      	movs	r2, #0
   14852:	2300      	movs	r3, #0
   14854:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   14858:	ab02      	add	r3, sp, #8
   1485a:	9301      	str	r3, [sp, #4]
   1485c:	9600      	str	r6, [sp, #0]
   1485e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14862:	4639      	mov	r1, r7
   14864:	f7ec fe6c 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   14868:	2800      	cmp	r0, #0
   1486a:	d1eb      	bne.n	14844 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1486c:	1d2b      	adds	r3, r5, #4
   1486e:	462a      	mov	r2, r5
   14870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14874:	f7f4 fd08 	bl	9288 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   14878:	693b      	ldr	r3, [r7, #16]
   1487a:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   1487c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1487e:	691b      	ldr	r3, [r3, #16]
   14880:	b96b      	cbnz	r3, 1489e <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   14882:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   14884:	6933      	ldr	r3, [r6, #16]
   14886:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   14888:	f105 030c 	add.w	r3, r5, #12
   1488c:	9300      	str	r3, [sp, #0]
   1488e:	f105 0308 	add.w	r3, r5, #8
   14892:	4632      	mov	r2, r6
   14894:	4641      	mov	r1, r8
   14896:	4620      	mov	r0, r4
   14898:	f7f4 febe 	bl	9618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   1489c:	e7d2      	b.n	14844 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   1489e:	f001 fbe0 	bl	16062 <abort>

000148a2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   148a2:	b510      	push	{r4, lr}
   148a4:	4604      	mov	r4, r0
   148a6:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   148a8:	f104 0220 	add.w	r2, r4, #32
   148ac:	f104 011c 	add.w	r1, r4, #28
   148b0:	f7f5 fe12 	bl	a4d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   148b4:	4620      	mov	r0, r4
   148b6:	bd10      	pop	{r4, pc}

000148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   148b8:	b570      	push	{r4, r5, r6, lr}
   148ba:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   148bc:	b1b9      	cbz	r1, 148ee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   148be:	684d      	ldr	r5, [r1, #4]
   148c0:	b1ad      	cbz	r5, 148ee <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   148c2:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   148c6:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   148c8:	2e05      	cmp	r6, #5
   148ca:	dd07      	ble.n	148dc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   148cc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   148d0:	429e      	cmp	r6, r3
   148d2:	d210      	bcs.n	148f6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   148d4:	00b0      	lsls	r0, r6, #2
   148d6:	f001 fbc2 	bl	1605e <_Znaj>
   148da:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   148dc:	6823      	ldr	r3, [r4, #0]
   148de:	2b05      	cmp	r3, #5
   148e0:	dd0c      	ble.n	148fc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   148e2:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   148e4:	00b2      	lsls	r2, r6, #2
   148e6:	4629      	mov	r1, r5
   148e8:	f001 fbd4 	bl	16094 <memcpy>
  }
   148ec:	e001      	b.n	148f2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   148ee:	2300      	movs	r3, #0
   148f0:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   148f2:	4620      	mov	r0, r4
   148f4:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   148f6:	f04f 30ff 	mov.w	r0, #4294967295
   148fa:	e7ec      	b.n	148d6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   148fc:	1d20      	adds	r0, r4, #4
   148fe:	e7f1      	b.n	148e4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

00014900 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   14900:	2801      	cmp	r0, #1
   14902:	d002      	beq.n	1490a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   14904:	2802      	cmp	r0, #2
   14906:	d000      	beq.n	1490a <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   14908:	2000      	movs	r0, #0
  }
}
   1490a:	4770      	bx	lr

0001490c <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   1490c:	b110      	cbz	r0, 14914 <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   1490e:	fab0 f080 	clz	r0, r0
   14912:	4770      	bx	lr
   14914:	2020      	movs	r0, #32
}
   14916:	4770      	bx	lr

00014918 <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   14918:	1a40      	subs	r0, r0, r1
   1491a:	4770      	bx	lr

0001491c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   1491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14920:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14922:	2001      	movs	r0, #1
   14924:	f7ff f9f3 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14928:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   1492a:	2000      	movs	r0, #0
   1492c:	f7ff f9ef 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14930:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14932:	2001      	movs	r0, #1
   14934:	f7ff f9eb 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14938:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   1493a:	4631      	mov	r1, r6
   1493c:	4620      	mov	r0, r4
   1493e:	f7ff f9e7 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14942:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14944:	2101      	movs	r1, #1
   14946:	4630      	mov	r0, r6
   14948:	f7ff f9e4 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1494c:	4606      	mov	r6, r0
   1494e:	4641      	mov	r1, r8
   14950:	4620      	mov	r0, r4
   14952:	f7ff f9eb 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14956:	4629      	mov	r1, r5
   14958:	f7ff f9da 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1495c:	4601      	mov	r1, r0
   1495e:	4630      	mov	r0, r6
   14960:	f7ff f9da 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14964:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14966:	2101      	movs	r1, #1
   14968:	4620      	mov	r0, r4
   1496a:	f7ff f9d3 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   1496e:	4604      	mov	r4, r0
   14970:	4631      	mov	r1, r6
   14972:	4638      	mov	r0, r7
   14974:	f7ff f9e2 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14978:	4629      	mov	r1, r5
   1497a:	f7ff f9c9 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   1497e:	4601      	mov	r1, r0
   14980:	4620      	mov	r0, r4
   14982:	f7ff f9c9 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001498a <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   1498a:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   1498c:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1498e:	2301      	movs	r3, #1
   14990:	fa03 f101 	lsl.w	r1, r3, r1
   14994:	17cd      	asrs	r5, r1, #31
   14996:	fb01 f307 	mul.w	r3, r1, r7
   1499a:	fb00 3305 	mla	r3, r0, r5, r3
   1499e:	fba1 0100 	umull	r0, r1, r1, r0
   149a2:	4419      	add	r1, r3
             ? min
   149a4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   149a8:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   149ac:	db06      	blt.n	149bc <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   149ae:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   149b2:	f171 0300 	sbcs.w	r3, r1, #0
   149b6:	da04      	bge.n	149c2 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   149b8:	bcf0      	pop	{r4, r5, r6, r7}
   149ba:	4770      	bx	lr
             ? min
   149bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   149c0:	e7fa      	b.n	149b8 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   149c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   149c6:	e7f7      	b.n	149b8 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

000149c8 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   149c8:	4048      	eors	r0, r1
   149ca:	4770      	bx	lr

000149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   149cc:	b570      	push	{r4, r5, r6, lr}
   149ce:	4606      	mov	r6, r0
   149d0:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   149d2:	f7ff f99d 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   149d6:	4604      	mov	r4, r0
   149d8:	4630      	mov	r0, r6
   149da:	f7ff f99f 	bl	13d1c <_ZN8gemmlowp6BitNotIiEET_S1_>
   149de:	4629      	mov	r1, r5
   149e0:	f7ff f996 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   149e4:	4601      	mov	r1, r0
   149e6:	4620      	mov	r0, r4
   149e8:	f7ff ffee 	bl	149c8 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   149ec:	bd70      	pop	{r4, r5, r6, pc}

000149ee <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   149ee:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   149f0:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   149f2:	180a      	adds	r2, r1, r0
   149f4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   149f8:	2a00      	cmp	r2, #0
   149fa:	f173 0100 	sbcs.w	r1, r3, #0
   149fe:	db0d      	blt.n	14a1c <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   14a00:	2101      	movs	r1, #1
   14a02:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   14a04:	1854      	adds	r4, r2, r1
   14a06:	eb43 0500 	adc.w	r5, r3, r0
   14a0a:	0feb      	lsrs	r3, r5, #31
   14a0c:	18e4      	adds	r4, r4, r3
   14a0e:	f145 0500 	adc.w	r5, r5, #0
   14a12:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   14a14:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   14a18:	bc30      	pop	{r4, r5}
   14a1a:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   14a1c:	f04f 31ff 	mov.w	r1, #4294967295
   14a20:	4608      	mov	r0, r1
   14a22:	e7ef      	b.n	14a04 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

00014a24 <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14a24:	b508      	push	{r3, lr}
   14a26:	f7ff f977 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14a2a:	bd08      	pop	{r3, pc}

00014a2c <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   14a2c:	4770      	bx	lr

00014a2e <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14a2e:	b508      	push	{r3, lr}
   14a30:	f7ff ff72 	bl	14918 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   14a34:	bd08      	pop	{r3, pc}

00014a36 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   14a36:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   14a38:	fab0 f080 	clz	r0, r0
   14a3c:	0940      	lsrs	r0, r0, #5
   14a3e:	f7ff f96f 	bl	13d20 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   14a42:	bd08      	pop	{r3, pc}

00014a44 <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14a44:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14a46:	f7f8 f94f 	bl	cce8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   14a4a:	bd08      	pop	{r3, pc}

00014a4c <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14a4c:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14a4e:	f7f8 f97b 	bl	cd48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   14a52:	bd08      	pop	{r3, pc}

00014a54 <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   14a54:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14a56:	f7ff ffb9 	bl	149cc <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   14a5a:	bd08      	pop	{r3, pc}

00014a5c <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14a5c:	b508      	push	{r3, lr}
   14a5e:	f7ff f95b 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14a62:	bd08      	pop	{r3, pc}

00014a64 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   14a64:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14a66:	f7ff ff59 	bl	1491c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   14a6a:	bd08      	pop	{r3, pc}

00014a6c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a70:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14a72:	2003      	movs	r0, #3
   14a74:	f7ff f94b 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a78:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14a7a:	2000      	movs	r0, #0
   14a7c:	f7ff f947 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a80:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14a82:	2001      	movs	r0, #1
   14a84:	f7ff f943 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a88:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14a8a:	4631      	mov	r1, r6
   14a8c:	4620      	mov	r0, r4
   14a8e:	f7ff f93f 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a92:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14a94:	2101      	movs	r1, #1
   14a96:	4630      	mov	r0, r6
   14a98:	f7ff f93c 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14a9c:	4606      	mov	r6, r0
   14a9e:	4641      	mov	r1, r8
   14aa0:	4620      	mov	r0, r4
   14aa2:	f7ff f943 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14aa6:	4629      	mov	r1, r5
   14aa8:	f7ff f932 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14aac:	4601      	mov	r1, r0
   14aae:	4630      	mov	r0, r6
   14ab0:	f7ff f932 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14ab4:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14ab6:	2102      	movs	r1, #2
   14ab8:	4620      	mov	r0, r4
   14aba:	f7ff f92b 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14abe:	4604      	mov	r4, r0
   14ac0:	4631      	mov	r1, r6
   14ac2:	4638      	mov	r0, r7
   14ac4:	f7ff f93a 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14ac8:	4629      	mov	r1, r5
   14aca:	f7ff f921 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14ace:	4601      	mov	r1, r0
   14ad0:	4620      	mov	r0, r4
   14ad2:	f7ff f921 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ada <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   14ada:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14adc:	f7ff ffc6 	bl	14a6c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   14ae0:	bd08      	pop	{r3, pc}

00014ae2 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   14ae2:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   14ae4:	f7ff f918 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14ae8:	bd08      	pop	{r3, pc}

00014aea <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   14aea:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14aec:	f7ff fff9 	bl	14ae2 <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   14af0:	bd08      	pop	{r3, pc}

00014af2 <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14af2:	b508      	push	{r3, lr}
   14af4:	f7ff f910 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14af8:	bd08      	pop	{r3, pc}

00014afa <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14afa:	b508      	push	{r3, lr}
   14afc:	f7ff ff0c 	bl	14918 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   14b00:	bd08      	pop	{r3, pc}

00014b02 <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   14b02:	b508      	push	{r3, lr}
   14b04:	f7ff f904 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b08:	bd08      	pop	{r3, pc}

00014b0a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b0e:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14b10:	f640 70ff 	movw	r0, #4095	; 0xfff
   14b14:	f7ff f8fb 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14b18:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14b1a:	2000      	movs	r0, #0
   14b1c:	f7ff f8f7 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14b20:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14b22:	2001      	movs	r0, #1
   14b24:	f7ff f8f3 	bl	13d0e <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14b28:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14b2a:	4631      	mov	r1, r6
   14b2c:	4620      	mov	r0, r4
   14b2e:	f7ff f8ef 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b32:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14b34:	2101      	movs	r1, #1
   14b36:	4630      	mov	r0, r6
   14b38:	f7ff f8ec 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14b3c:	4606      	mov	r6, r0
   14b3e:	4641      	mov	r1, r8
   14b40:	4620      	mov	r0, r4
   14b42:	f7ff f8f3 	bl	13d2c <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14b46:	4629      	mov	r1, r5
   14b48:	f7ff f8e2 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b4c:	4601      	mov	r1, r0
   14b4e:	4630      	mov	r0, r6
   14b50:	f7ff f8e2 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14b54:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14b56:	210c      	movs	r1, #12
   14b58:	4620      	mov	r0, r4
   14b5a:	f7ff f8db 	bl	13d14 <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14b5e:	4604      	mov	r4, r0
   14b60:	4631      	mov	r1, r6
   14b62:	4638      	mov	r0, r7
   14b64:	f7ff f8ea 	bl	13d3c <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14b68:	4629      	mov	r1, r5
   14b6a:	f7ff f8d1 	bl	13d10 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b6e:	4601      	mov	r1, r0
   14b70:	4620      	mov	r0, r4
   14b72:	f7ff f8d1 	bl	13d18 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014b7a <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14b7a:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14b7c:	f7ff ffc5 	bl	14b0a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   14b80:	bd08      	pop	{r3, pc}

00014b82 <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   14b82:	b508      	push	{r3, lr}
   14b84:	f7ff ff57 	bl	14a36 <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   14b88:	bd08      	pop	{r3, pc}

00014b8a <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14b8a:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14b8c:	f7f8 fa92 	bl	d0b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   14b90:	bd08      	pop	{r3, pc}

00014b92 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   14b92:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14b94:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14b96:	b113      	cbz	r3, 14b9e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   14b98:	2120      	movs	r1, #32
   14b9a:	4798      	blx	r3
}
   14b9c:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14b9e:	f001 fa60 	bl	16062 <abort>

00014ba2 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   14ba2:	b4f0      	push	{r4, r5, r6, r7}
   14ba4:	b084      	sub	sp, #16
  return t->dims->data[dim];
   14ba6:	6893      	ldr	r3, [r2, #8]
   14ba8:	689e      	ldr	r6, [r3, #8]
   14baa:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   14bac:	688a      	ldr	r2, [r1, #8]
   14bae:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   14bb0:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   14bb2:	68cd      	ldr	r5, [r1, #12]
   14bb4:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   14bb6:	b17b      	cbz	r3, 14bd8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   14bb8:	2801      	cmp	r0, #1
   14bba:	d003      	beq.n	14bc4 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   14bbc:	2802      	cmp	r0, #2
   14bbe:	d006      	beq.n	14bce <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   14bc0:	2100      	movs	r1, #0
   14bc2:	e00a      	b.n	14bda <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   14bc4:	1919      	adds	r1, r3, r4
   14bc6:	3901      	subs	r1, #1
   14bc8:	fb91 f1f3 	sdiv	r1, r1, r3
   14bcc:	e005      	b.n	14bda <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   14bce:	1919      	adds	r1, r3, r4
   14bd0:	1b49      	subs	r1, r1, r5
   14bd2:	fb91 f1f3 	sdiv	r1, r1, r3
   14bd6:	e000      	b.n	14bda <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   14bd8:	4619      	mov	r1, r3
   14bda:	b17a      	cbz	r2, 14bfc <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   14bdc:	2801      	cmp	r0, #1
   14bde:	d003      	beq.n	14be8 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   14be0:	2802      	cmp	r0, #2
   14be2:	d006      	beq.n	14bf2 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   14be4:	2000      	movs	r0, #0
   14be6:	e00a      	b.n	14bfe <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   14be8:	1990      	adds	r0, r2, r6
   14bea:	3801      	subs	r0, #1
   14bec:	fb90 f0f2 	sdiv	r0, r0, r2
   14bf0:	e005      	b.n	14bfe <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   14bf2:	1990      	adds	r0, r2, r6
   14bf4:	1bc0      	subs	r0, r0, r7
   14bf6:	fb90 f0f2 	sdiv	r0, r0, r2
   14bfa:	e000      	b.n	14bfe <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   14bfc:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14bfe:	3801      	subs	r0, #1
   14c00:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   14c04:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   14c06:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   14c0a:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   14c0e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   14c12:	1052      	asrs	r2, r2, #1
  padding_values.height =
   14c14:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   14c16:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14c18:	3901      	subs	r1, #1
   14c1a:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   14c1e:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   14c20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   14c24:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   14c28:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   14c2c:	105b      	asrs	r3, r3, #1
  padding_values.width =
   14c2e:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   14c30:	9202      	str	r2, [sp, #8]
   14c32:	ab04      	add	r3, sp, #16
   14c34:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   14c38:	9c08      	ldr	r4, [sp, #32]
   14c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14c3e:	2000      	movs	r0, #0
   14c40:	b004      	add	sp, #16
   14c42:	bcf0      	pop	{r4, r5, r6, r7}
   14c44:	4770      	bx	lr

00014c46 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   14c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c4a:	b0b5      	sub	sp, #212	; 0xd4
   14c4c:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   14c4e:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   14c50:	6891      	ldr	r1, [r2, #8]
   14c52:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   14c54:	6851      	ldr	r1, [r2, #4]
   14c56:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   14c58:	6911      	ldr	r1, [r2, #16]
   14c5a:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   14c5c:	68d2      	ldr	r2, [r2, #12]
   14c5e:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   14c60:	685a      	ldr	r2, [r3, #4]
   14c62:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   14c66:	681a      	ldr	r2, [r3, #0]
   14c68:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   14c6c:	699a      	ldr	r2, [r3, #24]
   14c6e:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   14c70:	69db      	ldr	r3, [r3, #28]
   14c72:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14c74:	4629      	mov	r1, r5
   14c76:	a81e      	add	r0, sp, #120	; 0x78
   14c78:	f7ff fe1e 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   14c7c:	4628      	mov	r0, r5
   14c7e:	f7ff f832 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   14c82:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   14c84:	4621      	mov	r1, r4
   14c86:	a824      	add	r0, sp, #144	; 0x90
   14c88:	f7ff fe16 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14c8c:	4620      	mov	r0, r4
   14c8e:	f7ff f830 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   14c92:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   14c94:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14c96:	2b04      	cmp	r3, #4
   14c98:	d17b      	bne.n	14d92 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   14c9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14c9c:	2b04      	cmp	r3, #4
   14c9e:	d17a      	bne.n	14d96 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   14ca0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	dd79      	ble.n	14d9a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ca6:	2b05      	cmp	r3, #5
   14ca8:	dd79      	ble.n	14d9e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   14caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14cac:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   14cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14cb0:	2a00      	cmp	r2, #0
   14cb2:	dd76      	ble.n	14da2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14cb4:	2a05      	cmp	r2, #5
   14cb6:	dd76      	ble.n	14da6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   14cb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14cba:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14cbc:	429a      	cmp	r2, r3
   14cbe:	d174      	bne.n	14daa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14cc0:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   14cc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14cc4:	2a00      	cmp	r2, #0
   14cc6:	dd72      	ble.n	14dae <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14cc8:	2a05      	cmp	r2, #5
   14cca:	dd72      	ble.n	14db2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   14ccc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14cce:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14cd0:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   14cd2:	4293      	cmp	r3, r2
   14cd4:	dc6f      	bgt.n	14db6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   14cd6:	ab33      	add	r3, sp, #204	; 0xcc
   14cd8:	681b      	ldr	r3, [r3, #0]
   14cda:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   14cdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14cde:	2b03      	cmp	r3, #3
   14ce0:	dd6b      	ble.n	14dba <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ce2:	2b05      	cmp	r3, #5
   14ce4:	dd6b      	ble.n	14dbe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   14ce6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14ce8:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   14cea:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14cec:	2a03      	cmp	r2, #3
   14cee:	dd68      	ble.n	14dc2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14cf0:	2a05      	cmp	r2, #5
   14cf2:	dd68      	ble.n	14dc6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   14cf4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14cf6:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14cf8:	429a      	cmp	r2, r3
   14cfa:	d166      	bne.n	14dca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14cfc:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   14cfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14d00:	2a03      	cmp	r2, #3
   14d02:	dd64      	ble.n	14dce <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d04:	2a05      	cmp	r2, #5
   14d06:	dd64      	ble.n	14dd2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   14d08:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14d0a:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14d0c:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   14d0e:	4293      	cmp	r3, r2
   14d10:	dc61      	bgt.n	14dd6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   14d12:	ab31      	add	r3, sp, #196	; 0xc4
   14d14:	681b      	ldr	r3, [r3, #0]
   14d16:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   14d18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14d1a:	2b01      	cmp	r3, #1
   14d1c:	dd5d      	ble.n	14dda <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d1e:	2b05      	cmp	r3, #5
   14d20:	dd5d      	ble.n	14dde <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   14d22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14d24:	685b      	ldr	r3, [r3, #4]
   14d26:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   14d28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14d2a:	2b02      	cmp	r3, #2
   14d2c:	dd5a      	ble.n	14de4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d2e:	2b05      	cmp	r3, #5
   14d30:	dd5a      	ble.n	14de8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   14d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14d34:	689b      	ldr	r3, [r3, #8]
   14d36:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   14d38:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14d3a:	2b01      	cmp	r3, #1
   14d3c:	dd57      	ble.n	14dee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d3e:	2b05      	cmp	r3, #5
   14d40:	dd57      	ble.n	14df2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   14d42:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14d44:	685b      	ldr	r3, [r3, #4]
   14d46:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   14d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14d4a:	2b02      	cmp	r3, #2
   14d4c:	dd54      	ble.n	14df8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d4e:	2b05      	cmp	r3, #5
   14d50:	dd54      	ble.n	14dfc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   14d52:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14d54:	689b      	ldr	r3, [r3, #8]
   14d56:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   14d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14d5a:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   14d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14d5e:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   14d60:	f04f 0b00 	mov.w	fp, #0
   14d64:	9b08      	ldr	r3, [sp, #32]
   14d66:	459b      	cmp	fp, r3
   14d68:	f280 812d 	bge.w	14fc6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14d6c:	f04f 0a00 	mov.w	sl, #0
   14d70:	46d1      	mov	r9, sl
   14d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14d74:	4599      	cmp	r9, r3
   14d76:	f280 8123 	bge.w	14fc0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14d7a:	f04f 0a00 	mov.w	sl, #0
   14d7e:	46d8      	mov	r8, fp
   14d80:	46cb      	mov	fp, r9
   14d82:	46d1      	mov	r9, sl
   14d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14d86:	4599      	cmp	r9, r3
   14d88:	f280 8115 	bge.w	14fb6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   14d8c:	f04f 0a00 	mov.w	sl, #0
   14d90:	e0c6      	b.n	14f20 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14d92:	f001 f966 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14d96:	f001 f964 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14d9a:	f001 f962 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14d9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14da0:	e785      	b.n	14cae <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   14da2:	f001 f95e 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14da6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14da8:	e788      	b.n	14cbc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14daa:	f001 f95a 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14dae:	f001 f958 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14db2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14db4:	e78c      	b.n	14cd0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   14db6:	ab32      	add	r3, sp, #200	; 0xc8
   14db8:	e78e      	b.n	14cd8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   14dba:	f001 f952 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14dc0:	e793      	b.n	14cea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   14dc2:	f001 f94e 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dc6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14dc8:	e796      	b.n	14cf8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14dca:	f001 f94a 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   14dce:	f001 f948 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dd2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14dd4:	e79a      	b.n	14d0c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   14dd6:	ab30      	add	r3, sp, #192	; 0xc0
   14dd8:	e79c      	b.n	14d14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   14dda:	f001 f942 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dde:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14de0:	930f      	str	r3, [sp, #60]	; 0x3c
   14de2:	e7a1      	b.n	14d28 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   14de4:	f001 f93d 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14de8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14dea:	930e      	str	r3, [sp, #56]	; 0x38
   14dec:	e7a4      	b.n	14d38 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   14dee:	f001 f938 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   14df4:	930d      	str	r3, [sp, #52]	; 0x34
   14df6:	e7a7      	b.n	14d48 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   14df8:	f001 f933 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14dfe:	930c      	str	r3, [sp, #48]	; 0x30
   14e00:	e7aa      	b.n	14d58 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   14e02:	a92e      	add	r1, sp, #184	; 0xb8
   14e04:	e0a5      	b.n	14f52 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   14e06:	aa2d      	add	r2, sp, #180	; 0xb4
   14e08:	e0ad      	b.n	14f66 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   14e0a:	aa2b      	add	r2, sp, #172	; 0xac
   14e0c:	e0b5      	b.n	14f7a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   14e0e:	ab2a      	add	r3, sp, #168	; 0xa8
   14e10:	e0bc      	b.n	14f8c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14e12:	f001 f926 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14e16:	f001 f924 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14e1a:	f001 f922 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14e1e:	f001 f920 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14e22:	f001 f91e 	bl	16062 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   14e26:	3601      	adds	r6, #1
   14e28:	42b5      	cmp	r5, r6
   14e2a:	dd37      	ble.n	14e9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14e2c:	9f06      	ldr	r7, [sp, #24]
   14e2e:	9b07      	ldr	r3, [sp, #28]
   14e30:	42bb      	cmp	r3, r7
   14e32:	ddf8      	ble.n	14e26 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   14e34:	9b04      	ldr	r3, [sp, #16]
   14e36:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   14e38:	9b05      	ldr	r3, [sp, #20]
   14e3a:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   14e3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14e40:	2b04      	cmp	r3, #4
   14e42:	d1e6      	bne.n	14e12 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14e44:	f1b8 0f00 	cmp.w	r8, #0
   14e48:	dbe5      	blt.n	14e16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   14e4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14e4c:	4598      	cmp	r8, r3
   14e4e:	dae2      	bge.n	14e16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14e50:	f1bc 0f00 	cmp.w	ip, #0
   14e54:	dbe1      	blt.n	14e1a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   14e56:	9920      	ldr	r1, [sp, #128]	; 0x80
   14e58:	458c      	cmp	ip, r1
   14e5a:	dade      	bge.n	14e1a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14e5c:	2800      	cmp	r0, #0
   14e5e:	dbde      	blt.n	14e1e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   14e60:	9a21      	ldr	r2, [sp, #132]	; 0x84
   14e62:	4290      	cmp	r0, r2
   14e64:	dadb      	bge.n	14e1e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14e66:	f1ba 0f00 	cmp.w	sl, #0
   14e6a:	dbda      	blt.n	14e22 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   14e6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14e6e:	459a      	cmp	sl, r3
   14e70:	dad7      	bge.n	14e22 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14e72:	fb01 c108 	mla	r1, r1, r8, ip
   14e76:	fb01 0202 	mla	r2, r1, r2, r0
   14e7a:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   14e7e:	9a02      	ldr	r2, [sp, #8]
   14e80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14e84:	9801      	ldr	r0, [sp, #4]
   14e86:	f7eb fe3b 	bl	b00 <__addsf3>
   14e8a:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   14e8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14e90:	4620      	mov	r0, r4
   14e92:	f7eb fe35 	bl	b00 <__addsf3>
   14e96:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14e98:	3701      	adds	r7, #1
   14e9a:	e7c8      	b.n	14e2e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   14e9c:	2100      	movs	r1, #0
   14e9e:	4620      	mov	r0, r4
   14ea0:	f7ec f8ca 	bl	1038 <__aeabi_fcmpeq>
   14ea4:	2800      	cmp	r0, #0
   14ea6:	f040 808e 	bne.w	14fc6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   14eaa:	4621      	mov	r1, r4
   14eac:	9801      	ldr	r0, [sp, #4]
   14eae:	f7eb ffe3 	bl	e78 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   14eb2:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   14eb4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   14eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14eb8:	2b04      	cmp	r3, #4
   14eba:	d16b      	bne.n	14f94 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14ebc:	f1b8 0f00 	cmp.w	r8, #0
   14ec0:	db6a      	blt.n	14f98 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   14ec2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14ec4:	4598      	cmp	r8, r3
   14ec6:	da67      	bge.n	14f98 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14ec8:	f1bb 0f00 	cmp.w	fp, #0
   14ecc:	db66      	blt.n	14f9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   14ece:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14ed0:	4593      	cmp	fp, r2
   14ed2:	da63      	bge.n	14f9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14ed4:	f1b9 0f00 	cmp.w	r9, #0
   14ed8:	db62      	blt.n	14fa0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   14eda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14edc:	4599      	cmp	r9, r3
   14ede:	da5f      	bge.n	14fa0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14ee0:	f1ba 0f00 	cmp.w	sl, #0
   14ee4:	db5e      	blt.n	14fa4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   14ee6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   14ee8:	45a2      	cmp	sl, r4
   14eea:	da5b      	bge.n	14fa4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14eec:	fb02 b208 	mla	r2, r2, r8, fp
   14ef0:	fb02 9303 	mla	r3, r2, r3, r9
   14ef4:	fb03 a404 	mla	r4, r3, r4, sl
   14ef8:	9012      	str	r0, [sp, #72]	; 0x48
   14efa:	9111      	str	r1, [sp, #68]	; 0x44
   14efc:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   14efe:	f7ec f8a5 	bl	104c <__aeabi_fcmplt>
   14f02:	2800      	cmp	r0, #0
   14f04:	d150      	bne.n	14fa8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   14f06:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   14f08:	6829      	ldr	r1, [r5, #0]
   14f0a:	4630      	mov	r0, r6
   14f0c:	f7ec f89e 	bl	104c <__aeabi_fcmplt>
   14f10:	2800      	cmp	r0, #0
   14f12:	d14b      	bne.n	14fac <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   14f14:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   14f16:	9a03      	ldr	r2, [sp, #12]
   14f18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   14f1c:	f10a 0a01 	add.w	sl, sl, #1
   14f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f22:	459a      	cmp	sl, r3
   14f24:	da44      	bge.n	14fb0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   14f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f28:	fb09 f203 	mul.w	r2, r9, r3
   14f2c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   14f30:	1a53      	subs	r3, r2, r1
   14f32:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   14f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14f36:	fb0b f003 	mul.w	r0, fp, r3
   14f3a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   14f3e:	1ac4      	subs	r4, r0, r3
   14f40:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   14f42:	2400      	movs	r4, #0
   14f44:	942f      	str	r4, [sp, #188]	; 0xbc
   14f46:	1a8a      	subs	r2, r1, r2
   14f48:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   14f4a:	42a2      	cmp	r2, r4
   14f4c:	f73f af59 	bgt.w	14e02 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   14f50:	a92f      	add	r1, sp, #188	; 0xbc
   14f52:	6809      	ldr	r1, [r1, #0]
   14f54:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   14f56:	990e      	ldr	r1, [sp, #56]	; 0x38
   14f58:	440a      	add	r2, r1
   14f5a:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   14f5c:	9919      	ldr	r1, [sp, #100]	; 0x64
   14f5e:	428a      	cmp	r2, r1
   14f60:	f6ff af51 	blt.w	14e06 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   14f64:	aa19      	add	r2, sp, #100	; 0x64
   14f66:	6812      	ldr	r2, [r2, #0]
   14f68:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   14f6a:	2200      	movs	r2, #0
   14f6c:	922c      	str	r2, [sp, #176]	; 0xb0
   14f6e:	1a1b      	subs	r3, r3, r0
   14f70:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   14f72:	4293      	cmp	r3, r2
   14f74:	f73f af49 	bgt.w	14e0a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   14f78:	aa2c      	add	r2, sp, #176	; 0xb0
   14f7a:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   14f7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14f7e:	4413      	add	r3, r2
   14f80:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   14f82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14f84:	4293      	cmp	r3, r2
   14f86:	f6ff af42 	blt.w	14e0e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   14f8a:	ab18      	add	r3, sp, #96	; 0x60
   14f8c:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   14f8e:	2400      	movs	r4, #0
          float total = 0.f;
   14f90:	9401      	str	r4, [sp, #4]
   14f92:	e749      	b.n	14e28 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14f94:	f001 f865 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14f98:	f001 f863 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14f9c:	f001 f861 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14fa0:	f001 f85f 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14fa4:	f001 f85d 	bl	16062 <abort>
	return __b;
   14fa8:	ad11      	add	r5, sp, #68	; 0x44
   14faa:	e7ad      	b.n	14f08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   14fac:	ad10      	add	r5, sp, #64	; 0x40
   14fae:	e7b1      	b.n	14f14 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14fb0:	f109 0901 	add.w	r9, r9, #1
   14fb4:	e6e6      	b.n	14d84 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   14fb6:	46d9      	mov	r9, fp
   14fb8:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14fba:	f109 0901 	add.w	r9, r9, #1
   14fbe:	e6d8      	b.n	14d72 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   14fc0:	f10b 0b01 	add.w	fp, fp, #1
   14fc4:	e6ce      	b.n	14d64 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   14fc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14fc8:	2b05      	cmp	r3, #5
   14fca:	dd03      	ble.n	14fd4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   14fcc:	9825      	ldr	r0, [sp, #148]	; 0x94
   14fce:	b108      	cbz	r0, 14fd4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   14fd0:	f001 f832 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   14fd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14fd6:	2b05      	cmp	r3, #5
   14fd8:	dd03      	ble.n	14fe2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   14fda:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14fdc:	b108      	cbz	r0, 14fe2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   14fde:	f001 f82b 	bl	16038 <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   14fe2:	b035      	add	sp, #212	; 0xd4
   14fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014fe8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   14fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fec:	b0b5      	sub	sp, #212	; 0xd4
   14fee:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   14ff0:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   14ff2:	6891      	ldr	r1, [r2, #8]
   14ff4:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   14ff6:	6851      	ldr	r1, [r2, #4]
   14ff8:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   14ffa:	6911      	ldr	r1, [r2, #16]
   14ffc:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   14ffe:	68d2      	ldr	r2, [r2, #12]
   15000:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   15002:	685a      	ldr	r2, [r3, #4]
   15004:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   15008:	681a      	ldr	r2, [r3, #0]
   1500a:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   1500e:	699a      	ldr	r2, [r3, #24]
   15010:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   15012:	69db      	ldr	r3, [r3, #28]
   15014:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   15016:	4629      	mov	r1, r5
   15018:	a81e      	add	r0, sp, #120	; 0x78
   1501a:	f7ff fc4d 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   1501e:	4628      	mov	r0, r5
   15020:	f7fe fe61 	bl	13ce6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   15024:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   15026:	4621      	mov	r1, r4
   15028:	a824      	add	r0, sp, #144	; 0x90
   1502a:	f7ff fc45 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   1502e:	4620      	mov	r0, r4
   15030:	f7fe fe5f 	bl	13cf2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   15034:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   15036:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15038:	2b04      	cmp	r3, #4
   1503a:	f040 8081 	bne.w	15140 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   1503e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15040:	2b04      	cmp	r3, #4
   15042:	d17f      	bne.n	15144 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   15044:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15046:	2b00      	cmp	r3, #0
   15048:	dd7e      	ble.n	15148 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1504a:	2b05      	cmp	r3, #5
   1504c:	dd7e      	ble.n	1514c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   1504e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15050:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   15052:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15054:	2a00      	cmp	r2, #0
   15056:	dd7b      	ble.n	15150 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15058:	2a05      	cmp	r2, #5
   1505a:	dd7b      	ble.n	15154 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   1505c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1505e:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15060:	429a      	cmp	r2, r3
   15062:	d179      	bne.n	15158 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15064:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   15066:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15068:	2a00      	cmp	r2, #0
   1506a:	dd77      	ble.n	1515c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1506c:	2a05      	cmp	r2, #5
   1506e:	dd77      	ble.n	15160 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   15070:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15072:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15074:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   15076:	4293      	cmp	r3, r2
   15078:	dc74      	bgt.n	15164 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   1507a:	ab33      	add	r3, sp, #204	; 0xcc
   1507c:	681b      	ldr	r3, [r3, #0]
   1507e:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   15080:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15082:	2b03      	cmp	r3, #3
   15084:	dd70      	ble.n	15168 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15086:	2b05      	cmp	r3, #5
   15088:	dd70      	ble.n	1516c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   1508a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1508c:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   1508e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15090:	2a03      	cmp	r2, #3
   15092:	dd6d      	ble.n	15170 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15094:	2a05      	cmp	r2, #5
   15096:	dd6d      	ble.n	15174 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   15098:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1509a:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1509c:	429a      	cmp	r2, r3
   1509e:	d16b      	bne.n	15178 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   150a0:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   150a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   150a4:	2a03      	cmp	r2, #3
   150a6:	dd69      	ble.n	1517c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150a8:	2a05      	cmp	r2, #5
   150aa:	dd69      	ble.n	15180 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   150ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   150ae:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   150b0:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   150b2:	4293      	cmp	r3, r2
   150b4:	dc66      	bgt.n	15184 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   150b6:	ab31      	add	r3, sp, #196	; 0xc4
   150b8:	681b      	ldr	r3, [r3, #0]
   150ba:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   150bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   150be:	2b01      	cmp	r3, #1
   150c0:	dd62      	ble.n	15188 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150c2:	2b05      	cmp	r3, #5
   150c4:	dd62      	ble.n	1518c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   150c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   150c8:	685b      	ldr	r3, [r3, #4]
   150ca:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   150cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   150ce:	2b02      	cmp	r3, #2
   150d0:	dd5f      	ble.n	15192 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150d2:	2b05      	cmp	r3, #5
   150d4:	dd5f      	ble.n	15196 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   150d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   150d8:	689b      	ldr	r3, [r3, #8]
   150da:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   150dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   150de:	2b01      	cmp	r3, #1
   150e0:	dd5c      	ble.n	1519c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150e2:	2b05      	cmp	r3, #5
   150e4:	dd5c      	ble.n	151a0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   150e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   150e8:	685b      	ldr	r3, [r3, #4]
   150ea:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   150ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   150ee:	2b02      	cmp	r3, #2
   150f0:	dd59      	ble.n	151a6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   150f2:	2b05      	cmp	r3, #5
   150f4:	dd59      	ble.n	151aa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   150f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   150f8:	689b      	ldr	r3, [r3, #8]
   150fa:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   150fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   150fe:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   15100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15102:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   15104:	f04f 0b00 	mov.w	fp, #0
   15108:	46d9      	mov	r9, fp
   1510a:	46d3      	mov	fp, sl
   1510c:	9b06      	ldr	r3, [sp, #24]
   1510e:	4599      	cmp	r9, r3
   15110:	f280 8127 	bge.w	15362 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15114:	f04f 0a00 	mov.w	sl, #0
   15118:	46d8      	mov	r8, fp
   1511a:	46cb      	mov	fp, r9
   1511c:	46d1      	mov	r9, sl
   1511e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15120:	4599      	cmp	r9, r3
   15122:	f280 8119 	bge.w	15358 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15126:	f04f 0a00 	mov.w	sl, #0
   1512a:	464f      	mov	r7, r9
   1512c:	4653      	mov	r3, sl
   1512e:	46c2      	mov	sl, r8
   15130:	4698      	mov	r8, r3
   15132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15134:	4598      	cmp	r8, r3
   15136:	f280 810b 	bge.w	15350 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   1513a:	f04f 0900 	mov.w	r9, #0
   1513e:	e0ba      	b.n	152b6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15140:	f000 ff8f 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15144:	f000 ff8d 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   15148:	f000 ff8b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1514c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1514e:	e780      	b.n	15052 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   15150:	f000 ff87 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15154:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15156:	e783      	b.n	15060 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15158:	f000 ff83 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1515c:	f000 ff81 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15160:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15162:	e787      	b.n	15074 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   15164:	ab32      	add	r3, sp, #200	; 0xc8
   15166:	e789      	b.n	1507c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   15168:	f000 ff7b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1516c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1516e:	e78e      	b.n	1508e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   15170:	f000 ff77 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15174:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   15176:	e791      	b.n	1509c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15178:	f000 ff73 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1517c:	f000 ff71 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15180:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   15182:	e795      	b.n	150b0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   15184:	ab30      	add	r3, sp, #192	; 0xc0
   15186:	e797      	b.n	150b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   15188:	f000 ff6b 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1518c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1518e:	930d      	str	r3, [sp, #52]	; 0x34
   15190:	e79c      	b.n	150cc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   15192:	f000 ff66 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15196:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15198:	930c      	str	r3, [sp, #48]	; 0x30
   1519a:	e79f      	b.n	150dc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   1519c:	f000 ff61 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   151a2:	930b      	str	r3, [sp, #44]	; 0x2c
   151a4:	e7a2      	b.n	150ec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   151a6:	f000 ff5c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   151ac:	930a      	str	r3, [sp, #40]	; 0x28
   151ae:	e7a5      	b.n	150fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   151b0:	a92e      	add	r1, sp, #184	; 0xb8
   151b2:	e099      	b.n	152e8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   151b4:	aa2d      	add	r2, sp, #180	; 0xb4
   151b6:	e0a1      	b.n	152fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   151b8:	aa2b      	add	r2, sp, #172	; 0xac
   151ba:	e0a9      	b.n	15310 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   151bc:	ab2a      	add	r3, sp, #168	; 0xa8
   151be:	e0b0      	b.n	15322 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   151c0:	f000 ff4f 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   151c4:	f000 ff4d 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   151c8:	f000 ff4b 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   151cc:	f000 ff49 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   151d0:	f000 ff47 	bl	16062 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   151d4:	6833      	ldr	r3, [r6, #0]
   151d6:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   151d8:	3501      	adds	r5, #1
   151da:	9b04      	ldr	r3, [sp, #16]
   151dc:	42ab      	cmp	r3, r5
   151de:	dd2d      	ble.n	1523c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   151e0:	9b01      	ldr	r3, [sp, #4]
   151e2:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   151e4:	9b02      	ldr	r3, [sp, #8]
   151e6:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   151e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   151ea:	2b04      	cmp	r3, #4
   151ec:	d1e8      	bne.n	151c0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   151ee:	f1bb 0f00 	cmp.w	fp, #0
   151f2:	dbe7      	blt.n	151c4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   151f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   151f6:	459b      	cmp	fp, r3
   151f8:	dae4      	bge.n	151c4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   151fa:	2e00      	cmp	r6, #0
   151fc:	dbe4      	blt.n	151c8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   151fe:	9920      	ldr	r1, [sp, #128]	; 0x80
   15200:	428e      	cmp	r6, r1
   15202:	dae1      	bge.n	151c8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15204:	2800      	cmp	r0, #0
   15206:	dbe1      	blt.n	151cc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   15208:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1520a:	4290      	cmp	r0, r2
   1520c:	dade      	bge.n	151cc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1520e:	f1b9 0f00 	cmp.w	r9, #0
   15212:	dbdd      	blt.n	151d0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   15214:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15216:	4599      	cmp	r9, r3
   15218:	dada      	bge.n	151d0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1521a:	fb01 610b 	mla	r1, r1, fp, r6
   1521e:	fb01 0202 	mla	r2, r1, r2, r0
   15222:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   15226:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   1522a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   1522e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15230:	f7eb ff0c 	bl	104c <__aeabi_fcmplt>
   15234:	2800      	cmp	r0, #0
   15236:	d1cd      	bne.n	151d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   15238:	ae0f      	add	r6, sp, #60	; 0x3c
   1523a:	e7cb      	b.n	151d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1523c:	3401      	adds	r4, #1
   1523e:	9b05      	ldr	r3, [sp, #20]
   15240:	42a3      	cmp	r3, r4
   15242:	dd01      	ble.n	15248 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15244:	9d03      	ldr	r5, [sp, #12]
   15246:	e7c8      	b.n	151da <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   15248:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1524a:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   1524c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   1524e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15250:	2b04      	cmp	r3, #4
   15252:	d16c      	bne.n	1532e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15254:	f1bb 0f00 	cmp.w	fp, #0
   15258:	db6b      	blt.n	15332 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   1525a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1525c:	459b      	cmp	fp, r3
   1525e:	da68      	bge.n	15332 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15260:	2f00      	cmp	r7, #0
   15262:	db68      	blt.n	15336 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   15264:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15266:	4297      	cmp	r7, r2
   15268:	da65      	bge.n	15336 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1526a:	f1b8 0f00 	cmp.w	r8, #0
   1526e:	db64      	blt.n	1533a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   15270:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   15272:	4598      	cmp	r8, r3
   15274:	da61      	bge.n	1533a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15276:	f1b9 0f00 	cmp.w	r9, #0
   1527a:	db60      	blt.n	1533e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   1527c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   1527e:	45a1      	cmp	r9, r4
   15280:	da5d      	bge.n	1533e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15282:	fb02 720b 	mla	r2, r2, fp, r7
   15286:	fb02 8303 	mla	r3, r2, r3, r8
   1528a:	fb03 9404 	mla	r4, r3, r4, r9
   1528e:	9012      	str	r0, [sp, #72]	; 0x48
   15290:	9111      	str	r1, [sp, #68]	; 0x44
   15292:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   15294:	f7eb feda 	bl	104c <__aeabi_fcmplt>
   15298:	2800      	cmp	r0, #0
   1529a:	d152      	bne.n	15342 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   1529c:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   1529e:	6829      	ldr	r1, [r5, #0]
   152a0:	4630      	mov	r0, r6
   152a2:	f7eb fed3 	bl	104c <__aeabi_fcmplt>
   152a6:	2800      	cmp	r0, #0
   152a8:	d14d      	bne.n	15346 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   152aa:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   152ac:	9a00      	ldr	r2, [sp, #0]
   152ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   152b2:	f109 0901 	add.w	r9, r9, #1
   152b6:	9b07      	ldr	r3, [sp, #28]
   152b8:	4599      	cmp	r9, r3
   152ba:	da46      	bge.n	1534a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   152bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   152be:	fb08 f203 	mul.w	r2, r8, r3
   152c2:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   152c6:	1a53      	subs	r3, r2, r1
   152c8:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   152ca:	9b08      	ldr	r3, [sp, #32]
   152cc:	fb07 f003 	mul.w	r0, r7, r3
   152d0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   152d4:	1ac4      	subs	r4, r0, r3
   152d6:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   152d8:	2400      	movs	r4, #0
   152da:	942f      	str	r4, [sp, #188]	; 0xbc
   152dc:	1a8a      	subs	r2, r1, r2
   152de:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   152e0:	42a2      	cmp	r2, r4
   152e2:	f73f af65 	bgt.w	151b0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   152e6:	a92f      	add	r1, sp, #188	; 0xbc
   152e8:	6809      	ldr	r1, [r1, #0]
   152ea:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   152ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   152ee:	440a      	add	r2, r1
   152f0:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   152f2:	9919      	ldr	r1, [sp, #100]	; 0x64
   152f4:	428a      	cmp	r2, r1
   152f6:	f6ff af5d 	blt.w	151b4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   152fa:	aa19      	add	r2, sp, #100	; 0x64
   152fc:	6812      	ldr	r2, [r2, #0]
   152fe:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   15300:	2200      	movs	r2, #0
   15302:	922c      	str	r2, [sp, #176]	; 0xb0
   15304:	1a1b      	subs	r3, r3, r0
   15306:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   15308:	4293      	cmp	r3, r2
   1530a:	f73f af55 	bgt.w	151b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   1530e:	aa2c      	add	r2, sp, #176	; 0xb0
   15310:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   15312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15314:	4413      	add	r3, r2
   15316:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   15318:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1531a:	4293      	cmp	r3, r2
   1531c:	f6ff af4e 	blt.w	151bc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   15320:	ab18      	add	r3, sp, #96	; 0x60
   15322:	681b      	ldr	r3, [r3, #0]
   15324:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   15326:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1532a:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1532c:	e787      	b.n	1523e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1532e:	f000 fe98 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15332:	f000 fe96 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15336:	f000 fe94 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1533a:	f000 fe92 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1533e:	f000 fe90 	bl	16062 <abort>
	return __b;
   15342:	ad11      	add	r5, sp, #68	; 0x44
   15344:	e7ab      	b.n	1529e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   15346:	ad10      	add	r5, sp, #64	; 0x40
   15348:	e7af      	b.n	152aa <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1534a:	f108 0801 	add.w	r8, r8, #1
   1534e:	e6f0      	b.n	15132 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   15350:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15352:	f107 0901 	add.w	r9, r7, #1
   15356:	e6e2      	b.n	1511e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   15358:	46d9      	mov	r9, fp
   1535a:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   1535c:	f109 0901 	add.w	r9, r9, #1
   15360:	e6d4      	b.n	1510c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   15362:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15364:	2b05      	cmp	r3, #5
   15366:	dd03      	ble.n	15370 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   15368:	9825      	ldr	r0, [sp, #148]	; 0x94
   1536a:	b108      	cbz	r0, 15370 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   1536c:	f000 fe64 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15372:	2b05      	cmp	r3, #5
   15374:	dd03      	ble.n	1537e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   15376:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15378:	b108      	cbz	r0, 1537e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   1537a:	f000 fe5d 	bl	16038 <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   1537e:	b035      	add	sp, #212	; 0xd4
   15380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015384 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   15384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15388:	b0b1      	sub	sp, #196	; 0xc4
   1538a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   1538c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   1538e:	7a21      	ldrb	r1, [r4, #8]
   15390:	2909      	cmp	r1, #9
   15392:	f040 80a0 	bne.w	154d6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   15396:	6891      	ldr	r1, [r2, #8]
   15398:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   1539a:	6851      	ldr	r1, [r2, #4]
   1539c:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   1539e:	6911      	ldr	r1, [r2, #16]
   153a0:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   153a2:	68d2      	ldr	r2, [r2, #12]
   153a4:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   153a6:	685a      	ldr	r2, [r3, #4]
   153a8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   153ac:	681a      	ldr	r2, [r3, #0]
   153ae:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   153b2:	691a      	ldr	r2, [r3, #16]
   153b4:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   153b6:	695b      	ldr	r3, [r3, #20]
   153b8:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   153ba:	4621      	mov	r1, r4
   153bc:	a81a      	add	r0, sp, #104	; 0x68
   153be:	f7ff fa7b 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   153c2:	4620      	mov	r0, r4
   153c4:	f7fe fc99 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   153c8:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   153ca:	4629      	mov	r1, r5
   153cc:	a820      	add	r0, sp, #128	; 0x80
   153ce:	f7ff fa73 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   153d2:	4628      	mov	r0, r5
   153d4:	f7fe fc97 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   153d8:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   153da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   153dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   153de:	429a      	cmp	r2, r3
   153e0:	dc7b      	bgt.n	154da <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   153e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   153e4:	2b04      	cmp	r3, #4
   153e6:	d17a      	bne.n	154de <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   153e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   153ea:	2b04      	cmp	r3, #4
   153ec:	d179      	bne.n	154e2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   153ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   153f0:	2b00      	cmp	r3, #0
   153f2:	dd78      	ble.n	154e6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   153f4:	2b05      	cmp	r3, #5
   153f6:	dd78      	ble.n	154ea <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   153f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   153fa:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   153fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   153fe:	2a00      	cmp	r2, #0
   15400:	dd75      	ble.n	154ee <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15402:	2a05      	cmp	r2, #5
   15404:	dd75      	ble.n	154f2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   15406:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15408:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1540a:	429a      	cmp	r2, r3
   1540c:	d173      	bne.n	154f6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1540e:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   15410:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15412:	2a00      	cmp	r2, #0
   15414:	dd71      	ble.n	154fa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15416:	2a05      	cmp	r2, #5
   15418:	dd71      	ble.n	154fe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   1541a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1541c:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1541e:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   15420:	4293      	cmp	r3, r2
   15422:	dc6e      	bgt.n	15502 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   15424:	ab2f      	add	r3, sp, #188	; 0xbc
   15426:	681b      	ldr	r3, [r3, #0]
   15428:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   1542a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1542c:	2b03      	cmp	r3, #3
   1542e:	dd6a      	ble.n	15506 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15430:	2b05      	cmp	r3, #5
   15432:	dd6a      	ble.n	1550a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   15434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15436:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   15438:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1543a:	2a03      	cmp	r2, #3
   1543c:	dd67      	ble.n	1550e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1543e:	2a05      	cmp	r2, #5
   15440:	dd67      	ble.n	15512 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   15442:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15444:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15446:	429a      	cmp	r2, r3
   15448:	d165      	bne.n	15516 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1544a:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   1544c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1544e:	2a03      	cmp	r2, #3
   15450:	dd63      	ble.n	1551a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15452:	2a05      	cmp	r2, #5
   15454:	dd63      	ble.n	1551e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   15456:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15458:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1545a:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   1545c:	4293      	cmp	r3, r2
   1545e:	dc60      	bgt.n	15522 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   15460:	ab2d      	add	r3, sp, #180	; 0xb4
   15462:	681b      	ldr	r3, [r3, #0]
   15464:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   15466:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15468:	2b01      	cmp	r3, #1
   1546a:	dd5c      	ble.n	15526 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1546c:	2b05      	cmp	r3, #5
   1546e:	dd5c      	ble.n	1552a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   15470:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15472:	685b      	ldr	r3, [r3, #4]
   15474:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   15476:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15478:	2b02      	cmp	r3, #2
   1547a:	dd59      	ble.n	15530 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1547c:	2b05      	cmp	r3, #5
   1547e:	dd59      	ble.n	15534 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   15480:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15482:	689b      	ldr	r3, [r3, #8]
   15484:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   15486:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15488:	2b01      	cmp	r3, #1
   1548a:	dd56      	ble.n	1553a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1548c:	2b05      	cmp	r3, #5
   1548e:	dd56      	ble.n	1553e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   15490:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15492:	685b      	ldr	r3, [r3, #4]
   15494:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   15496:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15498:	2b02      	cmp	r3, #2
   1549a:	dd53      	ble.n	15544 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1549c:	2b05      	cmp	r3, #5
   1549e:	dd53      	ble.n	15548 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   154a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   154a2:	689b      	ldr	r3, [r3, #8]
   154a4:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   154a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   154a8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   154aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   154ac:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   154ae:	f04f 0800 	mov.w	r8, #0
   154b2:	9b06      	ldr	r3, [sp, #24]
   154b4:	4598      	cmp	r8, r3
   154b6:	f280 8123 	bge.w	15700 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   154ba:	2700      	movs	r7, #0
   154bc:	46c6      	mov	lr, r8
   154be:	46b8      	mov	r8, r7
   154c0:	9b08      	ldr	r3, [sp, #32]
   154c2:	4598      	cmp	r8, r3
   154c4:	f280 8119 	bge.w	156fa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   154c8:	2600      	movs	r6, #0
   154ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   154cc:	429e      	cmp	r6, r3
   154ce:	f280 8111 	bge.w	156f4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   154d2:	2200      	movs	r2, #0
   154d4:	e0bc      	b.n	15650 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   154d6:	f000 fdc4 	bl	16062 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   154da:	f000 fdc2 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   154de:	f000 fdc0 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   154e2:	f000 fdbe 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   154e6:	f000 fdbc 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   154ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   154ec:	e786      	b.n	153fc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   154ee:	f000 fdb8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   154f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
   154f4:	e789      	b.n	1540a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   154f6:	f000 fdb4 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   154fa:	f000 fdb2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   154fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15500:	e78d      	b.n	1541e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   15502:	ab2e      	add	r3, sp, #184	; 0xb8
   15504:	e78f      	b.n	15426 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   15506:	f000 fdac 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1550a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1550c:	e794      	b.n	15438 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   1550e:	f000 fda8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15512:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15514:	e797      	b.n	15446 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15516:	f000 fda4 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   1551a:	f000 fda2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1551e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15520:	e79b      	b.n	1545a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   15522:	ab2c      	add	r3, sp, #176	; 0xb0
   15524:	e79d      	b.n	15462 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   15526:	f000 fd9c 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1552a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1552c:	930a      	str	r3, [sp, #40]	; 0x28
   1552e:	e7a2      	b.n	15476 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   15530:	f000 fd97 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   15536:	9309      	str	r3, [sp, #36]	; 0x24
   15538:	e7a5      	b.n	15486 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   1553a:	f000 fd92 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1553e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15540:	9308      	str	r3, [sp, #32]
   15542:	e7a8      	b.n	15496 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   15544:	f000 fd8d 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1554a:	930d      	str	r3, [sp, #52]	; 0x34
   1554c:	e7ab      	b.n	154a6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   1554e:	a82a      	add	r0, sp, #168	; 0xa8
   15550:	e097      	b.n	15682 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   15552:	a929      	add	r1, sp, #164	; 0xa4
   15554:	e09f      	b.n	15696 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   15556:	a927      	add	r1, sp, #156	; 0x9c
   15558:	e0a7      	b.n	156aa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   1555a:	ab26      	add	r3, sp, #152	; 0x98
   1555c:	e0ae      	b.n	156bc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1555e:	f000 fd80 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15562:	f000 fd7e 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15566:	f000 fd7c 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1556a:	f000 fd7a 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1556e:	f000 fd78 	bl	16062 <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15572:	3101      	adds	r1, #1
   15574:	9803      	ldr	r0, [sp, #12]
   15576:	4288      	cmp	r0, r1
   15578:	dd2f      	ble.n	155da <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1557a:	9801      	ldr	r0, [sp, #4]
   1557c:	9c02      	ldr	r4, [sp, #8]
   1557e:	4284      	cmp	r4, r0
   15580:	ddf7      	ble.n	15572 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   15582:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   15586:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   1558a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1558c:	2d04      	cmp	r5, #4
   1558e:	d1e6      	bne.n	1555e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15590:	f1be 0f00 	cmp.w	lr, #0
   15594:	dbe5      	blt.n	15562 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   15596:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   15598:	45ae      	cmp	lr, r5
   1559a:	dae2      	bge.n	15562 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1559c:	f1ba 0f00 	cmp.w	sl, #0
   155a0:	dbe1      	blt.n	15566 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   155a2:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   155a6:	45da      	cmp	sl, fp
   155a8:	dadd      	bge.n	15566 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   155aa:	2f00      	cmp	r7, #0
   155ac:	dbdd      	blt.n	1556a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   155ae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   155b0:	42af      	cmp	r7, r5
   155b2:	dada      	bge.n	1556a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   155b4:	2a00      	cmp	r2, #0
   155b6:	dbda      	blt.n	1556e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   155b8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   155ba:	42a2      	cmp	r2, r4
   155bc:	dad7      	bge.n	1556e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   155be:	fb0b aa0e 	mla	sl, fp, lr, sl
   155c2:	fb0a 7705 	mla	r7, sl, r5, r7
   155c6:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   155ca:	9d04      	ldr	r5, [sp, #16]
   155cc:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   155ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   155d0:	442c      	add	r4, r5
   155d2:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   155d4:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   155d6:	3001      	adds	r0, #1
   155d8:	e7d0      	b.n	1557c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   155da:	2b00      	cmp	r3, #0
   155dc:	f000 8090 	beq.w	15700 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   155e0:	990e      	ldr	r1, [sp, #56]	; 0x38
   155e2:	2900      	cmp	r1, #0
   155e4:	dd6f      	ble.n	156c6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   155e6:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   155ea:	eb01 0160 	add.w	r1, r1, r0, asr #1
   155ee:	fb91 f3f3 	sdiv	r3, r1, r3
   155f2:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   155f4:	9916      	ldr	r1, [sp, #88]	; 0x58
   155f6:	428b      	cmp	r3, r1
   155f8:	db6c      	blt.n	156d4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   155fa:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   155fc:	681b      	ldr	r3, [r3, #0]
   155fe:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   15600:	9917      	ldr	r1, [sp, #92]	; 0x5c
   15602:	428b      	cmp	r3, r1
   15604:	dc68      	bgt.n	156d8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   15606:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   15608:	681c      	ldr	r4, [r3, #0]
   1560a:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   1560c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1560e:	2b04      	cmp	r3, #4
   15610:	d164      	bne.n	156dc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15612:	f1be 0f00 	cmp.w	lr, #0
   15616:	db63      	blt.n	156e0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   15618:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1561a:	459e      	cmp	lr, r3
   1561c:	da60      	bge.n	156e0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1561e:	f1b8 0f00 	cmp.w	r8, #0
   15622:	db5f      	blt.n	156e4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   15624:	9822      	ldr	r0, [sp, #136]	; 0x88
   15626:	4580      	cmp	r8, r0
   15628:	da5c      	bge.n	156e4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1562a:	2e00      	cmp	r6, #0
   1562c:	db5c      	blt.n	156e8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   1562e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   15630:	428e      	cmp	r6, r1
   15632:	da59      	bge.n	156e8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15634:	2a00      	cmp	r2, #0
   15636:	db59      	blt.n	156ec <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   15638:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1563a:	429a      	cmp	r2, r3
   1563c:	da56      	bge.n	156ec <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1563e:	fb00 800e 	mla	r0, r0, lr, r8
   15642:	fb00 6101 	mla	r1, r0, r1, r6
   15646:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1564a:	9905      	ldr	r1, [sp, #20]
   1564c:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   1564e:	3201      	adds	r2, #1
   15650:	9b07      	ldr	r3, [sp, #28]
   15652:	429a      	cmp	r2, r3
   15654:	da4c      	bge.n	156f0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   15656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15658:	fb06 f103 	mul.w	r1, r6, r3
   1565c:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   15660:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   15664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15666:	fb08 f403 	mul.w	r4, r8, r3
   1566a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   1566e:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   15672:	2500      	movs	r5, #0
   15674:	952b      	str	r5, [sp, #172]	; 0xac
   15676:	1a41      	subs	r1, r0, r1
   15678:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   1567a:	42a9      	cmp	r1, r5
   1567c:	f73f af67 	bgt.w	1554e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   15680:	a82b      	add	r0, sp, #172	; 0xac
   15682:	6800      	ldr	r0, [r0, #0]
   15684:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   15686:	9809      	ldr	r0, [sp, #36]	; 0x24
   15688:	4401      	add	r1, r0
   1568a:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   1568c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1568e:	4281      	cmp	r1, r0
   15690:	f6ff af5f 	blt.w	15552 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   15694:	a915      	add	r1, sp, #84	; 0x54
   15696:	6809      	ldr	r1, [r1, #0]
   15698:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   1569a:	2100      	movs	r1, #0
   1569c:	9128      	str	r1, [sp, #160]	; 0xa0
   1569e:	1b1b      	subs	r3, r3, r4
   156a0:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   156a2:	428b      	cmp	r3, r1
   156a4:	f73f af57 	bgt.w	15556 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   156a8:	a928      	add	r1, sp, #160	; 0xa0
   156aa:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   156ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   156ae:	4403      	add	r3, r0
   156b0:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   156b2:	9814      	ldr	r0, [sp, #80]	; 0x50
   156b4:	4283      	cmp	r3, r0
   156b6:	f6ff af50 	blt.w	1555a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   156ba:	ab14      	add	r3, sp, #80	; 0x50
   156bc:	681b      	ldr	r3, [r3, #0]
   156be:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   156c0:	2300      	movs	r3, #0
   156c2:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   156c4:	e756      	b.n	15574 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   156c6:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   156ca:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   156ce:	fb91 f3f3 	sdiv	r3, r1, r3
   156d2:	e78e      	b.n	155f2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   156d4:	ab16      	add	r3, sp, #88	; 0x58
   156d6:	e791      	b.n	155fc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   156d8:	ab17      	add	r3, sp, #92	; 0x5c
   156da:	e795      	b.n	15608 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   156dc:	f000 fcc1 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   156e0:	f000 fcbf 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   156e4:	f000 fcbd 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   156e8:	f000 fcbb 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   156ec:	f000 fcb9 	bl	16062 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   156f0:	3601      	adds	r6, #1
   156f2:	e6ea      	b.n	154ca <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   156f4:	f108 0801 	add.w	r8, r8, #1
   156f8:	e6e2      	b.n	154c0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   156fa:	f10e 0801 	add.w	r8, lr, #1
   156fe:	e6d8      	b.n	154b2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   15700:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15702:	2b05      	cmp	r3, #5
   15704:	dd03      	ble.n	1570e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   15706:	9821      	ldr	r0, [sp, #132]	; 0x84
   15708:	b108      	cbz	r0, 1570e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   1570a:	f000 fc95 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1570e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15710:	2b05      	cmp	r3, #5
   15712:	dd03      	ble.n	1571c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   15714:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15716:	b108      	cbz	r0, 1571c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   15718:	f000 fc8e 	bl	16038 <_ZdaPv>
}
   1571c:	b031      	add	sp, #196	; 0xc4
   1571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015722 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   15722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15726:	b0b1      	sub	sp, #196	; 0xc4
   15728:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   1572a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1572c:	6891      	ldr	r1, [r2, #8]
   1572e:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   15730:	6851      	ldr	r1, [r2, #4]
   15732:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   15734:	6911      	ldr	r1, [r2, #16]
   15736:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   15738:	68d2      	ldr	r2, [r2, #12]
   1573a:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   1573c:	685a      	ldr	r2, [r3, #4]
   1573e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   15742:	681a      	ldr	r2, [r3, #0]
   15744:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   15748:	691a      	ldr	r2, [r3, #16]
   1574a:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   1574c:	695b      	ldr	r3, [r3, #20]
   1574e:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   15750:	4629      	mov	r1, r5
   15752:	a819      	add	r0, sp, #100	; 0x64
   15754:	f7ff f8b0 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   15758:	4628      	mov	r0, r5
   1575a:	f7fe face 	bl	13cfa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   1575e:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   15760:	4621      	mov	r1, r4
   15762:	a81f      	add	r0, sp, #124	; 0x7c
   15764:	f7ff f8a8 	bl	148b8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   15768:	4620      	mov	r0, r4
   1576a:	f7fe facc 	bl	13d06 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   1576e:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15770:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15772:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15774:	429a      	cmp	r2, r3
   15776:	f300 8081 	bgt.w	1587c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   1577a:	f112 0f80 	cmn.w	r2, #128	; 0x80
   1577e:	db7f      	blt.n	15880 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   15780:	2b7f      	cmp	r3, #127	; 0x7f
   15782:	dc7f      	bgt.n	15884 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   15784:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15786:	2b04      	cmp	r3, #4
   15788:	d17e      	bne.n	15888 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   1578a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1578c:	2b04      	cmp	r3, #4
   1578e:	d17d      	bne.n	1588c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   15790:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15792:	2b00      	cmp	r3, #0
   15794:	dd7c      	ble.n	15890 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15796:	2b05      	cmp	r3, #5
   15798:	dd7c      	ble.n	15894 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   1579a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1579c:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   1579e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   157a0:	2a00      	cmp	r2, #0
   157a2:	dd79      	ble.n	15898 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157a4:	2a05      	cmp	r2, #5
   157a6:	dd79      	ble.n	1589c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   157a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   157aa:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   157ac:	429a      	cmp	r2, r3
   157ae:	d177      	bne.n	158a0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   157b0:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   157b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   157b4:	2a00      	cmp	r2, #0
   157b6:	dd75      	ble.n	158a4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157b8:	2a05      	cmp	r2, #5
   157ba:	dd75      	ble.n	158a8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   157bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   157be:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   157c0:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   157c2:	4293      	cmp	r3, r2
   157c4:	dc72      	bgt.n	158ac <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   157c6:	ab2f      	add	r3, sp, #188	; 0xbc
   157c8:	681b      	ldr	r3, [r3, #0]
   157ca:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   157cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   157ce:	2b03      	cmp	r3, #3
   157d0:	dd6e      	ble.n	158b0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157d2:	2b05      	cmp	r3, #5
   157d4:	dd6e      	ble.n	158b4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   157d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   157d8:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   157da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   157dc:	2a03      	cmp	r2, #3
   157de:	dd6b      	ble.n	158b8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157e0:	2a05      	cmp	r2, #5
   157e2:	dd6b      	ble.n	158bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   157e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   157e6:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   157e8:	429a      	cmp	r2, r3
   157ea:	d169      	bne.n	158c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   157ec:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   157ee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   157f0:	2a03      	cmp	r2, #3
   157f2:	dd67      	ble.n	158c4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   157f4:	2a05      	cmp	r2, #5
   157f6:	dd67      	ble.n	158c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   157f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   157fa:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   157fc:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   157fe:	4293      	cmp	r3, r2
   15800:	dc64      	bgt.n	158cc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   15802:	ab2d      	add	r3, sp, #180	; 0xb4
   15804:	681b      	ldr	r3, [r3, #0]
   15806:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   15808:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1580a:	2b01      	cmp	r3, #1
   1580c:	dd60      	ble.n	158d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1580e:	2b05      	cmp	r3, #5
   15810:	dd60      	ble.n	158d4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   15812:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15814:	685b      	ldr	r3, [r3, #4]
   15816:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   15818:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1581a:	2b02      	cmp	r3, #2
   1581c:	dd5d      	ble.n	158da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1581e:	2b05      	cmp	r3, #5
   15820:	dd5d      	ble.n	158de <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   15822:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15824:	689b      	ldr	r3, [r3, #8]
   15826:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   15828:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1582a:	2b01      	cmp	r3, #1
   1582c:	dd5a      	ble.n	158e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1582e:	2b05      	cmp	r3, #5
   15830:	dd5a      	ble.n	158e8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   15832:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15834:	685b      	ldr	r3, [r3, #4]
   15836:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   15838:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1583a:	2b02      	cmp	r3, #2
   1583c:	dd57      	ble.n	158ee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1583e:	2b05      	cmp	r3, #5
   15840:	dd57      	ble.n	158f2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   15842:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15844:	689b      	ldr	r3, [r3, #8]
   15846:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   15848:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1584a:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   1584c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1584e:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   15850:	f04f 0c00 	mov.w	ip, #0
   15854:	46c8      	mov	r8, r9
   15856:	46e1      	mov	r9, ip
   15858:	9b04      	ldr	r3, [sp, #16]
   1585a:	4599      	cmp	r9, r3
   1585c:	f280 812b 	bge.w	15ab6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x394>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15860:	2700      	movs	r7, #0
   15862:	46c6      	mov	lr, r8
   15864:	46b8      	mov	r8, r7
   15866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15868:	4598      	cmp	r8, r3
   1586a:	f280 8120 	bge.w	15aae <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x38c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1586e:	2600      	movs	r6, #0
   15870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15872:	429e      	cmp	r6, r3
   15874:	f280 8118 	bge.w	15aa8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x386>
        for (int channel = 0; channel < depth; ++channel) {
   15878:	2300      	movs	r3, #0
   1587a:	e0c7      	b.n	15a0c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ea>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   1587c:	f000 fbf1 	bl	16062 <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   15880:	f000 fbef 	bl	16062 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   15884:	f000 fbed 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15888:	f000 fbeb 	bl	16062 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1588c:	f000 fbe9 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   15890:	f000 fbe7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15894:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15896:	e782      	b.n	1579e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   15898:	f000 fbe3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1589c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1589e:	e785      	b.n	157ac <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   158a0:	f000 fbdf 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   158a4:	f000 fbdd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   158aa:	e789      	b.n	157c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   158ac:	ab2e      	add	r3, sp, #184	; 0xb8
   158ae:	e78b      	b.n	157c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   158b0:	f000 fbd7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   158b6:	e790      	b.n	157da <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   158b8:	f000 fbd3 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   158be:	e793      	b.n	157e8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   158c0:	f000 fbcf 	bl	16062 <abort>
    TFLITE_DCHECK_LT(i, size_);
   158c4:	f000 fbcd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158c8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   158ca:	e797      	b.n	157fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   158cc:	ab2c      	add	r3, sp, #176	; 0xb0
   158ce:	e799      	b.n	15804 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   158d0:	f000 fbc7 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   158d6:	9306      	str	r3, [sp, #24]
   158d8:	e79e      	b.n	15818 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   158da:	f000 fbc2 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   158e0:	9305      	str	r3, [sp, #20]
   158e2:	e7a1      	b.n	15828 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   158e4:	f000 fbbd 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   158ea:	930b      	str	r3, [sp, #44]	; 0x2c
   158ec:	e7a4      	b.n	15838 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   158ee:	f000 fbb8 	bl	16062 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   158f4:	930a      	str	r3, [sp, #40]	; 0x28
   158f6:	e7a7      	b.n	15848 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   158f8:	aa2a      	add	r2, sp, #168	; 0xa8
   158fa:	e0a0      	b.n	15a3e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x31c>
	return __b;
   158fc:	aa29      	add	r2, sp, #164	; 0xa4
   158fe:	e0a8      	b.n	15a52 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x330>
	return __b;
   15900:	a927      	add	r1, sp, #156	; 0x9c
   15902:	e0b0      	b.n	15a66 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x344>
	return __b;
   15904:	aa26      	add	r2, sp, #152	; 0x98
   15906:	e0b7      	b.n	15a78 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15908:	f000 fbab 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1590c:	f000 fba9 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15910:	f000 fba7 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15914:	f000 fba5 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15918:	f000 fba3 	bl	16062 <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   1591c:	f994 2000 	ldrsb.w	r2, [r4]
   15920:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15924:	3001      	adds	r0, #1
   15926:	9a02      	ldr	r2, [sp, #8]
   15928:	4282      	cmp	r2, r0
   1592a:	dd2d      	ble.n	15988 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x266>
              const int in_x = in_x_origin + filter_x;
   1592c:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   15930:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   15934:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15936:	2d04      	cmp	r5, #4
   15938:	d1e6      	bne.n	15908 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1593a:	f1b9 0f00 	cmp.w	r9, #0
   1593e:	dbe5      	blt.n	1590c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   15940:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   15942:	45a9      	cmp	r9, r5
   15944:	dae2      	bge.n	1590c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15946:	2f00      	cmp	r7, #0
   15948:	dbe2      	blt.n	15910 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   1594a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   1594e:	455f      	cmp	r7, fp
   15950:	dade      	bge.n	15910 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15952:	2c00      	cmp	r4, #0
   15954:	dbde      	blt.n	15914 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   15956:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   15958:	42ac      	cmp	r4, r5
   1595a:	dadb      	bge.n	15914 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1595c:	2b00      	cmp	r3, #0
   1595e:	dbdb      	blt.n	15918 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   15960:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15962:	4293      	cmp	r3, r2
   15964:	dad8      	bge.n	15918 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15966:	fb0b 7709 	mla	r7, fp, r9, r7
   1596a:	fb07 4405 	mla	r4, r7, r5, r4
   1596e:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   15972:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   15976:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   1597a:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   1597e:	4295      	cmp	r5, r2
   15980:	dbcc      	blt.n	1591c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
      return __a;
   15982:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   15986:	e7c9      	b.n	1591c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15988:	3101      	adds	r1, #1
   1598a:	9a03      	ldr	r2, [sp, #12]
   1598c:	428a      	cmp	r2, r1
   1598e:	dd01      	ble.n	15994 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x272>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15990:	9801      	ldr	r0, [sp, #4]
   15992:	e7c8      	b.n	15926 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x204>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   15994:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   15998:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   1599c:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   159a0:	428a      	cmp	r2, r1
   159a2:	dc6f      	bgt.n	15a84 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
      return __a;
   159a4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   159a8:	f992 1000 	ldrsb.w	r1, [r2]
   159ac:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   159b0:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   159b4:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   159b8:	4291      	cmp	r1, r2
   159ba:	dc66      	bgt.n	15a8a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
      return __a;
   159bc:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   159c0:	f992 4000 	ldrsb.w	r4, [r2]
   159c4:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   159c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   159ca:	2a04      	cmp	r2, #4
   159cc:	d160      	bne.n	15a90 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   159ce:	f1b9 0f00 	cmp.w	r9, #0
   159d2:	db5f      	blt.n	15a94 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
   159d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   159d6:	4591      	cmp	r9, r2
   159d8:	da5c      	bge.n	15a94 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   159da:	f1b8 0f00 	cmp.w	r8, #0
   159de:	db5b      	blt.n	15a98 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
   159e0:	9821      	ldr	r0, [sp, #132]	; 0x84
   159e2:	4580      	cmp	r8, r0
   159e4:	da58      	bge.n	15a98 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   159e6:	2e00      	cmp	r6, #0
   159e8:	db58      	blt.n	15a9c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
   159ea:	9922      	ldr	r1, [sp, #136]	; 0x88
   159ec:	428e      	cmp	r6, r1
   159ee:	da55      	bge.n	15a9c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   159f0:	2b00      	cmp	r3, #0
   159f2:	db55      	blt.n	15aa0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
   159f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   159f6:	4293      	cmp	r3, r2
   159f8:	da52      	bge.n	15aa0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   159fa:	fb00 8009 	mla	r0, r0, r9, r8
   159fe:	fb00 6101 	mla	r1, r0, r1, r6
   15a02:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   15a06:	9900      	ldr	r1, [sp, #0]
   15a08:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   15a0a:	3301      	adds	r3, #1
   15a0c:	9a07      	ldr	r2, [sp, #28]
   15a0e:	4293      	cmp	r3, r2
   15a10:	da48      	bge.n	15aa4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x382>
              (out_x * stride_width) - params.padding_values.width;
   15a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15a14:	fb06 f002 	mul.w	r0, r6, r2
   15a18:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   15a1c:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   15a20:	9908      	ldr	r1, [sp, #32]
   15a22:	fb08 f401 	mul.w	r4, r8, r1
   15a26:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   15a2a:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   15a2e:	2500      	movs	r5, #0
   15a30:	952b      	str	r5, [sp, #172]	; 0xac
   15a32:	1a10      	subs	r0, r2, r0
   15a34:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   15a36:	42a8      	cmp	r0, r5
   15a38:	f73f af5e 	bgt.w	158f8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   15a3c:	aa2b      	add	r2, sp, #172	; 0xac
   15a3e:	6812      	ldr	r2, [r2, #0]
   15a40:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   15a42:	9a05      	ldr	r2, [sp, #20]
   15a44:	4410      	add	r0, r2
   15a46:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   15a48:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15a4a:	4290      	cmp	r0, r2
   15a4c:	f6ff af56 	blt.w	158fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   15a50:	aa14      	add	r2, sp, #80	; 0x50
   15a52:	6812      	ldr	r2, [r2, #0]
   15a54:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   15a56:	2200      	movs	r2, #0
   15a58:	9228      	str	r2, [sp, #160]	; 0xa0
   15a5a:	1b0a      	subs	r2, r1, r4
   15a5c:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   15a5e:	2a00      	cmp	r2, #0
   15a60:	f73f af4e 	bgt.w	15900 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   15a64:	a928      	add	r1, sp, #160	; 0xa0
   15a66:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   15a68:	9806      	ldr	r0, [sp, #24]
   15a6a:	4402      	add	r2, r0
   15a6c:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   15a6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15a70:	4282      	cmp	r2, r0
   15a72:	f6ff af47 	blt.w	15904 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   15a76:	aa13      	add	r2, sp, #76	; 0x4c
   15a78:	6812      	ldr	r2, [r2, #0]
   15a7a:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   15a7c:	2280      	movs	r2, #128	; 0x80
   15a7e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15a82:	e782      	b.n	1598a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x268>
	return __b;
   15a84:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   15a88:	e78e      	b.n	159a8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x286>
	return __b;
   15a8a:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   15a8e:	e797      	b.n	159c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x29e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a90:	f000 fae7 	bl	16062 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15a94:	f000 fae5 	bl	16062 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15a98:	f000 fae3 	bl	16062 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15a9c:	f000 fae1 	bl	16062 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15aa0:	f000 fadf 	bl	16062 <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15aa4:	3601      	adds	r6, #1
   15aa6:	e6e3      	b.n	15870 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15aa8:	f108 0801 	add.w	r8, r8, #1
   15aac:	e6db      	b.n	15866 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   15aae:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   15ab0:	f109 0901 	add.w	r9, r9, #1
   15ab4:	e6d0      	b.n	15858 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   15ab6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15ab8:	2b05      	cmp	r3, #5
   15aba:	dd03      	ble.n	15ac4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
      delete[] dims_pointer_;
   15abc:	9820      	ldr	r0, [sp, #128]	; 0x80
   15abe:	b108      	cbz	r0, 15ac4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
   15ac0:	f000 faba 	bl	16038 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15ac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15ac6:	2b05      	cmp	r3, #5
   15ac8:	dd03      	ble.n	15ad2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
      delete[] dims_pointer_;
   15aca:	981a      	ldr	r0, [sp, #104]	; 0x68
   15acc:	b108      	cbz	r0, 15ad2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
   15ace:	f000 fab3 	bl	16038 <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   15ad2:	b031      	add	sp, #196	; 0xc4
   15ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ad8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   15ad8:	b570      	push	{r4, r5, r6, lr}
   15ada:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   15adc:	b1c0      	cbz	r0, 15b10 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   15ade:	460d      	mov	r5, r1
   15ae0:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   15ae2:	b1b9      	cbz	r1, 15b14 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   15ae4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   15ae6:	680a      	ldr	r2, [r1, #0]
   15ae8:	6851      	ldr	r1, [r2, #4]
   15aea:	4798      	blx	r3
   15aec:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   15aee:	b19e      	cbz	r6, 15b18 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   15af0:	b1a5      	cbz	r5, 15b1c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   15af2:	6d73      	ldr	r3, [r6, #84]	; 0x54
   15af4:	686a      	ldr	r2, [r5, #4]
   15af6:	6851      	ldr	r1, [r2, #4]
   15af8:	4630      	mov	r0, r6
   15afa:	4798      	blx	r3
   15afc:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   15afe:	a901      	add	r1, sp, #4
   15b00:	7a20      	ldrb	r0, [r4, #8]
   15b02:	f7fd fae7 	bl	130d4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   15b06:	4606      	mov	r6, r0
   15b08:	b150      	cbz	r0, 15b20 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   15b0a:	4630      	mov	r0, r6
   15b0c:	b002      	add	sp, #8
   15b0e:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   15b10:	f000 faa7 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
   15b14:	f000 faa5 	bl	16062 <abort>
  TFLITE_DCHECK(context != nullptr);
   15b18:	f000 faa3 	bl	16062 <abort>
  TFLITE_DCHECK(node != nullptr);
   15b1c:	f000 faa1 	bl	16062 <abort>
  input_bytes *= ElementCount(*input->dims);
   15b20:	6860      	ldr	r0, [r4, #4]
   15b22:	f7fd fbe3 	bl	132ec <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   15b26:	9b01      	ldr	r3, [sp, #4]
   15b28:	fb00 f003 	mul.w	r0, r0, r3
   15b2c:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   15b2e:	6822      	ldr	r2, [r4, #0]
   15b30:	682b      	ldr	r3, [r5, #0]
   15b32:	429a      	cmp	r2, r3
   15b34:	d0e9      	beq.n	15b0a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   15b36:	2300      	movs	r3, #0
   15b38:	e004      	b.n	15b44 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   15b3a:	6821      	ldr	r1, [r4, #0]
   15b3c:	682a      	ldr	r2, [r5, #0]
   15b3e:	5cc9      	ldrb	r1, [r1, r3]
   15b40:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   15b42:	3301      	adds	r3, #1
   15b44:	9a01      	ldr	r2, [sp, #4]
   15b46:	429a      	cmp	r2, r3
   15b48:	d8f7      	bhi.n	15b3a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   15b4a:	e7de      	b.n	15b0a <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

00015b4c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   15b4c:	b508      	push	{r3, lr}
   15b4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15b52:	f7ea ffd5 	bl	b00 <__addsf3>
   15b56:	4601      	mov	r1, r0
   15b58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   15b5c:	f7eb f98c 	bl	e78 <__aeabi_fdiv>
   15b60:	bd08      	pop	{r3, pc}

00015b62 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   15b62:	b508      	push	{r3, lr}
   15b64:	f7fa fd14 	bl	10590 <expf>
   15b68:	bd08      	pop	{r3, pc}

00015b6a <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   15b6a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15b6e:	b113      	cbz	r3, 15b76 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   15b70:	2138      	movs	r1, #56	; 0x38
   15b72:	4798      	blx	r3
}
   15b74:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15b76:	f000 fa74 	bl	16062 <abort>

00015b7a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   15b7a:	b148      	cbz	r0, 15b90 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15b7c:	68c3      	ldr	r3, [r0, #12]
   15b7e:	8818      	ldrh	r0, [r3, #0]
   15b80:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15b84:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   15b88:	bf14      	ite	ne
   15b8a:	2000      	movne	r0, #0
   15b8c:	2001      	moveq	r0, #1
   15b8e:	4770      	bx	lr
		return false;
   15b90:	2000      	movs	r0, #0
}
   15b92:	4770      	bx	lr

00015b94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b96:	4605      	mov	r5, r0
   15b98:	460e      	mov	r6, r1
	__asm__ volatile(
   15b9a:	f04f 0320 	mov.w	r3, #32
   15b9e:	f3ef 8711 	mrs	r7, BASEPRI
   15ba2:	f383 8812 	msr	BASEPRI_MAX, r3
   15ba6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15baa:	f7fa f91f 	bl	fdec <z_impl_z_current_get>
   15bae:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15bb0:	4631      	mov	r1, r6
   15bb2:	4628      	mov	r0, r5
   15bb4:	f7fd fa0d 	bl	12fd2 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15bb8:	f387 8811 	msr	BASEPRI, r7
   15bbc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15bc0:	4620      	mov	r0, r4
   15bc2:	f7ee fd9d 	bl	4700 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015bc8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15bc8:	6902      	ldr	r2, [r0, #16]
   15bca:	6943      	ldr	r3, [r0, #20]
   15bcc:	431a      	orrs	r2, r3
   15bce:	f012 0203 	ands.w	r2, r2, #3
   15bd2:	d10d      	bne.n	15bf0 <create_free_list+0x28>
	slab->free_list = NULL;
   15bd4:	2100      	movs	r1, #0
   15bd6:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15bd8:	e005      	b.n	15be6 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   15bda:	6981      	ldr	r1, [r0, #24]
   15bdc:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   15bde:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   15be0:	6901      	ldr	r1, [r0, #16]
   15be2:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   15be4:	3201      	adds	r2, #1
   15be6:	68c1      	ldr	r1, [r0, #12]
   15be8:	4291      	cmp	r1, r2
   15bea:	d8f6      	bhi.n	15bda <create_free_list+0x12>
	return 0;
   15bec:	2000      	movs	r0, #0
   15bee:	4770      	bx	lr
		return -EINVAL;
   15bf0:	f06f 0015 	mvn.w	r0, #21
}
   15bf4:	4770      	bx	lr

00015bf6 <k_mem_slab_init>:
{
   15bf6:	b510      	push	{r4, lr}
   15bf8:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   15bfa:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   15bfc:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   15bfe:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   15c00:	2300      	movs	r3, #0
   15c02:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15c04:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   15c06:	f7ff ffdf 	bl	15bc8 <create_free_list>
	if (rc < 0) {
   15c0a:	2800      	cmp	r0, #0
   15c0c:	db01      	blt.n	15c12 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   15c0e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   15c10:	6064      	str	r4, [r4, #4]
}
   15c12:	bd10      	pop	{r4, pc}

00015c14 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c16:	4604      	mov	r4, r0
   15c18:	460d      	mov	r5, r1
	__asm__ volatile(
   15c1a:	f04f 0320 	mov.w	r3, #32
   15c1e:	f3ef 8611 	mrs	r6, BASEPRI
   15c22:	f383 8812 	msr	BASEPRI_MAX, r3
   15c26:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15c2a:	6983      	ldr	r3, [r0, #24]
   15c2c:	b163      	cbz	r3, 15c48 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   15c2e:	682b      	ldr	r3, [r5, #0]
   15c30:	69a2      	ldr	r2, [r4, #24]
   15c32:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15c34:	682b      	ldr	r3, [r5, #0]
   15c36:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15c38:	69e3      	ldr	r3, [r4, #28]
   15c3a:	3b01      	subs	r3, #1
   15c3c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15c3e:	f386 8811 	msr	BASEPRI, r6
   15c42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15c48:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15c4c:	f000 f93a 	bl	15ec4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15c50:	2800      	cmp	r0, #0
   15c52:	d0ec      	beq.n	15c2e <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15c54:	682a      	ldr	r2, [r5, #0]
   15c56:	2100      	movs	r1, #0
   15c58:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15c5c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   15c5e:	f000 f896 	bl	15d8e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15c62:	4631      	mov	r1, r6
   15c64:	4638      	mov	r0, r7
   15c66:	f7f9 fd65 	bl	f734 <z_reschedule>
			return;
   15c6a:	e7ec      	b.n	15c46 <k_mem_slab_free+0x32>

00015c6c <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15c6c:	3207      	adds	r2, #7
   15c6e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   15c72:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   15c76:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   15c7a:	2300      	movs	r3, #0
   15c7c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   15c80:	1888      	adds	r0, r1, r2
   15c82:	4770      	bx	lr

00015c84 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15c84:	f3ef 8005 	mrs	r0, IPSR
}
   15c88:	3800      	subs	r0, #0
   15c8a:	bf18      	it	ne
   15c8c:	2001      	movne	r0, #1
   15c8e:	4770      	bx	lr

00015c90 <z_impl_k_thread_start>:
{
   15c90:	b508      	push	{r3, lr}
	z_sched_start(thread);
   15c92:	f7f9 fe79 	bl	f988 <z_sched_start>
}
   15c96:	bd08      	pop	{r3, pc}

00015c98 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   15c98:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   15c9a:	2400      	movs	r4, #0
   15c9c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   15c9e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15ca0:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   15ca2:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   15ca4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   15ca6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   15ca8:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   15caa:	bc10      	pop	{r4}
   15cac:	4770      	bx	lr

00015cae <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   15cae:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   15cb0:	f7ee f8bc 	bl	3e2c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   15cb4:	f7fd f916 	bl	12ee4 <sys_clock_idle_exit>
}
   15cb8:	bd08      	pop	{r3, pc}

00015cba <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   15cba:	b508      	push	{r3, lr}
	__asm__ volatile(
   15cbc:	f04f 0220 	mov.w	r2, #32
   15cc0:	f3ef 8311 	mrs	r3, BASEPRI
   15cc4:	f382 8812 	msr	BASEPRI_MAX, r2
   15cc8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   15ccc:	f7f9 fba6 	bl	f41c <pm_save_idle>
   15cd0:	e7f4      	b.n	15cbc <idle+0x2>

00015cd2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   15cd2:	4288      	cmp	r0, r1
   15cd4:	da00      	bge.n	15cd8 <new_prio_for_inheritance+0x6>
   15cd6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15cd8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   15cdc:	db01      	blt.n	15ce2 <new_prio_for_inheritance+0x10>
   15cde:	4608      	mov	r0, r1
   15ce0:	4770      	bx	lr
   15ce2:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   15ce6:	4770      	bx	lr

00015ce8 <adjust_owner_prio>:
{
   15ce8:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   15cea:	6880      	ldr	r0, [r0, #8]
   15cec:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15cf0:	428b      	cmp	r3, r1
   15cf2:	d101      	bne.n	15cf8 <adjust_owner_prio+0x10>
	return false;
   15cf4:	2000      	movs	r0, #0
}
   15cf6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   15cf8:	f7f9 fe94 	bl	fa24 <z_set_prio>
   15cfc:	e7fb      	b.n	15cf6 <adjust_owner_prio+0xe>

00015cfe <z_impl_k_mutex_init>:
{
   15cfe:	4603      	mov	r3, r0
	mutex->owner = NULL;
   15d00:	2000      	movs	r0, #0
   15d02:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   15d04:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   15d06:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15d08:	605b      	str	r3, [r3, #4]
}
   15d0a:	4770      	bx	lr

00015d0c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   15d0c:	b13a      	cbz	r2, 15d1e <z_impl_k_sem_init+0x12>
   15d0e:	428a      	cmp	r2, r1
   15d10:	d308      	bcc.n	15d24 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   15d12:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   15d14:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15d16:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15d18:	6040      	str	r0, [r0, #4]
	return 0;
   15d1a:	2000      	movs	r0, #0
   15d1c:	4770      	bx	lr
		return -EINVAL;
   15d1e:	f06f 0015 	mvn.w	r0, #21
   15d22:	4770      	bx	lr
   15d24:	f06f 0015 	mvn.w	r0, #21
}
   15d28:	4770      	bx	lr

00015d2a <thread_active_elsewhere>:
}
   15d2a:	2000      	movs	r0, #0
   15d2c:	4770      	bx	lr

00015d2e <pended_on_thread>:
}
   15d2e:	6880      	ldr	r0, [r0, #8]
   15d30:	4770      	bx	lr

00015d32 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   15d32:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15d36:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15d3a:	4283      	cmp	r3, r0
   15d3c:	d001      	beq.n	15d42 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15d3e:	1ac0      	subs	r0, r0, r3
   15d40:	4770      	bx	lr
	return 0;
   15d42:	2000      	movs	r0, #0
}
   15d44:	4770      	bx	lr

00015d46 <z_reschedule_irqlock>:
{
   15d46:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15d48:	4603      	mov	r3, r0
   15d4a:	b920      	cbnz	r0, 15d56 <z_reschedule_irqlock+0x10>
   15d4c:	f3ef 8205 	mrs	r2, IPSR
   15d50:	b942      	cbnz	r2, 15d64 <z_reschedule_irqlock+0x1e>
   15d52:	2201      	movs	r2, #1
   15d54:	e000      	b.n	15d58 <z_reschedule_irqlock+0x12>
   15d56:	2200      	movs	r2, #0
	if (resched(key)) {
   15d58:	b932      	cbnz	r2, 15d68 <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   15d5a:	f383 8811 	msr	BASEPRI, r3
   15d5e:	f3bf 8f6f 	isb	sy
}
   15d62:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15d64:	2200      	movs	r2, #0
   15d66:	e7f7      	b.n	15d58 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   15d68:	4618      	mov	r0, r3
   15d6a:	f7ee fa5f 	bl	422c <arch_swap>
	return ret;
   15d6e:	e7f8      	b.n	15d62 <z_reschedule_irqlock+0x1c>

00015d70 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   15d70:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   15d72:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   15d74:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15d76:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15d78:	2300      	movs	r3, #0
   15d7a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   15d7c:	604b      	str	r3, [r1, #4]
}
   15d7e:	4770      	bx	lr

00015d80 <z_priq_dumb_best>:
{
   15d80:	4603      	mov	r3, r0
	return list->head == list;
   15d82:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d84:	4283      	cmp	r3, r0
   15d86:	d000      	beq.n	15d8a <z_priq_dumb_best+0xa>
}
   15d88:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15d8a:	2000      	movs	r0, #0
	return thread;
   15d8c:	e7fc      	b.n	15d88 <z_priq_dumb_best+0x8>

00015d8e <z_ready_thread>:
{
   15d8e:	b538      	push	{r3, r4, r5, lr}
   15d90:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15d92:	2300      	movs	r3, #0
	__asm__ volatile(
   15d94:	f04f 0220 	mov.w	r2, #32
   15d98:	f3ef 8511 	mrs	r5, BASEPRI
   15d9c:	f382 8812 	msr	BASEPRI_MAX, r2
   15da0:	f3bf 8f6f 	isb	sy
   15da4:	e007      	b.n	15db6 <z_ready_thread+0x28>
			ready_thread(thread);
   15da6:	4620      	mov	r0, r4
   15da8:	f7f9 fdae 	bl	f908 <ready_thread>
	__asm__ volatile(
   15dac:	f385 8811 	msr	BASEPRI, r5
   15db0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15db4:	2301      	movs	r3, #1
   15db6:	b92b      	cbnz	r3, 15dc4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15db8:	4620      	mov	r0, r4
   15dba:	f7ff ffb6 	bl	15d2a <thread_active_elsewhere>
   15dbe:	2800      	cmp	r0, #0
   15dc0:	d1f4      	bne.n	15dac <z_ready_thread+0x1e>
   15dc2:	e7f0      	b.n	15da6 <z_ready_thread+0x18>
}
   15dc4:	bd38      	pop	{r3, r4, r5, pc}

00015dc6 <z_thread_timeout>:
{
   15dc6:	b570      	push	{r4, r5, r6, lr}
   15dc8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15dca:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   15dce:	2300      	movs	r3, #0
	__asm__ volatile(
   15dd0:	f04f 0220 	mov.w	r2, #32
   15dd4:	f3ef 8611 	mrs	r6, BASEPRI
   15dd8:	f382 8812 	msr	BASEPRI_MAX, r2
   15ddc:	f3bf 8f6f 	isb	sy
   15de0:	e019      	b.n	15e16 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15de2:	4628      	mov	r0, r5
   15de4:	f7ff ffa3 	bl	15d2e <pended_on_thread>
   15de8:	4629      	mov	r1, r5
   15dea:	f7ff ffc1 	bl	15d70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15dee:	7b6b      	ldrb	r3, [r5, #13]
   15df0:	f023 0302 	bic.w	r3, r3, #2
   15df4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   15df6:	2300      	movs	r3, #0
   15df8:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15dfa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15dfe:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   15e02:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   15e06:	4628      	mov	r0, r5
   15e08:	f7f9 fd7e 	bl	f908 <ready_thread>
	__asm__ volatile(
   15e0c:	f386 8811 	msr	BASEPRI, r6
   15e10:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e14:	2301      	movs	r3, #1
   15e16:	b94b      	cbnz	r3, 15e2c <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15e18:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   15e1c:	f013 0f28 	tst.w	r3, #40	; 0x28
   15e20:	d1f4      	bne.n	15e0c <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   15e22:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15e26:	2b00      	cmp	r3, #0
   15e28:	d1db      	bne.n	15de2 <z_thread_timeout+0x1c>
   15e2a:	e7e6      	b.n	15dfa <z_thread_timeout+0x34>
}
   15e2c:	bd70      	pop	{r4, r5, r6, pc}

00015e2e <add_to_waitq_locked>:
{
   15e2e:	b570      	push	{r4, r5, r6, lr}
   15e30:	4605      	mov	r5, r0
   15e32:	460e      	mov	r6, r1
	unready_thread(thread);
   15e34:	f7f9 fdc6 	bl	f9c4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15e38:	7b6b      	ldrb	r3, [r5, #13]
   15e3a:	f043 0302 	orr.w	r3, r3, #2
   15e3e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15e40:	b1b6      	cbz	r6, 15e70 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   15e42:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15e44:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15e46:	42a6      	cmp	r6, r4
   15e48:	d019      	beq.n	15e7e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15e4a:	b164      	cbz	r4, 15e66 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15e4c:	4621      	mov	r1, r4
   15e4e:	4628      	mov	r0, r5
   15e50:	f7ff ff6f 	bl	15d32 <z_sched_prio_cmp>
   15e54:	2800      	cmp	r0, #0
   15e56:	dc0c      	bgt.n	15e72 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15e58:	b12c      	cbz	r4, 15e66 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   15e5a:	6873      	ldr	r3, [r6, #4]
   15e5c:	429c      	cmp	r4, r3
   15e5e:	d002      	beq.n	15e66 <add_to_waitq_locked+0x38>
   15e60:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15e62:	2c00      	cmp	r4, #0
   15e64:	d1f1      	bne.n	15e4a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   15e66:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   15e68:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15e6a:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15e6c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15e6e:	6075      	str	r5, [r6, #4]
}
   15e70:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   15e72:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15e74:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15e76:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15e78:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15e7a:	6065      	str	r5, [r4, #4]
}
   15e7c:	e7f8      	b.n	15e70 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15e7e:	2400      	movs	r4, #0
   15e80:	e7e3      	b.n	15e4a <add_to_waitq_locked+0x1c>

00015e82 <pend>:
{
   15e82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e86:	4605      	mov	r5, r0
   15e88:	460f      	mov	r7, r1
   15e8a:	4691      	mov	r9, r2
   15e8c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   15e8e:	2400      	movs	r4, #0
	__asm__ volatile(
   15e90:	f04f 0320 	mov.w	r3, #32
   15e94:	f3ef 8611 	mrs	r6, BASEPRI
   15e98:	f383 8812 	msr	BASEPRI_MAX, r3
   15e9c:	f3bf 8f6f 	isb	sy
   15ea0:	b94c      	cbnz	r4, 15eb6 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   15ea2:	4639      	mov	r1, r7
   15ea4:	4628      	mov	r0, r5
   15ea6:	f7ff ffc2 	bl	15e2e <add_to_waitq_locked>
	__asm__ volatile(
   15eaa:	f386 8811 	msr	BASEPRI, r6
   15eae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15eb2:	2401      	movs	r4, #1
   15eb4:	e7f4      	b.n	15ea0 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   15eb6:	464a      	mov	r2, r9
   15eb8:	4643      	mov	r3, r8
   15eba:	4628      	mov	r0, r5
   15ebc:	f7f9 fbd8 	bl	f670 <add_thread_timeout>
}
   15ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015ec4 <z_unpend_first_thread>:
{
   15ec4:	b570      	push	{r4, r5, r6, lr}
   15ec6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15ec8:	2300      	movs	r3, #0
	__asm__ volatile(
   15eca:	f04f 0220 	mov.w	r2, #32
   15ece:	f3ef 8511 	mrs	r5, BASEPRI
   15ed2:	f382 8812 	msr	BASEPRI_MAX, r2
   15ed6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   15eda:	461c      	mov	r4, r3
   15edc:	e013      	b.n	15f06 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15ede:	f7ff ff26 	bl	15d2e <pended_on_thread>
   15ee2:	4621      	mov	r1, r4
   15ee4:	f7ff ff44 	bl	15d70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15ee8:	7b63      	ldrb	r3, [r4, #13]
   15eea:	f023 0302 	bic.w	r3, r3, #2
   15eee:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15ef0:	2300      	movs	r3, #0
   15ef2:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   15ef4:	f104 0018 	add.w	r0, r4, #24
   15ef8:	f000 f826 	bl	15f48 <z_abort_timeout>
	__asm__ volatile(
   15efc:	f385 8811 	msr	BASEPRI, r5
   15f00:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15f04:	2301      	movs	r3, #1
   15f06:	b933      	cbnz	r3, 15f16 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   15f08:	4630      	mov	r0, r6
   15f0a:	f7ff ff39 	bl	15d80 <z_priq_dumb_best>
		if (thread != NULL) {
   15f0e:	4604      	mov	r4, r0
   15f10:	2800      	cmp	r0, #0
   15f12:	d1e4      	bne.n	15ede <z_unpend_first_thread+0x1a>
   15f14:	e7f2      	b.n	15efc <z_unpend_first_thread+0x38>
}
   15f16:	4620      	mov	r0, r4
   15f18:	bd70      	pop	{r4, r5, r6, pc}

00015f1a <remove_timeout>:
{
   15f1a:	b538      	push	{r3, r4, r5, lr}
   15f1c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   15f1e:	f7f9 ffb7 	bl	fe90 <next>
   15f22:	b148      	cbz	r0, 15f38 <remove_timeout+0x1e>
   15f24:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   15f26:	6920      	ldr	r0, [r4, #16]
   15f28:	6965      	ldr	r5, [r4, #20]
   15f2a:	6913      	ldr	r3, [r2, #16]
   15f2c:	6951      	ldr	r1, [r2, #20]
   15f2e:	181b      	adds	r3, r3, r0
   15f30:	eb45 0101 	adc.w	r1, r5, r1
   15f34:	6113      	str	r3, [r2, #16]
   15f36:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   15f38:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   15f3a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   15f3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15f3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15f40:	2300      	movs	r3, #0
   15f42:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   15f44:	6063      	str	r3, [r4, #4]
}
   15f46:	bd38      	pop	{r3, r4, r5, pc}

00015f48 <z_abort_timeout>:
{
   15f48:	b570      	push	{r4, r5, r6, lr}
   15f4a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   15f4c:	2300      	movs	r3, #0
	__asm__ volatile(
   15f4e:	f04f 0220 	mov.w	r2, #32
   15f52:	f3ef 8611 	mrs	r6, BASEPRI
   15f56:	f382 8812 	msr	BASEPRI_MAX, r2
   15f5a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   15f5e:	f06f 0015 	mvn.w	r0, #21
   15f62:	e008      	b.n	15f76 <z_abort_timeout+0x2e>
			remove_timeout(to);
   15f64:	4620      	mov	r0, r4
   15f66:	f7ff ffd8 	bl	15f1a <remove_timeout>
			ret = 0;
   15f6a:	4628      	mov	r0, r5
	__asm__ volatile(
   15f6c:	f386 8811 	msr	BASEPRI, r6
   15f70:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15f74:	2301      	movs	r3, #1
   15f76:	461d      	mov	r5, r3
   15f78:	b91b      	cbnz	r3, 15f82 <z_abort_timeout+0x3a>
	return node->next != NULL;
   15f7a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d1f1      	bne.n	15f64 <z_abort_timeout+0x1c>
   15f80:	e7f4      	b.n	15f6c <z_abort_timeout+0x24>
}
   15f82:	bd70      	pop	{r4, r5, r6, pc}

00015f84 <z_get_next_timeout_expiry>:
{
   15f84:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   15f86:	2300      	movs	r3, #0
	__asm__ volatile(
   15f88:	f04f 0220 	mov.w	r2, #32
   15f8c:	f3ef 8411 	mrs	r4, BASEPRI
   15f90:	f382 8812 	msr	BASEPRI_MAX, r2
   15f94:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   15f98:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   15f9c:	b93b      	cbnz	r3, 15fae <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   15f9e:	f7f9 ff8f 	bl	fec0 <next_timeout>
	__asm__ volatile(
   15fa2:	f384 8811 	msr	BASEPRI, r4
   15fa6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15faa:	2301      	movs	r3, #1
   15fac:	e7f6      	b.n	15f9c <z_get_next_timeout_expiry+0x18>
}
   15fae:	bd10      	pop	{r4, pc}

00015fb0 <z_set_timeout_expiry>:
{
   15fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15fb2:	4606      	mov	r6, r0
   15fb4:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   15fb6:	2300      	movs	r3, #0
	__asm__ volatile(
   15fb8:	f04f 0220 	mov.w	r2, #32
   15fbc:	f3ef 8511 	mrs	r5, BASEPRI
   15fc0:	f382 8812 	msr	BASEPRI_MAX, r2
   15fc4:	f3bf 8f6f 	isb	sy
   15fc8:	e00a      	b.n	15fe0 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   15fca:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   15fcc:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   15fd0:	2801      	cmp	r0, #1
   15fd2:	dd00      	ble.n	15fd6 <z_set_timeout_expiry+0x26>
   15fd4:	b97c      	cbnz	r4, 15ff6 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   15fd6:	f385 8811 	msr	BASEPRI, r5
   15fda:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15fde:	2301      	movs	r3, #1
   15fe0:	461c      	mov	r4, r3
   15fe2:	b97b      	cbnz	r3, 16004 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   15fe4:	f7f9 ff6c 	bl	fec0 <next_timeout>
			      || (ticks <= next_to);
   15fe8:	f1b0 3fff 	cmp.w	r0, #4294967295
   15fec:	d0ed      	beq.n	15fca <z_set_timeout_expiry+0x1a>
   15fee:	42b0      	cmp	r0, r6
   15ff0:	dbec      	blt.n	15fcc <z_set_timeout_expiry+0x1c>
   15ff2:	2401      	movs	r4, #1
   15ff4:	e7ea      	b.n	15fcc <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15ff6:	4639      	mov	r1, r7
   15ff8:	42b0      	cmp	r0, r6
   15ffa:	bfa8      	it	ge
   15ffc:	4630      	movge	r0, r6
   15ffe:	f7ef fe05 	bl	5c0c <sys_clock_set_timeout>
   16002:	e7e8      	b.n	15fd6 <z_set_timeout_expiry+0x26>
}
   16004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016006 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   16006:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   16008:	f7fa f88c 	bl	10124 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1600c:	bd08      	pop	{r3, pc}

0001600e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1600e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   16010:	f7fa f888 	bl	10124 <sys_clock_tick_get>
}
   16014:	bd08      	pop	{r3, pc}

00016016 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   16016:	b900      	cbnz	r0, 1601a <z_impl_k_busy_wait+0x4>
   16018:	4770      	bx	lr
{
   1601a:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1601c:	f7ed fe5c 	bl	3cd8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   16020:	bd08      	pop	{r3, pc}

00016022 <k_heap_init>:
{
   16022:	b510      	push	{r4, lr}
   16024:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   16028:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1602a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1602c:	f7fc f8cc 	bl	121c8 <sys_heap_init>
}
   16030:	bd10      	pop	{r4, pc}

00016032 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   16032:	4770      	bx	lr

00016034 <_ZdlPv>:
   16034:	f7fa bc7c 	b.w	10930 <free>

00016038 <_ZdaPv>:
   16038:	f7ff bffc 	b.w	16034 <_ZdlPv>

0001603c <_Znwj>:
   1603c:	2801      	cmp	r0, #1
   1603e:	bf38      	it	cc
   16040:	2001      	movcc	r0, #1
   16042:	b510      	push	{r4, lr}
   16044:	4604      	mov	r4, r0
   16046:	4620      	mov	r0, r4
   16048:	f7fa fc6a 	bl	10920 <malloc>
   1604c:	b930      	cbnz	r0, 1605c <_Znwj+0x20>
   1604e:	f7fa fa19 	bl	10484 <_ZSt15get_new_handlerv>
   16052:	b908      	cbnz	r0, 16058 <_Znwj+0x1c>
   16054:	f000 f805 	bl	16062 <abort>
   16058:	4780      	blx	r0
   1605a:	e7f4      	b.n	16046 <_Znwj+0xa>
   1605c:	bd10      	pop	{r4, pc}

0001605e <_Znaj>:
   1605e:	f7ff bfed 	b.w	1603c <_Znwj>

00016062 <abort>:
   16062:	2006      	movs	r0, #6
   16064:	b508      	push	{r3, lr}
   16066:	f7fb f9a3 	bl	113b0 <raise>
   1606a:	2001      	movs	r0, #1
   1606c:	f7ee fd2c 	bl	4ac8 <_exit>

00016070 <atoi>:
   16070:	220a      	movs	r2, #10
   16072:	2100      	movs	r1, #0
   16074:	f7fb ba58 	b.w	11528 <strtol>

00016078 <memchr>:
   16078:	b2c9      	uxtb	r1, r1
   1607a:	4603      	mov	r3, r0
   1607c:	4402      	add	r2, r0
   1607e:	b510      	push	{r4, lr}
   16080:	4293      	cmp	r3, r2
   16082:	4618      	mov	r0, r3
   16084:	d101      	bne.n	1608a <memchr+0x12>
   16086:	2000      	movs	r0, #0
   16088:	e003      	b.n	16092 <memchr+0x1a>
   1608a:	7804      	ldrb	r4, [r0, #0]
   1608c:	3301      	adds	r3, #1
   1608e:	428c      	cmp	r4, r1
   16090:	d1f6      	bne.n	16080 <memchr+0x8>
   16092:	bd10      	pop	{r4, pc}

00016094 <memcpy>:
   16094:	440a      	add	r2, r1
   16096:	1e43      	subs	r3, r0, #1
   16098:	4291      	cmp	r1, r2
   1609a:	d100      	bne.n	1609e <memcpy+0xa>
   1609c:	4770      	bx	lr
   1609e:	b510      	push	{r4, lr}
   160a0:	f811 4b01 	ldrb.w	r4, [r1], #1
   160a4:	4291      	cmp	r1, r2
   160a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   160aa:	d1f9      	bne.n	160a0 <memcpy+0xc>
   160ac:	bd10      	pop	{r4, pc}

000160ae <memset>:
   160ae:	4402      	add	r2, r0
   160b0:	4603      	mov	r3, r0
   160b2:	4293      	cmp	r3, r2
   160b4:	d100      	bne.n	160b8 <memset+0xa>
   160b6:	4770      	bx	lr
   160b8:	f803 1b01 	strb.w	r1, [r3], #1
   160bc:	e7f9      	b.n	160b2 <memset+0x4>

000160be <__sfputc_r>:
   160be:	6893      	ldr	r3, [r2, #8]
   160c0:	3b01      	subs	r3, #1
   160c2:	2b00      	cmp	r3, #0
   160c4:	6093      	str	r3, [r2, #8]
   160c6:	b410      	push	{r4}
   160c8:	da07      	bge.n	160da <__sfputc_r+0x1c>
   160ca:	6994      	ldr	r4, [r2, #24]
   160cc:	42a3      	cmp	r3, r4
   160ce:	db01      	blt.n	160d4 <__sfputc_r+0x16>
   160d0:	290a      	cmp	r1, #10
   160d2:	d102      	bne.n	160da <__sfputc_r+0x1c>
   160d4:	bc10      	pop	{r4}
   160d6:	f7fb ba47 	b.w	11568 <__swbuf_r>
   160da:	6813      	ldr	r3, [r2, #0]
   160dc:	1c58      	adds	r0, r3, #1
   160de:	6010      	str	r0, [r2, #0]
   160e0:	4608      	mov	r0, r1
   160e2:	7019      	strb	r1, [r3, #0]
   160e4:	bc10      	pop	{r4}
   160e6:	4770      	bx	lr

000160e8 <__sfputs_r>:
   160e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160ea:	4606      	mov	r6, r0
   160ec:	460f      	mov	r7, r1
   160ee:	4614      	mov	r4, r2
   160f0:	18d5      	adds	r5, r2, r3
   160f2:	42ac      	cmp	r4, r5
   160f4:	d101      	bne.n	160fa <__sfputs_r+0x12>
   160f6:	2000      	movs	r0, #0
   160f8:	e007      	b.n	1610a <__sfputs_r+0x22>
   160fa:	463a      	mov	r2, r7
   160fc:	f814 1b01 	ldrb.w	r1, [r4], #1
   16100:	4630      	mov	r0, r6
   16102:	f7ff ffdc 	bl	160be <__sfputc_r>
   16106:	1c43      	adds	r3, r0, #1
   16108:	d1f3      	bne.n	160f2 <__sfputs_r+0xa>
   1610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001610c <__cvt>:
   1610c:	2b00      	cmp	r3, #0
   1610e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16112:	461f      	mov	r7, r3
   16114:	b088      	sub	sp, #32
   16116:	bfb4      	ite	lt
   16118:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   1611c:	2300      	movge	r3, #0
   1611e:	4614      	mov	r4, r2
   16120:	9a12      	ldr	r2, [sp, #72]	; 0x48
   16122:	bfbc      	itt	lt
   16124:	461f      	movlt	r7, r3
   16126:	232d      	movlt	r3, #45	; 0x2d
   16128:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1612a:	7013      	strb	r3, [r2, #0]
   1612c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1612e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   16132:	f023 0820 	bic.w	r8, r3, #32
   16136:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   1613a:	d005      	beq.n	16148 <__cvt+0x3c>
   1613c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   16140:	d100      	bne.n	16144 <__cvt+0x38>
   16142:	3501      	adds	r5, #1
   16144:	2302      	movs	r3, #2
   16146:	e000      	b.n	1614a <__cvt+0x3e>
   16148:	2303      	movs	r3, #3
   1614a:	aa07      	add	r2, sp, #28
   1614c:	9204      	str	r2, [sp, #16]
   1614e:	aa06      	add	r2, sp, #24
   16150:	e9cd 3500 	strd	r3, r5, [sp]
   16154:	e9cd a202 	strd	sl, r2, [sp, #8]
   16158:	463b      	mov	r3, r7
   1615a:	4622      	mov	r2, r4
   1615c:	f7eb fc60 	bl	1a20 <_dtoa_r>
   16160:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   16164:	4606      	mov	r6, r0
   16166:	d102      	bne.n	1616e <__cvt+0x62>
   16168:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1616a:	07db      	lsls	r3, r3, #31
   1616c:	d522      	bpl.n	161b4 <__cvt+0xa8>
   1616e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   16172:	eb06 0905 	add.w	r9, r6, r5
   16176:	d110      	bne.n	1619a <__cvt+0x8e>
   16178:	7833      	ldrb	r3, [r6, #0]
   1617a:	2b30      	cmp	r3, #48	; 0x30
   1617c:	d10a      	bne.n	16194 <__cvt+0x88>
   1617e:	2200      	movs	r2, #0
   16180:	2300      	movs	r3, #0
   16182:	4620      	mov	r0, r4
   16184:	4639      	mov	r1, r7
   16186:	f7ea fc0b 	bl	9a0 <__aeabi_dcmpeq>
   1618a:	b918      	cbnz	r0, 16194 <__cvt+0x88>
   1618c:	f1c5 0501 	rsb	r5, r5, #1
   16190:	f8ca 5000 	str.w	r5, [sl]
   16194:	f8da 3000 	ldr.w	r3, [sl]
   16198:	4499      	add	r9, r3
   1619a:	2200      	movs	r2, #0
   1619c:	2300      	movs	r3, #0
   1619e:	4620      	mov	r0, r4
   161a0:	4639      	mov	r1, r7
   161a2:	f7ea fbfd 	bl	9a0 <__aeabi_dcmpeq>
   161a6:	b108      	cbz	r0, 161ac <__cvt+0xa0>
   161a8:	f8cd 901c 	str.w	r9, [sp, #28]
   161ac:	2230      	movs	r2, #48	; 0x30
   161ae:	9b07      	ldr	r3, [sp, #28]
   161b0:	454b      	cmp	r3, r9
   161b2:	d307      	bcc.n	161c4 <__cvt+0xb8>
   161b4:	9b07      	ldr	r3, [sp, #28]
   161b6:	4630      	mov	r0, r6
   161b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   161ba:	1b9b      	subs	r3, r3, r6
   161bc:	6013      	str	r3, [r2, #0]
   161be:	b008      	add	sp, #32
   161c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   161c4:	1c59      	adds	r1, r3, #1
   161c6:	9107      	str	r1, [sp, #28]
   161c8:	701a      	strb	r2, [r3, #0]
   161ca:	e7f0      	b.n	161ae <__cvt+0xa2>

000161cc <__exponent>:
   161cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   161ce:	2900      	cmp	r1, #0
   161d0:	4603      	mov	r3, r0
   161d2:	bfb8      	it	lt
   161d4:	4249      	neglt	r1, r1
   161d6:	f803 2b02 	strb.w	r2, [r3], #2
   161da:	bfb4      	ite	lt
   161dc:	222d      	movlt	r2, #45	; 0x2d
   161de:	222b      	movge	r2, #43	; 0x2b
   161e0:	2909      	cmp	r1, #9
   161e2:	7042      	strb	r2, [r0, #1]
   161e4:	dd2a      	ble.n	1623c <__exponent+0x70>
   161e6:	f10d 0407 	add.w	r4, sp, #7
   161ea:	270a      	movs	r7, #10
   161ec:	46a4      	mov	ip, r4
   161ee:	460a      	mov	r2, r1
   161f0:	46a6      	mov	lr, r4
   161f2:	3c01      	subs	r4, #1
   161f4:	2a63      	cmp	r2, #99	; 0x63
   161f6:	fb91 f6f7 	sdiv	r6, r1, r7
   161fa:	fb07 1516 	mls	r5, r7, r6, r1
   161fe:	4631      	mov	r1, r6
   16200:	f105 0530 	add.w	r5, r5, #48	; 0x30
   16204:	f80e 5c01 	strb.w	r5, [lr, #-1]
   16208:	dcf1      	bgt.n	161ee <__exponent+0x22>
   1620a:	3130      	adds	r1, #48	; 0x30
   1620c:	f1ae 0502 	sub.w	r5, lr, #2
   16210:	f804 1c01 	strb.w	r1, [r4, #-1]
   16214:	1c44      	adds	r4, r0, #1
   16216:	4629      	mov	r1, r5
   16218:	4561      	cmp	r1, ip
   1621a:	d30a      	bcc.n	16232 <__exponent+0x66>
   1621c:	f10d 0209 	add.w	r2, sp, #9
   16220:	eba2 020e 	sub.w	r2, r2, lr
   16224:	4565      	cmp	r5, ip
   16226:	bf88      	it	hi
   16228:	2200      	movhi	r2, #0
   1622a:	4413      	add	r3, r2
   1622c:	1a18      	subs	r0, r3, r0
   1622e:	b003      	add	sp, #12
   16230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16232:	f811 2b01 	ldrb.w	r2, [r1], #1
   16236:	f804 2f01 	strb.w	r2, [r4, #1]!
   1623a:	e7ed      	b.n	16218 <__exponent+0x4c>
   1623c:	2330      	movs	r3, #48	; 0x30
   1623e:	3130      	adds	r1, #48	; 0x30
   16240:	7083      	strb	r3, [r0, #2]
   16242:	1d03      	adds	r3, r0, #4
   16244:	70c1      	strb	r1, [r0, #3]
   16246:	e7f1      	b.n	1622c <__exponent+0x60>

00016248 <_printf_common>:
   16248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1624c:	4616      	mov	r6, r2
   1624e:	4699      	mov	r9, r3
   16250:	688a      	ldr	r2, [r1, #8]
   16252:	4607      	mov	r7, r0
   16254:	690b      	ldr	r3, [r1, #16]
   16256:	460c      	mov	r4, r1
   16258:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1625c:	4293      	cmp	r3, r2
   1625e:	bfb8      	it	lt
   16260:	4613      	movlt	r3, r2
   16262:	6033      	str	r3, [r6, #0]
   16264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   16268:	b10a      	cbz	r2, 1626e <_printf_common+0x26>
   1626a:	3301      	adds	r3, #1
   1626c:	6033      	str	r3, [r6, #0]
   1626e:	6823      	ldr	r3, [r4, #0]
   16270:	0699      	lsls	r1, r3, #26
   16272:	bf42      	ittt	mi
   16274:	6833      	ldrmi	r3, [r6, #0]
   16276:	3302      	addmi	r3, #2
   16278:	6033      	strmi	r3, [r6, #0]
   1627a:	6825      	ldr	r5, [r4, #0]
   1627c:	f015 0506 	ands.w	r5, r5, #6
   16280:	d106      	bne.n	16290 <_printf_common+0x48>
   16282:	f104 0a19 	add.w	sl, r4, #25
   16286:	68e3      	ldr	r3, [r4, #12]
   16288:	6832      	ldr	r2, [r6, #0]
   1628a:	1a9b      	subs	r3, r3, r2
   1628c:	42ab      	cmp	r3, r5
   1628e:	dc29      	bgt.n	162e4 <_printf_common+0x9c>
   16290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   16294:	1e13      	subs	r3, r2, #0
   16296:	6822      	ldr	r2, [r4, #0]
   16298:	bf18      	it	ne
   1629a:	2301      	movne	r3, #1
   1629c:	0692      	lsls	r2, r2, #26
   1629e:	d42e      	bmi.n	162fe <_printf_common+0xb6>
   162a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   162a4:	4649      	mov	r1, r9
   162a6:	4638      	mov	r0, r7
   162a8:	47c0      	blx	r8
   162aa:	3001      	adds	r0, #1
   162ac:	d021      	beq.n	162f2 <_printf_common+0xaa>
   162ae:	6823      	ldr	r3, [r4, #0]
   162b0:	341a      	adds	r4, #26
   162b2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   162b6:	f003 0306 	and.w	r3, r3, #6
   162ba:	6832      	ldr	r2, [r6, #0]
   162bc:	2600      	movs	r6, #0
   162be:	2b04      	cmp	r3, #4
   162c0:	f854 3c12 	ldr.w	r3, [r4, #-18]
   162c4:	bf08      	it	eq
   162c6:	1aad      	subeq	r5, r5, r2
   162c8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   162cc:	bf14      	ite	ne
   162ce:	2500      	movne	r5, #0
   162d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   162d4:	4293      	cmp	r3, r2
   162d6:	bfc4      	itt	gt
   162d8:	1a9b      	subgt	r3, r3, r2
   162da:	18ed      	addgt	r5, r5, r3
   162dc:	42b5      	cmp	r5, r6
   162de:	d11a      	bne.n	16316 <_printf_common+0xce>
   162e0:	2000      	movs	r0, #0
   162e2:	e008      	b.n	162f6 <_printf_common+0xae>
   162e4:	2301      	movs	r3, #1
   162e6:	4652      	mov	r2, sl
   162e8:	4649      	mov	r1, r9
   162ea:	4638      	mov	r0, r7
   162ec:	47c0      	blx	r8
   162ee:	3001      	adds	r0, #1
   162f0:	d103      	bne.n	162fa <_printf_common+0xb2>
   162f2:	f04f 30ff 	mov.w	r0, #4294967295
   162f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162fa:	3501      	adds	r5, #1
   162fc:	e7c3      	b.n	16286 <_printf_common+0x3e>
   162fe:	18e1      	adds	r1, r4, r3
   16300:	1c5a      	adds	r2, r3, #1
   16302:	2030      	movs	r0, #48	; 0x30
   16304:	3302      	adds	r3, #2
   16306:	4422      	add	r2, r4
   16308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1630c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   16310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   16314:	e7c4      	b.n	162a0 <_printf_common+0x58>
   16316:	2301      	movs	r3, #1
   16318:	4622      	mov	r2, r4
   1631a:	4649      	mov	r1, r9
   1631c:	4638      	mov	r0, r7
   1631e:	47c0      	blx	r8
   16320:	3001      	adds	r0, #1
   16322:	d0e6      	beq.n	162f2 <_printf_common+0xaa>
   16324:	3601      	adds	r6, #1
   16326:	e7d9      	b.n	162dc <_printf_common+0x94>

00016328 <_raise_r>:
   16328:	291f      	cmp	r1, #31
   1632a:	b538      	push	{r3, r4, r5, lr}
   1632c:	4604      	mov	r4, r0
   1632e:	460d      	mov	r5, r1
   16330:	d904      	bls.n	1633c <_raise_r+0x14>
   16332:	2316      	movs	r3, #22
   16334:	6003      	str	r3, [r0, #0]
   16336:	f04f 30ff 	mov.w	r0, #4294967295
   1633a:	bd38      	pop	{r3, r4, r5, pc}
   1633c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1633e:	b112      	cbz	r2, 16346 <_raise_r+0x1e>
   16340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   16344:	b94b      	cbnz	r3, 1635a <_raise_r+0x32>
   16346:	4620      	mov	r0, r4
   16348:	f000 f816 	bl	16378 <_getpid_r>
   1634c:	462a      	mov	r2, r5
   1634e:	4601      	mov	r1, r0
   16350:	4620      	mov	r0, r4
   16352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16356:	f7fb b833 	b.w	113c0 <_kill_r>
   1635a:	2b01      	cmp	r3, #1
   1635c:	d00a      	beq.n	16374 <_raise_r+0x4c>
   1635e:	1c59      	adds	r1, r3, #1
   16360:	d103      	bne.n	1636a <_raise_r+0x42>
   16362:	2316      	movs	r3, #22
   16364:	6003      	str	r3, [r0, #0]
   16366:	2001      	movs	r0, #1
   16368:	e7e7      	b.n	1633a <_raise_r+0x12>
   1636a:	2400      	movs	r4, #0
   1636c:	4628      	mov	r0, r5
   1636e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   16372:	4798      	blx	r3
   16374:	2000      	movs	r0, #0
   16376:	e7e0      	b.n	1633a <_raise_r+0x12>

00016378 <_getpid_r>:
   16378:	f7fc ba1e 	b.w	127b8 <_getpid>

0001637c <strncmp>:
   1637c:	b510      	push	{r4, lr}
   1637e:	b16a      	cbz	r2, 1639c <strncmp+0x20>
   16380:	3901      	subs	r1, #1
   16382:	1884      	adds	r4, r0, r2
   16384:	f810 3b01 	ldrb.w	r3, [r0], #1
   16388:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1638c:	4293      	cmp	r3, r2
   1638e:	d103      	bne.n	16398 <strncmp+0x1c>
   16390:	42a0      	cmp	r0, r4
   16392:	d001      	beq.n	16398 <strncmp+0x1c>
   16394:	2b00      	cmp	r3, #0
   16396:	d1f5      	bne.n	16384 <strncmp+0x8>
   16398:	1a98      	subs	r0, r3, r2
   1639a:	bd10      	pop	{r4, pc}
   1639c:	4610      	mov	r0, r2
   1639e:	e7fc      	b.n	1639a <strncmp+0x1e>

000163a0 <strncpy>:
   163a0:	3901      	subs	r1, #1
   163a2:	4603      	mov	r3, r0
   163a4:	b510      	push	{r4, lr}
   163a6:	b132      	cbz	r2, 163b6 <strncpy+0x16>
   163a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   163ac:	3a01      	subs	r2, #1
   163ae:	f803 4b01 	strb.w	r4, [r3], #1
   163b2:	2c00      	cmp	r4, #0
   163b4:	d1f7      	bne.n	163a6 <strncpy+0x6>
   163b6:	441a      	add	r2, r3
   163b8:	2100      	movs	r1, #0
   163ba:	4293      	cmp	r3, r2
   163bc:	d100      	bne.n	163c0 <strncpy+0x20>
   163be:	bd10      	pop	{r4, pc}
   163c0:	f803 1b01 	strb.w	r1, [r3], #1
   163c4:	e7f9      	b.n	163ba <strncpy+0x1a>

000163c6 <strnlen>:
   163c6:	4602      	mov	r2, r0
   163c8:	4401      	add	r1, r0
   163ca:	b510      	push	{r4, lr}
   163cc:	428a      	cmp	r2, r1
   163ce:	4613      	mov	r3, r2
   163d0:	d101      	bne.n	163d6 <strnlen+0x10>
   163d2:	1a18      	subs	r0, r3, r0
   163d4:	bd10      	pop	{r4, pc}
   163d6:	781c      	ldrb	r4, [r3, #0]
   163d8:	3201      	adds	r2, #1
   163da:	2c00      	cmp	r4, #0
   163dc:	d1f6      	bne.n	163cc <strnlen+0x6>
   163de:	e7f8      	b.n	163d2 <strnlen+0xc>

000163e0 <__strtok_r>:
   163e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   163e2:	b908      	cbnz	r0, 163e8 <__strtok_r+0x8>
   163e4:	6810      	ldr	r0, [r2, #0]
   163e6:	b188      	cbz	r0, 1640c <__strtok_r+0x2c>
   163e8:	4604      	mov	r4, r0
   163ea:	4620      	mov	r0, r4
   163ec:	460f      	mov	r7, r1
   163ee:	f814 5b01 	ldrb.w	r5, [r4], #1
   163f2:	f817 6b01 	ldrb.w	r6, [r7], #1
   163f6:	b91e      	cbnz	r6, 16400 <__strtok_r+0x20>
   163f8:	b965      	cbnz	r5, 16414 <__strtok_r+0x34>
   163fa:	4628      	mov	r0, r5
   163fc:	6015      	str	r5, [r2, #0]
   163fe:	e005      	b.n	1640c <__strtok_r+0x2c>
   16400:	42b5      	cmp	r5, r6
   16402:	d1f6      	bne.n	163f2 <__strtok_r+0x12>
   16404:	2b00      	cmp	r3, #0
   16406:	d1f0      	bne.n	163ea <__strtok_r+0xa>
   16408:	6014      	str	r4, [r2, #0]
   1640a:	7003      	strb	r3, [r0, #0]
   1640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1640e:	461c      	mov	r4, r3
   16410:	e00c      	b.n	1642c <__strtok_r+0x4c>
   16412:	b915      	cbnz	r5, 1641a <__strtok_r+0x3a>
   16414:	f814 3b01 	ldrb.w	r3, [r4], #1
   16418:	460e      	mov	r6, r1
   1641a:	f816 5b01 	ldrb.w	r5, [r6], #1
   1641e:	42ab      	cmp	r3, r5
   16420:	d1f7      	bne.n	16412 <__strtok_r+0x32>
   16422:	2b00      	cmp	r3, #0
   16424:	d0f3      	beq.n	1640e <__strtok_r+0x2e>
   16426:	2300      	movs	r3, #0
   16428:	f804 3c01 	strb.w	r3, [r4, #-1]
   1642c:	6014      	str	r4, [r2, #0]
   1642e:	e7ed      	b.n	1640c <__strtok_r+0x2c>

00016430 <quorem>:
   16430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16434:	6903      	ldr	r3, [r0, #16]
   16436:	4607      	mov	r7, r0
   16438:	690c      	ldr	r4, [r1, #16]
   1643a:	42a3      	cmp	r3, r4
   1643c:	f2c0 8085 	blt.w	1654a <quorem+0x11a>
   16440:	3c01      	subs	r4, #1
   16442:	f100 0514 	add.w	r5, r0, #20
   16446:	f101 0814 	add.w	r8, r1, #20
   1644a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1644e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   16452:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   16456:	9301      	str	r3, [sp, #4]
   16458:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   1645c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   16460:	3301      	adds	r3, #1
   16462:	429a      	cmp	r2, r3
   16464:	fbb2 f6f3 	udiv	r6, r2, r3
   16468:	d333      	bcc.n	164d2 <quorem+0xa2>
   1646a:	f04f 0e00 	mov.w	lr, #0
   1646e:	4640      	mov	r0, r8
   16470:	46ac      	mov	ip, r5
   16472:	46f2      	mov	sl, lr
   16474:	f850 2b04 	ldr.w	r2, [r0], #4
   16478:	b293      	uxth	r3, r2
   1647a:	4581      	cmp	r9, r0
   1647c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   16480:	fb06 e303 	mla	r3, r6, r3, lr
   16484:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   16488:	b29b      	uxth	r3, r3
   1648a:	fb06 e202 	mla	r2, r6, r2, lr
   1648e:	ebaa 0303 	sub.w	r3, sl, r3
   16492:	f8dc a000 	ldr.w	sl, [ip]
   16496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1649a:	fa1f fa8a 	uxth.w	sl, sl
   1649e:	4453      	add	r3, sl
   164a0:	fa1f fa82 	uxth.w	sl, r2
   164a4:	f8dc 2000 	ldr.w	r2, [ip]
   164a8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   164ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
   164b0:	b29b      	uxth	r3, r3
   164b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
   164b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   164ba:	f84c 3b04 	str.w	r3, [ip], #4
   164be:	d2d9      	bcs.n	16474 <quorem+0x44>
   164c0:	f855 300b 	ldr.w	r3, [r5, fp]
   164c4:	b92b      	cbnz	r3, 164d2 <quorem+0xa2>
   164c6:	9b01      	ldr	r3, [sp, #4]
   164c8:	3b04      	subs	r3, #4
   164ca:	429d      	cmp	r5, r3
   164cc:	461a      	mov	r2, r3
   164ce:	d330      	bcc.n	16532 <quorem+0x102>
   164d0:	613c      	str	r4, [r7, #16]
   164d2:	4638      	mov	r0, r7
   164d4:	f000 fa6f 	bl	169b6 <__mcmp>
   164d8:	2800      	cmp	r0, #0
   164da:	db26      	blt.n	1652a <quorem+0xfa>
   164dc:	3601      	adds	r6, #1
   164de:	4628      	mov	r0, r5
   164e0:	f04f 0c00 	mov.w	ip, #0
   164e4:	f858 1b04 	ldr.w	r1, [r8], #4
   164e8:	f8d0 e000 	ldr.w	lr, [r0]
   164ec:	b28b      	uxth	r3, r1
   164ee:	45c1      	cmp	r9, r8
   164f0:	fa1f f28e 	uxth.w	r2, lr
   164f4:	ebac 0303 	sub.w	r3, ip, r3
   164f8:	4413      	add	r3, r2
   164fa:	ea4f 4211 	mov.w	r2, r1, lsr #16
   164fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   16502:	eb02 4223 	add.w	r2, r2, r3, asr #16
   16506:	b29b      	uxth	r3, r3
   16508:	ea4f 4c22 	mov.w	ip, r2, asr #16
   1650c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16510:	f840 3b04 	str.w	r3, [r0], #4
   16514:	d2e6      	bcs.n	164e4 <quorem+0xb4>
   16516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1651a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1651e:	b922      	cbnz	r2, 1652a <quorem+0xfa>
   16520:	3b04      	subs	r3, #4
   16522:	429d      	cmp	r5, r3
   16524:	461a      	mov	r2, r3
   16526:	d30a      	bcc.n	1653e <quorem+0x10e>
   16528:	613c      	str	r4, [r7, #16]
   1652a:	4630      	mov	r0, r6
   1652c:	b003      	add	sp, #12
   1652e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16532:	6812      	ldr	r2, [r2, #0]
   16534:	3b04      	subs	r3, #4
   16536:	2a00      	cmp	r2, #0
   16538:	d1ca      	bne.n	164d0 <quorem+0xa0>
   1653a:	3c01      	subs	r4, #1
   1653c:	e7c5      	b.n	164ca <quorem+0x9a>
   1653e:	6812      	ldr	r2, [r2, #0]
   16540:	3b04      	subs	r3, #4
   16542:	2a00      	cmp	r2, #0
   16544:	d1f0      	bne.n	16528 <quorem+0xf8>
   16546:	3c01      	subs	r4, #1
   16548:	e7eb      	b.n	16522 <quorem+0xf2>
   1654a:	2000      	movs	r0, #0
   1654c:	e7ee      	b.n	1652c <quorem+0xfc>

0001654e <__sfmoreglue>:
   1654e:	b570      	push	{r4, r5, r6, lr}
   16550:	1e4a      	subs	r2, r1, #1
   16552:	2568      	movs	r5, #104	; 0x68
   16554:	460e      	mov	r6, r1
   16556:	4355      	muls	r5, r2
   16558:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1655c:	f7fa fa3e 	bl	109dc <_malloc_r>
   16560:	4604      	mov	r4, r0
   16562:	b140      	cbz	r0, 16576 <__sfmoreglue+0x28>
   16564:	2100      	movs	r1, #0
   16566:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1656a:	e9c0 1600 	strd	r1, r6, [r0]
   1656e:	300c      	adds	r0, #12
   16570:	60a0      	str	r0, [r4, #8]
   16572:	f7ff fd9c 	bl	160ae <memset>
   16576:	4620      	mov	r0, r4
   16578:	bd70      	pop	{r4, r5, r6, pc}

0001657a <_fwalk_reent>:
   1657a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1657e:	4606      	mov	r6, r0
   16580:	4688      	mov	r8, r1
   16582:	f100 0448 	add.w	r4, r0, #72	; 0x48
   16586:	2700      	movs	r7, #0
   16588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   1658c:	f1b9 0901 	subs.w	r9, r9, #1
   16590:	d505      	bpl.n	1659e <_fwalk_reent+0x24>
   16592:	6824      	ldr	r4, [r4, #0]
   16594:	2c00      	cmp	r4, #0
   16596:	d1f7      	bne.n	16588 <_fwalk_reent+0xe>
   16598:	4638      	mov	r0, r7
   1659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1659e:	89ab      	ldrh	r3, [r5, #12]
   165a0:	2b01      	cmp	r3, #1
   165a2:	d907      	bls.n	165b4 <_fwalk_reent+0x3a>
   165a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   165a8:	3301      	adds	r3, #1
   165aa:	d003      	beq.n	165b4 <_fwalk_reent+0x3a>
   165ac:	4629      	mov	r1, r5
   165ae:	4630      	mov	r0, r6
   165b0:	47c0      	blx	r8
   165b2:	4307      	orrs	r7, r0
   165b4:	3568      	adds	r5, #104	; 0x68
   165b6:	e7e9      	b.n	1658c <_fwalk_reent+0x12>

000165b8 <__swhatbuf_r>:
   165b8:	b570      	push	{r4, r5, r6, lr}
   165ba:	460e      	mov	r6, r1
   165bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   165c0:	b096      	sub	sp, #88	; 0x58
   165c2:	4614      	mov	r4, r2
   165c4:	2900      	cmp	r1, #0
   165c6:	461d      	mov	r5, r3
   165c8:	da07      	bge.n	165da <__swhatbuf_r+0x22>
   165ca:	2300      	movs	r3, #0
   165cc:	602b      	str	r3, [r5, #0]
   165ce:	89b3      	ldrh	r3, [r6, #12]
   165d0:	061a      	lsls	r2, r3, #24
   165d2:	d410      	bmi.n	165f6 <__swhatbuf_r+0x3e>
   165d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   165d8:	e00e      	b.n	165f8 <__swhatbuf_r+0x40>
   165da:	466a      	mov	r2, sp
   165dc:	f7fb fac4 	bl	11b68 <_fstat_r>
   165e0:	2800      	cmp	r0, #0
   165e2:	dbf2      	blt.n	165ca <__swhatbuf_r+0x12>
   165e4:	9a01      	ldr	r2, [sp, #4]
   165e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   165ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   165ee:	425a      	negs	r2, r3
   165f0:	415a      	adcs	r2, r3
   165f2:	602a      	str	r2, [r5, #0]
   165f4:	e7ee      	b.n	165d4 <__swhatbuf_r+0x1c>
   165f6:	2340      	movs	r3, #64	; 0x40
   165f8:	2000      	movs	r0, #0
   165fa:	6023      	str	r3, [r4, #0]
   165fc:	b016      	add	sp, #88	; 0x58
   165fe:	bd70      	pop	{r4, r5, r6, pc}

00016600 <_Balloc>:
   16600:	b570      	push	{r4, r5, r6, lr}
   16602:	6a46      	ldr	r6, [r0, #36]	; 0x24
   16604:	4604      	mov	r4, r0
   16606:	460d      	mov	r5, r1
   16608:	b93e      	cbnz	r6, 1661a <_Balloc+0x1a>
   1660a:	2010      	movs	r0, #16
   1660c:	f7fa f988 	bl	10920 <malloc>
   16610:	6260      	str	r0, [r4, #36]	; 0x24
   16612:	6006      	str	r6, [r0, #0]
   16614:	60c6      	str	r6, [r0, #12]
   16616:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1661a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1661c:	68f3      	ldr	r3, [r6, #12]
   1661e:	b183      	cbz	r3, 16642 <_Balloc+0x42>
   16620:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16622:	68db      	ldr	r3, [r3, #12]
   16624:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   16628:	b9b8      	cbnz	r0, 1665a <_Balloc+0x5a>
   1662a:	2101      	movs	r1, #1
   1662c:	4620      	mov	r0, r4
   1662e:	fa01 f605 	lsl.w	r6, r1, r5
   16632:	1d72      	adds	r2, r6, #5
   16634:	0092      	lsls	r2, r2, #2
   16636:	f000 faa5 	bl	16b84 <_calloc_r>
   1663a:	b160      	cbz	r0, 16656 <_Balloc+0x56>
   1663c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   16640:	e00e      	b.n	16660 <_Balloc+0x60>
   16642:	2221      	movs	r2, #33	; 0x21
   16644:	2104      	movs	r1, #4
   16646:	4620      	mov	r0, r4
   16648:	f000 fa9c 	bl	16b84 <_calloc_r>
   1664c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1664e:	60f0      	str	r0, [r6, #12]
   16650:	68db      	ldr	r3, [r3, #12]
   16652:	2b00      	cmp	r3, #0
   16654:	d1e4      	bne.n	16620 <_Balloc+0x20>
   16656:	2000      	movs	r0, #0
   16658:	bd70      	pop	{r4, r5, r6, pc}
   1665a:	6802      	ldr	r2, [r0, #0]
   1665c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   16660:	2300      	movs	r3, #0
   16662:	e9c0 3303 	strd	r3, r3, [r0, #12]
   16666:	e7f7      	b.n	16658 <_Balloc+0x58>

00016668 <_Bfree>:
   16668:	b570      	push	{r4, r5, r6, lr}
   1666a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1666c:	4605      	mov	r5, r0
   1666e:	460c      	mov	r4, r1
   16670:	b93e      	cbnz	r6, 16682 <_Bfree+0x1a>
   16672:	2010      	movs	r0, #16
   16674:	f7fa f954 	bl	10920 <malloc>
   16678:	6268      	str	r0, [r5, #36]	; 0x24
   1667a:	6006      	str	r6, [r0, #0]
   1667c:	60c6      	str	r6, [r0, #12]
   1667e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   16682:	b13c      	cbz	r4, 16694 <_Bfree+0x2c>
   16684:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16686:	6862      	ldr	r2, [r4, #4]
   16688:	68db      	ldr	r3, [r3, #12]
   1668a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1668e:	6021      	str	r1, [r4, #0]
   16690:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   16694:	bd70      	pop	{r4, r5, r6, pc}

00016696 <__multadd>:
   16696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1669a:	4607      	mov	r7, r0
   1669c:	4698      	mov	r8, r3
   1669e:	460c      	mov	r4, r1
   166a0:	690e      	ldr	r6, [r1, #16]
   166a2:	f101 0014 	add.w	r0, r1, #20
   166a6:	2300      	movs	r3, #0
   166a8:	6805      	ldr	r5, [r0, #0]
   166aa:	3301      	adds	r3, #1
   166ac:	b2a9      	uxth	r1, r5
   166ae:	429e      	cmp	r6, r3
   166b0:	ea4f 4515 	mov.w	r5, r5, lsr #16
   166b4:	fb02 8101 	mla	r1, r2, r1, r8
   166b8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   166bc:	b289      	uxth	r1, r1
   166be:	fb02 c505 	mla	r5, r2, r5, ip
   166c2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   166c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
   166ca:	f840 1b04 	str.w	r1, [r0], #4
   166ce:	dceb      	bgt.n	166a8 <__multadd+0x12>
   166d0:	f1b8 0f00 	cmp.w	r8, #0
   166d4:	d01b      	beq.n	1670e <__multadd+0x78>
   166d6:	68a3      	ldr	r3, [r4, #8]
   166d8:	42b3      	cmp	r3, r6
   166da:	dc12      	bgt.n	16702 <__multadd+0x6c>
   166dc:	6861      	ldr	r1, [r4, #4]
   166de:	4638      	mov	r0, r7
   166e0:	3101      	adds	r1, #1
   166e2:	f7ff ff8d 	bl	16600 <_Balloc>
   166e6:	6922      	ldr	r2, [r4, #16]
   166e8:	4605      	mov	r5, r0
   166ea:	f104 010c 	add.w	r1, r4, #12
   166ee:	3202      	adds	r2, #2
   166f0:	300c      	adds	r0, #12
   166f2:	0092      	lsls	r2, r2, #2
   166f4:	f7ff fcce 	bl	16094 <memcpy>
   166f8:	4621      	mov	r1, r4
   166fa:	462c      	mov	r4, r5
   166fc:	4638      	mov	r0, r7
   166fe:	f7ff ffb3 	bl	16668 <_Bfree>
   16702:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   16706:	3601      	adds	r6, #1
   16708:	f8c3 8014 	str.w	r8, [r3, #20]
   1670c:	6126      	str	r6, [r4, #16]
   1670e:	4620      	mov	r0, r4
   16710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016714 <__hi0bits>:
   16714:	0c02      	lsrs	r2, r0, #16
   16716:	4603      	mov	r3, r0
   16718:	0412      	lsls	r2, r2, #16
   1671a:	b9ca      	cbnz	r2, 16750 <__hi0bits+0x3c>
   1671c:	0403      	lsls	r3, r0, #16
   1671e:	2010      	movs	r0, #16
   16720:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   16724:	bf04      	itt	eq
   16726:	021b      	lsleq	r3, r3, #8
   16728:	3008      	addeq	r0, #8
   1672a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1672e:	bf04      	itt	eq
   16730:	011b      	lsleq	r3, r3, #4
   16732:	3004      	addeq	r0, #4
   16734:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   16738:	bf04      	itt	eq
   1673a:	009b      	lsleq	r3, r3, #2
   1673c:	3002      	addeq	r0, #2
   1673e:	2b00      	cmp	r3, #0
   16740:	db05      	blt.n	1674e <__hi0bits+0x3a>
   16742:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   16746:	f100 0001 	add.w	r0, r0, #1
   1674a:	bf08      	it	eq
   1674c:	2020      	moveq	r0, #32
   1674e:	4770      	bx	lr
   16750:	2000      	movs	r0, #0
   16752:	e7e5      	b.n	16720 <__hi0bits+0xc>

00016754 <__lo0bits>:
   16754:	6803      	ldr	r3, [r0, #0]
   16756:	4602      	mov	r2, r0
   16758:	f013 0007 	ands.w	r0, r3, #7
   1675c:	d00b      	beq.n	16776 <__lo0bits+0x22>
   1675e:	07d9      	lsls	r1, r3, #31
   16760:	d422      	bmi.n	167a8 <__lo0bits+0x54>
   16762:	0798      	lsls	r0, r3, #30
   16764:	bf47      	ittee	mi
   16766:	085b      	lsrmi	r3, r3, #1
   16768:	2001      	movmi	r0, #1
   1676a:	089b      	lsrpl	r3, r3, #2
   1676c:	2002      	movpl	r0, #2
   1676e:	bf4c      	ite	mi
   16770:	6013      	strmi	r3, [r2, #0]
   16772:	6013      	strpl	r3, [r2, #0]
   16774:	4770      	bx	lr
   16776:	b299      	uxth	r1, r3
   16778:	b909      	cbnz	r1, 1677e <__lo0bits+0x2a>
   1677a:	0c1b      	lsrs	r3, r3, #16
   1677c:	2010      	movs	r0, #16
   1677e:	f013 0fff 	tst.w	r3, #255	; 0xff
   16782:	bf04      	itt	eq
   16784:	0a1b      	lsreq	r3, r3, #8
   16786:	3008      	addeq	r0, #8
   16788:	0719      	lsls	r1, r3, #28
   1678a:	bf04      	itt	eq
   1678c:	091b      	lsreq	r3, r3, #4
   1678e:	3004      	addeq	r0, #4
   16790:	0799      	lsls	r1, r3, #30
   16792:	bf04      	itt	eq
   16794:	089b      	lsreq	r3, r3, #2
   16796:	3002      	addeq	r0, #2
   16798:	07d9      	lsls	r1, r3, #31
   1679a:	d403      	bmi.n	167a4 <__lo0bits+0x50>
   1679c:	085b      	lsrs	r3, r3, #1
   1679e:	f100 0001 	add.w	r0, r0, #1
   167a2:	d003      	beq.n	167ac <__lo0bits+0x58>
   167a4:	6013      	str	r3, [r2, #0]
   167a6:	4770      	bx	lr
   167a8:	2000      	movs	r0, #0
   167aa:	4770      	bx	lr
   167ac:	2020      	movs	r0, #32
   167ae:	4770      	bx	lr

000167b0 <__i2b>:
   167b0:	b510      	push	{r4, lr}
   167b2:	460c      	mov	r4, r1
   167b4:	2101      	movs	r1, #1
   167b6:	f7ff ff23 	bl	16600 <_Balloc>
   167ba:	2201      	movs	r2, #1
   167bc:	6144      	str	r4, [r0, #20]
   167be:	6102      	str	r2, [r0, #16]
   167c0:	bd10      	pop	{r4, pc}

000167c2 <__multiply>:
   167c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c6:	4615      	mov	r5, r2
   167c8:	690a      	ldr	r2, [r1, #16]
   167ca:	460c      	mov	r4, r1
   167cc:	b085      	sub	sp, #20
   167ce:	692b      	ldr	r3, [r5, #16]
   167d0:	429a      	cmp	r2, r3
   167d2:	bfbe      	ittt	lt
   167d4:	460b      	movlt	r3, r1
   167d6:	462c      	movlt	r4, r5
   167d8:	461d      	movlt	r5, r3
   167da:	6927      	ldr	r7, [r4, #16]
   167dc:	68a3      	ldr	r3, [r4, #8]
   167de:	f8d5 9010 	ldr.w	r9, [r5, #16]
   167e2:	6861      	ldr	r1, [r4, #4]
   167e4:	eb07 0609 	add.w	r6, r7, r9
   167e8:	42b3      	cmp	r3, r6
   167ea:	bfb8      	it	lt
   167ec:	3101      	addlt	r1, #1
   167ee:	f7ff ff07 	bl	16600 <_Balloc>
   167f2:	f100 0114 	add.w	r1, r0, #20
   167f6:	2200      	movs	r2, #0
   167f8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   167fc:	460b      	mov	r3, r1
   167fe:	4543      	cmp	r3, r8
   16800:	d31d      	bcc.n	1683e <__multiply+0x7c>
   16802:	f104 0314 	add.w	r3, r4, #20
   16806:	f105 0214 	add.w	r2, r5, #20
   1680a:	f104 0515 	add.w	r5, r4, #21
   1680e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   16812:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   16816:	9302      	str	r3, [sp, #8]
   16818:	1b3b      	subs	r3, r7, r4
   1681a:	3b15      	subs	r3, #21
   1681c:	f023 0303 	bic.w	r3, r3, #3
   16820:	3304      	adds	r3, #4
   16822:	42af      	cmp	r7, r5
   16824:	bf38      	it	cc
   16826:	2304      	movcc	r3, #4
   16828:	9301      	str	r3, [sp, #4]
   1682a:	9b02      	ldr	r3, [sp, #8]
   1682c:	9203      	str	r2, [sp, #12]
   1682e:	4293      	cmp	r3, r2
   16830:	d808      	bhi.n	16844 <__multiply+0x82>
   16832:	2e00      	cmp	r6, #0
   16834:	dc5a      	bgt.n	168ec <__multiply+0x12a>
   16836:	6106      	str	r6, [r0, #16]
   16838:	b005      	add	sp, #20
   1683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1683e:	f843 2b04 	str.w	r2, [r3], #4
   16842:	e7dc      	b.n	167fe <__multiply+0x3c>
   16844:	f8b2 a000 	ldrh.w	sl, [r2]
   16848:	f1ba 0f00 	cmp.w	sl, #0
   1684c:	d024      	beq.n	16898 <__multiply+0xd6>
   1684e:	f104 0e14 	add.w	lr, r4, #20
   16852:	4689      	mov	r9, r1
   16854:	f04f 0c00 	mov.w	ip, #0
   16858:	f85e 5b04 	ldr.w	r5, [lr], #4
   1685c:	f8d9 b000 	ldr.w	fp, [r9]
   16860:	b2ab      	uxth	r3, r5
   16862:	4577      	cmp	r7, lr
   16864:	fa1f fb8b 	uxth.w	fp, fp
   16868:	fb0a b303 	mla	r3, sl, r3, fp
   1686c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   16870:	f8d9 5000 	ldr.w	r5, [r9]
   16874:	4463      	add	r3, ip
   16876:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   1687a:	fb0a c50b 	mla	r5, sl, fp, ip
   1687e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   16882:	b29b      	uxth	r3, r3
   16884:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   16888:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   1688c:	f849 3b04 	str.w	r3, [r9], #4
   16890:	d8e2      	bhi.n	16858 <__multiply+0x96>
   16892:	9b01      	ldr	r3, [sp, #4]
   16894:	f841 c003 	str.w	ip, [r1, r3]
   16898:	9b03      	ldr	r3, [sp, #12]
   1689a:	3204      	adds	r2, #4
   1689c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   168a0:	f1b9 0f00 	cmp.w	r9, #0
   168a4:	d020      	beq.n	168e8 <__multiply+0x126>
   168a6:	680b      	ldr	r3, [r1, #0]
   168a8:	f104 0c14 	add.w	ip, r4, #20
   168ac:	468e      	mov	lr, r1
   168ae:	f04f 0a00 	mov.w	sl, #0
   168b2:	f8bc 5000 	ldrh.w	r5, [ip]
   168b6:	b29b      	uxth	r3, r3
   168b8:	f8be b002 	ldrh.w	fp, [lr, #2]
   168bc:	fb09 b505 	mla	r5, r9, r5, fp
   168c0:	44aa      	add	sl, r5
   168c2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   168c6:	f84e 3b04 	str.w	r3, [lr], #4
   168ca:	f85c 3b04 	ldr.w	r3, [ip], #4
   168ce:	f8be 5000 	ldrh.w	r5, [lr]
   168d2:	0c1b      	lsrs	r3, r3, #16
   168d4:	4567      	cmp	r7, ip
   168d6:	fb09 5303 	mla	r3, r9, r3, r5
   168da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   168de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   168e2:	d8e6      	bhi.n	168b2 <__multiply+0xf0>
   168e4:	9d01      	ldr	r5, [sp, #4]
   168e6:	514b      	str	r3, [r1, r5]
   168e8:	3104      	adds	r1, #4
   168ea:	e79e      	b.n	1682a <__multiply+0x68>
   168ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   168f0:	2b00      	cmp	r3, #0
   168f2:	d1a0      	bne.n	16836 <__multiply+0x74>
   168f4:	3e01      	subs	r6, #1
   168f6:	e79c      	b.n	16832 <__multiply+0x70>

000168f8 <__lshift>:
   168f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168fc:	460c      	mov	r4, r1
   168fe:	4607      	mov	r7, r0
   16900:	4691      	mov	r9, r2
   16902:	ea4f 1a62 	mov.w	sl, r2, asr #5
   16906:	6923      	ldr	r3, [r4, #16]
   16908:	6849      	ldr	r1, [r1, #4]
   1690a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   1690e:	68a3      	ldr	r3, [r4, #8]
   16910:	f108 0601 	add.w	r6, r8, #1
   16914:	42b3      	cmp	r3, r6
   16916:	db3f      	blt.n	16998 <__lshift+0xa0>
   16918:	4638      	mov	r0, r7
   1691a:	f7ff fe71 	bl	16600 <_Balloc>
   1691e:	2300      	movs	r3, #0
   16920:	4605      	mov	r5, r0
   16922:	f100 0114 	add.w	r1, r0, #20
   16926:	f100 0210 	add.w	r2, r0, #16
   1692a:	4618      	mov	r0, r3
   1692c:	4553      	cmp	r3, sl
   1692e:	db36      	blt.n	1699e <__lshift+0xa6>
   16930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   16934:	f104 0314 	add.w	r3, r4, #20
   16938:	6920      	ldr	r0, [r4, #16]
   1693a:	f019 091f 	ands.w	r9, r9, #31
   1693e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   16942:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16946:	d02e      	beq.n	169a6 <__lshift+0xae>
   16948:	f1c9 0e20 	rsb	lr, r9, #32
   1694c:	468a      	mov	sl, r1
   1694e:	2200      	movs	r2, #0
   16950:	6818      	ldr	r0, [r3, #0]
   16952:	fa00 f009 	lsl.w	r0, r0, r9
   16956:	4302      	orrs	r2, r0
   16958:	f84a 2b04 	str.w	r2, [sl], #4
   1695c:	f853 2b04 	ldr.w	r2, [r3], #4
   16960:	459c      	cmp	ip, r3
   16962:	fa22 f20e 	lsr.w	r2, r2, lr
   16966:	d8f3      	bhi.n	16950 <__lshift+0x58>
   16968:	ebac 0304 	sub.w	r3, ip, r4
   1696c:	f104 0015 	add.w	r0, r4, #21
   16970:	3b15      	subs	r3, #21
   16972:	f023 0303 	bic.w	r3, r3, #3
   16976:	3304      	adds	r3, #4
   16978:	4560      	cmp	r0, ip
   1697a:	bf88      	it	hi
   1697c:	2304      	movhi	r3, #4
   1697e:	50ca      	str	r2, [r1, r3]
   16980:	b10a      	cbz	r2, 16986 <__lshift+0x8e>
   16982:	f108 0602 	add.w	r6, r8, #2
   16986:	3e01      	subs	r6, #1
   16988:	4638      	mov	r0, r7
   1698a:	4621      	mov	r1, r4
   1698c:	612e      	str	r6, [r5, #16]
   1698e:	f7ff fe6b 	bl	16668 <_Bfree>
   16992:	4628      	mov	r0, r5
   16994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16998:	3101      	adds	r1, #1
   1699a:	005b      	lsls	r3, r3, #1
   1699c:	e7ba      	b.n	16914 <__lshift+0x1c>
   1699e:	3301      	adds	r3, #1
   169a0:	f842 0f04 	str.w	r0, [r2, #4]!
   169a4:	e7c2      	b.n	1692c <__lshift+0x34>
   169a6:	3904      	subs	r1, #4
   169a8:	f853 2b04 	ldr.w	r2, [r3], #4
   169ac:	459c      	cmp	ip, r3
   169ae:	f841 2f04 	str.w	r2, [r1, #4]!
   169b2:	d8f9      	bhi.n	169a8 <__lshift+0xb0>
   169b4:	e7e7      	b.n	16986 <__lshift+0x8e>

000169b6 <__mcmp>:
   169b6:	4603      	mov	r3, r0
   169b8:	690a      	ldr	r2, [r1, #16]
   169ba:	6900      	ldr	r0, [r0, #16]
   169bc:	1a80      	subs	r0, r0, r2
   169be:	b530      	push	{r4, r5, lr}
   169c0:	d10d      	bne.n	169de <__mcmp+0x28>
   169c2:	3314      	adds	r3, #20
   169c4:	3114      	adds	r1, #20
   169c6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   169ca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   169ce:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   169d2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   169d6:	4295      	cmp	r5, r2
   169d8:	d002      	beq.n	169e0 <__mcmp+0x2a>
   169da:	d304      	bcc.n	169e6 <__mcmp+0x30>
   169dc:	2001      	movs	r0, #1
   169de:	bd30      	pop	{r4, r5, pc}
   169e0:	42a3      	cmp	r3, r4
   169e2:	d3f4      	bcc.n	169ce <__mcmp+0x18>
   169e4:	e7fb      	b.n	169de <__mcmp+0x28>
   169e6:	f04f 30ff 	mov.w	r0, #4294967295
   169ea:	e7f8      	b.n	169de <__mcmp+0x28>

000169ec <__mdiff>:
   169ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f0:	460c      	mov	r4, r1
   169f2:	4606      	mov	r6, r0
   169f4:	4611      	mov	r1, r2
   169f6:	4692      	mov	sl, r2
   169f8:	4620      	mov	r0, r4
   169fa:	f7ff ffdc 	bl	169b6 <__mcmp>
   169fe:	1e05      	subs	r5, r0, #0
   16a00:	d108      	bne.n	16a14 <__mdiff+0x28>
   16a02:	4629      	mov	r1, r5
   16a04:	4630      	mov	r0, r6
   16a06:	f7ff fdfb 	bl	16600 <_Balloc>
   16a0a:	2301      	movs	r3, #1
   16a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   16a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a14:	bfa3      	ittte	ge
   16a16:	4653      	movge	r3, sl
   16a18:	46a2      	movge	sl, r4
   16a1a:	2500      	movge	r5, #0
   16a1c:	2501      	movlt	r5, #1
   16a1e:	bfa8      	it	ge
   16a20:	461c      	movge	r4, r3
   16a22:	f8da 1004 	ldr.w	r1, [sl, #4]
   16a26:	4630      	mov	r0, r6
   16a28:	f7ff fdea 	bl	16600 <_Balloc>
   16a2c:	f104 0914 	add.w	r9, r4, #20
   16a30:	f8da 7010 	ldr.w	r7, [sl, #16]
   16a34:	f100 0814 	add.w	r8, r0, #20
   16a38:	6926      	ldr	r6, [r4, #16]
   16a3a:	f10a 0210 	add.w	r2, sl, #16
   16a3e:	60c5      	str	r5, [r0, #12]
   16a40:	f10a 0514 	add.w	r5, sl, #20
   16a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   16a48:	46c2      	mov	sl, r8
   16a4a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   16a4e:	f04f 0c00 	mov.w	ip, #0
   16a52:	f852 bf04 	ldr.w	fp, [r2, #4]!
   16a56:	f859 3b04 	ldr.w	r3, [r9], #4
   16a5a:	fa1f f18b 	uxth.w	r1, fp
   16a5e:	454e      	cmp	r6, r9
   16a60:	4461      	add	r1, ip
   16a62:	fa1f fc83 	uxth.w	ip, r3
   16a66:	ea4f 4313 	mov.w	r3, r3, lsr #16
   16a6a:	eba1 010c 	sub.w	r1, r1, ip
   16a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   16a72:	eb03 4321 	add.w	r3, r3, r1, asr #16
   16a76:	b289      	uxth	r1, r1
   16a78:	ea4f 4c23 	mov.w	ip, r3, asr #16
   16a7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   16a80:	f84a 3b04 	str.w	r3, [sl], #4
   16a84:	d8e5      	bhi.n	16a52 <__mdiff+0x66>
   16a86:	1b33      	subs	r3, r6, r4
   16a88:	3415      	adds	r4, #21
   16a8a:	3b15      	subs	r3, #21
   16a8c:	f023 0303 	bic.w	r3, r3, #3
   16a90:	3304      	adds	r3, #4
   16a92:	42a6      	cmp	r6, r4
   16a94:	bf38      	it	cc
   16a96:	2304      	movcc	r3, #4
   16a98:	441d      	add	r5, r3
   16a9a:	4443      	add	r3, r8
   16a9c:	462c      	mov	r4, r5
   16a9e:	461e      	mov	r6, r3
   16aa0:	4574      	cmp	r4, lr
   16aa2:	d30e      	bcc.n	16ac2 <__mdiff+0xd6>
   16aa4:	f10e 0203 	add.w	r2, lr, #3
   16aa8:	1b52      	subs	r2, r2, r5
   16aaa:	3d03      	subs	r5, #3
   16aac:	f022 0203 	bic.w	r2, r2, #3
   16ab0:	45ae      	cmp	lr, r5
   16ab2:	bf38      	it	cc
   16ab4:	2200      	movcc	r2, #0
   16ab6:	441a      	add	r2, r3
   16ab8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   16abc:	b18b      	cbz	r3, 16ae2 <__mdiff+0xf6>
   16abe:	6107      	str	r7, [r0, #16]
   16ac0:	e7a6      	b.n	16a10 <__mdiff+0x24>
   16ac2:	f854 8b04 	ldr.w	r8, [r4], #4
   16ac6:	fa1f f288 	uxth.w	r2, r8
   16aca:	4462      	add	r2, ip
   16acc:	1411      	asrs	r1, r2, #16
   16ace:	b292      	uxth	r2, r2
   16ad0:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   16ad4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   16ad8:	ea4f 4c21 	mov.w	ip, r1, asr #16
   16adc:	f846 2b04 	str.w	r2, [r6], #4
   16ae0:	e7de      	b.n	16aa0 <__mdiff+0xb4>
   16ae2:	3f01      	subs	r7, #1
   16ae4:	e7e8      	b.n	16ab8 <__mdiff+0xcc>

00016ae6 <__d2b>:
   16ae6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16aea:	461c      	mov	r4, r3
   16aec:	2101      	movs	r1, #1
   16aee:	4690      	mov	r8, r2
   16af0:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   16af4:	f7ff fd84 	bl	16600 <_Balloc>
   16af8:	f3c4 0313 	ubfx	r3, r4, #0, #20
   16afc:	f3c4 540a 	ubfx	r4, r4, #20, #11
   16b00:	4607      	mov	r7, r0
   16b02:	bb2c      	cbnz	r4, 16b50 <__d2b+0x6a>
   16b04:	9301      	str	r3, [sp, #4]
   16b06:	f1b8 0300 	subs.w	r3, r8, #0
   16b0a:	d026      	beq.n	16b5a <__d2b+0x74>
   16b0c:	4668      	mov	r0, sp
   16b0e:	9300      	str	r3, [sp, #0]
   16b10:	f7ff fe20 	bl	16754 <__lo0bits>
   16b14:	9900      	ldr	r1, [sp, #0]
   16b16:	b1f0      	cbz	r0, 16b56 <__d2b+0x70>
   16b18:	9a01      	ldr	r2, [sp, #4]
   16b1a:	f1c0 0320 	rsb	r3, r0, #32
   16b1e:	fa02 f303 	lsl.w	r3, r2, r3
   16b22:	40c2      	lsrs	r2, r0
   16b24:	430b      	orrs	r3, r1
   16b26:	9201      	str	r2, [sp, #4]
   16b28:	617b      	str	r3, [r7, #20]
   16b2a:	9b01      	ldr	r3, [sp, #4]
   16b2c:	2b00      	cmp	r3, #0
   16b2e:	61bb      	str	r3, [r7, #24]
   16b30:	bf14      	ite	ne
   16b32:	2102      	movne	r1, #2
   16b34:	2101      	moveq	r1, #1
   16b36:	6139      	str	r1, [r7, #16]
   16b38:	b1c4      	cbz	r4, 16b6c <__d2b+0x86>
   16b3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   16b3e:	4404      	add	r4, r0
   16b40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   16b44:	6034      	str	r4, [r6, #0]
   16b46:	6028      	str	r0, [r5, #0]
   16b48:	4638      	mov	r0, r7
   16b4a:	b002      	add	sp, #8
   16b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16b54:	e7d6      	b.n	16b04 <__d2b+0x1e>
   16b56:	6179      	str	r1, [r7, #20]
   16b58:	e7e7      	b.n	16b2a <__d2b+0x44>
   16b5a:	a801      	add	r0, sp, #4
   16b5c:	f7ff fdfa 	bl	16754 <__lo0bits>
   16b60:	9b01      	ldr	r3, [sp, #4]
   16b62:	2101      	movs	r1, #1
   16b64:	3020      	adds	r0, #32
   16b66:	617b      	str	r3, [r7, #20]
   16b68:	6139      	str	r1, [r7, #16]
   16b6a:	e7e5      	b.n	16b38 <__d2b+0x52>
   16b6c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   16b70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   16b74:	6030      	str	r0, [r6, #0]
   16b76:	6918      	ldr	r0, [r3, #16]
   16b78:	f7ff fdcc 	bl	16714 <__hi0bits>
   16b7c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   16b80:	6029      	str	r1, [r5, #0]
   16b82:	e7e1      	b.n	16b48 <__d2b+0x62>

00016b84 <_calloc_r>:
   16b84:	b538      	push	{r3, r4, r5, lr}
   16b86:	fb02 f501 	mul.w	r5, r2, r1
   16b8a:	4629      	mov	r1, r5
   16b8c:	f7f9 ff26 	bl	109dc <_malloc_r>
   16b90:	4604      	mov	r4, r0
   16b92:	b118      	cbz	r0, 16b9c <_calloc_r+0x18>
   16b94:	462a      	mov	r2, r5
   16b96:	2100      	movs	r1, #0
   16b98:	f7ff fa89 	bl	160ae <memset>
   16b9c:	4620      	mov	r0, r4
   16b9e:	bd38      	pop	{r3, r4, r5, pc}

00016ba0 <__sread>:
   16ba0:	b510      	push	{r4, lr}
   16ba2:	460c      	mov	r4, r1
   16ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16ba8:	f7fb f812 	bl	11bd0 <_read_r>
   16bac:	2800      	cmp	r0, #0
   16bae:	bfab      	itete	ge
   16bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   16bb2:	89a3      	ldrhlt	r3, [r4, #12]
   16bb4:	181b      	addge	r3, r3, r0
   16bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   16bba:	bfac      	ite	ge
   16bbc:	6563      	strge	r3, [r4, #84]	; 0x54
   16bbe:	81a3      	strhlt	r3, [r4, #12]
   16bc0:	bd10      	pop	{r4, pc}

00016bc2 <__swrite>:
   16bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bc6:	461f      	mov	r7, r3
   16bc8:	898b      	ldrh	r3, [r1, #12]
   16bca:	4605      	mov	r5, r0
   16bcc:	460c      	mov	r4, r1
   16bce:	05db      	lsls	r3, r3, #23
   16bd0:	4616      	mov	r6, r2
   16bd2:	d505      	bpl.n	16be0 <__swrite+0x1e>
   16bd4:	2302      	movs	r3, #2
   16bd6:	2200      	movs	r2, #0
   16bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16bdc:	f7fa ffe6 	bl	11bac <_lseek_r>
   16be0:	89a3      	ldrh	r3, [r4, #12]
   16be2:	4632      	mov	r2, r6
   16be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16be8:	4628      	mov	r0, r5
   16bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16bee:	81a3      	strh	r3, [r4, #12]
   16bf0:	463b      	mov	r3, r7
   16bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16bf6:	f7fa bf95 	b.w	11b24 <_write_r>

00016bfa <__sseek>:
   16bfa:	b510      	push	{r4, lr}
   16bfc:	460c      	mov	r4, r1
   16bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16c02:	f7fa ffd3 	bl	11bac <_lseek_r>
   16c06:	1c43      	adds	r3, r0, #1
   16c08:	89a3      	ldrh	r3, [r4, #12]
   16c0a:	bf15      	itete	ne
   16c0c:	6560      	strne	r0, [r4, #84]	; 0x54
   16c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   16c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   16c16:	81a3      	strheq	r3, [r4, #12]
   16c18:	bf18      	it	ne
   16c1a:	81a3      	strhne	r3, [r4, #12]
   16c1c:	bd10      	pop	{r4, pc}

00016c1e <__sclose>:
   16c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16c22:	f7fa bf91 	b.w	11b48 <_close_r>

00016c26 <__ascii_mbtowc>:
   16c26:	b082      	sub	sp, #8
   16c28:	b901      	cbnz	r1, 16c2c <__ascii_mbtowc+0x6>
   16c2a:	a901      	add	r1, sp, #4
   16c2c:	b142      	cbz	r2, 16c40 <__ascii_mbtowc+0x1a>
   16c2e:	b14b      	cbz	r3, 16c44 <__ascii_mbtowc+0x1e>
   16c30:	7813      	ldrb	r3, [r2, #0]
   16c32:	600b      	str	r3, [r1, #0]
   16c34:	7812      	ldrb	r2, [r2, #0]
   16c36:	1e10      	subs	r0, r2, #0
   16c38:	bf18      	it	ne
   16c3a:	2001      	movne	r0, #1
   16c3c:	b002      	add	sp, #8
   16c3e:	4770      	bx	lr
   16c40:	4610      	mov	r0, r2
   16c42:	e7fb      	b.n	16c3c <__ascii_mbtowc+0x16>
   16c44:	f06f 0001 	mvn.w	r0, #1
   16c48:	e7f8      	b.n	16c3c <__ascii_mbtowc+0x16>

00016c4a <__ascii_wctomb>:
   16c4a:	4603      	mov	r3, r0
   16c4c:	4608      	mov	r0, r1
   16c4e:	b141      	cbz	r1, 16c62 <__ascii_wctomb+0x18>
   16c50:	2aff      	cmp	r2, #255	; 0xff
   16c52:	d904      	bls.n	16c5e <__ascii_wctomb+0x14>
   16c54:	228a      	movs	r2, #138	; 0x8a
   16c56:	f04f 30ff 	mov.w	r0, #4294967295
   16c5a:	601a      	str	r2, [r3, #0]
   16c5c:	4770      	bx	lr
   16c5e:	2001      	movs	r0, #1
   16c60:	700a      	strb	r2, [r1, #0]
   16c62:	4770      	bx	lr

00016c64 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16c64:	f7ef b8a6 	b.w	5db4 <SystemInit>
