
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20028c48 	.word	0x20028c48
   4:	000045e9 	.word	0x000045e9
   8:	000127ab 	.word	0x000127ab
   c:	000045a1 	.word	0x000045a1
  10:	000045a1 	.word	0x000045a1
  14:	000045a1 	.word	0x000045a1
  18:	000045a1 	.word	0x000045a1
  1c:	000045a1 	.word	0x000045a1
	...
  2c:	000042a1 	.word	0x000042a1
  30:	000045a1 	.word	0x000045a1
  34:	00000000 	.word	0x00000000
  38:	00004245 	.word	0x00004245
  3c:	0001301b 	.word	0x0001301b

00000040 <_irq_vector_table>:
  40:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  50:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  60:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  70:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  80:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  90:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  a0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  b0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  c0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  d0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  e0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
  f0:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 100:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 110:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 120:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 130:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 140:	0000432d 0000432d 0000432d 0000432d     -C..-C..-C..-C..
 150:	0000432d                                -C..

Disassembly of section text:

00000158 <__aeabi_drsub>:
     158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     15c:	e002      	b.n	164 <__adddf3>
     15e:	bf00      	nop

00000160 <__aeabi_dsub>:
     160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000164 <__adddf3>:
     164:	b530      	push	{r4, r5, lr}
     166:	ea4f 0441 	mov.w	r4, r1, lsl #1
     16a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     16e:	ea94 0f05 	teq	r4, r5
     172:	bf08      	it	eq
     174:	ea90 0f02 	teqeq	r0, r2
     178:	bf1f      	itttt	ne
     17a:	ea54 0c00 	orrsne.w	ip, r4, r0
     17e:	ea55 0c02 	orrsne.w	ip, r5, r2
     182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     18a:	f000 80e2 	beq.w	352 <__data_size+0xb5>
     18e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     196:	bfb8      	it	lt
     198:	426d      	neglt	r5, r5
     19a:	dd0c      	ble.n	1b6 <__adddf3+0x52>
     19c:	442c      	add	r4, r5
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	ea82 0000 	eor.w	r0, r2, r0
     1aa:	ea83 0101 	eor.w	r1, r3, r1
     1ae:	ea80 0202 	eor.w	r2, r0, r2
     1b2:	ea81 0303 	eor.w	r3, r1, r3
     1b6:	2d36      	cmp	r5, #54	; 0x36
     1b8:	bf88      	it	hi
     1ba:	bd30      	pophi	{r4, r5, pc}
     1bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1cc:	d002      	beq.n	1d4 <CONFIG_SRAM_SIZE+0x14>
     1ce:	4240      	negs	r0, r0
     1d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1e0:	d002      	beq.n	1e8 <CONFIG_SRAM_SIZE+0x28>
     1e2:	4252      	negs	r2, r2
     1e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e8:	ea94 0f05 	teq	r4, r5
     1ec:	f000 80a7 	beq.w	33e <__data_size+0xa1>
     1f0:	f1a4 0401 	sub.w	r4, r4, #1
     1f4:	f1d5 0e20 	rsbs	lr, r5, #32
     1f8:	db0d      	blt.n	216 <CONFIG_SRAM_SIZE+0x56>
     1fa:	fa02 fc0e 	lsl.w	ip, r2, lr
     1fe:	fa22 f205 	lsr.w	r2, r2, r5
     202:	1880      	adds	r0, r0, r2
     204:	f141 0100 	adc.w	r1, r1, #0
     208:	fa03 f20e 	lsl.w	r2, r3, lr
     20c:	1880      	adds	r0, r0, r2
     20e:	fa43 f305 	asr.w	r3, r3, r5
     212:	4159      	adcs	r1, r3
     214:	e00e      	b.n	234 <CONFIG_SRAM_SIZE+0x74>
     216:	f1a5 0520 	sub.w	r5, r5, #32
     21a:	f10e 0e20 	add.w	lr, lr, #32
     21e:	2a01      	cmp	r2, #1
     220:	fa03 fc0e 	lsl.w	ip, r3, lr
     224:	bf28      	it	cs
     226:	f04c 0c02 	orrcs.w	ip, ip, #2
     22a:	fa43 f305 	asr.w	r3, r3, r5
     22e:	18c0      	adds	r0, r0, r3
     230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     238:	d507      	bpl.n	24a <CONFIG_SRAM_SIZE+0x8a>
     23a:	f04f 0e00 	mov.w	lr, #0
     23e:	f1dc 0c00 	rsbs	ip, ip, #0
     242:	eb7e 0000 	sbcs.w	r0, lr, r0
     246:	eb6e 0101 	sbc.w	r1, lr, r1
     24a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     24e:	d31b      	bcc.n	288 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8>
     250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     254:	d30c      	bcc.n	270 <CONFIG_SRAM_SIZE+0xb0>
     256:	0849      	lsrs	r1, r1, #1
     258:	ea5f 0030 	movs.w	r0, r0, rrx
     25c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     260:	f104 0401 	add.w	r4, r4, #1
     264:	ea4f 5244 	mov.w	r2, r4, lsl #21
     268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     26c:	f080 809a 	bcs.w	3a4 <__data_size+0x107>
     270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     274:	bf08      	it	eq
     276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     27a:	f150 0000 	adcs.w	r0, r0, #0
     27e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     282:	ea41 0105 	orr.w	r1, r1, r5
     286:	bd30      	pop	{r4, r5, pc}
     288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     28c:	4140      	adcs	r0, r0
     28e:	eb41 0101 	adc.w	r1, r1, r1
     292:	3c01      	subs	r4, #1
     294:	bf28      	it	cs
     296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     29a:	d2e9      	bcs.n	270 <CONFIG_SRAM_SIZE+0xb0>
     29c:	f091 0f00 	teq	r1, #0
     2a0:	bf04      	itt	eq
     2a2:	4601      	moveq	r1, r0
     2a4:	2000      	moveq	r0, #0
     2a6:	fab1 f381 	clz	r3, r1
     2aa:	bf08      	it	eq
     2ac:	3320      	addeq	r3, #32
     2ae:	f1a3 030b 	sub.w	r3, r3, #11
     2b2:	f1b3 0220 	subs.w	r2, r3, #32
     2b6:	da0c      	bge.n	2d2 <__data_size+0x35>
     2b8:	320c      	adds	r2, #12
     2ba:	dd08      	ble.n	2ce <__data_size+0x31>
     2bc:	f102 0c14 	add.w	ip, r2, #20
     2c0:	f1c2 020c 	rsb	r2, r2, #12
     2c4:	fa01 f00c 	lsl.w	r0, r1, ip
     2c8:	fa21 f102 	lsr.w	r1, r1, r2
     2cc:	e00c      	b.n	2e8 <__data_size+0x4b>
     2ce:	f102 0214 	add.w	r2, r2, #20
     2d2:	bfd8      	it	le
     2d4:	f1c2 0c20 	rsble	ip, r2, #32
     2d8:	fa01 f102 	lsl.w	r1, r1, r2
     2dc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2e0:	bfdc      	itt	le
     2e2:	ea41 010c 	orrle.w	r1, r1, ip
     2e6:	4090      	lslle	r0, r2
     2e8:	1ae4      	subs	r4, r4, r3
     2ea:	bfa2      	ittt	ge
     2ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2f0:	4329      	orrge	r1, r5
     2f2:	bd30      	popge	{r4, r5, pc}
     2f4:	ea6f 0404 	mvn.w	r4, r4
     2f8:	3c1f      	subs	r4, #31
     2fa:	da1c      	bge.n	336 <__data_size+0x99>
     2fc:	340c      	adds	r4, #12
     2fe:	dc0e      	bgt.n	31e <__data_size+0x81>
     300:	f104 0414 	add.w	r4, r4, #20
     304:	f1c4 0220 	rsb	r2, r4, #32
     308:	fa20 f004 	lsr.w	r0, r0, r4
     30c:	fa01 f302 	lsl.w	r3, r1, r2
     310:	ea40 0003 	orr.w	r0, r0, r3
     314:	fa21 f304 	lsr.w	r3, r1, r4
     318:	ea45 0103 	orr.w	r1, r5, r3
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	f1c4 040c 	rsb	r4, r4, #12
     322:	f1c4 0220 	rsb	r2, r4, #32
     326:	fa20 f002 	lsr.w	r0, r0, r2
     32a:	fa01 f304 	lsl.w	r3, r1, r4
     32e:	ea40 0003 	orr.w	r0, r0, r3
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	fa21 f004 	lsr.w	r0, r1, r4
     33a:	4629      	mov	r1, r5
     33c:	bd30      	pop	{r4, r5, pc}
     33e:	f094 0f00 	teq	r4, #0
     342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     346:	bf06      	itte	eq
     348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     34c:	3401      	addeq	r4, #1
     34e:	3d01      	subne	r5, #1
     350:	e74e      	b.n	1f0 <CONFIG_SRAM_SIZE+0x30>
     352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     356:	bf18      	it	ne
     358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     35c:	d029      	beq.n	3b2 <__data_size+0x115>
     35e:	ea94 0f05 	teq	r4, r5
     362:	bf08      	it	eq
     364:	ea90 0f02 	teqeq	r0, r2
     368:	d005      	beq.n	376 <__data_size+0xd9>
     36a:	ea54 0c00 	orrs.w	ip, r4, r0
     36e:	bf04      	itt	eq
     370:	4619      	moveq	r1, r3
     372:	4610      	moveq	r0, r2
     374:	bd30      	pop	{r4, r5, pc}
     376:	ea91 0f03 	teq	r1, r3
     37a:	bf1e      	ittt	ne
     37c:	2100      	movne	r1, #0
     37e:	2000      	movne	r0, #0
     380:	bd30      	popne	{r4, r5, pc}
     382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     386:	d105      	bne.n	394 <__data_size+0xf7>
     388:	0040      	lsls	r0, r0, #1
     38a:	4149      	adcs	r1, r1
     38c:	bf28      	it	cs
     38e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     392:	bd30      	pop	{r4, r5, pc}
     394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     398:	bf3c      	itt	cc
     39a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     39e:	bd30      	popcc	{r4, r5, pc}
     3a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3ac:	f04f 0000 	mov.w	r0, #0
     3b0:	bd30      	pop	{r4, r5, pc}
     3b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3b6:	bf1a      	itte	ne
     3b8:	4619      	movne	r1, r3
     3ba:	4610      	movne	r0, r2
     3bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3c0:	bf1c      	itt	ne
     3c2:	460b      	movne	r3, r1
     3c4:	4602      	movne	r2, r0
     3c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ca:	bf06      	itte	eq
     3cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3d0:	ea91 0f03 	teqeq	r1, r3
     3d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	bf00      	nop

000003dc <__aeabi_ui2d>:
     3dc:	f090 0f00 	teq	r0, #0
     3e0:	bf04      	itt	eq
     3e2:	2100      	moveq	r1, #0
     3e4:	4770      	bxeq	lr
     3e6:	b530      	push	{r4, r5, lr}
     3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3f0:	f04f 0500 	mov.w	r5, #0
     3f4:	f04f 0100 	mov.w	r1, #0
     3f8:	e750      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     3fa:	bf00      	nop

000003fc <__aeabi_i2d>:
     3fc:	f090 0f00 	teq	r0, #0
     400:	bf04      	itt	eq
     402:	2100      	moveq	r1, #0
     404:	4770      	bxeq	lr
     406:	b530      	push	{r4, r5, lr}
     408:	f44f 6480 	mov.w	r4, #1024	; 0x400
     40c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     414:	bf48      	it	mi
     416:	4240      	negmi	r0, r0
     418:	f04f 0100 	mov.w	r1, #0
     41c:	e73e      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     41e:	bf00      	nop

00000420 <__aeabi_f2d>:
     420:	0042      	lsls	r2, r0, #1
     422:	ea4f 01e2 	mov.w	r1, r2, asr #3
     426:	ea4f 0131 	mov.w	r1, r1, rrx
     42a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     42e:	bf1f      	itttt	ne
     430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     43c:	4770      	bxne	lr
     43e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     442:	bf08      	it	eq
     444:	4770      	bxeq	lr
     446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     44a:	bf04      	itt	eq
     44c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     450:	4770      	bxeq	lr
     452:	b530      	push	{r4, r5, lr}
     454:	f44f 7460 	mov.w	r4, #896	; 0x380
     458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     45c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     460:	e71c      	b.n	29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     462:	bf00      	nop

00000464 <__aeabi_ul2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f04f 0500 	mov.w	r5, #0
     472:	e00a      	b.n	48a <__aeabi_l2d+0x16>

00000474 <__aeabi_l2d>:
     474:	ea50 0201 	orrs.w	r2, r0, r1
     478:	bf08      	it	eq
     47a:	4770      	bxeq	lr
     47c:	b530      	push	{r4, r5, lr}
     47e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     482:	d502      	bpl.n	48a <__aeabi_l2d+0x16>
     484:	4240      	negs	r0, r0
     486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     48a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     48e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     496:	f43f aed8 	beq.w	24a <CONFIG_SRAM_SIZE+0x8a>
     49a:	f04f 0203 	mov.w	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4aa:	bf18      	it	ne
     4ac:	3203      	addne	r2, #3
     4ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4b2:	f1c2 0320 	rsb	r3, r2, #32
     4b6:	fa00 fc03 	lsl.w	ip, r0, r3
     4ba:	fa20 f002 	lsr.w	r0, r0, r2
     4be:	fa01 fe03 	lsl.w	lr, r1, r3
     4c2:	ea40 000e 	orr.w	r0, r0, lr
     4c6:	fa21 f102 	lsr.w	r1, r1, r2
     4ca:	4414      	add	r4, r2
     4cc:	e6bd      	b.n	24a <CONFIG_SRAM_SIZE+0x8a>
     4ce:	bf00      	nop

000004d0 <__aeabi_dmul>:
     4d0:	b570      	push	{r4, r5, r6, lr}
     4d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4de:	bf1d      	ittte	ne
     4e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4e4:	ea94 0f0c 	teqne	r4, ip
     4e8:	ea95 0f0c 	teqne	r5, ip
     4ec:	f000 f8de 	bleq	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     4f0:	442c      	add	r4, r5
     4f2:	ea81 0603 	eor.w	r6, r1, r3
     4f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     502:	bf18      	it	ne
     504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     510:	d038      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     512:	fba0 ce02 	umull	ip, lr, r0, r2
     516:	f04f 0500 	mov.w	r5, #0
     51a:	fbe1 e502 	umlal	lr, r5, r1, r2
     51e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     522:	fbe0 e503 	umlal	lr, r5, r0, r3
     526:	f04f 0600 	mov.w	r6, #0
     52a:	fbe1 5603 	umlal	r5, r6, r1, r3
     52e:	f09c 0f00 	teq	ip, #0
     532:	bf18      	it	ne
     534:	f04e 0e01 	orrne.w	lr, lr, #1
     538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     53c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     544:	d204      	bcs.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     54a:	416d      	adcs	r5, r5
     54c:	eb46 0606 	adc.w	r6, r6, r6
     550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     55c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     568:	bf88      	it	hi
     56a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     56e:	d81e      	bhi.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     574:	bf08      	it	eq
     576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     57a:	f150 0000 	adcs.w	r0, r0, #0
     57e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     588:	ea46 0101 	orr.w	r1, r6, r1
     58c:	ea40 0002 	orr.w	r0, r0, r2
     590:	ea81 0103 	eor.w	r1, r1, r3
     594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     598:	bfc2      	ittt	gt
     59a:	ebd4 050c 	rsbsgt	r5, r4, ip
     59e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5a2:	bd70      	popgt	{r4, r5, r6, pc}
     5a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a8:	f04f 0e00 	mov.w	lr, #0
     5ac:	3c01      	subs	r4, #1
     5ae:	f300 80ab 	bgt.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     5b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5b6:	bfde      	ittt	le
     5b8:	2000      	movle	r0, #0
     5ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5be:	bd70      	pople	{r4, r5, r6, pc}
     5c0:	f1c4 0400 	rsb	r4, r4, #0
     5c4:	3c20      	subs	r4, #32
     5c6:	da35      	bge.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
     5c8:	340c      	adds	r4, #12
     5ca:	dc1b      	bgt.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     5cc:	f104 0414 	add.w	r4, r4, #20
     5d0:	f1c4 0520 	rsb	r5, r4, #32
     5d4:	fa00 f305 	lsl.w	r3, r0, r5
     5d8:	fa20 f004 	lsr.w	r0, r0, r4
     5dc:	fa01 f205 	lsl.w	r2, r1, r5
     5e0:	ea40 0002 	orr.w	r0, r0, r2
     5e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5f0:	fa21 f604 	lsr.w	r6, r1, r4
     5f4:	eb42 0106 	adc.w	r1, r2, r6
     5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5fc:	bf08      	it	eq
     5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	f1c4 040c 	rsb	r4, r4, #12
     608:	f1c4 0520 	rsb	r5, r4, #32
     60c:	fa00 f304 	lsl.w	r3, r0, r4
     610:	fa20 f005 	lsr.w	r0, r0, r5
     614:	fa01 f204 	lsl.w	r2, r1, r4
     618:	ea40 0002 	orr.w	r0, r0, r2
     61c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     624:	f141 0100 	adc.w	r1, r1, #0
     628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     62c:	bf08      	it	eq
     62e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     632:	bd70      	pop	{r4, r5, r6, pc}
     634:	f1c4 0520 	rsb	r5, r4, #32
     638:	fa00 f205 	lsl.w	r2, r0, r5
     63c:	ea4e 0e02 	orr.w	lr, lr, r2
     640:	fa20 f304 	lsr.w	r3, r0, r4
     644:	fa01 f205 	lsl.w	r2, r1, r5
     648:	ea43 0302 	orr.w	r3, r3, r2
     64c:	fa21 f004 	lsr.w	r0, r1, r4
     650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     654:	fa21 f204 	lsr.w	r2, r1, r4
     658:	ea20 0002 	bic.w	r0, r0, r2
     65c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     664:	bf08      	it	eq
     666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     66a:	bd70      	pop	{r4, r5, r6, pc}
     66c:	f094 0f00 	teq	r4, #0
     670:	d10f      	bne.n	692 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1aa>
     672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     676:	0040      	lsls	r0, r0, #1
     678:	eb41 0101 	adc.w	r1, r1, r1
     67c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     680:	bf08      	it	eq
     682:	3c01      	subeq	r4, #1
     684:	d0f7      	beq.n	676 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18e>
     686:	ea41 0106 	orr.w	r1, r1, r6
     68a:	f095 0f00 	teq	r5, #0
     68e:	bf18      	it	ne
     690:	4770      	bxne	lr
     692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     696:	0052      	lsls	r2, r2, #1
     698:	eb43 0303 	adc.w	r3, r3, r3
     69c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6a0:	bf08      	it	eq
     6a2:	3d01      	subeq	r5, #1
     6a4:	d0f7      	beq.n	696 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ae>
     6a6:	ea43 0306 	orr.w	r3, r3, r6
     6aa:	4770      	bx	lr
     6ac:	ea94 0f0c 	teq	r4, ip
     6b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6b4:	bf18      	it	ne
     6b6:	ea95 0f0c 	teqne	r5, ip
     6ba:	d00c      	beq.n	6d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ee>
     6bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6c0:	bf18      	it	ne
     6c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6c6:	d1d1      	bne.n	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     6c8:	ea81 0103 	eor.w	r1, r1, r3
     6cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6d0:	f04f 0000 	mov.w	r0, #0
     6d4:	bd70      	pop	{r4, r5, r6, pc}
     6d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6da:	bf06      	itte	eq
     6dc:	4610      	moveq	r0, r2
     6de:	4619      	moveq	r1, r3
     6e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6e4:	d019      	beq.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6e6:	ea94 0f0c 	teq	r4, ip
     6ea:	d102      	bne.n	6f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20a>
     6ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6f0:	d113      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     6f2:	ea95 0f0c 	teq	r5, ip
     6f6:	d105      	bne.n	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     6f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6fc:	bf1c      	itt	ne
     6fe:	4610      	movne	r0, r2
     700:	4619      	movne	r1, r3
     702:	d10a      	bne.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     704:	ea81 0103 	eor.w	r1, r1, r3
     708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     70c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     714:	f04f 0000 	mov.w	r0, #0
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     71e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     722:	bd70      	pop	{r4, r5, r6, pc}

00000724 <__aeabi_ddiv>:
     724:	b570      	push	{r4, r5, r6, lr}
     726:	f04f 0cff 	mov.w	ip, #255	; 0xff
     72a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     72e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     732:	bf1d      	ittte	ne
     734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     738:	ea94 0f0c 	teqne	r4, ip
     73c:	ea95 0f0c 	teqne	r5, ip
     740:	f000 f8a7 	bleq	892 <CONFIG_ISR_STACK_SIZE+0x92>
     744:	eba4 0405 	sub.w	r4, r4, r5
     748:	ea81 0e03 	eor.w	lr, r1, r3
     74c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     750:	ea4f 3101 	mov.w	r1, r1, lsl #12
     754:	f000 8088 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     758:	ea4f 3303 	mov.w	r3, r3, lsl #12
     75c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     768:	ea4f 2202 	mov.w	r2, r2, lsl #8
     76c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     774:	ea4f 2600 	mov.w	r6, r0, lsl #8
     778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     77c:	429d      	cmp	r5, r3
     77e:	bf08      	it	eq
     780:	4296      	cmpeq	r6, r2
     782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     786:	f504 7440 	add.w	r4, r4, #768	; 0x300
     78a:	d202      	bcs.n	792 <__aeabi_ddiv+0x6e>
     78c:	085b      	lsrs	r3, r3, #1
     78e:	ea4f 0232 	mov.w	r2, r2, rrx
     792:	1ab6      	subs	r6, r6, r2
     794:	eb65 0503 	sbc.w	r5, r5, r3
     798:	085b      	lsrs	r3, r3, #1
     79a:	ea4f 0232 	mov.w	r2, r2, rrx
     79e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7a6:	ebb6 0e02 	subs.w	lr, r6, r2
     7aa:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ae:	bf22      	ittt	cs
     7b0:	1ab6      	subcs	r6, r6, r2
     7b2:	4675      	movcs	r5, lr
     7b4:	ea40 000c 	orrcs.w	r0, r0, ip
     7b8:	085b      	lsrs	r3, r3, #1
     7ba:	ea4f 0232 	mov.w	r2, r2, rrx
     7be:	ebb6 0e02 	subs.w	lr, r6, r2
     7c2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7c6:	bf22      	ittt	cs
     7c8:	1ab6      	subcs	r6, r6, r2
     7ca:	4675      	movcs	r5, lr
     7cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7d0:	085b      	lsrs	r3, r3, #1
     7d2:	ea4f 0232 	mov.w	r2, r2, rrx
     7d6:	ebb6 0e02 	subs.w	lr, r6, r2
     7da:	eb75 0e03 	sbcs.w	lr, r5, r3
     7de:	bf22      	ittt	cs
     7e0:	1ab6      	subcs	r6, r6, r2
     7e2:	4675      	movcs	r5, lr
     7e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e8:	085b      	lsrs	r3, r3, #1
     7ea:	ea4f 0232 	mov.w	r2, r2, rrx
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     800:	ea55 0e06 	orrs.w	lr, r5, r6
     804:	d018      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     806:	ea4f 1505 	mov.w	r5, r5, lsl #4
     80a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     80e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     81a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     81e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     822:	d1c0      	bne.n	7a6 <__aeabi_ddiv+0x82>
     824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     828:	d10b      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     82a:	ea41 0100 	orr.w	r1, r1, r0
     82e:	f04f 0000 	mov.w	r0, #0
     832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     836:	e7b6      	b.n	7a6 <__aeabi_ddiv+0x82>
     838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     83c:	bf04      	itt	eq
     83e:	4301      	orreq	r1, r0
     840:	2000      	moveq	r0, #0
     842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     846:	bf88      	it	hi
     848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     84c:	f63f aeaf 	bhi.w	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     850:	ebb5 0c03 	subs.w	ip, r5, r3
     854:	bf04      	itt	eq
     856:	ebb6 0c02 	subseq.w	ip, r6, r2
     85a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     85e:	f150 0000 	adcs.w	r0, r0, #0
     862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     866:	bd70      	pop	{r4, r5, r6, pc}
     868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     86c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     874:	bfc2      	ittt	gt
     876:	ebd4 050c 	rsbsgt	r5, r4, ip
     87a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     87e:	bd70      	popgt	{r4, r5, r6, pc}
     880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     884:	f04f 0e00 	mov.w	lr, #0
     888:	3c01      	subs	r4, #1
     88a:	e690      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     88c:	ea45 0e06 	orr.w	lr, r5, r6
     890:	e68d      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
     892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     896:	ea94 0f0c 	teq	r4, ip
     89a:	bf08      	it	eq
     89c:	ea95 0f0c 	teqeq	r5, ip
     8a0:	f43f af3b 	beq.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8a4:	ea94 0f0c 	teq	r4, ip
     8a8:	d10a      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
     8aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8ae:	f47f af34 	bne.w	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8b2:	ea95 0f0c 	teq	r5, ip
     8b6:	f47f af25 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ba:	4610      	mov	r0, r2
     8bc:	4619      	mov	r1, r3
     8be:	e72c      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8c0:	ea95 0f0c 	teq	r5, ip
     8c4:	d106      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ca:	f43f aefd 	beq.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8ce:	4610      	mov	r0, r2
     8d0:	4619      	mov	r1, r3
     8d2:	e722      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>
     8d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d8:	bf18      	it	ne
     8da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8de:	f47f aec5 	bne.w	66c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x184>
     8e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8e6:	f47f af0d 	bne.w	704 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x21c>
     8ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8ee:	f47f aeeb 	bne.w	6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>
     8f2:	e712      	b.n	71a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x232>

000008f4 <__gedf2>:
     8f4:	f04f 3cff 	mov.w	ip, #4294967295
     8f8:	e006      	b.n	908 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__ledf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	e002      	b.n	908 <__cmpdf2+0x4>
     902:	bf00      	nop

00000904 <__cmpdf2>:
     904:	f04f 0c01 	mov.w	ip, #1
     908:	f84d cd04 	str.w	ip, [sp, #-4]!
     90c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     918:	bf18      	it	ne
     91a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     91e:	d01b      	beq.n	958 <__cmpdf2+0x54>
     920:	b001      	add	sp, #4
     922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     926:	bf0c      	ite	eq
     928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     92c:	ea91 0f03 	teqne	r1, r3
     930:	bf02      	ittt	eq
     932:	ea90 0f02 	teqeq	r0, r2
     936:	2000      	moveq	r0, #0
     938:	4770      	bxeq	lr
     93a:	f110 0f00 	cmn.w	r0, #0
     93e:	ea91 0f03 	teq	r1, r3
     942:	bf58      	it	pl
     944:	4299      	cmppl	r1, r3
     946:	bf08      	it	eq
     948:	4290      	cmpeq	r0, r2
     94a:	bf2c      	ite	cs
     94c:	17d8      	asrcs	r0, r3, #31
     94e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     952:	f040 0001 	orr.w	r0, r0, #1
     956:	4770      	bx	lr
     958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     95c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     960:	d102      	bne.n	968 <__cmpdf2+0x64>
     962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     966:	d107      	bne.n	978 <__cmpdf2+0x74>
     968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     96c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     970:	d1d6      	bne.n	920 <__cmpdf2+0x1c>
     972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     976:	d0d3      	beq.n	920 <__cmpdf2+0x1c>
     978:	f85d 0b04 	ldr.w	r0, [sp], #4
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <__aeabi_cdrcmple>:
     980:	4684      	mov	ip, r0
     982:	4610      	mov	r0, r2
     984:	4662      	mov	r2, ip
     986:	468c      	mov	ip, r1
     988:	4619      	mov	r1, r3
     98a:	4663      	mov	r3, ip
     98c:	e000      	b.n	990 <__aeabi_cdcmpeq>
     98e:	bf00      	nop

00000990 <__aeabi_cdcmpeq>:
     990:	b501      	push	{r0, lr}
     992:	f7ff ffb7 	bl	904 <__cmpdf2>
     996:	2800      	cmp	r0, #0
     998:	bf48      	it	mi
     99a:	f110 0f00 	cmnmi.w	r0, #0
     99e:	bd01      	pop	{r0, pc}

000009a0 <__aeabi_dcmpeq>:
     9a0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9a4:	f7ff fff4 	bl	990 <__aeabi_cdcmpeq>
     9a8:	bf0c      	ite	eq
     9aa:	2001      	moveq	r0, #1
     9ac:	2000      	movne	r0, #0
     9ae:	f85d fb08 	ldr.w	pc, [sp], #8
     9b2:	bf00      	nop

000009b4 <__aeabi_dcmplt>:
     9b4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b8:	f7ff ffea 	bl	990 <__aeabi_cdcmpeq>
     9bc:	bf34      	ite	cc
     9be:	2001      	movcc	r0, #1
     9c0:	2000      	movcs	r0, #0
     9c2:	f85d fb08 	ldr.w	pc, [sp], #8
     9c6:	bf00      	nop

000009c8 <__aeabi_dcmple>:
     9c8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9cc:	f7ff ffe0 	bl	990 <__aeabi_cdcmpeq>
     9d0:	bf94      	ite	ls
     9d2:	2001      	movls	r0, #1
     9d4:	2000      	movhi	r0, #0
     9d6:	f85d fb08 	ldr.w	pc, [sp], #8
     9da:	bf00      	nop

000009dc <__aeabi_dcmpge>:
     9dc:	f84d ed08 	str.w	lr, [sp, #-8]!
     9e0:	f7ff ffce 	bl	980 <__aeabi_cdrcmple>
     9e4:	bf94      	ite	ls
     9e6:	2001      	movls	r0, #1
     9e8:	2000      	movhi	r0, #0
     9ea:	f85d fb08 	ldr.w	pc, [sp], #8
     9ee:	bf00      	nop

000009f0 <__aeabi_dcmpgt>:
     9f0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9f4:	f7ff ffc4 	bl	980 <__aeabi_cdrcmple>
     9f8:	bf34      	ite	cc
     9fa:	2001      	movcc	r0, #1
     9fc:	2000      	movcs	r0, #0
     9fe:	f85d fb08 	ldr.w	pc, [sp], #8
     a02:	bf00      	nop

00000a04 <__aeabi_d2iz>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a0c:	d215      	bcs.n	a3a <__aeabi_d2iz+0x36>
     a0e:	d511      	bpl.n	a34 <__aeabi_d2iz+0x30>
     a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a18:	d912      	bls.n	a40 <__aeabi_d2iz+0x3c>
     a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2a:	fa23 f002 	lsr.w	r0, r3, r2
     a2e:	bf18      	it	ne
     a30:	4240      	negne	r0, r0
     a32:	4770      	bx	lr
     a34:	f04f 0000 	mov.w	r0, #0
     a38:	4770      	bx	lr
     a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a3e:	d105      	bne.n	a4c <__aeabi_d2iz+0x48>
     a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a44:	bf08      	it	eq
     a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a4a:	4770      	bx	lr
     a4c:	f04f 0000 	mov.w	r0, #0
     a50:	4770      	bx	lr
     a52:	bf00      	nop

00000a54 <__aeabi_d2f>:
     a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a5c:	bf24      	itt	cs
     a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a66:	d90d      	bls.n	a84 <__aeabi_d2f+0x30>
     a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a7c:	bf08      	it	eq
     a7e:	f020 0001 	biceq.w	r0, r0, #1
     a82:	4770      	bx	lr
     a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a88:	d121      	bne.n	ace <__aeabi_d2f+0x7a>
     a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a8e:	bfbc      	itt	lt
     a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a94:	4770      	bxlt	lr
     a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a9e:	f1c2 0218 	rsb	r2, r2, #24
     aa2:	f1c2 0c20 	rsb	ip, r2, #32
     aa6:	fa10 f30c 	lsls.w	r3, r0, ip
     aaa:	fa20 f002 	lsr.w	r0, r0, r2
     aae:	bf18      	it	ne
     ab0:	f040 0001 	orrne.w	r0, r0, #1
     ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     abc:	fa03 fc0c 	lsl.w	ip, r3, ip
     ac0:	ea40 000c 	orr.w	r0, r0, ip
     ac4:	fa23 f302 	lsr.w	r3, r3, r2
     ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     acc:	e7cc      	b.n	a68 <__aeabi_d2f+0x14>
     ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
     ad2:	d107      	bne.n	ae4 <__aeabi_d2f+0x90>
     ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ad8:	bf1e      	ittt	ne
     ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ae2:	4770      	bxne	lr
     ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <__aeabi_frsub>:
     af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     af8:	e002      	b.n	b00 <__addsf3>
     afa:	bf00      	nop

00000afc <__aeabi_fsub>:
     afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b00 <__addsf3>:
     b00:	0042      	lsls	r2, r0, #1
     b02:	bf1f      	itttt	ne
     b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b08:	ea92 0f03 	teqne	r2, r3
     b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b14:	d06a      	beq.n	bec <__addsf3+0xec>
     b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b1e:	bfc1      	itttt	gt
     b20:	18d2      	addgt	r2, r2, r3
     b22:	4041      	eorgt	r1, r0
     b24:	4048      	eorgt	r0, r1
     b26:	4041      	eorgt	r1, r0
     b28:	bfb8      	it	lt
     b2a:	425b      	neglt	r3, r3
     b2c:	2b19      	cmp	r3, #25
     b2e:	bf88      	it	hi
     b30:	4770      	bxhi	lr
     b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b3e:	bf18      	it	ne
     b40:	4240      	negne	r0, r0
     b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b4e:	bf18      	it	ne
     b50:	4249      	negne	r1, r1
     b52:	ea92 0f03 	teq	r2, r3
     b56:	d03f      	beq.n	bd8 <__addsf3+0xd8>
     b58:	f1a2 0201 	sub.w	r2, r2, #1
     b5c:	fa41 fc03 	asr.w	ip, r1, r3
     b60:	eb10 000c 	adds.w	r0, r0, ip
     b64:	f1c3 0320 	rsb	r3, r3, #32
     b68:	fa01 f103 	lsl.w	r1, r1, r3
     b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b70:	d502      	bpl.n	b78 <__addsf3+0x78>
     b72:	4249      	negs	r1, r1
     b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b7c:	d313      	bcc.n	ba6 <__addsf3+0xa6>
     b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b82:	d306      	bcc.n	b92 <__addsf3+0x92>
     b84:	0840      	lsrs	r0, r0, #1
     b86:	ea4f 0131 	mov.w	r1, r1, rrx
     b8a:	f102 0201 	add.w	r2, r2, #1
     b8e:	2afe      	cmp	r2, #254	; 0xfe
     b90:	d251      	bcs.n	c36 <__addsf3+0x136>
     b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b9a:	bf08      	it	eq
     b9c:	f020 0001 	biceq.w	r0, r0, #1
     ba0:	ea40 0003 	orr.w	r0, r0, r3
     ba4:	4770      	bx	lr
     ba6:	0049      	lsls	r1, r1, #1
     ba8:	eb40 0000 	adc.w	r0, r0, r0
     bac:	3a01      	subs	r2, #1
     bae:	bf28      	it	cs
     bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bb4:	d2ed      	bcs.n	b92 <__addsf3+0x92>
     bb6:	fab0 fc80 	clz	ip, r0
     bba:	f1ac 0c08 	sub.w	ip, ip, #8
     bbe:	ebb2 020c 	subs.w	r2, r2, ip
     bc2:	fa00 f00c 	lsl.w	r0, r0, ip
     bc6:	bfaa      	itet	ge
     bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bcc:	4252      	neglt	r2, r2
     bce:	4318      	orrge	r0, r3
     bd0:	bfbc      	itt	lt
     bd2:	40d0      	lsrlt	r0, r2
     bd4:	4318      	orrlt	r0, r3
     bd6:	4770      	bx	lr
     bd8:	f092 0f00 	teq	r2, #0
     bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     be0:	bf06      	itte	eq
     be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     be6:	3201      	addeq	r2, #1
     be8:	3b01      	subne	r3, #1
     bea:	e7b5      	b.n	b58 <__addsf3+0x58>
     bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bf4:	bf18      	it	ne
     bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bfa:	d021      	beq.n	c40 <__addsf3+0x140>
     bfc:	ea92 0f03 	teq	r2, r3
     c00:	d004      	beq.n	c0c <__addsf3+0x10c>
     c02:	f092 0f00 	teq	r2, #0
     c06:	bf08      	it	eq
     c08:	4608      	moveq	r0, r1
     c0a:	4770      	bx	lr
     c0c:	ea90 0f01 	teq	r0, r1
     c10:	bf1c      	itt	ne
     c12:	2000      	movne	r0, #0
     c14:	4770      	bxne	lr
     c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c1a:	d104      	bne.n	c26 <__addsf3+0x126>
     c1c:	0040      	lsls	r0, r0, #1
     c1e:	bf28      	it	cs
     c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c24:	4770      	bx	lr
     c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c2a:	bf3c      	itt	cc
     c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c30:	4770      	bxcc	lr
     c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c3e:	4770      	bx	lr
     c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c44:	bf16      	itet	ne
     c46:	4608      	movne	r0, r1
     c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c4c:	4601      	movne	r1, r0
     c4e:	0242      	lsls	r2, r0, #9
     c50:	bf06      	itte	eq
     c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c56:	ea90 0f01 	teqeq	r0, r1
     c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c5e:	4770      	bx	lr

00000c60 <__aeabi_ui2f>:
     c60:	f04f 0300 	mov.w	r3, #0
     c64:	e004      	b.n	c70 <__aeabi_i2f+0x8>
     c66:	bf00      	nop

00000c68 <__aeabi_i2f>:
     c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c6c:	bf48      	it	mi
     c6e:	4240      	negmi	r0, r0
     c70:	ea5f 0c00 	movs.w	ip, r0
     c74:	bf08      	it	eq
     c76:	4770      	bxeq	lr
     c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c7c:	4601      	mov	r1, r0
     c7e:	f04f 0000 	mov.w	r0, #0
     c82:	e01c      	b.n	cbe <__aeabi_l2f+0x2a>

00000c84 <__aeabi_ul2f>:
     c84:	ea50 0201 	orrs.w	r2, r0, r1
     c88:	bf08      	it	eq
     c8a:	4770      	bxeq	lr
     c8c:	f04f 0300 	mov.w	r3, #0
     c90:	e00a      	b.n	ca8 <__aeabi_l2f+0x14>
     c92:	bf00      	nop

00000c94 <__aeabi_l2f>:
     c94:	ea50 0201 	orrs.w	r2, r0, r1
     c98:	bf08      	it	eq
     c9a:	4770      	bxeq	lr
     c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ca0:	d502      	bpl.n	ca8 <__aeabi_l2f+0x14>
     ca2:	4240      	negs	r0, r0
     ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     ca8:	ea5f 0c01 	movs.w	ip, r1
     cac:	bf02      	ittt	eq
     cae:	4684      	moveq	ip, r0
     cb0:	4601      	moveq	r1, r0
     cb2:	2000      	moveq	r0, #0
     cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cb8:	bf08      	it	eq
     cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     cc2:	fabc f28c 	clz	r2, ip
     cc6:	3a08      	subs	r2, #8
     cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ccc:	db10      	blt.n	cf0 <__aeabi_l2f+0x5c>
     cce:	fa01 fc02 	lsl.w	ip, r1, r2
     cd2:	4463      	add	r3, ip
     cd4:	fa00 fc02 	lsl.w	ip, r0, r2
     cd8:	f1c2 0220 	rsb	r2, r2, #32
     cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ce0:	fa20 f202 	lsr.w	r2, r0, r2
     ce4:	eb43 0002 	adc.w	r0, r3, r2
     ce8:	bf08      	it	eq
     cea:	f020 0001 	biceq.w	r0, r0, #1
     cee:	4770      	bx	lr
     cf0:	f102 0220 	add.w	r2, r2, #32
     cf4:	fa01 fc02 	lsl.w	ip, r1, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d00:	fa21 f202 	lsr.w	r2, r1, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fmul>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d06f      	beq.n	e08 <__aeabi_fmul+0xf8>
     d28:	441a      	add	r2, r3
     d2a:	ea80 0c01 	eor.w	ip, r0, r1
     d2e:	0240      	lsls	r0, r0, #9
     d30:	bf18      	it	ne
     d32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d36:	d01e      	beq.n	d76 <__aeabi_fmul+0x66>
     d38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d44:	fba0 3101 	umull	r3, r1, r0, r1
     d48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d50:	bf3e      	ittt	cc
     d52:	0049      	lslcc	r1, r1, #1
     d54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d58:	005b      	lslcc	r3, r3, #1
     d5a:	ea40 0001 	orr.w	r0, r0, r1
     d5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d62:	2afd      	cmp	r2, #253	; 0xfd
     d64:	d81d      	bhi.n	da2 <__aeabi_fmul+0x92>
     d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d6e:	bf08      	it	eq
     d70:	f020 0001 	biceq.w	r0, r0, #1
     d74:	4770      	bx	lr
     d76:	f090 0f00 	teq	r0, #0
     d7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d7e:	bf08      	it	eq
     d80:	0249      	lsleq	r1, r1, #9
     d82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d8a:	3a7f      	subs	r2, #127	; 0x7f
     d8c:	bfc2      	ittt	gt
     d8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d96:	4770      	bxgt	lr
     d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	3a01      	subs	r2, #1
     da2:	dc5d      	bgt.n	e60 <__aeabi_fmul+0x150>
     da4:	f112 0f19 	cmn.w	r2, #25
     da8:	bfdc      	itt	le
     daa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     dae:	4770      	bxle	lr
     db0:	f1c2 0200 	rsb	r2, r2, #0
     db4:	0041      	lsls	r1, r0, #1
     db6:	fa21 f102 	lsr.w	r1, r1, r2
     dba:	f1c2 0220 	rsb	r2, r2, #32
     dbe:	fa00 fc02 	lsl.w	ip, r0, r2
     dc2:	ea5f 0031 	movs.w	r0, r1, rrx
     dc6:	f140 0000 	adc.w	r0, r0, #0
     dca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     dce:	bf08      	it	eq
     dd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dd4:	4770      	bx	lr
     dd6:	f092 0f00 	teq	r2, #0
     dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0040      	lsleq	r0, r0, #1
     de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     de6:	3a01      	subeq	r2, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xce>
     dea:	ea40 000c 	orr.w	r0, r0, ip
     dee:	f093 0f00 	teq	r3, #0
     df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     df6:	bf02      	ittt	eq
     df8:	0049      	lsleq	r1, r1, #1
     dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dfe:	3b01      	subeq	r3, #1
     e00:	d0f9      	beq.n	df6 <__aeabi_fmul+0xe6>
     e02:	ea41 010c 	orr.w	r1, r1, ip
     e06:	e78f      	b.n	d28 <__aeabi_fmul+0x18>
     e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e0c:	ea92 0f0c 	teq	r2, ip
     e10:	bf18      	it	ne
     e12:	ea93 0f0c 	teqne	r3, ip
     e16:	d00a      	beq.n	e2e <__aeabi_fmul+0x11e>
     e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e1c:	bf18      	it	ne
     e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e22:	d1d8      	bne.n	dd6 <__aeabi_fmul+0xc6>
     e24:	ea80 0001 	eor.w	r0, r0, r1
     e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f090 0f00 	teq	r0, #0
     e32:	bf17      	itett	ne
     e34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e38:	4608      	moveq	r0, r1
     e3a:	f091 0f00 	teqne	r1, #0
     e3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e42:	d014      	beq.n	e6e <__aeabi_fmul+0x15e>
     e44:	ea92 0f0c 	teq	r2, ip
     e48:	d101      	bne.n	e4e <__aeabi_fmul+0x13e>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d10f      	bne.n	e6e <__aeabi_fmul+0x15e>
     e4e:	ea93 0f0c 	teq	r3, ip
     e52:	d103      	bne.n	e5c <__aeabi_fmul+0x14c>
     e54:	024b      	lsls	r3, r1, #9
     e56:	bf18      	it	ne
     e58:	4608      	movne	r0, r1
     e5a:	d108      	bne.n	e6e <__aeabi_fmul+0x15e>
     e5c:	ea80 0001 	eor.w	r0, r0, r1
     e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e6c:	4770      	bx	lr
     e6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e76:	4770      	bx	lr

00000e78 <__aeabi_fdiv>:
     e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e80:	bf1e      	ittt	ne
     e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e86:	ea92 0f0c 	teqne	r2, ip
     e8a:	ea93 0f0c 	teqne	r3, ip
     e8e:	d069      	beq.n	f64 <__aeabi_fdiv+0xec>
     e90:	eba2 0203 	sub.w	r2, r2, r3
     e94:	ea80 0c01 	eor.w	ip, r0, r1
     e98:	0249      	lsls	r1, r1, #9
     e9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e9e:	d037      	beq.n	f10 <__aeabi_fdiv+0x98>
     ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     ea4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     ea8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     eac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     eb0:	428b      	cmp	r3, r1
     eb2:	bf38      	it	cc
     eb4:	005b      	lslcc	r3, r3, #1
     eb6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     eba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ebe:	428b      	cmp	r3, r1
     ec0:	bf24      	itt	cs
     ec2:	1a5b      	subcs	r3, r3, r1
     ec4:	ea40 000c 	orrcs.w	r0, r0, ip
     ec8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     ecc:	bf24      	itt	cs
     ece:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     ed2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ed6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     eda:	bf24      	itt	cs
     edc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ee0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ee4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ee8:	bf24      	itt	cs
     eea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     eee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     ef2:	011b      	lsls	r3, r3, #4
     ef4:	bf18      	it	ne
     ef6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     efa:	d1e0      	bne.n	ebe <__aeabi_fdiv+0x46>
     efc:	2afd      	cmp	r2, #253	; 0xfd
     efe:	f63f af50 	bhi.w	da2 <__aeabi_fmul+0x92>
     f02:	428b      	cmp	r3, r1
     f04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f08:	bf08      	it	eq
     f0a:	f020 0001 	biceq.w	r0, r0, #1
     f0e:	4770      	bx	lr
     f10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f18:	327f      	adds	r2, #127	; 0x7f
     f1a:	bfc2      	ittt	gt
     f1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f24:	4770      	bxgt	lr
     f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f2a:	f04f 0300 	mov.w	r3, #0
     f2e:	3a01      	subs	r2, #1
     f30:	e737      	b.n	da2 <__aeabi_fmul+0x92>
     f32:	f092 0f00 	teq	r2, #0
     f36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0040      	lsleq	r0, r0, #1
     f3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f42:	3a01      	subeq	r2, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xc2>
     f46:	ea40 000c 	orr.w	r0, r0, ip
     f4a:	f093 0f00 	teq	r3, #0
     f4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f52:	bf02      	ittt	eq
     f54:	0049      	lsleq	r1, r1, #1
     f56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f5a:	3b01      	subeq	r3, #1
     f5c:	d0f9      	beq.n	f52 <__aeabi_fdiv+0xda>
     f5e:	ea41 010c 	orr.w	r1, r1, ip
     f62:	e795      	b.n	e90 <__aeabi_fdiv+0x18>
     f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f68:	ea92 0f0c 	teq	r2, ip
     f6c:	d108      	bne.n	f80 <__aeabi_fdiv+0x108>
     f6e:	0242      	lsls	r2, r0, #9
     f70:	f47f af7d 	bne.w	e6e <__aeabi_fmul+0x15e>
     f74:	ea93 0f0c 	teq	r3, ip
     f78:	f47f af70 	bne.w	e5c <__aeabi_fmul+0x14c>
     f7c:	4608      	mov	r0, r1
     f7e:	e776      	b.n	e6e <__aeabi_fmul+0x15e>
     f80:	ea93 0f0c 	teq	r3, ip
     f84:	d104      	bne.n	f90 <__aeabi_fdiv+0x118>
     f86:	024b      	lsls	r3, r1, #9
     f88:	f43f af4c 	beq.w	e24 <__aeabi_fmul+0x114>
     f8c:	4608      	mov	r0, r1
     f8e:	e76e      	b.n	e6e <__aeabi_fmul+0x15e>
     f90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f94:	bf18      	it	ne
     f96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f9a:	d1ca      	bne.n	f32 <__aeabi_fdiv+0xba>
     f9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     fa0:	f47f af5c 	bne.w	e5c <__aeabi_fmul+0x14c>
     fa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     fa8:	f47f af3c 	bne.w	e24 <__aeabi_fmul+0x114>
     fac:	e75f      	b.n	e6e <__aeabi_fmul+0x15e>
     fae:	bf00      	nop

00000fb0 <__gesf2>:
     fb0:	f04f 3cff 	mov.w	ip, #4294967295
     fb4:	e006      	b.n	fc4 <__cmpsf2+0x4>
     fb6:	bf00      	nop

00000fb8 <__lesf2>:
     fb8:	f04f 0c01 	mov.w	ip, #1
     fbc:	e002      	b.n	fc4 <__cmpsf2+0x4>
     fbe:	bf00      	nop

00000fc0 <__cmpsf2>:
     fc0:	f04f 0c01 	mov.w	ip, #1
     fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
     fc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fd4:	bf18      	it	ne
     fd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fda:	d011      	beq.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
     fdc:	b001      	add	sp, #4
     fde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fe2:	bf18      	it	ne
     fe4:	ea90 0f01 	teqne	r0, r1
     fe8:	bf58      	it	pl
     fea:	ebb2 0003 	subspl.w	r0, r2, r3
     fee:	bf88      	it	hi
     ff0:	17c8      	asrhi	r0, r1, #31
     ff2:	bf38      	it	cc
     ff4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     ff8:	bf18      	it	ne
     ffa:	f040 0001 	orrne.w	r0, r0, #1
     ffe:	4770      	bx	lr
    1000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    1004:	d102      	bne.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
    1006:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    100a:	d105      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    1010:	d1e4      	bne.n	fdc <__cmpsf2+0x1c>
    1012:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    1016:	d0e1      	beq.n	fdc <__cmpsf2+0x1c>
    1018:	f85d 0b04 	ldr.w	r0, [sp], #4
    101c:	4770      	bx	lr
    101e:	bf00      	nop

00001020 <__aeabi_cfrcmple>:
    1020:	4684      	mov	ip, r0
    1022:	4608      	mov	r0, r1
    1024:	4661      	mov	r1, ip
    1026:	e7ff      	b.n	1028 <__aeabi_cfcmpeq>

00001028 <__aeabi_cfcmpeq>:
    1028:	b50f      	push	{r0, r1, r2, r3, lr}
    102a:	f7ff ffc9 	bl	fc0 <__cmpsf2>
    102e:	2800      	cmp	r0, #0
    1030:	bf48      	it	mi
    1032:	f110 0f00 	cmnmi.w	r0, #0
    1036:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001038 <__aeabi_fcmpeq>:
    1038:	f84d ed08 	str.w	lr, [sp, #-8]!
    103c:	f7ff fff4 	bl	1028 <__aeabi_cfcmpeq>
    1040:	bf0c      	ite	eq
    1042:	2001      	moveq	r0, #1
    1044:	2000      	movne	r0, #0
    1046:	f85d fb08 	ldr.w	pc, [sp], #8
    104a:	bf00      	nop

0000104c <__aeabi_fcmplt>:
    104c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1050:	f7ff ffea 	bl	1028 <__aeabi_cfcmpeq>
    1054:	bf34      	ite	cc
    1056:	2001      	movcc	r0, #1
    1058:	2000      	movcs	r0, #0
    105a:	f85d fb08 	ldr.w	pc, [sp], #8
    105e:	bf00      	nop

00001060 <__aeabi_fcmple>:
    1060:	f84d ed08 	str.w	lr, [sp, #-8]!
    1064:	f7ff ffe0 	bl	1028 <__aeabi_cfcmpeq>
    1068:	bf94      	ite	ls
    106a:	2001      	movls	r0, #1
    106c:	2000      	movhi	r0, #0
    106e:	f85d fb08 	ldr.w	pc, [sp], #8
    1072:	bf00      	nop

00001074 <__aeabi_fcmpge>:
    1074:	f84d ed08 	str.w	lr, [sp, #-8]!
    1078:	f7ff ffd2 	bl	1020 <__aeabi_cfrcmple>
    107c:	bf94      	ite	ls
    107e:	2001      	movls	r0, #1
    1080:	2000      	movhi	r0, #0
    1082:	f85d fb08 	ldr.w	pc, [sp], #8
    1086:	bf00      	nop

00001088 <__aeabi_fcmpgt>:
    1088:	f84d ed08 	str.w	lr, [sp, #-8]!
    108c:	f7ff ffc8 	bl	1020 <__aeabi_cfrcmple>
    1090:	bf34      	ite	cc
    1092:	2001      	movcc	r0, #1
    1094:	2000      	movcs	r0, #0
    1096:	f85d fb08 	ldr.w	pc, [sp], #8
    109a:	bf00      	nop

0000109c <__aeabi_f2iz>:
    109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    10a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    10a4:	d30f      	bcc.n	10c6 <__aeabi_f2iz+0x2a>
    10a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    10aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    10ae:	d90d      	bls.n	10cc <__aeabi_f2iz+0x30>
    10b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    10b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    10bc:	fa23 f002 	lsr.w	r0, r3, r2
    10c0:	bf18      	it	ne
    10c2:	4240      	negne	r0, r0
    10c4:	4770      	bx	lr
    10c6:	f04f 0000 	mov.w	r0, #0
    10ca:	4770      	bx	lr
    10cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    10d0:	d101      	bne.n	10d6 <__aeabi_f2iz+0x3a>
    10d2:	0242      	lsls	r2, r0, #9
    10d4:	d105      	bne.n	10e2 <__aeabi_f2iz+0x46>
    10d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    10da:	bf08      	it	eq
    10dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10e0:	4770      	bx	lr
    10e2:	f04f 0000 	mov.w	r0, #0
    10e6:	4770      	bx	lr

000010e8 <__aeabi_uldivmod>:
    10e8:	b953      	cbnz	r3, 1100 <__aeabi_uldivmod+0x18>
    10ea:	b94a      	cbnz	r2, 1100 <__aeabi_uldivmod+0x18>
    10ec:	2900      	cmp	r1, #0
    10ee:	bf08      	it	eq
    10f0:	2800      	cmpeq	r0, #0
    10f2:	bf1c      	itt	ne
    10f4:	f04f 31ff 	movne.w	r1, #4294967295
    10f8:	f04f 30ff 	movne.w	r0, #4294967295
    10fc:	f000 b9a8 	b.w	1450 <__aeabi_idiv0>
    1100:	f1ad 0c08 	sub.w	ip, sp, #8
    1104:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1108:	f000 f83e 	bl	1188 <__udivmoddi4>
    110c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1114:	b004      	add	sp, #16
    1116:	4770      	bx	lr

00001118 <__aeabi_d2lz>:
    1118:	b538      	push	{r3, r4, r5, lr}
    111a:	4605      	mov	r5, r0
    111c:	460c      	mov	r4, r1
    111e:	2200      	movs	r2, #0
    1120:	2300      	movs	r3, #0
    1122:	4628      	mov	r0, r5
    1124:	4621      	mov	r1, r4
    1126:	f7ff fc45 	bl	9b4 <__aeabi_dcmplt>
    112a:	b928      	cbnz	r0, 1138 <__aeabi_d2lz+0x20>
    112c:	4628      	mov	r0, r5
    112e:	4621      	mov	r1, r4
    1130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1134:	f000 b80a 	b.w	114c <__aeabi_d2ulz>
    1138:	4628      	mov	r0, r5
    113a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
    113e:	f000 f805 	bl	114c <__aeabi_d2ulz>
    1142:	4240      	negs	r0, r0
    1144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1148:	bd38      	pop	{r3, r4, r5, pc}
    114a:	bf00      	nop

0000114c <__aeabi_d2ulz>:
    114c:	b5d0      	push	{r4, r6, r7, lr}
    114e:	2200      	movs	r2, #0
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <__aeabi_d2ulz+0x34>)
    1152:	4606      	mov	r6, r0
    1154:	460f      	mov	r7, r1
    1156:	f7ff f9bb 	bl	4d0 <__aeabi_dmul>
    115a:	f000 f97b 	bl	1454 <__aeabi_d2uiz>
    115e:	4604      	mov	r4, r0
    1160:	f7ff f93c 	bl	3dc <__aeabi_ui2d>
    1164:	2200      	movs	r2, #0
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <__aeabi_d2ulz+0x38>)
    1168:	f7ff f9b2 	bl	4d0 <__aeabi_dmul>
    116c:	4602      	mov	r2, r0
    116e:	460b      	mov	r3, r1
    1170:	4630      	mov	r0, r6
    1172:	4639      	mov	r1, r7
    1174:	f7fe fff4 	bl	160 <__aeabi_dsub>
    1178:	f000 f96c 	bl	1454 <__aeabi_d2uiz>
    117c:	4621      	mov	r1, r4
    117e:	bdd0      	pop	{r4, r6, r7, pc}
    1180:	3df00000 	.word	0x3df00000
    1184:	41f00000 	.word	0x41f00000

00001188 <__udivmoddi4>:
    1188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    118c:	9e08      	ldr	r6, [sp, #32]
    118e:	460d      	mov	r5, r1
    1190:	4604      	mov	r4, r0
    1192:	468a      	mov	sl, r1
    1194:	2b00      	cmp	r3, #0
    1196:	d17f      	bne.n	1298 <__udivmoddi4+0x110>
    1198:	428a      	cmp	r2, r1
    119a:	4617      	mov	r7, r2
    119c:	d941      	bls.n	1222 <__udivmoddi4+0x9a>
    119e:	fab2 f282 	clz	r2, r2
    11a2:	b14a      	cbz	r2, 11b8 <__udivmoddi4+0x30>
    11a4:	f1c2 0120 	rsb	r1, r2, #32
    11a8:	fa05 f302 	lsl.w	r3, r5, r2
    11ac:	4097      	lsls	r7, r2
    11ae:	4094      	lsls	r4, r2
    11b0:	fa20 f101 	lsr.w	r1, r0, r1
    11b4:	ea41 0a03 	orr.w	sl, r1, r3
    11b8:	ea4f 4817 	mov.w	r8, r7, lsr #16
    11bc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c0:	fa1f f987 	uxth.w	r9, r7
    11c4:	fbba fef8 	udiv	lr, sl, r8
    11c8:	fb08 a31e 	mls	r3, r8, lr, sl
    11cc:	fb0e f109 	mul.w	r1, lr, r9
    11d0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    11d4:	4299      	cmp	r1, r3
    11d6:	d906      	bls.n	11e6 <__udivmoddi4+0x5e>
    11d8:	18fb      	adds	r3, r7, r3
    11da:	d202      	bcs.n	11e2 <__udivmoddi4+0x5a>
    11dc:	4299      	cmp	r1, r3
    11de:	f200 8124 	bhi.w	142a <__udivmoddi4+0x2a2>
    11e2:	f10e 3eff 	add.w	lr, lr, #4294967295
    11e6:	1a59      	subs	r1, r3, r1
    11e8:	b2a3      	uxth	r3, r4
    11ea:	fbb1 f0f8 	udiv	r0, r1, r8
    11ee:	fb08 1110 	mls	r1, r8, r0, r1
    11f2:	fb00 f909 	mul.w	r9, r0, r9
    11f6:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    11fa:	45a1      	cmp	r9, r4
    11fc:	d905      	bls.n	120a <__udivmoddi4+0x82>
    11fe:	193c      	adds	r4, r7, r4
    1200:	d202      	bcs.n	1208 <__udivmoddi4+0x80>
    1202:	45a1      	cmp	r9, r4
    1204:	f200 810e 	bhi.w	1424 <__udivmoddi4+0x29c>
    1208:	3801      	subs	r0, #1
    120a:	eba4 0409 	sub.w	r4, r4, r9
    120e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1212:	2100      	movs	r1, #0
    1214:	b11e      	cbz	r6, 121e <__udivmoddi4+0x96>
    1216:	40d4      	lsrs	r4, r2
    1218:	2300      	movs	r3, #0
    121a:	e9c6 4300 	strd	r4, r3, [r6]
    121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1222:	b902      	cbnz	r2, 1226 <__udivmoddi4+0x9e>
    1224:	deff      	udf	#255	; 0xff
    1226:	fab2 f282 	clz	r2, r2
    122a:	2a00      	cmp	r2, #0
    122c:	d14f      	bne.n	12ce <__udivmoddi4+0x146>
    122e:	1bcb      	subs	r3, r1, r7
    1230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1234:	fa1f f887 	uxth.w	r8, r7
    1238:	2101      	movs	r1, #1
    123a:	0c25      	lsrs	r5, r4, #16
    123c:	fbb3 fcfe 	udiv	ip, r3, lr
    1240:	fb0e 301c 	mls	r0, lr, ip, r3
    1244:	462b      	mov	r3, r5
    1246:	fb08 f90c 	mul.w	r9, r8, ip
    124a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    124e:	45a9      	cmp	r9, r5
    1250:	d90a      	bls.n	1268 <__udivmoddi4+0xe0>
    1252:	197d      	adds	r5, r7, r5
    1254:	bf2c      	ite	cs
    1256:	2301      	movcs	r3, #1
    1258:	2300      	movcc	r3, #0
    125a:	45a9      	cmp	r9, r5
    125c:	d902      	bls.n	1264 <__udivmoddi4+0xdc>
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80d9 	beq.w	1416 <__udivmoddi4+0x28e>
    1264:	f10c 3cff 	add.w	ip, ip, #4294967295
    1268:	eba5 0509 	sub.w	r5, r5, r9
    126c:	b2a3      	uxth	r3, r4
    126e:	fbb5 f0fe 	udiv	r0, r5, lr
    1272:	fb0e 5510 	mls	r5, lr, r0, r5
    1276:	fb08 f800 	mul.w	r8, r8, r0
    127a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    127e:	45a0      	cmp	r8, r4
    1280:	d905      	bls.n	128e <__udivmoddi4+0x106>
    1282:	193c      	adds	r4, r7, r4
    1284:	d202      	bcs.n	128c <__udivmoddi4+0x104>
    1286:	45a0      	cmp	r8, r4
    1288:	f200 80c9 	bhi.w	141e <__udivmoddi4+0x296>
    128c:	3801      	subs	r0, #1
    128e:	eba4 0408 	sub.w	r4, r4, r8
    1292:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1296:	e7bd      	b.n	1214 <__udivmoddi4+0x8c>
    1298:	428b      	cmp	r3, r1
    129a:	d908      	bls.n	12ae <__udivmoddi4+0x126>
    129c:	2e00      	cmp	r6, #0
    129e:	f000 80b1 	beq.w	1404 <__udivmoddi4+0x27c>
    12a2:	2100      	movs	r1, #0
    12a4:	e9c6 0500 	strd	r0, r5, [r6]
    12a8:	4608      	mov	r0, r1
    12aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12ae:	fab3 f183 	clz	r1, r3
    12b2:	2900      	cmp	r1, #0
    12b4:	d146      	bne.n	1344 <__udivmoddi4+0x1bc>
    12b6:	42ab      	cmp	r3, r5
    12b8:	f0c0 80a7 	bcc.w	140a <__udivmoddi4+0x282>
    12bc:	4282      	cmp	r2, r0
    12be:	f240 80a4 	bls.w	140a <__udivmoddi4+0x282>
    12c2:	4608      	mov	r0, r1
    12c4:	2e00      	cmp	r6, #0
    12c6:	d0aa      	beq.n	121e <__udivmoddi4+0x96>
    12c8:	e9c6 4a00 	strd	r4, sl, [r6]
    12cc:	e7a7      	b.n	121e <__udivmoddi4+0x96>
    12ce:	f1c2 0020 	rsb	r0, r2, #32
    12d2:	4097      	lsls	r7, r2
    12d4:	fa01 f302 	lsl.w	r3, r1, r2
    12d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    12dc:	40c1      	lsrs	r1, r0
    12de:	fa24 f500 	lsr.w	r5, r4, r0
    12e2:	fa1f f887 	uxth.w	r8, r7
    12e6:	4094      	lsls	r4, r2
    12e8:	431d      	orrs	r5, r3
    12ea:	fbb1 f0fe 	udiv	r0, r1, lr
    12ee:	0c2b      	lsrs	r3, r5, #16
    12f0:	fb0e 1110 	mls	r1, lr, r0, r1
    12f4:	fb00 fc08 	mul.w	ip, r0, r8
    12f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    12fc:	459c      	cmp	ip, r3
    12fe:	d909      	bls.n	1314 <__udivmoddi4+0x18c>
    1300:	18fb      	adds	r3, r7, r3
    1302:	bf2c      	ite	cs
    1304:	2101      	movcs	r1, #1
    1306:	2100      	movcc	r1, #0
    1308:	459c      	cmp	ip, r3
    130a:	d902      	bls.n	1312 <__udivmoddi4+0x18a>
    130c:	2900      	cmp	r1, #0
    130e:	f000 8095 	beq.w	143c <__udivmoddi4+0x2b4>
    1312:	3801      	subs	r0, #1
    1314:	eba3 030c 	sub.w	r3, r3, ip
    1318:	b2ad      	uxth	r5, r5
    131a:	fbb3 f1fe 	udiv	r1, r3, lr
    131e:	fb0e 3311 	mls	r3, lr, r1, r3
    1322:	fb01 fc08 	mul.w	ip, r1, r8
    1326:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    132a:	45ac      	cmp	ip, r5
    132c:	d905      	bls.n	133a <__udivmoddi4+0x1b2>
    132e:	197d      	adds	r5, r7, r5
    1330:	d202      	bcs.n	1338 <__udivmoddi4+0x1b0>
    1332:	45ac      	cmp	ip, r5
    1334:	f200 8089 	bhi.w	144a <__udivmoddi4+0x2c2>
    1338:	3901      	subs	r1, #1
    133a:	eba5 030c 	sub.w	r3, r5, ip
    133e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    1342:	e77a      	b.n	123a <__udivmoddi4+0xb2>
    1344:	f1c1 0420 	rsb	r4, r1, #32
    1348:	408b      	lsls	r3, r1
    134a:	fa02 f701 	lsl.w	r7, r2, r1
    134e:	fa05 fc01 	lsl.w	ip, r5, r1
    1352:	40e2      	lsrs	r2, r4
    1354:	fa20 f804 	lsr.w	r8, r0, r4
    1358:	40e5      	lsrs	r5, r4
    135a:	fa00 fe01 	lsl.w	lr, r0, r1
    135e:	4313      	orrs	r3, r2
    1360:	ea48 020c 	orr.w	r2, r8, ip
    1364:	ea4f 4813 	mov.w	r8, r3, lsr #16
    1368:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    136c:	fa1f f983 	uxth.w	r9, r3
    1370:	fbb5 faf8 	udiv	sl, r5, r8
    1374:	fb08 551a 	mls	r5, r8, sl, r5
    1378:	fb0a f009 	mul.w	r0, sl, r9
    137c:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    1380:	4560      	cmp	r0, ip
    1382:	d90a      	bls.n	139a <__udivmoddi4+0x212>
    1384:	eb13 0c0c 	adds.w	ip, r3, ip
    1388:	bf2c      	ite	cs
    138a:	2501      	movcs	r5, #1
    138c:	2500      	movcc	r5, #0
    138e:	4560      	cmp	r0, ip
    1390:	d901      	bls.n	1396 <__udivmoddi4+0x20e>
    1392:	2d00      	cmp	r5, #0
    1394:	d055      	beq.n	1442 <__udivmoddi4+0x2ba>
    1396:	f10a 3aff 	add.w	sl, sl, #4294967295
    139a:	ebac 0c00 	sub.w	ip, ip, r0
    139e:	b292      	uxth	r2, r2
    13a0:	fbbc f0f8 	udiv	r0, ip, r8
    13a4:	fb08 cc10 	mls	ip, r8, r0, ip
    13a8:	fb00 f909 	mul.w	r9, r0, r9
    13ac:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    13b0:	45e1      	cmp	r9, ip
    13b2:	d905      	bls.n	13c0 <__udivmoddi4+0x238>
    13b4:	eb13 0c0c 	adds.w	ip, r3, ip
    13b8:	d201      	bcs.n	13be <__udivmoddi4+0x236>
    13ba:	45e1      	cmp	r9, ip
    13bc:	d83b      	bhi.n	1436 <__udivmoddi4+0x2ae>
    13be:	3801      	subs	r0, #1
    13c0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    13c4:	ebac 0c09 	sub.w	ip, ip, r9
    13c8:	fba0 8907 	umull	r8, r9, r0, r7
    13cc:	45cc      	cmp	ip, r9
    13ce:	4645      	mov	r5, r8
    13d0:	464a      	mov	r2, r9
    13d2:	d302      	bcc.n	13da <__udivmoddi4+0x252>
    13d4:	d106      	bne.n	13e4 <__udivmoddi4+0x25c>
    13d6:	45c6      	cmp	lr, r8
    13d8:	d204      	bcs.n	13e4 <__udivmoddi4+0x25c>
    13da:	3801      	subs	r0, #1
    13dc:	ebb8 0507 	subs.w	r5, r8, r7
    13e0:	eb69 0203 	sbc.w	r2, r9, r3
    13e4:	b32e      	cbz	r6, 1432 <__udivmoddi4+0x2aa>
    13e6:	ebbe 0305 	subs.w	r3, lr, r5
    13ea:	eb6c 0c02 	sbc.w	ip, ip, r2
    13ee:	fa23 f201 	lsr.w	r2, r3, r1
    13f2:	fa0c f404 	lsl.w	r4, ip, r4
    13f6:	fa2c f301 	lsr.w	r3, ip, r1
    13fa:	2100      	movs	r1, #0
    13fc:	4314      	orrs	r4, r2
    13fe:	e9c6 4300 	strd	r4, r3, [r6]
    1402:	e70c      	b.n	121e <__udivmoddi4+0x96>
    1404:	4631      	mov	r1, r6
    1406:	4630      	mov	r0, r6
    1408:	e709      	b.n	121e <__udivmoddi4+0x96>
    140a:	1a84      	subs	r4, r0, r2
    140c:	eb65 0303 	sbc.w	r3, r5, r3
    1410:	2001      	movs	r0, #1
    1412:	469a      	mov	sl, r3
    1414:	e756      	b.n	12c4 <__udivmoddi4+0x13c>
    1416:	f1ac 0c02 	sub.w	ip, ip, #2
    141a:	443d      	add	r5, r7
    141c:	e724      	b.n	1268 <__udivmoddi4+0xe0>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e734      	b.n	128e <__udivmoddi4+0x106>
    1424:	3802      	subs	r0, #2
    1426:	443c      	add	r4, r7
    1428:	e6ef      	b.n	120a <__udivmoddi4+0x82>
    142a:	f1ae 0e02 	sub.w	lr, lr, #2
    142e:	443b      	add	r3, r7
    1430:	e6d9      	b.n	11e6 <__udivmoddi4+0x5e>
    1432:	4631      	mov	r1, r6
    1434:	e6f3      	b.n	121e <__udivmoddi4+0x96>
    1436:	3802      	subs	r0, #2
    1438:	449c      	add	ip, r3
    143a:	e7c1      	b.n	13c0 <__udivmoddi4+0x238>
    143c:	3802      	subs	r0, #2
    143e:	443b      	add	r3, r7
    1440:	e768      	b.n	1314 <__udivmoddi4+0x18c>
    1442:	f1aa 0a02 	sub.w	sl, sl, #2
    1446:	449c      	add	ip, r3
    1448:	e7a7      	b.n	139a <__udivmoddi4+0x212>
    144a:	3902      	subs	r1, #2
    144c:	443d      	add	r5, r7
    144e:	e774      	b.n	133a <__udivmoddi4+0x1b2>

00001450 <__aeabi_idiv0>:
    1450:	4770      	bx	lr
    1452:	bf00      	nop

00001454 <__aeabi_d2uiz>:
    1454:	004a      	lsls	r2, r1, #1
    1456:	d211      	bcs.n	147c <__aeabi_d2uiz+0x28>
    1458:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    145c:	d211      	bcs.n	1482 <__aeabi_d2uiz+0x2e>
    145e:	d50d      	bpl.n	147c <__aeabi_d2uiz+0x28>
    1460:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1464:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1468:	d40e      	bmi.n	1488 <__aeabi_d2uiz+0x34>
    146a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    146e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1472:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1476:	fa23 f002 	lsr.w	r0, r3, r2
    147a:	4770      	bx	lr
    147c:	f04f 0000 	mov.w	r0, #0
    1480:	4770      	bx	lr
    1482:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1486:	d102      	bne.n	148e <__aeabi_d2uiz+0x3a>
    1488:	f04f 30ff 	mov.w	r0, #4294967295
    148c:	4770      	bx	lr
    148e:	f04f 0000 	mov.w	r0, #0
    1492:	4770      	bx	lr

00001494 <__aeabi_dcmpun>:
    1494:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1498:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    149c:	d102      	bne.n	14a4 <__aeabi_dcmpun+0x10>
    149e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    14a2:	d10a      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    14a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    14ac:	d102      	bne.n	14b4 <__aeabi_dcmpun+0x20>
    14ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    14b2:	d102      	bne.n	14ba <__aeabi_dcmpun+0x26>
    14b4:	f04f 0000 	mov.w	r0, #0
    14b8:	4770      	bx	lr
    14ba:	f04f 0001 	mov.w	r0, #1
    14be:	4770      	bx	lr

000014c0 <strcmp>:
    14c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    14c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    14c8:	2a01      	cmp	r2, #1
    14ca:	bf28      	it	cs
    14cc:	429a      	cmpcs	r2, r3
    14ce:	d0f7      	beq.n	14c0 <strcmp>
    14d0:	1ad0      	subs	r0, r2, r3
    14d2:	4770      	bx	lr

000014d4 <strlen>:
    14d4:	4603      	mov	r3, r0
    14d6:	f813 2b01 	ldrb.w	r2, [r3], #1
    14da:	2a00      	cmp	r2, #0
    14dc:	d1fb      	bne.n	14d6 <strlen+0x2>
    14de:	1a18      	subs	r0, r3, r0
    14e0:	3801      	subs	r0, #1
    14e2:	4770      	bx	lr
    14e4:	0000      	movs	r0, r0
	...

000014e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
    14e8:	b530      	push	{r4, r5, lr}
    14ea:	b085      	sub	sp, #20
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
    14ec:	f7fe fff0 	bl	4d0 <__aeabi_dmul>
    14f0:	4604      	mov	r4, r0
    14f2:	460d      	mov	r5, r1
    14f4:	9b08      	ldr	r3, [sp, #32]
    14f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    14fa:	40d8      	lsrs	r0, r3
    14fc:	f7fe ff7e 	bl	3fc <__aeabi_i2d>
    1500:	4622      	mov	r2, r4
    1502:	462b      	mov	r3, r5
    1504:	f7fe ffe4 	bl	4d0 <__aeabi_dmul>
    1508:	4602      	mov	r2, r0
    150a:	460b      	mov	r3, r1
    150c:	e9cd 2300 	strd	r2, r3, [sp]
    1510:	a309      	add	r3, pc, #36	; (adr r3, 1538 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x50>)
    1512:	e9d3 2300 	ldrd	r2, r3, [r3]
    1516:	e9cd 2302 	strd	r2, r3, [sp, #8]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    151a:	f7ff fa69 	bl	9f0 <__aeabi_dcmpgt>
    151e:	b940      	cbnz	r0, 1532 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4a>
	return __b;
      return __a;
    1520:	4669      	mov	r1, sp
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
    1522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1524:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1526:	e9d1 0100 	ldrd	r0, r1, [r1]
    152a:	f007 ff7b 	bl	9424 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
                                   quantized_multiplier, left_shift);
}
    152e:	b005      	add	sp, #20
    1530:	bd30      	pop	{r4, r5, pc}
	return __b;
    1532:	a902      	add	r1, sp, #8
    1534:	e7f5      	b.n	1522 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x3a>
    1536:	bf00      	nop
    1538:	ffc00000 	.word	0xffc00000
    153c:	41dfffff 	.word	0x41dfffff

00001540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
    1540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1544:	b082      	sub	sp, #8
    1546:	4607      	mov	r7, r0
    1548:	460d      	mov	r5, r1
    154a:	4616      	mov	r6, r2
    154c:	461c      	mov	r4, r3
    154e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1552:	68c8      	ldr	r0, [r1, #12]
    1554:	f7fe ff64 	bl	420 <__aeabi_f2d>
    1558:	4680      	mov	r8, r0
    155a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
    155c:	68f0      	ldr	r0, [r6, #12]
    155e:	f7fe ff5f 	bl	420 <__aeabi_f2d>
    1562:	4602      	mov	r2, r0
    1564:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
    1566:	4640      	mov	r0, r8
    1568:	4649      	mov	r1, r9
    156a:	f7fe ffb1 	bl	4d0 <__aeabi_dmul>
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
    156e:	b1ec      	cbz	r4, 15ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x6c>
    1570:	4680      	mov	r8, r0
    1572:	4689      	mov	r9, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
    1574:	68e0      	ldr	r0, [r4, #12]
    1576:	f7fe ff53 	bl	420 <__aeabi_f2d>
    157a:	4602      	mov	r2, r0
    157c:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
    157e:	4640      	mov	r0, r8
    1580:	4649      	mov	r1, r9
    1582:	f7fe fded 	bl	160 <__aeabi_dsub>
    1586:	4680      	mov	r8, r0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    1588:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    const double output_scale = static_cast<double>(output->params.scale);
    158c:	f8da 000c 	ldr.w	r0, [sl, #12]
    1590:	f7fe ff46 	bl	420 <__aeabi_f2d>
    1594:	4602      	mov	r2, r0
    1596:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    1598:	4640      	mov	r0, r8
    159a:	4621      	mov	r1, r4
    159c:	f7ff f8c2 	bl	724 <__aeabi_ddiv>
    15a0:	a30d      	add	r3, pc, #52	; (adr r3, 15d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
    15a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15a6:	f7ff fa0f 	bl	9c8 <__aeabi_dcmple>
    15aa:	b150      	cbz	r0, 15c2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x82>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
    15ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    15ae:	9300      	str	r3, [sp, #0]
    15b0:	4653      	mov	r3, sl
    15b2:	4632      	mov	r2, r6
    15b4:	4629      	mov	r1, r5
    15b6:	4638      	mov	r0, r7
    15b8:	f008 f878 	bl	96ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                          multiplier);
}
    15bc:	b002      	add	sp, #8
    15be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
    15c2:	697c      	ldr	r4, [r7, #20]
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	f44f 739f 	mov.w	r3, #318	; 0x13e
    15cc:	4a05      	ldr	r2, [pc, #20]	; (15e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
    15ce:	4906      	ldr	r1, [pc, #24]	; (15e8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa8>)
    15d0:	4638      	mov	r0, r7
    15d2:	47a0      	blx	r4
    15d4:	2001      	movs	r0, #1
    15d6:	e7f1      	b.n	15bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7c>
    15d8:	47ae147b 	.word	0x47ae147b
    15dc:	3f947ae1 	.word	0x3f947ae1
    15e0:	0006ad90 	.word	0x0006ad90
    15e4:	0006ad00 	.word	0x0006ad00
    15e8:	0006aafc 	.word	0x0006aafc
    15ec:	00000000 	.word	0x00000000

000015f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
    15f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15f4:	b088      	sub	sp, #32
    15f6:	4605      	mov	r5, r0
    15f8:	460e      	mov	r6, r1
    15fa:	461f      	mov	r7, r3
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    15fc:	780c      	ldrb	r4, [r1, #0]
    15fe:	2c09      	cmp	r4, #9
    1600:	d013      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
    1602:	2c07      	cmp	r4, #7
    1604:	d011      	beq.n	162a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3a>
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1606:	2c01      	cmp	r4, #1
    1608:	f040 8133 	bne.w	1872 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x282>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    160c:	7810      	ldrb	r0, [r2, #0]
    160e:	2801      	cmp	r0, #1
    1610:	f040 8144 	bne.w	189c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>
    op_data->beta = static_cast<double>(params->beta);
    1614:	6818      	ldr	r0, [r3, #0]
    1616:	f7fe ff03 	bl	420 <__aeabi_f2d>
    161a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    161c:	e9c3 0100 	strd	r0, r1, [r3]
  }
  return kTfLiteOk;
    1620:	2400      	movs	r4, #0
}
    1622:	4620      	mov	r0, r4
    1624:	b008      	add	sp, #32
    1626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (input->type == kTfLiteInt16) {
    162a:	2c07      	cmp	r4, #7
    162c:	d01e      	beq.n	166c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7c>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    162e:	2c09      	cmp	r4, #9
    1630:	f040 8086 	bne.w	1740 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x150>
      if (output->type == kTfLiteInt16) {
    1634:	7810      	ldrb	r0, [r2, #0]
    1636:	2807      	cmp	r0, #7
    1638:	f000 8097 	beq.w	176a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    163c:	2809      	cmp	r0, #9
    163e:	f040 80d5 	bne.w	17ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1fc>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
    1642:	6913      	ldr	r3, [r2, #16]
    1644:	f113 0f80 	cmn.w	r3, #128	; 0x80
    1648:	f000 80e4 	beq.w	1814 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x224>
    164c:	696c      	ldr	r4, [r5, #20]
    164e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    1652:	9203      	str	r2, [sp, #12]
    1654:	9302      	str	r3, [sp, #8]
    1656:	4b9e      	ldr	r3, [pc, #632]	; (18d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
    1658:	9301      	str	r3, [sp, #4]
    165a:	4b9e      	ldr	r3, [pc, #632]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    165c:	9300      	str	r3, [sp, #0]
    165e:	2330      	movs	r3, #48	; 0x30
    1660:	4a9d      	ldr	r2, [pc, #628]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1662:	499e      	ldr	r1, [pc, #632]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1664:	4628      	mov	r0, r5
    1666:	47a0      	blx	r4
    1668:	2401      	movs	r4, #1
    166a:	e7da      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    166c:	6913      	ldr	r3, [r2, #16]
    166e:	2b00      	cmp	r3, #0
    1670:	d13b      	bne.n	16ea <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfa>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1672:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1676:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    167a:	4640      	mov	r0, r8
    167c:	f7ff fd04 	bl	1088 <__aeabi_fcmpgt>
    1680:	2800      	cmp	r0, #0
    1682:	d041      	beq.n	1708 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x118>
    1684:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    1688:	4640      	mov	r0, r8
    168a:	f7ff fa37 	bl	afc <__aeabi_fsub>
    168e:	4994      	ldr	r1, [pc, #592]	; (18e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
    1690:	f7ff fcfa 	bl	1088 <__aeabi_fcmpgt>
    1694:	2800      	cmp	r0, #0
    1696:	d13d      	bne.n	1714 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x124>
    if (input->type == kTfLiteInt16) {
    1698:	2c07      	cmp	r4, #7
    169a:	f000 80cd 	beq.w	1838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x248>
          static_cast<double>(params->beta),
    169e:	683f      	ldr	r7, [r7, #0]
      tflite::PreprocessSoftmaxScaling(
    16a0:	68f0      	ldr	r0, [r6, #12]
    16a2:	f7fe febd 	bl	420 <__aeabi_f2d>
    16a6:	4604      	mov	r4, r0
    16a8:	460d      	mov	r5, r1
    16aa:	4638      	mov	r0, r7
    16ac:	f7fe feb8 	bl	420 <__aeabi_f2d>
    16b0:	ab07      	add	r3, sp, #28
    16b2:	9302      	str	r3, [sp, #8]
    16b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16b6:	3308      	adds	r3, #8
    16b8:	9301      	str	r3, [sp, #4]
    16ba:	2605      	movs	r6, #5
    16bc:	9600      	str	r6, [sp, #0]
    16be:	4622      	mov	r2, r4
    16c0:	462b      	mov	r3, r5
    16c2:	f7ff ff11 	bl	14e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
      op_data->input_left_shift = input_left_shift;
    16c6:	9907      	ldr	r1, [sp, #28]
    16c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16ca:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
    16cc:	221f      	movs	r2, #31
    16ce:	4630      	mov	r0, r6
    16d0:	f012 faa8 	bl	13c24 <_ZN6tflite20CalculateInputRadiusEiii>
    16d4:	f7fe fe92 	bl	3fc <__aeabi_i2d>
      op_data->diff_min =
    16d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    16dc:	4619      	mov	r1, r3
    16de:	f7ff f991 	bl	a04 <__aeabi_d2iz>
    16e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16e4:	6198      	str	r0, [r3, #24]
  return kTfLiteOk;
    16e6:	2400      	movs	r4, #0
    16e8:	e79b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    16ea:	696c      	ldr	r4, [r5, #20]
    16ec:	2200      	movs	r2, #0
    16ee:	9203      	str	r2, [sp, #12]
    16f0:	9302      	str	r3, [sp, #8]
    16f2:	4b7c      	ldr	r3, [pc, #496]	; (18e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
    16f4:	9301      	str	r3, [sp, #4]
    16f6:	4b77      	ldr	r3, [pc, #476]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    16f8:	9300      	str	r3, [sp, #0]
    16fa:	2325      	movs	r3, #37	; 0x25
    16fc:	4a76      	ldr	r2, [pc, #472]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    16fe:	4977      	ldr	r1, [pc, #476]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1700:	4628      	mov	r0, r5
    1702:	47a0      	blx	r4
    1704:	2401      	movs	r4, #1
    1706:	e78c      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
    1708:	4641      	mov	r1, r8
    170a:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
    170e:	f7ff f9f5 	bl	afc <__aeabi_fsub>
    1712:	e7bc      	b.n	168e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9e>
    1714:	696c      	ldr	r4, [r5, #20]
    1716:	2200      	movs	r2, #0
    1718:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    171c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1720:	4640      	mov	r0, r8
    1722:	f7fe fe7d 	bl	420 <__aeabi_f2d>
    1726:	e9cd 0102 	strd	r0, r1, [sp, #8]
    172a:	4b6f      	ldr	r3, [pc, #444]	; (18e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
    172c:	9301      	str	r3, [sp, #4]
    172e:	4b6f      	ldr	r3, [pc, #444]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    1730:	9300      	str	r3, [sp, #0]
    1732:	2326      	movs	r3, #38	; 0x26
    1734:	4a68      	ldr	r2, [pc, #416]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1736:	496e      	ldr	r1, [pc, #440]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    1738:	4628      	mov	r0, r5
    173a:	47a0      	blx	r4
    173c:	2401      	movs	r4, #1
    173e:	e770      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
    1740:	696e      	ldr	r6, [r5, #20]
    1742:	4620      	mov	r0, r4
    1744:	f007 fdca 	bl	92dc <TfLiteTypeGetName>
    1748:	4604      	mov	r4, r0
    174a:	2009      	movs	r0, #9
    174c:	f007 fdc6 	bl	92dc <TfLiteTypeGetName>
    1750:	9003      	str	r0, [sp, #12]
    1752:	9402      	str	r4, [sp, #8]
    1754:	4b67      	ldr	r3, [pc, #412]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1756:	9301      	str	r3, [sp, #4]
    1758:	4b67      	ldr	r3, [pc, #412]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    175a:	9300      	str	r3, [sp, #0]
    175c:	2329      	movs	r3, #41	; 0x29
    175e:	4a5e      	ldr	r2, [pc, #376]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1760:	4966      	ldr	r1, [pc, #408]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1762:	4628      	mov	r0, r5
    1764:	47b0      	blx	r6
    1766:	2401      	movs	r4, #1
    1768:	e75b      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
    176a:	6913      	ldr	r3, [r2, #16]
    176c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    1770:	d00e      	beq.n	1790 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1a0>
    1772:	696c      	ldr	r4, [r5, #20]
    1774:	4a62      	ldr	r2, [pc, #392]	; (1900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
    1776:	9203      	str	r2, [sp, #12]
    1778:	9302      	str	r3, [sp, #8]
    177a:	4b62      	ldr	r3, [pc, #392]	; (1904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
    177c:	9301      	str	r3, [sp, #4]
    177e:	4b55      	ldr	r3, [pc, #340]	; (18d4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
    1780:	9300      	str	r3, [sp, #0]
    1782:	232b      	movs	r3, #43	; 0x2b
    1784:	4a54      	ldr	r2, [pc, #336]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1786:	4955      	ldr	r1, [pc, #340]	; (18dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
    1788:	4628      	mov	r0, r5
    178a:	47a0      	blx	r4
    178c:	2401      	movs	r4, #1
    178e:	e748      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
    1790:	f8d2 800c 	ldr.w	r8, [r2, #12]
    1794:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    1798:	4640      	mov	r0, r8
    179a:	f7ff fc75 	bl	1088 <__aeabi_fcmpgt>
    179e:	b1f8      	cbz	r0, 17e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1f0>
    17a0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    17a4:	4640      	mov	r0, r8
    17a6:	f7ff f9a9 	bl	afc <__aeabi_fsub>
    17aa:	4957      	ldr	r1, [pc, #348]	; (1908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
    17ac:	f7ff fc6c 	bl	1088 <__aeabi_fcmpgt>
    17b0:	2800      	cmp	r0, #0
    17b2:	f43f af71 	beq.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    17b6:	696c      	ldr	r4, [r5, #20]
    17b8:	2200      	movs	r2, #0
    17ba:	4b54      	ldr	r3, [pc, #336]	; (190c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
    17bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    17c0:	4640      	mov	r0, r8
    17c2:	f7fe fe2d 	bl	420 <__aeabi_f2d>
    17c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    17ca:	4b51      	ldr	r3, [pc, #324]	; (1910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
    17cc:	9301      	str	r3, [sp, #4]
    17ce:	4b47      	ldr	r3, [pc, #284]	; (18ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	232c      	movs	r3, #44	; 0x2c
    17d4:	4a40      	ldr	r2, [pc, #256]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    17d6:	4946      	ldr	r1, [pc, #280]	; (18f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>)
    17d8:	4628      	mov	r0, r5
    17da:	47a0      	blx	r4
    17dc:	2401      	movs	r4, #1
    17de:	e720      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    17e0:	4641      	mov	r1, r8
    17e2:	f04f 505e 	mov.w	r0, #931135488	; 0x37800000
    17e6:	f7ff f989 	bl	afc <__aeabi_fsub>
    17ea:	e7de      	b.n	17aa <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1ba>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
    17ec:	696e      	ldr	r6, [r5, #20]
    17ee:	f007 fd75 	bl	92dc <TfLiteTypeGetName>
    17f2:	4604      	mov	r4, r0
    17f4:	2009      	movs	r0, #9
    17f6:	f007 fd71 	bl	92dc <TfLiteTypeGetName>
    17fa:	9003      	str	r0, [sp, #12]
    17fc:	9402      	str	r4, [sp, #8]
    17fe:	4b3d      	ldr	r3, [pc, #244]	; (18f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>)
    1800:	9301      	str	r3, [sp, #4]
    1802:	4b44      	ldr	r3, [pc, #272]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    1804:	9300      	str	r3, [sp, #0]
    1806:	232f      	movs	r3, #47	; 0x2f
    1808:	4a33      	ldr	r2, [pc, #204]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    180a:	493c      	ldr	r1, [pc, #240]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    180c:	4628      	mov	r0, r5
    180e:	47b0      	blx	r6
    1810:	2401      	movs	r4, #1
    1812:	e706      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
    1814:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    1818:	68d0      	ldr	r0, [r2, #12]
    181a:	f7ff fc0d 	bl	1038 <__aeabi_fcmpeq>
    181e:	2800      	cmp	r0, #0
    1820:	f47f af3a 	bne.w	1698 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa8>
    1824:	696c      	ldr	r4, [r5, #20]
    1826:	4b3c      	ldr	r3, [pc, #240]	; (1918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
    1828:	9300      	str	r3, [sp, #0]
    182a:	2331      	movs	r3, #49	; 0x31
    182c:	4a2a      	ldr	r2, [pc, #168]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    182e:	493b      	ldr	r1, [pc, #236]	; (191c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
    1830:	4628      	mov	r0, r5
    1832:	47a0      	blx	r4
    1834:	2401      	movs	r4, #1
    1836:	e6f4      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
          static_cast<double>(input->params.scale) *
    1838:	68f0      	ldr	r0, [r6, #12]
    183a:	f7fe fdf1 	bl	420 <__aeabi_f2d>
    183e:	4604      	mov	r4, r0
    1840:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
    1842:	6838      	ldr	r0, [r7, #0]
    1844:	f7fe fdec 	bl	420 <__aeabi_f2d>
    1848:	4602      	mov	r2, r0
    184a:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
    184c:	4620      	mov	r0, r4
    184e:	4629      	mov	r1, r5
    1850:	f7fe fe3e 	bl	4d0 <__aeabi_dmul>
      double input_scale_beta_rescale =
    1854:	a31c      	add	r3, pc, #112	; (adr r3, 18c8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7fe ff63 	bl	724 <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
    185e:	ab07      	add	r3, sp, #28
    1860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1862:	3208      	adds	r2, #8
    1864:	f007 fd90 	bl	9388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
      op_data->input_left_shift = input_left_shift;
    1868:	9b07      	ldr	r3, [sp, #28]
    186a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    186c:	60d3      	str	r3, [r2, #12]
  return kTfLiteOk;
    186e:	2400      	movs	r4, #0
    1870:	e6d7      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    1872:	6946      	ldr	r6, [r0, #20]
    1874:	4620      	mov	r0, r4
    1876:	f007 fd31 	bl	92dc <TfLiteTypeGetName>
    187a:	4604      	mov	r4, r0
    187c:	2001      	movs	r0, #1
    187e:	f007 fd2d 	bl	92dc <TfLiteTypeGetName>
    1882:	9003      	str	r0, [sp, #12]
    1884:	9402      	str	r4, [sp, #8]
    1886:	4b26      	ldr	r3, [pc, #152]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    1888:	9301      	str	r3, [sp, #4]
    188a:	4b1b      	ldr	r3, [pc, #108]	; (18f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
    188c:	9300      	str	r3, [sp, #0]
    188e:	234e      	movs	r3, #78	; 0x4e
    1890:	4a11      	ldr	r2, [pc, #68]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    1892:	491a      	ldr	r1, [pc, #104]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    1894:	4628      	mov	r0, r5
    1896:	47b0      	blx	r6
    1898:	2401      	movs	r4, #1
    189a:	e6c2      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    189c:	696f      	ldr	r7, [r5, #20]
    189e:	f007 fd1d 	bl	92dc <TfLiteTypeGetName>
    18a2:	4606      	mov	r6, r0
    18a4:	2001      	movs	r0, #1
    18a6:	f007 fd19 	bl	92dc <TfLiteTypeGetName>
    18aa:	9003      	str	r0, [sp, #12]
    18ac:	9602      	str	r6, [sp, #8]
    18ae:	4b1c      	ldr	r3, [pc, #112]	; (1920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	4b18      	ldr	r3, [pc, #96]	; (1914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	234f      	movs	r3, #79	; 0x4f
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
    18ba:	4910      	ldr	r1, [pc, #64]	; (18fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
    18bc:	4628      	mov	r0, r5
    18be:	47b8      	blx	r7
    18c0:	e6af      	b.n	1622 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32>
    18c2:	bf00      	nop
    18c4:	f3af 8000 	nop.w
    18c8:	00140014 	.word	0x00140014
    18cc:	3f240014 	.word	0x3f240014
    18d0:	0006bae0 	.word	0x0006bae0
    18d4:	0006ba6c 	.word	0x0006ba6c
    18d8:	0006ba14 	.word	0x0006ba14
    18dc:	0006adbc 	.word	0x0006adbc
    18e0:	3303126f 	.word	0x3303126f
    18e4:	0006b1a8 	.word	0x0006b1a8
    18e8:	0006baa8 	.word	0x0006baa8
    18ec:	0006bab4 	.word	0x0006bab4
    18f0:	0006ba88 	.word	0x0006ba88
    18f4:	0006ae98 	.word	0x0006ae98
    18f8:	0006b3e0 	.word	0x0006b3e0
    18fc:	0006b748 	.word	0x0006b748
    1900:	ffff8000 	.word	0xffff8000
    1904:	0006bacc 	.word	0x0006bacc
    1908:	3283126f 	.word	0x3283126f
    190c:	3ef00000 	.word	0x3ef00000
    1910:	0006bad4 	.word	0x0006bad4
    1914:	0006b3d0 	.word	0x0006b3d0
    1918:	0006bae8 	.word	0x0006bae8
    191c:	0006aafc 	.word	0x0006aafc
    1920:	0006bb0c 	.word	0x0006bb0c
    1924:	00000000 	.word	0x00000000

00001928 <floor>:
    1928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    192a:	f3c1 570a 	ubfx	r7, r1, #20, #11
    192e:	460b      	mov	r3, r1
    1930:	4602      	mov	r2, r0
    1932:	460c      	mov	r4, r1
    1934:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
    1938:	4606      	mov	r6, r0
    193a:	2d13      	cmp	r5, #19
    193c:	dc20      	bgt.n	1980 <floor+0x58>
    193e:	2d00      	cmp	r5, #0
    1940:	db40      	blt.n	19c4 <floor+0x9c>
    1942:	4f35      	ldr	r7, [pc, #212]	; (1a18 <floor+0xf0>)
    1944:	412f      	asrs	r7, r5
    1946:	ea01 0c07 	and.w	ip, r1, r7
    194a:	ea5c 0c00 	orrs.w	ip, ip, r0
    194e:	d014      	beq.n	197a <floor+0x52>
    1950:	a32f      	add	r3, pc, #188	; (adr r3, 1a10 <floor+0xe8>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	f7fe fc05 	bl	164 <__adddf3>
    195a:	2200      	movs	r2, #0
    195c:	2300      	movs	r3, #0
    195e:	f7ff f847 	bl	9f0 <__aeabi_dcmpgt>
    1962:	b140      	cbz	r0, 1976 <floor+0x4e>
    1964:	2c00      	cmp	r4, #0
    1966:	da03      	bge.n	1970 <floor+0x48>
    1968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    196c:	412b      	asrs	r3, r5
    196e:	441c      	add	r4, r3
    1970:	ea24 0407 	bic.w	r4, r4, r7
    1974:	2600      	movs	r6, #0
    1976:	4632      	mov	r2, r6
    1978:	4623      	mov	r3, r4
    197a:	4610      	mov	r0, r2
    197c:	4619      	mov	r1, r3
    197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1980:	2d33      	cmp	r5, #51	; 0x33
    1982:	dd07      	ble.n	1994 <floor+0x6c>
    1984:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    1988:	d1f7      	bne.n	197a <floor+0x52>
    198a:	f7fe fbeb 	bl	164 <__adddf3>
    198e:	4602      	mov	r2, r0
    1990:	460b      	mov	r3, r1
    1992:	e7f2      	b.n	197a <floor+0x52>
    1994:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    1998:	f04f 3cff 	mov.w	ip, #4294967295
    199c:	fa2c f707 	lsr.w	r7, ip, r7
    19a0:	4207      	tst	r7, r0
    19a2:	d0ea      	beq.n	197a <floor+0x52>
    19a4:	a31a      	add	r3, pc, #104	; (adr r3, 1a10 <floor+0xe8>)
    19a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19aa:	f7fe fbdb 	bl	164 <__adddf3>
    19ae:	2200      	movs	r2, #0
    19b0:	2300      	movs	r3, #0
    19b2:	f7ff f81d 	bl	9f0 <__aeabi_dcmpgt>
    19b6:	2800      	cmp	r0, #0
    19b8:	d0dd      	beq.n	1976 <floor+0x4e>
    19ba:	2c00      	cmp	r4, #0
    19bc:	db1b      	blt.n	19f6 <floor+0xce>
    19be:	ea26 0607 	bic.w	r6, r6, r7
    19c2:	e7d8      	b.n	1976 <floor+0x4e>
    19c4:	a312      	add	r3, pc, #72	; (adr r3, 1a10 <floor+0xe8>)
    19c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ca:	f7fe fbcb 	bl	164 <__adddf3>
    19ce:	2200      	movs	r2, #0
    19d0:	2300      	movs	r3, #0
    19d2:	f7ff f80d 	bl	9f0 <__aeabi_dcmpgt>
    19d6:	2800      	cmp	r0, #0
    19d8:	d0cd      	beq.n	1976 <floor+0x4e>
    19da:	2c00      	cmp	r4, #0
    19dc:	db02      	blt.n	19e4 <floor+0xbc>
    19de:	2600      	movs	r6, #0
    19e0:	4634      	mov	r4, r6
    19e2:	e7c8      	b.n	1976 <floor+0x4e>
    19e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    19e8:	4a0c      	ldr	r2, [pc, #48]	; (1a1c <floor+0xf4>)
    19ea:	4333      	orrs	r3, r6
    19ec:	2600      	movs	r6, #0
    19ee:	42b3      	cmp	r3, r6
    19f0:	bf18      	it	ne
    19f2:	4614      	movne	r4, r2
    19f4:	e7bf      	b.n	1976 <floor+0x4e>
    19f6:	2d14      	cmp	r5, #20
    19f8:	d008      	beq.n	1a0c <floor+0xe4>
    19fa:	2201      	movs	r2, #1
    19fc:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
    1a00:	fa02 f303 	lsl.w	r3, r2, r3
    1a04:	199e      	adds	r6, r3, r6
    1a06:	bf28      	it	cs
    1a08:	18a4      	addcs	r4, r4, r2
    1a0a:	e7d8      	b.n	19be <floor+0x96>
    1a0c:	3401      	adds	r4, #1
    1a0e:	e7d6      	b.n	19be <floor+0x96>
    1a10:	8800759c 	.word	0x8800759c
    1a14:	7e37e43c 	.word	0x7e37e43c
    1a18:	000fffff 	.word	0x000fffff
    1a1c:	bff00000 	.word	0xbff00000

00001a20 <_dtoa_r>:
    1a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a24:	4616      	mov	r6, r2
    1a26:	b099      	sub	sp, #100	; 0x64
    1a28:	461f      	mov	r7, r3
    1a2a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1a2c:	4605      	mov	r5, r0
    1a2e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1a32:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1a36:	b93c      	cbnz	r4, 1a48 <_dtoa_r+0x28>
    1a38:	2010      	movs	r0, #16
    1a3a:	f00e fff1 	bl	10a20 <malloc>
    1a3e:	6268      	str	r0, [r5, #36]	; 0x24
    1a40:	6004      	str	r4, [r0, #0]
    1a42:	60c4      	str	r4, [r0, #12]
    1a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1a48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a4a:	6819      	ldr	r1, [r3, #0]
    1a4c:	b151      	cbz	r1, 1a64 <_dtoa_r+0x44>
    1a4e:	685a      	ldr	r2, [r3, #4]
    1a50:	2301      	movs	r3, #1
    1a52:	4628      	mov	r0, r5
    1a54:	4093      	lsls	r3, r2
    1a56:	604a      	str	r2, [r1, #4]
    1a58:	608b      	str	r3, [r1, #8]
    1a5a:	f014 fea1 	bl	167a0 <_Bfree>
    1a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a60:	2200      	movs	r2, #0
    1a62:	601a      	str	r2, [r3, #0]
    1a64:	1e3b      	subs	r3, r7, #0
    1a66:	bfb7      	itett	lt
    1a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1a6c:	2300      	movge	r3, #0
    1a6e:	2201      	movlt	r2, #1
    1a70:	9305      	strlt	r3, [sp, #20]
    1a72:	bfa8      	it	ge
    1a74:	f8c8 3000 	strge.w	r3, [r8]
    1a78:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1a7c:	4bac      	ldr	r3, [pc, #688]	; (1d30 <_dtoa_r+0x310>)
    1a7e:	bfb8      	it	lt
    1a80:	f8c8 2000 	strlt.w	r2, [r8]
    1a84:	ea33 0309 	bics.w	r3, r3, r9
    1a88:	d119      	bne.n	1abe <_dtoa_r+0x9e>
    1a8a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1a90:	6013      	str	r3, [r2, #0]
    1a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
    1a96:	4333      	orrs	r3, r6
    1a98:	f000 856a 	beq.w	2570 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x570>
    1a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1a9e:	b953      	cbnz	r3, 1ab6 <_dtoa_r+0x96>
    1aa0:	4ba4      	ldr	r3, [pc, #656]	; (1d34 <_dtoa_r+0x314>)
    1aa2:	e023      	b.n	1aec <_dtoa_r+0xcc>
    1aa4:	4ba4      	ldr	r3, [pc, #656]	; (1d38 <_dtoa_r+0x318>)
    1aa6:	9303      	str	r3, [sp, #12]
    1aa8:	3308      	adds	r3, #8
    1aaa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1aac:	6013      	str	r3, [r2, #0]
    1aae:	9803      	ldr	r0, [sp, #12]
    1ab0:	b019      	add	sp, #100	; 0x64
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	4b9f      	ldr	r3, [pc, #636]	; (1d34 <_dtoa_r+0x314>)
    1ab8:	9303      	str	r3, [sp, #12]
    1aba:	3303      	adds	r3, #3
    1abc:	e7f5      	b.n	1aaa <_dtoa_r+0x8a>
    1abe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1ac2:	2200      	movs	r2, #0
    1ac4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    1ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1acc:	2300      	movs	r3, #0
    1ace:	f7fe ff67 	bl	9a0 <__aeabi_dcmpeq>
    1ad2:	4680      	mov	r8, r0
    1ad4:	b160      	cbz	r0, 1af0 <_dtoa_r+0xd0>
    1ad6:	2301      	movs	r3, #1
    1ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1ada:	6013      	str	r3, [r2, #0]
    1adc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    1ade:	2b00      	cmp	r3, #0
    1ae0:	f000 8543 	beq.w	256a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56a>
    1ae4:	4b95      	ldr	r3, [pc, #596]	; (1d3c <_dtoa_r+0x31c>)
    1ae6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ae8:	6013      	str	r3, [r2, #0]
    1aea:	3b01      	subs	r3, #1
    1aec:	9303      	str	r3, [sp, #12]
    1aee:	e7de      	b.n	1aae <_dtoa_r+0x8e>
    1af0:	ab16      	add	r3, sp, #88	; 0x58
    1af2:	f3c9 540a 	ubfx	r4, r9, #20, #11
    1af6:	4628      	mov	r0, r5
    1af8:	9301      	str	r3, [sp, #4]
    1afa:	ab17      	add	r3, sp, #92	; 0x5c
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    1b02:	f015 f88c 	bl	16c1e <__d2b>
    1b06:	4683      	mov	fp, r0
    1b08:	2c00      	cmp	r4, #0
    1b0a:	d07c      	beq.n	1c06 <_dtoa_r+0x1e6>
    1b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b0e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    1b12:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    1b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
    1b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    1b22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    1b26:	2200      	movs	r2, #0
    1b28:	4b85      	ldr	r3, [pc, #532]	; (1d40 <_dtoa_r+0x320>)
    1b2a:	f7fe fb19 	bl	160 <__aeabi_dsub>
    1b2e:	a37a      	add	r3, pc, #488	; (adr r3, 1d18 <_dtoa_r+0x2f8>)
    1b30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b34:	f7fe fccc 	bl	4d0 <__aeabi_dmul>
    1b38:	a379      	add	r3, pc, #484	; (adr r3, 1d20 <_dtoa_r+0x300>)
    1b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b3e:	f7fe fb11 	bl	164 <__adddf3>
    1b42:	4606      	mov	r6, r0
    1b44:	460f      	mov	r7, r1
    1b46:	4620      	mov	r0, r4
    1b48:	f7fe fc58 	bl	3fc <__aeabi_i2d>
    1b4c:	a376      	add	r3, pc, #472	; (adr r3, 1d28 <_dtoa_r+0x308>)
    1b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b52:	f7fe fcbd 	bl	4d0 <__aeabi_dmul>
    1b56:	4602      	mov	r2, r0
    1b58:	460b      	mov	r3, r1
    1b5a:	4630      	mov	r0, r6
    1b5c:	4639      	mov	r1, r7
    1b5e:	f7fe fb01 	bl	164 <__adddf3>
    1b62:	4606      	mov	r6, r0
    1b64:	460f      	mov	r7, r1
    1b66:	f7fe ff4d 	bl	a04 <__aeabi_d2iz>
    1b6a:	2200      	movs	r2, #0
    1b6c:	4682      	mov	sl, r0
    1b6e:	2300      	movs	r3, #0
    1b70:	4630      	mov	r0, r6
    1b72:	4639      	mov	r1, r7
    1b74:	f7fe ff1e 	bl	9b4 <__aeabi_dcmplt>
    1b78:	b148      	cbz	r0, 1b8e <_dtoa_r+0x16e>
    1b7a:	4650      	mov	r0, sl
    1b7c:	f7fe fc3e 	bl	3fc <__aeabi_i2d>
    1b80:	4632      	mov	r2, r6
    1b82:	463b      	mov	r3, r7
    1b84:	f7fe ff0c 	bl	9a0 <__aeabi_dcmpeq>
    1b88:	b908      	cbnz	r0, 1b8e <_dtoa_r+0x16e>
    1b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
    1b8e:	f1ba 0f16 	cmp.w	sl, #22
    1b92:	d856      	bhi.n	1c42 <_dtoa_r+0x222>
    1b94:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <_dtoa_r+0x324>)
    1b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba2:	f7fe ff07 	bl	9b4 <__aeabi_dcmplt>
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d04d      	beq.n	1c46 <_dtoa_r+0x226>
    1baa:	f10a 3aff 	add.w	sl, sl, #4294967295
    1bae:	2300      	movs	r3, #0
    1bb0:	930f      	str	r3, [sp, #60]	; 0x3c
    1bb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1bb4:	1b1c      	subs	r4, r3, r4
    1bb6:	1e63      	subs	r3, r4, #1
    1bb8:	9309      	str	r3, [sp, #36]	; 0x24
    1bba:	bf49      	itett	mi
    1bbc:	f1c4 0301 	rsbmi	r3, r4, #1
    1bc0:	2300      	movpl	r3, #0
    1bc2:	9306      	strmi	r3, [sp, #24]
    1bc4:	2300      	movmi	r3, #0
    1bc6:	bf54      	ite	pl
    1bc8:	9306      	strpl	r3, [sp, #24]
    1bca:	9309      	strmi	r3, [sp, #36]	; 0x24
    1bcc:	f1ba 0f00 	cmp.w	sl, #0
    1bd0:	db3b      	blt.n	1c4a <_dtoa_r+0x22a>
    1bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    1bd8:	4453      	add	r3, sl
    1bda:	9309      	str	r3, [sp, #36]	; 0x24
    1bdc:	2300      	movs	r3, #0
    1bde:	930a      	str	r3, [sp, #40]	; 0x28
    1be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1be2:	2b09      	cmp	r3, #9
    1be4:	f200 80b4 	bhi.w	1d50 <_dtoa_r+0x330>
    1be8:	2b05      	cmp	r3, #5
    1bea:	bfc5      	ittet	gt
    1bec:	3b04      	subgt	r3, #4
    1bee:	2400      	movgt	r4, #0
    1bf0:	2401      	movle	r4, #1
    1bf2:	9322      	strgt	r3, [sp, #136]	; 0x88
    1bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    1bf6:	3b02      	subs	r3, #2
    1bf8:	2b03      	cmp	r3, #3
    1bfa:	f200 80b5 	bhi.w	1d68 <_dtoa_r+0x348>
    1bfe:	e8df f003 	tbb	[pc, r3]
    1c02:	7d2e      	.short	0x7d2e
    1c04:	a57b      	.short	0xa57b
    1c06:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    1c0a:	441c      	add	r4, r3
    1c0c:	f204 4332 	addw	r3, r4, #1074	; 0x432
    1c10:	2b20      	cmp	r3, #32
    1c12:	bfc6      	itte	gt
    1c14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    1c18:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    1c1c:	f1c3 0320 	rsble	r3, r3, #32
    1c20:	f104 34ff 	add.w	r4, r4, #4294967295
    1c24:	bfc5      	ittet	gt
    1c26:	fa09 f303 	lslgt.w	r3, r9, r3
    1c2a:	fa26 f000 	lsrgt.w	r0, r6, r0
    1c2e:	fa06 f003 	lslle.w	r0, r6, r3
    1c32:	4318      	orrgt	r0, r3
    1c34:	f7fe fbd2 	bl	3dc <__aeabi_ui2d>
    1c38:	2301      	movs	r3, #1
    1c3a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    1c3e:	9313      	str	r3, [sp, #76]	; 0x4c
    1c40:	e771      	b.n	1b26 <_dtoa_r+0x106>
    1c42:	2301      	movs	r3, #1
    1c44:	e7b4      	b.n	1bb0 <_dtoa_r+0x190>
    1c46:	900f      	str	r0, [sp, #60]	; 0x3c
    1c48:	e7b3      	b.n	1bb2 <_dtoa_r+0x192>
    1c4a:	9b06      	ldr	r3, [sp, #24]
    1c4c:	eba3 030a 	sub.w	r3, r3, sl
    1c50:	9306      	str	r3, [sp, #24]
    1c52:	f1ca 0300 	rsb	r3, sl, #0
    1c56:	930a      	str	r3, [sp, #40]	; 0x28
    1c58:	2300      	movs	r3, #0
    1c5a:	930e      	str	r3, [sp, #56]	; 0x38
    1c5c:	e7c0      	b.n	1be0 <_dtoa_r+0x1c0>
    1c5e:	2300      	movs	r3, #0
    1c60:	930b      	str	r3, [sp, #44]	; 0x2c
    1c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c64:	2b00      	cmp	r3, #0
    1c66:	f300 8082 	bgt.w	1d6e <_dtoa_r+0x34e>
    1c6a:	f04f 0901 	mov.w	r9, #1
    1c6e:	464b      	mov	r3, r9
    1c70:	f8cd 9020 	str.w	r9, [sp, #32]
    1c74:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    1c78:	2200      	movs	r2, #0
    1c7a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
    1c7c:	6072      	str	r2, [r6, #4]
    1c7e:	2204      	movs	r2, #4
    1c80:	f102 0014 	add.w	r0, r2, #20
    1c84:	6871      	ldr	r1, [r6, #4]
    1c86:	4298      	cmp	r0, r3
    1c88:	d977      	bls.n	1d7a <_dtoa_r+0x35a>
    1c8a:	4628      	mov	r0, r5
    1c8c:	f014 fd54 	bl	16738 <_Balloc>
    1c90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1c92:	6030      	str	r0, [r6, #0]
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	9303      	str	r3, [sp, #12]
    1c98:	9b08      	ldr	r3, [sp, #32]
    1c9a:	2b0e      	cmp	r3, #14
    1c9c:	f200 80ee 	bhi.w	1e7c <_dtoa_r+0x45c>
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	f000 80eb 	beq.w	1e7c <_dtoa_r+0x45c>
    1ca6:	f1ba 0f00 	cmp.w	sl, #0
    1caa:	dd7a      	ble.n	1da2 <_dtoa_r+0x382>
    1cac:	f00a 030f 	and.w	r3, sl, #15
    1cb0:	4a24      	ldr	r2, [pc, #144]	; (1d44 <_dtoa_r+0x324>)
    1cb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
    1cb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1cba:	e9d3 3400 	ldrd	r3, r4, [r3]
    1cbe:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1cc2:	ea4f 142a 	mov.w	r4, sl, asr #4
    1cc6:	d05c      	beq.n	1d82 <_dtoa_r+0x362>
    1cc8:	4b1f      	ldr	r3, [pc, #124]	; (1d48 <_dtoa_r+0x328>)
    1cca:	f004 040f 	and.w	r4, r4, #15
    1cce:	2703      	movs	r7, #3
    1cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    1cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1cd8:	f7fe fd24 	bl	724 <__aeabi_ddiv>
    1cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1ce0:	4e19      	ldr	r6, [pc, #100]	; (1d48 <_dtoa_r+0x328>)
    1ce2:	2c00      	cmp	r4, #0
    1ce4:	d14f      	bne.n	1d86 <_dtoa_r+0x366>
    1ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1cee:	f7fe fd19 	bl	724 <__aeabi_ddiv>
    1cf2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1cf6:	e06e      	b.n	1dd6 <_dtoa_r+0x3b6>
    1cf8:	2301      	movs	r3, #1
    1cfa:	e7b1      	b.n	1c60 <_dtoa_r+0x240>
    1cfc:	2300      	movs	r3, #0
    1cfe:	930b      	str	r3, [sp, #44]	; 0x2c
    1d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1d02:	eb0a 0903 	add.w	r9, sl, r3
    1d06:	f109 0301 	add.w	r3, r9, #1
    1d0a:	2b01      	cmp	r3, #1
    1d0c:	9308      	str	r3, [sp, #32]
    1d0e:	bfb8      	it	lt
    1d10:	2301      	movlt	r3, #1
    1d12:	e7b1      	b.n	1c78 <_dtoa_r+0x258>
    1d14:	f3af 8000 	nop.w
    1d18:	636f4361 	.word	0x636f4361
    1d1c:	3fd287a7 	.word	0x3fd287a7
    1d20:	8b60c8b3 	.word	0x8b60c8b3
    1d24:	3fc68a28 	.word	0x3fc68a28
    1d28:	509f79fb 	.word	0x509f79fb
    1d2c:	3fd34413 	.word	0x3fd34413
    1d30:	7ff00000 	.word	0x7ff00000
    1d34:	0006bea7 	.word	0x0006bea7
    1d38:	0006be9e 	.word	0x0006be9e
    1d3c:	0006be7b 	.word	0x0006be7b
    1d40:	3ff80000 	.word	0x3ff80000
    1d44:	00068808 	.word	0x00068808
    1d48:	000687e0 	.word	0x000687e0
    1d4c:	2301      	movs	r3, #1
    1d4e:	e7d6      	b.n	1cfe <_dtoa_r+0x2de>
    1d50:	2401      	movs	r4, #1
    1d52:	2300      	movs	r3, #0
    1d54:	940b      	str	r4, [sp, #44]	; 0x2c
    1d56:	9322      	str	r3, [sp, #136]	; 0x88
    1d58:	f04f 39ff 	mov.w	r9, #4294967295
    1d5c:	2200      	movs	r2, #0
    1d5e:	2312      	movs	r3, #18
    1d60:	f8cd 9020 	str.w	r9, [sp, #32]
    1d64:	9223      	str	r2, [sp, #140]	; 0x8c
    1d66:	e787      	b.n	1c78 <_dtoa_r+0x258>
    1d68:	2301      	movs	r3, #1
    1d6a:	930b      	str	r3, [sp, #44]	; 0x2c
    1d6c:	e7f4      	b.n	1d58 <_dtoa_r+0x338>
    1d6e:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    1d72:	464b      	mov	r3, r9
    1d74:	f8cd 9020 	str.w	r9, [sp, #32]
    1d78:	e77e      	b.n	1c78 <_dtoa_r+0x258>
    1d7a:	3101      	adds	r1, #1
    1d7c:	0052      	lsls	r2, r2, #1
    1d7e:	6071      	str	r1, [r6, #4]
    1d80:	e77e      	b.n	1c80 <_dtoa_r+0x260>
    1d82:	2702      	movs	r7, #2
    1d84:	e7ac      	b.n	1ce0 <_dtoa_r+0x2c0>
    1d86:	07e1      	lsls	r1, r4, #31
    1d88:	d508      	bpl.n	1d9c <_dtoa_r+0x37c>
    1d8a:	3701      	adds	r7, #1
    1d8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1d90:	e9d6 2300 	ldrd	r2, r3, [r6]
    1d94:	f7fe fb9c 	bl	4d0 <__aeabi_dmul>
    1d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1d9c:	1064      	asrs	r4, r4, #1
    1d9e:	3608      	adds	r6, #8
    1da0:	e79f      	b.n	1ce2 <_dtoa_r+0x2c2>
    1da2:	f000 80a5 	beq.w	1ef0 <_dtoa_r+0x4d0>
    1da6:	f1ca 0400 	rsb	r4, sl, #0
    1daa:	4ba3      	ldr	r3, [pc, #652]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1dac:	4ea3      	ldr	r6, [pc, #652]	; (203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>)
    1dae:	2702      	movs	r7, #2
    1db0:	f004 020f 	and.w	r2, r4, #15
    1db4:	1124      	asrs	r4, r4, #4
    1db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    1dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dc2:	f7fe fb85 	bl	4d0 <__aeabi_dmul>
    1dc6:	2300      	movs	r3, #0
    1dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1dcc:	2c00      	cmp	r4, #0
    1dce:	f040 8084 	bne.w	1eda <_dtoa_r+0x4ba>
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d18d      	bne.n	1cf2 <_dtoa_r+0x2d2>
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	2b00      	cmp	r3, #0
    1dda:	f000 808b 	beq.w	1ef4 <_dtoa_r+0x4d4>
    1dde:	2200      	movs	r2, #0
    1de0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    1de4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    1de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1dec:	4b94      	ldr	r3, [pc, #592]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1dee:	f7fe fde1 	bl	9b4 <__aeabi_dcmplt>
    1df2:	2800      	cmp	r0, #0
    1df4:	d07e      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1df6:	9b08      	ldr	r3, [sp, #32]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d07b      	beq.n	1ef4 <_dtoa_r+0x4d4>
    1dfc:	f1b9 0f00 	cmp.w	r9, #0
    1e00:	dd38      	ble.n	1e74 <_dtoa_r+0x454>
    1e02:	f10a 38ff 	add.w	r8, sl, #4294967295
    1e06:	3701      	adds	r7, #1
    1e08:	464c      	mov	r4, r9
    1e0a:	2200      	movs	r2, #0
    1e0c:	4b8d      	ldr	r3, [pc, #564]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1e0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1e12:	f7fe fb5d 	bl	4d0 <__aeabi_dmul>
    1e16:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e1a:	4638      	mov	r0, r7
    1e1c:	f7fe faee 	bl	3fc <__aeabi_i2d>
    1e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e24:	f7fe fb54 	bl	4d0 <__aeabi_dmul>
    1e28:	2200      	movs	r2, #0
    1e2a:	4b87      	ldr	r3, [pc, #540]	; (2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>)
    1e2c:	f7fe f99a 	bl	164 <__adddf3>
    1e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    1e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1e38:	9611      	str	r6, [sp, #68]	; 0x44
    1e3a:	2c00      	cmp	r4, #0
    1e3c:	d15d      	bne.n	1efa <_dtoa_r+0x4da>
    1e3e:	2200      	movs	r2, #0
    1e40:	4b82      	ldr	r3, [pc, #520]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e46:	f7fe f98b 	bl	160 <__aeabi_dsub>
    1e4a:	4602      	mov	r2, r0
    1e4c:	460b      	mov	r3, r1
    1e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1e52:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e54:	4633      	mov	r3, r6
    1e56:	f7fe fdcb 	bl	9f0 <__aeabi_dcmpgt>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	f040 8294 	bne.w	2388 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x388>
    1e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    1e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1e6a:	f7fe fda3 	bl	9b4 <__aeabi_dcmplt>
    1e6e:	2800      	cmp	r0, #0
    1e70:	f040 8288 	bne.w	2384 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x384>
    1e74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    1e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1e7e:	2b00      	cmp	r3, #0
    1e80:	f2c0 814f 	blt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e84:	f1ba 0f0e 	cmp.w	sl, #14
    1e88:	f300 814b 	bgt.w	2122 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x122>
    1e8c:	4b6a      	ldr	r3, [pc, #424]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1e92:	e9d3 3400 	ldrd	r3, r4, [r3]
    1e96:	e9cd 3406 	strd	r3, r4, [sp, #24]
    1e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	f280 80d9 	bge.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1ea2:	9b08      	ldr	r3, [sp, #32]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f300 80d5 	bgt.w	2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
    1eaa:	f040 826a 	bne.w	2382 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x382>
    1eae:	2200      	movs	r2, #0
    1eb0:	4b66      	ldr	r3, [pc, #408]	; (204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>)
    1eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    1eb6:	f7fe fb0b 	bl	4d0 <__aeabi_dmul>
    1eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1ebe:	f7fe fd8d 	bl	9dc <__aeabi_dcmpge>
    1ec2:	9c08      	ldr	r4, [sp, #32]
    1ec4:	4626      	mov	r6, r4
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f040 8240 	bne.w	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    1ecc:	9f03      	ldr	r7, [sp, #12]
    1ece:	2331      	movs	r3, #49	; 0x31
    1ed0:	f10a 0a01 	add.w	sl, sl, #1
    1ed4:	f807 3b01 	strb.w	r3, [r7], #1
    1ed8:	e23c      	b.n	2354 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x354>
    1eda:	07e2      	lsls	r2, r4, #31
    1edc:	d505      	bpl.n	1eea <_dtoa_r+0x4ca>
    1ede:	3701      	adds	r7, #1
    1ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
    1ee4:	f7fe faf4 	bl	4d0 <__aeabi_dmul>
    1ee8:	2301      	movs	r3, #1
    1eea:	1064      	asrs	r4, r4, #1
    1eec:	3608      	adds	r6, #8
    1eee:	e76d      	b.n	1dcc <_dtoa_r+0x3ac>
    1ef0:	2702      	movs	r7, #2
    1ef2:	e770      	b.n	1dd6 <_dtoa_r+0x3b6>
    1ef4:	46d0      	mov	r8, sl
    1ef6:	9c08      	ldr	r4, [sp, #32]
    1ef8:	e78f      	b.n	1e1a <_dtoa_r+0x3fa>
    1efa:	9903      	ldr	r1, [sp, #12]
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1efe:	4421      	add	r1, r4
    1f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    1f04:	9112      	str	r1, [sp, #72]	; 0x48
    1f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    1f0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    1f10:	2900      	cmp	r1, #0
    1f12:	d046      	beq.n	1fa2 <_dtoa_r+0x582>
    1f14:	2000      	movs	r0, #0
    1f16:	494e      	ldr	r1, [pc, #312]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1f18:	f7fe fc04 	bl	724 <__aeabi_ddiv>
    1f1c:	463b      	mov	r3, r7
    1f1e:	4632      	mov	r2, r6
    1f20:	f7fe f91e 	bl	160 <__aeabi_dsub>
    1f24:	9f03      	ldr	r7, [sp, #12]
    1f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f2e:	f7fe fd69 	bl	a04 <__aeabi_d2iz>
    1f32:	4604      	mov	r4, r0
    1f34:	f7fe fa62 	bl	3fc <__aeabi_i2d>
    1f38:	4602      	mov	r2, r0
    1f3a:	460b      	mov	r3, r1
    1f3c:	3430      	adds	r4, #48	; 0x30
    1f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f42:	f7fe f90d 	bl	160 <__aeabi_dsub>
    1f46:	4602      	mov	r2, r0
    1f48:	460b      	mov	r3, r1
    1f4a:	f807 4b01 	strb.w	r4, [r7], #1
    1f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f56:	f7fe fd2d 	bl	9b4 <__aeabi_dcmplt>
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d164      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    1f5e:	2000      	movs	r0, #0
    1f60:	4937      	ldr	r1, [pc, #220]	; (2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>)
    1f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1f66:	f7fe f8fb 	bl	160 <__aeabi_dsub>
    1f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1f6e:	f7fe fd21 	bl	9b4 <__aeabi_dcmplt>
    1f72:	2800      	cmp	r0, #0
    1f74:	f040 80b4 	bne.w	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    1f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f7a:	429f      	cmp	r7, r3
    1f7c:	f43f af7a 	beq.w	1e74 <_dtoa_r+0x454>
    1f80:	2200      	movs	r2, #0
    1f82:	4b30      	ldr	r3, [pc, #192]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1f88:	f7fe faa2 	bl	4d0 <__aeabi_dmul>
    1f8c:	2200      	movs	r2, #0
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    1f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1f98:	f7fe fa9a 	bl	4d0 <__aeabi_dmul>
    1f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1fa0:	e7c3      	b.n	1f2a <_dtoa_r+0x50a>
    1fa2:	4630      	mov	r0, r6
    1fa4:	4639      	mov	r1, r7
    1fa6:	f7fe fa93 	bl	4d0 <__aeabi_dmul>
    1faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fac:	9c03      	ldr	r4, [sp, #12]
    1fae:	9314      	str	r3, [sp, #80]	; 0x50
    1fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fb8:	f7fe fd24 	bl	a04 <__aeabi_d2iz>
    1fbc:	9015      	str	r0, [sp, #84]	; 0x54
    1fbe:	f7fe fa1d 	bl	3fc <__aeabi_i2d>
    1fc2:	4602      	mov	r2, r0
    1fc4:	460b      	mov	r3, r1
    1fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1fca:	f7fe f8c9 	bl	160 <__aeabi_dsub>
    1fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1fd0:	4606      	mov	r6, r0
    1fd2:	460f      	mov	r7, r1
    1fd4:	3330      	adds	r3, #48	; 0x30
    1fd6:	2200      	movs	r2, #0
    1fd8:	f804 3b01 	strb.w	r3, [r4], #1
    1fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fde:	429c      	cmp	r4, r3
    1fe0:	d124      	bne.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1fe2:	4b1b      	ldr	r3, [pc, #108]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    1fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    1fe8:	f7fe f8bc 	bl	164 <__adddf3>
    1fec:	4602      	mov	r2, r0
    1fee:	460b      	mov	r3, r1
    1ff0:	4630      	mov	r0, r6
    1ff2:	4639      	mov	r1, r7
    1ff4:	f7fe fcfc 	bl	9f0 <__aeabi_dcmpgt>
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d170      	bne.n	20de <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xde>
    1ffc:	2000      	movs	r0, #0
    1ffe:	4914      	ldr	r1, [pc, #80]	; (2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>)
    2000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2004:	f7fe f8ac 	bl	160 <__aeabi_dsub>
    2008:	4602      	mov	r2, r0
    200a:	460b      	mov	r3, r1
    200c:	4630      	mov	r0, r6
    200e:	4639      	mov	r1, r7
    2010:	f7fe fcd0 	bl	9b4 <__aeabi_dcmplt>
    2014:	2800      	cmp	r0, #0
    2016:	f43f af2d 	beq.w	1e74 <_dtoa_r+0x454>
    201a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    201c:	1e7b      	subs	r3, r7, #1
    201e:	9314      	str	r3, [sp, #80]	; 0x50
    2020:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    2024:	2b30      	cmp	r3, #48	; 0x30
    2026:	d0f8      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
    2028:	46c2      	mov	sl, r8
    202a:	e048      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>)
    202e:	f7fe fa4f 	bl	4d0 <__aeabi_dmul>
    2032:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2036:	e7bd      	b.n	1fb4 <_dtoa_r+0x594>
    2038:	00068808 	.word	0x00068808
    203c:	000687e0 	.word	0x000687e0
    2040:	3ff00000 	.word	0x3ff00000
    2044:	40240000 	.word	0x40240000
    2048:	401c0000 	.word	0x401c0000
    204c:	40140000 	.word	0x40140000
    2050:	3fe00000 	.word	0x3fe00000
    2054:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    2058:	9f03      	ldr	r7, [sp, #12]
    205a:	4640      	mov	r0, r8
    205c:	4649      	mov	r1, r9
    205e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2062:	f7fe fb5f 	bl	724 <__aeabi_ddiv>
    2066:	f7fe fccd 	bl	a04 <__aeabi_d2iz>
    206a:	4604      	mov	r4, r0
    206c:	f7fe f9c6 	bl	3fc <__aeabi_i2d>
    2070:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2078:	f7fe fa2a 	bl	4d0 <__aeabi_dmul>
    207c:	460b      	mov	r3, r1
    207e:	4602      	mov	r2, r0
    2080:	4649      	mov	r1, r9
    2082:	4640      	mov	r0, r8
    2084:	f7fe f86c 	bl	160 <__aeabi_dsub>
    2088:	f807 6b01 	strb.w	r6, [r7], #1
    208c:	9e03      	ldr	r6, [sp, #12]
    208e:	9b08      	ldr	r3, [sp, #32]
    2090:	1bbe      	subs	r6, r7, r6
    2092:	42b3      	cmp	r3, r6
    2094:	d138      	bne.n	2108 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x108>
    2096:	4602      	mov	r2, r0
    2098:	460b      	mov	r3, r1
    209a:	f7fe f863 	bl	164 <__adddf3>
    209e:	4680      	mov	r8, r0
    20a0:	4689      	mov	r9, r1
    20a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20a6:	f7fe fca3 	bl	9f0 <__aeabi_dcmpgt>
    20aa:	bb58      	cbnz	r0, 2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20ac:	4640      	mov	r0, r8
    20ae:	4649      	mov	r1, r9
    20b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    20b4:	f7fe fc74 	bl	9a0 <__aeabi_dcmpeq>
    20b8:	b108      	cbz	r0, 20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    20ba:	07e1      	lsls	r1, r4, #31
    20bc:	d422      	bmi.n	2104 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x104>
    20be:	4628      	mov	r0, r5
    20c0:	4659      	mov	r1, fp
    20c2:	f014 fb6d 	bl	167a0 <_Bfree>
    20c6:	2300      	movs	r3, #0
    20c8:	f10a 0001 	add.w	r0, sl, #1
    20cc:	703b      	strb	r3, [r7, #0]
    20ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    20d0:	6018      	str	r0, [r3, #0]
    20d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    20d4:	2b00      	cmp	r3, #0
    20d6:	f43f acea 	beq.w	1aae <_dtoa_r+0x8e>
    20da:	601f      	str	r7, [r3, #0]
    20dc:	e4e7      	b.n	1aae <_dtoa_r+0x8e>
    20de:	4627      	mov	r7, r4
    20e0:	463b      	mov	r3, r7
    20e2:	461f      	mov	r7, r3
    20e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    20e8:	2a39      	cmp	r2, #57	; 0x39
    20ea:	d107      	bne.n	20fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xfc>
    20ec:	9a03      	ldr	r2, [sp, #12]
    20ee:	429a      	cmp	r2, r3
    20f0:	d1f7      	bne.n	20e2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe2>
    20f2:	2230      	movs	r2, #48	; 0x30
    20f4:	9903      	ldr	r1, [sp, #12]
    20f6:	f108 0801 	add.w	r8, r8, #1
    20fa:	700a      	strb	r2, [r1, #0]
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	3201      	adds	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
    2102:	e791      	b.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
    2104:	46d0      	mov	r8, sl
    2106:	e7eb      	b.n	20e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe0>
    2108:	2200      	movs	r2, #0
    210a:	4ba1      	ldr	r3, [pc, #644]	; (2390 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x390>)
    210c:	f7fe f9e0 	bl	4d0 <__aeabi_dmul>
    2110:	2200      	movs	r2, #0
    2112:	2300      	movs	r3, #0
    2114:	4680      	mov	r8, r0
    2116:	4689      	mov	r9, r1
    2118:	f7fe fc42 	bl	9a0 <__aeabi_dcmpeq>
    211c:	2800      	cmp	r0, #0
    211e:	d09c      	beq.n	205a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5a>
    2120:	e7cd      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2124:	2a00      	cmp	r2, #0
    2126:	f000 80cc 	beq.w	22c2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c2>
    212a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    212c:	2a01      	cmp	r2, #1
    212e:	f300 80af 	bgt.w	2290 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x290>
    2132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2134:	2a00      	cmp	r2, #0
    2136:	f000 80a7 	beq.w	2288 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x288>
    213a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    213e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2140:	9f06      	ldr	r7, [sp, #24]
    2142:	9a06      	ldr	r2, [sp, #24]
    2144:	2101      	movs	r1, #1
    2146:	4628      	mov	r0, r5
    2148:	441a      	add	r2, r3
    214a:	9206      	str	r2, [sp, #24]
    214c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    214e:	441a      	add	r2, r3
    2150:	9209      	str	r2, [sp, #36]	; 0x24
    2152:	f014 fbc9 	bl	168e8 <__i2b>
    2156:	4606      	mov	r6, r0
    2158:	2f00      	cmp	r7, #0
    215a:	dd0c      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    215e:	2b00      	cmp	r3, #0
    2160:	dd09      	ble.n	2176 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x176>
    2162:	42bb      	cmp	r3, r7
    2164:	9a06      	ldr	r2, [sp, #24]
    2166:	bfa8      	it	ge
    2168:	463b      	movge	r3, r7
    216a:	1ad2      	subs	r2, r2, r3
    216c:	1aff      	subs	r7, r7, r3
    216e:	9206      	str	r2, [sp, #24]
    2170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2172:	1ad3      	subs	r3, r2, r3
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2178:	b1f3      	cbz	r3, 21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    217a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    217c:	2b00      	cmp	r3, #0
    217e:	f000 80a4 	beq.w	22ca <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ca>
    2182:	2c00      	cmp	r4, #0
    2184:	dd10      	ble.n	21a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a8>
    2186:	4631      	mov	r1, r6
    2188:	4622      	mov	r2, r4
    218a:	4628      	mov	r0, r5
    218c:	f00f fcfc 	bl	11b88 <__pow5mult>
    2190:	465a      	mov	r2, fp
    2192:	4601      	mov	r1, r0
    2194:	4606      	mov	r6, r0
    2196:	4628      	mov	r0, r5
    2198:	f014 fbaf 	bl	168fa <__multiply>
    219c:	4680      	mov	r8, r0
    219e:	4659      	mov	r1, fp
    21a0:	4628      	mov	r0, r5
    21a2:	46c3      	mov	fp, r8
    21a4:	f014 fafc 	bl	167a0 <_Bfree>
    21a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21aa:	1b1a      	subs	r2, r3, r4
    21ac:	d004      	beq.n	21b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1b8>
    21ae:	4659      	mov	r1, fp
    21b0:	4628      	mov	r0, r5
    21b2:	f00f fce9 	bl	11b88 <__pow5mult>
    21b6:	4683      	mov	fp, r0
    21b8:	2101      	movs	r1, #1
    21ba:	4628      	mov	r0, r5
    21bc:	f014 fb94 	bl	168e8 <__i2b>
    21c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21c2:	4604      	mov	r4, r0
    21c4:	2b00      	cmp	r3, #0
    21c6:	f340 8082 	ble.w	22ce <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2ce>
    21ca:	461a      	mov	r2, r3
    21cc:	4601      	mov	r1, r0
    21ce:	4628      	mov	r0, r5
    21d0:	f00f fcda 	bl	11b88 <__pow5mult>
    21d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    21d6:	4604      	mov	r4, r0
    21d8:	2b01      	cmp	r3, #1
    21da:	dd7b      	ble.n	22d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2d4>
    21dc:	f04f 0800 	mov.w	r8, #0
    21e0:	6923      	ldr	r3, [r4, #16]
    21e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    21e6:	6918      	ldr	r0, [r3, #16]
    21e8:	f014 fb30 	bl	1684c <__hi0bits>
    21ec:	f1c0 0020 	rsb	r0, r0, #32
    21f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f2:	4418      	add	r0, r3
    21f4:	f010 001f 	ands.w	r0, r0, #31
    21f8:	f000 808d 	beq.w	2316 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x316>
    21fc:	f1c0 0320 	rsb	r3, r0, #32
    2200:	2b04      	cmp	r3, #4
    2202:	f340 8086 	ble.w	2312 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x312>
    2206:	f1c0 001c 	rsb	r0, r0, #28
    220a:	9b06      	ldr	r3, [sp, #24]
    220c:	4407      	add	r7, r0
    220e:	4403      	add	r3, r0
    2210:	9306      	str	r3, [sp, #24]
    2212:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2214:	4403      	add	r3, r0
    2216:	9309      	str	r3, [sp, #36]	; 0x24
    2218:	9b06      	ldr	r3, [sp, #24]
    221a:	2b00      	cmp	r3, #0
    221c:	dd05      	ble.n	222a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22a>
    221e:	4659      	mov	r1, fp
    2220:	461a      	mov	r2, r3
    2222:	4628      	mov	r0, r5
    2224:	f014 fc04 	bl	16a30 <__lshift>
    2228:	4683      	mov	fp, r0
    222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    222c:	2b00      	cmp	r3, #0
    222e:	dd05      	ble.n	223c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x23c>
    2230:	4621      	mov	r1, r4
    2232:	461a      	mov	r2, r3
    2234:	4628      	mov	r0, r5
    2236:	f014 fbfb 	bl	16a30 <__lshift>
    223a:	4604      	mov	r4, r0
    223c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    223e:	2b00      	cmp	r3, #0
    2240:	d06b      	beq.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    2242:	4621      	mov	r1, r4
    2244:	4658      	mov	r0, fp
    2246:	f014 fc52 	bl	16aee <__mcmp>
    224a:	2800      	cmp	r0, #0
    224c:	da65      	bge.n	231a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x31a>
    224e:	2300      	movs	r3, #0
    2250:	4659      	mov	r1, fp
    2252:	220a      	movs	r2, #10
    2254:	4628      	mov	r0, r5
    2256:	f014 faba 	bl	167ce <__multadd>
    225a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    225c:	f10a 3aff 	add.w	sl, sl, #4294967295
    2260:	4683      	mov	fp, r0
    2262:	2b00      	cmp	r3, #0
    2264:	f000 818b 	beq.w	257e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x57e>
    2268:	4631      	mov	r1, r6
    226a:	2300      	movs	r3, #0
    226c:	220a      	movs	r2, #10
    226e:	4628      	mov	r0, r5
    2270:	f014 faad 	bl	167ce <__multadd>
    2274:	f1b9 0f00 	cmp.w	r9, #0
    2278:	4606      	mov	r6, r0
    227a:	f300 8091 	bgt.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    227e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2280:	2b02      	cmp	r3, #2
    2282:	f340 808d 	ble.w	23a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a0>
    2286:	e050      	b.n	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    2288:	9b16      	ldr	r3, [sp, #88]	; 0x58
    228a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    228e:	e756      	b.n	213e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x13e>
    2290:	9b08      	ldr	r3, [sp, #32]
    2292:	1e5c      	subs	r4, r3, #1
    2294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2296:	42a3      	cmp	r3, r4
    2298:	bfb7      	itett	lt
    229a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    229c:	1b1c      	subge	r4, r3, r4
    229e:	940a      	strlt	r4, [sp, #40]	; 0x28
    22a0:	1ae2      	sublt	r2, r4, r3
    22a2:	bfbf      	itttt	lt
    22a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    22a6:	2400      	movlt	r4, #0
    22a8:	189b      	addlt	r3, r3, r2
    22aa:	930e      	strlt	r3, [sp, #56]	; 0x38
    22ac:	9b08      	ldr	r3, [sp, #32]
    22ae:	2b00      	cmp	r3, #0
    22b0:	bfbb      	ittet	lt
    22b2:	9b06      	ldrlt	r3, [sp, #24]
    22b4:	9a08      	ldrlt	r2, [sp, #32]
    22b6:	9f06      	ldrge	r7, [sp, #24]
    22b8:	1a9f      	sublt	r7, r3, r2
    22ba:	bfac      	ite	ge
    22bc:	9b08      	ldrge	r3, [sp, #32]
    22be:	2300      	movlt	r3, #0
    22c0:	e73f      	b.n	2142 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x142>
    22c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    22c4:	9f06      	ldr	r7, [sp, #24]
    22c6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    22c8:	e746      	b.n	2158 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x158>
    22ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    22cc:	e76f      	b.n	21ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1ae>
    22ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
    22d0:	2b01      	cmp	r3, #1
    22d2:	dc19      	bgt.n	2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d4:	9b04      	ldr	r3, [sp, #16]
    22d6:	b9bb      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22d8:	9b05      	ldr	r3, [sp, #20]
    22da:	f3c3 0313 	ubfx	r3, r3, #0, #20
    22de:	b99b      	cbnz	r3, 2308 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x308>
    22e0:	9b05      	ldr	r3, [sp, #20]
    22e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    22e6:	0d1b      	lsrs	r3, r3, #20
    22e8:	051b      	lsls	r3, r3, #20
    22ea:	b183      	cbz	r3, 230e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30e>
    22ec:	9b06      	ldr	r3, [sp, #24]
    22ee:	f04f 0801 	mov.w	r8, #1
    22f2:	3301      	adds	r3, #1
    22f4:	9306      	str	r3, [sp, #24]
    22f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22f8:	3301      	adds	r3, #1
    22fa:	9309      	str	r3, [sp, #36]	; 0x24
    22fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    22fe:	2b00      	cmp	r3, #0
    2300:	f47f af6e 	bne.w	21e0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e0>
    2304:	2001      	movs	r0, #1
    2306:	e773      	b.n	21f0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1f0>
    2308:	f04f 0800 	mov.w	r8, #0
    230c:	e7f6      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    230e:	4698      	mov	r8, r3
    2310:	e7f4      	b.n	22fc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2fc>
    2312:	d081      	beq.n	2218 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x218>
    2314:	4618      	mov	r0, r3
    2316:	301c      	adds	r0, #28
    2318:	e777      	b.n	220a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20a>
    231a:	9b08      	ldr	r3, [sp, #32]
    231c:	2b00      	cmp	r3, #0
    231e:	dc39      	bgt.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2320:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2322:	2b02      	cmp	r3, #2
    2324:	dd36      	ble.n	2394 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x394>
    2326:	f8dd 9020 	ldr.w	r9, [sp, #32]
    232a:	f1b9 0f00 	cmp.w	r9, #0
    232e:	d10d      	bne.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2330:	4621      	mov	r1, r4
    2332:	464b      	mov	r3, r9
    2334:	2205      	movs	r2, #5
    2336:	4628      	mov	r0, r5
    2338:	f014 fa49 	bl	167ce <__multadd>
    233c:	4601      	mov	r1, r0
    233e:	4604      	mov	r4, r0
    2340:	4658      	mov	r0, fp
    2342:	f014 fbd4 	bl	16aee <__mcmp>
    2346:	2800      	cmp	r0, #0
    2348:	f73f adc0 	bgt.w	1ecc <_dtoa_r+0x4ac>
    234c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    234e:	9f03      	ldr	r7, [sp, #12]
    2350:	ea6f 0a03 	mvn.w	sl, r3
    2354:	f04f 0800 	mov.w	r8, #0
    2358:	4621      	mov	r1, r4
    235a:	4628      	mov	r0, r5
    235c:	f014 fa20 	bl	167a0 <_Bfree>
    2360:	2e00      	cmp	r6, #0
    2362:	f43f aeac 	beq.w	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2366:	f1b8 0f00 	cmp.w	r8, #0
    236a:	d005      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    236c:	45b0      	cmp	r8, r6
    236e:	d003      	beq.n	2378 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x378>
    2370:	4641      	mov	r1, r8
    2372:	4628      	mov	r0, r5
    2374:	f014 fa14 	bl	167a0 <_Bfree>
    2378:	4631      	mov	r1, r6
    237a:	4628      	mov	r0, r5
    237c:	f014 fa10 	bl	167a0 <_Bfree>
    2380:	e69d      	b.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
    2382:	2400      	movs	r4, #0
    2384:	4626      	mov	r6, r4
    2386:	e7e1      	b.n	234c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34c>
    2388:	46c2      	mov	sl, r8
    238a:	4626      	mov	r6, r4
    238c:	e59e      	b.n	1ecc <_dtoa_r+0x4ac>
    238e:	bf00      	nop
    2390:	40240000 	.word	0x40240000
    2394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2396:	f8dd 9020 	ldr.w	r9, [sp, #32]
    239a:	2b00      	cmp	r3, #0
    239c:	f000 80f6 	beq.w	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    23a0:	2f00      	cmp	r7, #0
    23a2:	dd05      	ble.n	23b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3b0>
    23a4:	4631      	mov	r1, r6
    23a6:	463a      	mov	r2, r7
    23a8:	4628      	mov	r0, r5
    23aa:	f014 fb41 	bl	16a30 <__lshift>
    23ae:	4606      	mov	r6, r0
    23b0:	f1b8 0f00 	cmp.w	r8, #0
    23b4:	d055      	beq.n	2462 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x462>
    23b6:	6871      	ldr	r1, [r6, #4]
    23b8:	4628      	mov	r0, r5
    23ba:	f014 f9bd 	bl	16738 <_Balloc>
    23be:	6932      	ldr	r2, [r6, #16]
    23c0:	4607      	mov	r7, r0
    23c2:	f106 010c 	add.w	r1, r6, #12
    23c6:	3202      	adds	r2, #2
    23c8:	300c      	adds	r0, #12
    23ca:	0092      	lsls	r2, r2, #2
    23cc:	f013 fefe 	bl	161cc <memcpy>
    23d0:	2201      	movs	r2, #1
    23d2:	4639      	mov	r1, r7
    23d4:	4628      	mov	r0, r5
    23d6:	f014 fb2b 	bl	16a30 <__lshift>
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	46b0      	mov	r8, r6
    23de:	4606      	mov	r6, r0
    23e0:	3301      	adds	r3, #1
    23e2:	9308      	str	r3, [sp, #32]
    23e4:	9b03      	ldr	r3, [sp, #12]
    23e6:	444b      	add	r3, r9
    23e8:	930a      	str	r3, [sp, #40]	; 0x28
    23ea:	9b04      	ldr	r3, [sp, #16]
    23ec:	f003 0301 	and.w	r3, r3, #1
    23f0:	9309      	str	r3, [sp, #36]	; 0x24
    23f2:	9b08      	ldr	r3, [sp, #32]
    23f4:	4621      	mov	r1, r4
    23f6:	4658      	mov	r0, fp
    23f8:	3b01      	subs	r3, #1
    23fa:	9304      	str	r3, [sp, #16]
    23fc:	f014 f8b4 	bl	16568 <quorem>
    2400:	4603      	mov	r3, r0
    2402:	4641      	mov	r1, r8
    2404:	9006      	str	r0, [sp, #24]
    2406:	4658      	mov	r0, fp
    2408:	3330      	adds	r3, #48	; 0x30
    240a:	930b      	str	r3, [sp, #44]	; 0x2c
    240c:	f014 fb6f 	bl	16aee <__mcmp>
    2410:	4632      	mov	r2, r6
    2412:	4681      	mov	r9, r0
    2414:	4621      	mov	r1, r4
    2416:	4628      	mov	r0, r5
    2418:	f014 fb84 	bl	16b24 <__mdiff>
    241c:	68c2      	ldr	r2, [r0, #12]
    241e:	4607      	mov	r7, r0
    2420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2422:	bb02      	cbnz	r2, 2466 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x466>
    2424:	4601      	mov	r1, r0
    2426:	4658      	mov	r0, fp
    2428:	f014 fb61 	bl	16aee <__mcmp>
    242c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    242e:	4602      	mov	r2, r0
    2430:	4639      	mov	r1, r7
    2432:	4628      	mov	r0, r5
    2434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2438:	f014 f9b2 	bl	167a0 <_Bfree>
    243c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    243e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2440:	9f08      	ldr	r7, [sp, #32]
    2442:	ea43 0102 	orr.w	r1, r3, r2
    2446:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2448:	430b      	orrs	r3, r1
    244a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    244c:	d10d      	bne.n	246a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46a>
    244e:	2b39      	cmp	r3, #57	; 0x39
    2450:	d029      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    2452:	f1b9 0f00 	cmp.w	r9, #0
    2456:	dd01      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2458:	9b06      	ldr	r3, [sp, #24]
    245a:	3331      	adds	r3, #49	; 0x31
    245c:	9a04      	ldr	r2, [sp, #16]
    245e:	7013      	strb	r3, [r2, #0]
    2460:	e77a      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    2462:	4630      	mov	r0, r6
    2464:	e7b9      	b.n	23da <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3da>
    2466:	2201      	movs	r2, #1
    2468:	e7e2      	b.n	2430 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x430>
    246a:	f1b9 0f00 	cmp.w	r9, #0
    246e:	db06      	blt.n	247e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x47e>
    2470:	9922      	ldr	r1, [sp, #136]	; 0x88
    2472:	ea41 0909 	orr.w	r9, r1, r9
    2476:	9909      	ldr	r1, [sp, #36]	; 0x24
    2478:	ea59 0101 	orrs.w	r1, r9, r1
    247c:	d120      	bne.n	24c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c0>
    247e:	2a00      	cmp	r2, #0
    2480:	ddec      	ble.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    2482:	4659      	mov	r1, fp
    2484:	2201      	movs	r2, #1
    2486:	4628      	mov	r0, r5
    2488:	9308      	str	r3, [sp, #32]
    248a:	f014 fad1 	bl	16a30 <__lshift>
    248e:	4621      	mov	r1, r4
    2490:	4683      	mov	fp, r0
    2492:	f014 fb2c 	bl	16aee <__mcmp>
    2496:	2800      	cmp	r0, #0
    2498:	9b08      	ldr	r3, [sp, #32]
    249a:	dc02      	bgt.n	24a2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a2>
    249c:	d1de      	bne.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    249e:	07da      	lsls	r2, r3, #31
    24a0:	d5dc      	bpl.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24a2:	2b39      	cmp	r3, #57	; 0x39
    24a4:	d1d8      	bne.n	2458 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x458>
    24a6:	2339      	movs	r3, #57	; 0x39
    24a8:	9a04      	ldr	r2, [sp, #16]
    24aa:	7013      	strb	r3, [r2, #0]
    24ac:	463b      	mov	r3, r7
    24ae:	461f      	mov	r7, r3
    24b0:	3b01      	subs	r3, #1
    24b2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    24b6:	2a39      	cmp	r2, #57	; 0x39
    24b8:	d050      	beq.n	255c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x55c>
    24ba:	3201      	adds	r2, #1
    24bc:	701a      	strb	r2, [r3, #0]
    24be:	e74b      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    24c0:	2a00      	cmp	r2, #0
    24c2:	dd03      	ble.n	24cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4cc>
    24c4:	2b39      	cmp	r3, #57	; 0x39
    24c6:	d0ee      	beq.n	24a6 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a6>
    24c8:	3301      	adds	r3, #1
    24ca:	e7c7      	b.n	245c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45c>
    24cc:	9a08      	ldr	r2, [sp, #32]
    24ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    24d0:	f802 3c01 	strb.w	r3, [r2, #-1]
    24d4:	428a      	cmp	r2, r1
    24d6:	d02a      	beq.n	252e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x52e>
    24d8:	4659      	mov	r1, fp
    24da:	2300      	movs	r3, #0
    24dc:	220a      	movs	r2, #10
    24de:	4628      	mov	r0, r5
    24e0:	f014 f975 	bl	167ce <__multadd>
    24e4:	45b0      	cmp	r8, r6
    24e6:	4683      	mov	fp, r0
    24e8:	f04f 0300 	mov.w	r3, #0
    24ec:	f04f 020a 	mov.w	r2, #10
    24f0:	4641      	mov	r1, r8
    24f2:	4628      	mov	r0, r5
    24f4:	d107      	bne.n	2506 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x506>
    24f6:	f014 f96a 	bl	167ce <__multadd>
    24fa:	4680      	mov	r8, r0
    24fc:	4606      	mov	r6, r0
    24fe:	9b08      	ldr	r3, [sp, #32]
    2500:	3301      	adds	r3, #1
    2502:	9308      	str	r3, [sp, #32]
    2504:	e775      	b.n	23f2 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3f2>
    2506:	f014 f962 	bl	167ce <__multadd>
    250a:	4631      	mov	r1, r6
    250c:	4680      	mov	r8, r0
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	4628      	mov	r0, r5
    2514:	f014 f95b 	bl	167ce <__multadd>
    2518:	4606      	mov	r6, r0
    251a:	e7f0      	b.n	24fe <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4fe>
    251c:	f1b9 0f00 	cmp.w	r9, #0
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	f04f 0800 	mov.w	r8, #0
    2526:	bfcc      	ite	gt
    2528:	464f      	movgt	r7, r9
    252a:	2701      	movle	r7, #1
    252c:	4417      	add	r7, r2
    252e:	4659      	mov	r1, fp
    2530:	2201      	movs	r2, #1
    2532:	4628      	mov	r0, r5
    2534:	9308      	str	r3, [sp, #32]
    2536:	f014 fa7b 	bl	16a30 <__lshift>
    253a:	4621      	mov	r1, r4
    253c:	4683      	mov	fp, r0
    253e:	f014 fad6 	bl	16aee <__mcmp>
    2542:	2800      	cmp	r0, #0
    2544:	dcb2      	bgt.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    2546:	d102      	bne.n	254e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54e>
    2548:	9b08      	ldr	r3, [sp, #32]
    254a:	07db      	lsls	r3, r3, #31
    254c:	d4ae      	bmi.n	24ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ac>
    254e:	463b      	mov	r3, r7
    2550:	461f      	mov	r7, r3
    2552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2556:	2a30      	cmp	r2, #48	; 0x30
    2558:	d0fa      	beq.n	2550 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x550>
    255a:	e6fd      	b.n	2358 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x358>
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	429a      	cmp	r2, r3
    2560:	d1a5      	bne.n	24ae <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4ae>
    2562:	f10a 0a01 	add.w	sl, sl, #1
    2566:	2331      	movs	r3, #49	; 0x31
    2568:	e779      	b.n	245e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x45e>
    256a:	4b13      	ldr	r3, [pc, #76]	; (25b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5b8>)
    256c:	f7ff babe 	b.w	1aec <_dtoa_r+0xcc>
    2570:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2572:	2b00      	cmp	r3, #0
    2574:	f47f aa96 	bne.w	1aa4 <_dtoa_r+0x84>
    2578:	4b10      	ldr	r3, [pc, #64]	; (25bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5bc>)
    257a:	f7ff bab7 	b.w	1aec <_dtoa_r+0xcc>
    257e:	f1b9 0f00 	cmp.w	r9, #0
    2582:	dc03      	bgt.n	258c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58c>
    2584:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2586:	2b02      	cmp	r3, #2
    2588:	f73f aecf 	bgt.w	232a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x32a>
    258c:	9f03      	ldr	r7, [sp, #12]
    258e:	4621      	mov	r1, r4
    2590:	4658      	mov	r0, fp
    2592:	f013 ffe9 	bl	16568 <quorem>
    2596:	9a03      	ldr	r2, [sp, #12]
    2598:	f100 0330 	add.w	r3, r0, #48	; 0x30
    259c:	f807 3b01 	strb.w	r3, [r7], #1
    25a0:	1aba      	subs	r2, r7, r2
    25a2:	4591      	cmp	r9, r2
    25a4:	ddba      	ble.n	251c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x51c>
    25a6:	4659      	mov	r1, fp
    25a8:	2300      	movs	r3, #0
    25aa:	220a      	movs	r2, #10
    25ac:	4628      	mov	r0, r5
    25ae:	f014 f90e 	bl	167ce <__multadd>
    25b2:	4683      	mov	fp, r0
    25b4:	e7eb      	b.n	258e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58e>
    25b6:	bf00      	nop
    25b8:	0006be7a 	.word	0x0006be7a
    25bc:	0006be9e 	.word	0x0006be9e

000025c0 <_Z18ee_serial_callbackc>:
 * from the UART ISR for each new character received. When the parser sees the
 * termination character, the user-defined th_command_ready() command is called.
 * It is up to the application to then dispatch this command outside the ISR
 * as soon as possible by calling ee_serial_command_parser_callback(), below.
 */
void ee_serial_callback(char c) {
    25c0:	b538      	push	{r3, r4, r5, lr}
  if (c == EE_CMD_TERMINATOR) {
    25c2:	2825      	cmp	r0, #37	; 0x25
    25c4:	d00c      	beq.n	25e0 <_Z18ee_serial_callbackc+0x20>
    g_cmd_buf[g_cmd_pos] = (char)0;
    th_command_ready(g_cmd_buf);
    g_cmd_pos = 0;
  } else {
    g_cmd_buf[g_cmd_pos] = c;
    25c6:	4b0c      	ldr	r3, [pc, #48]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25c8:	681a      	ldr	r2, [r3, #0]
    25ca:	490c      	ldr	r1, [pc, #48]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25cc:	5488      	strb	r0, [r1, r2]
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	2b4f      	cmp	r3, #79	; 0x4f
    25d2:	d80e      	bhi.n	25f2 <_Z18ee_serial_callbackc+0x32>
    25d4:	4b08      	ldr	r3, [pc, #32]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	3301      	adds	r3, #1
    25da:	4a07      	ldr	r2, [pc, #28]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25dc:	6013      	str	r3, [r2, #0]
  }
}
    25de:	bd38      	pop	{r3, r4, r5, pc}
    g_cmd_buf[g_cmd_pos] = (char)0;
    25e0:	4c05      	ldr	r4, [pc, #20]	; (25f8 <_Z18ee_serial_callbackc+0x38>)
    25e2:	6823      	ldr	r3, [r4, #0]
    25e4:	4805      	ldr	r0, [pc, #20]	; (25fc <_Z18ee_serial_callbackc+0x3c>)
    25e6:	2500      	movs	r5, #0
    25e8:	54c5      	strb	r5, [r0, r3]
    th_command_ready(g_cmd_buf);
    25ea:	f00f fc0e 	bl	11e0a <_Z16th_command_readyPVc>
    g_cmd_pos = 0;
    25ee:	6025      	str	r5, [r4, #0]
    25f0:	e7f5      	b.n	25de <_Z18ee_serial_callbackc+0x1e>
    g_cmd_pos = g_cmd_pos >= EE_CMD_SIZE ? EE_CMD_SIZE : g_cmd_pos + 1;
    25f2:	2350      	movs	r3, #80	; 0x50
    25f4:	e7f1      	b.n	25da <_Z18ee_serial_callbackc+0x1a>
    25f6:	bf00      	nop
    25f8:	20000524 	.word	0x20000524
    25fc:	200004d0 	.word	0x200004d0

00002600 <_Z23ee_benchmark_initializev>:
}

/**
 * Perform the basic setup.
 */
void ee_benchmark_initialize(void) {
    2600:	b508      	push	{r3, lr}
  th_serialport_initialize();
    2602:	f00f fc1c 	bl	11e3e <_Z24th_serialport_initializev>
  th_timestamp_initialize();
    2606:	f000 fab5 	bl	2b74 <_Z23th_timestamp_initializev>
  th_final_initialize();
    260a:	f000 fabd 	bl	2b88 <_Z19th_final_initializev>
  th_printf(EE_MSG_INIT_DONE);
    260e:	4805      	ldr	r0, [pc, #20]	; (2624 <_Z23ee_benchmark_initializev+0x24>)
    2610:	f00f fc07 	bl	11e22 <_Z9th_printfPKcz>
  // Enable the command parser here (the callback is connected)
  g_state_parser_enabled = true;
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <_Z23ee_benchmark_initializev+0x28>)
    2616:	2201      	movs	r2, #1
    2618:	701a      	strb	r2, [r3, #0]
  // At this point, the serial monitor should be up and running,
  th_printf(EE_MSG_READY);
    261a:	4804      	ldr	r0, [pc, #16]	; (262c <_Z23ee_benchmark_initializev+0x2c>)
    261c:	f00f fc01 	bl	11e22 <_Z9th_printfPKcz>
}
    2620:	bd08      	pop	{r3, pc}
    2622:	bf00      	nop
    2624:	000688d0 	.word	0x000688d0
    2628:	20020a84 	.word	0x20020a84
    262c:	000688e0 	.word	0x000688e0

00002630 <_Z8ee_inferjj>:
 *
 * For testing, you can pre-load known-good data into the buffer during the
 * th_final_initialize() function.
 *
 */
void ee_infer(size_t n, size_t n_warmup) {
    2630:	b570      	push	{r4, r5, r6, lr}
    2632:	4604      	mov	r4, r0
    2634:	460d      	mov	r5, r1
  th_load_tensor(); /* if necessary */
    2636:	f000 fa01 	bl	2a3c <_Z14th_load_tensorv>
  th_printf("m-warmup-start-%d\r\n", n_warmup);
    263a:	4629      	mov	r1, r5
    263c:	4811      	ldr	r0, [pc, #68]	; (2684 <_Z8ee_inferjj+0x54>)
    263e:	f00f fbf0 	bl	11e22 <_Z9th_printfPKcz>
  while (n_warmup-- > 0) {
    2642:	1e6e      	subs	r6, r5, #1
    2644:	b11d      	cbz	r5, 264e <_Z8ee_inferjj+0x1e>
    th_infer(); /* call the API inference function */
    2646:	f000 f9e7 	bl	2a18 <_Z8th_inferv>
  while (n_warmup-- > 0) {
    264a:	4635      	mov	r5, r6
    264c:	e7f9      	b.n	2642 <_Z8ee_inferjj+0x12>
  }
  th_printf("m-warmup-done\r\n");
    264e:	480e      	ldr	r0, [pc, #56]	; (2688 <_Z8ee_inferjj+0x58>)
    2650:	f00f fbe7 	bl	11e22 <_Z9th_printfPKcz>
  th_printf("m-infer-start-%d\r\n", n);
    2654:	4621      	mov	r1, r4
    2656:	480d      	ldr	r0, [pc, #52]	; (268c <_Z8ee_inferjj+0x5c>)
    2658:	f00f fbe3 	bl	11e22 <_Z9th_printfPKcz>
  th_timestamp();
    265c:	f000 fa66 	bl	2b2c <_Z12th_timestampv>
  th_pre();
    2660:	f00f fbd1 	bl	11e06 <_Z6th_prev>
  while (n-- > 0) {
    2664:	1e65      	subs	r5, r4, #1
    2666:	b11c      	cbz	r4, 2670 <_Z8ee_inferjj+0x40>
    th_infer(); /* call the API inference function */
    2668:	f000 f9d6 	bl	2a18 <_Z8th_inferv>
  while (n-- > 0) {
    266c:	462c      	mov	r4, r5
    266e:	e7f9      	b.n	2664 <_Z8ee_inferjj+0x34>
  }
  th_post();
    2670:	f00f fbca 	bl	11e08 <_Z7th_postv>
  th_timestamp();
    2674:	f000 fa5a 	bl	2b2c <_Z12th_timestampv>
  th_printf("m-infer-done\r\n");
    2678:	4805      	ldr	r0, [pc, #20]	; (2690 <_Z8ee_inferjj+0x60>)
    267a:	f00f fbd2 	bl	11e22 <_Z9th_printfPKcz>
  th_results();
    267e:	f000 fa15 	bl	2aac <_Z10th_resultsv>
}
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	000688ec 	.word	0x000688ec
    2688:	00068900 	.word	0x00068900
    268c:	00068910 	.word	0x00068910
    2690:	00068924 	.word	0x00068924

00002694 <_Z15ee_buffer_parsePc>:

arg_claimed_t ee_buffer_parse(char *p_command) {
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	b082      	sub	sp, #8
  char *p_next;

  if (strncmp(p_command, "db", EE_CMD_SIZE) != 0) {
    2698:	2250      	movs	r2, #80	; 0x50
    269a:	4951      	ldr	r1, [pc, #324]	; (27e0 <_Z15ee_buffer_parsePc+0x14c>)
    269c:	f013 ff0a 	bl	164b4 <strncmp>
    26a0:	b110      	cbz	r0, 26a8 <_Z15ee_buffer_parsePc+0x14>
    return EE_ARG_UNCLAIMED;
    26a2:	2001      	movs	r0, #1
        }
      }
    }
  }
  return EE_ARG_CLAIMED;
}
    26a4:	b002      	add	sp, #8
    26a6:	bd70      	pop	{r4, r5, r6, pc}
  p_next = strtok(NULL, EE_CMD_DELIMITER);
    26a8:	494e      	ldr	r1, [pc, #312]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26aa:	f00e ff1b 	bl	114e4 <strtok>
  if (p_next == NULL) {
    26ae:	4605      	mov	r5, r0
    26b0:	b1d8      	cbz	r0, 26ea <_Z15ee_buffer_parsePc+0x56>
  } else if (strncmp(p_next, "load", EE_CMD_SIZE) == 0) {
    26b2:	2250      	movs	r2, #80	; 0x50
    26b4:	494c      	ldr	r1, [pc, #304]	; (27e8 <_Z15ee_buffer_parsePc+0x154>)
    26b6:	f013 fefd 	bl	164b4 <strncmp>
    26ba:	bb50      	cbnz	r0, 2712 <_Z15ee_buffer_parsePc+0x7e>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    26bc:	4949      	ldr	r1, [pc, #292]	; (27e4 <_Z15ee_buffer_parsePc+0x150>)
    26be:	f00e ff11 	bl	114e4 <strtok>
    if (p_next == NULL) {
    26c2:	b1b8      	cbz	r0, 26f4 <_Z15ee_buffer_parsePc+0x60>
      g_buff_size = (size_t)atoi(p_next);
    26c4:	f013 fd70 	bl	161a8 <atoi>
    26c8:	4601      	mov	r1, r0
    26ca:	4b48      	ldr	r3, [pc, #288]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    26cc:	6018      	str	r0, [r3, #0]
      if (g_buff_size == 0) {
    26ce:	b1b0      	cbz	r0, 26fe <_Z15ee_buffer_parsePc+0x6a>
        g_buff_pos = 0;
    26d0:	4b47      	ldr	r3, [pc, #284]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    26d2:	2200      	movs	r2, #0
    26d4:	601a      	str	r2, [r3, #0]
        if (g_buff_size > MAX_DB_INPUT_SIZE) {
    26d6:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    26da:	d915      	bls.n	2708 <_Z15ee_buffer_parsePc+0x74>
          th_printf("Supplied buffer size %d exceeds maximum of %d\n",
    26dc:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    26e0:	4844      	ldr	r0, [pc, #272]	; (27f4 <_Z15ee_buffer_parsePc+0x160>)
    26e2:	f00f fb9e 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26e6:	2000      	movs	r0, #0
    26e8:	e7dc      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("e-[Command 'db' requires a subcommand]\r\n");
    26ea:	4843      	ldr	r0, [pc, #268]	; (27f8 <_Z15ee_buffer_parsePc+0x164>)
    26ec:	f00f fb99 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26f0:	2000      	movs	r0, #0
    26f2:	e7d7      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
      th_printf("e-[Command 'db load' requires the # of bytes]\r\n");
    26f4:	4841      	ldr	r0, [pc, #260]	; (27fc <_Z15ee_buffer_parsePc+0x168>)
    26f6:	f00f fb94 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    26fa:	2000      	movs	r0, #0
    26fc:	e7d2      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
        th_printf("e-[Command 'db load' must be >0 bytes]\r\n");
    26fe:	4840      	ldr	r0, [pc, #256]	; (2800 <_Z15ee_buffer_parsePc+0x16c>)
    2700:	f00f fb8f 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2704:	2000      	movs	r0, #0
    2706:	e7cd      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
          th_printf("m-[Expecting %d bytes]\r\n", g_buff_size);
    2708:	483e      	ldr	r0, [pc, #248]	; (2804 <_Z15ee_buffer_parsePc+0x170>)
    270a:	f00f fb8a 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    270e:	2000      	movs	r0, #0
    2710:	e7c8      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  } else if (strncmp(p_next, "print", EE_CMD_SIZE) == 0) {
    2712:	2250      	movs	r2, #80	; 0x50
    2714:	493c      	ldr	r1, [pc, #240]	; (2808 <_Z15ee_buffer_parsePc+0x174>)
    2716:	4628      	mov	r0, r5
    2718:	f013 fecc 	bl	164b4 <strncmp>
    271c:	bb60      	cbnz	r0, 2778 <_Z15ee_buffer_parsePc+0xe4>
    size_t i = 0;
    271e:	2400      	movs	r4, #0
    2720:	e012      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
        th_printf("m-buffer-");
    2722:	483a      	ldr	r0, [pc, #232]	; (280c <_Z15ee_buffer_parsePc+0x178>)
    2724:	f00f fb7d 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("%02x", gp_buff[i]);
    2728:	4b39      	ldr	r3, [pc, #228]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    272a:	5d19      	ldrb	r1, [r3, r4]
    272c:	4839      	ldr	r0, [pc, #228]	; (2814 <_Z15ee_buffer_parsePc+0x180>)
    272e:	f00f fb78 	bl	11e22 <_Z9th_printfPKcz>
    if (((i + 1) % max == 0) || ((i + 1) == g_buff_size)) {
    2732:	3401      	adds	r4, #1
    2734:	f014 0f07 	tst.w	r4, #7
    2738:	d003      	beq.n	2742 <_Z15ee_buffer_parsePc+0xae>
    273a:	4b2c      	ldr	r3, [pc, #176]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	429c      	cmp	r4, r3
    2740:	d10c      	bne.n	275c <_Z15ee_buffer_parsePc+0xc8>
        th_printf("\r\n");
    2742:	4835      	ldr	r0, [pc, #212]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2744:	f00f fb6d 	bl	11e22 <_Z9th_printfPKcz>
    for (; i < g_buff_size; ++i) {
    2748:	4b28      	ldr	r3, [pc, #160]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    274a:	681b      	ldr	r3, [r3, #0]
    274c:	42a3      	cmp	r3, r4
    274e:	d909      	bls.n	2764 <_Z15ee_buffer_parsePc+0xd0>
    if ((i + max) % max == 0 || i == 0) {
    2750:	f014 0f07 	tst.w	r4, #7
    2754:	d0e5      	beq.n	2722 <_Z15ee_buffer_parsePc+0x8e>
    2756:	2c00      	cmp	r4, #0
    2758:	d1e6      	bne.n	2728 <_Z15ee_buffer_parsePc+0x94>
    275a:	e7e2      	b.n	2722 <_Z15ee_buffer_parsePc+0x8e>
        th_printf("-");
    275c:	482f      	ldr	r0, [pc, #188]	; (281c <_Z15ee_buffer_parsePc+0x188>)
    275e:	f00f fb60 	bl	11e22 <_Z9th_printfPKcz>
    2762:	e7f1      	b.n	2748 <_Z15ee_buffer_parsePc+0xb4>
    if (i % max != 0) {
    2764:	f014 0f07 	tst.w	r4, #7
    2768:	d101      	bne.n	276e <_Z15ee_buffer_parsePc+0xda>
  return EE_ARG_CLAIMED;
    276a:	2000      	movs	r0, #0
    276c:	e79a      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    th_printf("\r\n");
    276e:	482a      	ldr	r0, [pc, #168]	; (2818 <_Z15ee_buffer_parsePc+0x184>)
    2770:	f00f fb57 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    2774:	2000      	movs	r0, #0
    2776:	e795      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    numbytes = th_strnlen(p_next, EE_CMD_SIZE);
    2778:	2150      	movs	r1, #80	; 0x50
    277a:	4628      	mov	r0, r5
    277c:	f00f fb49 	bl	11e12 <_Z10th_strnlenPKcj>
    2780:	4606      	mov	r6, r0
    if ((numbytes & 1) != 0) {
    2782:	f010 0401 	ands.w	r4, r0, #1
    2786:	d11f      	bne.n	27c8 <_Z15ee_buffer_parsePc+0x134>
    test[2] = 0;
    2788:	2300      	movs	r3, #0
    278a:	f88d 3006 	strb.w	r3, [sp, #6]
    for (size_t i = 0; i < numbytes;) {
    278e:	42b4      	cmp	r4, r6
    2790:	d224      	bcs.n	27dc <_Z15ee_buffer_parsePc+0x148>
      test[0] = p_next[i++];
    2792:	1c63      	adds	r3, r4, #1
    2794:	5d2a      	ldrb	r2, [r5, r4]
    2796:	f88d 2004 	strb.w	r2, [sp, #4]
      test[1] = p_next[i++];
    279a:	5ceb      	ldrb	r3, [r5, r3]
    279c:	3402      	adds	r4, #2
    279e:	f88d 3005 	strb.w	r3, [sp, #5]
      res = ee_hexdec(test);
    27a2:	a801      	add	r0, sp, #4
    27a4:	f00f faa6 	bl	11cf4 <_Z9ee_hexdecPc>
      if (res < 0) {
    27a8:	2800      	cmp	r0, #0
    27aa:	db11      	blt.n	27d0 <_Z15ee_buffer_parsePc+0x13c>
        gp_buff[g_buff_pos] = (uint8_t)res;
    27ac:	4a10      	ldr	r2, [pc, #64]	; (27f0 <_Z15ee_buffer_parsePc+0x15c>)
    27ae:	6813      	ldr	r3, [r2, #0]
    27b0:	4917      	ldr	r1, [pc, #92]	; (2810 <_Z15ee_buffer_parsePc+0x17c>)
    27b2:	54c8      	strb	r0, [r1, r3]
        g_buff_pos++;
    27b4:	3301      	adds	r3, #1
    27b6:	6013      	str	r3, [r2, #0]
        if (g_buff_pos == g_buff_size) {
    27b8:	4a0c      	ldr	r2, [pc, #48]	; (27ec <_Z15ee_buffer_parsePc+0x158>)
    27ba:	6812      	ldr	r2, [r2, #0]
    27bc:	4293      	cmp	r3, r2
    27be:	d1e6      	bne.n	278e <_Z15ee_buffer_parsePc+0xfa>
          th_printf("m-load-done\r\n");
    27c0:	4817      	ldr	r0, [pc, #92]	; (2820 <_Z15ee_buffer_parsePc+0x18c>)
    27c2:	f00f fb2e 	bl	11e22 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    27c6:	e007      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
      th_printf("e-[Insufficent number of hex digits]\r\n");
    27c8:	4816      	ldr	r0, [pc, #88]	; (2824 <_Z15ee_buffer_parsePc+0x190>)
    27ca:	f00f fb2a 	bl	11e22 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27ce:	e003      	b.n	27d8 <_Z15ee_buffer_parsePc+0x144>
        th_printf("e-[Invalid hex digit '%s']\r\n", test);
    27d0:	a901      	add	r1, sp, #4
    27d2:	4815      	ldr	r0, [pc, #84]	; (2828 <_Z15ee_buffer_parsePc+0x194>)
    27d4:	f00f fb25 	bl	11e22 <_Z9th_printfPKcz>
      return EE_ARG_CLAIMED;
    27d8:	2000      	movs	r0, #0
    27da:	e763      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
  return EE_ARG_CLAIMED;
    27dc:	2000      	movs	r0, #0
    27de:	e761      	b.n	26a4 <_Z15ee_buffer_parsePc+0x10>
    27e0:	00068934 	.word	0x00068934
    27e4:	00068938 	.word	0x00068938
    27e8:	00068968 	.word	0x00068968
    27ec:	200004cc 	.word	0x200004cc
    27f0:	200004c8 	.word	0x200004c8
    27f4:	000689cc 	.word	0x000689cc
    27f8:	0006893c 	.word	0x0006893c
    27fc:	00068970 	.word	0x00068970
    2800:	000689a0 	.word	0x000689a0
    2804:	000689fc 	.word	0x000689fc
    2808:	00068a18 	.word	0x00068a18
    280c:	00068a20 	.word	0x00068a20
    2810:	20000528 	.word	0x20000528
    2814:	00068a2c 	.word	0x00068a2c
    2818:	0006bc68 	.word	0x0006bc68
    281c:	00068a28 	.word	0x00068a28
    2820:	00068a7c 	.word	0x00068a7c
    2824:	00068a34 	.word	0x00068a34
    2828:	00068a5c 	.word	0x00068a5c

0000282c <_Z16ee_profile_parsePc>:
arg_claimed_t ee_profile_parse(char *command) {
    282c:	b510      	push	{r4, lr}
    282e:	4604      	mov	r4, r0
  if (strncmp(command, "profile", EE_CMD_SIZE) == 0) {
    2830:	2250      	movs	r2, #80	; 0x50
    2832:	493b      	ldr	r1, [pc, #236]	; (2920 <_Z16ee_profile_parsePc+0xf4>)
    2834:	f013 fe3e 	bl	164b4 <strncmp>
    2838:	b948      	cbnz	r0, 284e <_Z16ee_profile_parsePc+0x22>
    th_printf("m-profile-[%s]\r\n", EE_FW_VERSION);
    283a:	493a      	ldr	r1, [pc, #232]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    283c:	483a      	ldr	r0, [pc, #232]	; (2928 <_Z16ee_profile_parsePc+0xfc>)
    283e:	f00f faf0 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("m-model-[%s]\r\n", TH_MODEL_VERSION);
    2842:	493a      	ldr	r1, [pc, #232]	; (292c <_Z16ee_profile_parsePc+0x100>)
    2844:	483a      	ldr	r0, [pc, #232]	; (2930 <_Z16ee_profile_parsePc+0x104>)
    2846:	f00f faec 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    284a:	2000      	movs	r0, #0
}
    284c:	bd10      	pop	{r4, pc}
  } else if (strncmp(command, "help", EE_CMD_SIZE) == 0) {
    284e:	2250      	movs	r2, #80	; 0x50
    2850:	4938      	ldr	r1, [pc, #224]	; (2934 <_Z16ee_profile_parsePc+0x108>)
    2852:	4620      	mov	r0, r4
    2854:	f013 fe2e 	bl	164b4 <strncmp>
    2858:	bb30      	cbnz	r0, 28a8 <_Z16ee_profile_parsePc+0x7c>
    th_printf("%s\r\n", EE_FW_VERSION);
    285a:	4932      	ldr	r1, [pc, #200]	; (2924 <_Z16ee_profile_parsePc+0xf8>)
    285c:	4836      	ldr	r0, [pc, #216]	; (2938 <_Z16ee_profile_parsePc+0x10c>)
    285e:	f00f fae0 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("\r\n");
    2862:	4836      	ldr	r0, [pc, #216]	; (293c <_Z16ee_profile_parsePc+0x110>)
    2864:	f00f fadd 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("help         : Print this information\r\n");
    2868:	4835      	ldr	r0, [pc, #212]	; (2940 <_Z16ee_profile_parsePc+0x114>)
    286a:	f00f fada 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("name         : Print the name of the device\r\n");
    286e:	4835      	ldr	r0, [pc, #212]	; (2944 <_Z16ee_profile_parsePc+0x118>)
    2870:	f00f fad7 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("timestsamp   : Generate a timetsamp\r\n");
    2874:	4834      	ldr	r0, [pc, #208]	; (2948 <_Z16ee_profile_parsePc+0x11c>)
    2876:	f00f fad4 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("db SUBCMD    : Manipulate a generic byte buffer\r\n");
    287a:	4834      	ldr	r0, [pc, #208]	; (294c <_Z16ee_profile_parsePc+0x120>)
    287c:	f00f fad1 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("  load N     : Allocate N bytes and set load counter\r\n");
    2880:	4833      	ldr	r0, [pc, #204]	; (2950 <_Z16ee_profile_parsePc+0x124>)
    2882:	f00f face 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("  db HH[HH]* : Load 8-bit hex byte(s) until N bytes\r\n");
    2886:	4833      	ldr	r0, [pc, #204]	; (2954 <_Z16ee_profile_parsePc+0x128>)
    2888:	f00f facb 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("  print [N=16] [offset=0]\r\n");
    288c:	4832      	ldr	r0, [pc, #200]	; (2958 <_Z16ee_profile_parsePc+0x12c>)
    288e:	f00f fac8 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("             : Print N bytes at offset as hex\r\n");
    2892:	4832      	ldr	r0, [pc, #200]	; (295c <_Z16ee_profile_parsePc+0x130>)
    2894:	f00f fac5 	bl	11e22 <_Z9th_printfPKcz>
    th_printf(
    2898:	4831      	ldr	r0, [pc, #196]	; (2960 <_Z16ee_profile_parsePc+0x134>)
    289a:	f00f fac2 	bl	11e22 <_Z9th_printfPKcz>
    th_printf("results      : Return the result fp32 vector\r\n");
    289e:	4831      	ldr	r0, [pc, #196]	; (2964 <_Z16ee_profile_parsePc+0x138>)
    28a0:	f00f fabf 	bl	11e22 <_Z9th_printfPKcz>
  return EE_ARG_CLAIMED;
    28a4:	2000      	movs	r0, #0
    28a6:	e7d1      	b.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (ee_buffer_parse(command) == EE_ARG_CLAIMED) {
    28a8:	4620      	mov	r0, r4
    28aa:	f7ff fef3 	bl	2694 <_Z15ee_buffer_parsePc>
    28ae:	2800      	cmp	r0, #0
    28b0:	d0cc      	beq.n	284c <_Z16ee_profile_parsePc+0x20>
  } else if (strncmp(command, "infer", EE_CMD_SIZE) == 0) {
    28b2:	2250      	movs	r2, #80	; 0x50
    28b4:	492c      	ldr	r1, [pc, #176]	; (2968 <_Z16ee_profile_parsePc+0x13c>)
    28b6:	4620      	mov	r0, r4
    28b8:	f013 fdfc 	bl	164b4 <strncmp>
    28bc:	bb18      	cbnz	r0, 2906 <_Z16ee_profile_parsePc+0xda>
    p_next = strtok(NULL, EE_CMD_DELIMITER);
    28be:	492b      	ldr	r1, [pc, #172]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28c0:	f00e fe10 	bl	114e4 <strtok>
    if (p_next) {
    28c4:	b1b0      	cbz	r0, 28f4 <_Z16ee_profile_parsePc+0xc8>
      i = atoi(p_next);
    28c6:	f013 fc6f 	bl	161a8 <atoi>
      if (i <= 0) {
    28ca:	1e04      	subs	r4, r0, #0
    28cc:	dd0d      	ble.n	28ea <_Z16ee_profile_parsePc+0xbe>
      p_next = strtok(NULL, EE_CMD_DELIMITER);
    28ce:	4927      	ldr	r1, [pc, #156]	; (296c <_Z16ee_profile_parsePc+0x140>)
    28d0:	2000      	movs	r0, #0
    28d2:	f00e fe07 	bl	114e4 <strtok>
      if (p_next) {
    28d6:	b1a0      	cbz	r0, 2902 <_Z16ee_profile_parsePc+0xd6>
        i = atoi(p_next);
    28d8:	f013 fc66 	bl	161a8 <atoi>
        if (i < 0) {
    28dc:	1e01      	subs	r1, r0, #0
    28de:	da0b      	bge.n	28f8 <_Z16ee_profile_parsePc+0xcc>
          th_printf("e-[Inference warmup must be >=0]\r\n");
    28e0:	4823      	ldr	r0, [pc, #140]	; (2970 <_Z16ee_profile_parsePc+0x144>)
    28e2:	f00f fa9e 	bl	11e22 <_Z9th_printfPKcz>
          return EE_ARG_CLAIMED;
    28e6:	2000      	movs	r0, #0
    28e8:	e7b0      	b.n	284c <_Z16ee_profile_parsePc+0x20>
        th_printf("e-[Inference iterations must be >0]\r\n");
    28ea:	4822      	ldr	r0, [pc, #136]	; (2974 <_Z16ee_profile_parsePc+0x148>)
    28ec:	f00f fa99 	bl	11e22 <_Z9th_printfPKcz>
        return EE_ARG_CLAIMED;
    28f0:	2000      	movs	r0, #0
    28f2:	e7ab      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    28f4:	210a      	movs	r1, #10
    size_t n = 1;
    28f6:	2401      	movs	r4, #1
    ee_infer(n, w);
    28f8:	4620      	mov	r0, r4
    28fa:	f7ff fe99 	bl	2630 <_Z8ee_inferjj>
  return EE_ARG_CLAIMED;
    28fe:	2000      	movs	r0, #0
    2900:	e7a4      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    size_t w = 10;
    2902:	210a      	movs	r1, #10
    2904:	e7f8      	b.n	28f8 <_Z16ee_profile_parsePc+0xcc>
  } else if (strncmp(command, "results", EE_CMD_SIZE) == 0) {
    2906:	2250      	movs	r2, #80	; 0x50
    2908:	491b      	ldr	r1, [pc, #108]	; (2978 <_Z16ee_profile_parsePc+0x14c>)
    290a:	4620      	mov	r0, r4
    290c:	f013 fdd2 	bl	164b4 <strncmp>
    2910:	b108      	cbz	r0, 2916 <_Z16ee_profile_parsePc+0xea>
    return EE_ARG_UNCLAIMED;
    2912:	2001      	movs	r0, #1
    2914:	e79a      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    th_results();
    2916:	f000 f8c9 	bl	2aac <_Z10th_resultsv>
  return EE_ARG_CLAIMED;
    291a:	2000      	movs	r0, #0
    291c:	e796      	b.n	284c <_Z16ee_profile_parsePc+0x20>
    291e:	bf00      	nop
    2920:	00068a8c 	.word	0x00068a8c
    2924:	00068a94 	.word	0x00068a94
    2928:	00068ab8 	.word	0x00068ab8
    292c:	00068acc 	.word	0x00068acc
    2930:	00068ad4 	.word	0x00068ad4
    2934:	00068ae4 	.word	0x00068ae4
    2938:	00068aec 	.word	0x00068aec
    293c:	0006bc68 	.word	0x0006bc68
    2940:	00068af4 	.word	0x00068af4
    2944:	00068b1c 	.word	0x00068b1c
    2948:	00068b4c 	.word	0x00068b4c
    294c:	00068b74 	.word	0x00068b74
    2950:	00068ba8 	.word	0x00068ba8
    2954:	00068be0 	.word	0x00068be0
    2958:	00068c18 	.word	0x00068c18
    295c:	00068c34 	.word	0x00068c34
    2960:	00068c64 	.word	0x00068c64
    2964:	00068cac 	.word	0x00068cac
    2968:	00068cdc 	.word	0x00068cdc
    296c:	00068938 	.word	0x00068938
    2970:	00068d0c 	.word	0x00068d0c
    2974:	00068ce4 	.word	0x00068ce4
    2978:	00068d30 	.word	0x00068d30

0000297c <_Z33ee_serial_command_parser_callbackPc>:
  if (g_state_parser_enabled != true) {
    297c:	4b14      	ldr	r3, [pc, #80]	; (29d0 <_Z33ee_serial_command_parser_callbackPc+0x54>)
    297e:	781b      	ldrb	r3, [r3, #0]
    2980:	b903      	cbnz	r3, 2984 <_Z33ee_serial_command_parser_callbackPc+0x8>
    2982:	4770      	bx	lr
void ee_serial_command_parser_callback(char *p_command) {
    2984:	b510      	push	{r4, lr}
  tok = strtok(p_command, EE_CMD_DELIMITER);
    2986:	4913      	ldr	r1, [pc, #76]	; (29d4 <_Z33ee_serial_command_parser_callbackPc+0x58>)
    2988:	f00e fdac 	bl	114e4 <strtok>
    298c:	4604      	mov	r4, r0
  if (strncmp(tok, EE_CMD_NAME, EE_CMD_SIZE) == 0) {
    298e:	2250      	movs	r2, #80	; 0x50
    2990:	4911      	ldr	r1, [pc, #68]	; (29d8 <_Z33ee_serial_command_parser_callbackPc+0x5c>)
    2992:	f013 fd8f 	bl	164b4 <strncmp>
    2996:	b940      	cbnz	r0, 29aa <_Z33ee_serial_command_parser_callbackPc+0x2e>
    th_printf(EE_MSG_NAME, EE_DEVICE_NAME, TH_VENDOR_NAME_STRING);
    2998:	4a10      	ldr	r2, [pc, #64]	; (29dc <_Z33ee_serial_command_parser_callbackPc+0x60>)
    299a:	4911      	ldr	r1, [pc, #68]	; (29e0 <_Z33ee_serial_command_parser_callbackPc+0x64>)
    299c:	4811      	ldr	r0, [pc, #68]	; (29e4 <_Z33ee_serial_command_parser_callbackPc+0x68>)
    299e:	f00f fa40 	bl	11e22 <_Z9th_printfPKcz>
  th_printf(EE_MSG_READY);
    29a2:	4811      	ldr	r0, [pc, #68]	; (29e8 <_Z33ee_serial_command_parser_callbackPc+0x6c>)
    29a4:	f00f fa3d 	bl	11e22 <_Z9th_printfPKcz>
}
    29a8:	bd10      	pop	{r4, pc}
  } else if (strncmp(tok, EE_CMD_TIMESTAMP, EE_CMD_SIZE) == 0) {
    29aa:	2250      	movs	r2, #80	; 0x50
    29ac:	490f      	ldr	r1, [pc, #60]	; (29ec <_Z33ee_serial_command_parser_callbackPc+0x70>)
    29ae:	4620      	mov	r0, r4
    29b0:	f013 fd80 	bl	164b4 <strncmp>
    29b4:	b910      	cbnz	r0, 29bc <_Z33ee_serial_command_parser_callbackPc+0x40>
    th_timestamp();
    29b6:	f000 f8b9 	bl	2b2c <_Z12th_timestampv>
    29ba:	e7f2      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
  } else if (ee_profile_parse(tok) == EE_ARG_CLAIMED) {
    29bc:	4620      	mov	r0, r4
    29be:	f7ff ff35 	bl	282c <_Z16ee_profile_parsePc>
    29c2:	2800      	cmp	r0, #0
    29c4:	d0ed      	beq.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    th_printf(EE_ERR_CMD, tok);
    29c6:	4621      	mov	r1, r4
    29c8:	4809      	ldr	r0, [pc, #36]	; (29f0 <_Z33ee_serial_command_parser_callbackPc+0x74>)
    29ca:	f00f fa2a 	bl	11e22 <_Z9th_printfPKcz>
    29ce:	e7e8      	b.n	29a2 <_Z33ee_serial_command_parser_callbackPc+0x26>
    29d0:	20020a84 	.word	0x20020a84
    29d4:	00068938 	.word	0x00068938
    29d8:	00068d38 	.word	0x00068d38
    29dc:	00068d40 	.word	0x00068d40
    29e0:	00068d4c 	.word	0x00068d4c
    29e4:	00068d50 	.word	0x00068d50
    29e8:	000688e0 	.word	0x000688e0
    29ec:	00068d64 	.word	0x00068d64
    29f0:	00068d70 	.word	0x00068d70

000029f4 <_Z13ee_get_bufferPhj>:
 * typically the length of the provided buffer.
 *
 * @return number of bytes copied from internal buffer.
 *
 */
size_t ee_get_buffer(uint8_t* buffer, size_t max_len) {
    29f4:	b510      	push	{r4, lr}
  int len = max_len < g_buff_pos ? max_len : g_buff_pos;
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <_Z13ee_get_bufferPhj+0x1c>)
    29f8:	681c      	ldr	r4, [r3, #0]
    29fa:	428c      	cmp	r4, r1
    29fc:	d900      	bls.n	2a00 <_Z13ee_get_bufferPhj+0xc>
    29fe:	460c      	mov	r4, r1
  if (buffer != nullptr) {
    2a00:	b118      	cbz	r0, 2a0a <_Z13ee_get_bufferPhj+0x16>
    memcpy(buffer, gp_buff, len * sizeof(uint8_t));
    2a02:	4622      	mov	r2, r4
    2a04:	4903      	ldr	r1, [pc, #12]	; (2a14 <_Z13ee_get_bufferPhj+0x20>)
    2a06:	f013 fbe1 	bl	161cc <memcpy>
  }
  return len;
}
    2a0a:	4620      	mov	r0, r4
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	bf00      	nop
    2a10:	200004c8 	.word	0x200004c8
    2a14:	20000528 	.word	0x20000528

00002a18 <_Z8th_inferv>:
  }
  th_printf("]\r\n");
}

// Implement this method with the logic to perform one inference cycle.
void th_infer() { runner->Invoke(); }
    2a18:	b510      	push	{r4, lr}
    2a1a:	4b06      	ldr	r3, [pc, #24]	; (2a34 <_Z8th_inferv+0x1c>)
    2a1c:	681c      	ldr	r4, [r3, #0]
    interpreter_.AllocateTensors();
  }

  void Invoke() {
    // Run the model on this input and make sure it succeeds.
    TfLiteStatus invoke_status = interpreter_.Invoke();
    2a1e:	f104 000c 	add.w	r0, r4, #12
    2a22:	f005 f92b 	bl	7c7c <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
    2a26:	b900      	cbnz	r0, 2a2a <_Z8th_inferv+0x12>
    2a28:	bd10      	pop	{r4, pc}
      TF_LITE_REPORT_ERROR(reporter_, "Invoke failed.");
    2a2a:	4903      	ldr	r1, [pc, #12]	; (2a38 <_Z8th_inferv+0x20>)
    2a2c:	68a0      	ldr	r0, [r4, #8]
    2a2e:	f011 f99a 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    2a32:	e7f9      	b.n	2a28 <_Z8th_inferv+0x10>
    2a34:	200072c4 	.word	0x200072c4
    2a38:	00068d8c 	.word	0x00068d8c

00002a3c <_Z14th_load_tensorv>:
void th_load_tensor() {
    2a3c:	b500      	push	{lr}
    2a3e:	f5ad 4dd8 	sub.w	sp, sp, #27648	; 0x6c00
    2a42:	b081      	sub	sp, #4
  size_t bytes = ee_get_buffer(reinterpret_cast<uint8_t *>(input),
    2a44:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
    2a48:	4668      	mov	r0, sp
    2a4a:	f7ff ffd3 	bl	29f4 <_Z13ee_get_bufferPhj>
  if (bytes / sizeof(int8_t) != kVwwInputSize) {
    2a4e:	f5b0 4fd8 	cmp.w	r0, #27648	; 0x6c00
    2a52:	d109      	bne.n	2a68 <_Z14th_load_tensorv+0x2c>
  for (int i = 0; i < bytes; i++) {
    2a54:	2300      	movs	r3, #0
    2a56:	4283      	cmp	r3, r0
    2a58:	d211      	bcs.n	2a7e <_Z14th_load_tensorv+0x42>
    input[i] -= 128;
    2a5a:	f81d 2003 	ldrb.w	r2, [sp, r3]
    2a5e:	3a80      	subs	r2, #128	; 0x80
    2a60:	f80d 2003 	strb.w	r2, [sp, r3]
  for (int i = 0; i < bytes; i++) {
    2a64:	3301      	adds	r3, #1
    2a66:	e7f6      	b.n	2a56 <_Z14th_load_tensorv+0x1a>
    th_printf("Input db has %d elemented, expected %d\n",
    2a68:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
    2a6c:	4601      	mov	r1, r0
    2a6e:	480d      	ldr	r0, [pc, #52]	; (2aa4 <_Z14th_load_tensorv+0x68>)
    2a70:	f00f f9d7 	bl	11e22 <_Z9th_printfPKcz>
}
    2a74:	f50d 4dd8 	add.w	sp, sp, #27648	; 0x6c00
    2a78:	b001      	add	sp, #4
    2a7a:	f85d fb04 	ldr.w	pc, [sp], #4
  runner->SetInput(input);
    2a7e:	4b0a      	ldr	r3, [pc, #40]	; (2aa8 <_Z14th_load_tensorv+0x6c>)
    2a80:	6818      	ldr	r0, [r3, #0]
    }
  }

  void SetInput(const inputT* custom_input) {
    // Populate input tensor with an image with no person.
    TfLiteTensor* input = interpreter_.input(0);
    2a82:	2100      	movs	r1, #0
    2a84:	300c      	adds	r0, #12
    2a86:	f004 fb77 	bl	7178 <_ZN6tflite16MicroInterpreter5inputEj>

namespace tflite {

template <typename T>
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
    2a8a:	4603      	mov	r3, r0
    2a8c:	b100      	cbz	r0, 2a90 <_Z14th_load_tensorv+0x54>
    2a8e:	6840      	ldr	r0, [r0, #4]
    inputT* input_buffer = tflite::GetTensorData<inputT>(input);
    int input_length = input->bytes / sizeof(inputT);
    2a90:	6999      	ldr	r1, [r3, #24]
    for (int i = 0; i < input_length; i++) {
    2a92:	2300      	movs	r3, #0
    2a94:	4299      	cmp	r1, r3
    2a96:	dded      	ble.n	2a74 <_Z14th_load_tensorv+0x38>
      input_buffer[i] = custom_input[i];
    2a98:	f91d 2003 	ldrsb.w	r2, [sp, r3]
    2a9c:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < input_length; i++) {
    2a9e:	3301      	adds	r3, #1
    2aa0:	e7f8      	b.n	2a94 <_Z14th_load_tensorv+0x58>
    2aa2:	bf00      	nop
    2aa4:	00068d9c 	.word	0x00068d9c
    2aa8:	200072c4 	.word	0x200072c4

00002aac <_Z10th_resultsv>:
void th_results() {
    2aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  th_printf("m-results-[");
    2aae:	481a      	ldr	r0, [pc, #104]	; (2b18 <_Z10th_resultsv+0x6c>)
    2ab0:	f00f f9b7 	bl	11e22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2ab4:	2400      	movs	r4, #0
    2ab6:	e01e      	b.n	2af6 <_Z10th_resultsv+0x4a>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2ab8:	571f      	ldrsb	r7, [r3, r4]
    2aba:	4d18      	ldr	r5, [pc, #96]	; (2b1c <_Z10th_resultsv+0x70>)
    2abc:	6828      	ldr	r0, [r5, #0]

  int input_size() { return interpreter_.input(0)->bytes / sizeof(inputT); }

  int output_size() { return interpreter_.output(0)->bytes / sizeof(outputT); }

  float output_scale() { return interpreter_.output(0)->params.scale; }
    2abe:	2100      	movs	r1, #0
    2ac0:	300c      	adds	r0, #12
    2ac2:	f004 fafd 	bl	70c0 <_ZN6tflite16MicroInterpreter6outputEj>
    2ac6:	68c6      	ldr	r6, [r0, #12]
    2ac8:	6828      	ldr	r0, [r5, #0]

  int output_zero_point() { return interpreter_.output(0)->params.zero_point; }
    2aca:	2100      	movs	r1, #0
    2acc:	300c      	adds	r0, #12
    2ace:	f004 faf7 	bl	70c0 <_ZN6tflite16MicroInterpreter6outputEj>
    2ad2:	6900      	ldr	r0, [r0, #16]

#include <limits.h>
#include <math.h>

inline float DequantizeInt8ToFloat(int8_t value, float scale, int zero_point) {
  return static_cast<float>(value - zero_point) * scale;
    2ad4:	1a38      	subs	r0, r7, r0
    2ad6:	f7fe f8c7 	bl	c68 <__aeabi_i2f>
    2ada:	4631      	mov	r1, r6
    2adc:	f7fe f918 	bl	d10 <__aeabi_fmul>
    th_printf("%0.3f", converted);
    2ae0:	f7fd fc9e 	bl	420 <__aeabi_f2d>
    2ae4:	4602      	mov	r2, r0
    2ae6:	460b      	mov	r3, r1
    2ae8:	480d      	ldr	r0, [pc, #52]	; (2b20 <_Z10th_resultsv+0x74>)
    2aea:	f00f f99a 	bl	11e22 <_Z9th_printfPKcz>
      th_printf(",");
    2aee:	480d      	ldr	r0, [pc, #52]	; (2b24 <_Z10th_resultsv+0x78>)
    2af0:	f00f f997 	bl	11e22 <_Z9th_printfPKcz>
  for (size_t i = 0; i < kCategoryCount; i++) {
    2af4:	3401      	adds	r4, #1
    2af6:	2c01      	cmp	r4, #1
    2af8:	d80a      	bhi.n	2b10 <_Z10th_resultsv+0x64>
        DequantizeInt8ToFloat(runner->GetOutput()[i], runner->output_scale(),
    2afa:	4b08      	ldr	r3, [pc, #32]	; (2b1c <_Z10th_resultsv+0x70>)
    2afc:	6818      	ldr	r0, [r3, #0]
    return tflite::GetTensorData<outputT>(interpreter_.output(0));
    2afe:	2100      	movs	r1, #0
    2b00:	300c      	adds	r0, #12
    2b02:	f004 fadd 	bl	70c0 <_ZN6tflite16MicroInterpreter6outputEj>
    2b06:	4603      	mov	r3, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	d0d5      	beq.n	2ab8 <_Z10th_resultsv+0xc>
    2b0c:	6843      	ldr	r3, [r0, #4]
    2b0e:	e7d3      	b.n	2ab8 <_Z10th_resultsv+0xc>
  th_printf("]\r\n");
    2b10:	4805      	ldr	r0, [pc, #20]	; (2b28 <_Z10th_resultsv+0x7c>)
    2b12:	f00f f986 	bl	11e22 <_Z9th_printfPKcz>
}
    2b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b18:	00068dc4 	.word	0x00068dc4
    2b1c:	200072c4 	.word	0x200072c4
    2b20:	00068dd0 	.word	0x00068dd0
    2b24:	00068dd8 	.word	0x00068dd8
    2b28:	00068c30 	.word	0x00068c30

00002b2c <_Z12th_timestampv>:

void th_serialport_initialize(void) {

}

void th_timestamp(void) {
    2b2c:	b538      	push	{r3, r4, r5, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b2e:	f013 fb0a 	bl	16146 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    2b32:	014b      	lsls	r3, r1, #5
    2b34:	0142      	lsls	r2, r0, #5
    2b36:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
    2b3a:	1a13      	subs	r3, r2, r0
    2b3c:	eb64 0201 	sbc.w	r2, r4, r1
    2b40:	0094      	lsls	r4, r2, #2
    2b42:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
    2b46:	009d      	lsls	r5, r3, #2
    2b48:	4622      	mov	r2, r4
    2b4a:	182b      	adds	r3, r5, r0
    2b4c:	eb41 0202 	adc.w	r2, r1, r2
    2b50:	00d1      	lsls	r1, r2, #3
    2b52:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    2b56:	00d8      	lsls	r0, r3, #3
    2b58:	0bc3      	lsrs	r3, r0, #15
    2b5a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
       //unsigned long microSeconds = (unsigned long) uptime_usec;
       /* USER CODE 2 BEGIN */
    //   microSeconds = us_ticker_read();
       /* USER CODE 2 END */
       /* This message must NOT be changed. */
       th_printf(EE_MSG_TIMESTAMP, microSeconds);
    2b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2b62:	fb01 f103 	mul.w	r1, r1, r3
    2b66:	4802      	ldr	r0, [pc, #8]	; (2b70 <_Z12th_timestampv+0x44>)
    2b68:	f00f f95b 	bl	11e22 <_Z9th_printfPKcz>
#endif
}
    2b6c:	bd38      	pop	{r3, r4, r5, pc}
    2b6e:	bf00      	nop
    2b70:	00068ddc 	.word	0x00068ddc

00002b74 <_Z23th_timestamp_initializev>:

void th_timestamp_initialize(void) {
    2b74:	b508      	push	{r3, lr}
  /* USER CODE 1 BEGIN */
  // Setting up BOTH perf and energy here
  /* USER CODE 1 END */
  /* This message must NOT be changed. */
  th_printf(EE_MSG_TIMESTAMP_MODE);
    2b76:	4803      	ldr	r0, [pc, #12]	; (2b84 <_Z23th_timestamp_initializev+0x10>)
    2b78:	f00f f953 	bl	11e22 <_Z9th_printfPKcz>
  /* Always call the timestamp on initialize so that the open-drain output
     is set to "1" (so that we catch a falling edge) */
  th_timestamp();
    2b7c:	f7ff ffd6 	bl	2b2c <_Z12th_timestampv>
}
    2b80:	bd08      	pop	{r3, pc}
    2b82:	bf00      	nop
    2b84:	00068dec 	.word	0x00068dec

00002b88 <_Z19th_final_initializev>:
void th_final_initialize(void) {
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	b08d      	sub	sp, #52	; 0x34
  static tflite::MicroMutableOpResolver<6> resolver;
    2b8c:	4bb0      	ldr	r3, [pc, #704]	; (2e50 <_Z19th_final_initializev+0x2c8>)
    2b8e:	681b      	ldr	r3, [r3, #0]
    2b90:	f013 0f01 	tst.w	r3, #1
    2b94:	d012      	beq.n	2bbc <_Z19th_final_initializev+0x34>
  resolver.AddFullyConnected();
    2b96:	a804      	add	r0, sp, #16
    2b98:	f009 fda4 	bl	c6e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
                             "AddBuiltin function.");
      }
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
    2b9c:	48ad      	ldr	r0, [pc, #692]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2b9e:	6803      	ldr	r3, [r0, #0]
    2ba0:	699b      	ldr	r3, [r3, #24]
    2ba2:	2109      	movs	r1, #9
    2ba4:	4798      	blx	r3
    2ba6:	b1d8      	cbz	r0, 2be0 <_Z19th_final_initializev+0x58>
      if (error_reporter_ != nullptr) {
    2ba8:	4baa      	ldr	r3, [pc, #680]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2baa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2bae:	2800      	cmp	r0, #0
    2bb0:	d03a      	beq.n	2c28 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2bb2:	2209      	movs	r2, #9
    2bb4:	49a8      	ldr	r1, [pc, #672]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2bb6:	f011 f8d6 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
    2bba:	e035      	b.n	2c28 <_Z19th_final_initializev+0xa0>
      : error_reporter_(error_reporter) {}
    2bbc:	48a5      	ldr	r0, [pc, #660]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2bbe:	4ba7      	ldr	r3, [pc, #668]	; (2e5c <_Z19th_final_initializev+0x2d4>)
    2bc0:	6003      	str	r3, [r0, #0]
    2bc2:	2300      	movs	r3, #0
    2bc4:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
    2bc8:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
    2bcc:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  static tflite::MicroMutableOpResolver<6> resolver;
    2bd0:	4b9f      	ldr	r3, [pc, #636]	; (2e50 <_Z19th_final_initializev+0x2c8>)
    2bd2:	2201      	movs	r2, #1
    2bd4:	601a      	str	r2, [r3, #0]
    2bd6:	4aa2      	ldr	r2, [pc, #648]	; (2e60 <_Z19th_final_initializev+0x2d8>)
    2bd8:	49a2      	ldr	r1, [pc, #648]	; (2e64 <_Z19th_final_initializev+0x2dc>)
    2bda:	f00f fdf1 	bl	127c0 <__aeabi_atexit>
    2bde:	e7da      	b.n	2b96 <_Z19th_final_initializev+0xe>
    }

    if (registrations_len_ >= tOpCount) {
    2be0:	4b9c      	ldr	r3, [pc, #624]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2be2:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2be6:	2e05      	cmp	r6, #5
    2be8:	d830      	bhi.n	2c4c <_Z19th_final_initializev+0xc4>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
    2bea:	4f9a      	ldr	r7, [pc, #616]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2bec:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2bf0:	f10c 0404 	add.w	r4, ip, #4
    2bf4:	ad04      	add	r5, sp, #16
    2bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2bfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    2c02:	2209      	movs	r2, #9
    2c04:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c08:	3601      	adds	r6, #1
    2c0a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4

    builtin_codes_[num_buitin_ops_] = op;
    2c0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2c12:	18f9      	adds	r1, r7, r3
    2c14:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c18:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2c1c:	4992      	ldr	r1, [pc, #584]	; (2e68 <_Z19th_final_initializev+0x2e0>)
    2c1e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2c22:	3301      	adds	r3, #1
    2c24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddConv2D();
    2c28:	a804      	add	r0, sp, #16
    2c2a:	f007 ffc7 	bl	abbc <_ZN6tflite16Register_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2c2e:	4889      	ldr	r0, [pc, #548]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2c30:	6803      	ldr	r3, [r0, #0]
    2c32:	699b      	ldr	r3, [r3, #24]
    2c34:	2103      	movs	r1, #3
    2c36:	4798      	blx	r3
    2c38:	b190      	cbz	r0, 2c60 <_Z19th_final_initializev+0xd8>
      if (error_reporter_ != nullptr) {
    2c3a:	4b86      	ldr	r3, [pc, #536]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2c3c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2c40:	b390      	cbz	r0, 2ca8 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c42:	2203      	movs	r2, #3
    2c44:	4984      	ldr	r1, [pc, #528]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2c46:	f011 f88e 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c4a:	e02d      	b.n	2ca8 <_Z19th_final_initializev+0x120>
      if (error_reporter_) {
    2c4c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2c50:	2800      	cmp	r0, #0
    2c52:	d0e9      	beq.n	2c28 <_Z19th_final_initializev+0xa0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2c54:	2306      	movs	r3, #6
    2c56:	2209      	movs	r2, #9
    2c58:	4984      	ldr	r1, [pc, #528]	; (2e6c <_Z19th_final_initializev+0x2e4>)
    2c5a:	f011 f884 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2c5e:	e7e3      	b.n	2c28 <_Z19th_final_initializev+0xa0>
    if (registrations_len_ >= tOpCount) {
    2c60:	4b7c      	ldr	r3, [pc, #496]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2c62:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2c66:	2e05      	cmp	r6, #5
    2c68:	d830      	bhi.n	2ccc <_Z19th_final_initializev+0x144>
    registrations_[registrations_len_] = registration;
    2c6a:	4f7a      	ldr	r7, [pc, #488]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2c6c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2c70:	f10c 0404 	add.w	r4, ip, #4
    2c74:	ad04      	add	r5, sp, #16
    2c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2c82:	2203      	movs	r2, #3
    2c84:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2c88:	3601      	adds	r6, #1
    2c8a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2c92:	18f9      	adds	r1, r7, r3
    2c94:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2c98:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2c9c:	4974      	ldr	r1, [pc, #464]	; (2e70 <_Z19th_final_initializev+0x2e8>)
    2c9e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2ca2:	3301      	adds	r3, #1
    2ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
    2ca8:	a804      	add	r0, sp, #16
    2caa:	f008 fe55 	bl	b958 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    if (FindOp(op) != nullptr) {
    2cae:	4869      	ldr	r0, [pc, #420]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2cb0:	6803      	ldr	r3, [r0, #0]
    2cb2:	699b      	ldr	r3, [r3, #24]
    2cb4:	2104      	movs	r1, #4
    2cb6:	4798      	blx	r3
    2cb8:	b190      	cbz	r0, 2ce0 <_Z19th_final_initializev+0x158>
      if (error_reporter_ != nullptr) {
    2cba:	4b66      	ldr	r3, [pc, #408]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2cbc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2cc0:	b390      	cbz	r0, 2d28 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cc2:	2204      	movs	r2, #4
    2cc4:	4964      	ldr	r1, [pc, #400]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2cc6:	f011 f84e 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cca:	e02d      	b.n	2d28 <_Z19th_final_initializev+0x1a0>
      if (error_reporter_) {
    2ccc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d0e9      	beq.n	2ca8 <_Z19th_final_initializev+0x120>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2cd4:	2306      	movs	r3, #6
    2cd6:	2203      	movs	r2, #3
    2cd8:	4964      	ldr	r1, [pc, #400]	; (2e6c <_Z19th_final_initializev+0x2e4>)
    2cda:	f011 f844 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2cde:	e7e3      	b.n	2ca8 <_Z19th_final_initializev+0x120>
    if (registrations_len_ >= tOpCount) {
    2ce0:	4b5c      	ldr	r3, [pc, #368]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2ce2:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2ce6:	2e05      	cmp	r6, #5
    2ce8:	d830      	bhi.n	2d4c <_Z19th_final_initializev+0x1c4>
    registrations_[registrations_len_] = registration;
    2cea:	4f5a      	ldr	r7, [pc, #360]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2cec:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2cf0:	f10c 0404 	add.w	r4, ip, #4
    2cf4:	ad04      	add	r5, sp, #16
    2cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2cfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d02:	2204      	movs	r2, #4
    2d04:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d08:	3601      	adds	r6, #1
    2d0a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2d0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2d12:	18f9      	adds	r1, r7, r3
    2d14:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d18:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2d1c:	4955      	ldr	r1, [pc, #340]	; (2e74 <_Z19th_final_initializev+0x2ec>)
    2d1e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2d22:	3301      	adds	r3, #1
    2d24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
    2d28:	a804      	add	r0, sp, #16
    2d2a:	f00a fef1 	bl	db10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    if (FindOp(op) != nullptr) {
    2d2e:	4849      	ldr	r0, [pc, #292]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2d30:	6803      	ldr	r3, [r0, #0]
    2d32:	699b      	ldr	r3, [r3, #24]
    2d34:	2116      	movs	r1, #22
    2d36:	4798      	blx	r3
    2d38:	b190      	cbz	r0, 2d60 <_Z19th_final_initializev+0x1d8>
      if (error_reporter_ != nullptr) {
    2d3a:	4b46      	ldr	r3, [pc, #280]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2d3c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d40:	b390      	cbz	r0, 2da8 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d42:	2216      	movs	r2, #22
    2d44:	4944      	ldr	r1, [pc, #272]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2d46:	f011 f80e 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d4a:	e02d      	b.n	2da8 <_Z19th_final_initializev+0x220>
      if (error_reporter_) {
    2d4c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2d50:	2800      	cmp	r0, #0
    2d52:	d0e9      	beq.n	2d28 <_Z19th_final_initializev+0x1a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2d54:	2306      	movs	r3, #6
    2d56:	2204      	movs	r2, #4
    2d58:	4944      	ldr	r1, [pc, #272]	; (2e6c <_Z19th_final_initializev+0x2e4>)
    2d5a:	f011 f804 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2d5e:	e7e3      	b.n	2d28 <_Z19th_final_initializev+0x1a0>
    if (registrations_len_ >= tOpCount) {
    2d60:	4b3c      	ldr	r3, [pc, #240]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2d62:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2d66:	2e05      	cmp	r6, #5
    2d68:	d830      	bhi.n	2dcc <_Z19th_final_initializev+0x244>
    registrations_[registrations_len_] = registration;
    2d6a:	4f3a      	ldr	r7, [pc, #232]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2d6c:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2d70:	f10c 0404 	add.w	r4, ip, #4
    2d74:	ad04      	add	r5, sp, #16
    2d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2d82:	2216      	movs	r2, #22
    2d84:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2d88:	3601      	adds	r6, #1
    2d8a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2d8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2d92:	18f9      	adds	r1, r7, r3
    2d94:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2d98:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2d9c:	4936      	ldr	r1, [pc, #216]	; (2e78 <_Z19th_final_initializev+0x2f0>)
    2d9e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2da2:	3301      	adds	r3, #1
    2da4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  resolver.AddSoftmax();
    2da8:	a804      	add	r0, sp, #16
    2daa:	f00a fec1 	bl	db30 <_ZN6tflite16Register_SOFTMAXEv>
    if (FindOp(op) != nullptr) {
    2dae:	4829      	ldr	r0, [pc, #164]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2db0:	6803      	ldr	r3, [r0, #0]
    2db2:	699b      	ldr	r3, [r3, #24]
    2db4:	2119      	movs	r1, #25
    2db6:	4798      	blx	r3
    2db8:	b190      	cbz	r0, 2de0 <_Z19th_final_initializev+0x258>
      if (error_reporter_ != nullptr) {
    2dba:	4b26      	ldr	r3, [pc, #152]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2dbc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2dc0:	b390      	cbz	r0, 2e28 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dc2:	2219      	movs	r2, #25
    2dc4:	4924      	ldr	r1, [pc, #144]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2dc6:	f010 ffce 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dca:	e02d      	b.n	2e28 <_Z19th_final_initializev+0x2a0>
      if (error_reporter_) {
    2dcc:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d0e9      	beq.n	2da8 <_Z19th_final_initializev+0x220>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2dd4:	2306      	movs	r3, #6
    2dd6:	2216      	movs	r2, #22
    2dd8:	4924      	ldr	r1, [pc, #144]	; (2e6c <_Z19th_final_initializev+0x2e4>)
    2dda:	f010 ffc4 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2dde:	e7e3      	b.n	2da8 <_Z19th_final_initializev+0x220>
    if (registrations_len_ >= tOpCount) {
    2de0:	4b1c      	ldr	r3, [pc, #112]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2de2:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2de6:	2e05      	cmp	r6, #5
    2de8:	d84a      	bhi.n	2e80 <_Z19th_final_initializev+0x2f8>
    registrations_[registrations_len_] = registration;
    2dea:	4f1a      	ldr	r7, [pc, #104]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2dec:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2df0:	f10c 0404 	add.w	r4, ip, #4
    2df4:	ad04      	add	r5, sp, #16
    2df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2dfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2e02:	2219      	movs	r2, #25
    2e04:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2e08:	3601      	adds	r6, #1
    2e0a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2e0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2e12:	18f9      	adds	r1, r7, r3
    2e14:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2e18:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2e1c:	4917      	ldr	r1, [pc, #92]	; (2e7c <_Z19th_final_initializev+0x2f4>)
    2e1e:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2e22:	3301      	adds	r3, #1
    2e24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                      tflite::Register_AVERAGE_POOL_2D(), ParsePool);
    2e28:	a804      	add	r0, sp, #16
    2e2a:	f00a fcf5 	bl	d818 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>
    if (FindOp(op) != nullptr) {
    2e2e:	4809      	ldr	r0, [pc, #36]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2e30:	6803      	ldr	r3, [r0, #0]
    2e32:	699b      	ldr	r3, [r3, #24]
    2e34:	2101      	movs	r1, #1
    2e36:	4798      	blx	r3
    2e38:	b360      	cbz	r0, 2e94 <_Z19th_final_initializev+0x30c>
      if (error_reporter_ != nullptr) {
    2e3a:	4b06      	ldr	r3, [pc, #24]	; (2e54 <_Z19th_final_initializev+0x2cc>)
    2e3c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2e40:	2800      	cmp	r0, #0
    2e42:	d04b      	beq.n	2edc <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e44:	2201      	movs	r2, #1
    2e46:	4904      	ldr	r1, [pc, #16]	; (2e58 <_Z19th_final_initializev+0x2d0>)
    2e48:	f010 ff8d 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e4c:	e046      	b.n	2edc <_Z19th_final_initializev+0x354>
    2e4e:	bf00      	nop
    2e50:	2000712c 	.word	0x2000712c
    2e54:	200071d4 	.word	0x200071d4
    2e58:	00068e0c 	.word	0x00068e0c
    2e5c:	00068ea8 	.word	0x00068ea8
    2e60:	2002032c 	.word	0x2002032c
    2e64:	00011d85 	.word	0x00011d85
    2e68:	0000a011 	.word	0x0000a011
    2e6c:	00068e5c 	.word	0x00068e5c
    2e70:	00009e15 	.word	0x00009e15
    2e74:	0000a1c1 	.word	0x0000a1c1
    2e78:	00009af5 	.word	0x00009af5
    2e7c:	0000a3f5 	.word	0x0000a3f5
      if (error_reporter_) {
    2e80:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2e84:	2800      	cmp	r0, #0
    2e86:	d0cf      	beq.n	2e28 <_Z19th_final_initializev+0x2a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2e88:	2306      	movs	r3, #6
    2e8a:	2219      	movs	r2, #25
    2e8c:	492f      	ldr	r1, [pc, #188]	; (2f4c <_Z19th_final_initializev+0x3c4>)
    2e8e:	f010 ff6a 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2e92:	e7c9      	b.n	2e28 <_Z19th_final_initializev+0x2a0>
    if (registrations_len_ >= tOpCount) {
    2e94:	4b2e      	ldr	r3, [pc, #184]	; (2f50 <_Z19th_final_initializev+0x3c8>)
    2e96:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
    2e9a:	2e05      	cmp	r6, #5
    2e9c:	d828      	bhi.n	2ef0 <_Z19th_final_initializev+0x368>
    registrations_[registrations_len_] = registration;
    2e9e:	4f2c      	ldr	r7, [pc, #176]	; (2f50 <_Z19th_final_initializev+0x3c8>)
    2ea0:	eb07 1c46 	add.w	ip, r7, r6, lsl #5
    2ea4:	f10c 0404 	add.w	r4, ip, #4
    2ea8:	ad04      	add	r5, sp, #16
    2eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2eae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
    2eb6:	2201      	movs	r2, #1
    2eb8:	f8cc 2018 	str.w	r2, [ip, #24]
    registrations_len_++;
    2ebc:	4416      	add	r6, r2
    2ebe:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
    builtin_codes_[num_buitin_ops_] = op;
    2ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2ec6:	18f9      	adds	r1, r7, r3
    2ec8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
    2ecc:	f103 0234 	add.w	r2, r3, #52	; 0x34
    2ed0:	4920      	ldr	r1, [pc, #128]	; (2f54 <_Z19th_final_initializev+0x3cc>)
    2ed2:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
    num_buitin_ops_++;
    2ed6:	3301      	adds	r3, #1
    2ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2edc:	4b1e      	ldr	r3, [pc, #120]	; (2f58 <_Z19th_final_initializev+0x3d0>)
    2ede:	681b      	ldr	r3, [r3, #0]
    2ee0:	f013 0f01 	tst.w	r3, #1
    2ee4:	d00e      	beq.n	2f04 <_Z19th_final_initializev+0x37c>
  runner = &model_runner;
    2ee6:	4b1d      	ldr	r3, [pc, #116]	; (2f5c <_Z19th_final_initializev+0x3d4>)
    2ee8:	4a1d      	ldr	r2, [pc, #116]	; (2f60 <_Z19th_final_initializev+0x3d8>)
    2eea:	601a      	str	r2, [r3, #0]
}
    2eec:	b00d      	add	sp, #52	; 0x34
    2eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (error_reporter_) {
    2ef0:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d0f1      	beq.n	2edc <_Z19th_final_initializev+0x354>
        TF_LITE_REPORT_ERROR(error_reporter_,
    2ef8:	2306      	movs	r3, #6
    2efa:	2201      	movs	r2, #1
    2efc:	4913      	ldr	r1, [pc, #76]	; (2f4c <_Z19th_final_initializev+0x3c4>)
    2efe:	f010 ff32 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    2f02:	e7eb      	b.n	2edc <_Z19th_final_initializev+0x354>
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
  return flatbuffers::GetRoot<tflite::Model>(buf);
    2f04:	4817      	ldr	r0, [pc, #92]	; (2f64 <_Z19th_final_initializev+0x3dc>)
    2f06:	f00e ffce 	bl	11ea6 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
    2f0a:	4601      	mov	r1, r0
                     reporter_) {
    2f0c:	4c14      	ldr	r4, [pc, #80]	; (2f60 <_Z19th_final_initializev+0x3d8>)
    2f0e:	6020      	str	r0, [r4, #0]
namespace tflite {

// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
    2f10:	4623      	mov	r3, r4
    2f12:	4a15      	ldr	r2, [pc, #84]	; (2f68 <_Z19th_final_initializev+0x3e0>)
    2f14:	f843 2f04 	str.w	r2, [r3, #4]!
    2f18:	60a3      	str	r3, [r4, #8]
    2f1a:	f104 050c 	add.w	r5, r4, #12
    2f1e:	2200      	movs	r2, #0
    2f20:	9202      	str	r2, [sp, #8]
    2f22:	9301      	str	r3, [sp, #4]
    2f24:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
    2f28:	9300      	str	r3, [sp, #0]
    2f2a:	4b10      	ldr	r3, [pc, #64]	; (2f6c <_Z19th_final_initializev+0x3e4>)
    2f2c:	4a08      	ldr	r2, [pc, #32]	; (2f50 <_Z19th_final_initializev+0x3c8>)
    2f2e:	4628      	mov	r0, r5
    2f30:	f010 fb7e 	bl	13630 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
    interpreter_.AllocateTensors();
    2f34:	4628      	mov	r0, r5
    2f36:	f004 fb89 	bl	764c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
      g_person_detect_model_data, resolver, tensor_arena, kTensorArenaSize);
    2f3a:	4b07      	ldr	r3, [pc, #28]	; (2f58 <_Z19th_final_initializev+0x3d0>)
    2f3c:	2201      	movs	r2, #1
    2f3e:	601a      	str	r2, [r3, #0]
    2f40:	4a0b      	ldr	r2, [pc, #44]	; (2f70 <_Z19th_final_initializev+0x3e8>)
    2f42:	490c      	ldr	r1, [pc, #48]	; (2f74 <_Z19th_final_initializev+0x3ec>)
    2f44:	4620      	mov	r0, r4
    2f46:	f00f fc3b 	bl	127c0 <__aeabi_atexit>
    2f4a:	e7cc      	b.n	2ee6 <_Z19th_final_initializev+0x35e>
    2f4c:	00068e5c 	.word	0x00068e5c
    2f50:	200071d4 	.word	0x200071d4
    2f54:	00009c1d 	.word	0x00009c1d
    2f58:	20007128 	.word	0x20007128
    2f5c:	200072c4 	.word	0x200072c4
    2f60:	20007130 	.word	0x20007130
    2f64:	000171f8 	.word	0x000171f8
    2f68:	00069240 	.word	0x00069240
    2f6c:	200072c8 	.word	0x200072c8
    2f70:	2002032c 	.word	0x2002032c
    2f74:	00011d87 	.word	0x00011d87

00002f78 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2f78:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2f7a:	680b      	ldr	r3, [r1, #0]
    2f7c:	3301      	adds	r3, #1
    2f7e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2f80:	4b01      	ldr	r3, [pc, #4]	; (2f88 <char_out+0x10>)
    2f82:	681b      	ldr	r3, [r3, #0]
    2f84:	4798      	blx	r3
}
    2f86:	bd08      	pop	{r3, pc}
    2f88:	20000000 	.word	0x20000000

00002f8c <__printk_hook_install>:
	_char_out = fn;
    2f8c:	4b01      	ldr	r3, [pc, #4]	; (2f94 <__printk_hook_install+0x8>)
    2f8e:	6018      	str	r0, [r3, #0]
}
    2f90:	4770      	bx	lr
    2f92:	bf00      	nop
    2f94:	20000000 	.word	0x20000000

00002f98 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2f98:	b500      	push	{lr}
    2f9a:	b083      	sub	sp, #12
    2f9c:	4602      	mov	r2, r0
    2f9e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2fa0:	2100      	movs	r1, #0
    2fa2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2fa4:	a901      	add	r1, sp, #4
    2fa6:	4803      	ldr	r0, [pc, #12]	; (2fb4 <vprintk+0x1c>)
    2fa8:	f000 f94e 	bl	3248 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2fac:	b003      	add	sp, #12
    2fae:	f85d fb04 	ldr.w	pc, [sp], #4
    2fb2:	bf00      	nop
    2fb4:	00002f79 	.word	0x00002f79

00002fb8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    2fb8:	b510      	push	{r4, lr}
    2fba:	b084      	sub	sp, #16
    2fbc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    2fbe:	9001      	str	r0, [sp, #4]
    2fc0:	9102      	str	r1, [sp, #8]
    2fc2:	2100      	movs	r1, #0
    2fc4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    2fc6:	a901      	add	r1, sp, #4
    2fc8:	4805      	ldr	r0, [pc, #20]	; (2fe0 <vsnprintk+0x28>)
    2fca:	f000 f93d 	bl	3248 <cbvprintf>

	if (ctx.count < ctx.max) {
    2fce:	9b03      	ldr	r3, [sp, #12]
    2fd0:	9a02      	ldr	r2, [sp, #8]
    2fd2:	4293      	cmp	r3, r2
    2fd4:	da01      	bge.n	2fda <vsnprintk+0x22>
		str[ctx.count] = '\0';
    2fd6:	2200      	movs	r2, #0
    2fd8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2fda:	9803      	ldr	r0, [sp, #12]
    2fdc:	b004      	add	sp, #16
    2fde:	bd10      	pop	{r4, pc}
    2fe0:	00011efb 	.word	0x00011efb

00002fe4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fe8:	b083      	sub	sp, #12
    2fea:	4604      	mov	r4, r0
    2fec:	4608      	mov	r0, r1
    2fee:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2ff0:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2ff2:	f013 0f08 	tst.w	r3, #8
    2ff6:	d105      	bne.n	3004 <process_event+0x20>
    2ff8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2ffc:	2300      	movs	r3, #0
    2ffe:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3000:	9301      	str	r3, [sp, #4]
}
    3002:	e069      	b.n	30d8 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    3004:	2901      	cmp	r1, #1
    3006:	d009      	beq.n	301c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3008:	f043 0320 	orr.w	r3, r3, #32
    300c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    300e:	f385 8811 	msr	BASEPRI, r5
    3012:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3016:	b003      	add	sp, #12
    3018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    301c:	f043 0310 	orr.w	r3, r3, #16
    3020:	83a3      	strh	r3, [r4, #28]
    3022:	e7f4      	b.n	300e <process_event+0x2a>
			evt = process_recheck(mgr);
    3024:	4620      	mov	r0, r4
    3026:	f00e ffc3 	bl	11fb0 <process_recheck>
    302a:	e057      	b.n	30dc <process_event+0xf8>
			res = mgr->last_res;
    302c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3030:	464a      	mov	r2, r9
    3032:	4669      	mov	r1, sp
    3034:	4620      	mov	r0, r4
    3036:	f00e ffd4 	bl	11fe2 <process_complete>
		onoff_transition_fn transit = NULL;
    303a:	2700      	movs	r7, #0
    303c:	e05a      	b.n	30f4 <process_event+0x110>
			transit = mgr->transitions->start;
    303e:	6923      	ldr	r3, [r4, #16]
    3040:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3042:	2106      	movs	r1, #6
    3044:	4620      	mov	r0, r4
    3046:	f00e ff8c 	bl	11f62 <set_state>
		res = 0;
    304a:	f04f 0900 	mov.w	r9, #0
    304e:	e051      	b.n	30f4 <process_event+0x110>
			transit = mgr->transitions->stop;
    3050:	6923      	ldr	r3, [r4, #16]
    3052:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3054:	2104      	movs	r1, #4
    3056:	4620      	mov	r0, r4
    3058:	f00e ff83 	bl	11f62 <set_state>
		res = 0;
    305c:	f04f 0900 	mov.w	r9, #0
    3060:	e048      	b.n	30f4 <process_event+0x110>
			transit = mgr->transitions->reset;
    3062:	6923      	ldr	r3, [r4, #16]
    3064:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    3066:	2105      	movs	r1, #5
    3068:	4620      	mov	r0, r4
    306a:	f00e ff7a 	bl	11f62 <set_state>
		res = 0;
    306e:	f04f 0900 	mov.w	r9, #0
    3072:	e03f      	b.n	30f4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3074:	2200      	movs	r2, #0
    3076:	e046      	b.n	3106 <process_event+0x122>
    3078:	2200      	movs	r2, #0
    307a:	e044      	b.n	3106 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    307c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3080:	83a3      	strh	r3, [r4, #28]
    3082:	f385 8811 	msr	BASEPRI, r5
    3086:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    308a:	2900      	cmp	r1, #0
    308c:	d144      	bne.n	3118 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    308e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3090:	b12b      	cbz	r3, 309e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    3092:	464b      	mov	r3, r9
    3094:	4642      	mov	r2, r8
    3096:	4669      	mov	r1, sp
    3098:	4620      	mov	r0, r4
    309a:	f00f f818 	bl	120ce <notify_all>
			if (transit != NULL) {
    309e:	b117      	cbz	r7, 30a6 <process_event+0xc2>
				transit(mgr, transition_complete);
    30a0:	4925      	ldr	r1, [pc, #148]	; (3138 <process_event+0x154>)
    30a2:	4620      	mov	r0, r4
    30a4:	47b8      	blx	r7
	__asm__ volatile(
    30a6:	f04f 0320 	mov.w	r3, #32
    30aa:	f3ef 8511 	mrs	r5, BASEPRI
    30ae:	f383 8812 	msr	BASEPRI_MAX, r3
    30b2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    30b6:	8ba3      	ldrh	r3, [r4, #28]
    30b8:	f023 0308 	bic.w	r3, r3, #8
    30bc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    30be:	8ba3      	ldrh	r3, [r4, #28]
    30c0:	f013 0f10 	tst.w	r3, #16
    30c4:	d02e      	beq.n	3124 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    30c6:	f023 0310 	bic.w	r3, r3, #16
    30ca:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    30cc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    30ce:	8ba6      	ldrh	r6, [r4, #28]
    30d0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    30d4:	2800      	cmp	r0, #0
    30d6:	d09a      	beq.n	300e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    30d8:	2802      	cmp	r0, #2
    30da:	d0a3      	beq.n	3024 <process_event+0x40>
		if (evt == EVT_NOP) {
    30dc:	2800      	cmp	r0, #0
    30de:	d096      	beq.n	300e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    30e0:	2801      	cmp	r0, #1
    30e2:	d0a3      	beq.n	302c <process_event+0x48>
		} else if (evt == EVT_START) {
    30e4:	2803      	cmp	r0, #3
    30e6:	d0aa      	beq.n	303e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    30e8:	2804      	cmp	r0, #4
    30ea:	d0b1      	beq.n	3050 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    30ec:	2805      	cmp	r0, #5
    30ee:	d0b8      	beq.n	3062 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    30f0:	2700      	movs	r7, #0
		res = 0;
    30f2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    30f4:	8ba3      	ldrh	r3, [r4, #28]
    30f6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    30fa:	45b0      	cmp	r8, r6
    30fc:	d0ba      	beq.n	3074 <process_event+0x90>
    30fe:	68a2      	ldr	r2, [r4, #8]
    3100:	2a00      	cmp	r2, #0
    3102:	d0b9      	beq.n	3078 <process_event+0x94>
    3104:	2201      	movs	r2, #1
		if (do_monitors
    3106:	4611      	mov	r1, r2
    3108:	2a00      	cmp	r2, #0
    310a:	d1b7      	bne.n	307c <process_event+0x98>
    310c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    310e:	2a00      	cmp	r2, #0
    3110:	d1b4      	bne.n	307c <process_event+0x98>
		    || (transit != NULL)) {
    3112:	2f00      	cmp	r7, #0
    3114:	d1b2      	bne.n	307c <process_event+0x98>
    3116:	e7d2      	b.n	30be <process_event+0xda>
				notify_monitors(mgr, state, res);
    3118:	464a      	mov	r2, r9
    311a:	4641      	mov	r1, r8
    311c:	4620      	mov	r0, r4
    311e:	f00e ff28 	bl	11f72 <notify_monitors>
    3122:	e7b4      	b.n	308e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3124:	f013 0f20 	tst.w	r3, #32
    3128:	d004      	beq.n	3134 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    312a:	f023 0320 	bic.w	r3, r3, #32
    312e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3130:	2002      	movs	r0, #2
    3132:	e7cc      	b.n	30ce <process_event+0xea>
		evt = EVT_NOP;
    3134:	2000      	movs	r0, #0
    3136:	e7ca      	b.n	30ce <process_event+0xea>
    3138:	000120fd 	.word	0x000120fd

0000313c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    313c:	b410      	push	{r4}
    313e:	4604      	mov	r4, r0
	const char *sp = *str;
    3140:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3142:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3144:	7813      	ldrb	r3, [r2, #0]
    3146:	4907      	ldr	r1, [pc, #28]	; (3164 <extract_decimal+0x28>)
    3148:	5c59      	ldrb	r1, [r3, r1]
    314a:	f011 0f04 	tst.w	r1, #4
    314e:	d006      	beq.n	315e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
    3150:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3154:	3201      	adds	r2, #1
    3156:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    315a:	3830      	subs	r0, #48	; 0x30
    315c:	e7f2      	b.n	3144 <extract_decimal+0x8>
	}
	*str = sp;
    315e:	6022      	str	r2, [r4, #0]
	return val;
}
    3160:	bc10      	pop	{r4}
    3162:	4770      	bx	lr
    3164:	0006bd59 	.word	0x0006bd59

00003168 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    316c:	b083      	sub	sp, #12
    316e:	4604      	mov	r4, r0
    3170:	460d      	mov	r5, r1
    3172:	9201      	str	r2, [sp, #4]
    3174:	469a      	mov	sl, r3
    3176:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    317a:	78d3      	ldrb	r3, [r2, #3]
    317c:	4a31      	ldr	r2, [pc, #196]	; (3244 <encode_uint+0xdc>)
    317e:	f813 b002 	ldrb.w	fp, [r3, r2]
    3182:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3186:	2b6f      	cmp	r3, #111	; 0x6f
    3188:	d00f      	beq.n	31aa <encode_uint+0x42>
    318a:	d906      	bls.n	319a <encode_uint+0x32>
    318c:	2b70      	cmp	r3, #112	; 0x70
    318e:	d00f      	beq.n	31b0 <encode_uint+0x48>
    3190:	2b78      	cmp	r3, #120	; 0x78
    3192:	d110      	bne.n	31b6 <encode_uint+0x4e>
		return 16;
    3194:	f04f 0910 	mov.w	r9, #16
    3198:	e023      	b.n	31e2 <encode_uint+0x7a>
	switch (specifier) {
    319a:	2b58      	cmp	r3, #88	; 0x58
    319c:	d002      	beq.n	31a4 <encode_uint+0x3c>
    319e:	f04f 090a 	mov.w	r9, #10
    31a2:	e01e      	b.n	31e2 <encode_uint+0x7a>
		return 16;
    31a4:	f04f 0910 	mov.w	r9, #16
    31a8:	e01b      	b.n	31e2 <encode_uint+0x7a>
		return 8;
    31aa:	f04f 0908 	mov.w	r9, #8
    31ae:	e018      	b.n	31e2 <encode_uint+0x7a>
		return 16;
    31b0:	f04f 0910 	mov.w	r9, #16
    31b4:	e015      	b.n	31e2 <encode_uint+0x7a>
	switch (specifier) {
    31b6:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    31ba:	e012      	b.n	31e2 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    31bc:	b2d2      	uxtb	r2, r2
    31be:	3230      	adds	r2, #48	; 0x30
    31c0:	b2d2      	uxtb	r2, r2
    31c2:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    31c6:	4632      	mov	r2, r6
    31c8:	463b      	mov	r3, r7
    31ca:	4620      	mov	r0, r4
    31cc:	4629      	mov	r1, r5
    31ce:	f7fd ff8b 	bl	10e8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    31d2:	42bd      	cmp	r5, r7
    31d4:	bf08      	it	eq
    31d6:	42b4      	cmpeq	r4, r6
    31d8:	d318      	bcc.n	320c <encode_uint+0xa4>
    31da:	45d0      	cmp	r8, sl
    31dc:	d916      	bls.n	320c <encode_uint+0xa4>
		value /= radix;
    31de:	4604      	mov	r4, r0
    31e0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    31e2:	464e      	mov	r6, r9
    31e4:	2700      	movs	r7, #0
    31e6:	464a      	mov	r2, r9
    31e8:	463b      	mov	r3, r7
    31ea:	4620      	mov	r0, r4
    31ec:	4629      	mov	r1, r5
    31ee:	f7fd ff7b 	bl	10e8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    31f2:	2a09      	cmp	r2, #9
    31f4:	d9e2      	bls.n	31bc <encode_uint+0x54>
    31f6:	f1bb 0f01 	cmp.w	fp, #1
    31fa:	d003      	beq.n	3204 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    31fc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    31fe:	3257      	adds	r2, #87	; 0x57
    3200:	b2d2      	uxtb	r2, r2
    3202:	e7de      	b.n	31c2 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3204:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3206:	3237      	adds	r2, #55	; 0x37
    3208:	b2d2      	uxtb	r2, r2
    320a:	e7da      	b.n	31c2 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    320c:	9b01      	ldr	r3, [sp, #4]
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	f013 0f20 	tst.w	r3, #32
    3214:	d005      	beq.n	3222 <encode_uint+0xba>
		if (radix == 8) {
    3216:	f1b9 0f08 	cmp.w	r9, #8
    321a:	d006      	beq.n	322a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    321c:	f1b9 0f10 	cmp.w	r9, #16
    3220:	d009      	beq.n	3236 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    3222:	4640      	mov	r0, r8
    3224:	b003      	add	sp, #12
    3226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    322a:	9a01      	ldr	r2, [sp, #4]
    322c:	7893      	ldrb	r3, [r2, #2]
    322e:	f043 0308 	orr.w	r3, r3, #8
    3232:	7093      	strb	r3, [r2, #2]
    3234:	e7f5      	b.n	3222 <encode_uint+0xba>
			conv->altform_0c = true;
    3236:	9a01      	ldr	r2, [sp, #4]
    3238:	7893      	ldrb	r3, [r2, #2]
    323a:	f043 0310 	orr.w	r3, r3, #16
    323e:	7093      	strb	r3, [r2, #2]
    3240:	e7ef      	b.n	3222 <encode_uint+0xba>
    3242:	bf00      	nop
    3244:	0006bd59 	.word	0x0006bd59

00003248 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    324c:	b093      	sub	sp, #76	; 0x4c
    324e:	4606      	mov	r6, r0
    3250:	460d      	mov	r5, r1
    3252:	4692      	mov	sl, r2
    3254:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3256:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3258:	f89a 0000 	ldrb.w	r0, [sl]
    325c:	2800      	cmp	r0, #0
    325e:	f000 84d6 	beq.w	3c0e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x176>
		if (*fp != '%') {
    3262:	2825      	cmp	r0, #37	; 0x25
    3264:	d008      	beq.n	3278 <cbvprintf+0x30>
			OUTC(*fp++);
    3266:	f10a 0a01 	add.w	sl, sl, #1
    326a:	4629      	mov	r1, r5
    326c:	47b0      	blx	r6
    326e:	2800      	cmp	r0, #0
    3270:	f2c0 84ce 	blt.w	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3274:	3401      	adds	r4, #1
			continue;
    3276:	e7ef      	b.n	3258 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    3278:	2300      	movs	r3, #0
    327a:	9306      	str	r3, [sp, #24]
    327c:	9307      	str	r3, [sp, #28]
    327e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    3280:	9308      	str	r3, [sp, #32]
    3282:	9309      	str	r3, [sp, #36]	; 0x24
    3284:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    3286:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    328a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    328e:	2b25      	cmp	r3, #37	; 0x25
    3290:	d001      	beq.n	3296 <cbvprintf+0x4e>
	bool loop = true;
    3292:	2701      	movs	r7, #1
    3294:	e02c      	b.n	32f0 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    3296:	f10a 0802 	add.w	r8, sl, #2
    329a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    329e:	e1a8      	b.n	35f2 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    32a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32a4:	f043 0304 	orr.w	r3, r3, #4
    32a8:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    32ac:	b1ff      	cbz	r7, 32ee <cbvprintf+0xa6>
			++sp;
    32ae:	f108 0801 	add.w	r8, r8, #1
    32b2:	e01c      	b.n	32ee <cbvprintf+0xa6>
			conv->flag_plus = true;
    32b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32b8:	f043 0308 	orr.w	r3, r3, #8
    32bc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32c0:	e7f4      	b.n	32ac <cbvprintf+0x64>
			conv->flag_space = true;
    32c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32c6:	f043 0310 	orr.w	r3, r3, #16
    32ca:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32ce:	e7ed      	b.n	32ac <cbvprintf+0x64>
			conv->flag_hash = true;
    32d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32d4:	f043 0320 	orr.w	r3, r3, #32
    32d8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32dc:	e7e6      	b.n	32ac <cbvprintf+0x64>
			conv->flag_zero = true;
    32de:	f89d 3020 	ldrb.w	r3, [sp, #32]
    32e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32e6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    32ea:	e7df      	b.n	32ac <cbvprintf+0x64>
		switch (*sp) {
    32ec:	2700      	movs	r7, #0
	} while (loop);
    32ee:	b34f      	cbz	r7, 3344 <cbvprintf+0xfc>
		switch (*sp) {
    32f0:	f898 3000 	ldrb.w	r3, [r8]
    32f4:	3b20      	subs	r3, #32
    32f6:	2b10      	cmp	r3, #16
    32f8:	d8f8      	bhi.n	32ec <cbvprintf+0xa4>
    32fa:	a201      	add	r2, pc, #4	; (adr r2, 3300 <cbvprintf+0xb8>)
    32fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3300:	000032c3 	.word	0x000032c3
    3304:	000032ed 	.word	0x000032ed
    3308:	000032ed 	.word	0x000032ed
    330c:	000032d1 	.word	0x000032d1
    3310:	000032ed 	.word	0x000032ed
    3314:	000032ed 	.word	0x000032ed
    3318:	000032ed 	.word	0x000032ed
    331c:	000032ed 	.word	0x000032ed
    3320:	000032ed 	.word	0x000032ed
    3324:	000032ed 	.word	0x000032ed
    3328:	000032ed 	.word	0x000032ed
    332c:	000032b5 	.word	0x000032b5
    3330:	000032ed 	.word	0x000032ed
    3334:	000032a1 	.word	0x000032a1
    3338:	000032ed 	.word	0x000032ed
    333c:	000032ed 	.word	0x000032ed
    3340:	000032df 	.word	0x000032df
	if (conv->flag_zero && conv->flag_dash) {
    3344:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3348:	f003 0344 	and.w	r3, r3, #68	; 0x44
    334c:	2b44      	cmp	r3, #68	; 0x44
    334e:	d06d      	beq.n	342c <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    3350:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    3354:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    335c:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    3360:	f898 3000 	ldrb.w	r3, [r8]
    3364:	2b2a      	cmp	r3, #42	; 0x2a
    3366:	d068      	beq.n	343a <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    3368:	a805      	add	r0, sp, #20
    336a:	f7ff fee7 	bl	313c <extract_decimal>
	if (sp != wp) {
    336e:	9b05      	ldr	r3, [sp, #20]
    3370:	4598      	cmp	r8, r3
    3372:	d012      	beq.n	339a <cbvprintf+0x152>
		conv->width_present = true;
    3374:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    337c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    3380:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    3382:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    3386:	2800      	cmp	r0, #0
    3388:	db60      	blt.n	344c <cbvprintf+0x204>
    338a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    338c:	4313      	orrs	r3, r2
    338e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3392:	f363 0241 	bfi	r2, r3, #1, #1
    3396:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    339a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    339c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    339e:	781b      	ldrb	r3, [r3, #0]
    33a0:	2b2e      	cmp	r3, #46	; 0x2e
    33a2:	bf14      	ite	ne
    33a4:	2300      	movne	r3, #0
    33a6:	2301      	moveq	r3, #1
    33a8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    33ac:	f363 0241 	bfi	r2, r3, #1, #1
    33b0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    33b4:	2b00      	cmp	r3, #0
    33b6:	d04b      	beq.n	3450 <cbvprintf+0x208>
	++sp;
    33b8:	9b05      	ldr	r3, [sp, #20]
    33ba:	1c5a      	adds	r2, r3, #1
    33bc:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    33be:	785b      	ldrb	r3, [r3, #1]
    33c0:	2b2a      	cmp	r3, #42	; 0x2a
    33c2:	d048      	beq.n	3456 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    33c4:	a805      	add	r0, sp, #20
    33c6:	f7ff feb9 	bl	313c <extract_decimal>
	conv->prec_value = prec;
    33ca:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    33cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    33d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    33d4:	2800      	cmp	r0, #0
    33d6:	db47      	blt.n	3468 <cbvprintf+0x220>
    33d8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    33da:	4313      	orrs	r3, r2
    33dc:	f89d 2020 	ldrb.w	r2, [sp, #32]
    33e0:	f363 0241 	bfi	r2, r3, #1, #1
    33e4:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    33e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    33ec:	f898 3000 	ldrb.w	r3, [r8]
    33f0:	3b4c      	subs	r3, #76	; 0x4c
    33f2:	2b2e      	cmp	r3, #46	; 0x2e
    33f4:	f200 80dc 	bhi.w	35b0 <cbvprintf+0x368>
    33f8:	e8df f003 	tbb	[pc, r3]
    33fc:	dadadaca 	.word	0xdadadaca
    3400:	dadadada 	.word	0xdadadada
    3404:	dadadada 	.word	0xdadadada
    3408:	dadadada 	.word	0xdadadada
    340c:	dadadada 	.word	0xdadadada
    3410:	dadadada 	.word	0xdadadada
    3414:	dadadada 	.word	0xdadadada
    3418:	da6ada38 	.word	0xda6ada38
    341c:	dadada51 	.word	0xdadada51
    3420:	dadadada 	.word	0xdadadada
    3424:	dadadac0 	.word	0xdadadac0
    3428:	dada      	.short	0xdada
    342a:	b6          	.byte	0xb6
    342b:	00          	.byte	0x00
		conv->flag_zero = false;
    342c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3430:	f36f 1386 	bfc	r3, #6, #1
    3434:	f88d 3020 	strb.w	r3, [sp, #32]
    3438:	e78a      	b.n	3350 <cbvprintf+0x108>
		conv->width_star = true;
    343a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    343e:	f043 0301 	orr.w	r3, r3, #1
    3442:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3446:	4643      	mov	r3, r8
    3448:	3301      	adds	r3, #1
    344a:	e7a7      	b.n	339c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    344c:	2201      	movs	r2, #1
    344e:	e79d      	b.n	338c <cbvprintf+0x144>
		return sp;
    3450:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3454:	e7ca      	b.n	33ec <cbvprintf+0x1a4>
		conv->prec_star = true;
    3456:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    345a:	f043 0304 	orr.w	r3, r3, #4
    345e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    3462:	f102 0801 	add.w	r8, r2, #1
    3466:	e7c1      	b.n	33ec <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    3468:	2201      	movs	r2, #1
    346a:	e7b6      	b.n	33da <cbvprintf+0x192>
		if (*++sp == 'h') {
    346c:	f108 0201 	add.w	r2, r8, #1
    3470:	f898 3001 	ldrb.w	r3, [r8, #1]
    3474:	2b68      	cmp	r3, #104	; 0x68
    3476:	d008      	beq.n	348a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    3478:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    347c:	2102      	movs	r1, #2
    347e:	f361 03c6 	bfi	r3, r1, #3, #4
    3482:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    3486:	4690      	mov	r8, r2
    3488:	e02b      	b.n	34e2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    348a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    348e:	2201      	movs	r2, #1
    3490:	f362 03c6 	bfi	r3, r2, #3, #4
    3494:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    3498:	f108 0802 	add.w	r8, r8, #2
    349c:	e021      	b.n	34e2 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    349e:	f108 0201 	add.w	r2, r8, #1
    34a2:	f898 3001 	ldrb.w	r3, [r8, #1]
    34a6:	2b6c      	cmp	r3, #108	; 0x6c
    34a8:	d008      	beq.n	34bc <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    34aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34ae:	2103      	movs	r1, #3
    34b0:	f361 03c6 	bfi	r3, r1, #3, #4
    34b4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    34b8:	4690      	mov	r8, r2
    34ba:	e012      	b.n	34e2 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    34bc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34c0:	2204      	movs	r2, #4
    34c2:	f362 03c6 	bfi	r3, r2, #3, #4
    34c6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    34ca:	f108 0802 	add.w	r8, r8, #2
    34ce:	e008      	b.n	34e2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    34d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    34d4:	2205      	movs	r2, #5
    34d6:	f362 03c6 	bfi	r3, r2, #3, #4
    34da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    34de:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    34e2:	f818 3b01 	ldrb.w	r3, [r8], #1
    34e6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    34ea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    34ee:	2a37      	cmp	r2, #55	; 0x37
    34f0:	f200 8150 	bhi.w	3794 <cbvprintf+0x54c>
    34f4:	e8df f012 	tbh	[pc, r2, lsl #1]
    34f8:	014e0126 	.word	0x014e0126
    34fc:	014e014e 	.word	0x014e014e
    3500:	01260126 	.word	0x01260126
    3504:	014e0126 	.word	0x014e0126
    3508:	014e014e 	.word	0x014e014e
    350c:	014e014e 	.word	0x014e014e
    3510:	014e014e 	.word	0x014e014e
    3514:	014e014e 	.word	0x014e014e
    3518:	014e014e 	.word	0x014e014e
    351c:	014e014e 	.word	0x014e014e
    3520:	014e014e 	.word	0x014e014e
    3524:	0113014e 	.word	0x0113014e
    3528:	014e014e 	.word	0x014e014e
    352c:	014e014e 	.word	0x014e014e
    3530:	014e014e 	.word	0x014e014e
    3534:	014e014e 	.word	0x014e014e
    3538:	014e0126 	.word	0x014e0126
    353c:	00630113 	.word	0x00630113
    3540:	01260126 	.word	0x01260126
    3544:	014e0126 	.word	0x014e0126
    3548:	014e0063 	.word	0x014e0063
    354c:	014e014e 	.word	0x014e014e
    3550:	012f014e 	.word	0x012f014e
    3554:	013f0113 	.word	0x013f0113
    3558:	014e014e 	.word	0x014e014e
    355c:	014e013f 	.word	0x014e013f
    3560:	014e0113 	.word	0x014e0113
    3564:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    3568:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    356c:	2206      	movs	r2, #6
    356e:	f362 03c6 	bfi	r3, r2, #3, #4
    3572:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    3576:	f108 0801 	add.w	r8, r8, #1
		break;
    357a:	e7b2      	b.n	34e2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    357c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3580:	2207      	movs	r2, #7
    3582:	f362 03c6 	bfi	r3, r2, #3, #4
    3586:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    358a:	f108 0801 	add.w	r8, r8, #1
		break;
    358e:	e7a8      	b.n	34e2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    3590:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3594:	2208      	movs	r2, #8
    3596:	f362 03c6 	bfi	r3, r2, #3, #4
    359a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    359e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    35a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    35a6:	f043 0302 	orr.w	r3, r3, #2
    35aa:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    35ae:	e798      	b.n	34e2 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    35b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35b4:	f36f 03c6 	bfc	r3, #3, #4
    35b8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    35bc:	e791      	b.n	34e2 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    35be:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    35c2:	2101      	movs	r1, #1
    35c4:	f361 0202 	bfi	r2, r1, #0, #3
    35c8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    35cc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    35d0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    35d4:	2a40      	cmp	r2, #64	; 0x40
    35d6:	f000 80aa 	beq.w	372e <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    35da:	2b63      	cmp	r3, #99	; 0x63
    35dc:	f000 80ae 	beq.w	373c <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    35e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    35e4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    35e8:	4317      	orrs	r7, r2
    35ea:	f367 0341 	bfi	r3, r7, #1, #1
    35ee:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    35f2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    35f6:	f013 0f01 	tst.w	r3, #1
    35fa:	f000 80da 	beq.w	37b2 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	1d1a      	adds	r2, r3, #4
    3602:	9203      	str	r2, [sp, #12]
    3604:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    3606:	2f00      	cmp	r7, #0
    3608:	f2c0 80cb 	blt.w	37a2 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    360c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3610:	f013 0f04 	tst.w	r3, #4
    3614:	f000 80df 	beq.w	37d6 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    3618:	9b03      	ldr	r3, [sp, #12]
    361a:	1d1a      	adds	r2, r3, #4
    361c:	9203      	str	r2, [sp, #12]
    361e:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    3622:	f1bb 0f00 	cmp.w	fp, #0
    3626:	f2c0 80cd 	blt.w	37c4 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    362a:	2300      	movs	r3, #0
    362c:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    362e:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    3630:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3634:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3638:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    363c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3640:	2b01      	cmp	r3, #1
    3642:	f000 80d1 	beq.w	37e8 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3646:	2b02      	cmp	r3, #2
    3648:	f000 8116 	beq.w	3878 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    364c:	2b04      	cmp	r3, #4
    364e:	f000 8167 	beq.w	3920 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3652:	2b03      	cmp	r3, #3
    3654:	f000 817e 	beq.w	3954 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    3658:	f89d 9020 	ldrb.w	r9, [sp, #32]
    365c:	f019 0303 	ands.w	r3, r9, #3
    3660:	9302      	str	r3, [sp, #8]
    3662:	f040 817d 	bne.w	3960 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    3666:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    366a:	3b25      	subs	r3, #37	; 0x25
    366c:	2b53      	cmp	r3, #83	; 0x53
    366e:	f200 8233 	bhi.w	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3672:	e8df f013 	tbh	[pc, r3, lsl #1]
    3676:	0181      	.short	0x0181
    3678:	02310231 	.word	0x02310231
    367c:	02310231 	.word	0x02310231
    3680:	02310231 	.word	0x02310231
    3684:	02310231 	.word	0x02310231
    3688:	02310231 	.word	0x02310231
    368c:	02310231 	.word	0x02310231
    3690:	02310231 	.word	0x02310231
    3694:	02310231 	.word	0x02310231
    3698:	02310231 	.word	0x02310231
    369c:	02310231 	.word	0x02310231
    36a0:	02310231 	.word	0x02310231
    36a4:	02310231 	.word	0x02310231
    36a8:	02310231 	.word	0x02310231
    36ac:	02310231 	.word	0x02310231
    36b0:	02310231 	.word	0x02310231
    36b4:	02310231 	.word	0x02310231
    36b8:	02310231 	.word	0x02310231
    36bc:	02310231 	.word	0x02310231
    36c0:	02310231 	.word	0x02310231
    36c4:	02310231 	.word	0x02310231
    36c8:	02310231 	.word	0x02310231
    36cc:	02310231 	.word	0x02310231
    36d0:	02310231 	.word	0x02310231
    36d4:	02310231 	.word	0x02310231
    36d8:	02310231 	.word	0x02310231
    36dc:	023101c7 	.word	0x023101c7
    36e0:	02310231 	.word	0x02310231
    36e4:	02310231 	.word	0x02310231
    36e8:	02310231 	.word	0x02310231
    36ec:	02310231 	.word	0x02310231
    36f0:	01a10231 	.word	0x01a10231
    36f4:	023101ab 	.word	0x023101ab
    36f8:	02310231 	.word	0x02310231
    36fc:	01ab0231 	.word	0x01ab0231
    3700:	02310231 	.word	0x02310231
    3704:	02310231 	.word	0x02310231
    3708:	01c70208 	.word	0x01c70208
    370c:	023101ea 	.word	0x023101ea
    3710:	018f0231 	.word	0x018f0231
    3714:	01c70231 	.word	0x01c70231
    3718:	02310231 	.word	0x02310231
    371c:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    371e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3722:	2102      	movs	r1, #2
    3724:	f361 0202 	bfi	r2, r1, #0, #3
    3728:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    372c:	e74e      	b.n	35cc <cbvprintf+0x384>
			conv->invalid = true;
    372e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3732:	f041 0101 	orr.w	r1, r1, #1
    3736:	f88d 1020 	strb.w	r1, [sp, #32]
    373a:	e74e      	b.n	35da <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    373c:	1e17      	subs	r7, r2, #0
    373e:	bf18      	it	ne
    3740:	2701      	movne	r7, #1
    3742:	e74d      	b.n	35e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    3744:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3748:	2204      	movs	r2, #4
    374a:	f362 0302 	bfi	r3, r2, #0, #3
    374e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    3752:	2701      	movs	r7, #1
			break;
    3754:	e744      	b.n	35e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3756:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    375a:	2203      	movs	r2, #3
    375c:	f362 0302 	bfi	r3, r2, #0, #3
    3760:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    3764:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3768:	f003 0378 	and.w	r3, r3, #120	; 0x78
    376c:	2b40      	cmp	r3, #64	; 0x40
    376e:	f47f af37 	bne.w	35e0 <cbvprintf+0x398>
			unsupported = true;
    3772:	2701      	movs	r7, #1
    3774:	e734      	b.n	35e0 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    3776:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    377a:	2203      	movs	r2, #3
    377c:	f362 0302 	bfi	r3, r2, #0, #3
    3780:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    3784:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3788:	f013 0f78 	tst.w	r3, #120	; 0x78
    378c:	f43f af28 	beq.w	35e0 <cbvprintf+0x398>
			unsupported = true;
    3790:	2701      	movs	r7, #1
    3792:	e725      	b.n	35e0 <cbvprintf+0x398>
		conv->invalid = true;
    3794:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3798:	f043 0301 	orr.w	r3, r3, #1
    379c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    37a0:	e71e      	b.n	35e0 <cbvprintf+0x398>
				conv->flag_dash = true;
    37a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    37a6:	f043 0304 	orr.w	r3, r3, #4
    37aa:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    37ae:	427f      	negs	r7, r7
    37b0:	e72c      	b.n	360c <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    37b2:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    37b6:	2b00      	cmp	r3, #0
    37b8:	db02      	blt.n	37c0 <cbvprintf+0x578>
		int width = -1;
    37ba:	f04f 37ff 	mov.w	r7, #4294967295
    37be:	e725      	b.n	360c <cbvprintf+0x3c4>
			width = conv->width_value;
    37c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    37c2:	e723      	b.n	360c <cbvprintf+0x3c4>
				conv->prec_present = false;
    37c4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    37c8:	f36f 0341 	bfc	r3, #1, #1
    37cc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    37d0:	f04f 3bff 	mov.w	fp, #4294967295
    37d4:	e729      	b.n	362a <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    37d6:	f013 0f02 	tst.w	r3, #2
    37da:	d002      	beq.n	37e2 <cbvprintf+0x59a>
			precision = conv->prec_value;
    37dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    37e0:	e723      	b.n	362a <cbvprintf+0x3e2>
		int precision = -1;
    37e2:	f04f 3bff 	mov.w	fp, #4294967295
    37e6:	e720      	b.n	362a <cbvprintf+0x3e2>
			switch (length_mod) {
    37e8:	1ecb      	subs	r3, r1, #3
    37ea:	2b04      	cmp	r3, #4
    37ec:	d804      	bhi.n	37f8 <cbvprintf+0x5b0>
    37ee:	e8df f003 	tbb	[pc, r3]
    37f2:	1d0b      	.short	0x1d0b
    37f4:	3529      	.short	0x3529
    37f6:	35          	.byte	0x35
    37f7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    37f8:	9b03      	ldr	r3, [sp, #12]
    37fa:	1d1a      	adds	r2, r3, #4
    37fc:	9203      	str	r2, [sp, #12]
    37fe:	681a      	ldr	r2, [r3, #0]
    3800:	17d3      	asrs	r3, r2, #31
    3802:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3806:	e006      	b.n	3816 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    3808:	9b03      	ldr	r3, [sp, #12]
    380a:	1d1a      	adds	r2, r3, #4
    380c:	9203      	str	r2, [sp, #12]
    380e:	681a      	ldr	r2, [r3, #0]
    3810:	17d3      	asrs	r3, r2, #31
    3812:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    3816:	2901      	cmp	r1, #1
    3818:	d028      	beq.n	386c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    381a:	2902      	cmp	r1, #2
    381c:	f47f af1c 	bne.w	3658 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    3820:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    3824:	17d3      	asrs	r3, r2, #31
    3826:	e9cd 2306 	strd	r2, r3, [sp, #24]
    382a:	e715      	b.n	3658 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    382c:	9b03      	ldr	r3, [sp, #12]
    382e:	3307      	adds	r3, #7
    3830:	f023 0307 	bic.w	r3, r3, #7
    3834:	f103 0208 	add.w	r2, r3, #8
    3838:	9203      	str	r2, [sp, #12]
    383a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    383e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3842:	e7e8      	b.n	3816 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    3844:	9b03      	ldr	r3, [sp, #12]
    3846:	3307      	adds	r3, #7
    3848:	f023 0307 	bic.w	r3, r3, #7
    384c:	f103 0208 	add.w	r2, r3, #8
    3850:	9203      	str	r2, [sp, #12]
    3852:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    3856:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    385a:	e7dc      	b.n	3816 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    385c:	9b03      	ldr	r3, [sp, #12]
    385e:	1d1a      	adds	r2, r3, #4
    3860:	9203      	str	r2, [sp, #12]
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	17d3      	asrs	r3, r2, #31
				value->sint =
    3866:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    386a:	e7d4      	b.n	3816 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    386c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3870:	9306      	str	r3, [sp, #24]
    3872:	2300      	movs	r3, #0
    3874:	9307      	str	r3, [sp, #28]
    3876:	e6ef      	b.n	3658 <cbvprintf+0x410>
			switch (length_mod) {
    3878:	1ecb      	subs	r3, r1, #3
    387a:	2b04      	cmp	r3, #4
    387c:	d804      	bhi.n	3888 <cbvprintf+0x640>
    387e:	e8df f003 	tbb	[pc, r3]
    3882:	1f0b      	.short	0x1f0b
    3884:	4135      	.short	0x4135
    3886:	41          	.byte	0x41
    3887:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    3888:	9b03      	ldr	r3, [sp, #12]
    388a:	1d1a      	adds	r2, r3, #4
    388c:	9203      	str	r2, [sp, #12]
    388e:	681b      	ldr	r3, [r3, #0]
    3890:	9306      	str	r3, [sp, #24]
    3892:	2300      	movs	r3, #0
    3894:	9307      	str	r3, [sp, #28]
				break;
    3896:	e01e      	b.n	38d6 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    3898:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    389c:	2b63      	cmp	r3, #99	; 0x63
    389e:	d007      	beq.n	38b0 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    38a0:	9b03      	ldr	r3, [sp, #12]
    38a2:	1d1a      	adds	r2, r3, #4
    38a4:	9203      	str	r2, [sp, #12]
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	9306      	str	r3, [sp, #24]
    38aa:	2300      	movs	r3, #0
    38ac:	9307      	str	r3, [sp, #28]
    38ae:	e012      	b.n	38d6 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    38b0:	9b03      	ldr	r3, [sp, #12]
    38b2:	1d1a      	adds	r2, r3, #4
    38b4:	9203      	str	r2, [sp, #12]
    38b6:	681b      	ldr	r3, [r3, #0]
    38b8:	9306      	str	r3, [sp, #24]
    38ba:	2300      	movs	r3, #0
    38bc:	9307      	str	r3, [sp, #28]
    38be:	e00a      	b.n	38d6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    38c0:	9b03      	ldr	r3, [sp, #12]
    38c2:	3307      	adds	r3, #7
    38c4:	f023 0307 	bic.w	r3, r3, #7
    38c8:	f103 0208 	add.w	r2, r3, #8
    38cc:	9203      	str	r2, [sp, #12]
    38ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    38d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    38d6:	2901      	cmp	r1, #1
    38d8:	d01c      	beq.n	3914 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    38da:	2902      	cmp	r1, #2
    38dc:	f47f aebc 	bne.w	3658 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    38e0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    38e4:	9306      	str	r3, [sp, #24]
    38e6:	2300      	movs	r3, #0
    38e8:	9307      	str	r3, [sp, #28]
    38ea:	e6b5      	b.n	3658 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    38ec:	9b03      	ldr	r3, [sp, #12]
    38ee:	3307      	adds	r3, #7
    38f0:	f023 0307 	bic.w	r3, r3, #7
    38f4:	f103 0208 	add.w	r2, r3, #8
    38f8:	9203      	str	r2, [sp, #12]
    38fa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    38fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    3902:	e7e8      	b.n	38d6 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    3904:	9b03      	ldr	r3, [sp, #12]
    3906:	1d1a      	adds	r2, r3, #4
    3908:	9203      	str	r2, [sp, #12]
    390a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    390c:	9306      	str	r3, [sp, #24]
    390e:	2300      	movs	r3, #0
    3910:	9307      	str	r3, [sp, #28]
				break;
    3912:	e7e0      	b.n	38d6 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    3914:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3918:	9306      	str	r3, [sp, #24]
    391a:	2300      	movs	r3, #0
    391c:	9307      	str	r3, [sp, #28]
    391e:	e69b      	b.n	3658 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    3920:	2908      	cmp	r1, #8
    3922:	d00b      	beq.n	393c <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    3924:	9b03      	ldr	r3, [sp, #12]
    3926:	3307      	adds	r3, #7
    3928:	f023 0307 	bic.w	r3, r3, #7
    392c:	f103 0208 	add.w	r2, r3, #8
    3930:	9203      	str	r2, [sp, #12]
    3932:	e9d3 2300 	ldrd	r2, r3, [r3]
    3936:	e9cd 2306 	strd	r2, r3, [sp, #24]
    393a:	e68d      	b.n	3658 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    393c:	9b03      	ldr	r3, [sp, #12]
    393e:	3307      	adds	r3, #7
    3940:	f023 0307 	bic.w	r3, r3, #7
    3944:	f103 0208 	add.w	r2, r3, #8
    3948:	9203      	str	r2, [sp, #12]
    394a:	e9d3 2300 	ldrd	r2, r3, [r3]
    394e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3952:	e681      	b.n	3658 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    3954:	9b03      	ldr	r3, [sp, #12]
    3956:	1d1a      	adds	r2, r3, #4
    3958:	9203      	str	r2, [sp, #12]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	9306      	str	r3, [sp, #24]
    395e:	e67b      	b.n	3658 <cbvprintf+0x410>
			OUTS(sp, fp);
    3960:	4643      	mov	r3, r8
    3962:	4652      	mov	r2, sl
    3964:	4629      	mov	r1, r5
    3966:	4630      	mov	r0, r6
    3968:	f00e fd4e 	bl	12408 <outs>
    396c:	2800      	cmp	r0, #0
    396e:	f2c0 814f 	blt.w	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3972:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    3974:	46c2      	mov	sl, r8
			continue;
    3976:	e46f      	b.n	3258 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    3978:	4629      	mov	r1, r5
    397a:	2025      	movs	r0, #37	; 0x25
    397c:	47b0      	blx	r6
    397e:	2800      	cmp	r0, #0
    3980:	f2c0 8146 	blt.w	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3984:	3401      	adds	r4, #1
		char sign = 0;
    3986:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    398a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    398e:	f04f 0a00 	mov.w	sl, #0
			break;
    3992:	e0a7      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		case 's': {
			bps = (const char *)value->ptr;
    3994:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    3998:	f1bb 0f00 	cmp.w	fp, #0
    399c:	db08      	blt.n	39b0 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    399e:	4659      	mov	r1, fp
    39a0:	4650      	mov	r0, sl
    39a2:	f012 fdac 	bl	164fe <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    39a6:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    39aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    39ae:	e099      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
				len = strlen(bps);
    39b0:	4650      	mov	r0, sl
    39b2:	f7fd fd8f 	bl	14d4 <strlen>
    39b6:	e7f6      	b.n	39a6 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    39b8:	9b06      	ldr	r3, [sp, #24]
    39ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    39be:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    39c2:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    39c6:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    39ca:	e08b      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    39cc:	f019 0f08 	tst.w	r9, #8
    39d0:	d105      	bne.n	39de <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    39d2:	f019 0910 	ands.w	r9, r9, #16
    39d6:	d004      	beq.n	39e2 <cbvprintf+0x79a>
				sign = ' ';
    39d8:	f04f 0920 	mov.w	r9, #32
    39dc:	e001      	b.n	39e2 <cbvprintf+0x79a>
				sign = '+';
    39de:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    39e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    39e6:	2a00      	cmp	r2, #0
    39e8:	f173 0100 	sbcs.w	r1, r3, #0
    39ec:	db02      	blt.n	39f4 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    39ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    39f2:	e009      	b.n	3a08 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    39f4:	4252      	negs	r2, r2
    39f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    39fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    39fe:	f04f 092d 	mov.w	r9, #45	; 0x2d
    3a02:	e001      	b.n	3a08 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    3a04:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    3a08:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a0c:	9300      	str	r3, [sp, #0]
    3a0e:	ab0c      	add	r3, sp, #48	; 0x30
    3a10:	aa08      	add	r2, sp, #32
    3a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3a16:	f7ff fba7 	bl	3168 <encode_uint>
    3a1a:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    3a1c:	f1bb 0f00 	cmp.w	fp, #0
    3a20:	f2c0 8090 	blt.w	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
				size_t len = bpe - bps;
    3a24:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a28:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    3a2c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    3a30:	f36f 1286 	bfc	r2, #6, #1
    3a34:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3a38:	459b      	cmp	fp, r3
    3a3a:	f240 8086 	bls.w	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
					conv->pad0_value = precision - (int)len;
    3a3e:	ebab 0303 	sub.w	r3, fp, r3
    3a42:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    3a44:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3a48:	e04c      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3a4a:	9806      	ldr	r0, [sp, #24]
    3a4c:	b930      	cbnz	r0, 3a5c <cbvprintf+0x814>
		char sign = 0;
    3a4e:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3a52:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3c18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x180>
			bps = "(nil)";
    3a56:	f1ab 0a05 	sub.w	sl, fp, #5
    3a5a:	e043      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a5c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    3a60:	9300      	str	r3, [sp, #0]
    3a62:	ab0c      	add	r3, sp, #48	; 0x30
    3a64:	aa08      	add	r2, sp, #32
    3a66:	2100      	movs	r1, #0
    3a68:	f7ff fb7e 	bl	3168 <encode_uint>
    3a6c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    3a6e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3a72:	f043 0310 	orr.w	r3, r3, #16
    3a76:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    3a7a:	2378      	movs	r3, #120	; 0x78
    3a7c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    3a80:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    3a84:	e7ca      	b.n	3a1c <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3a86:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    3a88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    3a8c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    3a90:	2b07      	cmp	r3, #7
    3a92:	d806      	bhi.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a94:	e8df f003 	tbb	[pc, r3]
    3a98:	100e0c04 	.word	0x100e0c04
    3a9c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    3aa0:	6014      	str	r4, [r2, #0]
		char sign = 0;
    3aa2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    3aa6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    3aaa:	f04f 0a00 	mov.w	sl, #0
}
    3aae:	e019      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		*(signed char *)dp = (signed char)count;
    3ab0:	7014      	strb	r4, [r2, #0]
		break;
    3ab2:	e7f6      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(short *)dp = (short)count;
    3ab4:	8014      	strh	r4, [r2, #0]
		break;
    3ab6:	e7f4      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(long *)dp = (long)count;
    3ab8:	6014      	str	r4, [r2, #0]
		break;
    3aba:	e7f2      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(long long *)dp = (long long)count;
    3abc:	4620      	mov	r0, r4
    3abe:	17e1      	asrs	r1, r4, #31
    3ac0:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3ac4:	e7ed      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(intmax_t *)dp = (intmax_t)count;
    3ac6:	4620      	mov	r0, r4
    3ac8:	17e1      	asrs	r1, r4, #31
    3aca:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    3ace:	e7e8      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(size_t *)dp = (size_t)count;
    3ad0:	6014      	str	r4, [r2, #0]
		break;
    3ad2:	e7e6      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3ad4:	6014      	str	r4, [r2, #0]
		break;
    3ad6:	e7e4      	b.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		switch (conv->specifier) {
    3ad8:	f8dd 9008 	ldr.w	r9, [sp, #8]
    3adc:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3ae0:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3ae4:	f1ba 0f00 	cmp.w	sl, #0
    3ae8:	f000 808e 	beq.w	3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3aec:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    3af0:	f1b9 0f00 	cmp.w	r9, #0
    3af4:	d000      	beq.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
			nj_len += 1U;
    3af6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    3af8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    3afc:	f011 0f10 	tst.w	r1, #16
    3b00:	d026      	beq.n	3b50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb8>
			nj_len += 2U;
    3b02:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    3b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b06:	4413      	add	r3, r2
		if (conv->pad_fp) {
    3b08:	f011 0f40 	tst.w	r1, #64	; 0x40
    3b0c:	d001      	beq.n	3b12 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7a>
			nj_len += conv->pad0_pre_exp;
    3b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b10:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3b12:	2f00      	cmp	r7, #0
    3b14:	dd32      	ble.n	3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
			width -= (int)nj_len;
    3b16:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    3b18:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3b1c:	f013 0f04 	tst.w	r3, #4
    3b20:	d12c      	bne.n	3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3b22:	f013 0f40 	tst.w	r3, #64	; 0x40
    3b26:	d018      	beq.n	3b5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc2>
					if (sign != 0) {
    3b28:	f1b9 0f00 	cmp.w	r9, #0
    3b2c:	d018      	beq.n	3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>
						OUTC(sign);
    3b2e:	4629      	mov	r1, r5
    3b30:	4648      	mov	r0, r9
    3b32:	47b0      	blx	r6
    3b34:	2800      	cmp	r0, #0
    3b36:	db6b      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b38:	3401      	adds	r4, #1
						sign = 0;
    3b3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    3b3e:	2330      	movs	r3, #48	; 0x30
    3b40:	9302      	str	r3, [sp, #8]
    3b42:	e00f      	b.n	3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>
		const char *bpe = buf + sizeof(buf);
    3b44:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b48:	e7cc      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
    3b4a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    3b4e:	e7c9      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		} else if (conv->altform_0) {
    3b50:	f011 0f08 	tst.w	r1, #8
    3b54:	d0d6      	beq.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
			nj_len += 1U;
    3b56:	3201      	adds	r2, #1
    3b58:	e7d4      	b.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
				char pad = ' ';
    3b5a:	2320      	movs	r3, #32
    3b5c:	9302      	str	r3, [sp, #8]
    3b5e:	e001      	b.n	3b64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xcc>
					pad = '0';
    3b60:	2330      	movs	r3, #48	; 0x30
    3b62:	9302      	str	r3, [sp, #8]
    3b64:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    3b66:	1e5f      	subs	r7, r3, #1
    3b68:	2b00      	cmp	r3, #0
    3b6a:	dd07      	ble.n	3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
					OUTC(pad);
    3b6c:	4629      	mov	r1, r5
    3b6e:	9802      	ldr	r0, [sp, #8]
    3b70:	47b0      	blx	r6
    3b72:	2800      	cmp	r0, #0
    3b74:	db4c      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b76:	3401      	adds	r4, #1
				while (width-- > 0) {
    3b78:	463b      	mov	r3, r7
    3b7a:	e7f4      	b.n	3b66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xce>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3b7c:	f1b9 0f00 	cmp.w	r9, #0
    3b80:	d005      	beq.n	3b8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf6>
			OUTC(sign);
    3b82:	4629      	mov	r1, r5
    3b84:	4648      	mov	r0, r9
    3b86:	47b0      	blx	r6
    3b88:	2800      	cmp	r0, #0
    3b8a:	db41      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3b8c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3b8e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3b92:	f3c3 1200 	ubfx	r2, r3, #4, #1
    3b96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3b9a:	4313      	orrs	r3, r2
    3b9c:	d005      	beq.n	3baa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x112>
				OUTC('0');
    3b9e:	4629      	mov	r1, r5
    3ba0:	2030      	movs	r0, #48	; 0x30
    3ba2:	47b0      	blx	r6
    3ba4:	2800      	cmp	r0, #0
    3ba6:	db33      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3ba8:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    3baa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    3bae:	f013 0f10 	tst.w	r3, #16
    3bb2:	d006      	beq.n	3bc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12a>
				OUTC(conv->specifier);
    3bb4:	4629      	mov	r1, r5
    3bb6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    3bba:	47b0      	blx	r6
    3bbc:	2800      	cmp	r0, #0
    3bbe:	db27      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3bc0:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    3bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    3bc4:	f103 39ff 	add.w	r9, r3, #4294967295
    3bc8:	2b00      	cmp	r3, #0
    3bca:	dd07      	ble.n	3bdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x144>
				OUTC('0');
    3bcc:	4629      	mov	r1, r5
    3bce:	2030      	movs	r0, #48	; 0x30
    3bd0:	47b0      	blx	r6
    3bd2:	2800      	cmp	r0, #0
    3bd4:	db1c      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3bd6:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    3bd8:	464b      	mov	r3, r9
    3bda:	e7f3      	b.n	3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>
			}

			OUTS(bps, bpe);
    3bdc:	465b      	mov	r3, fp
    3bde:	4652      	mov	r2, sl
    3be0:	4629      	mov	r1, r5
    3be2:	4630      	mov	r0, r6
    3be4:	f00e fc10 	bl	12408 <outs>
    3be8:	2800      	cmp	r0, #0
    3bea:	db11      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3bec:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    3bee:	2f00      	cmp	r7, #0
    3bf0:	dd07      	ble.n	3c02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16a>
			OUTC(' ');
    3bf2:	4629      	mov	r1, r5
    3bf4:	2020      	movs	r0, #32
    3bf6:	47b0      	blx	r6
    3bf8:	2800      	cmp	r0, #0
    3bfa:	db09      	blt.n	3c10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x178>
    3bfc:	3401      	adds	r4, #1
			--width;
    3bfe:	3f01      	subs	r7, #1
    3c00:	e7f5      	b.n	3bee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x156>
		fp = extract_conversion(conv, sp);
    3c02:	46c2      	mov	sl, r8
    3c04:	f7ff bb28 	b.w	3258 <cbvprintf+0x10>
    3c08:	46c2      	mov	sl, r8
    3c0a:	f7ff bb25 	b.w	3258 <cbvprintf+0x10>
		}
	}

	return count;
    3c0e:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    3c10:	b013      	add	sp, #76	; 0x4c
    3c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c16:	bf00      	nop
    3c18:	00068ed1 	.word	0x00068ed1

00003c1c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    3c1c:	b508      	push	{r3, lr}
    3c1e:	4604      	mov	r4, r0
    3c20:	f04f 0220 	mov.w	r2, #32
    3c24:	f3ef 8311 	mrs	r3, BASEPRI
    3c28:	f382 8812 	msr	BASEPRI_MAX, r2
    3c2c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    3c30:	f00f f9f5 	bl	1301e <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    3c34:	4620      	mov	r0, r4
    3c36:	f000 fd07 	bl	4648 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3c3a:	4803      	ldr	r0, [pc, #12]	; (3c48 <sys_reboot+0x2c>)
    3c3c:	f00e f975 	bl	11f2a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3c40:	f000 fa78 	bl	4134 <arch_cpu_idle>
    3c44:	e7fc      	b.n	3c40 <sys_reboot+0x24>
    3c46:	bf00      	nop
    3c48:	00068ed4 	.word	0x00068ed4

00003c4c <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    3c4c:	b410      	push	{r4}
    3c4e:	f04f 0320 	mov.w	r3, #32
    3c52:	f3ef 8411 	mrs	r4, BASEPRI
    3c56:	f383 8812 	msr	BASEPRI_MAX, r3
    3c5a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    3c5e:	2101      	movs	r1, #1
    3c60:	4b12      	ldr	r3, [pc, #72]	; (3cac <nordicsemi_nrf53_init+0x60>)
    3c62:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    3c66:	4a12      	ldr	r2, [pc, #72]	; (3cb0 <nordicsemi_nrf53_init+0x64>)
    3c68:	2302      	movs	r3, #2
    3c6a:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3c6e:	4811      	ldr	r0, [pc, #68]	; (3cb4 <nordicsemi_nrf53_init+0x68>)
    3c70:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3c74:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3c78:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3c7c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    3c80:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    3c84:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    3c88:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3c8c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    3c90:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    3c94:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    3c98:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    3c9c:	f384 8811 	msr	BASEPRI, r4
    3ca0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3ca4:	2000      	movs	r0, #0
    3ca6:	bc10      	pop	{r4}
    3ca8:	4770      	bx	lr
    3caa:	bf00      	nop
    3cac:	50001000 	.word	0x50001000
    3cb0:	50004000 	.word	0x50004000
    3cb4:	50842500 	.word	0x50842500

00003cb8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3cb8:	b170      	cbz	r0, 3cd8 <arch_busy_wait+0x20>

void arch_busy_wait(uint32_t time_us)
{
    3cba:	b508      	push	{r3, lr}
    3cbc:	4602      	mov	r2, r0

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    3cbe:	4b07      	ldr	r3, [pc, #28]	; (3cdc <arch_busy_wait+0x24>)
    3cc0:	681b      	ldr	r3, [r3, #0]
    3cc2:	4807      	ldr	r0, [pc, #28]	; (3ce0 <arch_busy_wait+0x28>)
    3cc4:	fba0 1303 	umull	r1, r3, r0, r3
    3cc8:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    3cca:	fb03 f002 	mul.w	r0, r3, r2
    3cce:	4b05      	ldr	r3, [pc, #20]	; (3ce4 <arch_busy_wait+0x2c>)
    3cd0:	f043 0301 	orr.w	r3, r3, #1
    3cd4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3cd6:	bd08      	pop	{r3, pc}
    3cd8:	4770      	bx	lr
    3cda:	bf00      	nop
    3cdc:	20000060 	.word	0x20000060
    3ce0:	431bde83 	.word	0x431bde83
    3ce4:	000171f0 	.word	0x000171f0

00003ce8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3ce8:	b084      	sub	sp, #16
    3cea:	ab04      	add	r3, sp, #16
    3cec:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3cf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3cf4:	2b06      	cmp	r3, #6
    3cf6:	d001      	beq.n	3cfc <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3cf8:	b004      	add	sp, #16
    3cfa:	4770      	bx	lr
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    3cfc:	4b03      	ldr	r3, [pc, #12]	; (3d0c <pm_power_state_set+0x24>)
    3cfe:	2201      	movs	r2, #1
    3d00:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d04:	f3bf 8f4f 	dsb	sy
        __WFE();
    3d08:	bf20      	wfe
    while (true)
    3d0a:	e7fd      	b.n	3d08 <pm_power_state_set+0x20>
    3d0c:	50004000 	.word	0x50004000

00003d10 <tty_init>:
	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
	if (!uart_dev) {
    3d10:	b1c1      	cbz	r1, 3d44 <tty_init+0x34>
{
    3d12:	b508      	push	{r3, lr}
    3d14:	4602      	mov	r2, r0
    3d16:	4608      	mov	r0, r1
		return -ENODEV;
	}

	tty->uart_dev = uart_dev;
    3d18:	6011      	str	r1, [r2, #0]

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    3d1a:	2300      	movs	r3, #0
    3d1c:	6153      	str	r3, [r2, #20]
	tty->rx_ringbuf_sz = 0U;
    3d1e:	6193      	str	r3, [r2, #24]
	tty->tx_ringbuf = NULL;
    3d20:	6353      	str	r3, [r2, #52]	; 0x34
	tty->tx_ringbuf_sz = 0U;
    3d22:	6393      	str	r3, [r2, #56]	; 0x38

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    3d24:	87d3      	strh	r3, [r2, #62]	; 0x3e
    3d26:	8793      	strh	r3, [r2, #60]	; 0x3c
    3d28:	83d3      	strh	r3, [r2, #30]
    3d2a:	8393      	strh	r3, [r2, #28]

	tty->rx_timeout = SYS_FOREVER_MS;
    3d2c:	f04f 33ff 	mov.w	r3, #4294967295
    3d30:	6213      	str	r3, [r2, #32]
	tty->tx_timeout = SYS_FOREVER_MS;
    3d32:	6413      	str	r3, [r2, #64]	; 0x40
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    3d34:	688b      	ldr	r3, [r1, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    3d36:	b143      	cbz	r3, 3d4a <tty_init+0x3a>
    3d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d3a:	b143      	cbz	r3, 3d4e <tty_init+0x3e>
		api->irq_callback_set(dev, cb, user_data);
    3d3c:	4905      	ldr	r1, [pc, #20]	; (3d54 <tty_init+0x44>)
    3d3e:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    3d40:	2000      	movs	r0, #0
}
    3d42:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3d44:	f06f 0012 	mvn.w	r0, #18
}
    3d48:	4770      	bx	lr
	return 0;
    3d4a:	2000      	movs	r0, #0
    3d4c:	e7f9      	b.n	3d42 <tty_init+0x32>
    3d4e:	2000      	movs	r0, #0
    3d50:	e7f7      	b.n	3d42 <tty_init+0x32>
    3d52:	bf00      	nop
    3d54:	00012633 	.word	0x00012633

00003d58 <console_getchar>:
{
	return tty_write(&console_serial, &c, 1);
}

int console_getchar(void)
{
    3d58:	b500      	push	{lr}
    3d5a:	b083      	sub	sp, #12
	uint8_t c;
	int res;

	res = tty_read(&console_serial, &c, 1);
    3d5c:	2201      	movs	r2, #1
    3d5e:	f10d 0107 	add.w	r1, sp, #7
    3d62:	4805      	ldr	r0, [pc, #20]	; (3d78 <console_getchar+0x20>)
    3d64:	f00e fcab 	bl	126be <tty_read>
	if (res < 0) {
    3d68:	2800      	cmp	r0, #0
    3d6a:	db01      	blt.n	3d70 <console_getchar+0x18>
		return res;
	}

	return c;
    3d6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3d70:	b003      	add	sp, #12
    3d72:	f85d fb04 	ldr.w	pc, [sp], #4
    3d76:	bf00      	nop
    3d78:	200202d8 	.word	0x200202d8

00003d7c <console_init>:

int console_init(void)
{
    3d7c:	b538      	push	{r3, r4, r5, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3d7e:	4810      	ldr	r0, [pc, #64]	; (3dc0 <console_init+0x44>)
    3d80:	f011 ff97 	bl	15cb2 <z_device_ready>
    3d84:	b1b0      	cbz	r0, 3db4 <console_init+0x38>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    3d86:	490e      	ldr	r1, [pc, #56]	; (3dc0 <console_init+0x44>)
    3d88:	480e      	ldr	r0, [pc, #56]	; (3dc4 <console_init+0x48>)
    3d8a:	f7ff ffc1 	bl	3d10 <tty_init>

	if (ret) {
    3d8e:	4604      	mov	r4, r0
    3d90:	b970      	cbnz	r0, 3db0 <console_init+0x34>
		return ret;
	}

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
    3d92:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <console_init+0x44>)
    3d94:	689b      	ldr	r3, [r3, #8]
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    3d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d98:	b17b      	cbz	r3, 3dba <console_init+0x3e>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    3d9a:	4d0a      	ldr	r5, [pc, #40]	; (3dc4 <console_init+0x48>)
    3d9c:	2210      	movs	r2, #16
    3d9e:	490a      	ldr	r1, [pc, #40]	; (3dc8 <console_init+0x4c>)
    3da0:	4628      	mov	r0, r5
    3da2:	f00e fccd 	bl	12740 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    3da6:	2210      	movs	r2, #16
    3da8:	4908      	ldr	r1, [pc, #32]	; (3dcc <console_init+0x50>)
    3daa:	4628      	mov	r0, r5
    3dac:	f00e fcad 	bl	1270a <tty_set_rx_buf>

	return 0;
}
    3db0:	4620      	mov	r0, r4
    3db2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    3db4:	f06f 0412 	mvn.w	r4, #18
    3db8:	e7fa      	b.n	3db0 <console_init+0x34>
			return -ENOTSUP;
    3dba:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3dbe:	e7f7      	b.n	3db0 <console_init+0x34>
    3dc0:	00016e20 	.word	0x00016e20
    3dc4:	200202d8 	.word	0x200202d8
    3dc8:	2002031c 	.word	0x2002031c
    3dcc:	200202c8 	.word	0x200202c8

00003dd0 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
    3dd0:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
    3dd2:	4c04      	ldr	r4, [pc, #16]	; (3de4 <__do_init_array_aux+0x14>)
    3dd4:	4b04      	ldr	r3, [pc, #16]	; (3de8 <__do_init_array_aux+0x18>)
    3dd6:	429c      	cmp	r4, r3
    3dd8:	d203      	bcs.n	3de2 <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
    3dda:	f854 3b04 	ldr.w	r3, [r4], #4
    3dde:	4798      	blx	r3
		func++) {
    3de0:	e7f8      	b.n	3dd4 <__do_init_array_aux+0x4>
	}
}
    3de2:	bd10      	pop	{r4, pc}
    3de4:	000170b0 	.word	0x000170b0
    3de8:	000170b0 	.word	0x000170b0

00003dec <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    3dec:	4b06      	ldr	r3, [pc, #24]	; (3e08 <__do_global_ctors_aux+0x1c>)
    3dee:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
    3df0:	b14b      	cbz	r3, 3e06 <__do_global_ctors_aux+0x1a>
{
    3df2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
    3df4:	1e5c      	subs	r4, r3, #1
    3df6:	4a04      	ldr	r2, [pc, #16]	; (3e08 <__do_global_ctors_aux+0x1c>)
    3df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dfc:	4798      	blx	r3
    3dfe:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
    3e00:	2c00      	cmp	r4, #0
    3e02:	d1f7      	bne.n	3df4 <__do_global_ctors_aux+0x8>
	}
}
    3e04:	bd10      	pop	{r4, pc}
    3e06:	4770      	bx	lr
    3e08:	000170a8 	.word	0x000170a8

00003e0c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3e0c:	4b1b      	ldr	r3, [pc, #108]	; (3e7c <pm_system_resume+0x70>)
    3e0e:	681b      	ldr	r3, [r3, #0]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d132      	bne.n	3e7a <pm_system_resume+0x6e>
{
    3e14:	b530      	push	{r4, r5, lr}
    3e16:	b085      	sub	sp, #20
		post_ops_done = 1;
    3e18:	4b18      	ldr	r3, [pc, #96]	; (3e7c <pm_system_resume+0x70>)
    3e1a:	2201      	movs	r2, #1
    3e1c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3e1e:	4b18      	ldr	r3, [pc, #96]	; (3e80 <pm_system_resume+0x74>)
    3e20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3e24:	ab04      	add	r3, sp, #16
    3e26:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3e2a:	4b16      	ldr	r3, [pc, #88]	; (3e84 <pm_system_resume+0x78>)
    3e2c:	b163      	cbz	r3, 3e48 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3e2e:	f00e fb06 	bl	1243e <pm_power_state_exit_post_ops>
	__asm__ volatile(
    3e32:	f04f 0320 	mov.w	r3, #32
    3e36:	f3ef 8511 	mrs	r5, BASEPRI
    3e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e3e:	f3bf 8f6f 	isb	sy
    3e42:	4b11      	ldr	r3, [pc, #68]	; (3e88 <pm_system_resume+0x7c>)
    3e44:	681c      	ldr	r4, [r3, #0]
    3e46:	e00a      	b.n	3e5e <pm_system_resume+0x52>
	__asm__ volatile(
    3e48:	2300      	movs	r3, #0
    3e4a:	f383 8811 	msr	BASEPRI, r3
    3e4e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3e52:	e7ee      	b.n	3e32 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e54:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3e56:	b10c      	cbz	r4, 3e5c <pm_system_resume+0x50>
	return node->next;
    3e58:	6823      	ldr	r3, [r4, #0]
    3e5a:	b143      	cbz	r3, 3e6e <pm_system_resume+0x62>
{
    3e5c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3e5e:	b134      	cbz	r4, 3e6e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3e60:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3e62:	2b00      	cmp	r3, #0
    3e64:	d0f6      	beq.n	3e54 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3e66:	4a06      	ldr	r2, [pc, #24]	; (3e80 <pm_system_resume+0x74>)
    3e68:	7810      	ldrb	r0, [r2, #0]
    3e6a:	4798      	blx	r3
    3e6c:	e7f2      	b.n	3e54 <pm_system_resume+0x48>
	__asm__ volatile(
    3e6e:	f385 8811 	msr	BASEPRI, r5
    3e72:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3e76:	b005      	add	sp, #20
    3e78:	bd30      	pop	{r4, r5, pc}
    3e7a:	4770      	bx	lr
    3e7c:	20000004 	.word	0x20000004
    3e80:	20020338 	.word	0x20020338
    3e84:	0001243f 	.word	0x0001243f
    3e88:	20020330 	.word	0x20020330

00003e8c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	b088      	sub	sp, #32
    3e90:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3e92:	4c2a      	ldr	r4, [pc, #168]	; (3f3c <pm_system_suspend+0xb0>)
    3e94:	466d      	mov	r5, sp
    3e96:	4601      	mov	r1, r0
    3e98:	4628      	mov	r0, r5
    3e9a:	f00e fc6d 	bl	12778 <pm_policy_next_state>
    3e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3ea6:	7820      	ldrb	r0, [r4, #0]
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d045      	beq.n	3f38 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3eac:	4b24      	ldr	r3, [pc, #144]	; (3f40 <pm_system_suspend+0xb4>)
    3eae:	2200      	movs	r2, #0
    3eb0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3eb2:	f1b6 3fff 	cmp.w	r6, #4294967295
    3eb6:	d10c      	bne.n	3ed2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3eb8:	f00b fcd8 	bl	f86c <k_sched_lock>
	__asm__ volatile(
    3ebc:	f04f 0320 	mov.w	r3, #32
    3ec0:	f3ef 8511 	mrs	r5, BASEPRI
    3ec4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ec8:	f3bf 8f6f 	isb	sy
	return list->head;
    3ecc:	4b1d      	ldr	r3, [pc, #116]	; (3f44 <pm_system_suspend+0xb8>)
    3ece:	681c      	ldr	r4, [r3, #0]
    3ed0:	e016      	b.n	3f00 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3ed2:	68a3      	ldr	r3, [r4, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3ed4:	0c59      	lsrs	r1, r3, #17
    3ed6:	03d8      	lsls	r0, r3, #15
    3ed8:	4c1b      	ldr	r4, [pc, #108]	; (3f48 <pm_system_suspend+0xbc>)
    3eda:	4a1c      	ldr	r2, [pc, #112]	; (3f4c <pm_system_suspend+0xc0>)
    3edc:	2300      	movs	r3, #0
    3ede:	1900      	adds	r0, r0, r4
    3ee0:	f04f 0400 	mov.w	r4, #0
    3ee4:	eb44 0101 	adc.w	r1, r4, r1
    3ee8:	f7fd f8fe 	bl	10e8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3eec:	2101      	movs	r1, #1
    3eee:	1a30      	subs	r0, r6, r0
    3ef0:	f012 f8fa 	bl	160e8 <z_set_timeout_expiry>
    3ef4:	e7e0      	b.n	3eb8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3ef6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ef8:	b10c      	cbz	r4, 3efe <pm_system_suspend+0x72>
	return node->next;
    3efa:	6823      	ldr	r3, [r4, #0]
    3efc:	b143      	cbz	r3, 3f10 <pm_system_suspend+0x84>
{
    3efe:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f00:	b134      	cbz	r4, 3f10 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3f02:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3f04:	2b00      	cmp	r3, #0
    3f06:	d0f6      	beq.n	3ef6 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3f08:	4a0c      	ldr	r2, [pc, #48]	; (3f3c <pm_system_suspend+0xb0>)
    3f0a:	7810      	ldrb	r0, [r2, #0]
    3f0c:	4798      	blx	r3
    3f0e:	e7f2      	b.n	3ef6 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3f10:	f385 8811 	msr	BASEPRI, r5
    3f14:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3f18:	4b08      	ldr	r3, [pc, #32]	; (3f3c <pm_system_suspend+0xb0>)
    3f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3f1e:	ab08      	add	r3, sp, #32
    3f20:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3f24:	4b0a      	ldr	r3, [pc, #40]	; (3f50 <pm_system_suspend+0xc4>)
    3f26:	b10b      	cbz	r3, 3f2c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3f28:	f7ff fede 	bl	3ce8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3f2c:	f7ff ff6e 	bl	3e0c <pm_system_resume>
	k_sched_unlock();
    3f30:	f00b fe9a 	bl	fc68 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3f34:	4b01      	ldr	r3, [pc, #4]	; (3f3c <pm_system_suspend+0xb0>)
    3f36:	7818      	ldrb	r0, [r3, #0]
}
    3f38:	b008      	add	sp, #32
    3f3a:	bd70      	pop	{r4, r5, r6, pc}
    3f3c:	20020338 	.word	0x20020338
    3f40:	20000004 	.word	0x20000004
    3f44:	20020330 	.word	0x20020330
    3f48:	000f423f 	.word	0x000f423f
    3f4c:	000f4240 	.word	0x000f4240
    3f50:	00003ce9 	.word	0x00003ce9

00003f54 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3f54:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3f56:	4802      	ldr	r0, [pc, #8]	; (3f60 <nrf_cc3xx_platform_abort_init+0xc>)
    3f58:	f00c f9f2 	bl	10340 <nrf_cc3xx_platform_set_abort>
}
    3f5c:	bd08      	pop	{r3, pc}
    3f5e:	bf00      	nop
    3f60:	00068f00 	.word	0x00068f00

00003f64 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3f64:	b308      	cbz	r0, 3faa <mutex_unlock_platform+0x46>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3f66:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3f68:	6843      	ldr	r3, [r0, #4]
    3f6a:	2b04      	cmp	r3, #4
    3f6c:	d007      	beq.n	3f7e <mutex_unlock_platform+0x1a>
    3f6e:	2b08      	cmp	r3, #8
    3f70:	d012      	beq.n	3f98 <mutex_unlock_platform+0x34>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3f72:	b1fb      	cbz	r3, 3fb4 <mutex_unlock_platform+0x50>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3f74:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    3f76:	f00b fb69 	bl	f64c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3f7a:	2000      	movs	r0, #0
    3f7c:	e014      	b.n	3fa8 <mutex_unlock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3f7e:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f80:	2200      	movs	r2, #0
    3f82:	e8d3 1fef 	ldaex	r1, [r3]
    3f86:	2901      	cmp	r1, #1
    3f88:	d103      	bne.n	3f92 <mutex_unlock_platform+0x2e>
    3f8a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3f8e:	2800      	cmp	r0, #0
    3f90:	d1f7      	bne.n	3f82 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3f92:	d10d      	bne.n	3fb0 <mutex_unlock_platform+0x4c>
    3f94:	4610      	mov	r0, r2
    3f96:	e007      	b.n	3fa8 <mutex_unlock_platform+0x44>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    3f98:	6803      	ldr	r3, [r0, #0]
    3f9a:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    3f9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3fa0:	2000      	movs	r0, #0
    3fa2:	4a05      	ldr	r2, [pc, #20]	; (3fb8 <mutex_unlock_platform+0x54>)
    3fa4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    3fa8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3faa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3fae:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fb0:	4802      	ldr	r0, [pc, #8]	; (3fbc <mutex_unlock_platform+0x58>)
    3fb2:	e7f9      	b.n	3fa8 <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3fb4:	4802      	ldr	r0, [pc, #8]	; (3fc0 <mutex_unlock_platform+0x5c>)
    3fb6:	e7f7      	b.n	3fa8 <mutex_unlock_platform+0x44>
    3fb8:	50030000 	.word	0x50030000
    3fbc:	ffff8fe9 	.word	0xffff8fe9
    3fc0:	ffff8fea 	.word	0xffff8fea

00003fc4 <mutex_lock_platform>:
    if(mutex == NULL) {
    3fc4:	b370      	cbz	r0, 4024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3fc6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3fc8:	6843      	ldr	r3, [r0, #4]
    3fca:	2b04      	cmp	r3, #4
    3fcc:	d004      	beq.n	3fd8 <mutex_lock_platform+0x14>
    3fce:	2b08      	cmp	r3, #8
    3fd0:	d00f      	beq.n	3ff2 <mutex_lock_platform+0x2e>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3fd2:	b9c3      	cbnz	r3, 4006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3fd4:	4815      	ldr	r0, [pc, #84]	; (402c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    3fd6:	e00b      	b.n	3ff0 <mutex_lock_platform+0x2c>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3fd8:	6803      	ldr	r3, [r0, #0]
    3fda:	2201      	movs	r2, #1
    3fdc:	e8d3 1fef 	ldaex	r1, [r3]
    3fe0:	2900      	cmp	r1, #0
    3fe2:	d103      	bne.n	3fec <mutex_lock_platform+0x28>
    3fe4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    3fe8:	2800      	cmp	r0, #0
    3fea:	d1f7      	bne.n	3fdc <mutex_lock_platform+0x18>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3fec:	d116      	bne.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    3fee:	2000      	movs	r0, #0
}
    3ff0:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    3ff2:	6803      	ldr	r3, [r0, #0]
    3ff4:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    3ff6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3ffa:	4a0d      	ldr	r2, [pc, #52]	; (4030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    3ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4000:	b973      	cbnz	r3, 4020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    4002:	2000      	movs	r0, #0
    4004:	e7f4      	b.n	3ff0 <mutex_lock_platform+0x2c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    4006:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4008:	f04f 32ff 	mov.w	r2, #4294967295
    400c:	f04f 33ff 	mov.w	r3, #4294967295
    4010:	f00b fa92 	bl	f538 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4014:	2800      	cmp	r0, #0
    4016:	d0eb      	beq.n	3ff0 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4018:	4806      	ldr	r0, [pc, #24]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    401a:	e7e9      	b.n	3ff0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    401c:	4805      	ldr	r0, [pc, #20]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    401e:	e7e7      	b.n	3ff0 <mutex_lock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4020:	4804      	ldr	r0, [pc, #16]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    4022:	e7e5      	b.n	3ff0 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4024:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4028:	4770      	bx	lr
    402a:	bf00      	nop
    402c:	ffff8fea 	.word	0xffff8fea
    4030:	50030000 	.word	0x50030000
    4034:	ffff8fe9 	.word	0xffff8fe9

00004038 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4038:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    403a:	4604      	mov	r4, r0
    403c:	b190      	cbz	r0, 4064 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    403e:	6863      	ldr	r3, [r4, #4]
    4040:	2b04      	cmp	r3, #4
    4042:	d00e      	beq.n	4062 <mutex_free_platform+0x2a>
    4044:	2b08      	cmp	r3, #8
    4046:	d00c      	beq.n	4062 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4048:	b15b      	cbz	r3, 4062 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    404a:	f013 0f02 	tst.w	r3, #2
    404e:	d10e      	bne.n	406e <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4050:	6823      	ldr	r3, [r4, #0]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    4052:	2200      	movs	r2, #0
    4054:	601a      	str	r2, [r3, #0]
    4056:	605a      	str	r2, [r3, #4]
    4058:	609a      	str	r2, [r3, #8]
    405a:	60da      	str	r2, [r3, #12]
    405c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    405e:	2300      	movs	r3, #0
    4060:	6063      	str	r3, [r4, #4]
}
    4062:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4064:	4b05      	ldr	r3, [pc, #20]	; (407c <mutex_free_platform+0x44>)
    4066:	685b      	ldr	r3, [r3, #4]
    4068:	4805      	ldr	r0, [pc, #20]	; (4080 <mutex_free_platform+0x48>)
    406a:	4798      	blx	r3
    406c:	e7e7      	b.n	403e <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    406e:	4621      	mov	r1, r4
    4070:	4804      	ldr	r0, [pc, #16]	; (4084 <mutex_free_platform+0x4c>)
    4072:	f011 fe6b 	bl	15d4c <k_mem_slab_free>
        mutex->mutex = NULL;
    4076:	2300      	movs	r3, #0
    4078:	6023      	str	r3, [r4, #0]
    407a:	e7f0      	b.n	405e <mutex_free_platform+0x26>
    407c:	2000006c 	.word	0x2000006c
    4080:	00068f08 	.word	0x00068f08
    4084:	20020344 	.word	0x20020344

00004088 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4088:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    408a:	4604      	mov	r4, r0
    408c:	b178      	cbz	r0, 40ae <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    408e:	6863      	ldr	r3, [r4, #4]
    4090:	2b04      	cmp	r3, #4
    4092:	d00b      	beq.n	40ac <mutex_init_platform+0x24>
    4094:	2b08      	cmp	r3, #8
    4096:	d009      	beq.n	40ac <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4098:	b90b      	cbnz	r3, 409e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    409a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    409c:	b163      	cbz	r3, 40b8 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    409e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    40a0:	f011 fec9 	bl	15e36 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    40a4:	6863      	ldr	r3, [r4, #4]
    40a6:	f043 0301 	orr.w	r3, r3, #1
    40aa:	6063      	str	r3, [r4, #4]
}
    40ac:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    40ae:	4b10      	ldr	r3, [pc, #64]	; (40f0 <mutex_init_platform+0x68>)
    40b0:	685b      	ldr	r3, [r3, #4]
    40b2:	4810      	ldr	r0, [pc, #64]	; (40f4 <mutex_init_platform+0x6c>)
    40b4:	4798      	blx	r3
    40b6:	e7ea      	b.n	408e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    40b8:	f04f 32ff 	mov.w	r2, #4294967295
    40bc:	f04f 33ff 	mov.w	r3, #4294967295
    40c0:	4621      	mov	r1, r4
    40c2:	480d      	ldr	r0, [pc, #52]	; (40f8 <mutex_init_platform+0x70>)
    40c4:	f00b f910 	bl	f2e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    40c8:	b908      	cbnz	r0, 40ce <mutex_init_platform+0x46>
    40ca:	6823      	ldr	r3, [r4, #0]
    40cc:	b91b      	cbnz	r3, 40d6 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    40ce:	4b08      	ldr	r3, [pc, #32]	; (40f0 <mutex_init_platform+0x68>)
    40d0:	685b      	ldr	r3, [r3, #4]
    40d2:	480a      	ldr	r0, [pc, #40]	; (40fc <mutex_init_platform+0x74>)
    40d4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    40d6:	6823      	ldr	r3, [r4, #0]
    40d8:	2200      	movs	r2, #0
    40da:	601a      	str	r2, [r3, #0]
    40dc:	605a      	str	r2, [r3, #4]
    40de:	609a      	str	r2, [r3, #8]
    40e0:	60da      	str	r2, [r3, #12]
    40e2:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    40e4:	6863      	ldr	r3, [r4, #4]
    40e6:	f043 0302 	orr.w	r3, r3, #2
    40ea:	6063      	str	r3, [r4, #4]
    40ec:	e7d7      	b.n	409e <mutex_init_platform+0x16>
    40ee:	bf00      	nop
    40f0:	2000006c 	.word	0x2000006c
    40f4:	00068f08 	.word	0x00068f08
    40f8:	20020344 	.word	0x20020344
    40fc:	00068f30 	.word	0x00068f30

00004100 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4100:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4102:	2340      	movs	r3, #64	; 0x40
    4104:	2214      	movs	r2, #20
    4106:	4904      	ldr	r1, [pc, #16]	; (4118 <nrf_cc3xx_platform_mutex_init+0x18>)
    4108:	4804      	ldr	r0, [pc, #16]	; (411c <nrf_cc3xx_platform_mutex_init+0x1c>)
    410a:	f011 fe10 	bl	15d2e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    410e:	4904      	ldr	r1, [pc, #16]	; (4120 <nrf_cc3xx_platform_mutex_init+0x20>)
    4110:	4804      	ldr	r0, [pc, #16]	; (4124 <nrf_cc3xx_platform_mutex_init+0x24>)
    4112:	f00c f973 	bl	103fc <nrf_cc3xx_platform_set_mutexes>
}
    4116:	bd08      	pop	{r3, pc}
    4118:	20020364 	.word	0x20020364
    411c:	20020344 	.word	0x20020344
    4120:	00068f70 	.word	0x00068f70
    4124:	00068f60 	.word	0x00068f60

00004128 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4128:	4901      	ldr	r1, [pc, #4]	; (4130 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    412a:	2210      	movs	r2, #16
	str	r2, [r1]
    412c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    412e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4130:	e000ed10 	.word	0xe000ed10

00004134 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4134:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4136:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4138:	f380 8811 	msr	BASEPRI, r0
	isb
    413c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4140:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4144:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4146:	b662      	cpsie	i
	isb
    4148:	f3bf 8f6f 	isb	sy

	bx	lr
    414c:	4770      	bx	lr
    414e:	bf00      	nop

00004150 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4150:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4152:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4154:	f381 8811 	msr	BASEPRI, r1

	wfe
    4158:	bf20      	wfe

	msr	BASEPRI, r0
    415a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    415e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4160:	4770      	bx	lr
    4162:	bf00      	nop

00004164 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4164:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4166:	2b00      	cmp	r3, #0
    4168:	db08      	blt.n	417c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    416a:	f000 001f 	and.w	r0, r0, #31
    416e:	095b      	lsrs	r3, r3, #5
    4170:	2201      	movs	r2, #1
    4172:	fa02 f000 	lsl.w	r0, r2, r0
    4176:	4a02      	ldr	r2, [pc, #8]	; (4180 <arch_irq_enable+0x1c>)
    4178:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    417c:	4770      	bx	lr
    417e:	bf00      	nop
    4180:	e000e100 	.word	0xe000e100

00004184 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4184:	0942      	lsrs	r2, r0, #5
    4186:	4b05      	ldr	r3, [pc, #20]	; (419c <arch_irq_is_enabled+0x18>)
    4188:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    418c:	f000 001f 	and.w	r0, r0, #31
    4190:	2301      	movs	r3, #1
    4192:	fa03 f000 	lsl.w	r0, r3, r0
}
    4196:	4010      	ands	r0, r2
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	e000e100 	.word	0xe000e100

000041a0 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    41a0:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    41a2:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    41a4:	2b00      	cmp	r3, #0
    41a6:	db08      	blt.n	41ba <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41a8:	0149      	lsls	r1, r1, #5
    41aa:	b2c9      	uxtb	r1, r1
    41ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    41b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    41b4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    41b8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41ba:	f000 000f 	and.w	r0, r0, #15
    41be:	0149      	lsls	r1, r1, #5
    41c0:	b2c9      	uxtb	r1, r1
    41c2:	4b01      	ldr	r3, [pc, #4]	; (41c8 <z_arm_irq_priority_set+0x28>)
    41c4:	5419      	strb	r1, [r3, r0]
}
    41c6:	4770      	bx	lr
    41c8:	e000ed14 	.word	0xe000ed14

000041cc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    41cc:	bf30      	wfi
    b z_SysNmiOnReset
    41ce:	f7ff bffd 	b.w	41cc <z_SysNmiOnReset>
    41d2:	bf00      	nop

000041d4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    41d4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    41d6:	4b0b      	ldr	r3, [pc, #44]	; (4204 <z_arm_prep_c+0x30>)
    41d8:	4a0b      	ldr	r2, [pc, #44]	; (4208 <z_arm_prep_c+0x34>)
    41da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    41de:	609a      	str	r2, [r3, #8]
    41e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41e4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    41e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    41ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    41f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    41f4:	f00b f818 	bl	f228 <z_bss_zero>
	z_data_copy();
    41f8:	f00b fea6 	bl	ff48 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    41fc:	f000 f9da 	bl	45b4 <z_arm_interrupt_init>
	z_cstart();
    4200:	f00b f81e 	bl	f240 <z_cstart>
    4204:	e000ed00 	.word	0xe000ed00
    4208:	00000000 	.word	0x00000000

0000420c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    420c:	4a0a      	ldr	r2, [pc, #40]	; (4238 <arch_swap+0x2c>)
    420e:	6893      	ldr	r3, [r2, #8]
    4210:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4214:	4909      	ldr	r1, [pc, #36]	; (423c <arch_swap+0x30>)
    4216:	6809      	ldr	r1, [r1, #0]
    4218:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    421c:	4908      	ldr	r1, [pc, #32]	; (4240 <arch_swap+0x34>)
    421e:	684b      	ldr	r3, [r1, #4]
    4220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4224:	604b      	str	r3, [r1, #4]
    4226:	2300      	movs	r3, #0
    4228:	f383 8811 	msr	BASEPRI, r3
    422c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4230:	6893      	ldr	r3, [r2, #8]
}
    4232:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    4236:	4770      	bx	lr
    4238:	20020a18 	.word	0x20020a18
    423c:	0006bbb4 	.word	0x0006bbb4
    4240:	e000ed00 	.word	0xe000ed00

00004244 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4244:	4914      	ldr	r1, [pc, #80]	; (4298 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4246:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4248:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    424c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    424e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4252:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4256:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4258:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    425c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4260:	4f0e      	ldr	r7, [pc, #56]	; (429c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4262:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4266:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4268:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    426a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    426c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    4270:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4272:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4276:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    427a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    427e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4282:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    4286:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    428a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    428c:	f00e fa93 	bl	127b6 <configure_builtin_stack_guard>
    pop {r2, lr}
    4290:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4294:	4770      	bx	lr
    4296:	0000      	.short	0x0000
    ldr r1, =_kernel
    4298:	20020a18 	.word	0x20020a18
    ldr v4, =_SCS_ICSR
    429c:	e000ed04 	.word	0xe000ed04

000042a0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    42a0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    42a4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    42a6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    42aa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    42ae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    42b0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    42b4:	2902      	cmp	r1, #2
    beq _oops
    42b6:	d0ff      	beq.n	42b8 <_oops>

000042b8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    42b8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    42ba:	f00e fa6a 	bl	12792 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    42be:	bd01      	pop	{r0, pc}

000042c0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    42c0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    42c2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    42c6:	490d      	ldr	r1, [pc, #52]	; (42fc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    42c8:	f021 0101 	bic.w	r1, r1, #1
    42cc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    42d0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    42da:	9b02      	ldr	r3, [sp, #8]
    42dc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    42e0:	9b03      	ldr	r3, [sp, #12]
    42e2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    42e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    42ea:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    42ee:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    42f0:	2300      	movs	r3, #0
    42f2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    42f6:	bc10      	pop	{r4}
    42f8:	4770      	bx	lr
    42fa:	bf00      	nop
    42fc:	00012209 	.word	0x00012209

00004300 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4300:	4b09      	ldr	r3, [pc, #36]	; (4328 <arch_switch_to_main_thread+0x28>)
    4302:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    4304:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4308:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    430c:	4610      	mov	r0, r2
    430e:	f381 8809 	msr	PSP, r1
    4312:	2100      	movs	r1, #0
    4314:	b663      	cpsie	if
    4316:	f381 8811 	msr	BASEPRI, r1
    431a:	f3bf 8f6f 	isb	sy
    431e:	2200      	movs	r2, #0
    4320:	2300      	movs	r3, #0
    4322:	f00d ff71 	bl	12208 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4326:	bf00      	nop
    4328:	20020a18 	.word	0x20020a18

0000432c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    432c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    432e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4330:	4a0b      	ldr	r2, [pc, #44]	; (4360 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4332:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4334:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4336:	bf1e      	ittt	ne
	movne	r1, #0
    4338:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    433a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    433c:	f011 fd53 	blne	15de6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4340:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4342:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4346:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    434a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    434e:	4905      	ldr	r1, [pc, #20]	; (4364 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4350:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4352:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4354:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4356:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    435a:	4903      	ldr	r1, [pc, #12]	; (4368 <_isr_wrapper+0x3c>)
	bx r1
    435c:	4708      	bx	r1
    435e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4360:	20020a18 	.word	0x20020a18
	ldr r1, =_sw_isr_table
    4364:	00016e80 	.word	0x00016e80
	ldr r1, =z_arm_int_exit
    4368:	0000436d 	.word	0x0000436d

0000436c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    436c:	4b04      	ldr	r3, [pc, #16]	; (4380 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    436e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4370:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4372:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4374:	d003      	beq.n	437e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4376:	4903      	ldr	r1, [pc, #12]	; (4384 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    437c:	600a      	str	r2, [r1, #0]

0000437e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    437e:	4770      	bx	lr
	ldr r3, =_kernel
    4380:	20020a18 	.word	0x20020a18
	ldr r1, =_SCS_ICSR
    4384:	e000ed04 	.word	0xe000ed04

00004388 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    4388:	b510      	push	{r4, lr}
    438a:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    438c:	4b13      	ldr	r3, [pc, #76]	; (43dc <mem_manage_fault+0x54>)
    438e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4394:	f013 0f02 	tst.w	r3, #2
    4398:	d00b      	beq.n	43b2 <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    439a:	4b10      	ldr	r3, [pc, #64]	; (43dc <mem_manage_fault+0x54>)
    439c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    43a4:	d005      	beq.n	43b2 <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    43a6:	b121      	cbz	r1, 43b2 <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    43a8:	4a0c      	ldr	r2, [pc, #48]	; (43dc <mem_manage_fault+0x54>)
    43aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    43b0:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    43b2:	4b0a      	ldr	r3, [pc, #40]	; (43dc <mem_manage_fault+0x54>)
    43b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    43b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    43b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43ba:	f013 0f10 	tst.w	r3, #16
    43be:	d101      	bne.n	43c4 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    43c0:	4b06      	ldr	r3, [pc, #24]	; (43dc <mem_manage_fault+0x54>)
    43c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    43c4:	4a05      	ldr	r2, [pc, #20]	; (43dc <mem_manage_fault+0x54>)
    43c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43c8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    43cc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    43ce:	2101      	movs	r1, #1
    43d0:	f00e f9fd 	bl	127ce <memory_fault_recoverable>
    43d4:	7020      	strb	r0, [r4, #0]

	return reason;
}
    43d6:	2000      	movs	r0, #0
    43d8:	bd10      	pop	{r4, pc}
    43da:	bf00      	nop
    43dc:	e000ed00 	.word	0xe000ed00

000043e0 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    43e0:	b510      	push	{r4, lr}
    43e2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    43e4:	4b12      	ldr	r3, [pc, #72]	; (4430 <bus_fault+0x50>)
    43e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    43e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    43ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43ec:	f413 7f00 	tst.w	r3, #512	; 0x200
    43f0:	d00b      	beq.n	440a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    43f2:	4b0f      	ldr	r3, [pc, #60]	; (4430 <bus_fault+0x50>)
    43f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    43f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    43fc:	d005      	beq.n	440a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    43fe:	b121      	cbz	r1, 440a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4400:	4a0b      	ldr	r2, [pc, #44]	; (4430 <bus_fault+0x50>)
    4402:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4408:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    440a:	4b09      	ldr	r3, [pc, #36]	; (4430 <bus_fault+0x50>)
    440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4410:	f413 7f80 	tst.w	r3, #256	; 0x100
    4414:	d101      	bne.n	441a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4416:	4b06      	ldr	r3, [pc, #24]	; (4430 <bus_fault+0x50>)
    4418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    441a:	4a05      	ldr	r2, [pc, #20]	; (4430 <bus_fault+0x50>)
    441c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    441e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4422:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4424:	2101      	movs	r1, #1
    4426:	f00e f9d2 	bl	127ce <memory_fault_recoverable>
    442a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    442c:	2000      	movs	r0, #0
    442e:	bd10      	pop	{r4, pc}
    4430:	e000ed00 	.word	0xe000ed00

00004434 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4434:	4b0a      	ldr	r3, [pc, #40]	; (4460 <usage_fault+0x2c>)
    4436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    443a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    443c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    4440:	d10b      	bne.n	445a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4442:	4b07      	ldr	r3, [pc, #28]	; (4460 <usage_fault+0x2c>)
    4444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    444a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    444e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4452:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4456:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4458:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    445a:	2002      	movs	r0, #2
    445c:	e7f1      	b.n	4442 <usage_fault+0xe>
    445e:	bf00      	nop
    4460:	e000ed00 	.word	0xe000ed00

00004464 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4464:	b510      	push	{r4, lr}
    4466:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4468:	2300      	movs	r3, #0
    446a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    446c:	4b1b      	ldr	r3, [pc, #108]	; (44dc <hard_fault+0x78>)
    446e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4470:	f010 0002 	ands.w	r0, r0, #2
    4474:	d12d      	bne.n	44d2 <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4478:	2b00      	cmp	r3, #0
    447a:	db2b      	blt.n	44d4 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    447c:	4b17      	ldr	r3, [pc, #92]	; (44dc <hard_fault+0x78>)
    447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4480:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4484:	d027      	beq.n	44d6 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4486:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4488:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    448c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4490:	429a      	cmp	r2, r3
    4492:	d010      	beq.n	44b6 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4494:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4498:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	b963      	cbnz	r3, 44ba <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    44a0:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <hard_fault+0x7c>)
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	b97b      	cbnz	r3, 44c6 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    44a6:	4b0f      	ldr	r3, [pc, #60]	; (44e4 <hard_fault+0x80>)
    44a8:	881b      	ldrh	r3, [r3, #0]
    44aa:	b29b      	uxth	r3, r3
    44ac:	b193      	cbz	r3, 44d4 <hard_fault+0x70>
			reason = usage_fault(esf);
    44ae:	4620      	mov	r0, r4
    44b0:	f7ff ffc0 	bl	4434 <usage_fault>
    44b4:	e00e      	b.n	44d4 <hard_fault+0x70>
			reason = esf->basic.r0;
    44b6:	6820      	ldr	r0, [r4, #0]
    44b8:	e00c      	b.n	44d4 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    44ba:	460a      	mov	r2, r1
    44bc:	2101      	movs	r1, #1
    44be:	4620      	mov	r0, r4
    44c0:	f7ff ff62 	bl	4388 <mem_manage_fault>
    44c4:	e006      	b.n	44d4 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    44c6:	460a      	mov	r2, r1
    44c8:	2101      	movs	r1, #1
    44ca:	4620      	mov	r0, r4
    44cc:	f7ff ff88 	bl	43e0 <bus_fault>
    44d0:	e000      	b.n	44d4 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44d2:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    44d4:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44d6:	4618      	mov	r0, r3
	return reason;
    44d8:	e7fc      	b.n	44d4 <hard_fault+0x70>
    44da:	bf00      	nop
    44dc:	e000ed00 	.word	0xe000ed00
    44e0:	e000ed29 	.word	0xe000ed29
    44e4:	e000ed2a 	.word	0xe000ed2a

000044e8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    44e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ea:	b08b      	sub	sp, #44	; 0x2c
    44ec:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44ee:	4b25      	ldr	r3, [pc, #148]	; (4584 <z_arm_fault+0x9c>)
    44f0:	6859      	ldr	r1, [r3, #4]
    44f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
    44f6:	2300      	movs	r3, #0
    44f8:	f383 8811 	msr	BASEPRI, r3
    44fc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4500:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4504:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4508:	d115      	bne.n	4536 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    450a:	f002 030c 	and.w	r3, r2, #12
    450e:	2b08      	cmp	r3, #8
    4510:	d014      	beq.n	453c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4512:	f012 0f08 	tst.w	r2, #8
    4516:	d00b      	beq.n	4530 <z_arm_fault+0x48>
	*nested_exc = false;
    4518:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    451a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    451e:	4620      	mov	r0, r4
    4520:	f00e f95a 	bl	127d8 <fault_handle>
    4524:	4606      	mov	r6, r0
	if (recoverable) {
    4526:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    452a:	b153      	cbz	r3, 4542 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    452c:	b00b      	add	sp, #44	; 0x2c
    452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    4530:	4604      	mov	r4, r0
			*nested_exc = true;
    4532:	2701      	movs	r7, #1
    4534:	e7f1      	b.n	451a <z_arm_fault+0x32>
	*nested_exc = false;
    4536:	2700      	movs	r7, #0
		return NULL;
    4538:	463c      	mov	r4, r7
    453a:	e7ee      	b.n	451a <z_arm_fault+0x32>
	*nested_exc = false;
    453c:	2700      	movs	r7, #0
		return NULL;
    453e:	463c      	mov	r4, r7
    4540:	e7eb      	b.n	451a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4542:	ad01      	add	r5, sp, #4
    4544:	6820      	ldr	r0, [r4, #0]
    4546:	6861      	ldr	r1, [r4, #4]
    4548:	68a2      	ldr	r2, [r4, #8]
    454a:	68e3      	ldr	r3, [r4, #12]
    454c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    454e:	6920      	ldr	r0, [r4, #16]
    4550:	6961      	ldr	r1, [r4, #20]
    4552:	69a2      	ldr	r2, [r4, #24]
    4554:	69e3      	ldr	r3, [r4, #28]
    4556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
    4558:	b14f      	cbz	r7, 456e <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    455a:	9b08      	ldr	r3, [sp, #32]
    455c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4560:	b95a      	cbnz	r2, 457a <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4562:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4566:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    456a:	9308      	str	r3, [sp, #32]
    456c:	e005      	b.n	457a <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    456e:	9b08      	ldr	r3, [sp, #32]
    4570:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4574:	f023 0301 	bic.w	r3, r3, #1
    4578:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    457a:	a901      	add	r1, sp, #4
    457c:	4630      	mov	r0, r6
    457e:	f00e f904 	bl	1278a <z_arm_fatal_error>
    4582:	e7d3      	b.n	452c <z_arm_fault+0x44>
    4584:	e000ed00 	.word	0xe000ed00

00004588 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4588:	4b04      	ldr	r3, [pc, #16]	; (459c <z_arm_fault_init+0x14>)
    458a:	695a      	ldr	r2, [r3, #20]
    458c:	f042 0210 	orr.w	r2, r2, #16
    4590:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    4592:	695a      	ldr	r2, [r3, #20]
    4594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4598:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    459a:	4770      	bx	lr
    459c:	e000ed00 	.word	0xe000ed00

000045a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    45a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    45a4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    45a8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    45aa:	4672      	mov	r2, lr
	bl z_arm_fault
    45ac:	f7ff ff9c 	bl	44e8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    45b0:	bd01      	pop	{r0, pc}
    45b2:	bf00      	nop

000045b4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    45b4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    45b6:	e006      	b.n	45c6 <z_arm_interrupt_init+0x12>
    45b8:	f002 010f 	and.w	r1, r2, #15
    45bc:	4b09      	ldr	r3, [pc, #36]	; (45e4 <z_arm_interrupt_init+0x30>)
    45be:	440b      	add	r3, r1
    45c0:	2120      	movs	r1, #32
    45c2:	7619      	strb	r1, [r3, #24]
    45c4:	3201      	adds	r2, #1
    45c6:	2a44      	cmp	r2, #68	; 0x44
    45c8:	dc0a      	bgt.n	45e0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    45ca:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    45cc:	2b00      	cmp	r3, #0
    45ce:	dbf3      	blt.n	45b8 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    45d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    45d8:	2120      	movs	r1, #32
    45da:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    45de:	e7f1      	b.n	45c4 <z_arm_interrupt_init+0x10>
	}
}
    45e0:	4770      	bx	lr
    45e2:	bf00      	nop
    45e4:	e000ecfc 	.word	0xe000ecfc

000045e8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    45e8:	2000      	movs	r0, #0
    msr CONTROL, r0
    45ea:	f380 8814 	msr	CONTROL, r0
    isb
    45ee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    45f2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    45f4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    45f8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    45fc:	f012 fbce 	bl	16d9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4600:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4602:	490e      	ldr	r1, [pc, #56]	; (463c <__start+0x54>)
    str r0, [r1]
    4604:	6008      	str	r0, [r1, #0]
    dsb
    4606:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    460a:	480d      	ldr	r0, [pc, #52]	; (4640 <__start+0x58>)
    msr msp, r0
    460c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4610:	f000 f83c 	bl	468c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4614:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4616:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    461a:	480a      	ldr	r0, [pc, #40]	; (4644 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    461c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4620:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4622:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4626:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    462a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    462c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    462e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4632:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4636:	f7ff fdcd 	bl	41d4 <z_arm_prep_c>
    463a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    463c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4640:	20028c48 	.word	0x20028c48
    ldr r0, =z_interrupt_stacks
    4644:	20028d88 	.word	0x20028d88

00004648 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    4648:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    464c:	4905      	ldr	r1, [pc, #20]	; (4664 <sys_arch_reboot+0x1c>)
    464e:	68ca      	ldr	r2, [r1, #12]
    4650:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4654:	4b04      	ldr	r3, [pc, #16]	; (4668 <sys_arch_reboot+0x20>)
    4656:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4658:	60cb      	str	r3, [r1, #12]
    465a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    465e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4660:	e7fd      	b.n	465e <sys_arch_reboot+0x16>
    4662:	bf00      	nop
    4664:	e000ed00 	.word	0xe000ed00
    4668:	05fa0004 	.word	0x05fa0004

0000466c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    466c:	4b06      	ldr	r3, [pc, #24]	; (4688 <z_arm_clear_arm_mpu_config+0x1c>)
    466e:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4670:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4674:	2300      	movs	r3, #0
    4676:	4283      	cmp	r3, r0
    4678:	da05      	bge.n	4686 <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    467a:	4a03      	ldr	r2, [pc, #12]	; (4688 <z_arm_clear_arm_mpu_config+0x1c>)
    467c:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    467e:	2100      	movs	r1, #0
    4680:	6111      	str	r1, [r2, #16]
    4682:	3301      	adds	r3, #1
    4684:	e7f7      	b.n	4676 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4686:	4770      	bx	lr
    4688:	e000ed90 	.word	0xe000ed90

0000468c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    468c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    468e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4690:	2400      	movs	r4, #0
    4692:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4696:	f7ff ffe9 	bl	466c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    469a:	4623      	mov	r3, r4
    469c:	2b0f      	cmp	r3, #15
    469e:	d809      	bhi.n	46b4 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
    46a0:	f103 0120 	add.w	r1, r3, #32
    46a4:	4a0d      	ldr	r2, [pc, #52]	; (46dc <z_arm_init_arch_hw_at_boot+0x50>)
    46a6:	f04f 30ff 	mov.w	r0, #4294967295
    46aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    46ae:	3301      	adds	r3, #1
    46b0:	b2db      	uxtb	r3, r3
    46b2:	e7f3      	b.n	469c <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    46b4:	2300      	movs	r3, #0
    46b6:	2b0f      	cmp	r3, #15
    46b8:	d809      	bhi.n	46ce <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    46ba:	f103 0160 	add.w	r1, r3, #96	; 0x60
    46be:	4a07      	ldr	r2, [pc, #28]	; (46dc <z_arm_init_arch_hw_at_boot+0x50>)
    46c0:	f04f 30ff 	mov.w	r0, #4294967295
    46c4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    46c8:	3301      	adds	r3, #1
    46ca:	b2db      	uxtb	r3, r3
    46cc:	e7f3      	b.n	46b6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    46ce:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    46d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    46d4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    46d8:	bd10      	pop	{r4, pc}
    46da:	bf00      	nop
    46dc:	e000e100 	.word	0xe000e100

000046e0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    46e0:	b508      	push	{r3, lr}
	if (_current == thread) {
    46e2:	4b08      	ldr	r3, [pc, #32]	; (4704 <z_impl_k_thread_abort+0x24>)
    46e4:	689b      	ldr	r3, [r3, #8]
    46e6:	4283      	cmp	r3, r0
    46e8:	d002      	beq.n	46f0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    46ea:	f00b fc05 	bl	fef8 <z_thread_abort>
}
    46ee:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    46f0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    46f4:	2b00      	cmp	r3, #0
    46f6:	d0f8      	beq.n	46ea <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    46f8:	4a03      	ldr	r2, [pc, #12]	; (4708 <z_impl_k_thread_abort+0x28>)
    46fa:	6853      	ldr	r3, [r2, #4]
    46fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4700:	6053      	str	r3, [r2, #4]
    4702:	e7f2      	b.n	46ea <z_impl_k_thread_abort+0xa>
    4704:	20020a18 	.word	0x20020a18
    4708:	e000ed00 	.word	0xe000ed00

0000470c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    470c:	b510      	push	{r4, lr}
    470e:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4710:	4c09      	ldr	r4, [pc, #36]	; (4738 <z_arm_configure_static_mpu_regions+0x2c>)
    4712:	4623      	mov	r3, r4
    4714:	4a09      	ldr	r2, [pc, #36]	; (473c <z_arm_configure_static_mpu_regions+0x30>)
    4716:	2101      	movs	r1, #1
    4718:	4809      	ldr	r0, [pc, #36]	; (4740 <z_arm_configure_static_mpu_regions+0x34>)
    471a:	f00e f8c2 	bl	128a2 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    471e:	2300      	movs	r3, #0
    4720:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    4722:	4b08      	ldr	r3, [pc, #32]	; (4744 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4724:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    4726:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    4728:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    472a:	2101      	movs	r1, #1
    472c:	a801      	add	r0, sp, #4
    472e:	f00e f8bc 	bl	128aa <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4732:	b004      	add	sp, #16
    4734:	bd10      	pop	{r4, pc}
    4736:	bf00      	nop
    4738:	20070000 	.word	0x20070000
    473c:	20000000 	.word	0x20000000
    4740:	00068f84 	.word	0x00068f84
    4744:	20000340 	.word	0x20000340

00004748 <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    4748:	4b01      	ldr	r3, [pc, #4]	; (4750 <mpu_init+0x8>)
    474a:	4a02      	ldr	r2, [pc, #8]	; (4754 <mpu_init+0xc>)
    474c:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    474e:	4770      	bx	lr
    4750:	e000ed90 	.word	0xe000ed90
    4754:	0044ffaa 	.word	0x0044ffaa

00004758 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    4758:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    475a:	680b      	ldr	r3, [r1, #0]
    475c:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    4760:	7a0c      	ldrb	r4, [r1, #8]
    4762:	f004 031f 	and.w	r3, r4, #31
    4766:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    4768:	68cb      	ldr	r3, [r1, #12]
    476a:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    476e:	0964      	lsrs	r4, r4, #5
    4770:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    4774:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    4778:	4902      	ldr	r1, [pc, #8]	; (4784 <region_init+0x2c>)
    477a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    477c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    477e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    4780:	bc10      	pop	{r4}
    4782:	4770      	bx	lr
    4784:	e000ed90 	.word	0xe000ed90

00004788 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    478c:	b087      	sub	sp, #28
    478e:	4681      	mov	r9, r0
    4790:	9100      	str	r1, [sp, #0]
    4792:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    4794:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    4796:	2700      	movs	r7, #0
    4798:	e034      	b.n	4804 <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
    479a:	f06f 0615 	mvn.w	r6, #21
    479e:	e053      	b.n	4848 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    47a0:	45d8      	cmp	r8, fp
    47a2:	d169      	bne.n	4878 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    47a4:	4629      	mov	r1, r5
    47a6:	b2f0      	uxtb	r0, r6
    47a8:	f00e f860 	bl	1286c <mpu_configure_region>
    47ac:	e029      	b.n	4802 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
    47ae:	4b58      	ldr	r3, [pc, #352]	; (4910 <mpu_configure_regions_and_partition+0x188>)
    47b0:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    47b2:	68d9      	ldr	r1, [r3, #12]
    47b4:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
    47b8:	f022 021f 	bic.w	r2, r2, #31
    47bc:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    47be:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    47c0:	4629      	mov	r1, r5
    47c2:	b2e0      	uxtb	r0, r4
    47c4:	f00e f852 	bl	1286c <mpu_configure_region>
    47c8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    47ca:	f110 0f16 	cmn.w	r0, #22
    47ce:	f000 8097 	beq.w	4900 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    47d2:	3401      	adds	r4, #1
    47d4:	e015      	b.n	4802 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    47d6:	3b01      	subs	r3, #1
	MPU->RNR = index;
    47d8:	494d      	ldr	r1, [pc, #308]	; (4910 <mpu_configure_regions_and_partition+0x188>)
    47da:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    47dc:	690a      	ldr	r2, [r1, #16]
    47de:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    47e2:	f023 031f 	bic.w	r3, r3, #31
    47e6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    47e8:	610b      	str	r3, [r1, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    47ea:	4629      	mov	r1, r5
    47ec:	b2e0      	uxtb	r0, r4
    47ee:	f00e f83d 	bl	1286c <mpu_configure_region>
    47f2:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    47f4:	f110 0f16 	cmn.w	r0, #22
    47f8:	f000 8082 	beq.w	4900 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
    47fc:	3401      	adds	r4, #1
    47fe:	e000      	b.n	4802 <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    4800:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    4802:	3701      	adds	r7, #1
    4804:	9b00      	ldr	r3, [sp, #0]
    4806:	429f      	cmp	r7, r3
    4808:	da7a      	bge.n	4900 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
    480a:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    480e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    4812:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    4816:	f8d5 8004 	ldr.w	r8, [r5, #4]
    481a:	f1b8 0f00 	cmp.w	r8, #0
    481e:	d0f0      	beq.n	4802 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    4820:	9b01      	ldr	r3, [sp, #4]
    4822:	b123      	cbz	r3, 482e <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
    4824:	4628      	mov	r0, r5
    4826:	f00e f804 	bl	12832 <mpu_partition_is_valid>
		if (do_sanity_check &&
    482a:	2800      	cmp	r0, #0
    482c:	d064      	beq.n	48f8 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
    482e:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4832:	4658      	mov	r0, fp
    4834:	f00d fff3 	bl	1281e <arm_cmse_mpu_region_get>
    4838:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    483a:	eb08 000b 	add.w	r0, r8, fp
    483e:	3801      	subs	r0, #1
    4840:	f00d ffed 	bl	1281e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4844:	4286      	cmp	r6, r0
    4846:	d1a8      	bne.n	479a <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
    4848:	f116 0f16 	cmn.w	r6, #22
    484c:	d057      	beq.n	48fe <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
    484e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    4850:	42b3      	cmp	r3, r6
    4852:	db59      	blt.n	4908 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    4854:	4630      	mov	r0, r6
	MPU->RNR = index;
    4856:	4b2e      	ldr	r3, [pc, #184]	; (4910 <mpu_configure_regions_and_partition+0x188>)
    4858:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    485a:	68d9      	ldr	r1, [r3, #12]
    485c:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
    4860:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    4862:	691b      	ldr	r3, [r3, #16]
    4864:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    4868:	f859 300a 	ldr.w	r3, [r9, sl]
    486c:	686a      	ldr	r2, [r5, #4]
    486e:	441a      	add	r2, r3
    4870:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    4874:	4299      	cmp	r1, r3
    4876:	d093      	beq.n	47a0 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
    4878:	4299      	cmp	r1, r3
    487a:	d098      	beq.n	47ae <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
    487c:	45d8      	cmp	r8, fp
    487e:	d0aa      	beq.n	47d6 <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
    4880:	3b01      	subs	r3, #1
	MPU->RNR = index;
    4882:	4923      	ldr	r1, [pc, #140]	; (4910 <mpu_configure_regions_and_partition+0x188>)
    4884:	4606      	mov	r6, r0
    4886:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4888:	690a      	ldr	r2, [r1, #16]
    488a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    488e:	f023 031f 	bic.w	r3, r3, #31
    4892:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    4894:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
    4896:	4629      	mov	r1, r5
    4898:	b2e0      	uxtb	r0, r4
    489a:	f00d ffe7 	bl	1286c <mpu_configure_region>
    489e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    48a0:	f110 0f16 	cmn.w	r0, #22
    48a4:	d02c      	beq.n	4900 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
    48a6:	3001      	adds	r0, #1
	MPU->RNR = index;
    48a8:	4b19      	ldr	r3, [pc, #100]	; (4910 <mpu_configure_regions_and_partition+0x188>)
    48aa:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
    48ac:	68d9      	ldr	r1, [r3, #12]
    48ae:	f89d 2010 	ldrb.w	r2, [sp, #16]
    48b2:	f361 0204 	bfi	r2, r1, #0, #5
    48b6:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    48ba:	691b      	ldr	r3, [r3, #16]
    48bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    48c0:	b2d2      	uxtb	r2, r2
    48c2:	f363 1247 	bfi	r2, r3, #5, #3
    48c6:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    48ca:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    48ce:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    48d0:	4413      	add	r3, r2
    48d2:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    48d4:	f023 031f 	bic.w	r3, r3, #31
    48d8:	eba8 080b 	sub.w	r8, r8, fp
    48dc:	4443      	add	r3, r8
    48de:	3b01      	subs	r3, #1
    48e0:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    48e4:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    48e6:	a902      	add	r1, sp, #8
    48e8:	b2c0      	uxtb	r0, r0
    48ea:	f00d ffb4 	bl	12856 <region_allocate_and_init>
    48ee:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    48f0:	f110 0f16 	cmn.w	r0, #22
    48f4:	d184      	bne.n	4800 <mpu_configure_regions_and_partition+0x78>
    48f6:	e003      	b.n	4900 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    48f8:	f06f 0415 	mvn.w	r4, #21
    48fc:	e000      	b.n	4900 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
    48fe:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
    4900:	4620      	mov	r0, r4
    4902:	b007      	add	sp, #28
    4904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4908:	f06f 0415 	mvn.w	r4, #21
    490c:	e7f8      	b.n	4900 <mpu_configure_regions_and_partition+0x178>
    490e:	bf00      	nop
    4910:	e000ed90 	.word	0xe000ed90

00004914 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4914:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4916:	4c03      	ldr	r4, [pc, #12]	; (4924 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    4918:	2301      	movs	r3, #1
    491a:	7822      	ldrb	r2, [r4, #0]
    491c:	f7ff ff34 	bl	4788 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4920:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4922:	bd10      	pop	{r4, pc}
    4924:	20020a85 	.word	0x20020a85

00004928 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    4928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    492c:	4607      	mov	r7, r0
    492e:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    4930:	2400      	movs	r4, #0
    4932:	e003      	b.n	493c <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
    4934:	f06f 0515 	mvn.w	r5, #21
    4938:	e017      	b.n	496a <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
    493a:	3401      	adds	r4, #1
    493c:	45a0      	cmp	r8, r4
    493e:	dd3c      	ble.n	49ba <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
    4940:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    4944:	009a      	lsls	r2, r3, #2
    4946:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    494a:	685e      	ldr	r6, [r3, #4]
    494c:	2e00      	cmp	r6, #0
    494e:	d0f4      	beq.n	493a <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    4950:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    4954:	4648      	mov	r0, r9
    4956:	f00d ff62 	bl	1281e <arm_cmse_mpu_region_get>
    495a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    495c:	eb06 0009 	add.w	r0, r6, r9
    4960:	3801      	subs	r0, #1
    4962:	f00d ff5c 	bl	1281e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    4966:	4285      	cmp	r5, r0
    4968:	d1e4      	bne.n	4934 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
    496a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    496e:	4a16      	ldr	r2, [pc, #88]	; (49c8 <mpu_mark_areas_for_dynamic_regions+0xa0>)
    4970:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    4974:	f115 0f16 	cmn.w	r5, #22
    4978:	d020      	beq.n	49bc <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    497a:	4b14      	ldr	r3, [pc, #80]	; (49cc <mpu_mark_areas_for_dynamic_regions+0xa4>)
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	42ab      	cmp	r3, r5
    4980:	dd1f      	ble.n	49c2 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    4982:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    4986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
    498a:	4a11      	ldr	r2, [pc, #68]	; (49d0 <mpu_mark_areas_for_dynamic_regions+0xa8>)
    498c:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
    498e:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
    4990:	68d5      	ldr	r5, [r2, #12]
    4992:	7b18      	ldrb	r0, [r3, #12]
    4994:	f365 0004 	bfi	r0, r5, #0, #5
    4998:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    499a:	6910      	ldr	r0, [r2, #16]
    499c:	f3c0 0042 	ubfx	r0, r0, #1, #3
    49a0:	7b1d      	ldrb	r5, [r3, #12]
    49a2:	f360 1547 	bfi	r5, r0, #5, #3
    49a6:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    49a8:	68d1      	ldr	r1, [r2, #12]
    49aa:	f021 011f 	bic.w	r1, r1, #31
    49ae:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    49b0:	6912      	ldr	r2, [r2, #16]
    49b2:	f022 021f 	bic.w	r2, r2, #31
    49b6:	611a      	str	r2, [r3, #16]
}
    49b8:	e7bf      	b.n	493a <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    49ba:	2500      	movs	r5, #0
}
    49bc:	4628      	mov	r0, r5
    49be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    49c2:	f06f 0515 	mvn.w	r5, #21
    49c6:	e7f9      	b.n	49bc <mpu_mark_areas_for_dynamic_regions+0x94>
    49c8:	20020864 	.word	0x20020864
    49cc:	20020a85 	.word	0x20020a85
    49d0:	e000ed90 	.word	0xe000ed90

000049d4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    49d4:	4b03      	ldr	r3, [pc, #12]	; (49e4 <arm_core_mpu_enable+0x10>)
    49d6:	2205      	movs	r2, #5
    49d8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    49da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49de:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    49e2:	4770      	bx	lr
    49e4:	e000ed90 	.word	0xe000ed90

000049e8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    49e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    49ec:	4b01      	ldr	r3, [pc, #4]	; (49f4 <arm_core_mpu_disable+0xc>)
    49ee:	2200      	movs	r2, #0
    49f0:	605a      	str	r2, [r3, #4]
}
    49f2:	4770      	bx	lr
    49f4:	e000ed90 	.word	0xe000ed90

000049f8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    49f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    49fa:	4b0e      	ldr	r3, [pc, #56]	; (4a34 <z_arm_mpu_init+0x3c>)
    49fc:	681d      	ldr	r5, [r3, #0]
    49fe:	2d08      	cmp	r5, #8
    4a00:	d815      	bhi.n	4a2e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4a02:	f7ff fff1 	bl	49e8 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4a06:	f7ff fe9f 	bl	4748 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a0a:	2400      	movs	r4, #0
    4a0c:	42a5      	cmp	r5, r4
    4a0e:	d908      	bls.n	4a22 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4a10:	4b08      	ldr	r3, [pc, #32]	; (4a34 <z_arm_mpu_init+0x3c>)
    4a12:	6859      	ldr	r1, [r3, #4]
    4a14:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4a18:	4620      	mov	r0, r4
    4a1a:	f7ff fe9d 	bl	4758 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a1e:	3401      	adds	r4, #1
    4a20:	e7f4      	b.n	4a0c <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4a22:	4b05      	ldr	r3, [pc, #20]	; (4a38 <z_arm_mpu_init+0x40>)
    4a24:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4a26:	f7ff ffd5 	bl	49d4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4a2a:	2000      	movs	r0, #0
}
    4a2c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4a2e:	f04f 30ff 	mov.w	r0, #4294967295
    4a32:	e7fb      	b.n	4a2c <z_arm_mpu_init+0x34>
    4a34:	00068fa8 	.word	0x00068fa8
    4a38:	20020a85 	.word	0x20020a85

00004a3c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4a3c:	4b01      	ldr	r3, [pc, #4]	; (4a44 <__stdout_hook_install+0x8>)
    4a3e:	6018      	str	r0, [r3, #0]
}
    4a40:	4770      	bx	lr
    4a42:	bf00      	nop
    4a44:	2000002c 	.word	0x2000002c

00004a48 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4a48:	b570      	push	{r4, r5, r6, lr}
    4a4a:	4606      	mov	r6, r0
    4a4c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    4a4e:	2400      	movs	r4, #0
    4a50:	e000      	b.n	4a54 <z_impl_zephyr_read_stdin+0xc>
    4a52:	3401      	adds	r4, #1
    4a54:	42ac      	cmp	r4, r5
    4a56:	da08      	bge.n	4a6a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    4a58:	4b05      	ldr	r3, [pc, #20]	; (4a70 <z_impl_zephyr_read_stdin+0x28>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	4798      	blx	r3
    4a5e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4a60:	280a      	cmp	r0, #10
    4a62:	d001      	beq.n	4a68 <z_impl_zephyr_read_stdin+0x20>
    4a64:	280d      	cmp	r0, #13
    4a66:	d1f4      	bne.n	4a52 <z_impl_zephyr_read_stdin+0xa>
			i++;
    4a68:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    4a6a:	4620      	mov	r0, r4
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	bf00      	nop
    4a70:	20000028 	.word	0x20000028

00004a74 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a76:	4605      	mov	r5, r0
    4a78:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4a7a:	2400      	movs	r4, #0
    4a7c:	e004      	b.n	4a88 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    4a7e:	4b09      	ldr	r3, [pc, #36]	; (4aa4 <z_impl_zephyr_write_stdout+0x30>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	7830      	ldrb	r0, [r6, #0]
    4a84:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4a86:	3401      	adds	r4, #1
    4a88:	42bc      	cmp	r4, r7
    4a8a:	da08      	bge.n	4a9e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    4a8c:	192e      	adds	r6, r5, r4
    4a8e:	5d2b      	ldrb	r3, [r5, r4]
    4a90:	2b0a      	cmp	r3, #10
    4a92:	d1f4      	bne.n	4a7e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    4a94:	4b03      	ldr	r3, [pc, #12]	; (4aa4 <z_impl_zephyr_write_stdout+0x30>)
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	200d      	movs	r0, #13
    4a9a:	4798      	blx	r3
    4a9c:	e7ef      	b.n	4a7e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    4a9e:	4638      	mov	r0, r7
    4aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aa2:	bf00      	nop
    4aa4:	2000002c 	.word	0x2000002c

00004aa8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4aa8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    4aaa:	2205      	movs	r2, #5
    4aac:	4902      	ldr	r1, [pc, #8]	; (4ab8 <_exit+0x10>)
    4aae:	2001      	movs	r0, #1
    4ab0:	f00d ff0c 	bl	128cc <_write>
	while (1) {
    4ab4:	e7fe      	b.n	4ab4 <_exit+0xc>
    4ab6:	bf00      	nop
    4ab8:	00068f90 	.word	0x00068f90

00004abc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    4abc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4abe:	4b08      	ldr	r3, [pc, #32]	; (4ae0 <_sbrk+0x24>)
    4ac0:	6819      	ldr	r1, [r3, #0]
    4ac2:	4b08      	ldr	r3, [pc, #32]	; (4ae4 <_sbrk+0x28>)
    4ac4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4ac6:	440a      	add	r2, r1
    4ac8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4acc:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
    4ad0:	429a      	cmp	r2, r3
    4ad2:	d202      	bcs.n	4ada <_sbrk+0x1e>
		heap_sz += count;
    4ad4:	4b02      	ldr	r3, [pc, #8]	; (4ae0 <_sbrk+0x24>)
    4ad6:	601a      	str	r2, [r3, #0]
		ret = ptr;
    4ad8:	4770      	bx	lr
	} else {
		ret = (void *)-1;
    4ada:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    4ade:	4770      	bx	lr
    4ae0:	20020878 	.word	0x20020878
    4ae4:	20029588 	.word	0x20029588

00004ae8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4ae8:	4800      	ldr	r0, [pc, #0]	; (4aec <get_hf_flags+0x4>)
    4aea:	4770      	bx	lr
    4aec:	20020914 	.word	0x20020914

00004af0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4af0:	4b01      	ldr	r3, [pc, #4]	; (4af8 <get_subsys+0x8>)
    4af2:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    4af4:	1140      	asrs	r0, r0, #5
    4af6:	4770      	bx	lr
    4af8:	2002088c 	.word	0x2002088c

00004afc <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4afc:	b538      	push	{r3, r4, r5, lr}
    4afe:	4605      	mov	r5, r0
    4b00:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4b02:	f7ff fff5 	bl	4af0 <get_subsys>
    4b06:	4601      	mov	r1, r0
    4b08:	2240      	movs	r2, #64	; 0x40
    4b0a:	4803      	ldr	r0, [pc, #12]	; (4b18 <onoff_stop+0x1c>)
    4b0c:	f00d ff85 	bl	12a1a <stop>
    4b10:	4601      	mov	r1, r0
	notify(mgr, res);
    4b12:	4628      	mov	r0, r5
    4b14:	47a0      	blx	r4
}
    4b16:	bd38      	pop	{r3, r4, r5, pc}
    4b18:	00016e08 	.word	0x00016e08

00004b1c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b1c:	b530      	push	{r4, r5, lr}
    4b1e:	b083      	sub	sp, #12
    4b20:	4605      	mov	r5, r0
    4b22:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4b24:	f7ff ffe4 	bl	4af0 <get_subsys>
    4b28:	4601      	mov	r1, r0
    4b2a:	2340      	movs	r3, #64	; 0x40
    4b2c:	9300      	str	r3, [sp, #0]
    4b2e:	4623      	mov	r3, r4
    4b30:	4a05      	ldr	r2, [pc, #20]	; (4b48 <onoff_start+0x2c>)
    4b32:	4806      	ldr	r0, [pc, #24]	; (4b4c <onoff_start+0x30>)
    4b34:	f00d ff8b 	bl	12a4e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4b38:	1e01      	subs	r1, r0, #0
    4b3a:	db01      	blt.n	4b40 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    4b3c:	b003      	add	sp, #12
    4b3e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    4b40:	4628      	mov	r0, r5
    4b42:	47a0      	blx	r4
}
    4b44:	e7fa      	b.n	4b3c <onoff_start+0x20>
    4b46:	bf00      	nop
    4b48:	00012a97 	.word	0x00012a97
    4b4c:	00016e08 	.word	0x00016e08

00004b50 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4b50:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    4b52:	2805      	cmp	r0, #5
    4b54:	d815      	bhi.n	4b82 <clock_event_handler+0x32>
    4b56:	e8df f000 	tbb	[pc, r0]
    4b5a:	1a03      	.short	0x1a03
    4b5c:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b60:	2100      	movs	r1, #0
    4b62:	480d      	ldr	r0, [pc, #52]	; (4b98 <clock_event_handler+0x48>)
    4b64:	f00d fee4 	bl	12930 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4b68:	6883      	ldr	r3, [r0, #8]
    4b6a:	f013 0f07 	tst.w	r3, #7
    4b6e:	d108      	bne.n	4b82 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4b70:	2100      	movs	r1, #0
    4b72:	4809      	ldr	r0, [pc, #36]	; (4b98 <clock_event_handler+0x48>)
    4b74:	f00d ff3f 	bl	129f6 <clkstarted_handle>
    4b78:	e003      	b.n	4b82 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    4b7a:	2102      	movs	r1, #2
    4b7c:	4806      	ldr	r0, [pc, #24]	; (4b98 <clock_event_handler+0x48>)
    4b7e:	f00d ff3a 	bl	129f6 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    4b82:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4b84:	2103      	movs	r1, #3
    4b86:	4804      	ldr	r0, [pc, #16]	; (4b98 <clock_event_handler+0x48>)
    4b88:	f00d ff35 	bl	129f6 <clkstarted_handle>
		break;
    4b8c:	e7f9      	b.n	4b82 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4b8e:	2101      	movs	r1, #1
    4b90:	4801      	ldr	r0, [pc, #4]	; (4b98 <clock_event_handler+0x48>)
    4b92:	f00d ff30 	bl	129f6 <clkstarted_handle>
}
    4b96:	e7f4      	b.n	4b82 <clock_event_handler+0x32>
    4b98:	00016e08 	.word	0x00016e08

00004b9c <generic_hfclk_start>:
{
    4b9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b9e:	f04f 0320 	mov.w	r3, #32
    4ba2:	f3ef 8411 	mrs	r4, BASEPRI
    4ba6:	f383 8812 	msr	BASEPRI_MAX, r3
    4baa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4bae:	4a13      	ldr	r2, [pc, #76]	; (4bfc <generic_hfclk_start+0x60>)
    4bb0:	6813      	ldr	r3, [r2, #0]
    4bb2:	f043 0302 	orr.w	r3, r3, #2
    4bb6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4bb8:	f013 0f01 	tst.w	r3, #1
    4bbc:	d108      	bne.n	4bd0 <generic_hfclk_start+0x34>
	bool already_started = false;
    4bbe:	2300      	movs	r3, #0
	__asm__ volatile(
    4bc0:	f384 8811 	msr	BASEPRI, r4
    4bc4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4bc8:	b99b      	cbnz	r3, 4bf2 <generic_hfclk_start+0x56>
	hfclk_start();
    4bca:	f00d ff6c 	bl	12aa6 <hfclk_start>
}
    4bce:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4bd0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bd4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4bd8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4bdc:	f012 0f01 	tst.w	r2, #1
    4be0:	d101      	bne.n	4be6 <generic_hfclk_start+0x4a>
	bool already_started = false;
    4be2:	2300      	movs	r3, #0
    4be4:	e7ec      	b.n	4bc0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4be6:	f7ff ff7f 	bl	4ae8 <get_hf_flags>
    4bea:	f00d fef1 	bl	129d0 <set_on_state>
			already_started = true;
    4bee:	2301      	movs	r3, #1
    4bf0:	e7e6      	b.n	4bc0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    4bf2:	2100      	movs	r1, #0
    4bf4:	4802      	ldr	r0, [pc, #8]	; (4c00 <generic_hfclk_start+0x64>)
    4bf6:	f00d fefe 	bl	129f6 <clkstarted_handle>
		return;
    4bfa:	e7e8      	b.n	4bce <generic_hfclk_start+0x32>
    4bfc:	2002093c 	.word	0x2002093c
    4c00:	00016e08 	.word	0x00016e08

00004c04 <generic_hfclk_stop>:
{
    4c04:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c06:	4b08      	ldr	r3, [pc, #32]	; (4c28 <generic_hfclk_stop+0x24>)
    4c08:	e8d3 2fef 	ldaex	r2, [r3]
    4c0c:	f022 0102 	bic.w	r1, r2, #2
    4c10:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4c14:	2800      	cmp	r0, #0
    4c16:	d1f7      	bne.n	4c08 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4c18:	f012 0f01 	tst.w	r2, #1
    4c1c:	d000      	beq.n	4c20 <generic_hfclk_stop+0x1c>
}
    4c1e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    4c20:	f00d ff55 	bl	12ace <hfclk_stop>
    4c24:	e7fb      	b.n	4c1e <generic_hfclk_stop+0x1a>
    4c26:	bf00      	nop
    4c28:	2002093c 	.word	0x2002093c

00004c2c <api_blocking_start>:
{
    4c2c:	b500      	push	{lr}
    4c2e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c30:	f8cd d000 	str.w	sp, [sp]
    4c34:	f8cd d004 	str.w	sp, [sp, #4]
    4c38:	2300      	movs	r3, #0
    4c3a:	9302      	str	r3, [sp, #8]
    4c3c:	2301      	movs	r3, #1
    4c3e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c40:	466b      	mov	r3, sp
    4c42:	4a07      	ldr	r2, [pc, #28]	; (4c60 <api_blocking_start+0x34>)
    4c44:	f00d ff1f 	bl	12a86 <api_start>
	if (err < 0) {
    4c48:	2800      	cmp	r0, #0
    4c4a:	db05      	blt.n	4c58 <api_blocking_start+0x2c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4c4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c50:	2300      	movs	r3, #0
    4c52:	4668      	mov	r0, sp
    4c54:	f00a fd62 	bl	f71c <z_impl_k_sem_take>
}
    4c58:	b005      	add	sp, #20
    4c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c5e:	bf00      	nop
    4c60:	00012af7 	.word	0x00012af7

00004c64 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4c64:	b570      	push	{r4, r5, r6, lr}
    4c66:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4c68:	2200      	movs	r2, #0
    4c6a:	2101      	movs	r1, #1
    4c6c:	2005      	movs	r0, #5
    4c6e:	f7ff fa97 	bl	41a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4c72:	2005      	movs	r0, #5
    4c74:	f7ff fa76 	bl	4164 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4c78:	4811      	ldr	r0, [pc, #68]	; (4cc0 <clk_init+0x5c>)
    4c7a:	f001 f92b 	bl	5ed4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4c7e:	4b11      	ldr	r3, [pc, #68]	; (4cc4 <clk_init+0x60>)
    4c80:	4298      	cmp	r0, r3
    4c82:	d119      	bne.n	4cb8 <clk_init+0x54>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4c84:	f00e fa5a 	bl	1313c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4c88:	2400      	movs	r4, #0
    4c8a:	2c03      	cmp	r4, #3
    4c8c:	d812      	bhi.n	4cb4 <clk_init+0x50>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4c8e:	4621      	mov	r1, r4
    4c90:	4630      	mov	r0, r6
    4c92:	f00d fe4d 	bl	12930 <get_sub_data>
    4c96:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4c98:	4621      	mov	r1, r4
    4c9a:	4630      	mov	r0, r6
    4c9c:	f00d fe53 	bl	12946 <get_onoff_manager>
    4ca0:	4909      	ldr	r1, [pc, #36]	; (4cc8 <clk_init+0x64>)
    4ca2:	f00d fa39 	bl	12118 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4ca6:	2800      	cmp	r0, #0
    4ca8:	db05      	blt.n	4cb6 <clk_init+0x52>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4caa:	2301      	movs	r3, #1
    4cac:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4cae:	441c      	add	r4, r3
    4cb0:	b2e4      	uxtb	r4, r4
    4cb2:	e7ea      	b.n	4c8a <clk_init+0x26>
	}

	return 0;
    4cb4:	2000      	movs	r0, #0
}
    4cb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4cb8:	f06f 0004 	mvn.w	r0, #4
    4cbc:	e7fb      	b.n	4cb6 <clk_init+0x52>
    4cbe:	bf00      	nop
    4cc0:	00004b51 	.word	0x00004b51
    4cc4:	0bad0000 	.word	0x0bad0000
    4cc8:	0006900c 	.word	0x0006900c

00004ccc <lfclk_spinwait>:
{
    4ccc:	b570      	push	{r4, r5, r6, lr}
    4cce:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4cd0:	2801      	cmp	r0, #1
    4cd2:	d107      	bne.n	4ce4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4cd4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cd8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4cdc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4ce0:	2b02      	cmp	r3, #2
    4ce2:	d03f      	beq.n	4d64 <lfclk_spinwait+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ce4:	f011 f86a 	bl	15dbc <k_is_in_isr>
    4ce8:	b920      	cbnz	r0, 4cf4 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    4cea:	4b30      	ldr	r3, [pc, #192]	; (4dac <lfclk_spinwait+0xe0>)
    4cec:	781b      	ldrb	r3, [r3, #0]
    4cee:	b19b      	cbz	r3, 4d18 <lfclk_spinwait+0x4c>
    4cf0:	2300      	movs	r3, #0
    4cf2:	e000      	b.n	4cf6 <lfclk_spinwait+0x2a>
    4cf4:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    4cf6:	461c      	mov	r4, r3
    4cf8:	b183      	cbz	r3, 4d1c <lfclk_spinwait+0x50>
	__asm__ volatile(
    4cfa:	f04f 0320 	mov.w	r3, #32
    4cfe:	f3ef 8611 	mrs	r6, BASEPRI
    4d02:	f383 8812 	msr	BASEPRI_MAX, r3
    4d06:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    4d0a:	b9a4      	cbnz	r4, 4d36 <lfclk_spinwait+0x6a>
    p_reg->INTENCLR = mask;
    4d0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d10:	2202      	movs	r2, #2
    4d12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4d16:	e00e      	b.n	4d36 <lfclk_spinwait+0x6a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d18:	2301      	movs	r3, #1
    4d1a:	e7ec      	b.n	4cf6 <lfclk_spinwait+0x2a>
	int key = isr_mode ? irq_lock() : 0;
    4d1c:	2600      	movs	r6, #0
    4d1e:	e7f4      	b.n	4d0a <lfclk_spinwait+0x3e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4d20:	b30c      	cbz	r4, 4d66 <lfclk_spinwait+0x9a>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4d22:	4630      	mov	r0, r6
    4d24:	f7ff fa14 	bl	4150 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4d28:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d2c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    4d30:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d32:	2b01      	cmp	r3, #1
    4d34:	d01c      	beq.n	4d70 <lfclk_spinwait+0xa4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d36:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4d3a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4d3e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d42:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4d46:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    4d4a:	d126      	bne.n	4d9a <lfclk_spinwait+0xce>
    return false;
    4d4c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d4e:	2a00      	cmp	r2, #0
    4d50:	d0e6      	beq.n	4d20 <lfclk_spinwait+0x54>
    4d52:	2b02      	cmp	r3, #2
    4d54:	d001      	beq.n	4d5a <lfclk_spinwait+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d56:	2d01      	cmp	r5, #1
    4d58:	d1e2      	bne.n	4d20 <lfclk_spinwait+0x54>
	if (isr_mode) {
    4d5a:	b304      	cbz	r4, 4d9e <lfclk_spinwait+0xd2>
	__asm__ volatile(
    4d5c:	f386 8811 	msr	BASEPRI, r6
    4d60:	f3bf 8f6f 	isb	sy
}
    4d64:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    4d66:	2021      	movs	r0, #33	; 0x21
    4d68:	2100      	movs	r1, #0
    4d6a:	f00b f893 	bl	fe94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d6e:	e7db      	b.n	4d28 <lfclk_spinwait+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d70:	4b0f      	ldr	r3, [pc, #60]	; (4db0 <lfclk_spinwait+0xe4>)
    4d72:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4d74:	2b00      	cmp	r3, #0
    4d76:	d0de      	beq.n	4d36 <lfclk_spinwait+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d78:	4b0d      	ldr	r3, [pc, #52]	; (4db0 <lfclk_spinwait+0xe4>)
    4d7a:	2200      	movs	r2, #0
    4d7c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4d7e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d84:	2202      	movs	r2, #2
    4d86:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d8a:	4b0a      	ldr	r3, [pc, #40]	; (4db4 <lfclk_spinwait+0xe8>)
    4d8c:	2220      	movs	r2, #32
    4d8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d92:	4b09      	ldr	r3, [pc, #36]	; (4db8 <lfclk_spinwait+0xec>)
    4d94:	2201      	movs	r2, #1
    4d96:	601a      	str	r2, [r3, #0]
}
    4d98:	e7cd      	b.n	4d36 <lfclk_spinwait+0x6a>
                return true;
    4d9a:	2201      	movs	r2, #1
    4d9c:	e7d7      	b.n	4d4e <lfclk_spinwait+0x82>
    p_reg->INTENSET = mask;
    4d9e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4da2:	2202      	movs	r2, #2
    4da4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4da8:	e7dc      	b.n	4d64 <lfclk_spinwait+0x98>
    4daa:	bf00      	nop
    4dac:	20020a87 	.word	0x20020a87
    4db0:	50005104 	.word	0x50005104
    4db4:	e000e100 	.word	0xe000e100
    4db8:	50005008 	.word	0x50005008

00004dbc <z_nrf_clock_control_lf_on>:
{
    4dbc:	b510      	push	{r4, lr}
    4dbe:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4dc0:	4b0e      	ldr	r3, [pc, #56]	; (4dfc <z_nrf_clock_control_lf_on+0x40>)
    4dc2:	2101      	movs	r1, #1
    4dc4:	e8d3 2fef 	ldaex	r2, [r3]
    4dc8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4dcc:	2800      	cmp	r0, #0
    4dce:	d1f9      	bne.n	4dc4 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4dd0:	b11a      	cbz	r2, 4dda <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4dd2:	1e63      	subs	r3, r4, #1
    4dd4:	2b01      	cmp	r3, #1
    4dd6:	d90c      	bls.n	4df2 <z_nrf_clock_control_lf_on+0x36>
}
    4dd8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4dda:	4809      	ldr	r0, [pc, #36]	; (4e00 <z_nrf_clock_control_lf_on+0x44>)
    4ddc:	f00d fdb3 	bl	12946 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4de0:	4908      	ldr	r1, [pc, #32]	; (4e04 <z_nrf_clock_control_lf_on+0x48>)
    4de2:	2300      	movs	r3, #0
    4de4:	604b      	str	r3, [r1, #4]
    4de6:	60cb      	str	r3, [r1, #12]
    4de8:	2301      	movs	r3, #1
    4dea:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4dec:	f00d f9b0 	bl	12150 <onoff_request>
    4df0:	e7ef      	b.n	4dd2 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4df2:	4620      	mov	r0, r4
    4df4:	f7ff ff6a 	bl	4ccc <lfclk_spinwait>
		break;
    4df8:	e7ee      	b.n	4dd8 <z_nrf_clock_control_lf_on+0x1c>
    4dfa:	bf00      	nop
    4dfc:	20020940 	.word	0x20020940
    4e00:	00016e08 	.word	0x00016e08
    4e04:	2002087c 	.word	0x2002087c

00004e08 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4e08:	b538      	push	{r3, r4, r5, lr}
    4e0a:	4604      	mov	r4, r0
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    4e0c:	b2c5      	uxtb	r5, r0
    4e0e:	4b0b      	ldr	r3, [pc, #44]	; (4e3c <console_out+0x34>)
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	4628      	mov	r0, r5
    4e14:	4798      	blx	r3

	if (handled_by_debug_server) {
    4e16:	2801      	cmp	r0, #1
    4e18:	d007      	beq.n	4e2a <console_out+0x22>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4e1a:	2c0a      	cmp	r4, #10
    4e1c:	d007      	beq.n	4e2e <console_out+0x26>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4e1e:	4b08      	ldr	r3, [pc, #32]	; (4e40 <console_out+0x38>)
    4e20:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4e22:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4e24:	685b      	ldr	r3, [r3, #4]
    4e26:	4629      	mov	r1, r5
    4e28:	4798      	blx	r3

	return c;
}
    4e2a:	4620      	mov	r0, r4
    4e2c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_console_dev, '\r');
    4e2e:	4b04      	ldr	r3, [pc, #16]	; (4e40 <console_out+0x38>)
    4e30:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4e32:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4e34:	685b      	ldr	r3, [r3, #4]
    4e36:	210d      	movs	r1, #13
    4e38:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4e3a:	e7f0      	b.n	4e1e <console_out+0x16>
    4e3c:	20000030 	.word	0x20000030
    4e40:	20020944 	.word	0x20020944

00004e44 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4e44:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    4e46:	4c04      	ldr	r4, [pc, #16]	; (4e58 <uart_console_hook_install+0x14>)
    4e48:	4620      	mov	r0, r4
    4e4a:	f7ff fdf7 	bl	4a3c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4e4e:	4620      	mov	r0, r4
    4e50:	f7fe f89c 	bl	2f8c <__printk_hook_install>
}
    4e54:	bd10      	pop	{r4, pc}
    4e56:	bf00      	nop
    4e58:	00004e09 	.word	0x00004e09

00004e5c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4e5c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4e5e:	4806      	ldr	r0, [pc, #24]	; (4e78 <uart_console_init+0x1c>)
    4e60:	4b06      	ldr	r3, [pc, #24]	; (4e7c <uart_console_init+0x20>)
    4e62:	6018      	str	r0, [r3, #0]
    4e64:	f010 ff25 	bl	15cb2 <z_device_ready>
    4e68:	b118      	cbz	r0, 4e72 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    4e6a:	f7ff ffeb 	bl	4e44 <uart_console_hook_install>

	return 0;
    4e6e:	2000      	movs	r0, #0
}
    4e70:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4e72:	f06f 0012 	mvn.w	r0, #18
    4e76:	e7fb      	b.n	4e70 <uart_console_init+0x14>
    4e78:	00016e20 	.word	0x00016e20
    4e7c:	20020944 	.word	0x20020944

00004e80 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    4e80:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    4e82:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e84:	f8d3 c004 	ldr.w	ip, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4e88:	4b38      	ldr	r3, [pc, #224]	; (4f6c <gpio_nrfx_config+0xec>)
    4e8a:	4013      	ands	r3, r2
    4e8c:	4c38      	ldr	r4, [pc, #224]	; (4f70 <gpio_nrfx_config+0xf0>)
    4e8e:	42a3      	cmp	r3, r4
    4e90:	d027      	beq.n	4ee2 <gpio_nrfx_config+0x62>
    4e92:	d812      	bhi.n	4eba <gpio_nrfx_config+0x3a>
    4e94:	2b06      	cmp	r3, #6
    4e96:	d026      	beq.n	4ee6 <gpio_nrfx_config+0x66>
    4e98:	d904      	bls.n	4ea4 <gpio_nrfx_config+0x24>
    4e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4e9e:	d109      	bne.n	4eb4 <gpio_nrfx_config+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    4ea0:	2501      	movs	r5, #1
    4ea2:	e016      	b.n	4ed2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4ea4:	b30b      	cbz	r3, 4eea <gpio_nrfx_config+0x6a>
    4ea6:	2b02      	cmp	r3, #2
    4ea8:	d101      	bne.n	4eae <gpio_nrfx_config+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    4eaa:	2504      	movs	r5, #4
    4eac:	e011      	b.n	4ed2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4eae:	f06f 0015 	mvn.w	r0, #21
    4eb2:	e049      	b.n	4f48 <gpio_nrfx_config+0xc8>
    4eb4:	f06f 0015 	mvn.w	r0, #21
    4eb8:	e046      	b.n	4f48 <gpio_nrfx_config+0xc8>
    4eba:	4c2e      	ldr	r4, [pc, #184]	; (4f74 <gpio_nrfx_config+0xf4>)
    4ebc:	42a3      	cmp	r3, r4
    4ebe:	d016      	beq.n	4eee <gpio_nrfx_config+0x6e>
    4ec0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    4ec4:	d101      	bne.n	4eca <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0H1;
    4ec6:	2503      	movs	r5, #3
    4ec8:	e003      	b.n	4ed2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    4ece:	d149      	bne.n	4f64 <gpio_nrfx_config+0xe4>
		drive = NRF_GPIO_PIN_S0H1;
    4ed0:	2502      	movs	r5, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    4ed2:	f012 0f10 	tst.w	r2, #16
    4ed6:	d10c      	bne.n	4ef2 <gpio_nrfx_config+0x72>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    4ed8:	f012 0f20 	tst.w	r2, #32
    4edc:	d036      	beq.n	4f4c <gpio_nrfx_config+0xcc>
		pull = NRF_GPIO_PIN_PULLDOWN;
    4ede:	2601      	movs	r6, #1
    4ee0:	e008      	b.n	4ef4 <gpio_nrfx_config+0x74>
		drive = NRF_GPIO_PIN_H0D1;
    4ee2:	2507      	movs	r5, #7
    4ee4:	e7f5      	b.n	4ed2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_S0D1;
    4ee6:	2506      	movs	r5, #6
    4ee8:	e7f3      	b.n	4ed2 <gpio_nrfx_config+0x52>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4eea:	2500      	movs	r5, #0
    4eec:	e7f1      	b.n	4ed2 <gpio_nrfx_config+0x52>
		drive = NRF_GPIO_PIN_D0H1;
    4eee:	2505      	movs	r5, #5
    4ef0:	e7ef      	b.n	4ed2 <gpio_nrfx_config+0x52>
		pull = NRF_GPIO_PIN_PULLUP;
    4ef2:	2603      	movs	r6, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    4ef4:	f3c2 2440 	ubfx	r4, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    4ef8:	f412 7f80 	tst.w	r2, #256	; 0x100
    4efc:	bf0c      	ite	eq
    4efe:	2701      	moveq	r7, #1
    4f00:	2700      	movne	r7, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    4f02:	f412 7f00 	tst.w	r2, #512	; 0x200
    4f06:	d006      	beq.n	4f16 <gpio_nrfx_config+0x96>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    4f08:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4f0c:	d020      	beq.n	4f50 <gpio_nrfx_config+0xd0>
			nrf_gpio_port_out_set(reg, BIT(pin));
    4f0e:	2301      	movs	r3, #1
    4f10:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4f12:	f8cc 3008 	str.w	r3, [ip, #8]
	return port->config;
    4f16:	6843      	ldr	r3, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    4f18:	7a18      	ldrb	r0, [r3, #8]
    4f1a:	f001 031f 	and.w	r3, r1, #31
    4f1e:	ea43 1140 	orr.w	r1, r3, r0, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4f22:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f24:	2901      	cmp	r1, #1
    4f26:	d01b      	beq.n	4f60 <gpio_nrfx_config+0xe0>
        case 0: return NRF_P0;
    4f28:	4813      	ldr	r0, [pc, #76]	; (4f78 <gpio_nrfx_config+0xf8>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4f2a:	3380      	adds	r3, #128	; 0x80
    4f2c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    4f30:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f34:	ea44 0247 	orr.w	r2, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4f38:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4f3c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4f40:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    4f42:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    4f46:	2000      	movs	r0, #0
}
    4f48:	bcf0      	pop	{r4, r5, r6, r7}
    4f4a:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    4f4c:	2600      	movs	r6, #0
    4f4e:	e7d1      	b.n	4ef4 <gpio_nrfx_config+0x74>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    4f50:	f412 6f80 	tst.w	r2, #1024	; 0x400
    4f54:	d0df      	beq.n	4f16 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    4f56:	2301      	movs	r3, #1
    4f58:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4f5a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    4f5e:	e7da      	b.n	4f16 <gpio_nrfx_config+0x96>
        case 1: return NRF_P1;
    4f60:	4806      	ldr	r0, [pc, #24]	; (4f7c <gpio_nrfx_config+0xfc>)
    4f62:	e7e2      	b.n	4f2a <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    4f64:	f06f 0015 	mvn.w	r0, #21
    4f68:	e7ee      	b.n	4f48 <gpio_nrfx_config+0xc8>
    4f6a:	bf00      	nop
    4f6c:	00f00006 	.word	0x00f00006
    4f70:	00100006 	.word	0x00100006
    4f74:	00400002 	.word	0x00400002
    4f78:	50842500 	.word	0x50842500
    4f7c:	50842800 	.word	0x50842800

00004f80 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    4f80:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    4f82:	6905      	ldr	r5, [r0, #16]
	return port->config;
    4f84:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    4f86:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4f88:	696a      	ldr	r2, [r5, #20]
    4f8a:	69ab      	ldr	r3, [r5, #24]
    4f8c:	4313      	orrs	r3, r2
    4f8e:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    4f92:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    4f94:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    4f96:	e010      	b.n	4fba <cfg_level_pins+0x3a>
		return NRF_GPIO_PIN_SENSE_HIGH;
    4f98:	f04f 0c02 	mov.w	ip, #2
    4f9c:	e01c      	b.n	4fd8 <cfg_level_pins+0x58>
    4f9e:	4f13      	ldr	r7, [pc, #76]	; (4fec <cfg_level_pins+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4fa0:	3480      	adds	r4, #128	; 0x80
    4fa2:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    4fa6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4faa:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    4fae:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    4fb2:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    4fb6:	3001      	adds	r0, #1
		bit <<= 1;
    4fb8:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    4fba:	b1a1      	cbz	r1, 4fe6 <cfg_level_pins+0x66>
		if (level_pins & bit) {
    4fbc:	420b      	tst	r3, r1
    4fbe:	d0fa      	beq.n	4fb6 <cfg_level_pins+0x36>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4fc0:	7a34      	ldrb	r4, [r6, #8]
    4fc2:	f000 021f 	and.w	r2, r0, #31
    4fc6:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    4fca:	692c      	ldr	r4, [r5, #16]
    4fcc:	40c4      	lsrs	r4, r0
    4fce:	f014 0f01 	tst.w	r4, #1
    4fd2:	d1e1      	bne.n	4f98 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    4fd4:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    4fd8:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    4fdc:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fde:	2a01      	cmp	r2, #1
    4fe0:	d0dd      	beq.n	4f9e <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    4fe2:	4f03      	ldr	r7, [pc, #12]	; (4ff0 <cfg_level_pins+0x70>)
    4fe4:	e7dc      	b.n	4fa0 <cfg_level_pins+0x20>
	}
}
    4fe6:	bcf0      	pop	{r4, r5, r6, r7}
    4fe8:	4770      	bx	lr
    4fea:	bf00      	nop
    4fec:	50842800 	.word	0x50842800
    4ff0:	50842500 	.word	0x50842500

00004ff4 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    4ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ff6:	468c      	mov	ip, r1
	return port->data;
    4ff8:	6903      	ldr	r3, [r0, #16]
	return port->config;
    4ffa:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    4ffc:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    4ffe:	695a      	ldr	r2, [r3, #20]
    5000:	6998      	ldr	r0, [r3, #24]
    5002:	4302      	orrs	r2, r0
    5004:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    5008:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    500a:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    500c:	6918      	ldr	r0, [r3, #16]
    500e:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    5010:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    5014:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    5016:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    5018:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    501a:	e015      	b.n	5048 <check_level_trigger_pins+0x54>
        case 1: return NRF_P1;
    501c:	f8df e070 	ldr.w	lr, [pc, #112]	; 5090 <check_level_trigger_pins+0x9c>
    5020:	e025      	b.n	506e <check_level_trigger_pins+0x7a>
    *p_pin = pin_number & 0x1F;
    5022:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5026:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5028:	2a01      	cmp	r2, #1
    502a:	d02d      	beq.n	5088 <check_level_trigger_pins+0x94>
        case 0: return NRF_P0;
    502c:	f8df e064 	ldr.w	lr, [pc, #100]	; 5094 <check_level_trigger_pins+0xa0>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5030:	f106 0280 	add.w	r2, r6, #128	; 0x80
    5034:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    5038:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    503c:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    5040:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    5044:	3501      	adds	r5, #1
		bit <<= 1;
    5046:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    5048:	b30c      	cbz	r4, 508e <check_level_trigger_pins+0x9a>
		if (check_pins & bit) {
    504a:	4223      	tst	r3, r4
    504c:	d0fa      	beq.n	5044 <check_level_trigger_pins+0x50>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    504e:	7a0e      	ldrb	r6, [r1, #8]
    5050:	f005 021f 	and.w	r2, r5, #31
    5054:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    5058:	423b      	tst	r3, r7
    505a:	d1e2      	bne.n	5022 <check_level_trigger_pins+0x2e>
    *p_pin = pin_number & 0x1F;
    505c:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    5060:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5064:	f1be 0f01 	cmp.w	lr, #1
    5068:	d0d8      	beq.n	501c <check_level_trigger_pins+0x28>
        case 0: return NRF_P0;
    506a:	f8df e028 	ldr.w	lr, [pc, #40]	; 5094 <check_level_trigger_pins+0xa0>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    506e:	3680      	adds	r6, #128	; 0x80
    5070:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5074:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    5078:	2e02      	cmp	r6, #2
    507a:	d1d2      	bne.n	5022 <check_level_trigger_pins+0x2e>
					*sense_levels |= bit;
    507c:	f8dc 6000 	ldr.w	r6, [ip]
    5080:	431e      	orrs	r6, r3
    5082:	f8cc 6000 	str.w	r6, [ip]
    5086:	e7cc      	b.n	5022 <check_level_trigger_pins+0x2e>
        case 1: return NRF_P1;
    5088:	f8df e004 	ldr.w	lr, [pc, #4]	; 5090 <check_level_trigger_pins+0x9c>
    508c:	e7d0      	b.n	5030 <check_level_trigger_pins+0x3c>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5090:	50842800 	.word	0x50842800
    5094:	50842500 	.word	0x50842500

00005098 <gpiote_pin_cleanup>:
{
    5098:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    509a:	4b14      	ldr	r3, [pc, #80]	; (50ec <gpiote_pin_cleanup+0x54>)
    509c:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    50a0:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    50a2:	2300      	movs	r3, #0
    50a4:	e000      	b.n	50a8 <gpiote_pin_cleanup+0x10>
    50a6:	3301      	adds	r3, #1
    50a8:	2b07      	cmp	r3, #7
    50aa:	d81d      	bhi.n	50e8 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50ac:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    50b0:	490e      	ldr	r1, [pc, #56]	; (50ec <gpiote_pin_cleanup+0x54>)
    50b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    50b6:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    50ba:	4290      	cmp	r0, r2
    50bc:	d1f3      	bne.n	50a6 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    50be:	fa24 f203 	lsr.w	r2, r4, r3
    50c2:	f012 0f01 	tst.w	r2, #1
    50c6:	d0ee      	beq.n	50a6 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    50c8:	460a      	mov	r2, r1
    50ca:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    50ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    50d2:	f021 0101 	bic.w	r1, r1, #1
    50d6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    50da:	2101      	movs	r1, #1
    50dc:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    50de:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    50e2:	b2d8      	uxtb	r0, r3
    50e4:	f001 f968 	bl	63b8 <nrfx_gpiote_channel_free>
}
    50e8:	bd10      	pop	{r4, pc}
    50ea:	bf00      	nop
    50ec:	5000d000 	.word	0x5000d000

000050f0 <gpiote_channel_alloc>:
{
    50f0:	b570      	push	{r4, r5, r6, lr}
    50f2:	b082      	sub	sp, #8
    50f4:	4604      	mov	r4, r0
    50f6:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    50f8:	f10d 0007 	add.w	r0, sp, #7
    50fc:	f001 f978 	bl	63f0 <nrfx_gpiote_channel_alloc>
    5100:	4b1c      	ldr	r3, [pc, #112]	; (5174 <gpiote_channel_alloc+0x84>)
    5102:	4298      	cmp	r0, r3
    5104:	d132      	bne.n	516c <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    5106:	f89d 3007 	ldrb.w	r3, [sp, #7]
    510a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    510e:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5110:	4e19      	ldr	r6, [pc, #100]	; (5178 <gpiote_channel_alloc+0x88>)
    5112:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5116:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    511a:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    511e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    5122:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5126:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    512a:	0224      	lsls	r4, r4, #8
    512c:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5130:	042d      	lsls	r5, r5, #16
    5132:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5136:	432c      	orrs	r4, r5
    5138:	430c      	orrs	r4, r1
    513a:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    513e:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    5142:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5146:	2000      	movs	r0, #0
    5148:	6018      	str	r0, [r3, #0]
    514a:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    514c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5150:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    5154:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    5158:	f042 0201 	orr.w	r2, r2, #1
    515c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    5160:	2301      	movs	r3, #1
    5162:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    5164:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    5168:	b002      	add	sp, #8
    516a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    516c:	f06f 0012 	mvn.w	r0, #18
    5170:	e7fa      	b.n	5168 <gpiote_channel_alloc+0x78>
    5172:	bf00      	nop
    5174:	0bad0000 	.word	0x0bad0000
    5178:	5000d000 	.word	0x5000d000

0000517c <gpiote_pin_int_cfg>:
{
    517c:	b570      	push	{r4, r5, r6, lr}
    517e:	460d      	mov	r5, r1
	return port->data;
    5180:	6906      	ldr	r6, [r0, #16]
	return port->config;
    5182:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5184:	7a1b      	ldrb	r3, [r3, #8]
    5186:	f001 041f 	and.w	r4, r1, #31
    518a:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    518e:	4620      	mov	r0, r4
    5190:	f7ff ff82 	bl	5098 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    5194:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    5198:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    519a:	2b01      	cmp	r3, #1
    519c:	d01f      	beq.n	51de <gpiote_pin_int_cfg+0x62>
        case 0: return NRF_P0;
    519e:	4a1f      	ldr	r2, [pc, #124]	; (521c <gpiote_pin_int_cfg+0xa0>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    51a0:	f100 0180 	add.w	r1, r0, #128	; 0x80
    51a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    51a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    51ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    51b0:	68f3      	ldr	r3, [r6, #12]
    51b2:	40eb      	lsrs	r3, r5
    51b4:	f013 0f01 	tst.w	r3, #1
    51b8:	d02e      	beq.n	5218 <gpiote_pin_int_cfg+0x9c>
		if (data->trig_edge & BIT(pin)) {
    51ba:	6973      	ldr	r3, [r6, #20]
    51bc:	40eb      	lsrs	r3, r5
    51be:	f013 0f01 	tst.w	r3, #1
    51c2:	d015      	beq.n	51f0 <gpiote_pin_int_cfg+0x74>
				if (data->double_edge & BIT(pin)) {
    51c4:	69b3      	ldr	r3, [r6, #24]
    51c6:	40eb      	lsrs	r3, r5
    51c8:	f013 0f01 	tst.w	r3, #1
    51cc:	d109      	bne.n	51e2 <gpiote_pin_int_cfg+0x66>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    51ce:	6931      	ldr	r1, [r6, #16]
    51d0:	fa21 f505 	lsr.w	r5, r1, r5
    51d4:	f015 0f01 	tst.w	r5, #1
    51d8:	d008      	beq.n	51ec <gpiote_pin_int_cfg+0x70>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    51da:	2101      	movs	r1, #1
    51dc:	e002      	b.n	51e4 <gpiote_pin_int_cfg+0x68>
        case 1: return NRF_P1;
    51de:	4a10      	ldr	r2, [pc, #64]	; (5220 <gpiote_pin_int_cfg+0xa4>)
    51e0:	e7de      	b.n	51a0 <gpiote_pin_int_cfg+0x24>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    51e2:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    51e4:	4620      	mov	r0, r4
    51e6:	f7ff ff83 	bl	50f0 <gpiote_channel_alloc>
    51ea:	e016      	b.n	521a <gpiote_pin_int_cfg+0x9e>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    51ec:	2102      	movs	r1, #2
    51ee:	e7f9      	b.n	51e4 <gpiote_pin_int_cfg+0x68>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    51f0:	6931      	ldr	r1, [r6, #16]
    51f2:	fa21 f505 	lsr.w	r5, r1, r5
    51f6:	f015 0f01 	tst.w	r5, #1
    51fa:	d10b      	bne.n	5214 <gpiote_pin_int_cfg+0x98>
	return NRF_GPIO_PIN_SENSE_LOW;
    51fc:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    51fe:	3080      	adds	r0, #128	; 0x80
    5200:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    5204:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    5208:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    520c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    5210:	2000      	movs	r0, #0
}
    5212:	e002      	b.n	521a <gpiote_pin_int_cfg+0x9e>
		return NRF_GPIO_PIN_SENSE_HIGH;
    5214:	2102      	movs	r1, #2
    5216:	e7f2      	b.n	51fe <gpiote_pin_int_cfg+0x82>
	int res = 0;
    5218:	2000      	movs	r0, #0
}
    521a:	bd70      	pop	{r4, r5, r6, pc}
    521c:	50842500 	.word	0x50842500
    5220:	50842800 	.word	0x50842800

00005224 <gpio_nrfx_pin_interrupt_configure>:
{
    5224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    5226:	6904      	ldr	r4, [r0, #16]
	return port->config;
    5228:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    522a:	7a2e      	ldrb	r6, [r5, #8]
    522c:	f001 051f 	and.w	r5, r1, #31
    5230:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    5234:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    5238:	d025      	beq.n	5286 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    523a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    523e:	d034      	beq.n	52aa <gpio_nrfx_pin_interrupt_configure+0x86>
    5240:	68e5      	ldr	r5, [r4, #12]
    5242:	2601      	movs	r6, #1
    5244:	408e      	lsls	r6, r1
    5246:	4335      	orrs	r5, r6
    5248:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    524a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    524e:	d032      	beq.n	52b6 <gpio_nrfx_pin_interrupt_configure+0x92>
    5250:	6962      	ldr	r2, [r4, #20]
    5252:	2501      	movs	r5, #1
    5254:	408d      	lsls	r5, r1
    5256:	ea22 0205 	bic.w	r2, r2, r5
    525a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    525c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    5260:	d02e      	beq.n	52c0 <gpio_nrfx_pin_interrupt_configure+0x9c>
    5262:	69a2      	ldr	r2, [r4, #24]
    5264:	2501      	movs	r5, #1
    5266:	408d      	lsls	r5, r1
    5268:	ea22 0205 	bic.w	r2, r2, r5
    526c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    526e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    5272:	d02a      	beq.n	52ca <gpio_nrfx_pin_interrupt_configure+0xa6>
    5274:	6923      	ldr	r3, [r4, #16]
    5276:	2201      	movs	r2, #1
    5278:	408a      	lsls	r2, r1
    527a:	ea23 0302 	bic.w	r3, r3, r2
    527e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    5280:	f7ff ff7c 	bl	517c <gpiote_pin_int_cfg>
}
    5284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    5286:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    528a:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    528c:	2d01      	cmp	r5, #1
    528e:	d00a      	beq.n	52a6 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    5290:	4f10      	ldr	r7, [pc, #64]	; (52d4 <gpio_nrfx_pin_interrupt_configure+0xb0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5292:	f106 0580 	add.w	r5, r6, #128	; 0x80
    5296:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    529a:	f015 0f01 	tst.w	r5, #1
    529e:	d0cc      	beq.n	523a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    52a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    52a4:	e7ee      	b.n	5284 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    52a6:	4f0c      	ldr	r7, [pc, #48]	; (52d8 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    52a8:	e7f3      	b.n	5292 <gpio_nrfx_pin_interrupt_configure+0x6e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    52aa:	68e5      	ldr	r5, [r4, #12]
    52ac:	2601      	movs	r6, #1
    52ae:	408e      	lsls	r6, r1
    52b0:	ea25 0506 	bic.w	r5, r5, r6
    52b4:	e7c8      	b.n	5248 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    52b6:	6962      	ldr	r2, [r4, #20]
    52b8:	2501      	movs	r5, #1
    52ba:	408d      	lsls	r5, r1
    52bc:	432a      	orrs	r2, r5
    52be:	e7cc      	b.n	525a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    52c0:	69a2      	ldr	r2, [r4, #24]
    52c2:	2501      	movs	r5, #1
    52c4:	408d      	lsls	r5, r1
    52c6:	432a      	orrs	r2, r5
    52c8:	e7d0      	b.n	526c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    52ca:	6923      	ldr	r3, [r4, #16]
    52cc:	2201      	movs	r2, #1
    52ce:	408a      	lsls	r2, r1
    52d0:	4313      	orrs	r3, r2
    52d2:	e7d4      	b.n	527e <gpio_nrfx_pin_interrupt_configure+0x5a>
    52d4:	50842500 	.word	0x50842500
    52d8:	50842800 	.word	0x50842800

000052dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    52dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    52de:	4b0b      	ldr	r3, [pc, #44]	; (530c <gpio_nrfx_init+0x30>)
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	b10b      	cbz	r3, 52e8 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    52e4:	2000      	movs	r0, #0
    52e6:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    52e8:	4b08      	ldr	r3, [pc, #32]	; (530c <gpio_nrfx_init+0x30>)
    52ea:	2201      	movs	r2, #1
    52ec:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    52ee:	2200      	movs	r2, #0
    52f0:	2105      	movs	r1, #5
    52f2:	200d      	movs	r0, #13
    52f4:	f7fe ff54 	bl	41a0 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    52f8:	200d      	movs	r0, #13
    52fa:	f7fe ff33 	bl	4164 <arch_irq_enable>
    52fe:	4b04      	ldr	r3, [pc, #16]	; (5310 <gpio_nrfx_init+0x34>)
    5300:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5304:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5308:	e7ec      	b.n	52e4 <gpio_nrfx_init+0x8>
    530a:	bf00      	nop
    530c:	20020a86 	.word	0x20020a86
    5310:	5000d000 	.word	0x5000d000

00005314 <gpiote_event_handler>:
{
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    5318:	2300      	movs	r3, #0
    531a:	9302      	str	r3, [sp, #8]
    531c:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    531e:	9300      	str	r3, [sp, #0]
    5320:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5322:	4b46      	ldr	r3, [pc, #280]	; (543c <gpiote_event_handler+0x128>)
    5324:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    5326:	b90c      	cbnz	r4, 532c <gpiote_event_handler+0x18>
{
    5328:	2100      	movs	r1, #0
    532a:	e011      	b.n	5350 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    532c:	4d44      	ldr	r5, [pc, #272]	; (5440 <gpiote_event_handler+0x12c>)
    532e:	4669      	mov	r1, sp
    5330:	4628      	mov	r0, r5
    5332:	f7ff fe5f 	bl	4ff4 <check_level_trigger_pins>
		fired_triggers[0] =
    5336:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    5338:	a901      	add	r1, sp, #4
    533a:	f105 0018 	add.w	r0, r5, #24
    533e:	f7ff fe59 	bl	4ff4 <check_level_trigger_pins>
		fired_triggers[1] =
    5342:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5344:	4b3d      	ldr	r3, [pc, #244]	; (543c <gpiote_event_handler+0x128>)
    5346:	2200      	movs	r2, #0
    5348:	601a      	str	r2, [r3, #0]
    534a:	681b      	ldr	r3, [r3, #0]
}
    534c:	e7ec      	b.n	5328 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    534e:	3101      	adds	r1, #1
    5350:	2907      	cmp	r1, #7
    5352:	d82d      	bhi.n	53b0 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    5354:	f101 0340 	add.w	r3, r1, #64	; 0x40
    5358:	009b      	lsls	r3, r3, #2
    535a:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    535c:	2301      	movs	r3, #1
    535e:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    5360:	4838      	ldr	r0, [pc, #224]	; (5444 <gpiote_event_handler+0x130>)
    5362:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    5366:	4203      	tst	r3, r0
    5368:	d0f1      	beq.n	534e <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    536a:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    536e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    5372:	681b      	ldr	r3, [r3, #0]
    5374:	2b00      	cmp	r3, #0
    5376:	d0ea      	beq.n	534e <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5378:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    537c:	4831      	ldr	r0, [pc, #196]	; (5444 <gpiote_event_handler+0x130>)
    537e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    5382:	f3c0 3340 	ubfx	r3, r0, #13, #1
    5386:	f3c0 2004 	ubfx	r0, r0, #8, #5
    538a:	2501      	movs	r5, #1
    538c:	fa05 f000 	lsl.w	r0, r5, r0
    5390:	ad04      	add	r5, sp, #16
    5392:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5396:	f853 5c08 	ldr.w	r5, [r3, #-8]
    539a:	4305      	orrs	r5, r0
    539c:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    53a0:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    53a4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    53a8:	2200      	movs	r2, #0
    53aa:	601a      	str	r2, [r3, #0]
    53ac:	681b      	ldr	r3, [r3, #0]
}
    53ae:	e7ce      	b.n	534e <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    53b0:	9e02      	ldr	r6, [sp, #8]
    53b2:	b92e      	cbnz	r6, 53c0 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    53b4:	9e03      	ldr	r6, [sp, #12]
    53b6:	b9ee      	cbnz	r6, 53f4 <gpiote_event_handler+0xe0>
	if (port_event) {
    53b8:	2c00      	cmp	r4, #0
    53ba:	d135      	bne.n	5428 <gpiote_event_handler+0x114>
}
    53bc:	b004      	add	sp, #16
    53be:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    53c0:	4b21      	ldr	r3, [pc, #132]	; (5448 <gpiote_event_handler+0x134>)
    53c2:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    53c4:	b119      	cbz	r1, 53ce <gpiote_event_handler+0xba>
    53c6:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    53c8:	b149      	cbz	r1, 53de <gpiote_event_handler+0xca>
	return node->next;
    53ca:	680d      	ldr	r5, [r1, #0]
    53cc:	e007      	b.n	53de <gpiote_event_handler+0xca>
    53ce:	460d      	mov	r5, r1
    53d0:	e005      	b.n	53de <gpiote_event_handler+0xca>
    53d2:	b16d      	cbz	r5, 53f0 <gpiote_event_handler+0xdc>
    53d4:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    53d6:	b105      	cbz	r5, 53da <gpiote_event_handler+0xc6>
	return node->next;
    53d8:	682b      	ldr	r3, [r5, #0]
    53da:	4629      	mov	r1, r5
    53dc:	461d      	mov	r5, r3
    53de:	2900      	cmp	r1, #0
    53e0:	d0e8      	beq.n	53b4 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    53e2:	688a      	ldr	r2, [r1, #8]
    53e4:	4032      	ands	r2, r6
    53e6:	d0f4      	beq.n	53d2 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    53e8:	684b      	ldr	r3, [r1, #4]
    53ea:	4815      	ldr	r0, [pc, #84]	; (5440 <gpiote_event_handler+0x12c>)
    53ec:	4798      	blx	r3
    53ee:	e7f0      	b.n	53d2 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    53f0:	462b      	mov	r3, r5
    53f2:	e7f2      	b.n	53da <gpiote_event_handler+0xc6>
	return list->head;
    53f4:	4b15      	ldr	r3, [pc, #84]	; (544c <gpiote_event_handler+0x138>)
    53f6:	6859      	ldr	r1, [r3, #4]
    53f8:	b119      	cbz	r1, 5402 <gpiote_event_handler+0xee>
    53fa:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    53fc:	b149      	cbz	r1, 5412 <gpiote_event_handler+0xfe>
	return node->next;
    53fe:	680d      	ldr	r5, [r1, #0]
    5400:	e007      	b.n	5412 <gpiote_event_handler+0xfe>
    5402:	460d      	mov	r5, r1
    5404:	e005      	b.n	5412 <gpiote_event_handler+0xfe>
    5406:	b16d      	cbz	r5, 5424 <gpiote_event_handler+0x110>
    5408:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    540a:	b105      	cbz	r5, 540e <gpiote_event_handler+0xfa>
	return node->next;
    540c:	682b      	ldr	r3, [r5, #0]
    540e:	4629      	mov	r1, r5
    5410:	461d      	mov	r5, r3
    5412:	2900      	cmp	r1, #0
    5414:	d0d0      	beq.n	53b8 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    5416:	688a      	ldr	r2, [r1, #8]
    5418:	4032      	ands	r2, r6
    541a:	d0f4      	beq.n	5406 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    541c:	684b      	ldr	r3, [r1, #4]
    541e:	480c      	ldr	r0, [pc, #48]	; (5450 <gpiote_event_handler+0x13c>)
    5420:	4798      	blx	r3
    5422:	e7f0      	b.n	5406 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5424:	462b      	mov	r3, r5
    5426:	e7f2      	b.n	540e <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    5428:	4c05      	ldr	r4, [pc, #20]	; (5440 <gpiote_event_handler+0x12c>)
    542a:	4620      	mov	r0, r4
    542c:	f7ff fda8 	bl	4f80 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    5430:	f104 0018 	add.w	r0, r4, #24
    5434:	f7ff fda4 	bl	4f80 <cfg_level_pins>
}
    5438:	e7c0      	b.n	53bc <gpiote_event_handler+0xa8>
    543a:	bf00      	nop
    543c:	5000d17c 	.word	0x5000d17c
    5440:	00016e50 	.word	0x00016e50
    5444:	5000d000 	.word	0x5000d000
    5448:	20020948 	.word	0x20020948
    544c:	20020964 	.word	0x20020964
    5450:	00016e68 	.word	0x00016e68

00005454 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    5454:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    5456:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    5458:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    545c:	d06f      	beq.n	553e <baudrate_set+0xea>
    545e:	d83a      	bhi.n	54d6 <baudrate_set+0x82>
    5460:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    5464:	d06e      	beq.n	5544 <baudrate_set+0xf0>
    5466:	d90a      	bls.n	547e <baudrate_set+0x2a>
    5468:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    546c:	d075      	beq.n	555a <baudrate_set+0x106>
    546e:	d924      	bls.n	54ba <baudrate_set+0x66>
    5470:	f647 2312 	movw	r3, #31250	; 0x7a12
    5474:	4299      	cmp	r1, r3
    5476:	d12b      	bne.n	54d0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5478:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    547c:	e013      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    547e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    5482:	d061      	beq.n	5548 <baudrate_set+0xf4>
    5484:	d907      	bls.n	5496 <baudrate_set+0x42>
    5486:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    548a:	d063      	beq.n	5554 <baudrate_set+0x100>
    548c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    5490:	d110      	bne.n	54b4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5492:	4b3c      	ldr	r3, [pc, #240]	; (5584 <baudrate_set+0x130>)
    5494:	e007      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    5496:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    549a:	d058      	beq.n	554e <baudrate_set+0xfa>
    549c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    54a0:	d105      	bne.n	54ae <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    54a2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    54a6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    54aa:	2000      	movs	r0, #0
    54ac:	4770      	bx	lr
	switch (baudrate) {
    54ae:	f06f 0015 	mvn.w	r0, #21
    54b2:	4770      	bx	lr
    54b4:	f06f 0015 	mvn.w	r0, #21
    54b8:	4770      	bx	lr
    54ba:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    54be:	d04e      	beq.n	555e <baudrate_set+0x10a>
    54c0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    54c4:	d101      	bne.n	54ca <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    54c6:	4b30      	ldr	r3, [pc, #192]	; (5588 <baudrate_set+0x134>)
    54c8:	e7ed      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    54ca:	f06f 0015 	mvn.w	r0, #21
    54ce:	4770      	bx	lr
    54d0:	f06f 0015 	mvn.w	r0, #21
    54d4:	4770      	bx	lr
    54d6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    54da:	d042      	beq.n	5562 <baudrate_set+0x10e>
    54dc:	d909      	bls.n	54f2 <baudrate_set+0x9e>
    54de:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    54e2:	d046      	beq.n	5572 <baudrate_set+0x11e>
    54e4:	d91f      	bls.n	5526 <baudrate_set+0xd2>
    54e6:	4b29      	ldr	r3, [pc, #164]	; (558c <baudrate_set+0x138>)
    54e8:	4299      	cmp	r1, r3
    54ea:	d148      	bne.n	557e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    54ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    54f0:	e7d9      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    54f2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    54f6:	d037      	beq.n	5568 <baudrate_set+0x114>
    54f8:	d905      	bls.n	5506 <baudrate_set+0xb2>
    54fa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    54fe:	d10f      	bne.n	5520 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5500:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5504:	e7cf      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    5506:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    550a:	4299      	cmp	r1, r3
    550c:	d02e      	beq.n	556c <baudrate_set+0x118>
    550e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    5512:	d102      	bne.n	551a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5514:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5518:	e7c5      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    551a:	f06f 0015 	mvn.w	r0, #21
    551e:	4770      	bx	lr
    5520:	f06f 0015 	mvn.w	r0, #21
    5524:	4770      	bx	lr
    5526:	4b1a      	ldr	r3, [pc, #104]	; (5590 <baudrate_set+0x13c>)
    5528:	4299      	cmp	r1, r3
    552a:	d025      	beq.n	5578 <baudrate_set+0x124>
    552c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    5530:	d102      	bne.n	5538 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5532:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5536:	e7b6      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    5538:	f06f 0015 	mvn.w	r0, #21
    553c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    553e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5542:	e7b0      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5544:	4b13      	ldr	r3, [pc, #76]	; (5594 <baudrate_set+0x140>)
    5546:	e7ae      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5548:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    554c:	e7ab      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    554e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5552:	e7a8      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5554:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5558:	e7a5      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    555a:	4b0f      	ldr	r3, [pc, #60]	; (5598 <baudrate_set+0x144>)
    555c:	e7a3      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    555e:	4b0f      	ldr	r3, [pc, #60]	; (559c <baudrate_set+0x148>)
    5560:	e7a1      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5562:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5566:	e79e      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5568:	4b0d      	ldr	r3, [pc, #52]	; (55a0 <baudrate_set+0x14c>)
    556a:	e79c      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    556c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5570:	e799      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5572:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5576:	e796      	b.n	54a6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    5578:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    557c:	e793      	b.n	54a6 <baudrate_set+0x52>
	switch (baudrate) {
    557e:	f06f 0015 	mvn.w	r0, #21
}
    5582:	4770      	bx	lr
    5584:	0013b000 	.word	0x0013b000
    5588:	004ea000 	.word	0x004ea000
    558c:	000f4240 	.word	0x000f4240
    5590:	0003d090 	.word	0x0003d090
    5594:	00275000 	.word	0x00275000
    5598:	0075c000 	.word	0x0075c000
    559c:	003af000 	.word	0x003af000
    55a0:	013a9000 	.word	0x013a9000

000055a4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    55a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a8:	4605      	mov	r5, r0
    55aa:	460f      	mov	r7, r1
	return dev->data;
    55ac:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    55b0:	f010 fc04 	bl	15dbc <k_is_in_isr>
    55b4:	b920      	cbnz	r0, 55c0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    55b6:	4b16      	ldr	r3, [pc, #88]	; (5610 <uarte_nrfx_poll_out+0x6c>)
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	b1ab      	cbz	r3, 55e8 <uarte_nrfx_poll_out+0x44>
    55bc:	2300      	movs	r3, #0
    55be:	e000      	b.n	55c2 <uarte_nrfx_poll_out+0x1e>
    55c0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    55c2:	b19b      	cbz	r3, 55ec <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    55c4:	f04f 0320 	mov.w	r3, #32
    55c8:	f3ef 8411 	mrs	r4, BASEPRI
    55cc:	f383 8812 	msr	BASEPRI_MAX, r3
    55d0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    55d4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    55d6:	4628      	mov	r0, r5
    55d8:	f00d fbcc 	bl	12d74 <is_tx_ready>
    55dc:	b950      	cbnz	r0, 55f4 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    55de:	f384 8811 	msr	BASEPRI, r4
    55e2:	f3bf 8f6f 	isb	sy
}
    55e6:	e7ed      	b.n	55c4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    55e8:	2301      	movs	r3, #1
    55ea:	e7ea      	b.n	55c2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    55ec:	4628      	mov	r0, r5
    55ee:	f00d fcde 	bl	12fae <wait_tx_ready>
    55f2:	4606      	mov	r6, r0
	}

	data->char_out = c;
    55f4:	4641      	mov	r1, r8
    55f6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    55fa:	2201      	movs	r2, #1
    55fc:	4628      	mov	r0, r5
    55fe:	f00d fbd3 	bl	12da8 <tx_start>
	__asm__ volatile(
    5602:	f386 8811 	msr	BASEPRI, r6
    5606:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    560a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    560e:	bf00      	nop
    5610:	20020a87 	.word	0x20020a87

00005614 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    5614:	b538      	push	{r3, r4, r5, lr}
    5616:	4605      	mov	r5, r0
    5618:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    561a:	f101 0016 	add.w	r0, r1, #22
    561e:	f000 fe7d 	bl	631c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5622:	4b0a      	ldr	r3, [pc, #40]	; (564c <endtx_stoptx_ppi_init+0x38>)
    5624:	4298      	cmp	r0, r3
    5626:	d10e      	bne.n	5646 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5628:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    562a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    562e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    5632:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5636:	7da2      	ldrb	r2, [r4, #22]
    5638:	2301      	movs	r3, #1
    563a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    563c:	4a04      	ldr	r2, [pc, #16]	; (5650 <endtx_stoptx_ppi_init+0x3c>)
    563e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    5642:	2000      	movs	r0, #0
}
    5644:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    5646:	f06f 0004 	mvn.w	r0, #4
    564a:	e7fb      	b.n	5644 <endtx_stoptx_ppi_init+0x30>
    564c:	0bad0000 	.word	0x0bad0000
    5650:	50017000 	.word	0x50017000

00005654 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    5656:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    5658:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    565a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    565c:	2300      	movs	r3, #0
    565e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5662:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    5664:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    5666:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    566a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    566c:	2b01      	cmp	r3, #1
    566e:	f000 80a0 	beq.w	57b2 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
    5672:	4a5a      	ldr	r2, [pc, #360]	; (57dc <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5674:	2301      	movs	r3, #1
    5676:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    5678:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(cfg->pseltxd);
    567a:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    567c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5680:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5682:	2b01      	cmp	r3, #1
    5684:	f000 8097 	beq.w	57b6 <uarte_instance_init+0x162>
        case 0: return NRF_P0;
    5688:	4954      	ldr	r1, [pc, #336]	; (57dc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    568a:	3280      	adds	r2, #128	; 0x80
    568c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5690:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5694:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5698:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    569c:	68e3      	ldr	r3, [r4, #12]
    569e:	f1b3 3fff 	cmp.w	r3, #4294967295
    56a2:	d010      	beq.n	56c6 <uarte_instance_init+0x72>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    56a4:	7e27      	ldrb	r7, [r4, #24]
    *p_pin = pin_number & 0x1F;
    56a6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    56aa:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56ac:	2b01      	cmp	r3, #1
    56ae:	f000 8084 	beq.w	57ba <uarte_instance_init+0x166>
        case 0: return NRF_P0;
    56b2:	494a      	ldr	r1, [pc, #296]	; (57dc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    56b4:	3280      	adds	r2, #128	; 0x80
    56b6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    56ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    56be:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    56c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    56c6:	68a2      	ldr	r2, [r4, #8]
    56c8:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    56ca:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    56ce:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    56d2:	6923      	ldr	r3, [r4, #16]
    56d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    56d8:	d00f      	beq.n	56fa <uarte_instance_init+0xa6>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    56da:	7e67      	ldrb	r7, [r4, #25]
    *p_pin = pin_number & 0x1F;
    56dc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    56e0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56e2:	2b01      	cmp	r3, #1
    56e4:	d06b      	beq.n	57be <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
    56e6:	493d      	ldr	r1, [pc, #244]	; (57dc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    56e8:	3280      	adds	r2, #128	; 0x80
    56ea:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    56ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    56f2:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    56f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    56fa:	6963      	ldr	r3, [r4, #20]
    56fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    5700:	d018      	beq.n	5734 <uarte_instance_init+0xe0>
    *p_pin = pin_number & 0x1F;
    5702:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    5706:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5708:	2b01      	cmp	r3, #1
    570a:	d05a      	beq.n	57c2 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
    570c:	4933      	ldr	r1, [pc, #204]	; (57dc <uarte_instance_init+0x188>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    570e:	2301      	movs	r3, #1
    5710:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    5712:	608b      	str	r3, [r1, #8]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    5714:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    5716:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    571a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    571c:	2b01      	cmp	r3, #1
    571e:	d052      	beq.n	57c6 <uarte_instance_init+0x172>
        case 0: return NRF_P0;
    5720:	492e      	ldr	r1, [pc, #184]	; (57dc <uarte_instance_init+0x188>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5722:	3280      	adds	r2, #128	; 0x80
    5724:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    5728:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    572c:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    5730:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    5734:	6962      	ldr	r2, [r4, #20]
    5736:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    5738:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    573c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    5740:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    5742:	3104      	adds	r1, #4
    5744:	f00d fa9a 	bl	12c7c <uarte_nrfx_configure>
	if (err) {
    5748:	4607      	mov	r7, r0
    574a:	bb80      	cbnz	r0, 57ae <uarte_instance_init+0x15a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    574c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    574e:	f013 0f08 	tst.w	r3, #8
    5752:	d13a      	bne.n	57ca <uarte_instance_init+0x176>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5754:	2308      	movs	r3, #8
    5756:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    575a:	68e3      	ldr	r3, [r4, #12]
    575c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5760:	d00c      	beq.n	577c <uarte_instance_init+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5762:	2300      	movs	r3, #0
    5764:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5768:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    576c:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5770:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5774:	2301      	movs	r3, #1
    5776:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    577a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    577c:	6863      	ldr	r3, [r4, #4]
    577e:	f013 0f08 	tst.w	r3, #8
    5782:	d103      	bne.n	578c <uarte_instance_init+0x138>
    p_reg->INTENSET = mask;
    5784:	f44f 7380 	mov.w	r3, #256	; 0x100
    5788:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    578c:	6863      	ldr	r3, [r4, #4]
    578e:	f013 0f10 	tst.w	r3, #16
    5792:	d003      	beq.n	579c <uarte_instance_init+0x148>
    5794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5798:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    579c:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    579e:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    57a2:	2300      	movs	r3, #0
    57a4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57a8:	2301      	movs	r3, #1
    57aa:	60ab      	str	r3, [r5, #8]
    57ac:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    57ae:	4638      	mov	r0, r7
    57b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    57b2:	4a0b      	ldr	r2, [pc, #44]	; (57e0 <uarte_instance_init+0x18c>)
    57b4:	e75e      	b.n	5674 <uarte_instance_init+0x20>
    57b6:	490a      	ldr	r1, [pc, #40]	; (57e0 <uarte_instance_init+0x18c>)
    57b8:	e767      	b.n	568a <uarte_instance_init+0x36>
    57ba:	4909      	ldr	r1, [pc, #36]	; (57e0 <uarte_instance_init+0x18c>)
    57bc:	e77a      	b.n	56b4 <uarte_instance_init+0x60>
    57be:	4908      	ldr	r1, [pc, #32]	; (57e0 <uarte_instance_init+0x18c>)
    57c0:	e792      	b.n	56e8 <uarte_instance_init+0x94>
    57c2:	4907      	ldr	r1, [pc, #28]	; (57e0 <uarte_instance_init+0x18c>)
    57c4:	e7a3      	b.n	570e <uarte_instance_init+0xba>
    57c6:	4906      	ldr	r1, [pc, #24]	; (57e0 <uarte_instance_init+0x18c>)
    57c8:	e7ab      	b.n	5722 <uarte_instance_init+0xce>
		err = endtx_stoptx_ppi_init(uarte, data);
    57ca:	4631      	mov	r1, r6
    57cc:	4628      	mov	r0, r5
    57ce:	f7ff ff21 	bl	5614 <endtx_stoptx_ppi_init>
		if (err < 0) {
    57d2:	2800      	cmp	r0, #0
    57d4:	dabe      	bge.n	5754 <uarte_instance_init+0x100>
			return err;
    57d6:	4607      	mov	r7, r0
    57d8:	e7e9      	b.n	57ae <uarte_instance_init+0x15a>
    57da:	bf00      	nop
    57dc:	50842500 	.word	0x50842500
    57e0:	50842800 	.word	0x50842800

000057e4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    57e4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    57e8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    57ec:	4b01      	ldr	r3, [pc, #4]	; (57f4 <set_comparator+0x10>)
    57ee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    57f2:	4770      	bx	lr
    57f4:	50015000 	.word	0x50015000

000057f8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    57f8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    57fc:	4b01      	ldr	r3, [pc, #4]	; (5804 <get_comparator+0xc>)
    57fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    5802:	4770      	bx	lr
    5804:	50015000 	.word	0x50015000

00005808 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    580c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    580e:	4a02      	ldr	r2, [pc, #8]	; (5818 <event_enable+0x10>)
    5810:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    5814:	4770      	bx	lr
    5816:	bf00      	nop
    5818:	50015000 	.word	0x50015000

0000581c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    581c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5820:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5822:	4a02      	ldr	r2, [pc, #8]	; (582c <event_disable+0x10>)
    5824:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    5828:	4770      	bx	lr
    582a:	bf00      	nop
    582c:	50015000 	.word	0x50015000

00005830 <counter>:
     return p_reg->COUNTER;
    5830:	4b01      	ldr	r3, [pc, #4]	; (5838 <counter+0x8>)
    5832:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    5836:	4770      	bx	lr
    5838:	50015000 	.word	0x50015000

0000583c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    583c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    583e:	2301      	movs	r3, #1
    5840:	4083      	lsls	r3, r0
    5842:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5844:	4a0d      	ldr	r2, [pc, #52]	; (587c <compare_int_lock+0x40>)
    5846:	e8d2 1fef 	ldaex	r1, [r2]
    584a:	ea01 0c04 	and.w	ip, r1, r4
    584e:	e8c2 cfee 	stlex	lr, ip, [r2]
    5852:	f1be 0f00 	cmp.w	lr, #0
    5856:	d1f6      	bne.n	5846 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5858:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    585c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    5860:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    5864:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    5868:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    586c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5870:	420b      	tst	r3, r1
}
    5872:	bf14      	ite	ne
    5874:	2001      	movne	r0, #1
    5876:	2000      	moveq	r0, #0
    5878:	bd10      	pop	{r4, pc}
    587a:	bf00      	nop
    587c:	200209a4 	.word	0x200209a4

00005880 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    5880:	b570      	push	{r4, r5, r6, lr}
    5882:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    5884:	f00d fbdf 	bl	13046 <full_int_lock>
    5888:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    588a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    588e:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    5890:	4a15      	ldr	r2, [pc, #84]	; (58e8 <channel_processing_check_and_clear+0x68>)
    5892:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    5896:	4213      	tst	r3, r2
    5898:	d105      	bne.n	58a6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    589a:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    589c:	4628      	mov	r0, r5
    589e:	f00d fbdb 	bl	13058 <full_int_unlock>

	return result;
}
    58a2:	4630      	mov	r0, r6
    58a4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    58a6:	2301      	movs	r3, #1
    58a8:	40a3      	lsls	r3, r4
    58aa:	43db      	mvns	r3, r3
    58ac:	4a0f      	ldr	r2, [pc, #60]	; (58ec <channel_processing_check_and_clear+0x6c>)
    58ae:	e8d2 1fef 	ldaex	r1, [r2]
    58b2:	ea01 0003 	and.w	r0, r1, r3
    58b6:	e8c2 0fe6 	stlex	r6, r0, [r2]
    58ba:	2e00      	cmp	r6, #0
    58bc:	d1f7      	bne.n	58ae <channel_processing_check_and_clear+0x2e>
    58be:	b959      	cbnz	r1, 58d8 <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    58c0:	f104 0350 	add.w	r3, r4, #80	; 0x50
    58c4:	009b      	lsls	r3, r3, #2
    58c6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    58c8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    58cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    58d0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    58d2:	b113      	cbz	r3, 58da <channel_processing_check_and_clear+0x5a>
    58d4:	2301      	movs	r3, #1
    58d6:	e000      	b.n	58da <channel_processing_check_and_clear+0x5a>
    58d8:	2301      	movs	r3, #1
		if (result) {
    58da:	461e      	mov	r6, r3
    58dc:	2b00      	cmp	r3, #0
    58de:	d0dd      	beq.n	589c <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    58e0:	4620      	mov	r0, r4
    58e2:	f00d fba1 	bl	13028 <event_clear>
    58e6:	e7d9      	b.n	589c <channel_processing_check_and_clear+0x1c>
    58e8:	50015000 	.word	0x50015000
    58ec:	200209a0 	.word	0x200209a0

000058f0 <compare_int_unlock>:
	if (key) {
    58f0:	b901      	cbnz	r1, 58f4 <compare_int_unlock+0x4>
}
    58f2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    58f4:	2301      	movs	r3, #1
    58f6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58f8:	4a0e      	ldr	r2, [pc, #56]	; (5934 <compare_int_unlock+0x44>)
    58fa:	e8d2 1fef 	ldaex	r1, [r2]
    58fe:	4319      	orrs	r1, r3
    5900:	e8c2 1fec 	stlex	ip, r1, [r2]
    5904:	f1bc 0f00 	cmp.w	ip, #0
    5908:	d1f7      	bne.n	58fa <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    590a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    590e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5910:	4a09      	ldr	r2, [pc, #36]	; (5938 <compare_int_unlock+0x48>)
    5912:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5916:	4b09      	ldr	r3, [pc, #36]	; (593c <compare_int_unlock+0x4c>)
    5918:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    591c:	fa23 f000 	lsr.w	r0, r3, r0
    5920:	f010 0f01 	tst.w	r0, #1
    5924:	d0e5      	beq.n	58f2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5926:	4b06      	ldr	r3, [pc, #24]	; (5940 <compare_int_unlock+0x50>)
    5928:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    592c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    5930:	e7df      	b.n	58f2 <compare_int_unlock+0x2>
    5932:	bf00      	nop
    5934:	200209a4 	.word	0x200209a4
    5938:	50015000 	.word	0x50015000
    593c:	200209a0 	.word	0x200209a0
    5940:	e000e100 	.word	0xe000e100

00005944 <sys_clock_timeout_handler>:
{
    5944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5946:	4607      	mov	r7, r0
    5948:	4614      	mov	r4, r2
    594a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    594c:	4610      	mov	r0, r2
    594e:	4619      	mov	r1, r3
    5950:	f00d fb76 	bl	13040 <absolute_time_to_cc>
    5954:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5956:	4b15      	ldr	r3, [pc, #84]	; (59ac <sys_clock_timeout_handler+0x68>)
    5958:	681a      	ldr	r2, [r3, #0]
    595a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    595c:	601c      	str	r4, [r3, #0]
    595e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5960:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    5964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5968:	d308      	bcc.n	597c <sys_clock_timeout_handler+0x38>
	return false;
    596a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    596c:	f00a fbf8 	bl	10160 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    5970:	4638      	mov	r0, r7
    5972:	f7ff ff41 	bl	57f8 <get_comparator>
    5976:	42a8      	cmp	r0, r5
    5978:	d00c      	beq.n	5994 <sys_clock_timeout_handler+0x50>
}
    597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    597c:	4b0c      	ldr	r3, [pc, #48]	; (59b0 <sys_clock_timeout_handler+0x6c>)
    597e:	6819      	ldr	r1, [r3, #0]
    5980:	0a0b      	lsrs	r3, r1, #8
    5982:	060a      	lsls	r2, r1, #24
    5984:	1952      	adds	r2, r2, r5
    5986:	f143 0300 	adc.w	r3, r3, #0
    598a:	490a      	ldr	r1, [pc, #40]	; (59b4 <sys_clock_timeout_handler+0x70>)
    598c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    5990:	2401      	movs	r4, #1
    5992:	e7eb      	b.n	596c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    5994:	b11c      	cbz	r4, 599e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    5996:	4638      	mov	r0, r7
    5998:	f7ff ff36 	bl	5808 <event_enable>
}
    599c:	e7ed      	b.n	597a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    599e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    59a2:	4638      	mov	r0, r7
    59a4:	f7ff ff1e 	bl	57e4 <set_comparator>
    59a8:	e7f5      	b.n	5996 <sys_clock_timeout_handler+0x52>
    59aa:	bf00      	nop
    59ac:	20000358 	.word	0x20000358
    59b0:	200209a8 	.word	0x200209a8
    59b4:	20000340 	.word	0x20000340

000059b8 <z_nrf_rtc_timer_read>:
{
    59b8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    59ba:	4b0d      	ldr	r3, [pc, #52]	; (59f0 <z_nrf_rtc_timer_read+0x38>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	0a1d      	lsrs	r5, r3, #8
    59c0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    59c2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    59c6:	f7ff ff33 	bl	5830 <counter>
    59ca:	4603      	mov	r3, r0
	val += cntr;
    59cc:	1820      	adds	r0, r4, r0
    59ce:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    59d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    59d6:	d20a      	bcs.n	59ee <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    59d8:	4b06      	ldr	r3, [pc, #24]	; (59f4 <z_nrf_rtc_timer_read+0x3c>)
    59da:	e9d3 2300 	ldrd	r2, r3, [r3]
    59de:	4299      	cmp	r1, r3
    59e0:	bf08      	it	eq
    59e2:	4290      	cmpeq	r0, r2
    59e4:	d203      	bcs.n	59ee <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    59e6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    59ea:	f141 0100 	adc.w	r1, r1, #0
}
    59ee:	bd38      	pop	{r3, r4, r5, pc}
    59f0:	200209a8 	.word	0x200209a8
    59f4:	20000340 	.word	0x20000340

000059f8 <compare_set_nolocks>:
{
    59f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    59fc:	4606      	mov	r6, r0
    59fe:	4614      	mov	r4, r2
    5a00:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    5a02:	4610      	mov	r0, r2
    5a04:	4619      	mov	r1, r3
    5a06:	f00d fb1b 	bl	13040 <absolute_time_to_cc>
    5a0a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5a0c:	f7ff ffd4 	bl	59b8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5a10:	42a9      	cmp	r1, r5
    5a12:	bf08      	it	eq
    5a14:	42a0      	cmpeq	r0, r4
    5a16:	d21e      	bcs.n	5a56 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    5a18:	ebb4 0800 	subs.w	r8, r4, r0
    5a1c:	eb65 0901 	sbc.w	r9, r5, r1
    5a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a24:	2300      	movs	r3, #0
    5a26:	454b      	cmp	r3, r9
    5a28:	bf08      	it	eq
    5a2a:	4542      	cmpeq	r2, r8
    5a2c:	d32a      	bcc.n	5a84 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
    5a2e:	4b17      	ldr	r3, [pc, #92]	; (5a8c <compare_set_nolocks+0x94>)
    5a30:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    5a34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5a38:	42ab      	cmp	r3, r5
    5a3a:	bf08      	it	eq
    5a3c:	42a2      	cmpeq	r2, r4
    5a3e:	d014      	beq.n	5a6a <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    5a40:	4639      	mov	r1, r7
    5a42:	4630      	mov	r0, r6
    5a44:	f00d fb0d 	bl	13062 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    5a48:	4639      	mov	r1, r7
    5a4a:	f00d fae9 	bl	13020 <counter_sub>
    5a4e:	1824      	adds	r4, r4, r0
    5a50:	f145 0500 	adc.w	r5, r5, #0
    5a54:	e009      	b.n	5a6a <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5a56:	2301      	movs	r3, #1
    5a58:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a5a:	4a0d      	ldr	r2, [pc, #52]	; (5a90 <compare_set_nolocks+0x98>)
    5a5c:	e8d2 1fef 	ldaex	r1, [r2]
    5a60:	4319      	orrs	r1, r3
    5a62:	e8c2 1fe0 	stlex	r0, r1, [r2]
    5a66:	2800      	cmp	r0, #0
    5a68:	d1f8      	bne.n	5a5c <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
    5a6a:	4b08      	ldr	r3, [pc, #32]	; (5a8c <compare_set_nolocks+0x94>)
    5a6c:	0132      	lsls	r2, r6, #4
    5a6e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    5a72:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    5a76:	9908      	ldr	r1, [sp, #32]
    5a78:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    5a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a7c:	6073      	str	r3, [r6, #4]
	return ret;
    5a7e:	2000      	movs	r0, #0
}
    5a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    5a84:	f06f 0015 	mvn.w	r0, #21
    5a88:	e7fa      	b.n	5a80 <compare_set_nolocks+0x88>
    5a8a:	bf00      	nop
    5a8c:	20000348 	.word	0x20000348
    5a90:	200209a0 	.word	0x200209a0

00005a94 <process_channel>:

static void process_channel(int32_t chan)
{
    5a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a98:	b082      	sub	sp, #8
    5a9a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    5a9c:	f7ff fef0 	bl	5880 <channel_processing_check_and_clear>
    5aa0:	b910      	cbnz	r0, 5aa8 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    5aa2:	b002      	add	sp, #8
    5aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    5aa8:	f7ff ff86 	bl	59b8 <z_nrf_rtc_timer_read>
    5aac:	4606      	mov	r6, r0
    5aae:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    5ab0:	f00d fac9 	bl	13046 <full_int_lock>
    5ab4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    5ab6:	4b13      	ldr	r3, [pc, #76]	; (5b04 <process_channel+0x70>)
    5ab8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    5abc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    5ac0:	454f      	cmp	r7, r9
    5ac2:	bf08      	it	eq
    5ac4:	4546      	cmpeq	r6, r8
    5ac6:	d20b      	bcs.n	5ae0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5ac8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    5aca:	4650      	mov	r0, sl
    5acc:	f00d fac4 	bl	13058 <full_int_unlock>
		if (handler) {
    5ad0:	2e00      	cmp	r6, #0
    5ad2:	d0e6      	beq.n	5aa2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    5ad4:	9500      	str	r5, [sp, #0]
    5ad6:	4642      	mov	r2, r8
    5ad8:	464b      	mov	r3, r9
    5ada:	4620      	mov	r0, r4
    5adc:	47b0      	blx	r6
}
    5ade:	e7e0      	b.n	5aa2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    5ae0:	4a08      	ldr	r2, [pc, #32]	; (5b04 <process_channel+0x70>)
    5ae2:	0123      	lsls	r3, r4, #4
    5ae4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    5ae8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    5aea:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    5aec:	2000      	movs	r0, #0
    5aee:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5af0:	f04f 32ff 	mov.w	r2, #4294967295
    5af4:	f04f 33ff 	mov.w	r3, #4294967295
    5af8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    5afc:	4620      	mov	r0, r4
    5afe:	f7ff fe8d 	bl	581c <event_disable>
    5b02:	e7e2      	b.n	5aca <process_channel+0x36>
    5b04:	20000348 	.word	0x20000348

00005b08 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5b08:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    5b0a:	4b0d      	ldr	r3, [pc, #52]	; (5b40 <rtc_nrf_isr+0x38>)
    5b0c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5b10:	f013 0f02 	tst.w	r3, #2
    5b14:	d00a      	beq.n	5b2c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b16:	4b0b      	ldr	r3, [pc, #44]	; (5b44 <rtc_nrf_isr+0x3c>)
    5b18:	681b      	ldr	r3, [r3, #0]
    5b1a:	b13b      	cbz	r3, 5b2c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5b1c:	4b09      	ldr	r3, [pc, #36]	; (5b44 <rtc_nrf_isr+0x3c>)
    5b1e:	2200      	movs	r2, #0
    5b20:	601a      	str	r2, [r3, #0]
    5b22:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    5b24:	4a08      	ldr	r2, [pc, #32]	; (5b48 <rtc_nrf_isr+0x40>)
    5b26:	6813      	ldr	r3, [r2, #0]
    5b28:	3301      	adds	r3, #1
    5b2a:	6013      	str	r3, [r2, #0]
{
    5b2c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b2e:	2c00      	cmp	r4, #0
    5b30:	dd00      	ble.n	5b34 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    5b32:	bd10      	pop	{r4, pc}
		process_channel(chan);
    5b34:	4620      	mov	r0, r4
    5b36:	f7ff ffad 	bl	5a94 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b3a:	3401      	adds	r4, #1
    5b3c:	e7f7      	b.n	5b2e <rtc_nrf_isr+0x26>
    5b3e:	bf00      	nop
    5b40:	50015000 	.word	0x50015000
    5b44:	50015104 	.word	0x50015104
    5b48:	200209a8 	.word	0x200209a8

00005b4c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5b4c:	b530      	push	{r4, r5, lr}
    5b4e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    5b50:	2300      	movs	r3, #0
    5b52:	4a1f      	ldr	r2, [pc, #124]	; (5bd0 <sys_clock_driver_init+0x84>)
    5b54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5b58:	2b00      	cmp	r3, #0
    5b5a:	dd27      	ble.n	5bac <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    5b5c:	4c1c      	ldr	r4, [pc, #112]	; (5bd0 <sys_clock_driver_init+0x84>)
    5b5e:	2502      	movs	r5, #2
    5b60:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b64:	4b1b      	ldr	r3, [pc, #108]	; (5bd4 <sys_clock_driver_init+0x88>)
    5b66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    5b6a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5b6e:	2200      	movs	r2, #0
    5b70:	2101      	movs	r1, #1
    5b72:	2015      	movs	r0, #21
    5b74:	f7fe fb14 	bl	41a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5b78:	2015      	movs	r0, #21
    5b7a:	f7fe faf3 	bl	4164 <arch_irq_enable>
    5b7e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5b82:	2301      	movs	r3, #1
    5b84:	4a14      	ldr	r2, [pc, #80]	; (5bd8 <sys_clock_driver_init+0x8c>)
    5b86:	6013      	str	r3, [r2, #0]
    5b88:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5b8a:	4a14      	ldr	r2, [pc, #80]	; (5bdc <sys_clock_driver_init+0x90>)
    5b8c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5b8e:	2400      	movs	r4, #0
    5b90:	9401      	str	r4, [sp, #4]
    5b92:	4b13      	ldr	r3, [pc, #76]	; (5be0 <sys_clock_driver_init+0x94>)
    5b94:	9300      	str	r3, [sp, #0]
    5b96:	4a13      	ldr	r2, [pc, #76]	; (5be4 <sys_clock_driver_init+0x98>)
    5b98:	2300      	movs	r3, #0
    5b9a:	4620      	mov	r0, r4
    5b9c:	f00d fa9c 	bl	130d8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5ba0:	4628      	mov	r0, r5
    5ba2:	f7ff f90b 	bl	4dbc <z_nrf_clock_control_lf_on>

	return 0;
}
    5ba6:	4620      	mov	r0, r4
    5ba8:	b003      	add	sp, #12
    5baa:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5bac:	4a0e      	ldr	r2, [pc, #56]	; (5be8 <sys_clock_driver_init+0x9c>)
    5bae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5bb2:	f04f 30ff 	mov.w	r0, #4294967295
    5bb6:	f04f 31ff 	mov.w	r1, #4294967295
    5bba:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5bc2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    5bc4:	4902      	ldr	r1, [pc, #8]	; (5bd0 <sys_clock_driver_init+0x84>)
    5bc6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5bca:	3301      	adds	r3, #1
    5bcc:	e7c4      	b.n	5b58 <sys_clock_driver_init+0xc>
    5bce:	bf00      	nop
    5bd0:	50015000 	.word	0x50015000
    5bd4:	e000e100 	.word	0xe000e100
    5bd8:	50015008 	.word	0x50015008
    5bdc:	200209a4 	.word	0x200209a4
    5be0:	00005945 	.word	0x00005945
    5be4:	007fffff 	.word	0x007fffff
    5be8:	20000348 	.word	0x20000348

00005bec <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    5bec:	b510      	push	{r4, lr}
    5bee:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5bf0:	f1b0 3fff 	cmp.w	r0, #4294967295
    5bf4:	d007      	beq.n	5c06 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5bf6:	1e44      	subs	r4, r0, #1
    5bf8:	2c00      	cmp	r4, #0
    5bfa:	dd07      	ble.n	5c0c <sys_clock_set_timeout+0x20>
    5bfc:	4b11      	ldr	r3, [pc, #68]	; (5c44 <sys_clock_set_timeout+0x58>)
    5bfe:	429c      	cmp	r4, r3
    5c00:	dd05      	ble.n	5c0e <sys_clock_set_timeout+0x22>
    5c02:	4c11      	ldr	r4, [pc, #68]	; (5c48 <sys_clock_set_timeout+0x5c>)
    5c04:	e003      	b.n	5c0e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5c06:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    5c0a:	e7f4      	b.n	5bf6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5c0c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5c0e:	f7ff fed3 	bl	59b8 <z_nrf_rtc_timer_read>
    5c12:	4b0e      	ldr	r3, [pc, #56]	; (5c4c <sys_clock_set_timeout+0x60>)
    5c14:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c18:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5c1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5c1e:	d300      	bcc.n	5c22 <sys_clock_set_timeout+0x36>
		ticks = 0;
    5c20:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5c22:	4404      	add	r4, r0
    5c24:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5c26:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    5c2a:	d300      	bcc.n	5c2e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    5c2c:	4c06      	ldr	r4, [pc, #24]	; (5c48 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5c2e:	2000      	movs	r0, #0
    5c30:	9001      	str	r0, [sp, #4]
    5c32:	4907      	ldr	r1, [pc, #28]	; (5c50 <sys_clock_set_timeout+0x64>)
    5c34:	9100      	str	r1, [sp, #0]
    5c36:	1912      	adds	r2, r2, r4
    5c38:	f143 0300 	adc.w	r3, r3, #0
    5c3c:	f00d fa4c 	bl	130d8 <compare_set>
}
    5c40:	b002      	add	sp, #8
    5c42:	bd10      	pop	{r4, pc}
    5c44:	007ffffe 	.word	0x007ffffe
    5c48:	007fffff 	.word	0x007fffff
    5c4c:	20000358 	.word	0x20000358
    5c50:	00005945 	.word	0x00005945

00005c54 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    5c54:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5c56:	f7ff feaf 	bl	59b8 <z_nrf_rtc_timer_read>
    5c5a:	4b02      	ldr	r3, [pc, #8]	; (5c64 <sys_clock_elapsed+0x10>)
    5c5c:	681b      	ldr	r3, [r3, #0]
}
    5c5e:	1ac0      	subs	r0, r0, r3
    5c60:	bd08      	pop	{r3, pc}
    5c62:	bf00      	nop
    5c64:	20000358 	.word	0x20000358

00005c68 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5c68:	4b08      	ldr	r3, [pc, #32]	; (5c8c <nrf53_errata_42+0x24>)
    5c6a:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5c6c:	3304      	adds	r3, #4
    5c6e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5c70:	2a07      	cmp	r2, #7
    5c72:	d001      	beq.n	5c78 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5c74:	2000      	movs	r0, #0
    5c76:	4770      	bx	lr
                    switch(var2)
    5c78:	3b02      	subs	r3, #2
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d804      	bhi.n	5c88 <nrf53_errata_42+0x20>
    5c7e:	e8df f003 	tbb	[pc, r3]
    5c82:	01          	.byte	0x01
    5c83:	00          	.byte	0x00
                if (var1 == 0x07)
    5c84:	2001      	movs	r0, #1
    5c86:	4770      	bx	lr
                            return false;
    5c88:	2000      	movs	r0, #0
    #endif
}
    5c8a:	4770      	bx	lr
    5c8c:	00ff0130 	.word	0x00ff0130

00005c90 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5c90:	4b0a      	ldr	r3, [pc, #40]	; (5cbc <nrf53_errata_46+0x2c>)
    5c92:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5c94:	3304      	adds	r3, #4
    5c96:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5c98:	2a07      	cmp	r2, #7
    5c9a:	d001      	beq.n	5ca0 <nrf53_errata_46+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5c9c:	2000      	movs	r0, #0
    5c9e:	4770      	bx	lr
                    switch(var2)
    5ca0:	2b04      	cmp	r3, #4
    5ca2:	d007      	beq.n	5cb4 <nrf53_errata_46+0x24>
    5ca4:	d808      	bhi.n	5cb8 <nrf53_errata_46+0x28>
    5ca6:	3b02      	subs	r3, #2
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d801      	bhi.n	5cb0 <nrf53_errata_46+0x20>
    5cac:	2001      	movs	r0, #1
    #endif
}
    5cae:	4770      	bx	lr
                            return false;
    5cb0:	2000      	movs	r0, #0
    5cb2:	4770      	bx	lr
                            return false;
    5cb4:	2000      	movs	r0, #0
    5cb6:	4770      	bx	lr
                            return false;
    5cb8:	2000      	movs	r0, #0
    5cba:	4770      	bx	lr
    5cbc:	00ff0130 	.word	0x00ff0130

00005cc0 <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5cc0:	4b08      	ldr	r3, [pc, #32]	; (5ce4 <nrf53_errata_49+0x24>)
    5cc2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5cc4:	3304      	adds	r3, #4
    5cc6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5cc8:	2a07      	cmp	r2, #7
    5cca:	d001      	beq.n	5cd0 <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5ccc:	2000      	movs	r0, #0
    5cce:	4770      	bx	lr
                    switch(var2)
    5cd0:	3b02      	subs	r3, #2
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d804      	bhi.n	5ce0 <nrf53_errata_49+0x20>
    5cd6:	e8df f003 	tbb	[pc, r3]
    5cda:	01          	.byte	0x01
    5cdb:	00          	.byte	0x00
                if (var1 == 0x07)
    5cdc:	2001      	movs	r0, #1
    5cde:	4770      	bx	lr
                            return false;
    5ce0:	2000      	movs	r0, #0
    #endif
}
    5ce2:	4770      	bx	lr
    5ce4:	00ff0130 	.word	0x00ff0130

00005ce8 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5ce8:	4b03      	ldr	r3, [pc, #12]	; (5cf8 <nrf53_errata_55+0x10>)
    5cea:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5cec:	2b07      	cmp	r3, #7
    5cee:	d001      	beq.n	5cf4 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    5cf0:	2000      	movs	r0, #0
    5cf2:	4770      	bx	lr
                            return true;
    5cf4:	2001      	movs	r0, #1
    #endif
}
    5cf6:	4770      	bx	lr
    5cf8:	00ff0130 	.word	0x00ff0130

00005cfc <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5cfc:	4b08      	ldr	r3, [pc, #32]	; (5d20 <nrf53_errata_64+0x24>)
    5cfe:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d00:	3304      	adds	r3, #4
    5d02:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d04:	2a07      	cmp	r2, #7
    5d06:	d001      	beq.n	5d0c <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d08:	2000      	movs	r0, #0
    5d0a:	4770      	bx	lr
                    switch(var2)
    5d0c:	3b02      	subs	r3, #2
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d804      	bhi.n	5d1c <nrf53_errata_64+0x20>
    5d12:	e8df f003 	tbb	[pc, r3]
    5d16:	01          	.byte	0x01
    5d17:	00          	.byte	0x00
                if (var1 == 0x07)
    5d18:	2001      	movs	r0, #1
    5d1a:	4770      	bx	lr
                            return false;
    5d1c:	2000      	movs	r0, #0
    #endif
}
    5d1e:	4770      	bx	lr
    5d20:	00ff0130 	.word	0x00ff0130

00005d24 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d24:	4b08      	ldr	r3, [pc, #32]	; (5d48 <nrf53_errata_69+0x24>)
    5d26:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d28:	3304      	adds	r3, #4
    5d2a:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5d2c:	2a07      	cmp	r2, #7
    5d2e:	d001      	beq.n	5d34 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d30:	2000      	movs	r0, #0
    5d32:	4770      	bx	lr
                    switch(var2)
    5d34:	3b02      	subs	r3, #2
    5d36:	2b00      	cmp	r3, #0
    5d38:	d804      	bhi.n	5d44 <nrf53_errata_69+0x20>
    5d3a:	e8df f003 	tbb	[pc, r3]
    5d3e:	01          	.byte	0x01
    5d3f:	00          	.byte	0x00
                if (var1 == 0x07)
    5d40:	2001      	movs	r0, #1
    5d42:	4770      	bx	lr
                            return false;
    5d44:	2000      	movs	r0, #0
    #endif
}
    5d46:	4770      	bx	lr
    5d48:	00ff0130 	.word	0x00ff0130

00005d4c <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5d4c:	4b08      	ldr	r3, [pc, #32]	; (5d70 <nrf53_errata_97+0x24>)
    5d4e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5d50:	3304      	adds	r3, #4
    5d52:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    5d54:	2a07      	cmp	r2, #7
    5d56:	d001      	beq.n	5d5c <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5d58:	2000      	movs	r0, #0
    5d5a:	4770      	bx	lr
                    switch(var2)
    5d5c:	3b02      	subs	r3, #2
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d804      	bhi.n	5d6c <nrf53_errata_97+0x20>
    5d62:	e8df f003 	tbb	[pc, r3]
    5d66:	01          	.byte	0x01
    5d67:	00          	.byte	0x00
                if (var1 == 0x07)
    5d68:	2001      	movs	r0, #1
    5d6a:	4770      	bx	lr
                            return false;
    5d6c:	2000      	movs	r0, #0
    #endif
}
    5d6e:	4770      	bx	lr
    5d70:	00ff0130 	.word	0x00ff0130

00005d74 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    5d74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5d78:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    5d7c:	f002 0203 	and.w	r2, r2, #3
    5d80:	4b02      	ldr	r3, [pc, #8]	; (5d8c <SystemCoreClockUpdate+0x18>)
    5d82:	40d3      	lsrs	r3, r2
    5d84:	4a02      	ldr	r2, [pc, #8]	; (5d90 <SystemCoreClockUpdate+0x1c>)
    5d86:	6013      	str	r3, [r2, #0]
#endif
}
    5d88:	4770      	bx	lr
    5d8a:	bf00      	nop
    5d8c:	07a12000 	.word	0x07a12000
    5d90:	20000060 	.word	0x20000060

00005d94 <SystemInit>:

void SystemInit(void)
{
    5d94:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5d96:	f7ff ffd9 	bl	5d4c <nrf53_errata_97>
    5d9a:	b158      	cbz	r0, 5db4 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    5d9c:	4b3b      	ldr	r3, [pc, #236]	; (5e8c <SystemInit+0xf8>)
    5d9e:	681b      	ldr	r3, [r3, #0]
    5da0:	b943      	cbnz	r3, 5db4 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5da2:	4b3a      	ldr	r3, [pc, #232]	; (5e8c <SystemInit+0xf8>)
    5da4:	220d      	movs	r2, #13
    5da6:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    5da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    5dac:	2201      	movs	r2, #1
    5dae:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5db0:	2200      	movs	r2, #0
    5db2:	601a      	str	r2, [r3, #0]
{
    5db4:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5db6:	2a1f      	cmp	r2, #31
    5db8:	d815      	bhi.n	5de6 <SystemInit+0x52>
    5dba:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5dbe:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5dc2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    5dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
    5dca:	d00c      	beq.n	5de6 <SystemInit+0x52>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    5dcc:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5dd0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5dd4:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5dd8:	00db      	lsls	r3, r3, #3
    5dda:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    5dde:	685b      	ldr	r3, [r3, #4]
    5de0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    5de2:	3201      	adds	r2, #1
    5de4:	e7e7      	b.n	5db6 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    5de6:	f7ff ff89 	bl	5cfc <nrf53_errata_64>
    5dea:	b128      	cbz	r0, 5df8 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    5dec:	4b28      	ldr	r3, [pc, #160]	; (5e90 <SystemInit+0xfc>)
    5dee:	2229      	movs	r2, #41	; 0x29
    5df0:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    5df2:	3330      	adds	r3, #48	; 0x30
    5df4:	2203      	movs	r2, #3
    5df6:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    5df8:	f7ff ff36 	bl	5c68 <nrf53_errata_42>
    5dfc:	b138      	cbz	r0, 5e0e <SystemInit+0x7a>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    5dfe:	4b25      	ldr	r3, [pc, #148]	; (5e94 <SystemInit+0x100>)
    5e00:	4a25      	ldr	r2, [pc, #148]	; (5e98 <SystemInit+0x104>)
    5e02:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    5e04:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e08:	2201      	movs	r2, #1
    5e0a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    5e0e:	f7ff ff3f 	bl	5c90 <nrf53_errata_46>
    5e12:	b110      	cbz	r0, 5e1a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    5e14:	4b21      	ldr	r3, [pc, #132]	; (5e9c <SystemInit+0x108>)
    5e16:	2200      	movs	r2, #0
    5e18:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    5e1a:	f7ff ff51 	bl	5cc0 <nrf53_errata_49>
    5e1e:	b168      	cbz	r0, 5e3c <SystemInit+0xa8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    5e20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5e28:	f013 0f01 	tst.w	r3, #1
    5e2c:	d006      	beq.n	5e3c <SystemInit+0xa8>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5e2e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e32:	2200      	movs	r2, #0
    5e34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5e38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5e3c:	f7ff ff54 	bl	5ce8 <nrf53_errata_55>
    5e40:	b160      	cbz	r0, 5e5c <SystemInit+0xc8>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    5e42:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5e4a:	f013 0f01 	tst.w	r3, #1
    5e4e:	d005      	beq.n	5e5c <SystemInit+0xc8>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    5e50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5e54:	f06f 0201 	mvn.w	r2, #1
    5e58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    5e5c:	f7ff ff62 	bl	5d24 <nrf53_errata_69>
    5e60:	b110      	cbz	r0, 5e68 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    5e62:	4b0b      	ldr	r3, [pc, #44]	; (5e90 <SystemInit+0xfc>)
    5e64:	2265      	movs	r2, #101	; 0x65
    5e66:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5e68:	4a0d      	ldr	r2, [pc, #52]	; (5ea0 <SystemInit+0x10c>)
    5e6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    5e6e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    5e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5e76:	4a0b      	ldr	r2, [pc, #44]	; (5ea4 <SystemInit+0x110>)
    5e78:	6811      	ldr	r1, [r2, #0]
    5e7a:	4b0b      	ldr	r3, [pc, #44]	; (5ea8 <SystemInit+0x114>)
    5e7c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    5e80:	69d2      	ldr	r2, [r2, #28]
    5e82:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5e86:	f7ff ff75 	bl	5d74 <SystemCoreClockUpdate>
}
    5e8a:	bd08      	pop	{r3, pc}
    5e8c:	50004a20 	.word	0x50004a20
    5e90:	5000470c 	.word	0x5000470c
    5e94:	50039530 	.word	0x50039530
    5e98:	beef0044 	.word	0xbeef0044
    5e9c:	5003254c 	.word	0x5003254c
    5ea0:	e000ed00 	.word	0xe000ed00
    5ea4:	00ff8000 	.word	0x00ff8000
    5ea8:	50006000 	.word	0x50006000

00005eac <nrf53_errata_4>:
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    5eac:	4b08      	ldr	r3, [pc, #32]	; (5ed0 <nrf53_errata_4+0x24>)
    5eae:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    5eb0:	3304      	adds	r3, #4
    5eb2:	681b      	ldr	r3, [r3, #0]
                if (var1 == 0x07)
    5eb4:	2a07      	cmp	r2, #7
    5eb6:	d001      	beq.n	5ebc <nrf53_errata_4+0x10>
        return false;
    5eb8:	2000      	movs	r0, #0
    5eba:	4770      	bx	lr
                    switch(var2)
    5ebc:	3b02      	subs	r3, #2
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d804      	bhi.n	5ecc <nrf53_errata_4+0x20>
    5ec2:	e8df f003 	tbb	[pc, r3]
    5ec6:	01          	.byte	0x01
    5ec7:	00          	.byte	0x00
                if (var1 == 0x07)
    5ec8:	2001      	movs	r0, #1
    5eca:	4770      	bx	lr
                            return false;
    5ecc:	2000      	movs	r0, #0
}
    5ece:	4770      	bx	lr
    5ed0:	00ff0130 	.word	0x00ff0130

00005ed4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5ed4:	4b05      	ldr	r3, [pc, #20]	; (5eec <nrfx_clock_init+0x18>)
    5ed6:	791b      	ldrb	r3, [r3, #4]
    5ed8:	b92b      	cbnz	r3, 5ee6 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5eda:	4b04      	ldr	r3, [pc, #16]	; (5eec <nrfx_clock_init+0x18>)
    5edc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5ede:	2201      	movs	r2, #1
    5ee0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5ee2:	4803      	ldr	r0, [pc, #12]	; (5ef0 <nrfx_clock_init+0x1c>)
    5ee4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5ee6:	4803      	ldr	r0, [pc, #12]	; (5ef4 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5ee8:	4770      	bx	lr
    5eea:	bf00      	nop
    5eec:	200209ac 	.word	0x200209ac
    5ef0:	0bad0000 	.word	0x0bad0000
    5ef4:	0bad000c 	.word	0x0bad000c

00005ef8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5ef8:	2803      	cmp	r0, #3
    5efa:	d84e      	bhi.n	5f9a <nrfx_clock_start+0xa2>
    5efc:	e8df f000 	tbb	[pc, r0]
    5f00:	40322702 	.word	0x40322702
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5f04:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5f08:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5f0c:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f10:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5f14:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    5f18:	d111      	bne.n	5f3e <nrfx_clock_start+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f1a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f1e:	2201      	movs	r2, #1
    5f20:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f24:	4b1d      	ldr	r3, [pc, #116]	; (5f9c <nrfx_clock_start+0xa4>)
    5f26:	2200      	movs	r2, #0
    5f28:	601a      	str	r2, [r3, #0]
    5f2a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f2c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f30:	2202      	movs	r2, #2
    5f32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f36:	3308      	adds	r3, #8
    5f38:	2201      	movs	r2, #1
    5f3a:	601a      	str	r2, [r3, #0]
}
    5f3c:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    5f3e:	2b02      	cmp	r3, #2
    5f40:	d1eb      	bne.n	5f1a <nrfx_clock_start+0x22>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f42:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f46:	2202      	movs	r2, #2
    5f48:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    5f4c:	e7ea      	b.n	5f24 <nrfx_clock_start+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f4e:	4b14      	ldr	r3, [pc, #80]	; (5fa0 <nrfx_clock_start+0xa8>)
    5f50:	2200      	movs	r2, #0
    5f52:	601a      	str	r2, [r3, #0]
    5f54:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f56:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f5a:	2201      	movs	r2, #1
    5f5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f60:	601a      	str	r2, [r3, #0]
}
    5f62:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f64:	4b0f      	ldr	r3, [pc, #60]	; (5fa4 <nrfx_clock_start+0xac>)
    5f66:	2200      	movs	r2, #0
    5f68:	601a      	str	r2, [r3, #0]
    5f6a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f6c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f70:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f78:	3320      	adds	r3, #32
    5f7a:	2201      	movs	r2, #1
    5f7c:	601a      	str	r2, [r3, #0]
}
    5f7e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f80:	4b09      	ldr	r3, [pc, #36]	; (5fa8 <nrfx_clock_start+0xb0>)
    5f82:	2200      	movs	r2, #0
    5f84:	601a      	str	r2, [r3, #0]
    5f86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    5f88:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f94:	3318      	adds	r3, #24
    5f96:	2201      	movs	r2, #1
    5f98:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    5f9a:	4770      	bx	lr
    5f9c:	50005104 	.word	0x50005104
    5fa0:	50005100 	.word	0x50005100
    5fa4:	50005124 	.word	0x50005124
    5fa8:	50005120 	.word	0x50005120

00005fac <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5fac:	b570      	push	{r4, r5, r6, lr}
    5fae:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    5fb0:	2803      	cmp	r0, #3
    5fb2:	f200 80cd 	bhi.w	6150 <nrfx_clock_stop+0x1a4>
    5fb6:	e8df f000 	tbb	[pc, r0]
    5fba:	1402      	.short	0x1402
    5fbc:	3021      	.short	0x3021
    p_reg->INTENCLR = mask;
    5fbe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5fc2:	2202      	movs	r2, #2
    5fc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fc8:	f503 7382 	add.w	r3, r3, #260	; 0x104
    5fcc:	2200      	movs	r2, #0
    5fce:	601a      	str	r2, [r3, #0]
    5fd0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fd2:	4b60      	ldr	r3, [pc, #384]	; (6154 <nrfx_clock_stop+0x1a8>)
    5fd4:	2201      	movs	r2, #1
    5fd6:	601a      	str	r2, [r3, #0]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5fd8:	2c01      	cmp	r4, #1
    5fda:	d02d      	beq.n	6038 <nrfx_clock_stop+0x8c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    5fdc:	f242 7510 	movw	r5, #10000	; 0x2710
    5fe0:	e0a1      	b.n	6126 <nrfx_clock_stop+0x17a>
    p_reg->INTENCLR = mask;
    5fe2:	2301      	movs	r3, #1
    5fe4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    5fe8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fec:	f502 7280 	add.w	r2, r2, #256	; 0x100
    5ff0:	2100      	movs	r1, #0
    5ff2:	6011      	str	r1, [r2, #0]
    5ff4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ff6:	4a58      	ldr	r2, [pc, #352]	; (6158 <nrfx_clock_stop+0x1ac>)
    5ff8:	6013      	str	r3, [r2, #0]
}
    5ffa:	e7ed      	b.n	5fd8 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    5ffc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6000:	f44f 7200 	mov.w	r2, #512	; 0x200
    6004:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6008:	f503 7392 	add.w	r3, r3, #292	; 0x124
    600c:	2200      	movs	r2, #0
    600e:	601a      	str	r2, [r3, #0]
    6010:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6012:	4b52      	ldr	r3, [pc, #328]	; (615c <nrfx_clock_stop+0x1b0>)
    6014:	2201      	movs	r2, #1
    6016:	601a      	str	r2, [r3, #0]
}
    6018:	e7de      	b.n	5fd8 <nrfx_clock_stop+0x2c>
    p_reg->INTENCLR = mask;
    601a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    601e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6022:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6026:	f503 7390 	add.w	r3, r3, #288	; 0x120
    602a:	2200      	movs	r2, #0
    602c:	601a      	str	r2, [r3, #0]
    602e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6030:	4b4b      	ldr	r3, [pc, #300]	; (6160 <nrfx_clock_stop+0x1b4>)
    6032:	2201      	movs	r2, #1
    6034:	601a      	str	r2, [r3, #0]
}
    6036:	e7cf      	b.n	5fd8 <nrfx_clock_stop+0x2c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6038:	4626      	mov	r6, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    603a:	f242 7510 	movw	r5, #10000	; 0x2710
    603e:	e035      	b.n	60ac <nrfx_clock_stop+0x100>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6040:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6044:	f8d3 6418 	ldr.w	r6, [r3, #1048]	; 0x418
    6048:	f006 0603 	and.w	r6, r6, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    604c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    6050:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6054:	d13a      	bne.n	60cc <nrfx_clock_stop+0x120>
    return false;
    6056:	2300      	movs	r3, #0
    6058:	e01f      	b.n	609a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    605a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    605e:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
    6062:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6066:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    606a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    606e:	d12f      	bne.n	60d0 <nrfx_clock_stop+0x124>
    return false;
    6070:	2300      	movs	r3, #0
    6072:	e012      	b.n	609a <nrfx_clock_stop+0xee>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6074:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6078:	f8d3 645c 	ldr.w	r6, [r3, #1116]	; 0x45c
    607c:	f006 0601 	and.w	r6, r6, #1
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6080:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    6084:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6088:	d124      	bne.n	60d4 <nrfx_clock_stop+0x128>
    return false;
    608a:	2300      	movs	r3, #0
    608c:	e005      	b.n	609a <nrfx_clock_stop+0xee>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    608e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6092:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    6096:	f3c3 4300 	ubfx	r3, r3, #16, #1
    609a:	2b00      	cmp	r3, #0
    609c:	d058      	beq.n	6150 <nrfx_clock_stop+0x1a4>
    609e:	2e01      	cmp	r6, #1
    60a0:	d156      	bne.n	6150 <nrfx_clock_stop+0x1a4>
    60a2:	2001      	movs	r0, #1
    60a4:	f00d f846 	bl	13134 <nrfx_busy_wait>
    60a8:	3d01      	subs	r5, #1
    60aa:	d051      	beq.n	6150 <nrfx_clock_stop+0x1a4>
    switch (domain)
    60ac:	2c03      	cmp	r4, #3
    60ae:	d80b      	bhi.n	60c8 <nrfx_clock_stop+0x11c>
    60b0:	a301      	add	r3, pc, #4	; (adr r3, 60b8 <nrfx_clock_stop+0x10c>)
    60b2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    60b6:	bf00      	nop
    60b8:	00006041 	.word	0x00006041
    60bc:	0000605b 	.word	0x0000605b
    60c0:	00006075 	.word	0x00006075
    60c4:	0000608f 	.word	0x0000608f
    60c8:	2300      	movs	r3, #0
    60ca:	e7e6      	b.n	609a <nrfx_clock_stop+0xee>
                return true;
    60cc:	2301      	movs	r3, #1
    60ce:	e7e4      	b.n	609a <nrfx_clock_stop+0xee>
                return true;
    60d0:	2301      	movs	r3, #1
    60d2:	e7e2      	b.n	609a <nrfx_clock_stop+0xee>
                return true;
    60d4:	2301      	movs	r3, #1
    60d6:	e7e0      	b.n	609a <nrfx_clock_stop+0xee>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60dc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    60e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60e4:	d12e      	bne.n	6144 <nrfx_clock_stop+0x198>
    return false;
    60e6:	2300      	movs	r3, #0
    60e8:	e017      	b.n	611a <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    60ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    60ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    60f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60f6:	d127      	bne.n	6148 <nrfx_clock_stop+0x19c>
    return false;
    60f8:	2300      	movs	r3, #0
    60fa:	e00e      	b.n	611a <nrfx_clock_stop+0x16e>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    60fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6100:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
    6104:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6108:	d120      	bne.n	614c <nrfx_clock_stop+0x1a0>
    return false;
    610a:	2300      	movs	r3, #0
    610c:	e005      	b.n	611a <nrfx_clock_stop+0x16e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    610e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6112:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
    6116:	f3c3 4300 	ubfx	r3, r3, #16, #1
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    611a:	b1cb      	cbz	r3, 6150 <nrfx_clock_stop+0x1a4>
    611c:	2001      	movs	r0, #1
    611e:	f00d f809 	bl	13134 <nrfx_busy_wait>
    6122:	3d01      	subs	r5, #1
    6124:	d014      	beq.n	6150 <nrfx_clock_stop+0x1a4>
    switch (domain)
    6126:	2c03      	cmp	r4, #3
    6128:	d80a      	bhi.n	6140 <nrfx_clock_stop+0x194>
    612a:	a301      	add	r3, pc, #4	; (adr r3, 6130 <nrfx_clock_stop+0x184>)
    612c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    6130:	000060d9 	.word	0x000060d9
    6134:	000060eb 	.word	0x000060eb
    6138:	000060fd 	.word	0x000060fd
    613c:	0000610f 	.word	0x0000610f
    6140:	2300      	movs	r3, #0
    6142:	e7ea      	b.n	611a <nrfx_clock_stop+0x16e>
                return true;
    6144:	2301      	movs	r3, #1
    6146:	e7e8      	b.n	611a <nrfx_clock_stop+0x16e>
                return true;
    6148:	2301      	movs	r3, #1
    614a:	e7e6      	b.n	611a <nrfx_clock_stop+0x16e>
                return true;
    614c:	2301      	movs	r3, #1
    614e:	e7e4      	b.n	611a <nrfx_clock_stop+0x16e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6150:	bd70      	pop	{r4, r5, r6, pc}
    6152:	bf00      	nop
    6154:	5000500c 	.word	0x5000500c
    6158:	50005004 	.word	0x50005004
    615c:	50005024 	.word	0x50005024
    6160:	5000501c 	.word	0x5000501c

00006164 <nrfx_clock_divider_set>:
}

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK192M
nrfx_err_t nrfx_clock_divider_set(nrf_clock_domain_t domain,
                                  nrf_clock_hfclk_div_t div)
{
    6164:	b510      	push	{r4, lr}
    6166:	460c      	mov	r4, r1
    switch(domain)
    6168:	2801      	cmp	r0, #1
    616a:	d003      	beq.n	6174 <nrfx_clock_divider_set+0x10>
    616c:	2802      	cmp	r0, #2
    616e:	d05a      	beq.n	6226 <nrfx_clock_divider_set+0xc2>
    6170:	4834      	ldr	r0, [pc, #208]	; (6244 <nrfx_clock_divider_set+0xe0>)
#endif
        default:
            NRFX_ASSERT(0);
            return NRFX_ERROR_NOT_SUPPORTED;
    }
}
    6172:	bd10      	pop	{r4, pc}
            switch (div)
    6174:	b359      	cbz	r1, 61ce <nrfx_clock_divider_set+0x6a>
    6176:	2901      	cmp	r1, #1
    6178:	d15f      	bne.n	623a <nrfx_clock_divider_set+0xd6>
                    if (nrf53_errata_4())
    617a:	f7ff fe97 	bl	5eac <nrf53_errata_4>
    617e:	b1f8      	cbz	r0, 61c0 <nrfx_clock_divider_set+0x5c>
	__asm__ volatile(
    6180:	f04f 0320 	mov.w	r3, #32
    6184:	f3ef 8211 	mrs	r2, BASEPRI
    6188:	f383 8812 	msr	BASEPRI_MAX, r3
    618c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    6190:	f3bf 8f4f 	dsb	sy

#if defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)
NRF_STATIC_INLINE
void nrf_clock_hfclk_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    6194:	f004 0403 	and.w	r4, r4, #3
    6198:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    619c:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        *(volatile uint32_t *)0x5084450C = 0x0;
    61a0:	2300      	movs	r3, #0
    61a2:	4929      	ldr	r1, [pc, #164]	; (6248 <nrfx_clock_divider_set+0xe4>)
    61a4:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50026548 = 0x0;
    61a6:	4929      	ldr	r1, [pc, #164]	; (624c <nrfx_clock_divider_set+0xe8>)
    61a8:	600b      	str	r3, [r1, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x0D;
    61aa:	4b29      	ldr	r3, [pc, #164]	; (6250 <nrfx_clock_divider_set+0xec>)
    61ac:	210d      	movs	r1, #13
    61ae:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
    61b0:	f382 8811 	msr	BASEPRI, r2
    61b4:	f3bf 8f6f 	isb	sy
            SystemCoreClockUpdate();
    61b8:	f7ff fddc 	bl	5d74 <SystemCoreClockUpdate>
            return NRFX_SUCCESS;
    61bc:	4825      	ldr	r0, [pc, #148]	; (6254 <nrfx_clock_divider_set+0xf0>)
    61be:	e7d8      	b.n	6172 <nrfx_clock_divider_set+0xe>
    61c0:	f004 0403 	and.w	r4, r4, #3
    61c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61c8:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}
    61cc:	e7f4      	b.n	61b8 <nrfx_clock_divider_set+0x54>
                    if (nrf53_errata_4())
    61ce:	f7ff fe6d 	bl	5eac <nrf53_errata_4>
    61d2:	b308      	cbz	r0, 6218 <nrfx_clock_divider_set+0xb4>
	__asm__ volatile(
    61d4:	f04f 0220 	mov.w	r2, #32
    61d8:	f3ef 8311 	mrs	r3, BASEPRI
    61dc:	f382 8812 	msr	BASEPRI_MAX, r2
    61e0:	f3bf 8f6f 	isb	sy
    61e4:	f3bf 8f4f 	dsb	sy
                        *(volatile uint32_t *)0x5084450C = 0x4040;
    61e8:	4a17      	ldr	r2, [pc, #92]	; (6248 <nrfx_clock_divider_set+0xe4>)
    61ea:	f244 0140 	movw	r1, #16448	; 0x4040
    61ee:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50026548 = 0x40;
    61f0:	4a16      	ldr	r2, [pc, #88]	; (624c <nrfx_clock_divider_set+0xe8>)
    61f2:	2140      	movs	r1, #64	; 0x40
    61f4:	6011      	str	r1, [r2, #0]
                        *(volatile uint32_t *)0x50081EE4 = 0x4D;
    61f6:	f502 22b7 	add.w	r2, r2, #374784	; 0x5b800
    61fa:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
    61fe:	214d      	movs	r1, #77	; 0x4d
    6200:	6011      	str	r1, [r2, #0]
    p_reg->HFCLKCTRL = (((uint8_t)(divider) << CLOCK_HFCLKCTRL_HCLK_Pos) &
    6202:	f004 0403 	and.w	r4, r4, #3
    6206:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    620a:	f8c2 4558 	str.w	r4, [r2, #1368]	; 0x558
	__asm__ volatile(
    620e:	f383 8811 	msr	BASEPRI, r3
    6212:	f3bf 8f6f 	isb	sy
}
    6216:	e7cf      	b.n	61b8 <nrfx_clock_divider_set+0x54>
    6218:	f004 0403 	and.w	r4, r4, #3
    621c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6220:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
}
    6224:	e7c8      	b.n	61b8 <nrfx_clock_divider_set+0x54>
            if (div > NRF_CLOCK_HFCLK_DIV_4)
    6226:	2902      	cmp	r1, #2
    6228:	d809      	bhi.n	623e <nrfx_clock_divider_set+0xda>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    622a:	f001 0403 	and.w	r4, r1, #3
    622e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6232:	f8c3 45b8 	str.w	r4, [r3, #1464]	; 0x5b8
            return NRFX_SUCCESS;
    6236:	4807      	ldr	r0, [pc, #28]	; (6254 <nrfx_clock_divider_set+0xf0>)
    6238:	e79b      	b.n	6172 <nrfx_clock_divider_set+0xe>
    623a:	4807      	ldr	r0, [pc, #28]	; (6258 <nrfx_clock_divider_set+0xf4>)
    623c:	e799      	b.n	6172 <nrfx_clock_divider_set+0xe>
                return NRFX_ERROR_INVALID_PARAM;
    623e:	4806      	ldr	r0, [pc, #24]	; (6258 <nrfx_clock_divider_set+0xf4>)
    6240:	e797      	b.n	6172 <nrfx_clock_divider_set+0xe>
    6242:	bf00      	nop
    6244:	0bad0003 	.word	0x0bad0003
    6248:	5084450c 	.word	0x5084450c
    624c:	50026548 	.word	0x50026548
    6250:	50081ee4 	.word	0x50081ee4
    6254:	0bad0000 	.word	0x0bad0000
    6258:	0bad0004 	.word	0x0bad0004

0000625c <nrfx_power_clock_irq_handler>:
#endif

void nrfx_clock_irq_handler(void)
{
    625c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    625e:	4b2a      	ldr	r3, [pc, #168]	; (6308 <nrfx_power_clock_irq_handler+0xac>)
    6260:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6262:	b15b      	cbz	r3, 627c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6264:	4b28      	ldr	r3, [pc, #160]	; (6308 <nrfx_power_clock_irq_handler+0xac>)
    6266:	2000      	movs	r0, #0
    6268:	6018      	str	r0, [r3, #0]
    626a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    626c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6270:	2201      	movs	r2, #1
    6272:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6276:	4b25      	ldr	r3, [pc, #148]	; (630c <nrfx_power_clock_irq_handler+0xb0>)
    6278:	681b      	ldr	r3, [r3, #0]
    627a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    627c:	4b24      	ldr	r3, [pc, #144]	; (6310 <nrfx_power_clock_irq_handler+0xb4>)
    627e:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6280:	b1b3      	cbz	r3, 62b0 <nrfx_power_clock_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6282:	4b23      	ldr	r3, [pc, #140]	; (6310 <nrfx_power_clock_irq_handler+0xb4>)
    6284:	2200      	movs	r2, #0
    6286:	601a      	str	r2, [r3, #0]
    6288:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    628a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    628e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6292:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6296:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    629a:	2b01      	cmp	r3, #1
    629c:	d02b      	beq.n	62f6 <nrfx_power_clock_irq_handler+0x9a>
    p_reg->INTENCLR = mask;
    629e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62a2:	2202      	movs	r2, #2
    62a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    62a8:	4b18      	ldr	r3, [pc, #96]	; (630c <nrfx_power_clock_irq_handler+0xb0>)
    62aa:	681b      	ldr	r3, [r3, #0]
    62ac:	2001      	movs	r0, #1
    62ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    62b0:	4b18      	ldr	r3, [pc, #96]	; (6314 <nrfx_power_clock_irq_handler+0xb8>)
    62b2:	681b      	ldr	r3, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    62b4:	b16b      	cbz	r3, 62d2 <nrfx_power_clock_irq_handler+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62b6:	4b17      	ldr	r3, [pc, #92]	; (6314 <nrfx_power_clock_irq_handler+0xb8>)
    62b8:	2200      	movs	r2, #0
    62ba:	601a      	str	r2, [r3, #0]
    62bc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    62be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62c2:	f44f 7280 	mov.w	r2, #256	; 0x100
    62c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    62ca:	4b10      	ldr	r3, [pc, #64]	; (630c <nrfx_power_clock_irq_handler+0xb0>)
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	2004      	movs	r0, #4
    62d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    62d2:	4b11      	ldr	r3, [pc, #68]	; (6318 <nrfx_power_clock_irq_handler+0xbc>)
    62d4:	681b      	ldr	r3, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    62d6:	b16b      	cbz	r3, 62f4 <nrfx_power_clock_irq_handler+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62d8:	4b0f      	ldr	r3, [pc, #60]	; (6318 <nrfx_power_clock_irq_handler+0xbc>)
    62da:	2200      	movs	r2, #0
    62dc:	601a      	str	r2, [r3, #0]
    62de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    62e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    62e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    62ec:	4b07      	ldr	r3, [pc, #28]	; (630c <nrfx_power_clock_irq_handler+0xb0>)
    62ee:	681b      	ldr	r3, [r3, #0]
    62f0:	2005      	movs	r0, #5
    62f2:	4798      	blx	r3
    }
#endif
}
    62f4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    62f6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62fa:	2202      	movs	r2, #2
    62fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6300:	3308      	adds	r3, #8
    6302:	2201      	movs	r2, #1
    6304:	601a      	str	r2, [r3, #0]
}
    6306:	e7d3      	b.n	62b0 <nrfx_power_clock_irq_handler+0x54>
    6308:	50005100 	.word	0x50005100
    630c:	200209ac 	.word	0x200209ac
    6310:	50005104 	.word	0x50005104
    6314:	50005120 	.word	0x50005120
    6318:	50005124 	.word	0x50005124

0000631c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    631c:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
    631e:	f04f 0320 	mov.w	r3, #32
    6322:	f3ef 8611 	mrs	r6, BASEPRI
    6326:	f383 8812 	msr	BASEPRI_MAX, r3
    632a:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    632e:	4b0e      	ldr	r3, [pc, #56]	; (6368 <nrfx_dppi_channel_alloc+0x4c>)
    6330:	681d      	ldr	r5, [r3, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    6332:	43e9      	mvns	r1, r5
    6334:	d016      	beq.n	6364 <nrfx_dppi_channel_alloc+0x48>
    uint8_t channel = 0;
    6336:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    6338:	fa21 f203 	lsr.w	r2, r1, r3
    633c:	f012 0f01 	tst.w	r2, #1
    6340:	d102      	bne.n	6348 <nrfx_dppi_channel_alloc+0x2c>
        {
            channel++;
    6342:	3301      	adds	r3, #1
    6344:	b2db      	uxtb	r3, r3
    6346:	e7f7      	b.n	6338 <nrfx_dppi_channel_alloc+0x1c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    6348:	2201      	movs	r2, #1
    634a:	fa02 f403 	lsl.w	r4, r2, r3
    634e:	4325      	orrs	r5, r4
    6350:	4a05      	ldr	r2, [pc, #20]	; (6368 <nrfx_dppi_channel_alloc+0x4c>)
    6352:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
    6354:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
    6356:	4805      	ldr	r0, [pc, #20]	; (636c <nrfx_dppi_channel_alloc+0x50>)
	__asm__ volatile(
    6358:	f386 8811 	msr	BASEPRI, r6
    635c:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    6360:	bc70      	pop	{r4, r5, r6}
    6362:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
    6364:	4802      	ldr	r0, [pc, #8]	; (6370 <nrfx_dppi_channel_alloc+0x54>)
    6366:	e7f7      	b.n	6358 <nrfx_dppi_channel_alloc+0x3c>
    6368:	200209b4 	.word	0x200209b4
    636c:	0bad0000 	.word	0x0bad0000
    6370:	0bad0002 	.word	0x0bad0002

00006374 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    6374:	4b04      	ldr	r3, [pc, #16]	; (6388 <is_allocated_channel+0x14>)
    6376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    6378:	2301      	movs	r3, #1
    637a:	4083      	lsls	r3, r0
    637c:	421a      	tst	r2, r3
}
    637e:	bf14      	ite	ne
    6380:	2001      	movne	r0, #1
    6382:	2000      	moveq	r0, #0
    6384:	4770      	bx	lr
    6386:	bf00      	nop
    6388:	200209b8 	.word	0x200209b8

0000638c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    638c:	2301      	movs	r3, #1
    638e:	fa03 f000 	lsl.w	r0, r3, r0
    6392:	4a02      	ldr	r2, [pc, #8]	; (639c <channel_allocated_set+0x10>)
    6394:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    6396:	4303      	orrs	r3, r0
    6398:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    639a:	4770      	bx	lr
    639c:	200209b8 	.word	0x200209b8

000063a0 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    63a0:	2301      	movs	r3, #1
    63a2:	fa03 f000 	lsl.w	r0, r3, r0
    63a6:	4a03      	ldr	r2, [pc, #12]	; (63b4 <channel_allocated_clr+0x14>)
    63a8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    63aa:	ea23 0300 	bic.w	r3, r3, r0
    63ae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    63b0:	4770      	bx	lr
    63b2:	bf00      	nop
    63b4:	200209b8 	.word	0x200209b8

000063b8 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    63b8:	b538      	push	{r3, r4, r5, lr}
    63ba:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    63bc:	f00c fecf 	bl	1315e <is_app_channel>
    63c0:	b908      	cbnz	r0, 63c6 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    63c2:	4809      	ldr	r0, [pc, #36]	; (63e8 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    63c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    63c6:	f04f 0320 	mov.w	r3, #32
    63ca:	f3ef 8511 	mrs	r5, BASEPRI
    63ce:	f383 8812 	msr	BASEPRI_MAX, r3
    63d2:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    63d6:	4620      	mov	r0, r4
    63d8:	f7ff ffe2 	bl	63a0 <channel_allocated_clr>
	__asm__ volatile(
    63dc:	f385 8811 	msr	BASEPRI, r5
    63e0:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    63e4:	4801      	ldr	r0, [pc, #4]	; (63ec <nrfx_gpiote_channel_free+0x34>)
}
    63e6:	e7ed      	b.n	63c4 <nrfx_gpiote_channel_free+0xc>
    63e8:	0bad0004 	.word	0x0bad0004
    63ec:	0bad0000 	.word	0x0bad0000

000063f0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    63f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63f4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    63f6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    63f8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    63fa:	4f17      	ldr	r7, [pc, #92]	; (6458 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    63fc:	e013      	b.n	6426 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    63fe:	4620      	mov	r0, r4
    6400:	f7ff ffc4 	bl	638c <channel_allocated_set>
            *p_channel = ch_idx;
    6404:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    6408:	4f14      	ldr	r7, [pc, #80]	; (645c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    640a:	f386 8811 	msr	BASEPRI, r6
    640e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    6412:	4b12      	ldr	r3, [pc, #72]	; (645c <nrfx_gpiote_channel_alloc+0x6c>)
    6414:	429f      	cmp	r7, r3
    6416:	d01b      	beq.n	6450 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    6418:	2301      	movs	r3, #1
    641a:	fa03 f309 	lsl.w	r3, r3, r9
    641e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    6422:	3401      	adds	r4, #1
    6424:	b2e4      	uxtb	r4, r4
    6426:	b19d      	cbz	r5, 6450 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    6428:	f04f 0320 	mov.w	r3, #32
    642c:	f3ef 8611 	mrs	r6, BASEPRI
    6430:	f383 8812 	msr	BASEPRI_MAX, r3
    6434:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    6438:	46a1      	mov	r9, r4
    643a:	fa25 f304 	lsr.w	r3, r5, r4
    643e:	f013 0f01 	tst.w	r3, #1
    6442:	d0e2      	beq.n	640a <nrfx_gpiote_channel_alloc+0x1a>
    6444:	4620      	mov	r0, r4
    6446:	f7ff ff95 	bl	6374 <is_allocated_channel>
    644a:	2800      	cmp	r0, #0
    644c:	d1dd      	bne.n	640a <nrfx_gpiote_channel_alloc+0x1a>
    644e:	e7d6      	b.n	63fe <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6450:	4638      	mov	r0, r7
    6452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6456:	bf00      	nop
    6458:	0bad0002 	.word	0x0bad0002
    645c:	0bad0000 	.word	0x0bad0000

00006460 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
    6460:	b570      	push	{r4, r5, r6, lr}
    6462:	b082      	sub	sp, #8
    6464:	4604      	mov	r4, r0
  if (head_ != temp_) {
    6466:	6905      	ldr	r5, [r0, #16]
    6468:	6983      	ldr	r3, [r0, #24]
    646a:	429d      	cmp	r5, r3
    646c:	d006      	beq.n	647c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
    646e:	490f      	ldr	r1, [pc, #60]	; (64ac <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
    6470:	6840      	ldr	r0, [r0, #4]
    6472:	f00d fc78 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
    6476:	2001      	movs	r0, #1
  }
  head_ = aligned_result + size;
  temp_ = head_;

  return kTfLiteOk;
}
    6478:	b002      	add	sp, #8
    647a:	bd70      	pop	{r4, r5, r6, pc}
    647c:	460e      	mov	r6, r1
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
    647e:	4611      	mov	r1, r2
    6480:	6880      	ldr	r0, [r0, #8]
    6482:	f00c feb0 	bl	131e6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    6486:	6963      	ldr	r3, [r4, #20]
    6488:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    648a:	42b3      	cmp	r3, r6
    648c:	d304      	bcc.n	6498 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x38>
  head_ = aligned_result + size;
    648e:	4430      	add	r0, r6
    6490:	6120      	str	r0, [r4, #16]
  temp_ = head_;
    6492:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
    6494:	2000      	movs	r0, #0
    6496:	e7ef      	b.n	6478 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    TF_LITE_REPORT_ERROR(
    6498:	1af2      	subs	r2, r6, r3
    649a:	9200      	str	r2, [sp, #0]
    649c:	4632      	mov	r2, r6
    649e:	4904      	ldr	r1, [pc, #16]	; (64b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
    64a0:	6860      	ldr	r0, [r4, #4]
    64a2:	f00d fc60 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    64a6:	2001      	movs	r0, #1
    64a8:	e7e6      	b.n	6478 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x18>
    64aa:	bf00      	nop
    64ac:	000690e0 	.word	0x000690e0
    64b0:	00069138 	.word	0x00069138

000064b4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
  }
  tail_ = aligned_result;
  return aligned_result;
}

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
    64b4:	b530      	push	{r4, r5, lr}
    64b6:	b083      	sub	sp, #12
    64b8:	4605      	mov	r5, r0
    64ba:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
    64bc:	4611      	mov	r1, r2
    64be:	6980      	ldr	r0, [r0, #24]
    64c0:	f00c fe91 	bl	131e6 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
    64c4:	696b      	ldr	r3, [r5, #20]
    64c6:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
    64c8:	42a3      	cmp	r3, r4
    64ca:	d303      	bcc.n	64d4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
  }
  temp_ = aligned_result + size;
    64cc:	4404      	add	r4, r0
    64ce:	61ac      	str	r4, [r5, #24]
  return aligned_result;
}
    64d0:	b003      	add	sp, #12
    64d2:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    64d4:	1ae2      	subs	r2, r4, r3
    64d6:	9200      	str	r2, [sp, #0]
    64d8:	4622      	mov	r2, r4
    64da:	4903      	ldr	r1, [pc, #12]	; (64e8 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
    64dc:	6868      	ldr	r0, [r5, #4]
    64de:	f00d fc42 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    64e2:	2000      	movs	r0, #0
    64e4:	e7f4      	b.n	64d0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
    64e6:	bf00      	nop
    64e8:	0006917c 	.word	0x0006917c

000064ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
    64ec:	b530      	push	{r4, r5, lr}
    64ee:	b083      	sub	sp, #12
    64f0:	4604      	mov	r4, r0
    64f2:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
    64f4:	6940      	ldr	r0, [r0, #20]
    64f6:	4611      	mov	r1, r2
    64f8:	1b40      	subs	r0, r0, r5
    64fa:	f00c fe7b 	bl	131f4 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
    64fe:	6923      	ldr	r3, [r4, #16]
    6500:	4283      	cmp	r3, r0
    6502:	d802      	bhi.n	650a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1e>
  tail_ = aligned_result;
    6504:	6160      	str	r0, [r4, #20]
}
    6506:	b003      	add	sp, #12
    6508:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
    650a:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
    650c:	9300      	str	r3, [sp, #0]
    650e:	1aeb      	subs	r3, r5, r3
    6510:	462a      	mov	r2, r5
    6512:	4903      	ldr	r1, [pc, #12]	; (6520 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
    6514:	6860      	ldr	r0, [r4, #4]
    6516:	f00d fc26 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    651a:	2000      	movs	r0, #0
    651c:	e7f3      	b.n	6506 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1a>
    651e:	bf00      	nop
    6520:	000691c8 	.word	0x000691c8

00006524 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
    6524:	b430      	push	{r4, r5}
      temp_(buffer_head_) {}
    6526:	4d05      	ldr	r5, [pc, #20]	; (653c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x18>)
    6528:	6005      	str	r5, [r0, #0]
    652a:	6041      	str	r1, [r0, #4]
    652c:	6082      	str	r2, [r0, #8]
    652e:	60c3      	str	r3, [r0, #12]
    6530:	6102      	str	r2, [r0, #16]
    6532:	6143      	str	r3, [r0, #20]
    6534:	6182      	str	r2, [r0, #24]
    6536:	bc30      	pop	{r4, r5}
    6538:	4770      	bx	lr
    653a:	bf00      	nop
    653c:	0006921c 	.word	0x0006921c

00006540 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
    6540:	b510      	push	{r4, lr}
    6542:	b088      	sub	sp, #32
  TFLITE_DCHECK(error_reporter != nullptr);
    6544:	b300      	cbz	r0, 6588 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x48>
    6546:	460c      	mov	r4, r1
    6548:	4613      	mov	r3, r2
    654a:	4601      	mov	r1, r0
  TFLITE_DCHECK(buffer_head != nullptr);
    654c:	b1f4      	cbz	r4, 658c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x4c>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
    654e:	4622      	mov	r2, r4
    6550:	a801      	add	r0, sp, #4
    6552:	f00c fe16 	bl	13182 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
    6556:	2204      	movs	r2, #4
    6558:	211c      	movs	r1, #28
    655a:	eb0d 0002 	add.w	r0, sp, r2
    655e:	f7ff ffc5 	bl	64ec <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
    6562:	4603      	mov	r3, r0
    6564:	b168      	cbz	r0, 6582 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x42>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
    6566:	4a0a      	ldr	r2, [pc, #40]	; (6590 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
    6568:	6002      	str	r2, [r0, #0]
    656a:	9a02      	ldr	r2, [sp, #8]
    656c:	6042      	str	r2, [r0, #4]
    656e:	9a03      	ldr	r2, [sp, #12]
    6570:	6082      	str	r2, [r0, #8]
    6572:	9a04      	ldr	r2, [sp, #16]
    6574:	60c2      	str	r2, [r0, #12]
    6576:	9a05      	ldr	r2, [sp, #20]
    6578:	6102      	str	r2, [r0, #16]
    657a:	9a06      	ldr	r2, [sp, #24]
    657c:	6142      	str	r2, [r0, #20]
    657e:	9a07      	ldr	r2, [sp, #28]
    6580:	6182      	str	r2, [r0, #24]
}
    6582:	4618      	mov	r0, r3
    6584:	b008      	add	sp, #32
    6586:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
    6588:	f00f fe07 	bl	1619a <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
    658c:	f00f fe05 	bl	1619a <abort>
    6590:	0006921c 	.word	0x0006921c

00006594 <DebugLog>:

#ifndef TF_LITE_STRIP_ERROR_STRINGS
#include <cstdio>
#endif

extern "C" void DebugLog(const char* s) {
    6594:	b508      	push	{r3, lr}
    6596:	4602      	mov	r2, r0
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
    6598:	4b03      	ldr	r3, [pc, #12]	; (65a8 <DebugLog+0x14>)
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	4903      	ldr	r1, [pc, #12]	; (65ac <DebugLog+0x18>)
    659e:	68d8      	ldr	r0, [r3, #12]
    65a0:	f00a fa2c 	bl	109fc <fiprintf>
#endif
}
    65a4:	bd08      	pop	{r3, pc}
    65a6:	bf00      	nop
    65a8:	200000cc 	.word	0x200000cc
    65ac:	00069234 	.word	0x00069234

000065b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
    65b0:	b500      	push	{lr}
    65b2:	b0c1      	sub	sp, #260	; 0x104
    65b4:	4602      	mov	r2, r0
    65b6:	460b      	mov	r3, r1
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
    65b8:	f44f 7180 	mov.w	r1, #256	; 0x100
    65bc:	4668      	mov	r0, sp
    65be:	f000 f917 	bl	67f0 <MicroVsnprintf>
  DebugLog(log_buffer);
    65c2:	4668      	mov	r0, sp
    65c4:	f7ff ffe6 	bl	6594 <DebugLog>
  DebugLog("\r\n");
    65c8:	4802      	ldr	r0, [pc, #8]	; (65d4 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x24>)
    65ca:	f7ff ffe3 	bl	6594 <DebugLog>
#endif
}
    65ce:	b041      	add	sp, #260	; 0x104
    65d0:	f85d fb04 	ldr.w	pc, [sp], #4
    65d4:	0006bc68 	.word	0x0006bc68

000065d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:
  return kTfLiteOk;
}

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
    65d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65dc:	b083      	sub	sp, #12
    65de:	4680      	mov	r8, r0
    65e0:	468b      	mov	fp, r1
    65e2:	4692      	mov	sl, r2
    65e4:	4699      	mov	r9, r3
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
    65e6:	4606      	mov	r6, r0
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
    65e8:	f00c fe7a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    65ec:	eba8 0400 	sub.w	r4, r8, r0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    65f0:	4620      	mov	r0, r4
    65f2:	f00c fe7b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    65f6:	2804      	cmp	r0, #4
    65f8:	d90d      	bls.n	6616 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
    65fa:	1d20      	adds	r0, r4, #4
    65fc:	f00c fe76 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    6600:	eb08 0400 	add.w	r4, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6604:	b148      	cbz	r0, 661a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x42>
    6606:	4620      	mov	r0, r4
    6608:	f00c fe64 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    660c:	4404      	add	r4, r0
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    660e:	b3ac      	cbz	r4, 667c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa4>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6610:	2500      	movs	r5, #0
  int element_count = 1;
    6612:	2701      	movs	r7, #1
    6614:	e01e      	b.n	6654 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x7c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6616:	2000      	movs	r0, #0
    6618:	e7f2      	b.n	6600 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    661a:	2400      	movs	r4, #0
    661c:	e7f7      	b.n	660e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    661e:	1d20      	adds	r0, r4, #4
    6620:	f00c fe64 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6624:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6626:	b300      	cbz	r0, 666a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
    6628:	4620      	mov	r0, r4
    662a:	f00c fe53 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    662e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6630:	6820      	ldr	r0, [r4, #0]
    6632:	f00b fc30 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6636:	4285      	cmp	r5, r0
    6638:	d221      	bcs.n	667e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa6>
    663a:	6820      	ldr	r0, [r4, #0]
    663c:	f00b fc2b 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6640:	4285      	cmp	r5, r0
    6642:	d214      	bcs.n	666e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6644:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6646:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    664a:	f00c fe48 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      element_count *= flatbuffer_tensor.shape()->Get(n);
    664e:	fb00 f707 	mul.w	r7, r0, r7
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
    6652:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6654:	4630      	mov	r0, r6
    6656:	f00c fe43 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    665a:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    665c:	4620      	mov	r0, r4
    665e:	f00c fe45 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6662:	2804      	cmp	r0, #4
    6664:	d8db      	bhi.n	661e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x46>
    6666:	2000      	movs	r0, #0
    6668:	e7dc      	b.n	6624 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    666a:	2400      	movs	r4, #0
    666c:	e7e0      	b.n	6630 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
    FLATBUFFERS_ASSERT(i < size());
    666e:	4b1a      	ldr	r3, [pc, #104]	; (66d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x100>)
    6670:	4a1a      	ldr	r2, [pc, #104]	; (66dc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x104>)
    6672:	f44f 7183 	mov.w	r1, #262	; 0x106
    6676:	481a      	ldr	r0, [pc, #104]	; (66e0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x108>)
    6678:	f00a f9a2 	bl	109c0 <__assert_func>
  int element_count = 1;
    667c:	2701      	movs	r7, #1
    return data_ - ReadScalar<soffset_t>(data_);
    667e:	4640      	mov	r0, r8
    6680:	f00c fe2e 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6684:	eba8 0400 	sub.w	r4, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6688:	4620      	mov	r0, r4
    668a:	f00c fe2f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    668e:	2806      	cmp	r0, #6
    6690:	d910      	bls.n	66b4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xdc>
    6692:	1da0      	adds	r0, r4, #6
    6694:	f00c fe2a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6698:	b170      	cbz	r0, 66b8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe0>
    669a:	4440      	add	r0, r8
    669c:	f00c fe2c 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    66a0:	464a      	mov	r2, r9
    66a2:	f10d 0107 	add.w	r1, sp, #7
    66a6:	b2c0      	uxtb	r0, r0
    66a8:	f003 f98a 	bl	99c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    66ac:	b130      	cbz	r0, 66bc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xe4>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
    66ae:	b003      	add	sp, #12
    66b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    66b4:	2000      	movs	r0, #0
    66b6:	e7ef      	b.n	6698 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc0>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    66b8:	2000      	movs	r0, #0
    66ba:	e7f1      	b.n	66a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xc8>
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
    66bc:	4651      	mov	r1, sl
    66be:	f89d 0007 	ldrb.w	r0, [sp, #7]
    66c2:	f00c fda3 	bl	1320c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
    66c6:	2800      	cmp	r0, #0
    66c8:	d1f1      	bne.n	66ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
  *bytes = element_count * (*type_size);
    66ca:	f8da 3000 	ldr.w	r3, [sl]
    66ce:	fb07 f703 	mul.w	r7, r7, r3
    66d2:	f8cb 7000 	str.w	r7, [fp]
  return kTfLiteOk;
    66d6:	e7ea      	b.n	66ae <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xd6>
    66d8:	0006924c 	.word	0x0006924c
    66dc:	00069258 	.word	0x00069258
    66e0:	00069318 	.word	0x00069318

000066e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
    66e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66e6:	b089      	sub	sp, #36	; 0x24
    66e8:	9001      	str	r0, [sp, #4]
    66ea:	460e      	mov	r6, r1
  char* current = buffer;
  char* current_end = buffer + (kFastToBufferSize - 1);
    66ec:	f101 052f 	add.w	r5, r1, #47	; 0x2f
  const uint32_t exponent_mask = 0x7f800000;
  const int32_t exponent_shift = 23;
  const int32_t exponent_bias = 127;
  const uint32_t fraction_mask = 0x007fffff;
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
    66f0:	2204      	movs	r2, #4
    66f2:	eb0d 0102 	add.w	r1, sp, r2
    66f6:	a807      	add	r0, sp, #28
    66f8:	f00f fd68 	bl	161cc <memcpy>
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
    66fc:	9b07      	ldr	r3, [sp, #28]
    66fe:	f3c3 54c7 	ubfx	r4, r3, #23, #8
    6702:	3c7f      	subs	r4, #127	; 0x7f
  const uint32_t fraction = (u & fraction_mask);
    6704:	f3c3 0716 	ubfx	r7, r3, #0, #23
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
    6708:	2b00      	cmp	r3, #0
    670a:	db0e      	blt.n	672a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x46>
    *current = '-';
    current += 1;
  }
  *current = 0;
    670c:	2300      	movs	r3, #0
    670e:	7033      	strb	r3, [r6, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
    6710:	2c80      	cmp	r4, #128	; 0x80
    6712:	d00e      	beq.n	6732 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x4e>
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
    6714:	4b32      	ldr	r3, [pc, #200]	; (67e0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xfc>)
    6716:	f10d 0c0c 	add.w	ip, sp, #12
    671a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    671c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    6720:	f88c 3000 	strb.w	r3, [ip]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
    6724:	463a      	mov	r2, r7
  for (int i = 0; i < scale_shifts_size; ++i) {
    6726:	2300      	movs	r3, #0
    6728:	e01a      	b.n	6760 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7c>
    *current = '-';
    672a:	232d      	movs	r3, #45	; 0x2d
    672c:	f806 3b01 	strb.w	r3, [r6], #1
    current += 1;
    6730:	e7ec      	b.n	670c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x28>
    if (fraction == 0) {
    6732:	b937      	cbnz	r7, 6742 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x5e>
      current = StrCatStr(current, (current_end - current), "Inf");
    6734:	4a2b      	ldr	r2, [pc, #172]	; (67e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x100>)
    6736:	1ba9      	subs	r1, r5, r6
    6738:	4630      	mov	r0, r6
    673a:	f00c fdf4 	bl	13326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    673e:	4607      	mov	r7, r0
      return current;
    6740:	e04a      	b.n	67d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
      current = StrCatStr(current, (current_end - current), "NaN");
    6742:	4a29      	ldr	r2, [pc, #164]	; (67e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x104>)
    6744:	1ba9      	subs	r1, r5, r6
    6746:	4630      	mov	r0, r6
    6748:	f00c fded 	bl	13326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
    674c:	4607      	mov	r7, r0
      return current;
    674e:	e043      	b.n	67d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    scaled_fraction += (fraction >> scale_shifts[i]);
    6750:	a908      	add	r1, sp, #32
    6752:	18c8      	adds	r0, r1, r3
    6754:	f910 0c14 	ldrsb.w	r0, [r0, #-20]
    6758:	fa27 f000 	lsr.w	r0, r7, r0
    675c:	4402      	add	r2, r0
  for (int i = 0; i < scale_shifts_size; ++i) {
    675e:	3301      	adds	r3, #1
    6760:	2b0c      	cmp	r3, #12
    6762:	ddf5      	ble.n	6750 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x6c>
  }
  *current = '1';
    6764:	2331      	movs	r3, #49	; 0x31
    6766:	7033      	strb	r3, [r6, #0]
  current += 1;
  *current = '.';
    6768:	232e      	movs	r3, #46	; 0x2e
    676a:	7073      	strb	r3, [r6, #1]
  current += 1;
    676c:	1cb7      	adds	r7, r6, #2
  *current = 0;
    676e:	2300      	movs	r3, #0
    6770:	70b3      	strb	r3, [r6, #2]
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
    6772:	1be9      	subs	r1, r5, r7
    6774:	2907      	cmp	r1, #7
    6776:	dd2f      	ble.n	67d8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xf4>
    return current;
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6778:	2301      	movs	r3, #1
    677a:	2b06      	cmp	r3, #6
    677c:	dc03      	bgt.n	6786 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xa2>
    *(current + i) = '0';
    677e:	2030      	movs	r0, #48	; 0x30
    6780:	54f8      	strb	r0, [r7, r3]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
    6782:	3301      	adds	r3, #1
    6784:	e7f9      	b.n	677a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
    6786:	230a      	movs	r3, #10
    6788:	4638      	mov	r0, r7
    678a:	f00c fe19 	bl	133c0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>
  int fraction_digits = current - previous;
    678e:	1bc1      	subs	r1, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
    6790:	2330      	movs	r3, #48	; 0x30
    6792:	7003      	strb	r3, [r0, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
    6794:	f1d1 0607 	rsbs	r6, r1, #7
    6798:	d00c      	beq.n	67b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
    for (int i = 0; i < fraction_digits; i++) {
    679a:	2300      	movs	r3, #0
    679c:	428b      	cmp	r3, r1
    679e:	da06      	bge.n	67ae <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xca>
      current--;
      *(current + leading_zeros) = *current;
    67a0:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    67a4:	5582      	strb	r2, [r0, r6]
      *current = '0';
    67a6:	2230      	movs	r2, #48	; 0x30
    67a8:	7002      	strb	r2, [r0, #0]
    for (int i = 0; i < fraction_digits; i++) {
    67aa:	3301      	adds	r3, #1
    67ac:	e7f6      	b.n	679c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xb8>
    }
    current += kMaxFractionalDigits;
    67ae:	3007      	adds	r0, #7
    67b0:	e000      	b.n	67b4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd0>
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
    current--;
    67b2:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
    67b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    67b8:	2b30      	cmp	r3, #48	; 0x30
    67ba:	d102      	bne.n	67c2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xde>
    67bc:	1e43      	subs	r3, r0, #1
    67be:	42bb      	cmp	r3, r7
    67c0:	d8f7      	bhi.n	67b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xce>
  }
  *current = 0;
    67c2:	2300      	movs	r3, #0
    67c4:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
    67c6:	4a09      	ldr	r2, [pc, #36]	; (67ec <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x108>)
    67c8:	1a29      	subs	r1, r5, r0
    67ca:	f00c fdac 	bl	13326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
    67ce:	4622      	mov	r2, r4
    67d0:	1a29      	subs	r1, r5, r0
    67d2:	f00c fde6 	bl	133a2 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>
    67d6:	4607      	mov	r7, r0
  return current;
}
    67d8:	4638      	mov	r0, r7
    67da:	b009      	add	sp, #36	; 0x24
    67dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67de:	bf00      	nop
    67e0:	0006938c 	.word	0x0006938c
    67e4:	00069380 	.word	0x00069380
    67e8:	00069384 	.word	0x00069384
    67ec:	00069388 	.word	0x00069388

000067f0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
    67f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    67f2:	b083      	sub	sp, #12
    67f4:	4607      	mov	r7, r0
    67f6:	4615      	mov	r5, r2
    67f8:	9301      	str	r3, [sp, #4]
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
    67fa:	1e4e      	subs	r6, r1, #1
  int output_index = 0;
    67fc:	2400      	movs	r4, #0
    67fe:	e07c      	b.n	68fa <MicroVsnprintf+0x10a>
    if (*current == '%') {
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6800:	1b33      	subs	r3, r6, r4
    6802:	2b0a      	cmp	r3, #10
    6804:	dd09      	ble.n	681a <MicroVsnprintf+0x2a>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	1d1a      	adds	r2, r3, #4
    680a:	9201      	str	r2, [sp, #4]
    680c:	6819      	ldr	r1, [r3, #0]
    680e:	1938      	adds	r0, r7, r4
    6810:	f00c fde6 	bl	133e0 <_ZN12_GLOBAL__N_111FormatInt32EPci>
          output_index +=
    6814:	4404      	add	r4, r0
          current++;
    6816:	1caa      	adds	r2, r5, #2
          break;
    6818:	e06e      	b.n	68f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    681a:	1c60      	adds	r0, r4, #1
    681c:	2300      	movs	r3, #0
    681e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6820:	e0b1      	b.n	6986 <MicroVsnprintf+0x196>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
    6822:	1b33      	subs	r3, r6, r4
    6824:	2b0a      	cmp	r3, #10
    6826:	dd09      	ble.n	683c <MicroVsnprintf+0x4c>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
    6828:	9b01      	ldr	r3, [sp, #4]
    682a:	1d1a      	adds	r2, r3, #4
    682c:	9201      	str	r2, [sp, #4]
    682e:	6819      	ldr	r1, [r3, #0]
    6830:	1938      	adds	r0, r7, r4
    6832:	f00c fddd 	bl	133f0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>
          output_index +=
    6836:	4404      	add	r4, r0
          current++;
    6838:	1caa      	adds	r2, r5, #2
          break;
    683a:	e05d      	b.n	68f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    683c:	1c60      	adds	r0, r4, #1
    683e:	2300      	movs	r3, #0
    6840:	553b      	strb	r3, [r7, r4]
            return output_index;
    6842:	e0a0      	b.n	6986 <MicroVsnprintf+0x196>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
    6844:	1b33      	subs	r3, r6, r4
    6846:	2b09      	cmp	r3, #9
    6848:	dd0f      	ble.n	686a <MicroVsnprintf+0x7a>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = '0';
    684a:	1c63      	adds	r3, r4, #1
    684c:	2230      	movs	r2, #48	; 0x30
    684e:	553a      	strb	r2, [r7, r4]
          output[output_index++] = 'x';
    6850:	3402      	adds	r4, #2
    6852:	2278      	movs	r2, #120	; 0x78
    6854:	54fa      	strb	r2, [r7, r3]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
    6856:	9b01      	ldr	r3, [sp, #4]
    6858:	1d1a      	adds	r2, r3, #4
    685a:	9201      	str	r2, [sp, #4]
    685c:	6819      	ldr	r1, [r3, #0]
    685e:	1938      	adds	r0, r7, r4
    6860:	f00c fdcf 	bl	13402 <_ZN12_GLOBAL__N_19FormatHexEPcj>
          output_index +=
    6864:	4404      	add	r4, r0
          current++;
    6866:	1caa      	adds	r2, r5, #2
          break;
    6868:	e046      	b.n	68f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    686a:	1c60      	adds	r0, r4, #1
    686c:	2300      	movs	r3, #0
    686e:	553b      	strb	r3, [r7, r4]
            return output_index;
    6870:	e089      	b.n	6986 <MicroVsnprintf+0x196>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
    6872:	1b30      	subs	r0, r6, r4
    6874:	f7fa f9f8 	bl	c68 <__aeabi_i2f>
    6878:	4944      	ldr	r1, [pc, #272]	; (698c <MicroVsnprintf+0x19c>)
    687a:	f7fa fbe7 	bl	104c <__aeabi_fcmplt>
    687e:	b988      	cbnz	r0, 68a4 <MicroVsnprintf+0xb4>
            output[output_index++] = '\0';
            return output_index;
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
    6880:	9b01      	ldr	r3, [sp, #4]
    6882:	3307      	adds	r3, #7
    6884:	f023 0307 	bic.w	r3, r3, #7
    6888:	f103 0208 	add.w	r2, r3, #8
    688c:	9201      	str	r2, [sp, #4]
    688e:	e9d3 0100 	ldrd	r0, r1, [r3]
    6892:	f7fa f8df 	bl	a54 <__aeabi_d2f>
    6896:	4601      	mov	r1, r0
    6898:	1938      	adds	r0, r7, r4
    689a:	f00c fdbb 	bl	13414 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
          output_index +=
    689e:	4404      	add	r4, r0
          current++;
    68a0:	1caa      	adds	r2, r5, #2
          break;
    68a2:	e029      	b.n	68f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68a4:	1c60      	adds	r0, r4, #1
    68a6:	2300      	movs	r3, #0
    68a8:	553b      	strb	r3, [r7, r4]
            return output_index;
    68aa:	e06c      	b.n	6986 <MicroVsnprintf+0x196>
        case '%':
          output[output_index++] = *current++;
    68ac:	1caa      	adds	r2, r5, #2
    68ae:	553b      	strb	r3, [r7, r4]
    68b0:	3401      	adds	r4, #1
          break;
    68b2:	e021      	b.n	68f8 <MicroVsnprintf+0x108>
        case 'c':
          if (usable_length - output_index < 1) {
    68b4:	1b33      	subs	r3, r6, r4
    68b6:	2b00      	cmp	r3, #0
    68b8:	dd07      	ble.n	68ca <MicroVsnprintf+0xda>
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
    68ba:	9b01      	ldr	r3, [sp, #4]
    68bc:	1d1a      	adds	r2, r3, #4
    68be:	9201      	str	r2, [sp, #4]
    68c0:	681b      	ldr	r3, [r3, #0]
    68c2:	553b      	strb	r3, [r7, r4]
          current++;
    68c4:	1caa      	adds	r2, r5, #2
          output[output_index++] = va_arg(args, int32_t);
    68c6:	3401      	adds	r4, #1
          break;
    68c8:	e016      	b.n	68f8 <MicroVsnprintf+0x108>
            output[output_index++] = '\0';
    68ca:	1c60      	adds	r0, r4, #1
    68cc:	2300      	movs	r3, #0
    68ce:	553b      	strb	r3, [r7, r4]
            return output_index;
    68d0:	e059      	b.n	6986 <MicroVsnprintf+0x196>
        case 's':
          char* string = va_arg(args, char*);
    68d2:	9b01      	ldr	r3, [sp, #4]
    68d4:	1d1a      	adds	r2, r3, #4
    68d6:	9201      	str	r2, [sp, #4]
    68d8:	6819      	ldr	r1, [r3, #0]
          int string_idx = 0;
    68da:	2300      	movs	r3, #0
          while (string_idx + output_index < usable_length &&
    68dc:	18e2      	adds	r2, r4, r3
    68de:	42b2      	cmp	r2, r6
    68e0:	da05      	bge.n	68ee <MicroVsnprintf+0xfe>
                 string[string_idx] != '\0') {
    68e2:	5cca      	ldrb	r2, [r1, r3]
          while (string_idx + output_index < usable_length &&
    68e4:	b11a      	cbz	r2, 68ee <MicroVsnprintf+0xfe>
            output[output_index++] = string[string_idx++];
    68e6:	3301      	adds	r3, #1
    68e8:	553a      	strb	r2, [r7, r4]
    68ea:	3401      	adds	r4, #1
          while (string_idx + output_index < usable_length &&
    68ec:	e7f6      	b.n	68dc <MicroVsnprintf+0xec>
          }
          current++;
    68ee:	1caa      	adds	r2, r5, #2
    68f0:	e002      	b.n	68f8 <MicroVsnprintf+0x108>
      }
    } else {
      output[output_index++] = *current++;
    68f2:	1c6a      	adds	r2, r5, #1
    68f4:	553b      	strb	r3, [r7, r4]
    68f6:	3401      	adds	r4, #1
          output[output_index++] = va_arg(args, int32_t);
    68f8:	4615      	mov	r5, r2
  while (*current != '\0' && output_index < usable_length) {
    68fa:	782b      	ldrb	r3, [r5, #0]
    68fc:	2b00      	cmp	r3, #0
    68fe:	d03f      	beq.n	6980 <MicroVsnprintf+0x190>
    6900:	42b4      	cmp	r4, r6
    6902:	da3d      	bge.n	6980 <MicroVsnprintf+0x190>
    if (*current == '%') {
    6904:	2b25      	cmp	r3, #37	; 0x25
    6906:	d1f4      	bne.n	68f2 <MicroVsnprintf+0x102>
      current++;
    6908:	1c6a      	adds	r2, r5, #1
      switch (*current) {
    690a:	786b      	ldrb	r3, [r5, #1]
    690c:	2b25      	cmp	r3, #37	; 0x25
    690e:	d0cd      	beq.n	68ac <MicroVsnprintf+0xbc>
    6910:	d3f2      	bcc.n	68f8 <MicroVsnprintf+0x108>
    6912:	2b78      	cmp	r3, #120	; 0x78
    6914:	d8f0      	bhi.n	68f8 <MicroVsnprintf+0x108>
    6916:	2b63      	cmp	r3, #99	; 0x63
    6918:	d3ee      	bcc.n	68f8 <MicroVsnprintf+0x108>
    691a:	3b63      	subs	r3, #99	; 0x63
    691c:	2b15      	cmp	r3, #21
    691e:	d8eb      	bhi.n	68f8 <MicroVsnprintf+0x108>
    6920:	a101      	add	r1, pc, #4	; (adr r1, 6928 <MicroVsnprintf+0x138>)
    6922:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    6926:	bf00      	nop
    6928:	000068b5 	.word	0x000068b5
    692c:	00006801 	.word	0x00006801
    6930:	000068f9 	.word	0x000068f9
    6934:	00006873 	.word	0x00006873
    6938:	000068f9 	.word	0x000068f9
    693c:	000068f9 	.word	0x000068f9
    6940:	000068f9 	.word	0x000068f9
    6944:	000068f9 	.word	0x000068f9
    6948:	000068f9 	.word	0x000068f9
    694c:	000068f9 	.word	0x000068f9
    6950:	000068f9 	.word	0x000068f9
    6954:	000068f9 	.word	0x000068f9
    6958:	000068f9 	.word	0x000068f9
    695c:	000068f9 	.word	0x000068f9
    6960:	000068f9 	.word	0x000068f9
    6964:	000068f9 	.word	0x000068f9
    6968:	000068d3 	.word	0x000068d3
    696c:	000068f9 	.word	0x000068f9
    6970:	00006823 	.word	0x00006823
    6974:	000068f9 	.word	0x000068f9
    6978:	000068f9 	.word	0x000068f9
    697c:	00006845 	.word	0x00006845
    }
  }
  output[output_index++] = '\0';
    6980:	1c60      	adds	r0, r4, #1
    6982:	2300      	movs	r3, #0
    6984:	553b      	strb	r3, [r7, r4]
  return output_index;
}
    6986:	b003      	add	sp, #12
    6988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    698a:	bf00      	nop
    698c:	41600000 	.word	0x41600000

00006990 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  } else {
    return 0;
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
    6990:	b570      	push	{r4, r5, r6, lr}
    6992:	4604      	mov	r4, r0
    6994:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    6996:	f00c fca3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    699a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    699c:	4630      	mov	r0, r6
    699e:	f00c fca5 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69a2:	2808      	cmp	r0, #8
    69a4:	d918      	bls.n	69d8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>
    69a6:	f106 0008 	add.w	r0, r6, #8
    69aa:	f00c fc9f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    69ae:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69b0:	b1a0      	cbz	r0, 69dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>
    69b2:	4620      	mov	r0, r4
    69b4:	f00c fc8e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    69b8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    69ba:	6820      	ldr	r0, [r4, #0]
    69bc:	f00b fa6b 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    69c0:	4285      	cmp	r5, r0
    69c2:	d20d      	bcs.n	69e0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x50>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    69c4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    69c6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    69ca:	4620      	mov	r0, r4
    69cc:	f00c fc82 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
    69d0:	4420      	add	r0, r4
    69d2:	f00c fd35 	bl	13440 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
}
    69d6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    69d8:	2000      	movs	r0, #0
    69da:	e7e8      	b.n	69ae <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    69dc:	2400      	movs	r4, #0
    69de:	e7ec      	b.n	69ba <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x2a>
    FLATBUFFERS_ASSERT(i < size());
    69e0:	4b03      	ldr	r3, [pc, #12]	; (69f0 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x60>)
    69e2:	4a04      	ldr	r2, [pc, #16]	; (69f4 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x64>)
    69e4:	f44f 7183 	mov.w	r1, #262	; 0x106
    69e8:	4803      	ldr	r0, [pc, #12]	; (69f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x68>)
    69ea:	f009 ffe9 	bl	109c0 <__assert_func>
    69ee:	bf00      	nop
    69f0:	0006924c 	.word	0x0006924c
    69f4:	0006939c 	.word	0x0006939c
    69f8:	00069318 	.word	0x00069318

000069fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
    69fc:	6943      	ldr	r3, [r0, #20]
    69fe:	2b20      	cmp	r3, #32
    6a00:	d007      	beq.n	6a12 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
    6a02:	b2da      	uxtb	r2, r3
  return (v < low) || (high < v);
    6a04:	2a91      	cmp	r2, #145	; 0x91
    6a06:	d806      	bhi.n	6a16 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1a>
  const size_t index = static_cast<size_t>(e);
    6a08:	4613      	mov	r3, r2
  return EnumNamesBuiltinOperator()[index];
    6a0a:	4a04      	ldr	r2, [pc, #16]	; (6a1c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
    6a0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6a10:	4770      	bx	lr
    return registration->custom_name;
    6a12:	6980      	ldr	r0, [r0, #24]
    6a14:	4770      	bx	lr
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    6a16:	4802      	ldr	r0, [pc, #8]	; (6a20 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>)
  }
}
    6a18:	4770      	bx	lr
    6a1a:	bf00      	nop
    6a1c:	00069da8 	.word	0x00069da8
    6a20:	00068a78 	.word	0x00068a78

00006a24 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::PrepareSubgraphs() {
    6a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a28:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
    6a2a:	f8d0 8014 	ldr.w	r8, [r0, #20]

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6a2e:	2600      	movs	r6, #0
    6a30:	e024      	b.n	6a7c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x58>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
                      OpNameFromRegistration(registration), i, prepare_status);
          return kTfLiteError;
        }
      }
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
    6a32:	4621      	mov	r1, r4
    6a34:	68e8      	ldr	r0, [r5, #12]
    6a36:	f00c ff3f 	bl	138b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
    6a3a:	3401      	adds	r4, #1
    6a3c:	42bc      	cmp	r4, r7
    6a3e:	d21c      	bcs.n	6a7a <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6a40:	692b      	ldr	r3, [r5, #16]
    6a42:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    6a46:	212c      	movs	r1, #44	; 0x2c
    6a48:	fb01 3104 	mla	r1, r1, r4, r3
      const TfLiteRegistration* registration =
    6a4c:	f8d1 9028 	ldr.w	r9, [r1, #40]	; 0x28
      if (registration->prepare != nullptr) {
    6a50:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d0ec      	beq.n	6a32 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
    6a58:	6868      	ldr	r0, [r5, #4]
    6a5a:	4798      	blx	r3
        if (prepare_status != kTfLiteOk) {
    6a5c:	4682      	mov	sl, r0
    6a5e:	2800      	cmp	r0, #0
    6a60:	d0e7      	beq.n	6a32 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xe>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
    6a62:	4648      	mov	r0, r9
    6a64:	f7ff ffca 	bl	69fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6a68:	4601      	mov	r1, r0
    6a6a:	4653      	mov	r3, sl
    6a6c:	4622      	mov	r2, r4
    6a6e:	480c      	ldr	r0, [pc, #48]	; (6aa0 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x7c>)
    6a70:	f00c fbab 	bl	131ca <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    6a74:	2001      	movs	r0, #1
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
    6a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6a7a:	3601      	adds	r6, #1
    6a7c:	69ab      	ldr	r3, [r5, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    6a7e:	6818      	ldr	r0, [r3, #0]
    6a80:	f00b fa09 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6a84:	4286      	cmp	r6, r0
    6a86:	d207      	bcs.n	6a98 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x74>
    current_subgraph_index_ = subgraph_idx;
    6a88:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6a8a:	4631      	mov	r1, r6
    6a8c:	68a8      	ldr	r0, [r5, #8]
    6a8e:	f7ff ff7f 	bl	6990 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6a92:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
    6a94:	2400      	movs	r4, #0
    6a96:	e7d1      	b.n	6a3c <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x18>
  current_subgraph_index_ = previous_subgraph_idx;
    6a98:	f8c5 8014 	str.w	r8, [r5, #20]
  return kTfLiteOk;
    6a9c:	2000      	movs	r0, #0
    6a9e:	e7ea      	b.n	6a76 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x52>
    6aa0:	00069494 	.word	0x00069494

00006aa4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
    6aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aa8:	b083      	sub	sp, #12
    6aaa:	4606      	mov	r6, r0
    6aac:	460c      	mov	r4, r1
  int previous_subgraph_idx = current_subgraph_index_;
    6aae:	f8d0 b014 	ldr.w	fp, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
    6ab2:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
    6ab4:	6983      	ldr	r3, [r0, #24]
    6ab6:	6818      	ldr	r0, [r3, #0]
    6ab8:	f00b f9ed 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6abc:	4284      	cmp	r4, r0
    6abe:	d207      	bcs.n	6ad0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x2c>
    6ac0:	46a2      	mov	sl, r4
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
  }
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    6ac2:	4621      	mov	r1, r4
    6ac4:	68b0      	ldr	r0, [r6, #8]
    6ac6:	f7ff ff63 	bl	6990 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    6aca:	4681      	mov	r9, r0
  for (size_t i = 0; i < operators_size; ++i) {
    6acc:	2700      	movs	r7, #0
    6ace:	e01d      	b.n	6b0c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x68>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
    6ad0:	4602      	mov	r2, r0
    6ad2:	4621      	mov	r1, r4
    6ad4:	4827      	ldr	r0, [pc, #156]	; (6b74 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd0>)
    6ad6:	f00c fb78 	bl	131ca <_Z11MicroPrintfPKcz>
    return kTfLiteError;
    6ada:	2501      	movs	r5, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
    6adc:	4628      	mov	r0, r5
    6ade:	b003      	add	sp, #12
    6ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK(registration->invoke);
    6ae4:	f00f fb59 	bl	1619a <abort>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
    6ae8:	4640      	mov	r0, r8
    6aea:	f7ff ff87 	bl	69fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6aee:	4601      	mov	r1, r0
    6af0:	462b      	mov	r3, r5
    6af2:	463a      	mov	r2, r7
    6af4:	4820      	ldr	r0, [pc, #128]	; (6b78 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xd4>)
    6af6:	f00c fb68 	bl	131ca <_Z11MicroPrintfPKcz>
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
    6afa:	2c00      	cmp	r4, #0
    6afc:	d0ee      	beq.n	6adc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
      profiler_->EndEvent(event_handle_);
    6afe:	6823      	ldr	r3, [r4, #0]
    6b00:	68db      	ldr	r3, [r3, #12]
    6b02:	9900      	ldr	r1, [sp, #0]
    6b04:	4620      	mov	r0, r4
    6b06:	4798      	blx	r3
    6b08:	e7e8      	b.n	6adc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
  for (size_t i = 0; i < operators_size; ++i) {
    6b0a:	3701      	adds	r7, #1
    6b0c:	454f      	cmp	r7, r9
    6b0e:	d22d      	bcs.n	6b6c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xc8>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
    6b10:	6933      	ldr	r3, [r6, #16]
    6b12:	f853 303a 	ldr.w	r3, [r3, sl, lsl #3]
    6b16:	252c      	movs	r5, #44	; 0x2c
    6b18:	fb05 3507 	mla	r5, r5, r7, r3
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
    6b1c:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
        reinterpret_cast<MicroProfiler*>(context_->profiler));
    6b20:	4640      	mov	r0, r8
    6b22:	f7ff ff6b 	bl	69fc <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
    6b26:	4601      	mov	r1, r0
    6b28:	6873      	ldr	r3, [r6, #4]
    6b2a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
      : profiler_(profiler) {
    6b2c:	2300      	movs	r3, #0
    6b2e:	9300      	str	r3, [sp, #0]
    if (profiler_ != nullptr) {
    6b30:	b124      	cbz	r4, 6b3c <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x98>
      event_handle_ = profiler_->BeginEvent(tag);
    6b32:	6823      	ldr	r3, [r4, #0]
    6b34:	689b      	ldr	r3, [r3, #8]
    6b36:	4620      	mov	r0, r4
    6b38:	4798      	blx	r3
    6b3a:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK(registration->invoke);
    6b3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6b40:	2b00      	cmp	r3, #0
    6b42:	d0cf      	beq.n	6ae4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x40>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
    6b44:	4629      	mov	r1, r5
    6b46:	6870      	ldr	r0, [r6, #4]
    6b48:	4798      	blx	r3
    6b4a:	4605      	mov	r5, r0
    allocator_->ResetTempAllocations();
    6b4c:	68f0      	ldr	r0, [r6, #12]
    6b4e:	6803      	ldr	r3, [r0, #0]
    6b50:	689b      	ldr	r3, [r3, #8]
    6b52:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
    6b54:	2d01      	cmp	r5, #1
    6b56:	d0c7      	beq.n	6ae8 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x44>
    } else if (invoke_status != kTfLiteOk) {
    6b58:	2d00      	cmp	r5, #0
    6b5a:	d1ce      	bne.n	6afa <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x56>
    if (profiler_ != nullptr) {
    6b5c:	2c00      	cmp	r4, #0
    6b5e:	d0d4      	beq.n	6b0a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
      profiler_->EndEvent(event_handle_);
    6b60:	6823      	ldr	r3, [r4, #0]
    6b62:	68db      	ldr	r3, [r3, #12]
    6b64:	9900      	ldr	r1, [sp, #0]
    6b66:	4620      	mov	r0, r4
    6b68:	4798      	blx	r3
    6b6a:	e7ce      	b.n	6b0a <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x66>
  current_subgraph_index_ = previous_subgraph_idx;
    6b6c:	f8c6 b014 	str.w	fp, [r6, #20]
  return kTfLiteOk;
    6b70:	2500      	movs	r5, #0
    6b72:	e7b3      	b.n	6adc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x38>
    6b74:	000694cc 	.word	0x000694cc
    6b78:	00069500 	.word	0x00069500

00006b7c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
    6b7c:	b570      	push	{r4, r5, r6, lr}
    6b7e:	4604      	mov	r4, r0
    6b80:	4615      	mov	r5, r2
      current_subgraph_index_(0) {
    6b82:	4a11      	ldr	r2, [pc, #68]	; (6bc8 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x4c>)
    6b84:	6002      	str	r2, [r0, #0]
    6b86:	6041      	str	r1, [r0, #4]
    6b88:	6085      	str	r5, [r0, #8]
    6b8a:	60c3      	str	r3, [r0, #12]
    6b8c:	2300      	movs	r3, #0
    6b8e:	6103      	str	r3, [r0, #16]
    6b90:	6143      	str	r3, [r0, #20]
  if (model != nullptr) {
    6b92:	b19d      	cbz	r5, 6bbc <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    6b94:	4628      	mov	r0, r5
    6b96:	f00c fba3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6b9a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6b9c:	4630      	mov	r0, r6
    6b9e:	f00c fba5 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ba2:	2808      	cmp	r0, #8
    6ba4:	d90c      	bls.n	6bc0 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x44>
    6ba6:	f106 0008 	add.w	r0, r6, #8
    6baa:	f00c fb9f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bae:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bb0:	b140      	cbz	r0, 6bc4 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x48>
    6bb2:	4628      	mov	r0, r5
    6bb4:	f00c fb8e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bb8:	4405      	add	r5, r0
    subgraphs_ = model->subgraphs();
    6bba:	61a5      	str	r5, [r4, #24]
}
    6bbc:	4620      	mov	r0, r4
    6bbe:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6bc0:	2000      	movs	r0, #0
    6bc2:	e7f4      	b.n	6bae <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x32>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bc4:	2500      	movs	r5, #0
    6bc6:	e7f8      	b.n	6bba <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3e>
    6bc8:	00069ffc 	.word	0x00069ffc

00006bcc <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}

size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
    6bcc:	b570      	push	{r4, r5, r6, lr}
    6bce:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
    6bd0:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6bd2:	4620      	mov	r0, r4
    6bd4:	f00c fb84 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6bd8:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6bda:	4630      	mov	r0, r6
    6bdc:	f00c fb86 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6be0:	2808      	cmp	r0, #8
    6be2:	d92c      	bls.n	6c3e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x72>
    6be4:	f106 0008 	add.w	r0, r6, #8
    6be8:	f00c fb80 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6bec:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6bee:	b340      	cbz	r0, 6c42 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x76>
    6bf0:	4620      	mov	r0, r4
    6bf2:	f00c fb6f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6bf6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6bf8:	6820      	ldr	r0, [r4, #0]
    6bfa:	f00b f94c 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6bfe:	4285      	cmp	r5, r0
    6c00:	d221      	bcs.n	6c46 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x7a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c02:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6c04:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6c08:	4620      	mov	r0, r4
    6c0a:	f00c fb63 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c0e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6c10:	4620      	mov	r0, r4
    6c12:	f00c fb65 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c16:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c18:	4628      	mov	r0, r5
    6c1a:	f00c fb67 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c1e:	2808      	cmp	r0, #8
    6c20:	d918      	bls.n	6c54 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x88>
    6c22:	f105 0008 	add.w	r0, r5, #8
    6c26:	f00c fb61 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c2a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c2c:	b1a0      	cbz	r0, 6c58 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x8c>
    6c2e:	4620      	mov	r0, r4
    6c30:	f00c fb50 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c34:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c36:	6820      	ldr	r0, [r4, #0]
    6c38:	f00b f92d 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6c3c:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c3e:	2000      	movs	r0, #0
    6c40:	e7d4      	b.n	6bec <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c42:	2400      	movs	r4, #0
    6c44:	e7d8      	b.n	6bf8 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6c46:	4b05      	ldr	r3, [pc, #20]	; (6c5c <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x90>)
    6c48:	4a05      	ldr	r2, [pc, #20]	; (6c60 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x94>)
    6c4a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6c4e:	4805      	ldr	r0, [pc, #20]	; (6c64 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x98>)
    6c50:	f009 feb6 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c54:	2000      	movs	r0, #0
    6c56:	e7e8      	b.n	6c2a <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c58:	2400      	movs	r4, #0
    6c5a:	e7ec      	b.n	6c36 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi+0x6a>
    6c5c:	0006924c 	.word	0x0006924c
    6c60:	0006939c 	.word	0x0006939c
    6c64:	00069318 	.word	0x00069318

00006c68 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
    6c68:	b570      	push	{r4, r5, r6, lr}
    6c6a:	460d      	mov	r5, r1
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
    6c6c:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6c6e:	4620      	mov	r0, r4
    6c70:	f00c fb36 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6c74:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6c76:	4630      	mov	r0, r6
    6c78:	f00c fb38 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6c7c:	2808      	cmp	r0, #8
    6c7e:	d92b      	bls.n	6cd8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x70>
    6c80:	f106 0008 	add.w	r0, r6, #8
    6c84:	f00c fb32 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6c88:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6c8a:	b338      	cbz	r0, 6cdc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x74>
    6c8c:	4620      	mov	r0, r4
    6c8e:	f00c fb21 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6c92:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6c94:	6820      	ldr	r0, [r4, #0]
    6c96:	f00b f8fe 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6c9a:	4285      	cmp	r5, r0
    6c9c:	d220      	bcs.n	6ce0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x78>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6c9e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6ca0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6ca4:	4620      	mov	r0, r4
    6ca6:	f00c fb15 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6caa:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6cac:	4620      	mov	r0, r4
    6cae:	f00c fb17 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6cb2:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6cb4:	4628      	mov	r0, r5
    6cb6:	f00c fb19 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cba:	2806      	cmp	r0, #6
    6cbc:	d917      	bls.n	6cee <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x86>
    6cbe:	1da8      	adds	r0, r5, #6
    6cc0:	f00c fb14 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6cc4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cc6:	b1a0      	cbz	r0, 6cf2 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x8a>
    6cc8:	4620      	mov	r0, r4
    6cca:	f00c fb03 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6cce:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6cd0:	6820      	ldr	r0, [r4, #0]
    6cd2:	f00b f8e0 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
    6cd6:	bd70      	pop	{r4, r5, r6, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cd8:	2000      	movs	r0, #0
    6cda:	e7d5      	b.n	6c88 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x20>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cdc:	2400      	movs	r4, #0
    6cde:	e7d9      	b.n	6c94 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x2c>
    FLATBUFFERS_ASSERT(i < size());
    6ce0:	4b05      	ldr	r3, [pc, #20]	; (6cf8 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x90>)
    6ce2:	4a06      	ldr	r2, [pc, #24]	; (6cfc <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x94>)
    6ce4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ce8:	4805      	ldr	r0, [pc, #20]	; (6d00 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x98>)
    6cea:	f009 fe69 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6cee:	2000      	movs	r0, #0
    6cf0:	e7e8      	b.n	6cc4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6cf2:	2400      	movs	r4, #0
    6cf4:	e7ec      	b.n	6cd0 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi+0x68>
    6cf6:	bf00      	nop
    6cf8:	0006924c 	.word	0x0006924c
    6cfc:	0006939c 	.word	0x0006939c
    6d00:	00069318 	.word	0x00069318

00006d04 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
    6d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d08:	4606      	mov	r6, r0
    6d0a:	460d      	mov	r5, r1
    6d0c:	4617      	mov	r7, r2
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
    6d0e:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6d10:	4620      	mov	r0, r4
    6d12:	f00c fae5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d16:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d1a:	4640      	mov	r0, r8
    6d1c:	f00c fae6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d20:	2808      	cmp	r0, #8
    6d22:	d93d      	bls.n	6da0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x9c>
    6d24:	f108 0008 	add.w	r0, r8, #8
    6d28:	f00c fae0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d2c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d2e:	b3c8      	cbz	r0, 6da4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa0>
    6d30:	4620      	mov	r0, r4
    6d32:	f00c facf 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d36:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d38:	6820      	ldr	r0, [r4, #0]
    6d3a:	f00b f8ac 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d3e:	4285      	cmp	r5, r0
    6d40:	d232      	bcs.n	6da8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d42:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6d44:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6d48:	4620      	mov	r0, r4
    6d4a:	f00c fac3 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d4e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6d50:	4620      	mov	r0, r4
    6d52:	f00c fac5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6d56:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6d5a:	4640      	mov	r0, r8
    6d5c:	f00c fac6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6d60:	2808      	cmp	r0, #8
    6d62:	d928      	bls.n	6db6 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb2>
    6d64:	f108 0008 	add.w	r0, r8, #8
    6d68:	f00c fac0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6d6c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6d6e:	b320      	cbz	r0, 6dba <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xb6>
    6d70:	4620      	mov	r0, r4
    6d72:	f00c faaf 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6d76:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6d78:	6820      	ldr	r0, [r4, #0]
    6d7a:	f00b f88c 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6d7e:	4287      	cmp	r7, r0
    6d80:	d21d      	bcs.n	6dbe <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6d82:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6d84:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6d88:	f00c faa9 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6d8c:	6931      	ldr	r1, [r6, #16]
    6d8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6d92:	686b      	ldr	r3, [r5, #4]
    6d94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6da0:	2000      	movs	r0, #0
    6da2:	e7c3      	b.n	6d2c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6da4:	2400      	movs	r4, #0
    6da6:	e7c7      	b.n	6d38 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6da8:	4b08      	ldr	r3, [pc, #32]	; (6dcc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6daa:	4a09      	ldr	r2, [pc, #36]	; (6dd0 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xcc>)
    6dac:	f44f 7183 	mov.w	r1, #262	; 0x106
    6db0:	4808      	ldr	r0, [pc, #32]	; (6dd4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6db2:	f009 fe05 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6db6:	2000      	movs	r0, #0
    6db8:	e7d8      	b.n	6d6c <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6dba:	2400      	movs	r4, #0
    6dbc:	e7dc      	b.n	6d78 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6dbe:	4b03      	ldr	r3, [pc, #12]	; (6dcc <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xc8>)
    6dc0:	4a05      	ldr	r2, [pc, #20]	; (6dd8 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd4>)
    6dc2:	f44f 7183 	mov.w	r1, #262	; 0x106
    6dc6:	4803      	ldr	r0, [pc, #12]	; (6dd4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii+0xd0>)
    6dc8:	f009 fdfa 	bl	109c0 <__assert_func>
    6dcc:	0006924c 	.word	0x0006924c
    6dd0:	0006939c 	.word	0x0006939c
    6dd4:	00069318 	.word	0x00069318
    6dd8:	00069258 	.word	0x00069258

00006ddc <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
                                               int input_idx) {
    6ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6de0:	4606      	mov	r6, r0
    6de2:	460d      	mov	r5, r1
    6de4:	4617      	mov	r7, r2
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
    6de6:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    6de8:	4620      	mov	r0, r4
    6dea:	f00c fa79 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6dee:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6df2:	4640      	mov	r0, r8
    6df4:	f00c fa7a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6df8:	2808      	cmp	r0, #8
    6dfa:	d93d      	bls.n	6e78 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x9c>
    6dfc:	f108 0008 	add.w	r0, r8, #8
    6e00:	f00c fa74 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e04:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e06:	b3c8      	cbz	r0, 6e7c <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa0>
    6e08:	4620      	mov	r0, r4
    6e0a:	f00c fa63 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e0e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e10:	6820      	ldr	r0, [r4, #0]
    6e12:	f00b f840 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e16:	4285      	cmp	r5, r0
    6e18:	d232      	bcs.n	6e80 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xa4>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e1a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6e1c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6e20:	4620      	mov	r0, r4
    6e22:	f00c fa57 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e26:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6e28:	4620      	mov	r0, r4
    6e2a:	f00c fa59 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6e2e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6e32:	4640      	mov	r0, r8
    6e34:	f00c fa5a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e38:	2806      	cmp	r0, #6
    6e3a:	d928      	bls.n	6e8e <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb2>
    6e3c:	f108 0006 	add.w	r0, r8, #6
    6e40:	f00c fa54 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6e44:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e46:	b320      	cbz	r0, 6e92 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xb6>
    6e48:	4620      	mov	r0, r4
    6e4a:	f00c fa43 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6e4e:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6e50:	6820      	ldr	r0, [r4, #0]
    6e52:	f00b f820 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6e56:	4287      	cmp	r7, r0
    6e58:	d21d      	bcs.n	6e96 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6e5a:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    6e5c:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    6e60:	f00c fa3d 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
    6e64:	6931      	ldr	r1, [r6, #16]
    6e66:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    6e6a:	686b      	ldr	r3, [r5, #4]
    6e6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    6e70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e78:	2000      	movs	r0, #0
    6e7a:	e7c3      	b.n	6e04 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x28>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e7c:	2400      	movs	r4, #0
    6e7e:	e7c7      	b.n	6e10 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x34>
    FLATBUFFERS_ASSERT(i < size());
    6e80:	4b08      	ldr	r3, [pc, #32]	; (6ea4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6e82:	4a09      	ldr	r2, [pc, #36]	; (6ea8 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xcc>)
    6e84:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e88:	4808      	ldr	r0, [pc, #32]	; (6eac <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6e8a:	f009 fd99 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6e8e:	2000      	movs	r0, #0
    6e90:	e7d8      	b.n	6e44 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x68>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6e92:	2400      	movs	r4, #0
    6e94:	e7dc      	b.n	6e50 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0x74>
    FLATBUFFERS_ASSERT(i < size());
    6e96:	4b03      	ldr	r3, [pc, #12]	; (6ea4 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xc8>)
    6e98:	4a05      	ldr	r2, [pc, #20]	; (6eb0 <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd4>)
    6e9a:	f44f 7183 	mov.w	r1, #262	; 0x106
    6e9e:	4803      	ldr	r0, [pc, #12]	; (6eac <_ZN6tflite10MicroGraph16GetSubgraphInputEii+0xd0>)
    6ea0:	f009 fd8e 	bl	109c0 <__assert_func>
    6ea4:	0006924c 	.word	0x0006924c
    6ea8:	0006939c 	.word	0x0006939c
    6eac:	00069318 	.word	0x00069318
    6eb0:	00069258 	.word	0x00069258

00006eb4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
    6eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eb8:	b083      	sub	sp, #12
    6eba:	4680      	mov	r8, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    6ebc:	2700      	movs	r7, #0
    6ebe:	e0c8      	b.n	7052 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19e>
    6ec0:	4b71      	ldr	r3, [pc, #452]	; (7088 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6ec2:	4a72      	ldr	r2, [pc, #456]	; (708c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d8>)
    6ec4:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ec8:	4871      	ldr	r0, [pc, #452]	; (7090 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6eca:	f009 fd79 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ece:	2000      	movs	r0, #0
    6ed0:	e01d      	b.n	6f0e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6ed2:	2400      	movs	r4, #0
    6ed4:	e022      	b.n	6f1c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x68>
    FLATBUFFERS_ASSERT(i < size());
    6ed6:	4b6c      	ldr	r3, [pc, #432]	; (7088 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    6ed8:	4a6e      	ldr	r2, [pc, #440]	; (7094 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e0>)
    6eda:	f44f 7183 	mov.w	r1, #262	; 0x106
    6ede:	486c      	ldr	r0, [pc, #432]	; (7090 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    6ee0:	f009 fd6e 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6ee4:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6ee6:	b118      	cbz	r0, 6ef0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3c>
    6ee8:	4420      	add	r0, r4
    6eea:	f00c fac8 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    6eee:	e000      	b.n	6ef2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x3e>
    6ef0:	2000      	movs	r0, #0
      if (tensor->is_variable()) {
    6ef2:	bba0      	cbnz	r0, 6f5e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xaa>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    6ef4:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    6ef6:	4630      	mov	r0, r6
    6ef8:	f00c f9f2 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6efc:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6efe:	4620      	mov	r0, r4
    6f00:	f00c f9f4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f04:	2804      	cmp	r0, #4
    6f06:	d9e2      	bls.n	6ece <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1a>
    6f08:	1d20      	adds	r0, r4, #4
    6f0a:	f00c f9ef 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6f0e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6f10:	2800      	cmp	r0, #0
    6f12:	d0de      	beq.n	6ed2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
    6f14:	4620      	mov	r0, r4
    6f16:	f00c f9dd 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f1a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    6f1c:	6820      	ldr	r0, [r4, #0]
    6f1e:	f00a ffba 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    6f22:	4285      	cmp	r5, r0
    6f24:	f080 8094 	bcs.w	7050 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x19c>
    6f28:	6820      	ldr	r0, [r4, #0]
    6f2a:	f00a ffb4 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    6f2e:	4285      	cmp	r5, r0
    6f30:	d2d1      	bcs.n	6ed6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x22>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    6f32:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    6f34:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    6f38:	4620      	mov	r0, r4
    6f3a:	f00c f9cb 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6f3e:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    6f40:	4620      	mov	r0, r4
    6f42:	f00c f9cd 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f46:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f4a:	4648      	mov	r0, r9
    6f4c:	f00c f9ce 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f50:	280e      	cmp	r0, #14
    6f52:	d9c7      	bls.n	6ee4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x30>
    6f54:	f109 000e 	add.w	r0, r9, #14
    6f58:	f00c f9c8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    6f5c:	e7c3      	b.n	6ee6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x32>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
    6f5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6f62:	ea4f 0ac7 	mov.w	sl, r7, lsl #3
    6f66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    6f6a:	6858      	ldr	r0, [r3, #4]
    6f6c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6f70:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    6f74:	a901      	add	r1, sp, #4
    6f76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6f7a:	f00c f98a 	bl	13292 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    6f7e:	4603      	mov	r3, r0
    6f80:	2800      	cmp	r0, #0
    6f82:	d17d      	bne.n	7080 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1cc>
    return data_ - ReadScalar<soffset_t>(data_);
    6f84:	4620      	mov	r0, r4
    6f86:	f00c f9ab 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6f8a:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6f8e:	4648      	mov	r0, r9
    6f90:	f00c f9ac 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6f94:	2806      	cmp	r0, #6
    6f96:	d914      	bls.n	6fc2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x10e>
    6f98:	f109 0006 	add.w	r0, r9, #6
    6f9c:	f00c f9a6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6fa0:	b188      	cbz	r0, 6fc6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x112>
    6fa2:	4420      	add	r0, r4
    6fa4:	f00c f9a8 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        if (tensor->type() == tflite::TensorType_INT8) {
    6fa8:	2809      	cmp	r0, #9
    6faa:	d00e      	beq.n	6fca <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x116>
        int value = 0;
    6fac:	2100      	movs	r1, #0
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
    6fae:	f8d8 3010 	ldr.w	r3, [r8, #16]
    6fb2:	4453      	add	r3, sl
    6fb4:	685b      	ldr	r3, [r3, #4]
    6fb6:	9a01      	ldr	r2, [sp, #4]
    6fb8:	f853 000b 	ldr.w	r0, [r3, fp]
    6fbc:	f00f f913 	bl	161e6 <memset>
    6fc0:	e798      	b.n	6ef4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fc2:	2000      	movs	r0, #0
    6fc4:	e7ec      	b.n	6fa0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    6fc6:	2000      	movs	r0, #0
    6fc8:	e7ee      	b.n	6fa8 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
    return data_ - ReadScalar<soffset_t>(data_);
    6fca:	4620      	mov	r0, r4
    6fcc:	f00c f988 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6fd0:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6fd4:	4648      	mov	r0, r9
    6fd6:	f00c f989 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    6fda:	280c      	cmp	r0, #12
    6fdc:	d928      	bls.n	7030 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17c>
    6fde:	f109 000c 	add.w	r0, r9, #12
    6fe2:	f00c f983 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    6fe6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    6fe8:	b320      	cbz	r0, 7034 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x180>
    6fea:	4620      	mov	r0, r4
    6fec:	f00c f972 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    6ff0:	4404      	add	r4, r0
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
    6ff2:	46a1      	mov	r9, r4
    return data_ - ReadScalar<soffset_t>(data_);
    6ff4:	4620      	mov	r0, r4
    6ff6:	f00c f973 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    6ffa:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    6ffc:	4620      	mov	r0, r4
    6ffe:	f00c f975 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7002:	280a      	cmp	r0, #10
    7004:	d918      	bls.n	7038 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x184>
    7006:	f104 000a 	add.w	r0, r4, #10
    700a:	f00c f96f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    700e:	4481      	add	r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7010:	b1a0      	cbz	r0, 703c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x188>
    7012:	4648      	mov	r0, r9
    7014:	f00c f95e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7018:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    701a:	f8d9 0000 	ldr.w	r0, [r9]
    701e:	f00a ff3a 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7022:	b170      	cbz	r0, 7042 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18e>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7024:	e9d9 0101 	ldrd	r0, r1, [r9, #4]
    7028:	f00c fa2e 	bl	13488 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    702c:	4601      	mov	r1, r0
    702e:	e7be      	b.n	6fae <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7030:	2000      	movs	r0, #0
    7032:	e7d8      	b.n	6fe6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x132>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7034:	2400      	movs	r4, #0
    7036:	e7dc      	b.n	6ff2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x13e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7038:	2000      	movs	r0, #0
    703a:	e7e8      	b.n	700e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    703c:	f04f 0900 	mov.w	r9, #0
    7040:	e7eb      	b.n	701a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x166>
    FLATBUFFERS_ASSERT(i < size());
    7042:	4b11      	ldr	r3, [pc, #68]	; (7088 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1d4>)
    7044:	4a14      	ldr	r2, [pc, #80]	; (7098 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e4>)
    7046:	f44f 7183 	mov.w	r1, #262	; 0x106
    704a:	4811      	ldr	r0, [pc, #68]	; (7090 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1dc>)
    704c:	f009 fcb8 	bl	109c0 <__assert_func>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
    7050:	3701      	adds	r7, #1
    7052:	f8d8 6018 	ldr.w	r6, [r8, #24]
  uoffset_t size() const { return EndianScalar(length_); }
    7056:	6830      	ldr	r0, [r6, #0]
    7058:	f00a ff1d 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    705c:	4287      	cmp	r7, r0
    705e:	d20e      	bcs.n	707e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1ca>
    7060:	6830      	ldr	r0, [r6, #0]
    7062:	f00a ff18 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7066:	4287      	cmp	r7, r0
    7068:	f4bf af2a 	bcs.w	6ec0 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    706c:	3604      	adds	r6, #4
    p += i * sizeof(uoffset_t);
    706e:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7072:	4630      	mov	r0, r6
    7074:	f00c f92e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7078:	4406      	add	r6, r0
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    707a:	2500      	movs	r5, #0
    707c:	e73b      	b.n	6ef6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x42>
  return kTfLiteOk;
    707e:	2300      	movs	r3, #0
}
    7080:	4618      	mov	r0, r3
    7082:	b003      	add	sp, #12
    7084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7088:	0006924c 	.word	0x0006924c
    708c:	0006939c 	.word	0x0006939c
    7090:	00069318 	.word	0x00069318
    7094:	00069534 	.word	0x00069534
    7098:	00069628 	.word	0x00069628

0000709c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:
    graph_.FreeSubgraphs();
  }
}

void MicroInterpreter::Init(MicroProfiler* profiler) {
  context_.impl_ = static_cast<void*>(this);
    709c:	6180      	str	r0, [r0, #24]
  context_.ReportError = ReportOpError;
    709e:	4b05      	ldr	r3, [pc, #20]	; (70b4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x18>)
    70a0:	6203      	str	r3, [r0, #32]
  context_.GetTensor = GetTensor;
    70a2:	4b05      	ldr	r3, [pc, #20]	; (70b8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x1c>)
    70a4:	65c3      	str	r3, [r0, #92]	; 0x5c
  context_.ReportError = ReportOpError;
  context_.GetTensor = GetTensor;
  context_.GetEvalTensor = GetEvalTensor;
    70a6:	4b05      	ldr	r3, [pc, #20]	; (70bc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x20>)
    70a8:	6603      	str	r3, [r0, #96]	; 0x60
  context_.profiler = profiler;
    70aa:	6401      	str	r1, [r0, #64]	; 0x40

  initialization_status_ = kTfLiteOk;
    70ac:	2300      	movs	r3, #0
    70ae:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
}
    70b2:	4770      	bx	lr
    70b4:	0001360f 	.word	0x0001360f
    70b8:	000135bd 	.word	0x000135bd
    70bc:	000135db 	.word	0x000135db

000070c0 <_ZN6tflite16MicroInterpreter6outputEj>:
    return nullptr;
  }
  return input_tensors_[index];
}

TfLiteTensor* MicroInterpreter::output(size_t index) {
    70c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70c2:	4605      	mov	r5, r0
    70c4:	460e      	mov	r6, r1
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
    return model_->subgraphs()->Get(0)->outputs()->size();
    70c6:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    70c8:	4620      	mov	r0, r4
    70ca:	f00c f909 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    70ce:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    70d0:	4638      	mov	r0, r7
    70d2:	f00c f90b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    70d6:	2808      	cmp	r0, #8
    70d8:	d92f      	bls.n	713a <_ZN6tflite16MicroInterpreter6outputEj+0x7a>
    70da:	f107 0008 	add.w	r0, r7, #8
    70de:	f00c f905 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    70e2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    70e4:	b358      	cbz	r0, 713e <_ZN6tflite16MicroInterpreter6outputEj+0x7e>
    70e6:	4620      	mov	r0, r4
    70e8:	f00c f8f4 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70ec:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    70ee:	6820      	ldr	r0, [r4, #0]
    70f0:	f00a fed1 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    70f4:	b328      	cbz	r0, 7142 <_ZN6tflite16MicroInterpreter6outputEj+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    70f6:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    70f8:	4620      	mov	r0, r4
    70fa:	f00c f8eb 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    70fe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7100:	4620      	mov	r0, r4
    7102:	f00c f8ed 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7106:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7108:	4638      	mov	r0, r7
    710a:	f00c f8ef 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    710e:	2808      	cmp	r0, #8
    7110:	d91e      	bls.n	7150 <_ZN6tflite16MicroInterpreter6outputEj+0x90>
    7112:	f107 0008 	add.w	r0, r7, #8
    7116:	f00c f8e9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    711a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    711c:	b1d0      	cbz	r0, 7154 <_ZN6tflite16MicroInterpreter6outputEj+0x94>
    711e:	4620      	mov	r0, r4
    7120:	f00c f8d8 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7124:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7126:	6820      	ldr	r0, [r4, #0]
    7128:	f00a feb5 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  const size_t length = outputs_size();
  if (index >= length) {
    712c:	4286      	cmp	r6, r0
    712e:	d213      	bcs.n	7158 <_ZN6tflite16MicroInterpreter6outputEj+0x98>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  return output_tensors_[index];
    7130:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7134:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    7138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    713a:	2000      	movs	r0, #0
    713c:	e7d1      	b.n	70e2 <_ZN6tflite16MicroInterpreter6outputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    713e:	2400      	movs	r4, #0
    7140:	e7d5      	b.n	70ee <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    7142:	4b09      	ldr	r3, [pc, #36]	; (7168 <_ZN6tflite16MicroInterpreter6outputEj+0xa8>)
    7144:	4a09      	ldr	r2, [pc, #36]	; (716c <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
    7146:	f44f 7183 	mov.w	r1, #262	; 0x106
    714a:	4809      	ldr	r0, [pc, #36]	; (7170 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
    714c:	f009 fc38 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7150:	2000      	movs	r0, #0
    7152:	e7e2      	b.n	711a <_ZN6tflite16MicroInterpreter6outputEj+0x5a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7154:	2400      	movs	r4, #0
    7156:	e7e6      	b.n	7126 <_ZN6tflite16MicroInterpreter6outputEj+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7158:	4603      	mov	r3, r0
    715a:	4632      	mov	r2, r6
    715c:	4905      	ldr	r1, [pc, #20]	; (7174 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
    715e:	68a8      	ldr	r0, [r5, #8]
    7160:	f00c fe01 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    7164:	2000      	movs	r0, #0
    7166:	e7e7      	b.n	7138 <_ZN6tflite16MicroInterpreter6outputEj+0x78>
    7168:	0006924c 	.word	0x0006924c
    716c:	0006939c 	.word	0x0006939c
    7170:	00069318 	.word	0x00069318
    7174:	0006a02c 	.word	0x0006a02c

00007178 <_ZN6tflite16MicroInterpreter5inputEj>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
    7178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    717a:	4605      	mov	r5, r0
    717c:	460e      	mov	r6, r1
    return model_->subgraphs()->Get(0)->inputs()->size();
    717e:	6804      	ldr	r4, [r0, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7180:	4620      	mov	r0, r4
    7182:	f00c f8ad 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7186:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7188:	4638      	mov	r0, r7
    718a:	f00c f8af 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    718e:	2808      	cmp	r0, #8
    7190:	d92e      	bls.n	71f0 <_ZN6tflite16MicroInterpreter5inputEj+0x78>
    7192:	f107 0008 	add.w	r0, r7, #8
    7196:	f00c f8a9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    719a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    719c:	b350      	cbz	r0, 71f4 <_ZN6tflite16MicroInterpreter5inputEj+0x7c>
    719e:	4620      	mov	r0, r4
    71a0:	f00c f898 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71a4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71a6:	6820      	ldr	r0, [r4, #0]
    71a8:	f00a fe75 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    71ac:	b320      	cbz	r0, 71f8 <_ZN6tflite16MicroInterpreter5inputEj+0x80>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    71ae:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    71b0:	4620      	mov	r0, r4
    71b2:	f00c f88f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71b6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    71b8:	4620      	mov	r0, r4
    71ba:	f00c f891 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    71be:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    71c0:	4638      	mov	r0, r7
    71c2:	f00c f893 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71c6:	2806      	cmp	r0, #6
    71c8:	d91d      	bls.n	7206 <_ZN6tflite16MicroInterpreter5inputEj+0x8e>
    71ca:	1db8      	adds	r0, r7, #6
    71cc:	f00c f88e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    71d0:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71d2:	b1d0      	cbz	r0, 720a <_ZN6tflite16MicroInterpreter5inputEj+0x92>
    71d4:	4620      	mov	r0, r4
    71d6:	f00c f87d 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    71da:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    71dc:	6820      	ldr	r0, [r4, #0]
    71de:	f00a fe5a 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  if (index >= length) {
    71e2:	4286      	cmp	r6, r0
    71e4:	d213      	bcs.n	720e <_ZN6tflite16MicroInterpreter5inputEj+0x96>
  return input_tensors_[index];
    71e6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    71ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
    71ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    71f0:	2000      	movs	r0, #0
    71f2:	e7d2      	b.n	719a <_ZN6tflite16MicroInterpreter5inputEj+0x22>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    71f4:	2400      	movs	r4, #0
    71f6:	e7d6      	b.n	71a6 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
    71f8:	4b09      	ldr	r3, [pc, #36]	; (7220 <_ZN6tflite16MicroInterpreter5inputEj+0xa8>)
    71fa:	4a0a      	ldr	r2, [pc, #40]	; (7224 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
    71fc:	f44f 7183 	mov.w	r1, #262	; 0x106
    7200:	4809      	ldr	r0, [pc, #36]	; (7228 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
    7202:	f009 fbdd 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7206:	2000      	movs	r0, #0
    7208:	e7e2      	b.n	71d0 <_ZN6tflite16MicroInterpreter5inputEj+0x58>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    720a:	2400      	movs	r4, #0
    720c:	e7e6      	b.n	71dc <_ZN6tflite16MicroInterpreter5inputEj+0x64>
    TF_LITE_REPORT_ERROR(error_reporter_,
    720e:	4603      	mov	r3, r0
    7210:	4632      	mov	r2, r6
    7212:	4906      	ldr	r1, [pc, #24]	; (722c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
    7214:	68a8      	ldr	r0, [r5, #8]
    7216:	f00c fda6 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    721a:	2000      	movs	r0, #0
    721c:	e7e7      	b.n	71ee <_ZN6tflite16MicroInterpreter5inputEj+0x76>
    721e:	bf00      	nop
    7220:	0006924c 	.word	0x0006924c
    7224:	0006939c 	.word	0x0006939c
    7228:	00069318 	.word	0x00069318
    722c:	0006a058 	.word	0x0006a058

00007230 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
    7230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7234:	b08b      	sub	sp, #44	; 0x2c
    7236:	4683      	mov	fp, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7238:	2300      	movs	r3, #0
    723a:	9305      	str	r3, [sp, #20]
    723c:	f10b 006c 	add.w	r0, fp, #108	; 0x6c
    7240:	f00c f992 	bl	13568 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
    7244:	9b05      	ldr	r3, [sp, #20]
    7246:	4298      	cmp	r0, r3
    7248:	f340 81f6 	ble.w	7638 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x408>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
    724c:	f8db 5000 	ldr.w	r5, [fp]
    return data_ - ReadScalar<soffset_t>(data_);
    7250:	4628      	mov	r0, r5
    7252:	f00c f845 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7256:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7258:	4620      	mov	r0, r4
    725a:	f00c f847 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    725e:	2808      	cmp	r0, #8
    7260:	d927      	bls.n	72b2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x82>
    7262:	f104 0008 	add.w	r0, r4, #8
    7266:	f00c f841 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    726a:	182c      	adds	r4, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    726c:	b318      	cbz	r0, 72b6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x86>
    726e:	4620      	mov	r0, r4
    7270:	f00c f830 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7274:	4404      	add	r4, r0
    7276:	9e05      	ldr	r6, [sp, #20]
    7278:	9600      	str	r6, [sp, #0]
  uoffset_t size() const { return EndianScalar(length_); }
    727a:	6820      	ldr	r0, [r4, #0]
    727c:	f00a fe0b 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7280:	4286      	cmp	r6, r0
    7282:	d21a      	bcs.n	72ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7284:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7286:	9b05      	ldr	r3, [sp, #20]
    7288:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    728c:	4620      	mov	r0, r4
    728e:	f00c f821 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7292:	1823      	adds	r3, r4, r0
    7294:	9302      	str	r3, [sp, #8]
    7296:	d017      	beq.n	72c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x98>
    return data_ - ReadScalar<soffset_t>(data_);
    7298:	4628      	mov	r0, r5
    729a:	f00c f821 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    729e:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    72a0:	4620      	mov	r0, r4
    72a2:	f00c f823 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72a6:	2806      	cmp	r0, #6
    72a8:	d910      	bls.n	72cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9c>
    72aa:	1da0      	adds	r0, r4, #6
    72ac:	f00c f81e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    72b0:	e00d      	b.n	72ce <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x9e>
    72b2:	2000      	movs	r0, #0
    72b4:	e7d9      	b.n	726a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72b6:	2400      	movs	r4, #0
    72b8:	e7dd      	b.n	7276 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x46>
    FLATBUFFERS_ASSERT(i < size());
    72ba:	4b4e      	ldr	r3, [pc, #312]	; (73f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    72bc:	4a4e      	ldr	r2, [pc, #312]	; (73f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c8>)
    72be:	f44f 7183 	mov.w	r1, #262	; 0x106
    72c2:	484e      	ldr	r0, [pc, #312]	; (73fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    72c4:	f009 fb7c 	bl	109c0 <__assert_func>
    72c8:	f00e ff67 	bl	1619a <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72cc:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    72ce:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72d0:	b178      	cbz	r0, 72f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc2>
    72d2:	4628      	mov	r0, r5
    72d4:	f00b fffe 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    72d8:	eb05 0900 	add.w	r9, r5, r0
        allocator_.GetBuiltinDataAllocator();
    72dc:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
    72e0:	f00c fb09 	bl	138f6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    72e4:	9004      	str	r0, [sp, #16]
    uint32_t operators_size = NumSubgraphOperators(subgraph);
    72e6:	9802      	ldr	r0, [sp, #8]
    72e8:	f00c f8aa 	bl	13440 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    72ec:	9003      	str	r0, [sp, #12]
    for (size_t i = 0; i < operators_size; ++i) {
    72ee:	2700      	movs	r7, #0
    72f0:	e0dd      	b.n	74ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27e>
    72f2:	f04f 0900 	mov.w	r9, #0
    72f6:	e7f1      	b.n	72dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    72f8:	2000      	movs	r0, #0
    72fa:	e0eb      	b.n	74d4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    72fc:	2400      	movs	r4, #0
    72fe:	e0f2      	b.n	74e6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2b6>
    FLATBUFFERS_ASSERT(i < size());
    7300:	4b3c      	ldr	r3, [pc, #240]	; (73f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    7302:	4a3f      	ldr	r2, [pc, #252]	; (7400 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>)
    7304:	f44f 7183 	mov.w	r1, #262	; 0x106
    7308:	483c      	ldr	r0, [pc, #240]	; (73fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    730a:	f009 fb59 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    730e:	2000      	movs	r0, #0
    7310:	e103      	b.n	751a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2ea>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7312:	2600      	movs	r6, #0
    7314:	e108      	b.n	7528 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2f8>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
    7316:	4631      	mov	r1, r6
    7318:	483a      	ldr	r0, [pc, #232]	; (7404 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
    731a:	f00b ff56 	bl	131ca <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    731e:	2301      	movs	r3, #1
    7320:	461c      	mov	r4, r3
}
    7322:	4620      	mov	r0, r4
    7324:	b00b      	add	sp, #44	; 0x2c
    7326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FLATBUFFERS_ASSERT(i < size());
    732a:	4b32      	ldr	r3, [pc, #200]	; (73f4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c4>)
    732c:	4a36      	ldr	r2, [pc, #216]	; (7408 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
    732e:	f44f 7183 	mov.w	r1, #262	; 0x106
    7332:	4832      	ldr	r0, [pc, #200]	; (73fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>)
    7334:	f009 fb44 	bl	109c0 <__assert_func>
    7338:	4604      	mov	r4, r0
        MicroPrintf("Failed to get registration from op code %s\n ",
    733a:	4650      	mov	r0, sl
    733c:	f00c fd31 	bl	13da2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  return (v < low) || (high < v);
    7340:	2891      	cmp	r0, #145	; 0x91
    7342:	d806      	bhi.n	7352 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x122>
  return EnumNamesBuiltinOperator()[index];
    7344:	4b31      	ldr	r3, [pc, #196]	; (740c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    7346:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    734a:	4831      	ldr	r0, [pc, #196]	; (7410 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e0>)
    734c:	f00b ff3d 	bl	131ca <_Z11MicroPrintfPKcz>
        return status;
    7350:	e7e7      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    7352:	4930      	ldr	r1, [pc, #192]	; (7414 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    7354:	e7f9      	b.n	734a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
    7356:	4631      	mov	r1, r6
    7358:	482f      	ldr	r0, [pc, #188]	; (7418 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>)
    735a:	f00b ff36 	bl	131ca <_Z11MicroPrintfPKcz>
        return kTfLiteError;
    735e:	2301      	movs	r3, #1
    7360:	461c      	mov	r4, r3
    7362:	e7de      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    return data_ - ReadScalar<soffset_t>(data_);
    7364:	4620      	mov	r0, r4
    7366:	f00b ffbb 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    736a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    736c:	4630      	mov	r0, r6
    736e:	f00b ffbd 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7372:	280e      	cmp	r0, #14
    7374:	d904      	bls.n	7380 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x150>
    7376:	f106 000e 	add.w	r0, r6, #14
    737a:	f00b ffb7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    737e:	e000      	b.n	7382 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x152>
    7380:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7382:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7384:	b160      	cbz	r0, 73a0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x170>
    7386:	4630      	mov	r0, r6
    7388:	f00b ffa4 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    738c:	4430      	add	r0, r6
        if (op->custom_options() != nullptr) {
    738e:	b360      	cbz	r0, 73ea <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ba>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7390:	4603      	mov	r3, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7392:	f853 0b04 	ldr.w	r0, [r3], #4
    7396:	9301      	str	r3, [sp, #4]
    7398:	f00a fd7d 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    739c:	4682      	mov	sl, r0
    739e:	e131      	b.n	7604 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73a0:	2000      	movs	r0, #0
    73a2:	e7f4      	b.n	738e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x15e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    73a4:	2000      	movs	r0, #0
    73a6:	e10b      	b.n	75c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x390>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    73a8:	2300      	movs	r3, #0
    73aa:	9301      	str	r3, [sp, #4]
    73ac:	e113      	b.n	75d6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3a6>
  return (v < low) || (high < v);
    73ae:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    73b2:	d809      	bhi.n	73c8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x198>
  const size_t index = static_cast<size_t>(e);
    73b4:	b2f2      	uxtb	r2, r6
  return EnumNamesBuiltinOperator()[index];
    73b6:	4b15      	ldr	r3, [pc, #84]	; (740c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    73b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
          MicroPrintf(
    73bc:	4817      	ldr	r0, [pc, #92]	; (741c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ec>)
    73be:	f00b ff04 	bl	131ca <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    73c2:	2301      	movs	r3, #1
    73c4:	461c      	mov	r4, r3
    73c6:	e7ac      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    73c8:	4912      	ldr	r1, [pc, #72]	; (7414 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
    73ca:	e7f7      	b.n	73bc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18c>
    73cc:	f1ba 0f91 	cmp.w	sl, #145	; 0x91
    73d0:	d804      	bhi.n	73dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ac>
  const size_t index = static_cast<size_t>(e);
    73d2:	b2f3      	uxtb	r3, r6
  return EnumNamesBuiltinOperator()[index];
    73d4:	4a0d      	ldr	r2, [pc, #52]	; (740c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
    73d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    73da:	e000      	b.n	73de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1ae>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
    73dc:	490d      	ldr	r1, [pc, #52]	; (7414 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e4>)
          MicroPrintf("Did not find a parser for %s",
    73de:	4810      	ldr	r0, [pc, #64]	; (7420 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f0>)
    73e0:	f00b fef3 	bl	131ca <_Z11MicroPrintfPKcz>
          return kTfLiteError;
    73e4:	2301      	movs	r3, #1
    73e6:	461c      	mov	r4, r3
    73e8:	e79b      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
      const char* custom_data = nullptr;
    73ea:	9001      	str	r0, [sp, #4]
      size_t custom_data_size = 0;
    73ec:	f04f 0a00 	mov.w	sl, #0
    73f0:	e108      	b.n	7604 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3d4>
    73f2:	bf00      	nop
    73f4:	0006924c 	.word	0x0006924c
    73f8:	0006939c 	.word	0x0006939c
    73fc:	00069318 	.word	0x00069318
    7400:	0006a084 	.word	0x0006a084
    7404:	0006a17c 	.word	0x0006a17c
    7408:	0006a1a8 	.word	0x0006a1a8
    740c:	00069da8 	.word	0x00069da8
    7410:	0006a2a8 	.word	0x0006a2a8
    7414:	00068a78 	.word	0x00068a78
    7418:	0006a2d8 	.word	0x0006a2d8
    741c:	0006a2fc 	.word	0x0006a2fc
    7420:	0006a344 	.word	0x0006a344
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7424:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7426:	1826      	adds	r6, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7428:	2800      	cmp	r0, #0
    742a:	f000 80fb 	beq.w	7624 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f4>
    742e:	4630      	mov	r0, r6
    7430:	f00b ff50 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7434:	1831      	adds	r1, r6, r0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7436:	aa08      	add	r2, sp, #32
    7438:	4640      	mov	r0, r8
    743a:	f00c fa68 	bl	1390e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    743e:	2800      	cmp	r0, #0
    7440:	f040 80ff 	bne.w	7642 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x412>
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7444:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7448:	4620      	mov	r0, r4
    744a:	f00b ff49 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    744e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7450:	4630      	mov	r0, r6
    7452:	f00b ff4b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7456:	2808      	cmp	r0, #8
    7458:	f240 80e6 	bls.w	7628 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3f8>
    745c:	f106 0008 	add.w	r0, r6, #8
    7460:	f00b ff44 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7464:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7466:	2800      	cmp	r0, #0
    7468:	f000 80e0 	beq.w	762c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x3fc>
    746c:	4620      	mov	r0, r4
    746e:	f00b ff31 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7472:	1821      	adds	r1, r4, r0
    7474:	aa09      	add	r2, sp, #36	; 0x24
    7476:	4640      	mov	r0, r8
    7478:	f00c fa49 	bl	1390e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
    747c:	2800      	cmp	r0, #0
    747e:	f040 80e2 	bne.w	7646 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x416>
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
    7482:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
    7486:	9a00      	ldr	r2, [sp, #0]
    7488:	f853 6032 	ldr.w	r6, [r3, r2, lsl #3]
    748c:	1974      	adds	r4, r6, r5
      *node = {};
    748e:	2228      	movs	r2, #40	; 0x28
    7490:	2100      	movs	r1, #0
    7492:	4620      	mov	r0, r4
    7494:	f00e fea7 	bl	161e6 <memset>
      node->inputs = inputs_array;
    7498:	9b08      	ldr	r3, [sp, #32]
    749a:	5173      	str	r3, [r6, r5]
      node->outputs = outputs_array;
    749c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    749e:	6063      	str	r3, [r4, #4]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
    74a0:	9b07      	ldr	r3, [sp, #28]
    74a2:	6163      	str	r3, [r4, #20]
      node->custom_initial_data = custom_data;
    74a4:	9b01      	ldr	r3, [sp, #4]
    74a6:	61a3      	str	r3, [r4, #24]
      node->custom_initial_data_size = custom_data_size;
    74a8:	f8c4 a01c 	str.w	sl, [r4, #28]
    for (size_t i = 0; i < operators_size; ++i) {
    74ac:	3701      	adds	r7, #1
    74ae:	9b03      	ldr	r3, [sp, #12]
    74b0:	429f      	cmp	r7, r3
    74b2:	f080 80bd 	bcs.w	7630 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x400>
    return data_ - ReadScalar<soffset_t>(data_);
    74b6:	9c02      	ldr	r4, [sp, #8]
    74b8:	4620      	mov	r0, r4
    74ba:	f00b ff11 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    74be:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    74c0:	4620      	mov	r0, r4
    74c2:	f00b ff13 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    74c6:	280a      	cmp	r0, #10
    74c8:	f67f af16 	bls.w	72f8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc8>
    74cc:	f104 000a 	add.w	r0, r4, #10
    74d0:	f00b ff0c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    74d4:	9b02      	ldr	r3, [sp, #8]
    74d6:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    74d8:	2800      	cmp	r0, #0
    74da:	f43f af0f 	beq.w	72fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xcc>
    74de:	4620      	mov	r0, r4
    74e0:	f00b fef8 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74e4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    74e6:	6820      	ldr	r0, [r4, #0]
    74e8:	f00a fcd5 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    74ec:	4287      	cmp	r7, r0
    74ee:	f4bf af07 	bcs.w	7300 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xd0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    74f2:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    74f4:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    74f8:	4620      	mov	r0, r4
    74fa:	f00b feeb 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    74fe:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7500:	4620      	mov	r0, r4
    7502:	f00b feed 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7506:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7508:	4628      	mov	r0, r5
    750a:	f00b feef 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    750e:	2804      	cmp	r0, #4
    7510:	f67f aefd 	bls.w	730e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xde>
    7514:	1d28      	adds	r0, r5, #4
    7516:	f00b fee9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    751a:	2800      	cmp	r0, #0
    751c:	f43f aef9 	beq.w	7312 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe2>
    7520:	4420      	add	r0, r4
    7522:	f00b fed7 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7526:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7528:	f8d9 0000 	ldr.w	r0, [r9]
    752c:	f00a fcb3 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (index >= opcodes->size()) {
    7530:	42b0      	cmp	r0, r6
    7532:	f67f aef0 	bls.w	7316 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
    7536:	f8d9 0000 	ldr.w	r0, [r9]
    753a:	f00a fcac 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    753e:	4286      	cmp	r6, r0
    7540:	f4bf aef3 	bcs.w	732a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xfa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7544:	f109 0a04 	add.w	sl, r9, #4
    p += i * sizeof(uoffset_t);
    7548:	eb0a 0a86 	add.w	sl, sl, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    754c:	4650      	mov	r0, sl
    754e:	f00b fec1 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7552:	4482      	add	sl, r0
    7554:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                          .node_and_registrations[i]
    7558:	9a00      	ldr	r2, [sp, #0]
    755a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    755e:	252c      	movs	r5, #44	; 0x2c
    7560:	fb05 f507 	mul.w	r5, r5, r7
    7564:	442b      	add	r3, r5
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
    7566:	3328      	adds	r3, #40	; 0x28
    7568:	f8db 2008 	ldr.w	r2, [fp, #8]
    756c:	f8db 1004 	ldr.w	r1, [fp, #4]
    7570:	4650      	mov	r0, sl
    7572:	f002 ffbd 	bl	a4f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
    7576:	2800      	cmp	r0, #0
    7578:	f47f aede 	bne.w	7338 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x108>
    757c:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
                                     .node_and_registrations[i]
    7580:	9a00      	ldr	r2, [sp, #0]
    7582:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    7586:	442b      	add	r3, r5
                                     .registration;
    7588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (registration == nullptr) {
    758a:	2b00      	cmp	r3, #0
    758c:	f43f aee3 	beq.w	7356 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x126>
          static_cast<BuiltinOperator>(registration->builtin_code);
    7590:	695e      	ldr	r6, [r3, #20]
      BuiltinOperator op_type =
    7592:	fa5f fa86 	uxtb.w	sl, r6
      unsigned char* builtin_data = nullptr;
    7596:	2300      	movs	r3, #0
    7598:	9307      	str	r3, [sp, #28]
      if (op_type == BuiltinOperator_CUSTOM) {
    759a:	f1ba 0f20 	cmp.w	sl, #32
    759e:	f43f aee1 	beq.w	7364 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x134>
    return data_ - ReadScalar<soffset_t>(data_);
    75a2:	4620      	mov	r0, r4
    75a4:	f00b fe9c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    75a8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    75ac:	4640      	mov	r0, r8
    75ae:	f00b fe9d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    75b2:	280e      	cmp	r0, #14
    75b4:	f67f aef6 	bls.w	73a4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x174>
    75b8:	f108 000e 	add.w	r0, r8, #14
    75bc:	f00b fe96 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    75c0:	eb04 0800 	add.w	r8, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    75c4:	2800      	cmp	r0, #0
    75c6:	f43f aeef 	beq.w	73a8 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x178>
    75ca:	4640      	mov	r0, r8
    75cc:	f00b fe82 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    75d0:	eb08 0300 	add.w	r3, r8, r0
    75d4:	9301      	str	r3, [sp, #4]
        if (op->custom_options() != nullptr) {
    75d6:	9b01      	ldr	r3, [sp, #4]
    75d8:	2b00      	cmp	r3, #0
    75da:	f47f aee8 	bne.w	73ae <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x17e>
            op_resolver_.GetOpDataParser(op_type);
    75de:	f8db 0004 	ldr.w	r0, [fp, #4]
    75e2:	6803      	ldr	r3, [r0, #0]
    75e4:	6a1b      	ldr	r3, [r3, #32]
    75e6:	4651      	mov	r1, sl
    75e8:	4798      	blx	r3
        if (parser == nullptr) {
    75ea:	4680      	mov	r8, r0
    75ec:	2800      	cmp	r0, #0
    75ee:	f43f aeed 	beq.w	73cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
    75f2:	ab07      	add	r3, sp, #28
    75f4:	9a04      	ldr	r2, [sp, #16]
    75f6:	f8db 1008 	ldr.w	r1, [fp, #8]
    75fa:	4620      	mov	r0, r4
    75fc:	47c0      	blx	r8
    75fe:	b9f0      	cbnz	r0, 763e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x40e>
      size_t custom_data_size = 0;
    7600:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
    7604:	f8db 8068 	ldr.w	r8, [fp, #104]	; 0x68
    return data_ - ReadScalar<soffset_t>(data_);
    7608:	4620      	mov	r0, r4
    760a:	f00b fe69 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    760e:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7610:	4630      	mov	r0, r6
    7612:	f00b fe6b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7616:	2806      	cmp	r0, #6
    7618:	f67f af04 	bls.w	7424 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f4>
    761c:	1db0      	adds	r0, r6, #6
    761e:	f00b fe65 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7622:	e700      	b.n	7426 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7624:	2100      	movs	r1, #0
    7626:	e706      	b.n	7436 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x206>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7628:	2000      	movs	r0, #0
    762a:	e71b      	b.n	7464 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x234>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    762c:	2100      	movs	r1, #0
    762e:	e721      	b.n	7474 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x244>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
    7630:	9b05      	ldr	r3, [sp, #20]
    7632:	3301      	adds	r3, #1
    7634:	9305      	str	r3, [sp, #20]
    7636:	e601      	b.n	723c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xc>
  return kTfLiteOk;
    7638:	2300      	movs	r3, #0
    763a:	461c      	mov	r4, r3
    763c:	e671      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    763e:	4604      	mov	r4, r0
    7640:	e66f      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7642:	4604      	mov	r4, r0
    7644:	e66d      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    7646:	4604      	mov	r4, r0
    7648:	e66b      	b.n	7322 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
    764a:	bf00      	nop

0000764c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
    764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7650:	b083      	sub	sp, #12
    7652:	4605      	mov	r5, r0
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
    7654:	6801      	ldr	r1, [r0, #0]
    7656:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7658:	f000 fe60 	bl	831c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
    765c:	b170      	cbz	r0, 767c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x30>
    765e:	4601      	mov	r1, r0
  graph_.SetSubgraphAllocations(allocations);
    7660:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    7664:	4630      	mov	r0, r6
    7666:	f00b ff1d 	bl	134a4 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
    766a:	4628      	mov	r0, r5
    766c:	f7ff fde0 	bl	7230 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
    7670:	4603      	mov	r3, r0
    7672:	b158      	cbz	r0, 768c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40>
}
    7674:	4618      	mov	r0, r3
    7676:	b003      	add	sp, #12
    7678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    767c:	49bc      	ldr	r1, [pc, #752]	; (7970 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x324>)
    767e:	68a8      	ldr	r0, [r5, #8]
    7680:	f00c fb71 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
    7684:	2301      	movs	r3, #1
    7686:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
    return kTfLiteError;
    768a:	e7f3      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
    768c:	4bb9      	ldr	r3, [pc, #740]	; (7974 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x328>)
    768e:	646b      	str	r3, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    7690:	2400      	movs	r4, #0
    7692:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = nullptr;
    7694:	652c      	str	r4, [r5, #80]	; 0x50
  context_.GetExecutionPlan = GetGraph;
    7696:	4bb8      	ldr	r3, [pc, #736]	; (7978 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x32c>)
    7698:	612b      	str	r3, [r5, #16]
  graph_.InitSubgraphs();
    769a:	4630      	mov	r0, r6
    769c:	f00b ff04 	bl	134a8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
    76a0:	4bb6      	ldr	r3, [pc, #728]	; (797c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x330>)
    76a2:	64eb      	str	r3, [r5, #76]	; 0x4c
  graph_.PrepareSubgraphs();
    76a4:	4630      	mov	r0, r6
    76a6:	f7ff f9bd 	bl	6a24 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.AllocatePersistentBuffer = nullptr;
    76aa:	646c      	str	r4, [r5, #68]	; 0x44
  context_.RequestScratchBufferInArena = nullptr;
    76ac:	64ec      	str	r4, [r5, #76]	; 0x4c
  context_.GetScratchBuffer = GetScratchBuffer;
    76ae:	4bb4      	ldr	r3, [pc, #720]	; (7980 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x334>)
    76b0:	652b      	str	r3, [r5, #80]	; 0x50
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
    76b2:	462b      	mov	r3, r5
    76b4:	f853 1b8c 	ldr.w	r1, [r3], #140
    76b8:	6fea      	ldr	r2, [r5, #124]	; 0x7c
    76ba:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    76bc:	f000 fb90 	bl	7de0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
    76c0:	4603      	mov	r3, r0
    76c2:	2800      	cmp	r0, #0
    76c4:	d1d6      	bne.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    76c6:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
    76c8:	6833      	ldr	r3, [r6, #0]
    76ca:	68df      	ldr	r7, [r3, #12]
    76cc:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    76ce:	4620      	mov	r0, r4
    76d0:	f00b fe06 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    76d4:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    76d8:	4640      	mov	r0, r8
    76da:	f00b fe07 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    76de:	2808      	cmp	r0, #8
    76e0:	d921      	bls.n	7726 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    76e2:	f108 0008 	add.w	r0, r8, #8
    76e6:	f00b fe01 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    76ea:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    76ec:	b1e8      	cbz	r0, 772a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xde>
    76ee:	4620      	mov	r0, r4
    76f0:	f00b fdf0 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    76f4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    76f6:	6820      	ldr	r0, [r4, #0]
    76f8:	f00a fbcd 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    76fc:	b1b8      	cbz	r0, 772e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    76fe:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7700:	4620      	mov	r0, r4
    7702:	f00b fde7 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7706:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7708:	4620      	mov	r0, r4
    770a:	f00b fde9 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    770e:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7712:	4640      	mov	r0, r8
    7714:	f00b fdea 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7718:	2806      	cmp	r0, #6
    771a:	d90f      	bls.n	773c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>
    771c:	f108 0006 	add.w	r0, r8, #6
    7720:	f00b fde4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7724:	e00b      	b.n	773e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf2>
    7726:	2000      	movs	r0, #0
    7728:	e7df      	b.n	76ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x9e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    772a:	2400      	movs	r4, #0
    772c:	e7e3      	b.n	76f6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xaa>
    FLATBUFFERS_ASSERT(i < size());
    772e:	4b95      	ldr	r3, [pc, #596]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7730:	4a95      	ldr	r2, [pc, #596]	; (7988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7732:	f44f 7183 	mov.w	r1, #262	; 0x106
    7736:	4895      	ldr	r0, [pc, #596]	; (798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7738:	f009 f942 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    773c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    773e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7740:	b178      	cbz	r0, 7762 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x116>
    7742:	4620      	mov	r0, r4
    7744:	f00b fdc6 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7748:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    774a:	6820      	ldr	r0, [r4, #0]
    774c:	f00a fba3 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7750:	0081      	lsls	r1, r0, #2
    7752:	4630      	mov	r0, r6
    7754:	47b8      	blx	r7
    7756:	4604      	mov	r4, r0
  input_tensors_ =
    7758:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (input_tensors_ == nullptr) {
    775c:	b118      	cbz	r0, 7766 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
  for (size_t i = 0; i < inputs_size(); ++i) {
    775e:	2600      	movs	r6, #0
    7760:	e09c      	b.n	789c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x250>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7762:	2400      	movs	r4, #0
    7764:	e7f1      	b.n	774a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xfe>
    TF_LITE_REPORT_ERROR(
    7766:	68ae      	ldr	r6, [r5, #8]
    7768:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    776a:	4628      	mov	r0, r5
    776c:	f00b fdb8 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7770:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7772:	4638      	mov	r0, r7
    7774:	f00b fdba 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7778:	2808      	cmp	r0, #8
    777a:	d91f      	bls.n	77bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x170>
    777c:	f107 0008 	add.w	r0, r7, #8
    7780:	f00b fdb4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7784:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7786:	b1d8      	cbz	r0, 77c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x174>
    7788:	4628      	mov	r0, r5
    778a:	f00b fda3 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    778e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7790:	6828      	ldr	r0, [r5, #0]
    7792:	f00a fb80 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7796:	b1a8      	cbz	r0, 77c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x178>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7798:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    779a:	4628      	mov	r0, r5
    779c:	f00b fd9a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77a0:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    77a2:	4628      	mov	r0, r5
    77a4:	f00b fd9c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    77a8:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    77aa:	4638      	mov	r0, r7
    77ac:	f00b fd9e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77b0:	2806      	cmp	r0, #6
    77b2:	d90e      	bls.n	77d2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x186>
    77b4:	1db8      	adds	r0, r7, #6
    77b6:	f00b fd99 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    77ba:	e00b      	b.n	77d4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>
    77bc:	2000      	movs	r0, #0
    77be:	e7e1      	b.n	7784 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x138>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77c0:	4625      	mov	r5, r4
    77c2:	e7e5      	b.n	7790 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
    FLATBUFFERS_ASSERT(i < size());
    77c4:	4b6f      	ldr	r3, [pc, #444]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    77c6:	4a70      	ldr	r2, [pc, #448]	; (7988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    77c8:	f44f 7183 	mov.w	r1, #262	; 0x106
    77cc:	486f      	ldr	r0, [pc, #444]	; (798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    77ce:	f009 f8f7 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77d2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    77d4:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77d6:	b118      	cbz	r0, 77e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>
    77d8:	4628      	mov	r0, r5
    77da:	f00b fd7b 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    77de:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    77e0:	6820      	ldr	r0, [r4, #0]
    77e2:	f00a fb58 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    77e6:	0082      	lsls	r2, r0, #2
    77e8:	4969      	ldr	r1, [pc, #420]	; (7990 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x344>)
    77ea:	4630      	mov	r0, r6
    77ec:	f00c fabb 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    77f0:	2301      	movs	r3, #1
    77f2:	e73f      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    77f4:	2000      	movs	r0, #0
    77f6:	e05f      	b.n	78b8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    77f8:	2400      	movs	r4, #0
    77fa:	e064      	b.n	78c6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x27a>
    FLATBUFFERS_ASSERT(i < size());
    77fc:	4b61      	ldr	r3, [pc, #388]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    77fe:	4a62      	ldr	r2, [pc, #392]	; (7988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7800:	f44f 7183 	mov.w	r1, #262	; 0x106
    7804:	4861      	ldr	r0, [pc, #388]	; (798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7806:	f009 f8db 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    780a:	2000      	movs	r0, #0
    780c:	e071      	b.n	78f2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2a6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    780e:	2400      	movs	r4, #0
    7810:	e076      	b.n	7900 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7812:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7814:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7816:	2800      	cmp	r0, #0
    7818:	f000 808f 	beq.w	793a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2ee>
    781c:	4620      	mov	r0, r4
    781e:	f00b fd59 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7822:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7824:	6820      	ldr	r0, [r4, #0]
    7826:	f00a fb36 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    782a:	2800      	cmp	r0, #0
    782c:	f000 8087 	beq.w	793e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7830:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7832:	4620      	mov	r0, r4
    7834:	f00b fd4e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7838:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    783a:	4620      	mov	r0, r4
    783c:	f00b fd50 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7840:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7844:	4658      	mov	r0, fp
    7846:	f00b fd51 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    784a:	2806      	cmp	r0, #6
    784c:	d97e      	bls.n	794c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    784e:	f10b 0006 	add.w	r0, fp, #6
    7852:	f00b fd4b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7856:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7858:	2800      	cmp	r0, #0
    785a:	d079      	beq.n	7950 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x304>
    785c:	4620      	mov	r0, r4
    785e:	f00b fd39 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7862:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7864:	6820      	ldr	r0, [r4, #0]
    7866:	f00a fb16 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    786a:	4286      	cmp	r6, r0
    786c:	d272      	bcs.n	7954 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x308>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    786e:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7870:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7874:	f00b fd33 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7878:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    787a:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
    787e:	2200      	movs	r2, #0
    7880:	9200      	str	r2, [sp, #0]
    7882:	4652      	mov	r2, sl
    7884:	4639      	mov	r1, r7
    7886:	4640      	mov	r0, r8
    7888:	47c8      	blx	r9
    788a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (input_tensors_[i] == nullptr) {
    788e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    7892:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7896:	2b00      	cmp	r3, #0
    7898:	d063      	beq.n	7962 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x316>
  for (size_t i = 0; i < inputs_size(); ++i) {
    789a:	3601      	adds	r6, #1
    789c:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    789e:	4620      	mov	r0, r4
    78a0:	f00b fd1e 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78a4:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78a6:	4638      	mov	r0, r7
    78a8:	f00b fd20 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78ac:	2808      	cmp	r0, #8
    78ae:	d9a1      	bls.n	77f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a8>
    78b0:	f107 0008 	add.w	r0, r7, #8
    78b4:	f00b fd1a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78b8:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78ba:	2800      	cmp	r0, #0
    78bc:	d09c      	beq.n	77f8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
    78be:	4620      	mov	r0, r4
    78c0:	f00b fd08 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78c4:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    78c6:	6820      	ldr	r0, [r4, #0]
    78c8:	f00a fae5 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    78cc:	2800      	cmp	r0, #0
    78ce:	d095      	beq.n	77fc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    78d0:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    78d2:	4620      	mov	r0, r4
    78d4:	f00b fcfe 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78d8:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    78da:	4620      	mov	r0, r4
    78dc:	f00b fd00 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    78e0:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    78e2:	4638      	mov	r0, r7
    78e4:	f00b fd02 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    78e8:	2806      	cmp	r0, #6
    78ea:	d98e      	bls.n	780a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1be>
    78ec:	1db8      	adds	r0, r7, #6
    78ee:	f00b fcfd 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    78f2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    78f4:	2800      	cmp	r0, #0
    78f6:	d08a      	beq.n	780e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    78f8:	4620      	mov	r0, r4
    78fa:	f00b fceb 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    78fe:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7900:	6820      	ldr	r0, [r4, #0]
    7902:	f00a fac8 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7906:	4286      	cmp	r6, r0
    7908:	d248      	bcs.n	799c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    790a:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
    790e:	f8d8 3000 	ldr.w	r3, [r8]
    7912:	f8d3 9000 	ldr.w	r9, [r3]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7916:	682f      	ldr	r7, [r5, #0]
    7918:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    791c:	4638      	mov	r0, r7
    791e:	f00b fcdf 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7922:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7924:	4620      	mov	r0, r4
    7926:	f00b fce1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    792a:	2808      	cmp	r0, #8
    792c:	f67f af71 	bls.w	7812 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c6>
    7930:	f104 0008 	add.w	r0, r4, #8
    7934:	f00b fcda 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7938:	e76c      	b.n	7814 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c8>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    793a:	2400      	movs	r4, #0
    793c:	e772      	b.n	7824 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1d8>
    FLATBUFFERS_ASSERT(i < size());
    793e:	4b11      	ldr	r3, [pc, #68]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7940:	4a11      	ldr	r2, [pc, #68]	; (7988 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x33c>)
    7942:	f44f 7183 	mov.w	r1, #262	; 0x106
    7946:	4811      	ldr	r0, [pc, #68]	; (798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    7948:	f009 f83a 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    794c:	2000      	movs	r0, #0
    794e:	e782      	b.n	7856 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7950:	2400      	movs	r4, #0
    7952:	e787      	b.n	7864 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>
    FLATBUFFERS_ASSERT(i < size());
    7954:	4b0b      	ldr	r3, [pc, #44]	; (7984 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x338>)
    7956:	4a0f      	ldr	r2, [pc, #60]	; (7994 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x348>)
    7958:	f44f 7183 	mov.w	r1, #262	; 0x106
    795c:	480b      	ldr	r0, [pc, #44]	; (798c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x340>)
    795e:	f009 f82f 	bl	109c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7962:	4632      	mov	r2, r6
    7964:	490c      	ldr	r1, [pc, #48]	; (7998 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>)
    7966:	68a8      	ldr	r0, [r5, #8]
    7968:	f00c f9fd 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    796c:	2301      	movs	r3, #1
    796e:	e681      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7970:	0006a364 	.word	0x0006a364
    7974:	000135a3 	.word	0x000135a3
    7978:	000135f3 	.word	0x000135f3
    797c:	000135fd 	.word	0x000135fd
    7980:	000135b1 	.word	0x000135b1
    7984:	0006924c 	.word	0x0006924c
    7988:	0006939c 	.word	0x0006939c
    798c:	00069318 	.word	0x00069318
    7990:	0006a388 	.word	0x0006a388
    7994:	00069258 	.word	0x00069258
    7998:	0006a3d4 	.word	0x0006a3d4
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    799c:	6eae      	ldr	r6, [r5, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
    799e:	6833      	ldr	r3, [r6, #0]
    79a0:	68df      	ldr	r7, [r3, #12]
    return model_->subgraphs()->Get(0)->outputs()->size();
    79a2:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    79a4:	4620      	mov	r0, r4
    79a6:	f00b fc9b 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79aa:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79ae:	4640      	mov	r0, r8
    79b0:	f00b fc9c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79b4:	2808      	cmp	r0, #8
    79b6:	d904      	bls.n	79c2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x376>
    79b8:	f108 0008 	add.w	r0, r8, #8
    79bc:	f00b fc96 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    79c0:	e000      	b.n	79c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x378>
    79c2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    79c4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    79c6:	b360      	cbz	r0, 7a22 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d6>
    79c8:	4620      	mov	r0, r4
    79ca:	f00b fc83 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79ce:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    79d0:	6820      	ldr	r0, [r4, #0]
    79d2:	f00a fa60 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    79d6:	b330      	cbz	r0, 7a26 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3da>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    79d8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    79da:	4620      	mov	r0, r4
    79dc:	f00b fc7a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    79e0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    79e2:	4620      	mov	r0, r4
    79e4:	f00b fc7c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    79e8:	eba4 0800 	sub.w	r8, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    79ec:	4640      	mov	r0, r8
    79ee:	f00b fc7d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    79f2:	2808      	cmp	r0, #8
    79f4:	d91e      	bls.n	7a34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3e8>
    79f6:	f108 0008 	add.w	r0, r8, #8
    79fa:	f00b fc77 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    79fe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a00:	b1d0      	cbz	r0, 7a38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3ec>
    7a02:	4620      	mov	r0, r4
    7a04:	f00b fc66 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a08:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a0a:	6820      	ldr	r0, [r4, #0]
    7a0c:	f00a fa43 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
    7a10:	0081      	lsls	r1, r0, #2
    7a12:	4630      	mov	r0, r6
    7a14:	47b8      	blx	r7
    7a16:	4604      	mov	r4, r0
  output_tensors_ =
    7a18:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
  if (output_tensors_ == nullptr) {
    7a1c:	b170      	cbz	r0, 7a3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f0>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7a1e:	2600      	movs	r6, #0
    7a20:	e0c6      	b.n	7bb0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x564>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a22:	2400      	movs	r4, #0
    7a24:	e7d4      	b.n	79d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x384>
    FLATBUFFERS_ASSERT(i < size());
    7a26:	4b8f      	ldr	r3, [pc, #572]	; (7c64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7a28:	4a8f      	ldr	r2, [pc, #572]	; (7c68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7a2a:	f44f 7183 	mov.w	r1, #262	; 0x106
    7a2e:	488f      	ldr	r0, [pc, #572]	; (7c6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7a30:	f008 ffc6 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a34:	2000      	movs	r0, #0
    7a36:	e7e2      	b.n	79fe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3b2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a38:	2400      	movs	r4, #0
    7a3a:	e7e6      	b.n	7a0a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3be>
    TF_LITE_REPORT_ERROR(
    7a3c:	68ae      	ldr	r6, [r5, #8]
    7a3e:	682d      	ldr	r5, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7a40:	4628      	mov	r0, r5
    7a42:	f00b fc4d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a46:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a48:	4638      	mov	r0, r7
    7a4a:	f00b fc4f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a4e:	2808      	cmp	r0, #8
    7a50:	d920      	bls.n	7a94 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x448>
    7a52:	f107 0008 	add.w	r0, r7, #8
    7a56:	f00b fc49 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7a5a:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a5c:	b1e0      	cbz	r0, 7a98 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x44c>
    7a5e:	4628      	mov	r0, r5
    7a60:	f00b fc38 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a64:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7a66:	6828      	ldr	r0, [r5, #0]
    7a68:	f00a fa15 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7a6c:	b1b0      	cbz	r0, 7a9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x450>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7a6e:	3504      	adds	r5, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7a70:	4628      	mov	r0, r5
    7a72:	f00b fc2f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7a76:	4405      	add	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7a78:	4628      	mov	r0, r5
    7a7a:	f00b fc31 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7a7e:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7a80:	4638      	mov	r0, r7
    7a82:	f00b fc33 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7a86:	2808      	cmp	r0, #8
    7a88:	d90f      	bls.n	7aaa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x45e>
    7a8a:	f107 0008 	add.w	r0, r7, #8
    7a8e:	f00b fc2d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7a92:	e00b      	b.n	7aac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x460>
    7a94:	2000      	movs	r0, #0
    7a96:	e7e0      	b.n	7a5a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7a98:	4625      	mov	r5, r4
    7a9a:	e7e4      	b.n	7a66 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x41a>
    FLATBUFFERS_ASSERT(i < size());
    7a9c:	4b71      	ldr	r3, [pc, #452]	; (7c64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7a9e:	4a72      	ldr	r2, [pc, #456]	; (7c68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7aa0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7aa4:	4871      	ldr	r0, [pc, #452]	; (7c6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7aa6:	f008 ff8b 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7aaa:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7aac:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7aae:	b118      	cbz	r0, 7ab8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x46c>
    7ab0:	4628      	mov	r0, r5
    7ab2:	f00b fc0f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7ab6:	182c      	adds	r4, r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ab8:	6820      	ldr	r0, [r4, #0]
    7aba:	f00a f9ec 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    7abe:	0082      	lsls	r2, r0, #2
    7ac0:	496b      	ldr	r1, [pc, #428]	; (7c70 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x624>)
    7ac2:	4630      	mov	r0, r6
    7ac4:	f00c f94f 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7ac8:	2301      	movs	r3, #1
    7aca:	e5d3      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7acc:	2000      	movs	r0, #0
    7ace:	e07d      	b.n	7bcc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x580>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ad0:	2400      	movs	r4, #0
    7ad2:	e083      	b.n	7bdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x590>
    FLATBUFFERS_ASSERT(i < size());
    7ad4:	4b63      	ldr	r3, [pc, #396]	; (7c64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7ad6:	4a64      	ldr	r2, [pc, #400]	; (7c68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7ad8:	f44f 7183 	mov.w	r1, #262	; 0x106
    7adc:	4863      	ldr	r0, [pc, #396]	; (7c6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7ade:	f008 ff6f 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7ae2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7ae4:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7ae6:	2800      	cmp	r0, #0
    7ae8:	f000 8092 	beq.w	7c10 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c4>
    7aec:	4620      	mov	r0, r4
    7aee:	f00b fbf1 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7af2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7af4:	6820      	ldr	r0, [r4, #0]
    7af6:	f00a f9ce 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7afa:	4286      	cmp	r6, r0
    7afc:	f080 80a7 	bcs.w	7c4e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x602>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7b00:	f8d5 8068 	ldr.w	r8, [r5, #104]	; 0x68
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
    7b04:	f8d8 3000 	ldr.w	r3, [r8]
    7b08:	f8d3 9000 	ldr.w	r9, [r3]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
    7b0c:	682f      	ldr	r7, [r5, #0]
    7b0e:	f8d5 a07c 	ldr.w	sl, [r5, #124]	; 0x7c
    return data_ - ReadScalar<soffset_t>(data_);
    7b12:	4638      	mov	r0, r7
    7b14:	f00b fbe4 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b18:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b1a:	4620      	mov	r0, r4
    7b1c:	f00b fbe6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b20:	2808      	cmp	r0, #8
    7b22:	d977      	bls.n	7c14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5c8>
    7b24:	f104 0008 	add.w	r0, r4, #8
    7b28:	f00b fbe0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b2c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b2e:	2800      	cmp	r0, #0
    7b30:	d072      	beq.n	7c18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5cc>
    7b32:	4620      	mov	r0, r4
    7b34:	f00b fbce 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b38:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b3a:	6820      	ldr	r0, [r4, #0]
    7b3c:	f00a f9ab 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b40:	2800      	cmp	r0, #0
    7b42:	d06b      	beq.n	7c1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5d0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b44:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7b46:	4620      	mov	r0, r4
    7b48:	f00b fbc4 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b4c:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7b4e:	4620      	mov	r0, r4
    7b50:	f00b fbc6 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7b54:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7b58:	4658      	mov	r0, fp
    7b5a:	f00b fbc7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7b5e:	2808      	cmp	r0, #8
    7b60:	d963      	bls.n	7c2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5de>
    7b62:	f10b 0008 	add.w	r0, fp, #8
    7b66:	f00b fbc1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7b6a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d05e      	beq.n	7c2e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e2>
    7b70:	4620      	mov	r0, r4
    7b72:	f00b fbaf 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7b76:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7b78:	6820      	ldr	r0, [r4, #0]
    7b7a:	f00a f98c 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7b7e:	4286      	cmp	r6, r0
    7b80:	d257      	bcs.n	7c32 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5e6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7b82:	3404      	adds	r4, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    7b84:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    7b88:	f00b fba9 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    7b8c:	4603      	mov	r3, r0
    7b8e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
    7b92:	2200      	movs	r2, #0
    7b94:	9200      	str	r2, [sp, #0]
    7b96:	4652      	mov	r2, sl
    7b98:	4639      	mov	r1, r7
    7b9a:	4640      	mov	r0, r8
    7b9c:	47c8      	blx	r9
    7b9e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    if (output_tensors_[i] == nullptr) {
    7ba2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7ba6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d048      	beq.n	7c40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5f4>
  for (size_t i = 0; i < outputs_size(); ++i) {
    7bae:	3601      	adds	r6, #1
    7bb0:	682c      	ldr	r4, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    7bb2:	4620      	mov	r0, r4
    7bb4:	f00b fb94 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7bb8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7bba:	4638      	mov	r0, r7
    7bbc:	f00b fb96 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7bc0:	2808      	cmp	r0, #8
    7bc2:	d983      	bls.n	7acc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x480>
    7bc4:	f107 0008 	add.w	r0, r7, #8
    7bc8:	f00b fb90 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7bcc:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7bce:	2800      	cmp	r0, #0
    7bd0:	f43f af7e 	beq.w	7ad0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x484>
    7bd4:	4620      	mov	r0, r4
    7bd6:	f00b fb7d 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bda:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7bdc:	6820      	ldr	r0, [r4, #0]
    7bde:	f00a f95a 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7be2:	2800      	cmp	r0, #0
    7be4:	f43f af76 	beq.w	7ad4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x488>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7be8:	3404      	adds	r4, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7bea:	4620      	mov	r0, r4
    7bec:	f00b fb72 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7bf0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    7bf2:	4620      	mov	r0, r4
    7bf4:	f00b fb74 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7bf8:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7bfa:	4638      	mov	r0, r7
    7bfc:	f00b fb76 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c00:	2808      	cmp	r0, #8
    7c02:	f67f af6e 	bls.w	7ae2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x496>
    7c06:	f107 0008 	add.w	r0, r7, #8
    7c0a:	f00b fb6f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7c0e:	e769      	b.n	7ae4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x498>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c10:	2400      	movs	r4, #0
    7c12:	e76f      	b.n	7af4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c14:	2000      	movs	r0, #0
    7c16:	e789      	b.n	7b2c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4e0>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c18:	2400      	movs	r4, #0
    7c1a:	e78e      	b.n	7b3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4ee>
    FLATBUFFERS_ASSERT(i < size());
    7c1c:	4b11      	ldr	r3, [pc, #68]	; (7c64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7c1e:	4a12      	ldr	r2, [pc, #72]	; (7c68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x61c>)
    7c20:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c24:	4811      	ldr	r0, [pc, #68]	; (7c6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7c26:	f008 fecb 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7c2a:	2000      	movs	r0, #0
    7c2c:	e79d      	b.n	7b6a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x51e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7c2e:	2400      	movs	r4, #0
    7c30:	e7a2      	b.n	7b78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x52c>
    FLATBUFFERS_ASSERT(i < size());
    7c32:	4b0c      	ldr	r3, [pc, #48]	; (7c64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x618>)
    7c34:	4a0f      	ldr	r2, [pc, #60]	; (7c74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x628>)
    7c36:	f44f 7183 	mov.w	r1, #262	; 0x106
    7c3a:	480c      	ldr	r0, [pc, #48]	; (7c6c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x620>)
    7c3c:	f008 fec0 	bl	109c0 <__assert_func>
      TF_LITE_REPORT_ERROR(error_reporter_,
    7c40:	4632      	mov	r2, r6
    7c42:	490d      	ldr	r1, [pc, #52]	; (7c78 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62c>)
    7c44:	68a8      	ldr	r0, [r5, #8]
    7c46:	f00c f88e 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7c4a:	2301      	movs	r3, #1
    7c4c:	e512      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
    7c4e:	4628      	mov	r0, r5
    7c50:	f00b fd2d 	bl	136ae <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
    7c54:	4603      	mov	r3, r0
    7c56:	2800      	cmp	r0, #0
    7c58:	f47f ad0c 	bne.w	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
    7c5c:	2201      	movs	r2, #1
    7c5e:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
  return kTfLiteOk;
    7c62:	e507      	b.n	7674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
    7c64:	0006924c 	.word	0x0006924c
    7c68:	0006939c 	.word	0x0006939c
    7c6c:	00069318 	.word	0x00069318
    7c70:	0006a3fc 	.word	0x0006a3fc
    7c74:	00069258 	.word	0x00069258
    7c78:	0006a448 	.word	0x0006a448

00007c7c <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
    7c7c:	b510      	push	{r4, lr}
    7c7e:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
    7c80:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    7c84:	b95b      	cbnz	r3, 7c9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
  if (!tensors_allocated_) {
    7c86:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    7c8a:	b913      	cbnz	r3, 7c92 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
    7c8c:	f7ff fcde 	bl	764c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    7c90:	b920      	cbnz	r0, 7c9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
  return graph_.InvokeSubgraph(0);
    7c92:	2100      	movs	r1, #0
    7c94:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    7c98:	f7fe ff04 	bl	6aa4 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
}
    7c9c:	bd10      	pop	{r4, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
    7c9e:	4903      	ldr	r1, [pc, #12]	; (7cac <_ZN6tflite16MicroInterpreter6InvokeEv+0x30>)
    7ca0:	6880      	ldr	r0, [r0, #8]
    7ca2:	f00c f860 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7ca6:	2001      	movs	r0, #1
    7ca8:	e7f8      	b.n	7c9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    7caa:	bf00      	nop
    7cac:	0006a470 	.word	0x0006a470

00007cb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
  return kTfLiteOk;
}

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
    7cb0:	b410      	push	{r4}
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
    7cb2:	4c05      	ldr	r4, [pc, #20]	; (7cc8 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x18>)
    7cb4:	6004      	str	r4, [r0, #0]
    7cb6:	6041      	str	r1, [r0, #4]
    7cb8:	60c2      	str	r2, [r0, #12]
    7cba:	2200      	movs	r2, #0
    7cbc:	7402      	strb	r2, [r0, #16]
    7cbe:	6142      	str	r2, [r0, #20]
    7cc0:	6182      	str	r2, [r0, #24]
    7cc2:	bc10      	pop	{r4}
    7cc4:	4770      	bx	lr
    7cc6:	bf00      	nop
    7cc8:	0006abbc 	.word	0x0006abbc

00007ccc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
    7ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cce:	4605      	mov	r5, r0
    7cd0:	460f      	mov	r7, r1
    7cd2:	461e      	mov	r6, r3
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
    7cd4:	f00b fde8 	bl	138a8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7cd8:	2200      	movs	r2, #0
  size_t current_node_request_count = 0;
    7cda:	4613      	mov	r3, r2
    7cdc:	e000      	b.n	7ce0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x14>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
    7cde:	3201      	adds	r2, #1
    7ce0:	696c      	ldr	r4, [r5, #20]
    7ce2:	4294      	cmp	r4, r2
    7ce4:	d907      	bls.n	7cf6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2a>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
    7ce6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
    7cea:	6864      	ldr	r4, [r4, #4]
    7cec:	f1b4 3fff 	cmp.w	r4, #4294967295
    7cf0:	d1f5      	bne.n	7cde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
      ++current_node_request_count;
    7cf2:	3301      	adds	r3, #1
    7cf4:	e7f3      	b.n	7cde <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x12>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
    7cf6:	2b0b      	cmp	r3, #11
    7cf8:	d80d      	bhi.n	7d16 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4a>
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
    7cfa:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
      &requests[scratch_buffer_request_count_];
  *current_request = {};
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
    7cfe:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
    7d02:	f04f 32ff 	mov.w	r2, #4294967295
    7d06:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
    7d08:	696b      	ldr	r3, [r5, #20]
    7d0a:	6033      	str	r3, [r6, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
    7d0c:	696b      	ldr	r3, [r5, #20]
    7d0e:	3301      	adds	r3, #1
    7d10:	616b      	str	r3, [r5, #20]
  return kTfLiteOk;
    7d12:	2000      	movs	r0, #0
}
    7d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
    7d16:	220c      	movs	r2, #12
    7d18:	4902      	ldr	r1, [pc, #8]	; (7d24 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>)
    7d1a:	68e8      	ldr	r0, [r5, #12]
    7d1c:	f00c f823 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7d20:	2001      	movs	r0, #1
    7d22:	e7f7      	b.n	7d14 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>
    7d24:	0006a4a0 	.word	0x0006a4a0

00007d28 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    7d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7d2c:	b122      	cbz	r2, 7d38 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    7d2e:	4607      	mov	r7, r0
    7d30:	460e      	mov	r6, r1
    7d32:	4690      	mov	r8, r2

  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7d34:	2500      	movs	r5, #0
    7d36:	e029      	b.n	7d8c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x64>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    7d38:	f00e fa2f 	bl	1619a <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d3c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7d3e:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7d40:	b390      	cbz	r0, 7da8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x80>
    7d42:	4620      	mov	r0, r4
    7d44:	f00b fac6 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7d48:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7d4a:	6820      	ldr	r0, [r4, #0]
    7d4c:	f00a f8a3 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7d50:	4285      	cmp	r5, r0
    7d52:	d23a      	bcs.n	7dca <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa2>
    7d54:	6820      	ldr	r0, [r4, #0]
    7d56:	f00a f89e 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7d5a:	4285      	cmp	r5, r0
    7d5c:	d226      	bcs.n	7dac <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x84>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7d5e:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7d60:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7d64:	4620      	mov	r0, r4
    7d66:	f00b fab5 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
       subgraph_idx++) {
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
    TFLITE_DCHECK(subgraph != nullptr);
    7d6a:	1820      	adds	r0, r4, r0
    7d6c:	d025      	beq.n	7dba <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x92>

    uint32_t operators_size = NumSubgraphOperators(subgraph);
    7d6e:	f00b fb67 	bl	13440 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>

    // Initialize NodeAndRegistrations for the subgraph.
    NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
        memory_allocator_->AllocateFromTail(
    7d72:	687b      	ldr	r3, [r7, #4]
            sizeof(NodeAndRegistration) * operators_size,
            alignof(NodeAndRegistration)));
    7d74:	681a      	ldr	r2, [r3, #0]
    7d76:	68d4      	ldr	r4, [r2, #12]
        memory_allocator_->AllocateFromTail(
    7d78:	2204      	movs	r2, #4
    7d7a:	212c      	movs	r1, #44	; 0x2c
    7d7c:	fb01 f100 	mul.w	r1, r1, r0
    7d80:	4618      	mov	r0, r3
    7d82:	47a0      	blx	r4
    if (output == nullptr) {
    7d84:	b1d8      	cbz	r0, 7dbe <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x96>
      TF_LITE_REPORT_ERROR(
          error_reporter_,
          "Failed to allocate memory for node_and_registrations.");
      return kTfLiteError;
    }
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
    7d86:	f848 0035 	str.w	r0, [r8, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7d8a:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7d8c:	4630      	mov	r0, r6
    7d8e:	f00b faa7 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7d92:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7d94:	4620      	mov	r0, r4
    7d96:	f00b faa9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7d9a:	2808      	cmp	r0, #8
    7d9c:	d9ce      	bls.n	7d3c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14>
    7d9e:	f104 0008 	add.w	r0, r4, #8
    7da2:	f00b faa3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7da6:	e7ca      	b.n	7d3e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7da8:	2400      	movs	r4, #0
    7daa:	e7ce      	b.n	7d4a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x22>
    FLATBUFFERS_ASSERT(i < size());
    7dac:	4b08      	ldr	r3, [pc, #32]	; (7dd0 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa8>)
    7dae:	4a09      	ldr	r2, [pc, #36]	; (7dd4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xac>)
    7db0:	f44f 7183 	mov.w	r1, #262	; 0x106
    7db4:	4808      	ldr	r0, [pc, #32]	; (7dd8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb0>)
    7db6:	f008 fe03 	bl	109c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7dba:	f00e f9ee 	bl	1619a <abort>
      TF_LITE_REPORT_ERROR(
    7dbe:	4907      	ldr	r1, [pc, #28]	; (7ddc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xb4>)
    7dc0:	68f8      	ldr	r0, [r7, #12]
    7dc2:	f00b ffd0 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    7dc6:	2001      	movs	r0, #1
    7dc8:	e000      	b.n	7dcc <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xa4>
  }
  return kTfLiteOk;
    7dca:	2000      	movs	r0, #0
}
    7dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7dd0:	0006924c 	.word	0x0006924c
    7dd4:	0006939c 	.word	0x0006939c
    7dd8:	00069318 	.word	0x00069318
    7ddc:	0006a4d8 	.word	0x0006a4d8

00007de0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
    7de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7de4:	b083      	sub	sp, #12
    7de6:	4605      	mov	r5, r0
    7de8:	4698      	mov	r8, r3
  if (!model_is_allocating_) {
    7dea:	7c03      	ldrb	r3, [r0, #16]
    7dec:	b11b      	cbz	r3, 7df6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x16>
    7dee:	460f      	mov	r7, r1
    7df0:	4691      	mov	r9, r2
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7df2:	2600      	movs	r6, #0
    7df4:	e043      	b.n	7e7e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x9e>
    TF_LITE_REPORT_ERROR(error_reporter_,
    7df6:	4930      	ldr	r1, [pc, #192]	; (7eb8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xd8>)
    7df8:	68c0      	ldr	r0, [r0, #12]
    7dfa:	f00b ffb4 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    7dfe:	2301      	movs	r3, #1
    7e00:	e055      	b.n	7eae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e02:	f104 0008 	add.w	r0, r4, #8
    7e06:	f00b fa71 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7e0a:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e0c:	2800      	cmp	r0, #0
    7e0e:	d041      	beq.n	7e94 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    7e10:	4620      	mov	r0, r4
    7e12:	f00b fa5f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7e16:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7e18:	6820      	ldr	r0, [r4, #0]
    7e1a:	f00a f83c 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e1e:	4286      	cmp	r6, r0
    7e20:	d243      	bcs.n	7eaa <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xca>
    7e22:	6820      	ldr	r0, [r4, #0]
    7e24:	f00a f837 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7e28:	4286      	cmp	r6, r0
    7e2a:	d235      	bcs.n	7e98 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7e2c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7e2e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7e32:	4620      	mov	r0, r4
    7e34:	f00b fa4e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    7e38:	1824      	adds	r4, r4, r0
    7e3a:	d034      	beq.n	7ea6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xc6>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
    7e3c:	682b      	ldr	r3, [r5, #0]
    7e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7e40:	696a      	ldr	r2, [r5, #20]
    7e42:	4641      	mov	r1, r8
    7e44:	4628      	mov	r0, r5
    7e46:	4798      	blx	r3
    7e48:	4603      	mov	r3, r0
    7e4a:	bb80      	cbnz	r0, 7eae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
    7e4c:	682b      	ldr	r3, [r5, #0]
    7e4e:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
    7e52:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    7e56:	9600      	str	r6, [sp, #0]
    7e58:	f8d8 3000 	ldr.w	r3, [r8]
    7e5c:	f8da 2004 	ldr.w	r2, [sl, #4]
    7e60:	4639      	mov	r1, r7
    7e62:	4628      	mov	r0, r5
    7e64:	47d8      	blx	fp
    7e66:	4603      	mov	r3, r0
    7e68:	bb08      	cbnz	r0, 7eae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
    7e6a:	682b      	ldr	r3, [r5, #0]
    7e6c:	6a1b      	ldr	r3, [r3, #32]
    7e6e:	f8da 2004 	ldr.w	r2, [sl, #4]
    7e72:	4621      	mov	r1, r4
    7e74:	4628      	mov	r0, r5
    7e76:	4798      	blx	r3
    7e78:	4603      	mov	r3, r0
    7e7a:	b9c0      	cbnz	r0, 7eae <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xce>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    7e7c:	3601      	adds	r6, #1
    return data_ - ReadScalar<soffset_t>(data_);
    7e7e:	4638      	mov	r0, r7
    7e80:	f00b fa2e 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7e84:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7e86:	4620      	mov	r0, r4
    7e88:	f00b fa30 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7e8c:	2808      	cmp	r0, #8
    7e8e:	d8b8      	bhi.n	7e02 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x22>
    7e90:	2000      	movs	r0, #0
    7e92:	e7ba      	b.n	7e0a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7e94:	2400      	movs	r4, #0
    7e96:	e7bf      	b.n	7e18 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x38>
    FLATBUFFERS_ASSERT(i < size());
    7e98:	4b08      	ldr	r3, [pc, #32]	; (7ebc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xdc>)
    7e9a:	4a09      	ldr	r2, [pc, #36]	; (7ec0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe0>)
    7e9c:	f44f 7183 	mov.w	r1, #262	; 0x106
    7ea0:	4808      	ldr	r0, [pc, #32]	; (7ec4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xe4>)
    7ea2:	f008 fd8d 	bl	109c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    7ea6:	f00e f978 	bl	1619a <abort>
  model_is_allocating_ = false;
    7eaa:	2300      	movs	r3, #0
    7eac:	742b      	strb	r3, [r5, #16]
}
    7eae:	4618      	mov	r0, r3
    7eb0:	b003      	add	sp, #12
    7eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7eb6:	bf00      	nop
    7eb8:	0006a510 	.word	0x0006a510
    7ebc:	0006924c 	.word	0x0006924c
    7ec0:	0006939c 	.word	0x0006939c
    7ec4:	00069318 	.word	0x00069318

00007ec8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
    7ec8:	b570      	push	{r4, r5, r6, lr}
    7eca:	4606      	mov	r6, r0
    7ecc:	460d      	mov	r5, r1
    return data_ - ReadScalar<soffset_t>(data_);
    7ece:	f00b fa07 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7ed2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7ed4:	4620      	mov	r0, r4
    7ed6:	f00b fa09 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7eda:	2808      	cmp	r0, #8
    7edc:	d923      	bls.n	7f26 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5e>
    7ede:	f104 0008 	add.w	r0, r4, #8
    7ee2:	f00b fa03 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7ee6:	b300      	cbz	r0, 7f2a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x62>
    7ee8:	4430      	add	r0, r6
    7eea:	f00b f9f3 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7eee:	4606      	mov	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7ef0:	6828      	ldr	r0, [r5, #0]
    7ef2:	f009 ffd0 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7ef6:	42b0      	cmp	r0, r6
    7ef8:	d919      	bls.n	7f2e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x66>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7efa:	1d2c      	adds	r4, r5, #4
    p += i * sizeof(uoffset_t);
    7efc:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7f00:	4620      	mov	r0, r4
    7f02:	f00b f9e7 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
    7f06:	1824      	adds	r4, r4, r0
    7f08:	d025      	beq.n	7f56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
    7f0a:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    7f0c:	4620      	mov	r0, r4
    7f0e:	f00b f9e7 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f12:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f14:	4620      	mov	r0, r4
    7f16:	f00b f9e9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f1a:	2804      	cmp	r0, #4
    7f1c:	d90e      	bls.n	7f3c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x74>
    7f1e:	1d20      	adds	r0, r4, #4
    7f20:	f00b f9e4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    7f24:	e00b      	b.n	7f3e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x76>
    7f26:	2000      	movs	r0, #0
    7f28:	e7dd      	b.n	7ee6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x1e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    7f2a:	2600      	movs	r6, #0
    7f2c:	e7e0      	b.n	7ef0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x28>
    FLATBUFFERS_ASSERT(i < size());
    7f2e:	4b0d      	ldr	r3, [pc, #52]	; (7f64 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x9c>)
    7f30:	4a0d      	ldr	r2, [pc, #52]	; (7f68 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa0>)
    7f32:	f44f 7183 	mov.w	r1, #262	; 0x106
    7f36:	480d      	ldr	r0, [pc, #52]	; (7f6c <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0xa4>)
    7f38:	f008 fd42 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f3c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    7f3e:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f40:	b158      	cbz	r0, 7f5a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x92>
    7f42:	4628      	mov	r0, r5
    7f44:	f00b f9c6 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7f48:	182c      	adds	r4, r5, r0
    if (auto* array = buffer->data()) {
    7f4a:	b124      	cbz	r4, 7f56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
  uoffset_t size() const { return EndianScalar(length_); }
    7f4c:	6820      	ldr	r0, [r4, #0]
    7f4e:	f009 ffa2 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      if (array->size()) {
    7f52:	b120      	cbz	r0, 7f5e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x96>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7f54:	3404      	adds	r4, #4
}
    7f56:	4620      	mov	r0, r4
    7f58:	bd70      	pop	{r4, r5, r6, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f5a:	2400      	movs	r4, #0
    7f5c:	e7f5      	b.n	7f4a <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x82>
  void* out_buffer = nullptr;
    7f5e:	2400      	movs	r4, #0
  return out_buffer;
    7f60:	e7f9      	b.n	7f56 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x8e>
    7f62:	bf00      	nop
    7f64:	0006924c 	.word	0x0006924c
    7f68:	0006a55c 	.word	0x0006a55c
    7f6c:	00069318 	.word	0x00069318

00007f70 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    7f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f74:	b082      	sub	sp, #8
    7f76:	4606      	mov	r6, r0
    7f78:	460f      	mov	r7, r1
    7f7a:	4690      	mov	r8, r2
    7f7c:	461d      	mov	r5, r3
    7f7e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    7f82:	4608      	mov	r0, r1
    7f84:	f00b f9ac 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    7f88:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    7f8a:	4620      	mov	r0, r4
    7f8c:	f00b f9ae 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    7f90:	2808      	cmp	r0, #8
    7f92:	d93e      	bls.n	8012 <CONFIG_MAIN_STACK_SIZE+0x12>
    7f94:	f104 0008 	add.w	r0, r4, #8
    7f98:	f00b f9a8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    7f9c:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    7f9e:	2800      	cmp	r0, #0
    7fa0:	d039      	beq.n	8016 <CONFIG_MAIN_STACK_SIZE+0x16>
    7fa2:	4620      	mov	r0, r4
    7fa4:	f00b f996 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    7fa8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    7faa:	6820      	ldr	r0, [r4, #0]
    7fac:	f009 ff73 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    7fb0:	4581      	cmp	r9, r0
    7fb2:	d232      	bcs.n	801a <CONFIG_MAIN_STACK_SIZE+0x1a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    7fb4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    7fb6:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    7fba:	4620      	mov	r0, r4
    7fbc:	f00b f98a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    7fc0:	42c4      	cmn	r4, r0
    7fc2:	d031      	beq.n	8028 <CONFIG_MAIN_STACK_SIZE+0x28>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
    7fc4:	6833      	ldr	r3, [r6, #0]
    7fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fc8:	4630      	mov	r0, r6
    7fca:	4798      	blx	r3
    7fcc:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(
          model, tensor, tensor_index, subgraph_index,
          /*allocate_temp=*/false) != kTfLiteOk) {
    7fce:	6833      	ldr	r3, [r6, #0]
    7fd0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(
    7fd4:	2300      	movs	r3, #0
    7fd6:	9301      	str	r3, [sp, #4]
    7fd8:	f8cd 9000 	str.w	r9, [sp]
    7fdc:	462b      	mov	r3, r5
    7fde:	4602      	mov	r2, r0
    7fe0:	4639      	mov	r1, r7
    7fe2:	4630      	mov	r0, r6
    7fe4:	47d0      	blx	sl
    7fe6:	bb08      	cbnz	r0, 802c <CONFIG_MAIN_STACK_SIZE+0x2c>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    7fe8:	f1b8 0f00 	cmp.w	r8, #0
    7fec:	d00d      	beq.n	800a <CONFIG_MAIN_STACK_SIZE+0xa>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    7fee:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
    7ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7ffa:	00ad      	lsls	r5, r5, #2
    7ffc:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    7ffe:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    8000:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8004:	441d      	add	r5, r3
    8006:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    8008:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    800a:	4620      	mov	r0, r4
    800c:	b002      	add	sp, #8
    800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8012:	2000      	movs	r0, #0
    8014:	e7c2      	b.n	7f9c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8016:	2400      	movs	r4, #0
    8018:	e7c7      	b.n	7faa <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    801a:	4b07      	ldr	r3, [pc, #28]	; (8038 <CONFIG_MAIN_STACK_SIZE+0x38>)
    801c:	4a07      	ldr	r2, [pc, #28]	; (803c <CONFIG_MAIN_STACK_SIZE+0x3c>)
    801e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8022:	4807      	ldr	r0, [pc, #28]	; (8040 <CONFIG_MAIN_STACK_SIZE+0x40>)
    8024:	f008 fccc 	bl	109c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    8028:	f00e f8b7 	bl	1619a <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    802c:	4905      	ldr	r1, [pc, #20]	; (8044 <CONFIG_MAIN_STACK_SIZE+0x44>)
    802e:	68f0      	ldr	r0, [r6, #12]
    8030:	f00b fe99 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8034:	2400      	movs	r4, #0
    8036:	e7e8      	b.n	800a <CONFIG_MAIN_STACK_SIZE+0xa>
    8038:	0006924c 	.word	0x0006924c
    803c:	0006939c 	.word	0x0006939c
    8040:	00069318 	.word	0x00069318
    8044:	0006a650 	.word	0x0006a650

00008048 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, const SubgraphAllocations* subgraph_allocations,
    int tensor_index, int subgraph_index) {
    8048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    804c:	b082      	sub	sp, #8
    804e:	4680      	mov	r8, r0
    8050:	460e      	mov	r6, r1
    8052:	4617      	mov	r7, r2
    8054:	461d      	mov	r5, r3
    8056:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return data_ - ReadScalar<soffset_t>(data_);
    805a:	4608      	mov	r0, r1
    805c:	f00b f940 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8060:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8062:	4620      	mov	r0, r4
    8064:	f00b f942 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8068:	2808      	cmp	r0, #8
    806a:	d93e      	bls.n	80ea <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa2>
    806c:	f104 0008 	add.w	r0, r4, #8
    8070:	f00b f93c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8074:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8076:	2800      	cmp	r0, #0
    8078:	d039      	beq.n	80ee <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa6>
    807a:	4620      	mov	r0, r4
    807c:	f00b f92a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8080:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8082:	6820      	ldr	r0, [r4, #0]
    8084:	f009 ff07 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8088:	4581      	cmp	r9, r0
    808a:	d232      	bcs.n	80f2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xaa>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    808c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    808e:	eb04 0489 	add.w	r4, r4, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8092:	4620      	mov	r0, r4
    8094:	f00b f91e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  TFLITE_DCHECK(subgraph != nullptr);
    8098:	42c4      	cmn	r4, r0
    809a:	d031      	beq.n	8100 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb8>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    809c:	f8d8 0004 	ldr.w	r0, [r8, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
    80a0:	6803      	ldr	r3, [r0, #0]
    80a2:	691b      	ldr	r3, [r3, #16]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
    80a4:	2204      	movs	r2, #4
    80a6:	2140      	movs	r1, #64	; 0x40
    80a8:	4798      	blx	r3
    80aa:	4604      	mov	r4, r0
  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
                                         subgraph_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
    80ac:	f8d8 3000 	ldr.w	r3, [r8]
    80b0:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
    80b4:	2301      	movs	r3, #1
    80b6:	9301      	str	r3, [sp, #4]
    80b8:	f8cd 9000 	str.w	r9, [sp]
    80bc:	462b      	mov	r3, r5
    80be:	4602      	mov	r2, r0
    80c0:	4631      	mov	r1, r6
    80c2:	4640      	mov	r0, r8
    80c4:	47d0      	blx	sl
    80c6:	b9e8      	cbnz	r0, 8104 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xbc>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
  }

  if (subgraph_allocations != nullptr) {
    80c8:	b15f      	cbz	r7, 80e2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data =
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
    80ca:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
    80ce:	687b      	ldr	r3, [r7, #4]
    80d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    80d4:	00ad      	lsls	r5, r5, #2
    80d6:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
    80d8:	6063      	str	r3, [r4, #4]
    // TfLiteEvalTensor structs must also be the source of truth for the
    // TfLiteTensor dims.
    tensor->dims =
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
    80da:	687b      	ldr	r3, [r7, #4]
    80dc:	441d      	add	r5, r3
    80de:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
    80e0:	60a3      	str	r3, [r4, #8]
  }
  return tensor;
}
    80e2:	4620      	mov	r0, r4
    80e4:	b002      	add	sp, #8
    80e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    80ea:	2000      	movs	r0, #0
    80ec:	e7c2      	b.n	8074 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    80ee:	2400      	movs	r4, #0
    80f0:	e7c7      	b.n	8082 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    80f2:	4b08      	ldr	r3, [pc, #32]	; (8114 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xcc>)
    80f4:	4a08      	ldr	r2, [pc, #32]	; (8118 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd0>)
    80f6:	f44f 7183 	mov.w	r1, #262	; 0x106
    80fa:	4808      	ldr	r0, [pc, #32]	; (811c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd4>)
    80fc:	f008 fc60 	bl	109c0 <__assert_func>
  TFLITE_DCHECK(subgraph != nullptr);
    8100:	f00e f84b 	bl	1619a <abort>
    TF_LITE_REPORT_ERROR(
    8104:	4906      	ldr	r1, [pc, #24]	; (8120 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xd8>)
    8106:	f8d8 000c 	ldr.w	r0, [r8, #12]
    810a:	f00b fe2c 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    810e:	2400      	movs	r4, #0
    8110:	e7e7      	b.n	80e2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x9a>
    8112:	bf00      	nop
    8114:	0006924c 	.word	0x0006924c
    8118:	0006939c 	.word	0x0006939c
    811c:	00069318 	.word	0x00069318
    8120:	0006a69c 	.word	0x0006a69c

00008124 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>:
    const Model* model, const int32_t** offline_planner_offsets) {
    8124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8128:	4607      	mov	r7, r0
    812a:	460c      	mov	r4, r1
    812c:	4690      	mov	r8, r2
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
    812e:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
    8130:	4608      	mov	r0, r1
    8132:	f00b f8d5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8136:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8138:	4628      	mov	r0, r5
    813a:	f00b f8d7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    813e:	2810      	cmp	r0, #16
    8140:	d904      	bls.n	814c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x28>
    8142:	f105 0010 	add.w	r0, r5, #16
    8146:	f00b f8d1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    814a:	e000      	b.n	814e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x2a>
    814c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    814e:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8150:	b140      	cbz	r0, 8164 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x40>
    8152:	4620      	mov	r0, r4
    8154:	f00b f8be 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8158:	4404      	add	r4, r0
  if (model->metadata()) {
    815a:	2c00      	cmp	r4, #0
    815c:	f000 80cc 	beq.w	82f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    8160:	2500      	movs	r5, #0
    8162:	e023      	b.n	81ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x88>
    8164:	2400      	movs	r4, #0
    8166:	e7f8      	b.n	815a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x36>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8168:	2000      	movs	r0, #0
    816a:	e02c      	b.n	81c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xa2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    816c:	2400      	movs	r4, #0
    816e:	e031      	b.n	81d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xb0>
    FLATBUFFERS_ASSERT(i < size());
    8170:	4b64      	ldr	r3, [pc, #400]	; (8304 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    8172:	4a65      	ldr	r2, [pc, #404]	; (8308 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e4>)
    8174:	f44f 7183 	mov.w	r1, #262	; 0x106
    8178:	4864      	ldr	r0, [pc, #400]	; (830c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    817a:	f008 fc21 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    817e:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8180:	eb04 0900 	add.w	r9, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8184:	2800      	cmp	r0, #0
    8186:	d046      	beq.n	8216 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf2>
    8188:	4648      	mov	r0, r9
    818a:	f00b f8a3 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    818e:	4481      	add	r9, r0
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8190:	f109 0904 	add.w	r9, r9, #4
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
    8194:	f8df a180 	ldr.w	sl, [pc, #384]	; 8318 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f4>
    8198:	4650      	mov	r0, sl
    819a:	f7f9 f99b 	bl	14d4 <strlen>
    819e:	4602      	mov	r2, r0
    81a0:	4651      	mov	r1, sl
    81a2:	4648      	mov	r0, r9
    81a4:	f00e f986 	bl	164b4 <strncmp>
    81a8:	b3c0      	cbz	r0, 821c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0xf8>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
    81aa:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    81ac:	4630      	mov	r0, r6
    81ae:	f00b f897 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81b2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    81b4:	4620      	mov	r0, r4
    81b6:	f00b f899 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    81ba:	2810      	cmp	r0, #16
    81bc:	d9d4      	bls.n	8168 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x44>
    81be:	f104 0010 	add.w	r0, r4, #16
    81c2:	f00b f893 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    81c6:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    81c8:	2800      	cmp	r0, #0
    81ca:	d0cf      	beq.n	816c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x48>
    81cc:	4620      	mov	r0, r4
    81ce:	f00b f881 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81d2:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    81d4:	6820      	ldr	r0, [r4, #0]
    81d6:	f009 fe5e 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    81da:	4285      	cmp	r5, r0
    81dc:	f080 808e 	bcs.w	82fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d8>
    81e0:	6820      	ldr	r0, [r4, #0]
    81e2:	f009 fe58 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    81e6:	4285      	cmp	r5, r0
    81e8:	d2c2      	bcs.n	8170 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x4c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    81ea:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    81ec:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    81f0:	4620      	mov	r0, r4
    81f2:	f00b f86f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    81f6:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    81f8:	4620      	mov	r0, r4
    81fa:	f00b f871 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    81fe:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8202:	4648      	mov	r0, r9
    8204:	f00b f872 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8208:	2804      	cmp	r0, #4
    820a:	d9b8      	bls.n	817e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5a>
    820c:	f109 0004 	add.w	r0, r9, #4
    8210:	f00b f86c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8214:	e7b4      	b.n	8180 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x5c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8216:	f04f 0900 	mov.w	r9, #0
    821a:	e7b9      	b.n	8190 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x6c>
    return data_ - ReadScalar<soffset_t>(data_);
    821c:	4630      	mov	r0, r6
    821e:	f00b f85f 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8222:	eba6 0900 	sub.w	r9, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8226:	4648      	mov	r0, r9
    8228:	f00b f860 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    822c:	280c      	cmp	r0, #12
    822e:	d94e      	bls.n	82ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1aa>
    8230:	f109 000c 	add.w	r0, r9, #12
    8234:	f00b f85a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8238:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    823c:	2800      	cmp	r0, #0
    823e:	d048      	beq.n	82d2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ae>
    8240:	4648      	mov	r0, r9
    8242:	f00b f847 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8246:	4481      	add	r9, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8248:	4620      	mov	r0, r4
    824a:	f00b f849 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    824e:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8252:	4650      	mov	r0, sl
    8254:	f00b f84a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8258:	2806      	cmp	r0, #6
    825a:	d93d      	bls.n	82d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b4>
    825c:	f10a 0006 	add.w	r0, sl, #6
    8260:	f00b f844 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8264:	b3d0      	cbz	r0, 82dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1b8>
    8266:	4420      	add	r0, r4
    8268:	f00b f834 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    826c:	4682      	mov	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    826e:	f8d9 0000 	ldr.w	r0, [r9]
    8272:	f009 fe10 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8276:	4550      	cmp	r0, sl
    8278:	d933      	bls.n	82e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1be>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    827a:	f109 0404 	add.w	r4, r9, #4
    p += i * sizeof(uoffset_t);
    827e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8282:	4620      	mov	r0, r4
    8284:	f00b f826 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8288:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    828a:	4620      	mov	r0, r4
    828c:	f00b f828 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8290:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8294:	4648      	mov	r0, r9
    8296:	f00b f829 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    829a:	2804      	cmp	r0, #4
    829c:	d928      	bls.n	82f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1cc>
    829e:	f109 0004 	add.w	r0, r9, #4
    82a2:	f00b f823 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    82a6:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82a8:	b320      	cbz	r0, 82f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1d0>
    82aa:	4620      	mov	r0, r4
    82ac:	f00b f812 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    82b0:	4420      	add	r0, r4
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
    82b2:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
    82b4:	3010      	adds	r0, #16
        *offline_planner_offsets =
    82b6:	f8c8 0000 	str.w	r0, [r8]
        if (tensor_count_ != nbr_tensors) {
    82ba:	687b      	ldr	r3, [r7, #4]
    82bc:	4293      	cmp	r3, r2
    82be:	f43f af74 	beq.w	81aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x86>
          TF_LITE_REPORT_ERROR(reporter_,
    82c2:	4913      	ldr	r1, [pc, #76]	; (8310 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1ec>)
    82c4:	68f8      	ldr	r0, [r7, #12]
    82c6:	f00b fd4e 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          return kTfLiteError;
    82ca:	2001      	movs	r0, #1
    82cc:	e017      	b.n	82fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82ce:	2000      	movs	r0, #0
    82d0:	e7b2      	b.n	8238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x114>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82d2:	f04f 0900 	mov.w	r9, #0
    82d6:	e7b7      	b.n	8248 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x124>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82d8:	2000      	movs	r0, #0
    82da:	e7c3      	b.n	8264 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x140>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    82dc:	f04f 0a00 	mov.w	sl, #0
    82e0:	e7c5      	b.n	826e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x14a>
    FLATBUFFERS_ASSERT(i < size());
    82e2:	4b08      	ldr	r3, [pc, #32]	; (8304 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e0>)
    82e4:	4a0b      	ldr	r2, [pc, #44]	; (8314 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1f0>)
    82e6:	f44f 7183 	mov.w	r1, #262	; 0x106
    82ea:	4808      	ldr	r0, [pc, #32]	; (830c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1e8>)
    82ec:	f008 fb68 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    82f0:	2000      	movs	r0, #0
    82f2:	e7d8      	b.n	82a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x182>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    82f4:	2000      	movs	r0, #0
    82f6:	e7dc      	b.n	82b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x18e>
  return kTfLiteOk;
    82f8:	2000      	movs	r0, #0
    82fa:	e000      	b.n	82fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi+0x1da>
    82fc:	2000      	movs	r0, #0
}
    82fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8302:	bf00      	nop
    8304:	0006924c 	.word	0x0006924c
    8308:	0006a6e0 	.word	0x0006a6e0
    830c:	00069318 	.word	0x00069318
    8310:	0006a7d8 	.word	0x0006a7d8
    8314:	0006a55c 	.word	0x0006a55c
    8318:	0006ab84 	.word	0x0006ab84

0000831c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
    831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(model != nullptr);
    8320:	b349      	cbz	r1, 8376 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5a>
    8322:	4604      	mov	r4, r0
    8324:	460d      	mov	r5, r1
  if (model_is_allocating_) {
    8326:	7c03      	ldrb	r3, [r0, #16]
    8328:	bb3b      	cbnz	r3, 837a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5e>
  model_is_allocating_ = true;
    832a:	2301      	movs	r3, #1
    832c:	7403      	strb	r3, [r0, #16]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    832e:	6840      	ldr	r0, [r0, #4]
      sizeof(MicroBuiltinDataAllocator), alignof(MicroBuiltinDataAllocator));
    8330:	6803      	ldr	r3, [r0, #0]
    8332:	68db      	ldr	r3, [r3, #12]
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
    8334:	2204      	movs	r2, #4
    8336:	2108      	movs	r1, #8
    8338:	4798      	blx	r3
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
    833a:	4603      	mov	r3, r0
    833c:	b118      	cbz	r0, 8346 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
    833e:	6862      	ldr	r2, [r4, #4]
      : memory_allocator_(memory_allocator) {}
    8340:	4926      	ldr	r1, [pc, #152]	; (83dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc0>)
    8342:	6001      	str	r1, [r0, #0]
    8344:	6042      	str	r2, [r0, #4]
  builtin_data_allocator_ =
    8346:	60a3      	str	r3, [r4, #8]
  if (InitScratchBufferData() != kTfLiteOk) {
    8348:	4620      	mov	r0, r4
    834a:	f00b faa3 	bl	13894 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
    834e:	2800      	cmp	r0, #0
    8350:	d142      	bne.n	83d8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xbc>
      memory_allocator_->AllocateFromTail(
    8352:	6867      	ldr	r7, [r4, #4]
          alignof(SubgraphAllocations)));
    8354:	683b      	ldr	r3, [r7, #0]
    8356:	f8d3 800c 	ldr.w	r8, [r3, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    835a:	4628      	mov	r0, r5
    835c:	f00a ffc0 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8360:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8362:	4630      	mov	r0, r6
    8364:	f00a ffc2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8368:	2808      	cmp	r0, #8
    836a:	d90c      	bls.n	8386 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
    836c:	f106 0008 	add.w	r0, r6, #8
    8370:	f00a ffbc 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8374:	e008      	b.n	8388 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
  TFLITE_DCHECK(model != nullptr);
    8376:	f00d ff10 	bl	1619a <abort>
    TF_LITE_REPORT_ERROR(error_reporter_,
    837a:	4919      	ldr	r1, [pc, #100]	; (83e0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc4>)
    837c:	68c0      	ldr	r0, [r0, #12]
    837e:	f00b fcf2 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
    8382:	2600      	movs	r6, #0
    8384:	e01d      	b.n	83c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    8386:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8388:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    838a:	b1e8      	cbz	r0, 83c8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xac>
    838c:	4630      	mov	r0, r6
    838e:	f00a ffa1 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8392:	4406      	add	r6, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8394:	6830      	ldr	r0, [r6, #0]
    8396:	f009 fd7e 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      memory_allocator_->AllocateFromTail(
    839a:	2204      	movs	r2, #4
    839c:	00c1      	lsls	r1, r0, #3
    839e:	4638      	mov	r0, r7
    83a0:	47c0      	blx	r8
  if (output == nullptr) {
    83a2:	4606      	mov	r6, r0
    83a4:	b190      	cbz	r0, 83cc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb0>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    83a6:	6823      	ldr	r3, [r4, #0]
    83a8:	69db      	ldr	r3, [r3, #28]
    83aa:	4602      	mov	r2, r0
    83ac:	4629      	mov	r1, r5
    83ae:	4620      	mov	r0, r4
    83b0:	4798      	blx	r3
    83b2:	b978      	cbnz	r0, 83d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
    83b4:	6823      	ldr	r3, [r4, #0]
    83b6:	699b      	ldr	r3, [r3, #24]
    83b8:	4632      	mov	r2, r6
    83ba:	4629      	mov	r1, r5
    83bc:	4620      	mov	r0, r4
    83be:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
    83c0:	b940      	cbnz	r0, 83d4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xb8>
}
    83c2:	4630      	mov	r0, r6
    83c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83c8:	2600      	movs	r6, #0
    83ca:	e7e3      	b.n	8394 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x78>
    MicroPrintf("Failed to allocate memory for model metadata.");
    83cc:	4805      	ldr	r0, [pc, #20]	; (83e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc8>)
    83ce:	f00a fefc 	bl	131ca <_Z11MicroPrintfPKcz>
    return nullptr;
    83d2:	e7f6      	b.n	83c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    83d4:	2600      	movs	r6, #0
    83d6:	e7f4      	b.n	83c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    return nullptr;
    83d8:	2600      	movs	r6, #0
    83da:	e7f2      	b.n	83c2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa6>
    83dc:	0006aba4 	.word	0x0006aba4
    83e0:	0006a824 	.word	0x0006a824
    83e4:	0006a87c 	.word	0x0006a87c

000083e8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    subgraph_allocations[subgraph_idx].tensors = tensors;
  }
  return kTfLiteOk;
}
TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
    83e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    83ec:	b083      	sub	sp, #12
    83ee:	4680      	mov	r8, r0
    83f0:	460e      	mov	r6, r1
    83f2:	4617      	mov	r7, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    83f4:	2500      	movs	r5, #0
    83f6:	e013      	b.n	8420 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    83f8:	2000      	movs	r0, #0
    83fa:	e01d      	b.n	8438 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x50>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    83fc:	2400      	movs	r4, #0
    83fe:	e022      	b.n	8446 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
    FLATBUFFERS_ASSERT(i < size());
    8400:	4b31      	ldr	r3, [pc, #196]	; (84c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe0>)
    8402:	4a32      	ldr	r2, [pc, #200]	; (84cc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe4>)
    8404:	f44f 7183 	mov.w	r1, #262	; 0x106
    8408:	4831      	ldr	r0, [pc, #196]	; (84d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xe8>)
    840a:	f008 fad9 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    840e:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8410:	b118      	cbz	r0, 841a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x32>
    8412:	4420      	add	r0, r4
    8414:	f00b f833 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8418:	e000      	b.n	841c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x34>
    841a:	2000      	movs	r0, #0
    auto* tensor = subgraph->tensors()->Get(i);
    if (tensor->is_variable()) {
    841c:	bb98      	cbnz	r0, 8486 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9e>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
    841e:	3501      	adds	r5, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8420:	4630      	mov	r0, r6
    8422:	f00a ff5d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8426:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8428:	4620      	mov	r0, r4
    842a:	f00a ff5f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    842e:	2804      	cmp	r0, #4
    8430:	d9e2      	bls.n	83f8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
    8432:	1d20      	adds	r0, r4, #4
    8434:	f00a ff5a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8438:	1834      	adds	r4, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    843a:	2800      	cmp	r0, #0
    843c:	d0de      	beq.n	83fc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x14>
    843e:	4620      	mov	r0, r4
    8440:	f00a ff48 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8444:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8446:	6820      	ldr	r0, [r4, #0]
    8448:	f009 fd25 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    844c:	4285      	cmp	r5, r0
    844e:	d236      	bcs.n	84be <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd6>
    8450:	6820      	ldr	r0, [r4, #0]
    8452:	f009 fd20 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8456:	4285      	cmp	r5, r0
    8458:	d2d2      	bcs.n	8400 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x18>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    845a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    845c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8460:	4620      	mov	r0, r4
    8462:	f00a ff37 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8466:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8468:	4620      	mov	r0, r4
    846a:	f00a ff39 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    846e:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8472:	4648      	mov	r0, r9
    8474:	f00a ff3a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8478:	280e      	cmp	r0, #14
    847a:	d9c8      	bls.n	840e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x26>
    847c:	f109 000e 	add.w	r0, r9, #14
    8480:	f00a ff34 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8484:	e7c4      	b.n	8410 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x28>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
    8486:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    848a:	0084      	lsls	r4, r0, #2
    848c:	a901      	add	r1, sp, #4
    848e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    8492:	f00a fefe 	bl	13292 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    8496:	4603      	mov	r3, r0
    8498:	b990      	cbnz	r0, 84c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
    849a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    849e:	6803      	ldr	r3, [r0, #0]
    84a0:	68db      	ldr	r3, [r3, #12]
    84a2:	2210      	movs	r2, #16
    84a4:	9901      	ldr	r1, [sp, #4]
    84a6:	4798      	blx	r3
      eval_tensors[i].data.data =
    84a8:	5138      	str	r0, [r7, r4]

      if (eval_tensors[i].data.data == nullptr) {
    84aa:	2800      	cmp	r0, #0
    84ac:	d1b7      	bne.n	841e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        TF_LITE_REPORT_ERROR(error_reporter_,
    84ae:	9a01      	ldr	r2, [sp, #4]
    84b0:	4908      	ldr	r1, [pc, #32]	; (84d4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xec>)
    84b2:	f8d8 000c 	ldr.w	r0, [r8, #12]
    84b6:	f00b fc56 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
    84ba:	2301      	movs	r3, #1
    84bc:	e000      	b.n	84c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd8>
      }
    }
  }
  return kTfLiteOk;
    84be:	2300      	movs	r3, #0
}
    84c0:	4618      	mov	r0, r3
    84c2:	b003      	add	sp, #12
    84c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    84c8:	0006924c 	.word	0x0006924c
    84cc:	00069534 	.word	0x00069534
    84d0:	00069318 	.word	0x00069318
    84d4:	0006a8ac 	.word	0x0006a8ac

000084d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
    84d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84dc:	b083      	sub	sp, #12
  TFLITE_DCHECK(eval_tensors != nullptr);
    84de:	b12b      	cbz	r3, 84ec <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x14>
    84e0:	4604      	mov	r4, r0
    84e2:	4688      	mov	r8, r1
    84e4:	4692      	mov	sl, r2
    84e6:	4699      	mov	r9, r3
  for (size_t i = 0; i < tensor_count_; ++i) {
    84e8:	2600      	movs	r6, #0
    84ea:	e04b      	b.n	8584 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xac>
  TFLITE_DCHECK(eval_tensors != nullptr);
    84ec:	f00d fe55 	bl	1619a <abort>
    return data_ - ReadScalar<soffset_t>(data_);
    84f0:	4640      	mov	r0, r8
    84f2:	f00a fef5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    84f6:	eba8 0b00 	sub.w	fp, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    84fa:	4658      	mov	r0, fp
    84fc:	f00a fef6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8500:	2804      	cmp	r0, #4
    8502:	d92e      	bls.n	8562 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8a>
    8504:	f10b 0004 	add.w	r0, fp, #4
    8508:	f00a fef0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    850c:	eb08 0b00 	add.w	fp, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8510:	b120      	cbz	r0, 851c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x44>
    8512:	4658      	mov	r0, fp
    8514:	f00a fede 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8518:	eb0b 0700 	add.w	r7, fp, r0
  uoffset_t size() const { return EndianScalar(length_); }
    851c:	6838      	ldr	r0, [r7, #0]
    851e:	f009 fcba 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8522:	4286      	cmp	r6, r0
    8524:	d21f      	bcs.n	8566 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x8e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8526:	3704      	adds	r7, #4
    p += i * sizeof(uoffset_t);
    8528:	eb07 0786 	add.w	r7, r7, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    852c:	4638      	mov	r0, r7
    852e:	f00a fed1 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8532:	4407      	add	r7, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8534:	4638      	mov	r0, r7
    8536:	f00a fed3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    853a:	eba7 0b00 	sub.w	fp, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    853e:	4658      	mov	r0, fp
    8540:	f00a fed4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8544:	280e      	cmp	r0, #14
    8546:	d915      	bls.n	8574 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x9c>
    8548:	f10b 000e 	add.w	r0, fp, #14
    854c:	f00a fece 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8550:	b118      	cbz	r0, 855a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x82>
    8552:	4438      	add	r0, r7
    8554:	f00a ff93 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    8558:	9001      	str	r0, [sp, #4]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    855a:	9b01      	ldr	r3, [sp, #4]
    855c:	b963      	cbnz	r3, 8578 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa0>
    855e:	2301      	movs	r3, #1
    8560:	e02c      	b.n	85bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8562:	2000      	movs	r0, #0
    8564:	e7d2      	b.n	850c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x34>
    FLATBUFFERS_ASSERT(i < size());
    8566:	4bb6      	ldr	r3, [pc, #728]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8568:	4ab6      	ldr	r2, [pc, #728]	; (8844 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x36c>)
    856a:	f44f 7183 	mov.w	r1, #262	; 0x106
    856e:	48b6      	ldr	r0, [pc, #728]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8570:	f008 fa26 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8574:	2000      	movs	r0, #0
    8576:	e7eb      	b.n	8550 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x78>
    8578:	2300      	movs	r3, #0
    857a:	e01f      	b.n	85bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xe4>
      current->offline_offset = kOnlinePlannedBuffer;
    857c:	f04f 33ff 	mov.w	r3, #4294967295
    8580:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
    8582:	3601      	adds	r6, #1
    8584:	6863      	ldr	r3, [r4, #4]
    8586:	42b3      	cmp	r3, r6
    8588:	d920      	bls.n	85cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xf4>
    AllocationInfo* current = &info_[i];
    858a:	6825      	ldr	r5, [r4, #0]
    858c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    8590:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    current->output_ptr = &(eval_tensors[i].data.data);
    8594:	009f      	lsls	r7, r3, #2
    8596:	eb09 0083 	add.w	r0, r9, r3, lsl #2
    859a:	6068      	str	r0, [r5, #4]
    TF_LITE_ENSURE_STATUS(
    859c:	4629      	mov	r1, r5
    859e:	f00a fe78 	bl	13292 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
    85a2:	9001      	str	r0, [sp, #4]
    85a4:	2800      	cmp	r0, #0
    85a6:	f040 8146 	bne.w	8836 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35e>
    current->first_created = -1;
    85aa:	f04f 33ff 	mov.w	r3, #4294967295
    85ae:	60ab      	str	r3, [r5, #8]
    current->last_used = -1;
    85b0:	60eb      	str	r3, [r5, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
    85b2:	f859 7007 	ldr.w	r7, [r9, r7]
    85b6:	2f00      	cmp	r7, #0
    85b8:	d09a      	beq.n	84f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x18>
    85ba:	2300      	movs	r3, #0
    85bc:	752b      	strb	r3, [r5, #20]
    if (offline_offsets) {
    85be:	f1ba 0f00 	cmp.w	sl, #0
    85c2:	d0db      	beq.n	857c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xa4>
      current->offline_offset = offline_offsets[i];
    85c4:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
    85c8:	612b      	str	r3, [r5, #16]
    85ca:	e7da      	b.n	8582 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0xaa>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
    85cc:	4640      	mov	r0, r8
    85ce:	f00a ff37 	bl	13440 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    85d2:	4607      	mov	r7, r0
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    85d4:	f04f 0900 	mov.w	r9, #0
    85d8:	e01f      	b.n	861a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x142>
    85da:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    85dc:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    85e0:	b350      	cbz	r0, 8638 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x160>
    85e2:	4628      	mov	r0, r5
    85e4:	f00a fe76 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    85e8:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    85ea:	6828      	ldr	r0, [r5, #0]
    85ec:	f009 fc53 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    85f0:	4581      	cmp	r9, r0
    85f2:	d22a      	bcs.n	864a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x172>
    85f4:	6828      	ldr	r0, [r5, #0]
    85f6:	f009 fc4e 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    85fa:	4581      	cmp	r9, r0
    85fc:	d21e      	bcs.n	863c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x164>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    85fe:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8600:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    8604:	f00a fe6b 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    8608:	6823      	ldr	r3, [r4, #0]
    860a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    860e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->first_created = 0;
    8612:	2300      	movs	r3, #0
    8614:	6083      	str	r3, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
    8616:	f109 0901 	add.w	r9, r9, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    861a:	4646      	mov	r6, r8
    return data_ - ReadScalar<soffset_t>(data_);
    861c:	4640      	mov	r0, r8
    861e:	f00a fe5f 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8622:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8626:	4628      	mov	r0, r5
    8628:	f00a fe60 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    862c:	2806      	cmp	r0, #6
    862e:	d9d4      	bls.n	85da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x102>
    8630:	1da8      	adds	r0, r5, #6
    8632:	f00a fe5b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8636:	e7d1      	b.n	85dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x104>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8638:	2500      	movs	r5, #0
    863a:	e7d6      	b.n	85ea <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x112>
    FLATBUFFERS_ASSERT(i < size());
    863c:	4b80      	ldr	r3, [pc, #512]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    863e:	4a83      	ldr	r2, [pc, #524]	; (884c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8640:	f44f 7183 	mov.w	r1, #262	; 0x106
    8644:	4880      	ldr	r0, [pc, #512]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    8646:	f008 f9bb 	bl	109c0 <__assert_func>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    864a:	f04f 0800 	mov.w	r8, #0
    864e:	e01e      	b.n	868e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1b6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8650:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8652:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8654:	b348      	cbz	r0, 86aa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d2>
    8656:	4628      	mov	r0, r5
    8658:	f00a fe3c 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    865c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    865e:	6828      	ldr	r0, [r5, #0]
    8660:	f009 fc19 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8664:	4580      	cmp	r8, r0
    8666:	d229      	bcs.n	86bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e4>
    8668:	6828      	ldr	r0, [r5, #0]
    866a:	f009 fc14 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    866e:	4580      	cmp	r8, r0
    8670:	d21d      	bcs.n	86ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1d6>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8672:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8674:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
    8678:	f00a fe31 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
    AllocationInfo* current = &info_[tensor_index];
    867c:	6823      	ldr	r3, [r4, #0]
    867e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8682:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    current->last_used = operators_size - 1;
    8686:	1e7b      	subs	r3, r7, #1
    8688:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
    868a:	f108 0801 	add.w	r8, r8, #1
    return data_ - ReadScalar<soffset_t>(data_);
    868e:	4630      	mov	r0, r6
    8690:	f00a fe26 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8694:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8696:	4628      	mov	r0, r5
    8698:	f00a fe28 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    869c:	2808      	cmp	r0, #8
    869e:	d9d7      	bls.n	8650 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x178>
    86a0:	f105 0008 	add.w	r0, r5, #8
    86a4:	f00a fe22 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    86a8:	e7d3      	b.n	8652 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86aa:	2500      	movs	r5, #0
    86ac:	e7d7      	b.n	865e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x186>
    FLATBUFFERS_ASSERT(i < size());
    86ae:	4b64      	ldr	r3, [pc, #400]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    86b0:	4a66      	ldr	r2, [pc, #408]	; (884c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    86b2:	f44f 7183 	mov.w	r1, #262	; 0x106
    86b6:	4864      	ldr	r0, [pc, #400]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    86b8:	f008 f982 	bl	109c0 <__assert_func>
  for (int i = (operators_size - 1); i >= 0; --i) {
    86bc:	3f01      	subs	r7, #1
    86be:	e08d      	b.n	87dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x304>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86c0:	2000      	movs	r0, #0
    86c2:	e09b      	b.n	87fc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x324>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86c4:	f04f 0900 	mov.w	r9, #0
    86c8:	e0a1      	b.n	880e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x336>
    FLATBUFFERS_ASSERT(i < size());
    86ca:	4b5d      	ldr	r3, [pc, #372]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    86cc:	4a60      	ldr	r2, [pc, #384]	; (8850 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x378>)
    86ce:	f44f 7183 	mov.w	r1, #262	; 0x106
    86d2:	485d      	ldr	r0, [pc, #372]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    86d4:	f008 f974 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    86d8:	2000      	movs	r0, #0
    86da:	e019      	b.n	8710 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x238>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    86dc:	2500      	movs	r5, #0
    86de:	e01f      	b.n	8720 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x248>
    FLATBUFFERS_ASSERT(i < size());
    86e0:	4b57      	ldr	r3, [pc, #348]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    86e2:	4a5a      	ldr	r2, [pc, #360]	; (884c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    86e4:	f44f 7183 	mov.w	r1, #262	; 0x106
    86e8:	4857      	ldr	r0, [pc, #348]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    86ea:	f008 f969 	bl	109c0 <__assert_func>
        current->last_used = i;
    86ee:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    86f0:	f10a 0a01 	add.w	sl, sl, #1
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
    86f4:	46c8      	mov	r8, r9
    return data_ - ReadScalar<soffset_t>(data_);
    86f6:	4648      	mov	r0, r9
    86f8:	f00a fdf2 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    86fc:	eba9 0500 	sub.w	r5, r9, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8700:	4628      	mov	r0, r5
    8702:	f00a fdf3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8706:	2806      	cmp	r0, #6
    8708:	d9e6      	bls.n	86d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x200>
    870a:	1da8      	adds	r0, r5, #6
    870c:	f00a fdee 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8710:	eb09 0500 	add.w	r5, r9, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8714:	2800      	cmp	r0, #0
    8716:	d0e1      	beq.n	86dc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x204>
    8718:	4628      	mov	r0, r5
    871a:	f00a fddb 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    871e:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8720:	6828      	ldr	r0, [r5, #0]
    8722:	f009 fbb8 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8726:	4582      	cmp	sl, r0
    8728:	d215      	bcs.n	8756 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x27e>
    872a:	6828      	ldr	r0, [r5, #0]
    872c:	f009 fbb3 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8730:	4582      	cmp	sl, r0
    8732:	d2d5      	bcs.n	86e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x208>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8734:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8736:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
    873a:	f00a fdd0 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    873e:	6823      	ldr	r3, [r4, #0]
    8740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8744:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if (((current->last_used == -1) || (current->last_used < i))) {
    8748:	68c3      	ldr	r3, [r0, #12]
    874a:	f1b3 3fff 	cmp.w	r3, #4294967295
    874e:	d0ce      	beq.n	86ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    8750:	42bb      	cmp	r3, r7
    8752:	dacd      	bge.n	86f0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x218>
    8754:	e7cb      	b.n	86ee <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x216>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8756:	f04f 0900 	mov.w	r9, #0
    875a:	e00d      	b.n	8778 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2a0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    875c:	2000      	movs	r0, #0
    875e:	e019      	b.n	8794 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2bc>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8760:	2500      	movs	r5, #0
    8762:	e01f      	b.n	87a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x2cc>
    FLATBUFFERS_ASSERT(i < size());
    8764:	4b36      	ldr	r3, [pc, #216]	; (8840 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x368>)
    8766:	4a39      	ldr	r2, [pc, #228]	; (884c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x374>)
    8768:	f44f 7183 	mov.w	r1, #262	; 0x106
    876c:	4836      	ldr	r0, [pc, #216]	; (8848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x370>)
    876e:	f008 f927 	bl	109c0 <__assert_func>
        current->first_created = i;
    8772:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
    8774:	f109 0901 	add.w	r9, r9, #1
    return data_ - ReadScalar<soffset_t>(data_);
    8778:	4640      	mov	r0, r8
    877a:	f00a fdb1 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    877e:	eba8 0500 	sub.w	r5, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8782:	4628      	mov	r0, r5
    8784:	f00a fdb2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8788:	2808      	cmp	r0, #8
    878a:	d9e7      	bls.n	875c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x284>
    878c:	f105 0008 	add.w	r0, r5, #8
    8790:	f00a fdac 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8794:	eb08 0500 	add.w	r5, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8798:	2800      	cmp	r0, #0
    879a:	d0e1      	beq.n	8760 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x288>
    879c:	4628      	mov	r0, r5
    879e:	f00a fd99 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    87a2:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    87a4:	6828      	ldr	r0, [r5, #0]
    87a6:	f009 fb76 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    87aa:	4581      	cmp	r9, r0
    87ac:	d215      	bcs.n	87da <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x302>
    87ae:	6828      	ldr	r0, [r5, #0]
    87b0:	f009 fb71 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    87b4:	4581      	cmp	r9, r0
    87b6:	d2d5      	bcs.n	8764 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x28c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    87b8:	3504      	adds	r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    87ba:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
    87be:	f00a fd8e 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
      AllocationInfo* current = &info_[tensor_index];
    87c2:	6823      	ldr	r3, [r4, #0]
    87c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    87c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
    87cc:	6883      	ldr	r3, [r0, #8]
    87ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    87d2:	d0ce      	beq.n	8772 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
    87d4:	42bb      	cmp	r3, r7
    87d6:	ddcd      	ble.n	8774 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29c>
    87d8:	e7cb      	b.n	8772 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x29a>
  for (int i = (operators_size - 1); i >= 0; --i) {
    87da:	3f01      	subs	r7, #1
    87dc:	2f00      	cmp	r7, #0
    87de:	db28      	blt.n	8832 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x35a>
    return data_ - ReadScalar<soffset_t>(data_);
    87e0:	4630      	mov	r0, r6
    87e2:	f00a fd7d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    87e6:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    87e8:	4628      	mov	r0, r5
    87ea:	f00a fd7f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    87ee:	280a      	cmp	r0, #10
    87f0:	f67f af66 	bls.w	86c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1e8>
    87f4:	f105 000a 	add.w	r0, r5, #10
    87f8:	f00a fd78 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    87fc:	eb06 0900 	add.w	r9, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8800:	2800      	cmp	r0, #0
    8802:	f43f af5f 	beq.w	86c4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1ec>
    8806:	4648      	mov	r0, r9
    8808:	f00a fd64 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    880c:	4481      	add	r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
    880e:	f8d9 0000 	ldr.w	r0, [r9]
    8812:	f009 fb40 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8816:	4287      	cmp	r7, r0
    8818:	f4bf af57 	bcs.w	86ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x1f2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    881c:	f109 0904 	add.w	r9, r9, #4
    p += i * sizeof(uoffset_t);
    8820:	eb09 0987 	add.w	r9, r9, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8824:	4648      	mov	r0, r9
    8826:	f00a fd55 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    882a:	4481      	add	r9, r0
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
    882c:	f04f 0a00 	mov.w	sl, #0
    8830:	e760      	b.n	86f4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor+0x21c>
  return kTfLiteOk;
    8832:	2300      	movs	r3, #0
    8834:	9301      	str	r3, [sp, #4]
}
    8836:	9801      	ldr	r0, [sp, #4]
    8838:	b003      	add	sp, #12
    883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    883e:	bf00      	nop
    8840:	0006924c 	.word	0x0006924c
    8844:	00069534 	.word	0x00069534
    8848:	00069318 	.word	0x00069318
    884c:	00069258 	.word	0x00069258
    8850:	0006a084 	.word	0x0006a084

00008854 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
    8854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8858:	b083      	sub	sp, #12
    885a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    885e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  TFLITE_DCHECK(result != nullptr);
    8860:	b31d      	cbz	r5, 88aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x56>
    8862:	4607      	mov	r7, r0
    8864:	4688      	mov	r8, r1
    8866:	4614      	mov	r4, r2
    8868:	469a      	mov	sl, r3
  *result = {};
    886a:	2240      	movs	r2, #64	; 0x40
    886c:	2100      	movs	r1, #0
    886e:	4628      	mov	r0, r5
    8870:	f00d fcb9 	bl	161e6 <memset>
    return data_ - ReadScalar<soffset_t>(data_);
    8874:	4620      	mov	r0, r4
    8876:	f00a fd33 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    887a:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    887c:	4630      	mov	r0, r6
    887e:	f00a fd35 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8882:	2806      	cmp	r0, #6
    8884:	d913      	bls.n	88ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5a>
    8886:	1db0      	adds	r0, r6, #6
    8888:	f00a fd30 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    888c:	b188      	cbz	r0, 88b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5e>
    888e:	4420      	add	r0, r4
    8890:	f00a fd32 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8894:	464a      	mov	r2, r9
    8896:	4629      	mov	r1, r5
    8898:	b2c0      	uxtb	r0, r0
    889a:	f001 f891 	bl	99c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    889e:	4606      	mov	r6, r0
    88a0:	b148      	cbz	r0, 88b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x62>
}
    88a2:	4630      	mov	r0, r6
    88a4:	b003      	add	sp, #12
    88a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(result != nullptr);
    88aa:	f00d fc76 	bl	1619a <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88ae:	2000      	movs	r0, #0
    88b0:	e7ec      	b.n	888c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x38>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    88b2:	2000      	movs	r0, #0
    88b4:	e7ee      	b.n	8894 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x40>
    return data_ - ReadScalar<soffset_t>(data_);
    88b6:	4620      	mov	r0, r4
    88b8:	f00a fd12 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    88bc:	eba4 0b00 	sub.w	fp, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    88c0:	4658      	mov	r0, fp
    88c2:	f00a fd13 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    88c6:	280e      	cmp	r0, #14
    88c8:	d93f      	bls.n	894a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf6>
    88ca:	f10b 000e 	add.w	r0, fp, #14
    88ce:	f00a fd0d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    88d2:	b118      	cbz	r0, 88dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x88>
    88d4:	4420      	add	r0, r4
    88d6:	f00a fdd2 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    88da:	4606      	mov	r6, r0
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
    88dc:	3e00      	subs	r6, #0
    88de:	bf18      	it	ne
    88e0:	2601      	movne	r6, #1
  result->is_variable = flatbuffer_tensor.is_variable();
    88e2:	f885 602d 	strb.w	r6, [r5, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    88e6:	4651      	mov	r1, sl
    88e8:	4620      	mov	r0, r4
    88ea:	f7ff faed 	bl	7ec8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    88ee:	6068      	str	r0, [r5, #4]
  if (result->data.data == nullptr) {
    88f0:	b368      	cbz	r0, 894e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xfa>
    result->allocation_type = kTfLiteMmapRo;
    88f2:	2301      	movs	r3, #1
    88f4:	752b      	strb	r3, [r5, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
    88f6:	464b      	mov	r3, r9
    88f8:	aa01      	add	r2, sp, #4
    88fa:	f105 0118 	add.w	r1, r5, #24
    88fe:	4620      	mov	r0, r4
    8900:	f7fd fe6a 	bl	65d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
    8904:	4606      	mov	r6, r0
    8906:	2800      	cmp	r0, #0
    8908:	d1cb      	bne.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    890a:	4620      	mov	r0, r4
    890c:	f00a fce8 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8910:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8914:	4650      	mov	r0, sl
    8916:	f00a fce9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    891a:	2804      	cmp	r0, #4
    891c:	d91a      	bls.n	8954 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
    891e:	f10a 0004 	add.w	r0, sl, #4
    8922:	f00a fce3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8926:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    892a:	b1a8      	cbz	r0, 8958 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    892c:	4650      	mov	r0, sl
    892e:	f00a fcd1 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8932:	eb0a 0200 	add.w	r2, sl, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8936:	b18a      	cbz	r2, 895c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x108>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8938:	f105 0308 	add.w	r3, r5, #8
    893c:	4649      	mov	r1, r9
    893e:	4638      	mov	r0, r7
    8940:	f00a ffdb 	bl	138fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8944:	b160      	cbz	r0, 8960 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10c>
    8946:	4606      	mov	r6, r0
    8948:	e7ab      	b.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    894a:	2000      	movs	r0, #0
    894c:	e7c1      	b.n	88d2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    result->allocation_type = kTfLiteArenaRw;
    894e:	2302      	movs	r3, #2
    8950:	752b      	strb	r3, [r5, #20]
    8952:	e7d0      	b.n	88f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    8954:	2000      	movs	r0, #0
    8956:	e7e6      	b.n	8926 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8958:	2200      	movs	r2, #0
    895a:	e7ec      	b.n	8936 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    895c:	4bb6      	ldr	r3, [pc, #728]	; (8c38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e4>)
    895e:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8960:	4620      	mov	r0, r4
    8962:	f00a fcbd 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8966:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    896a:	4650      	mov	r0, sl
    896c:	f00a fcbe 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8970:	280c      	cmp	r0, #12
    8972:	d91a      	bls.n	89aa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x156>
    8974:	f10a 000c 	add.w	r0, sl, #12
    8978:	f00a fcb8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    897c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    897e:	b1b0      	cbz	r0, 89ae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15a>
    8980:	4620      	mov	r0, r4
    8982:	f00a fca7 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8986:	4404      	add	r4, r0
      src_quantization->zero_point() &&
    8988:	2c00      	cmp	r4, #0
    898a:	d08a      	beq.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
    898c:	46a2      	mov	sl, r4
    return data_ - ReadScalar<soffset_t>(data_);
    898e:	4620      	mov	r0, r4
    8990:	f00a fca6 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8994:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8996:	4620      	mov	r0, r4
    8998:	f00a fca8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    899c:	2808      	cmp	r0, #8
    899e:	d908      	bls.n	89b2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x15e>
    89a0:	f104 0008 	add.w	r0, r4, #8
    89a4:	f00a fca2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    89a8:	e004      	b.n	89b4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x160>
    89aa:	2000      	movs	r0, #0
    89ac:	e7e6      	b.n	897c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x128>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89ae:	2400      	movs	r4, #0
    89b0:	e7ea      	b.n	8988 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89b2:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    89b4:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89b8:	2800      	cmp	r0, #0
    89ba:	d060      	beq.n	8a7e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22a>
    89bc:	4620      	mov	r0, r4
    89be:	f00a fc89 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    89c2:	4404      	add	r4, r0
  if (src_quantization && src_quantization->scale() &&
    89c4:	2c00      	cmp	r4, #0
    89c6:	f43f af6c 	beq.w	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    89ca:	6820      	ldr	r0, [r4, #0]
    89cc:	f009 fa63 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    89d0:	2800      	cmp	r0, #0
    89d2:	f43f af66 	beq.w	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return data_ - ReadScalar<soffset_t>(data_);
    89d6:	4650      	mov	r0, sl
    89d8:	f00a fc82 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    89dc:	ebaa 0b00 	sub.w	fp, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    89e0:	4658      	mov	r0, fp
    89e2:	f00a fc83 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    89e6:	280a      	cmp	r0, #10
    89e8:	d94b      	bls.n	8a82 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
    89ea:	f10b 000a 	add.w	r0, fp, #10
    89ee:	f00a fc7d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    89f2:	eb0a 0b00 	add.w	fp, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    89f6:	2800      	cmp	r0, #0
    89f8:	d045      	beq.n	8a86 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
    89fa:	4658      	mov	r0, fp
    89fc:	f00a fc6a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a00:	4458      	add	r0, fp
      (src_quantization->scale()->size() > 0) &&
    8a02:	2800      	cmp	r0, #0
    8a04:	f43f af4d 	beq.w	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
  uoffset_t size() const { return EndianScalar(length_); }
    8a08:	6800      	ldr	r0, [r0, #0]
    8a0a:	f009 fa44 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      src_quantization->zero_point() &&
    8a0e:	2800      	cmp	r0, #0
    8a10:	f43f af47 	beq.w	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    8a14:	6820      	ldr	r0, [r4, #0]
    8a16:	f009 fa3e 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8a1a:	b3b0      	cbz	r0, 8a8a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x236>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8a1c:	6860      	ldr	r0, [r4, #4]
    8a1e:	f00a fd34 	bl	1348a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
    result->params.scale = src_quantization->scale()->Get(0);
    8a22:	60e8      	str	r0, [r5, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    8a24:	4650      	mov	r0, sl
    8a26:	f00a fc5b 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a2a:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a2e:	4620      	mov	r0, r4
    8a30:	f00a fc5c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a34:	280a      	cmp	r0, #10
    8a36:	d92f      	bls.n	8a98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
    8a38:	f104 000a 	add.w	r0, r4, #10
    8a3c:	f00a fc56 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8a40:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a44:	b350      	cbz	r0, 8a9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>
    8a46:	4620      	mov	r0, r4
    8a48:	f00a fc44 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8a4c:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8a4e:	6820      	ldr	r0, [r4, #0]
    8a50:	f009 fa21 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8a54:	b320      	cbz	r0, 8aa0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8a56:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    8a5a:	f00a fd15 	bl	13488 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
    result->params.zero_point =
    8a5e:	6128      	str	r0, [r5, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    8a60:	4650      	mov	r0, sl
    8a62:	f00a fc3d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8a66:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8a6a:	4620      	mov	r0, r4
    8a6c:	f00a fc3e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a70:	2808      	cmp	r0, #8
    8a72:	d91c      	bls.n	8aae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25a>
    8a74:	f104 0008 	add.w	r0, r4, #8
    8a78:	f00a fc38 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8a7c:	e018      	b.n	8ab0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x25c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a7e:	2400      	movs	r4, #0
    8a80:	e7a0      	b.n	89c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a82:	2000      	movs	r0, #0
    8a84:	e7b5      	b.n	89f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a86:	2000      	movs	r0, #0
    8a88:	e7bb      	b.n	8a02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ae>
    FLATBUFFERS_ASSERT(i < size());
    8a8a:	4b6c      	ldr	r3, [pc, #432]	; (8c3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8a8c:	4a6c      	ldr	r2, [pc, #432]	; (8c40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ec>)
    8a8e:	f44f 7183 	mov.w	r1, #262	; 0x106
    8a92:	486c      	ldr	r0, [pc, #432]	; (8c44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8a94:	f007 ff94 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8a98:	2000      	movs	r0, #0
    8a9a:	e7d1      	b.n	8a40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8a9c:	2400      	movs	r4, #0
    8a9e:	e7d6      	b.n	8a4e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fa>
    FLATBUFFERS_ASSERT(i < size());
    8aa0:	4b66      	ldr	r3, [pc, #408]	; (8c3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8aa2:	4a69      	ldr	r2, [pc, #420]	; (8c48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8aa4:	f44f 7183 	mov.w	r1, #262	; 0x106
    8aa8:	4866      	ldr	r0, [pc, #408]	; (8c44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8aaa:	f007 ff89 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8aae:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8ab0:	eb0a 0400 	add.w	r4, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ab4:	b390      	cbz	r0, 8b1c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2c8>
    8ab6:	4620      	mov	r0, r4
    8ab8:	f00a fc0c 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8abc:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8abe:	6820      	ldr	r0, [r4, #0]
    8ac0:	f009 f9e9 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8ac4:	4604      	mov	r4, r0
            ? reinterpret_cast<TfLiteAffineQuantization*>(
    8ac6:	f1b8 0f00 	cmp.w	r8, #0
    8aca:	d029      	beq.n	8b20 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2cc>
                                          alignof(TfLiteAffineQuantization)))
    8acc:	683b      	ldr	r3, [r7, #0]
    8ace:	691b      	ldr	r3, [r3, #16]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
    8ad0:	2204      	movs	r2, #4
    8ad2:	210c      	movs	r1, #12
    8ad4:	4638      	mov	r0, r7
    8ad6:	4798      	blx	r3
    8ad8:	4683      	mov	fp, r0
    if (quantization == nullptr) {
    8ada:	f1bb 0f00 	cmp.w	fp, #0
    8ade:	d027      	beq.n	8b30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2dc>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8ae0:	f1b8 0f00 	cmp.w	r8, #0
    8ae4:	d02a      	beq.n	8b3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2e8>
                  alignof(TfLiteIntArray)))
    8ae6:	683b      	ldr	r3, [r7, #0]
    8ae8:	691e      	ldr	r6, [r3, #16]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8aea:	4620      	mov	r0, r4
    8aec:	f00b f897 	bl	13c1e <TfLiteIntArrayGetSizeInBytes>
    8af0:	4601      	mov	r1, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
    8af2:	2204      	movs	r2, #4
    8af4:	4638      	mov	r0, r7
    8af6:	47b0      	blx	r6
    quantization->zero_point =
    8af8:	f8cb 0004 	str.w	r0, [fp, #4]
    if (quantization->zero_point == nullptr) {
    8afc:	b340      	cbz	r0, 8b50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2fc>
    return data_ - ReadScalar<soffset_t>(data_);
    8afe:	4650      	mov	r0, sl
    8b00:	f00a fbee 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8b04:	ebaa 0600 	sub.w	r6, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8b08:	4630      	mov	r0, r6
    8b0a:	f00a fbef 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b0e:	2808      	cmp	r0, #8
    8b10:	d924      	bls.n	8b5c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x308>
    8b12:	f106 0008 	add.w	r0, r6, #8
    8b16:	f00a fbe9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8b1a:	e020      	b.n	8b5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x30a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b1c:	2400      	movs	r4, #0
    8b1e:	e7ce      	b.n	8abe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x26a>
                      alignof(TfLiteAffineQuantization)));
    8b20:	683b      	ldr	r3, [r7, #0]
    8b22:	68db      	ldr	r3, [r3, #12]
                  allocator->AllocateFromTail(
    8b24:	2204      	movs	r2, #4
    8b26:	210c      	movs	r1, #12
    8b28:	4638      	mov	r0, r7
    8b2a:	4798      	blx	r3
    8b2c:	4683      	mov	fp, r0
    8b2e:	e7d4      	b.n	8ada <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      TF_LITE_REPORT_ERROR(error_reporter,
    8b30:	4946      	ldr	r1, [pc, #280]	; (8c4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f8>)
    8b32:	4648      	mov	r0, r9
    8b34:	f00b f917 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8b38:	2601      	movs	r6, #1
    8b3a:	e6b2      	b.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
                  alignof(TfLiteIntArray)));
    8b3c:	683b      	ldr	r3, [r7, #0]
    8b3e:	68de      	ldr	r6, [r3, #12]
                  TfLiteIntArrayGetSizeInBytes(channels),
    8b40:	4620      	mov	r0, r4
    8b42:	f00b f86c 	bl	13c1e <TfLiteIntArrayGetSizeInBytes>
    8b46:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
    8b48:	2204      	movs	r2, #4
    8b4a:	4638      	mov	r0, r7
    8b4c:	47b0      	blx	r6
    8b4e:	e7d3      	b.n	8af8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a4>
      TF_LITE_REPORT_ERROR(error_reporter,
    8b50:	493f      	ldr	r1, [pc, #252]	; (8c50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3fc>)
    8b52:	4648      	mov	r0, r9
    8b54:	f00b f907 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8b58:	2601      	movs	r6, #1
    8b5a:	e6a2      	b.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b5c:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8b5e:	eb0a 0600 	add.w	r6, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b62:	b1b0      	cbz	r0, 8b92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x33e>
    8b64:	4630      	mov	r0, r6
    8b66:	f00a fbb5 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8b6a:	1832      	adds	r2, r6, r0
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8b6c:	465b      	mov	r3, fp
    8b6e:	4649      	mov	r1, r9
    8b70:	4638      	mov	r0, r7
    8b72:	f00a fed4 	bl	1391e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8b76:	4606      	mov	r6, r0
    8b78:	2800      	cmp	r0, #0
    8b7a:	f47f ae92 	bne.w	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    quantization->zero_point->size = channels;
    8b7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8b82:	601c      	str	r4, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
    8b84:	f8db 3004 	ldr.w	r3, [fp, #4]
    8b88:	f103 0904 	add.w	r9, r3, #4
    for (int i = 0; i < channels; i++) {
    8b8c:	f04f 0800 	mov.w	r8, #0
    8b90:	e019      	b.n	8bc6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x372>
    8b92:	2200      	movs	r2, #0
    8b94:	e7ea      	b.n	8b6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x318>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8b96:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8b98:	eb0a 0700 	add.w	r7, sl, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8b9c:	b320      	cbz	r0, 8be8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x394>
    8b9e:	4638      	mov	r0, r7
    8ba0:	f00a fb98 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ba4:	4407      	add	r7, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8ba6:	6838      	ldr	r0, [r7, #0]
    8ba8:	f009 f975 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8bac:	4580      	cmp	r8, r0
    8bae:	d21d      	bcs.n	8bec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x398>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8bb0:	3704      	adds	r7, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    8bb2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    8bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
    8bba:	f00a fc65 	bl	13488 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
    8bbe:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
    for (int i = 0; i < channels; i++) {
    8bc2:	f108 0801 	add.w	r8, r8, #1
    8bc6:	45a0      	cmp	r8, r4
    8bc8:	da17      	bge.n	8bfa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3a6>
    return data_ - ReadScalar<soffset_t>(data_);
    8bca:	4650      	mov	r0, sl
    8bcc:	f00a fb88 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8bd0:	ebaa 0700 	sub.w	r7, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8bd4:	4638      	mov	r0, r7
    8bd6:	f00a fb89 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8bda:	280a      	cmp	r0, #10
    8bdc:	d9db      	bls.n	8b96 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x342>
    8bde:	f107 000a 	add.w	r0, r7, #10
    8be2:	f00a fb83 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8be6:	e7d7      	b.n	8b98 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x344>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8be8:	2700      	movs	r7, #0
    8bea:	e7dc      	b.n	8ba6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x352>
    FLATBUFFERS_ASSERT(i < size());
    8bec:	4b13      	ldr	r3, [pc, #76]	; (8c3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3e8>)
    8bee:	4a16      	ldr	r2, [pc, #88]	; (8c48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f4>)
    8bf0:	f44f 7183 	mov.w	r1, #262	; 0x106
    8bf4:	4813      	ldr	r0, [pc, #76]	; (8c44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3f0>)
    8bf6:	f007 fee3 	bl	109c0 <__assert_func>
    return data_ - ReadScalar<soffset_t>(data_);
    8bfa:	4650      	mov	r0, sl
    8bfc:	f00a fb70 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c00:	ebaa 0400 	sub.w	r4, sl, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c04:	4620      	mov	r0, r4
    8c06:	f00a fb71 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c0a:	2810      	cmp	r0, #16
    8c0c:	d90f      	bls.n	8c2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3da>
    8c0e:	f104 0010 	add.w	r0, r4, #16
    8c12:	f00a fb6b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8c16:	b160      	cbz	r0, 8c32 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3de>
    8c18:	4450      	add	r0, sl
    8c1a:	f00a fb61 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    quantization->quantized_dimension = src_quantization->quantized_dimension();
    8c1e:	f8cb 0008 	str.w	r0, [fp, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
    8c22:	2301      	movs	r3, #1
    8c24:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    8c28:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    8c2c:	e639      	b.n	88a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c2e:	2000      	movs	r0, #0
    8c30:	e7f1      	b.n	8c16 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3c2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8c32:	2000      	movs	r0, #0
    8c34:	e7f3      	b.n	8c1e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x3ca>
    8c36:	bf00      	nop
    8c38:	0006ab80 	.word	0x0006ab80
    8c3c:	0006924c 	.word	0x0006924c
    8c40:	0006a8dc 	.word	0x0006a8dc
    8c44:	00069318 	.word	0x00069318
    8c48:	00069628 	.word	0x00069628
    8c4c:	0006a9a0 	.word	0x0006a9a0
    8c50:	0006a9d0 	.word	0x0006a9d0

00008c54 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
}

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, TfLiteTensor* tensor, int tensor_index,
    int subgraph_idx, bool allocate_temp) {
    8c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c58:	b082      	sub	sp, #8
    8c5a:	4607      	mov	r7, r0
    8c5c:	460e      	mov	r6, r1
    8c5e:	4690      	mov	r8, r2
    8c60:	469a      	mov	sl, r3
    8c62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
    8c64:	f8d0 9004 	ldr.w	r9, [r0, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8c68:	4608      	mov	r0, r1
    8c6a:	f00a fb39 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8c6e:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8c70:	4628      	mov	r0, r5
    8c72:	f00a fb3b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8c76:	2808      	cmp	r0, #8
    8c78:	d941      	bls.n	8cfe <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xaa>
    8c7a:	f105 0008 	add.w	r0, r5, #8
    8c7e:	f00a fb35 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8c82:	1835      	adds	r5, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8c84:	b3e8      	cbz	r0, 8d02 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xae>
    8c86:	4628      	mov	r0, r5
    8c88:	f00a fb24 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8c8c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8c8e:	6828      	ldr	r0, [r5, #0]
    8c90:	f009 f901 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8c94:	4284      	cmp	r4, r0
    8c96:	d236      	bcs.n	8d06 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xb2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8c98:	3504      	adds	r5, #4
    p += i * sizeof(uoffset_t);
    8c9a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8c9e:	4620      	mov	r0, r4
    8ca0:	f00a fb18 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ca4:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8ca6:	4620      	mov	r0, r4
    8ca8:	f00a fb1a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8cac:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cae:	4628      	mov	r0, r5
    8cb0:	f00a fb1c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cb4:	2804      	cmp	r0, #4
    8cb6:	d92d      	bls.n	8d14 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc0>
    8cb8:	1d28      	adds	r0, r5, #4
    8cba:	f00a fb17 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8cbe:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8cc0:	b350      	cbz	r0, 8d18 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc4>
    8cc2:	4620      	mov	r0, r4
    8cc4:	f00a fb06 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8cc8:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8cca:	6820      	ldr	r0, [r4, #0]
    8ccc:	f009 f8e3 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8cd0:	4582      	cmp	sl, r0
    8cd2:	d223      	bcs.n	8d1c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xc8>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8cd4:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8cd6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8cda:	4620      	mov	r0, r4
    8cdc:	f00a fafa 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ce0:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8ce2:	4630      	mov	r0, r6
    8ce4:	f00a fafc 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8ce8:	1a35      	subs	r5, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8cea:	4628      	mov	r0, r5
    8cec:	f00a fafe 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8cf0:	280c      	cmp	r0, #12
    8cf2:	d91a      	bls.n	8d2a <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd6>
    8cf4:	f105 000c 	add.w	r0, r5, #12
    8cf8:	f00a faf8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8cfc:	e016      	b.n	8d2c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xd8>
    8cfe:	2000      	movs	r0, #0
    8d00:	e7bf      	b.n	8c82 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x2e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d02:	2500      	movs	r5, #0
    8d04:	e7c3      	b.n	8c8e <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    8d06:	4b14      	ldr	r3, [pc, #80]	; (8d58 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8d08:	4a14      	ldr	r2, [pc, #80]	; (8d5c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x108>)
    8d0a:	f44f 7183 	mov.w	r1, #262	; 0x106
    8d0e:	4814      	ldr	r0, [pc, #80]	; (8d60 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8d10:	f007 fe56 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d14:	2000      	movs	r0, #0
    8d16:	e7d2      	b.n	8cbe <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d18:	2400      	movs	r4, #0
    8d1a:	e7d6      	b.n	8cca <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x76>
    FLATBUFFERS_ASSERT(i < size());
    8d1c:	4b0e      	ldr	r3, [pc, #56]	; (8d58 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x104>)
    8d1e:	4a11      	ldr	r2, [pc, #68]	; (8d64 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x110>)
    8d20:	f44f 7183 	mov.w	r1, #262	; 0x106
    8d24:	480e      	ldr	r0, [pc, #56]	; (8d60 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x10c>)
    8d26:	f007 fe4b 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d2a:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8d2c:	4406      	add	r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8d2e:	b180      	cbz	r0, 8d52 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xfe>
    8d30:	4630      	mov	r0, r6
    8d32:	f00a facf 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8d36:	1833      	adds	r3, r6, r0
    8d38:	f8cd 8004 	str.w	r8, [sp, #4]
    8d3c:	68fa      	ldr	r2, [r7, #12]
    8d3e:	9200      	str	r2, [sp, #0]
    8d40:	4622      	mov	r2, r4
    8d42:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    8d46:	4648      	mov	r0, r9
    8d48:	f7ff fd84 	bl	8854 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
      memory_allocator_, allocate_temp,
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
      model->buffers(), error_reporter_, tensor);
}
    8d4c:	b002      	add	sp, #8
    8d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d52:	2300      	movs	r3, #0
    8d54:	e7f0      	b.n	8d38 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0xe4>
    8d56:	bf00      	nop
    8d58:	0006924c 	.word	0x0006924c
    8d5c:	0006939c 	.word	0x0006939c
    8d60:	00069318 	.word	0x00069318
    8d64:	00069534 	.word	0x00069534

00008d68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
    8d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d6c:	4680      	mov	r8, r0
    8d6e:	460c      	mov	r4, r1
    8d70:	4691      	mov	r9, r2
    8d72:	461f      	mov	r7, r3
    8d74:	9d08      	ldr	r5, [sp, #32]
  *result = {};
    8d76:	2300      	movs	r3, #0
    8d78:	602b      	str	r3, [r5, #0]
    8d7a:	606b      	str	r3, [r5, #4]
    8d7c:	60ab      	str	r3, [r5, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    8d7e:	4608      	mov	r0, r1
    8d80:	f00a faae 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8d84:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8d86:	4630      	mov	r0, r6
    8d88:	f00a fab0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8d8c:	2806      	cmp	r0, #6
    8d8e:	d911      	bls.n	8db4 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x4c>
    8d90:	1db0      	adds	r0, r6, #6
    8d92:	f00a faab 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8d96:	b178      	cbz	r0, 8db8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x50>
    8d98:	4420      	add	r0, r4
    8d9a:	f00a faad 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
    8d9e:	463a      	mov	r2, r7
    8da0:	f105 0108 	add.w	r1, r5, #8
    8da4:	b2c0      	uxtb	r0, r0
    8da6:	f000 fe0b 	bl	99c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
    8daa:	4606      	mov	r6, r0
    8dac:	b130      	cbz	r0, 8dbc <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x54>
}
    8dae:	4630      	mov	r0, r6
    8db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8db4:	2000      	movs	r0, #0
    8db6:	e7ee      	b.n	8d96 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x2e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    8db8:	2000      	movs	r0, #0
    8dba:	e7f0      	b.n	8d9e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x36>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
    8dbc:	4649      	mov	r1, r9
    8dbe:	4620      	mov	r0, r4
    8dc0:	f7ff f882 	bl	7ec8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    8dc4:	6028      	str	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    8dc6:	4620      	mov	r0, r4
    8dc8:	f00a fa8a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8dcc:	eba4 0900 	sub.w	r9, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8dd0:	4648      	mov	r0, r9
    8dd2:	f00a fa8b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dd6:	2804      	cmp	r0, #4
    8dd8:	d911      	bls.n	8dfe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x96>
    8dda:	f109 0004 	add.w	r0, r9, #4
    8dde:	f00a fa85 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8de2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8de4:	b168      	cbz	r0, 8e02 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9a>
    8de6:	4620      	mov	r0, r4
    8de8:	f00a fa74 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8dec:	1822      	adds	r2, r4, r0
  if (flatbuffer_tensor.shape() == nullptr) {
    8dee:	b152      	cbz	r2, 8e06 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x9e>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
    8df0:	1d2b      	adds	r3, r5, #4
    8df2:	4639      	mov	r1, r7
    8df4:	4640      	mov	r0, r8
    8df6:	f00a fd80 	bl	138fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
    8dfa:	4606      	mov	r6, r0
    8dfc:	e7d7      	b.n	8dae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8dfe:	2000      	movs	r0, #0
    8e00:	e7ef      	b.n	8de2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e02:	2200      	movs	r2, #0
    8e04:	e7f3      	b.n	8dee <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x86>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
    8e06:	4b01      	ldr	r3, [pc, #4]	; (8e0c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0xa4>)
    8e08:	606b      	str	r3, [r5, #4]
    8e0a:	e7d0      	b.n	8dae <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x46>
    8e0c:	0006ab80 	.word	0x0006ab80

00008e10 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
    8e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e14:	b087      	sub	sp, #28
    8e16:	9104      	str	r1, [sp, #16]
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8e18:	9205      	str	r2, [sp, #20]
    8e1a:	b192      	cbz	r2, 8e42 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x32>
    8e1c:	4683      	mov	fp, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8e1e:	2300      	movs	r3, #0
    8e20:	9303      	str	r3, [sp, #12]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
    8e22:	9c04      	ldr	r4, [sp, #16]
    8e24:	46a0      	mov	r8, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8e26:	4620      	mov	r0, r4
    8e28:	f00a fa5a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e2c:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e2e:	4620      	mov	r0, r4
    8e30:	f00a fa5c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e34:	2808      	cmp	r0, #8
    8e36:	d906      	bls.n	8e46 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x36>
    8e38:	f104 0008 	add.w	r0, r4, #8
    8e3c:	f00a fa56 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8e40:	e002      	b.n	8e48 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x38>
  TFLITE_DCHECK(subgraph_allocations != nullptr);
    8e42:	f00d f9aa 	bl	1619a <abort>
    8e46:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8e48:	9b04      	ldr	r3, [sp, #16]
    8e4a:	181c      	adds	r4, r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d03d      	beq.n	8ecc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xbc>
    8e50:	4620      	mov	r0, r4
    8e52:	f00a fa3f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8e56:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8e58:	6820      	ldr	r0, [r4, #0]
    8e5a:	f009 f81c 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8e5e:	9d03      	ldr	r5, [sp, #12]
    8e60:	4285      	cmp	r5, r0
    8e62:	f080 80b3 	bcs.w	8fcc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1bc>
    8e66:	6820      	ldr	r0, [r4, #0]
    8e68:	f009 f815 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8e6c:	4285      	cmp	r5, r0
    8e6e:	d22f      	bcs.n	8ed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc0>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8e70:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8e72:	9b03      	ldr	r3, [sp, #12]
    8e74:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8e78:	4620      	mov	r0, r4
    8e7a:	f00a fa2b 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    TFLITE_DCHECK(subgraph != nullptr);
    8e7e:	1824      	adds	r4, r4, r0
    8e80:	d02d      	beq.n	8ede <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xce>
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
    8e82:	4627      	mov	r7, r4
    return data_ - ReadScalar<soffset_t>(data_);
    8e84:	4620      	mov	r0, r4
    8e86:	f00a fa2b 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8e8a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8e8c:	4628      	mov	r0, r5
    8e8e:	f00a fa2d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8e92:	2804      	cmp	r0, #4
    8e94:	d925      	bls.n	8ee2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd2>
    8e96:	1d28      	adds	r0, r5, #4
    8e98:	f00a fa28 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8e9c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8e9e:	b310      	cbz	r0, 8ee6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xd6>
    8ea0:	4620      	mov	r0, r4
    8ea2:	f00a fa17 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8ea6:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8ea8:	6820      	ldr	r0, [r4, #0]
    8eaa:	f008 fff4 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    8eae:	4682      	mov	sl, r0
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8eb0:	f8db 0004 	ldr.w	r0, [fp, #4]
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
    8eb4:	6803      	ldr	r3, [r0, #0]
    8eb6:	68db      	ldr	r3, [r3, #12]
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
    8eb8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8ebc:	0089      	lsls	r1, r1, #2
    8ebe:	460c      	mov	r4, r1
    8ec0:	2204      	movs	r2, #4
    8ec2:	4798      	blx	r3
    if (tensors == nullptr) {
    8ec4:	9002      	str	r0, [sp, #8]
    8ec6:	b180      	cbz	r0, 8eea <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xda>
    for (size_t i = 0; i < alloc_count; ++i) {
    8ec8:	2500      	movs	r5, #0
    8eca:	e038      	b.n	8f3e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ecc:	2400      	movs	r4, #0
    8ece:	e7c3      	b.n	8e58 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x48>
    FLATBUFFERS_ASSERT(i < size());
    8ed0:	4b3f      	ldr	r3, [pc, #252]	; (8fd0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8ed2:	4a40      	ldr	r2, [pc, #256]	; (8fd4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c4>)
    8ed4:	f44f 7183 	mov.w	r1, #262	; 0x106
    8ed8:	483f      	ldr	r0, [pc, #252]	; (8fd8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8eda:	f007 fd71 	bl	109c0 <__assert_func>
    TFLITE_DCHECK(subgraph != nullptr);
    8ede:	f00d f95c 	bl	1619a <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8ee2:	2000      	movs	r0, #0
    8ee4:	e7da      	b.n	8e9c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7de      	b.n	8ea8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x98>
      TF_LITE_REPORT_ERROR(
    8eea:	4622      	mov	r2, r4
    8eec:	493b      	ldr	r1, [pc, #236]	; (8fdc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1cc>)
    8eee:	f8db 000c 	ldr.w	r0, [fp, #12]
    8ef2:	f00a ff38 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    8ef6:	2001      	movs	r0, #1
    8ef8:	e05c      	b.n	8fb4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8efa:	2000      	movs	r0, #0
    8efc:	e02f      	b.n	8f5e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x14e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8efe:	2400      	movs	r4, #0
    8f00:	e034      	b.n	8f6c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15c>
    FLATBUFFERS_ASSERT(i < size());
    8f02:	4b33      	ldr	r3, [pc, #204]	; (8fd0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c0>)
    8f04:	4a36      	ldr	r2, [pc, #216]	; (8fe0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d0>)
    8f06:	f44f 7183 	mov.w	r1, #262	; 0x106
    8f0a:	4833      	ldr	r0, [pc, #204]	; (8fd8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1c8>)
    8f0c:	f007 fd58 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f10:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    8f12:	eb08 0600 	add.w	r6, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f16:	2800      	cmp	r0, #0
    8f18:	d043      	beq.n	8fa2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x192>
    8f1a:	4630      	mov	r0, r6
    8f1c:	f00a f9da 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f20:	1832      	adds	r2, r6, r0
          error_reporter_, &tensors[i]);
    8f22:	eb05 0345 	add.w	r3, r5, r5, lsl #1
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8f26:	9902      	ldr	r1, [sp, #8]
    8f28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8f2c:	9300      	str	r3, [sp, #0]
    8f2e:	f8db 300c 	ldr.w	r3, [fp, #12]
    8f32:	4621      	mov	r1, r4
    8f34:	4648      	mov	r0, r9
    8f36:	f7ff ff17 	bl	8d68 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
    8f3a:	bba0      	cbnz	r0, 8fa6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x196>
    for (size_t i = 0; i < alloc_count; ++i) {
    8f3c:	3501      	adds	r5, #1
    8f3e:	4555      	cmp	r5, sl
    8f40:	d23b      	bcs.n	8fba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1aa>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
    8f42:	f8db 9004 	ldr.w	r9, [fp, #4]
    return data_ - ReadScalar<soffset_t>(data_);
    8f46:	4638      	mov	r0, r7
    8f48:	f00a f9ca 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f4c:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f4e:	4620      	mov	r0, r4
    8f50:	f00a f9cc 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f54:	2804      	cmp	r0, #4
    8f56:	d9d0      	bls.n	8efa <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xea>
    8f58:	1d20      	adds	r0, r4, #4
    8f5a:	f00a f9c7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    8f5e:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8f60:	2800      	cmp	r0, #0
    8f62:	d0cc      	beq.n	8efe <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xee>
    8f64:	4620      	mov	r0, r4
    8f66:	f00a f9b5 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f6a:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    8f6c:	6820      	ldr	r0, [r4, #0]
    8f6e:	f008 ff92 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    8f72:	4285      	cmp	r5, r0
    8f74:	d2c5      	bcs.n	8f02 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    8f76:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    8f78:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    8f7c:	4620      	mov	r0, r4
    8f7e:	f00a f9a9 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    8f82:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    8f84:	4640      	mov	r0, r8
    8f86:	f00a f9ab 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    8f8a:	eba8 0600 	sub.w	r6, r8, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    8f8e:	4630      	mov	r0, r6
    8f90:	f00a f9ac 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    8f94:	280c      	cmp	r0, #12
    8f96:	d9bb      	bls.n	8f10 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x100>
    8f98:	f106 000c 	add.w	r0, r6, #12
    8f9c:	f00a f9a6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    8fa0:	e7b7      	b.n	8f12 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x102>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    8fa2:	2200      	movs	r2, #0
    8fa4:	e7bd      	b.n	8f22 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
    8fa6:	462a      	mov	r2, r5
    8fa8:	490e      	ldr	r1, [pc, #56]	; (8fe4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1d4>)
    8faa:	f8db 000c 	ldr.w	r0, [fp, #12]
    8fae:	f00a feda 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    8fb2:	2001      	movs	r0, #1
}
    8fb4:	b007      	add	sp, #28
    8fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    subgraph_allocations[subgraph_idx].tensors = tensors;
    8fba:	9b05      	ldr	r3, [sp, #20]
    8fbc:	9a03      	ldr	r2, [sp, #12]
    8fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8fc2:	9902      	ldr	r1, [sp, #8]
    8fc4:	6059      	str	r1, [r3, #4]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
    8fc6:	1c53      	adds	r3, r2, #1
    8fc8:	9303      	str	r3, [sp, #12]
    8fca:	e72a      	b.n	8e22 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x12>
  return kTfLiteOk;
    8fcc:	2000      	movs	r0, #0
    8fce:	e7f1      	b.n	8fb4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a4>
    8fd0:	0006924c 	.word	0x0006924c
    8fd4:	0006939c 	.word	0x0006939c
    8fd8:	00069318 	.word	0x00069318
    8fdc:	0006aa00 	.word	0x0006aa00
    8fe0:	00069534 	.word	0x00069534
    8fe4:	0006aa48 	.word	0x0006aa48

00008fe8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
  return error_reporter_;
}

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
    8fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fec:	b093      	sub	sp, #76	; 0x4c
    8fee:	4606      	mov	r6, r0
    8ff0:	460f      	mov	r7, r1
    8ff2:	4690      	mov	r8, r2
    8ff4:	4699      	mov	r9, r3
    8ff6:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
    return data_ - ReadScalar<soffset_t>(data_);
    8ffa:	4608      	mov	r0, r1
    8ffc:	f00a f970 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9000:	1a3c      	subs	r4, r7, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9002:	4620      	mov	r0, r4
    9004:	f00a f972 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9008:	2808      	cmp	r0, #8
    900a:	d948      	bls.n	909e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xb6>
    900c:	f104 0008 	add.w	r0, r4, #8
    9010:	f00a f96c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9014:	183c      	adds	r4, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9016:	2800      	cmp	r0, #0
    9018:	d043      	beq.n	90a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xba>
    901a:	4620      	mov	r0, r4
    901c:	f00a f95a 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9020:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
    9022:	6820      	ldr	r0, [r4, #0]
    9024:	f008 ff37 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9028:	4582      	cmp	sl, r0
    902a:	d23c      	bcs.n	90a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xbe>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    902c:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
    902e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
    9032:	4620      	mov	r0, r4
    9034:	f00a f94e 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9038:	4404      	add	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
    903a:	4620      	mov	r0, r4
    903c:	f00a f950 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9040:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9042:	4628      	mov	r0, r5
    9044:	f00a f952 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9048:	2804      	cmp	r0, #4
    904a:	d933      	bls.n	90b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xcc>
    904c:	1d28      	adds	r0, r5, #4
    904e:	f00a f94d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9052:	1825      	adds	r5, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9054:	b380      	cbz	r0, 90b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd0>
    9056:	4628      	mov	r0, r5
    9058:	f00a f93c 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    905c:	4405      	add	r5, r0
  uoffset_t size() const { return EndianScalar(length_); }
    905e:	6828      	ldr	r0, [r5, #0]
    9060:	f008 ff19 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
    9064:	6973      	ldr	r3, [r6, #20]
    9066:	18c5      	adds	r5, r0, r3
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
    9068:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
    906c:	ea4f 0aca 	mov.w	sl, sl, lsl #3

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
    9070:	6870      	ldr	r0, [r6, #4]
    9072:	6803      	ldr	r3, [r0, #0]
    9074:	691b      	ldr	r3, [r3, #16]
    9076:	2204      	movs	r2, #4
    9078:	4651      	mov	r1, sl
    907a:	4798      	blx	r3
  if (allocation_info == nullptr) {
    907c:	4683      	mov	fp, r0
    907e:	b1e8      	cbz	r0, 90bc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xd4>
    return data_ - ReadScalar<soffset_t>(data_);
    9080:	4620      	mov	r0, r4
    9082:	f00a f92d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9086:	eba4 0a00 	sub.w	sl, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    908a:	4650      	mov	r0, sl
    908c:	f00a f92e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9090:	2804      	cmp	r0, #4
    9092:	d91a      	bls.n	90ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe2>
    9094:	f10a 0004 	add.w	r0, sl, #4
    9098:	f00a f928 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    909c:	e016      	b.n	90cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xe4>
    909e:	2000      	movs	r0, #0
    90a0:	e7b8      	b.n	9014 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90a2:	2400      	movs	r4, #0
    90a4:	e7bd      	b.n	9022 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3a>
    FLATBUFFERS_ASSERT(i < size());
    90a6:	4b55      	ldr	r3, [pc, #340]	; (91fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x214>)
    90a8:	4a55      	ldr	r2, [pc, #340]	; (9200 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x218>)
    90aa:	f44f 7183 	mov.w	r1, #262	; 0x106
    90ae:	4855      	ldr	r0, [pc, #340]	; (9204 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x21c>)
    90b0:	f007 fc86 	bl	109c0 <__assert_func>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90b4:	2000      	movs	r0, #0
    90b6:	e7cc      	b.n	9052 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90b8:	2500      	movs	r5, #0
    90ba:	e7d0      	b.n	905e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x76>
    TF_LITE_REPORT_ERROR(
    90bc:	4652      	mov	r2, sl
    90be:	4952      	ldr	r1, [pc, #328]	; (9208 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x220>)
    90c0:	68f0      	ldr	r0, [r6, #12]
    90c2:	f00a fe50 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
    90c6:	2701      	movs	r7, #1
    90c8:	e01b      	b.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    90ca:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    90cc:	eb04 0a00 	add.w	sl, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    90d0:	b1d8      	cbz	r0, 910a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x122>
    90d2:	4650      	mov	r0, sl
    90d4:	f00a f8fe 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    90d8:	4482      	add	sl, r0
  uoffset_t size() const { return EndianScalar(length_); }
    90da:	f8da 0000 	ldr.w	r0, [sl]
    90de:	f008 feda 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
                                scratch_buffer_request_count_, error_reporter_);
    90e2:	6972      	ldr	r2, [r6, #20]
    90e4:	68f3      	ldr	r3, [r6, #12]
        reporter_(reporter) {}
    90e6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    90ea:	900f      	str	r0, [sp, #60]	; 0x3c
    90ec:	9210      	str	r2, [sp, #64]	; 0x40
    90ee:	9311      	str	r3, [sp, #68]	; 0x44

  const int32_t* offline_planner_offsets = nullptr;
    90f0:	2300      	movs	r3, #0
    90f2:	930d      	str	r3, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(
    90f4:	aa0d      	add	r2, sp, #52	; 0x34
    90f6:	4639      	mov	r1, r7
    90f8:	a80e      	add	r0, sp, #56	; 0x38
    90fa:	f7ff f813 	bl	8124 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKi>
    90fe:	4607      	mov	r7, r0
    9100:	b130      	cbz	r0, 9110 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x128>
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}
    9102:	4638      	mov	r0, r7
    9104:	b013      	add	sp, #76	; 0x4c
    9106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    910a:	f04f 0a00 	mov.w	sl, #0
    910e:	e7e4      	b.n	90da <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xf2>
  TF_LITE_ENSURE_STATUS(
    9110:	4643      	mov	r3, r8
    9112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9114:	4621      	mov	r1, r4
    9116:	a80e      	add	r0, sp, #56	; 0x38
    9118:	f7ff f9de 	bl	84d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKiP16TfLiteEvalTensor>
    911c:	4607      	mov	r7, r0
    911e:	2800      	cmp	r0, #0
    9120:	d1ef      	bne.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      GetScratchBufferRequests();
    9122:	4630      	mov	r0, r6
    9124:	f00a fbc0 	bl	138a8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
    9128:	4601      	mov	r1, r0
  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
    912a:	464a      	mov	r2, r9
    912c:	a80e      	add	r0, sp, #56	; 0x38
    912e:	f00a faca 	bl	136c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
    9132:	4607      	mov	r7, r0
    9134:	2800      	cmp	r0, #0
    9136:	d1e4      	bne.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9138:	2110      	movs	r1, #16
    913a:	6870      	ldr	r0, [r6, #4]
    913c:	f00a f82a 	bl	13194 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    9140:	4604      	mov	r4, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
    9142:	6870      	ldr	r0, [r6, #4]
    9144:	6803      	ldr	r3, [r0, #0]
    9146:	691b      	ldr	r3, [r3, #16]
    9148:	2210      	movs	r2, #16
    914a:	4621      	mov	r1, r4
    914c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    914e:	4601      	mov	r1, r0
    9150:	2800      	cmp	r0, #0
    9152:	d036      	beq.n	91c2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1da>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    9154:	4622      	mov	r2, r4
    9156:	a802      	add	r0, sp, #8
    9158:	f000 f882 	bl	9260 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
    915c:	462b      	mov	r3, r5
    915e:	465a      	mov	r2, fp
    9160:	a902      	add	r1, sp, #8
    9162:	68f0      	ldr	r0, [r6, #12]
    9164:	f00a fb36 	bl	137d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
    9168:	4607      	mov	r7, r0
    916a:	2800      	cmp	r0, #0
    916c:	d141      	bne.n	91f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  memory_allocator_->ResetTempAllocations();
    916e:	6870      	ldr	r0, [r6, #4]
    9170:	6803      	ldr	r3, [r0, #0]
    9172:	695b      	ldr	r3, [r3, #20]
    9174:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
    9176:	2110      	movs	r1, #16
    9178:	6870      	ldr	r0, [r6, #4]
    917a:	f00a f80b 	bl	13194 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
    917e:	4604      	mov	r4, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
    9180:	a802      	add	r0, sp, #8
    9182:	f00a fd29 	bl	13bd8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    9186:	42a0      	cmp	r0, r4
    9188:	d828      	bhi.n	91dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1f4>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
    918a:	68f4      	ldr	r4, [r6, #12]
    918c:	6870      	ldr	r0, [r6, #4]
    918e:	f009 ffff 	bl	13190 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
    9192:	4602      	mov	r2, r0
    9194:	9500      	str	r5, [sp, #0]
    9196:	465b      	mov	r3, fp
    9198:	a902      	add	r1, sp, #8
    919a:	4620      	mov	r0, r4
    919c:	f00a fab7 	bl	1370e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
    91a0:	4607      	mov	r7, r0
    91a2:	bb30      	cbnz	r0, 91f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  head_usage = planner.GetMaximumMemorySize();
    91a4:	a802      	add	r0, sp, #8
    91a6:	f00a fd17 	bl	13bd8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
    91aa:	69b3      	ldr	r3, [r6, #24]
    91ac:	4283      	cmp	r3, r0
    91ae:	d200      	bcs.n	91b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ca>
    max_head_buffer_usage_ = head_usage;
    91b0:	61b0      	str	r0, [r6, #24]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
    91b2:	6870      	ldr	r0, [r6, #4]
    91b4:	6803      	ldr	r3, [r0, #0]
    91b6:	689b      	ldr	r3, [r3, #8]
    91b8:	2210      	movs	r2, #16
    91ba:	69b1      	ldr	r1, [r6, #24]
    91bc:	4798      	blx	r3
    91be:	4607      	mov	r7, r0
    91c0:	e017      	b.n	91f2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20a>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
    91c2:	68f0      	ldr	r0, [r6, #12]
    91c4:	4b11      	ldr	r3, [pc, #68]	; (920c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x224>)
    91c6:	9301      	str	r3, [sp, #4]
    91c8:	f240 33d2 	movw	r3, #978	; 0x3d2
    91cc:	9300      	str	r3, [sp, #0]
    91ce:	4b10      	ldr	r3, [pc, #64]	; (9210 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x228>)
    91d0:	4a10      	ldr	r2, [pc, #64]	; (9214 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x22c>)
    91d2:	4601      	mov	r1, r0
    91d4:	f00a fdd6 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    91d8:	2701      	movs	r7, #1
    91da:	e792      	b.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    TF_LITE_REPORT_ERROR(
    91dc:	68f5      	ldr	r5, [r6, #12]
    91de:	a802      	add	r0, sp, #8
    91e0:	f00a fcfa 	bl	13bd8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
    91e4:	4602      	mov	r2, r0
    91e6:	4623      	mov	r3, r4
    91e8:	490b      	ldr	r1, [pc, #44]	; (9218 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x230>)
    91ea:	4628      	mov	r0, r5
    91ec:	f00a fdbb 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    91f0:	2701      	movs	r7, #1
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
    91f2:	a802      	add	r0, sp, #8
    91f4:	f00a fb9d 	bl	13932 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
    91f8:	e783      	b.n	9102 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x11a>
    91fa:	bf00      	nop
    91fc:	0006924c 	.word	0x0006924c
    9200:	0006939c 	.word	0x0006939c
    9204:	00069318 	.word	0x00069318
    9208:	0006aa68 	.word	0x0006aa68
    920c:	0006ab14 	.word	0x0006ab14
    9210:	0006aaac 	.word	0x0006aaac
    9214:	0006aafc 	.word	0x0006aafc
    9218:	0006ab30 	.word	0x0006ab30

0000921c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
    921c:	b538      	push	{r3, r4, r5, lr}
    921e:	4604      	mov	r4, r0
    9220:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
    9222:	68a5      	ldr	r5, [r4, #8]
    9224:	6861      	ldr	r1, [r4, #4]
    9226:	428d      	cmp	r5, r1
    9228:	da12      	bge.n	9250 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
                         max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
    922a:	68e1      	ldr	r1, [r4, #12]
    922c:	0128      	lsls	r0, r5, #4
    922e:	eb01 1505 	add.w	r5, r1, r5, lsl #4
  current->size = size;
    9232:	500a      	str	r2, [r1, r0]
  current->first_time_used = first_time_used;
    9234:	60ab      	str	r3, [r5, #8]
  current->last_time_used = last_time_used;
    9236:	9b04      	ldr	r3, [sp, #16]
    9238:	60eb      	str	r3, [r5, #12]
  current->offline_offset = kOnlinePlannedBuffer;
    923a:	f04f 33ff 	mov.w	r3, #4294967295
    923e:	606b      	str	r3, [r5, #4]
  ++buffer_count_;
    9240:	68a3      	ldr	r3, [r4, #8]
    9242:	3301      	adds	r3, #1
    9244:	60a3      	str	r3, [r4, #8]
  need_to_calculate_offsets_ = true;
    9246:	2301      	movs	r3, #1
    9248:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
    924c:	2000      	movs	r0, #0
}
    924e:	bd38      	pop	{r3, r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
    9250:	460a      	mov	r2, r1
    9252:	4902      	ldr	r1, [pc, #8]	; (925c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
    9254:	f00a fd87 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9258:	2001      	movs	r0, #1
    925a:	e7f8      	b.n	924e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x32>
    925c:	0006abf0 	.word	0x0006abf0

00009260 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
    9260:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
    9262:	4c0f      	ldr	r4, [pc, #60]	; (92a0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
    9264:	6004      	str	r4, [r0, #0]
    9266:	2400      	movs	r4, #0
    9268:	6084      	str	r4, [r0, #8]
    926a:	2401      	movs	r4, #1
    926c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
    9270:	f104 34cc 	add.w	r4, r4, #3435973836	; 0xcccccccc
    9274:	fba4 4202 	umull	r4, r2, r4, r2
    9278:	0952      	lsrs	r2, r2, #5
    927a:	6042      	str	r2, [r0, #4]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
    927c:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
    927e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
    9282:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
    9284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
    9288:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
    928a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
    928e:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
    9290:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
    9298:	6241      	str	r1, [r0, #36]	; 0x24
}
    929a:	bc10      	pop	{r4}
    929c:	4770      	bx	lr
    929e:	bf00      	nop
    92a0:	0006ac44 	.word	0x0006ac44

000092a4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
    92a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92a6:	4605      	mov	r5, r0
    92a8:	460f      	mov	r7, r1
    92aa:	4614      	mov	r4, r2
    92ac:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
    92ae:	f00a fbb8 	bl	13a22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
    92b2:	2c00      	cmp	r4, #0
    92b4:	db08      	blt.n	92c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    92b6:	68ab      	ldr	r3, [r5, #8]
    92b8:	42a3      	cmp	r3, r4
    92ba:	dd05      	ble.n	92c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
    92bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    92be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    92c2:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
    92c4:	2000      	movs	r0, #0
}
    92c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
    92c8:	68ab      	ldr	r3, [r5, #8]
    92ca:	4622      	mov	r2, r4
    92cc:	4902      	ldr	r1, [pc, #8]	; (92d8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
    92ce:	4638      	mov	r0, r7
    92d0:	f00a fd49 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    92d4:	2001      	movs	r0, #1
    92d6:	e7f6      	b.n	92c6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x22>
    92d8:	0006ac10 	.word	0x0006ac10

000092dc <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
    92dc:	2810      	cmp	r0, #16
    92de:	d82a      	bhi.n	9336 <TfLiteTypeGetName+0x5a>
    92e0:	e8df f000 	tbb	[pc, r0]
    92e4:	110d2b09 	.word	0x110d2b09
    92e8:	0b191f15 	.word	0x0b191f15
    92ec:	2321131b 	.word	0x2321131b
    92f0:	2725171d 	.word	0x2725171d
    92f4:	0f          	.byte	0x0f
    92f5:	00          	.byte	0x00
    case kTfLiteFloat64:
      return "FLOAT64";
    case kTfLiteResource:
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
    92f6:	4812      	ldr	r0, [pc, #72]	; (9340 <TfLiteTypeGetName+0x64>)
    92f8:	4770      	bx	lr
      return "INT16";
    92fa:	4812      	ldr	r0, [pc, #72]	; (9344 <TfLiteTypeGetName+0x68>)
    92fc:	4770      	bx	lr
      return "INT32";
    92fe:	4812      	ldr	r0, [pc, #72]	; (9348 <TfLiteTypeGetName+0x6c>)
    9300:	4770      	bx	lr
      return "UINT32";
    9302:	4812      	ldr	r0, [pc, #72]	; (934c <TfLiteTypeGetName+0x70>)
    9304:	4770      	bx	lr
      return "UINT8";
    9306:	4812      	ldr	r0, [pc, #72]	; (9350 <TfLiteTypeGetName+0x74>)
    9308:	4770      	bx	lr
      return "INT8";
    930a:	4812      	ldr	r0, [pc, #72]	; (9354 <TfLiteTypeGetName+0x78>)
    930c:	4770      	bx	lr
      return "INT64";
    930e:	4812      	ldr	r0, [pc, #72]	; (9358 <TfLiteTypeGetName+0x7c>)
    9310:	4770      	bx	lr
      return "UINT64";
    9312:	4812      	ldr	r0, [pc, #72]	; (935c <TfLiteTypeGetName+0x80>)
    9314:	4770      	bx	lr
      return "BOOL";
    9316:	4812      	ldr	r0, [pc, #72]	; (9360 <TfLiteTypeGetName+0x84>)
    9318:	4770      	bx	lr
      return "COMPLEX64";
    931a:	4812      	ldr	r0, [pc, #72]	; (9364 <TfLiteTypeGetName+0x88>)
    931c:	4770      	bx	lr
      return "COMPLEX128";
    931e:	4812      	ldr	r0, [pc, #72]	; (9368 <TfLiteTypeGetName+0x8c>)
    9320:	4770      	bx	lr
      return "STRING";
    9322:	4812      	ldr	r0, [pc, #72]	; (936c <TfLiteTypeGetName+0x90>)
    9324:	4770      	bx	lr
      return "FLOAT16";
    9326:	4812      	ldr	r0, [pc, #72]	; (9370 <TfLiteTypeGetName+0x94>)
    9328:	4770      	bx	lr
      return "FLOAT64";
    932a:	4812      	ldr	r0, [pc, #72]	; (9374 <TfLiteTypeGetName+0x98>)
    932c:	4770      	bx	lr
      return "RESOURCE";
    932e:	4812      	ldr	r0, [pc, #72]	; (9378 <TfLiteTypeGetName+0x9c>)
    9330:	4770      	bx	lr
      return "VARIANT";
    9332:	4812      	ldr	r0, [pc, #72]	; (937c <TfLiteTypeGetName+0xa0>)
    9334:	4770      	bx	lr
  }
  return "Unknown type";
    9336:	4812      	ldr	r0, [pc, #72]	; (9380 <TfLiteTypeGetName+0xa4>)
    9338:	4770      	bx	lr
      return "FLOAT32";
    933a:	4812      	ldr	r0, [pc, #72]	; (9384 <TfLiteTypeGetName+0xa8>)
}
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	0006acf8 	.word	0x0006acf8
    9344:	0006ac74 	.word	0x0006ac74
    9348:	0006ac7c 	.word	0x0006ac7c
    934c:	0006ac84 	.word	0x0006ac84
    9350:	0006ac8c 	.word	0x0006ac8c
    9354:	0006ac94 	.word	0x0006ac94
    9358:	0006ac9c 	.word	0x0006ac9c
    935c:	0006aca4 	.word	0x0006aca4
    9360:	0006acac 	.word	0x0006acac
    9364:	0006acb4 	.word	0x0006acb4
    9368:	0006acc0 	.word	0x0006acc0
    936c:	0006accc 	.word	0x0006accc
    9370:	0006acd4 	.word	0x0006acd4
    9374:	0006acdc 	.word	0x0006acdc
    9378:	0006ace4 	.word	0x0006ace4
    937c:	0006acf0 	.word	0x0006acf0
    9380:	0006ac5c 	.word	0x0006ac5c
    9384:	0006ac6c 	.word	0x0006ac6c

00009388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
    9388:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    938c:	4606      	mov	r6, r0
    938e:	460f      	mov	r7, r1
    9390:	4615      	mov	r5, r2
    9392:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
    9394:	2200      	movs	r2, #0
    9396:	2300      	movs	r3, #0
    9398:	f7f7 fb02 	bl	9a0 <__aeabi_dcmpeq>
    939c:	b120      	cbz	r0, 93a8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    939e:	2300      	movs	r3, #0
    93a0:	602b      	str	r3, [r5, #0]
    *shift = 0;
    93a2:	6023      	str	r3, [r4, #0]
}
    93a4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  const double q = std::frexp(double_multiplier, shift);
    93a8:	4622      	mov	r2, r4
    93aa:	4630      	mov	r0, r6
    93ac:	4639      	mov	r1, r7
    93ae:	f007 f8ef 	bl	10590 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
    93b2:	2200      	movs	r2, #0
    93b4:	4b1a      	ldr	r3, [pc, #104]	; (9420 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x98>)
    93b6:	f7f7 f88b 	bl	4d0 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
    93ba:	f007 f921 	bl	10600 <round>
    93be:	f7f7 feab 	bl	1118 <__aeabi_d2lz>
    93c2:	4606      	mov	r6, r0
    93c4:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    93c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    93ca:	2300      	movs	r3, #0
    93cc:	4282      	cmp	r2, r0
    93ce:	418b      	sbcs	r3, r1
    93d0:	db12      	blt.n	93f8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>
  if (q_fixed == (1ll << 31)) {
    93d2:	2900      	cmp	r1, #0
    93d4:	bf08      	it	eq
    93d6:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
    93da:	d00f      	beq.n	93fc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x74>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    93dc:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    93e0:	f177 0300 	sbcs.w	r3, r7, #0
    93e4:	da19      	bge.n	941a <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x92>
  if (*shift < -31) {
    93e6:	6823      	ldr	r3, [r4, #0]
    93e8:	f113 0f1f 	cmn.w	r3, #31
    93ec:	da02      	bge.n	93f4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x6c>
    *shift = 0;
    93ee:	2300      	movs	r3, #0
    93f0:	6023      	str	r3, [r4, #0]
    q_fixed = 0;
    93f2:	2600      	movs	r6, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
    93f4:	602e      	str	r6, [r5, #0]
    93f6:	e7d5      	b.n	93a4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
    93f8:	f00c fecf 	bl	1619a <abort>
    q_fixed /= 2;
    93fc:	0fc9      	lsrs	r1, r1, #31
    93fe:	eb16 0b01 	adds.w	fp, r6, r1
    9402:	f147 0c00 	adc.w	ip, r7, #0
    9406:	ea4f 025b 	mov.w	r2, fp, lsr #1
    940a:	ea42 76cc 	orr.w	r6, r2, ip, lsl #31
    940e:	ea4f 076c 	mov.w	r7, ip, asr #1
    ++*shift;
    9412:	6823      	ldr	r3, [r4, #0]
    9414:	3301      	adds	r3, #1
    9416:	6023      	str	r3, [r4, #0]
    9418:	e7e0      	b.n	93dc <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x54>
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
    941a:	f00c febe 	bl	1619a <abort>
    941e:	bf00      	nop
    9420:	41e00000 	.word	0x41e00000

00009424 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
    9424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9426:	4606      	mov	r6, r0
    9428:	460f      	mov	r7, r1
    942a:	4615      	mov	r5, r2
    942c:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
    942e:	2200      	movs	r2, #0
    9430:	4b08      	ldr	r3, [pc, #32]	; (9454 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x30>)
    9432:	f7f7 fadd 	bl	9f0 <__aeabi_dcmpgt>
    9436:	b148      	cbz	r0, 944c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x28>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
    9438:	4623      	mov	r3, r4
    943a:	462a      	mov	r2, r5
    943c:	4630      	mov	r0, r6
    943e:	4639      	mov	r1, r7
    9440:	f7ff ffa2 	bl	9388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
    9444:	6823      	ldr	r3, [r4, #0]
    9446:	2b00      	cmp	r3, #0
    9448:	db02      	blt.n	9450 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>
}
    944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TFLITE_CHECK_GT(double_multiplier, 1.);
    944c:	f00c fea5 	bl	1619a <abort>
  TFLITE_CHECK_GE(*left_shift, 0);
    9450:	f00c fea3 	bl	1619a <abort>
    9454:	3ff00000 	.word	0x3ff00000

00009458 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>:
  return kTfLiteOk;
}

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
    9458:	b5f0      	push	{r4, r5, r6, r7, lr}
    945a:	b087      	sub	sp, #28
    945c:	4605      	mov	r5, r0
    945e:	460c      	mov	r4, r1
    9460:	9203      	str	r2, [sp, #12]
    9462:	9302      	str	r3, [sp, #8]
    9464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  const auto scale = output->params.scale;
    9466:	68de      	ldr	r6, [r3, #12]
  const auto zero_point = output->params.zero_point;
    9468:	691f      	ldr	r7, [r3, #16]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
    946a:	2901      	cmp	r1, #1
    946c:	d00e      	beq.n	948c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x34>
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    *act_max = qmax;
  } else if (activation == kTfLiteActRelu6) {
    946e:	2903      	cmp	r1, #3
    9470:	d042      	beq.n	94f8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xa0>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else if (activation == kTfLiteActReluN1To1) {
    9472:	2902      	cmp	r1, #2
    9474:	f000 80a7 	beq.w	95c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16e>
    *act_min = std::max(qmin, tmp_q);
    TF_LITE_ENSURE_OK(context,
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
  } else {
    *act_min = qmin;
    9478:	9b03      	ldr	r3, [sp, #12]
    947a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    947c:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    947e:	9b02      	ldr	r3, [sp, #8]
    9480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9482:	6013      	str	r3, [r2, #0]
  }
  return kTfLiteOk;
    9484:	2400      	movs	r4, #0
}
    9486:	4620      	mov	r0, r4
    9488:	b007      	add	sp, #28
    948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const float tmp = TfLiteRound(f / scale);
    948c:	4631      	mov	r1, r6
    948e:	2000      	movs	r0, #0
    9490:	f7f7 fcf2 	bl	e78 <__aeabi_fdiv>
    9494:	f7f6 ffc4 	bl	420 <__aeabi_f2d>
    9498:	f007 f8b2 	bl	10600 <round>
    949c:	f7f7 fada 	bl	a54 <__aeabi_d2f>
    94a0:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    94a2:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    94a6:	f7f7 fde5 	bl	1074 <__aeabi_fcmpge>
    94aa:	b160      	cbz	r0, 94c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
    94ac:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    94b0:	4630      	mov	r0, r6
    94b2:	f7f7 fdd5 	bl	1060 <__aeabi_fcmple>
    94b6:	b130      	cbz	r0, 94c6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x6e>
  q = zero_point + static_cast<int32_t>(tmp);
    94b8:	4630      	mov	r0, r6
    94ba:	f7f7 fdef 	bl	109c <__aeabi_f2iz>
    94be:	4407      	add	r7, r0
    94c0:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    94c2:	2400      	movs	r4, #0
    94c4:	e008      	b.n	94d8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x80>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    94c6:	696e      	ldr	r6, [r5, #20]
    94c8:	4b73      	ldr	r3, [pc, #460]	; (9698 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    94ca:	9300      	str	r3, [sp, #0]
    94cc:	f240 1359 	movw	r3, #345	; 0x159
    94d0:	4a72      	ldr	r2, [pc, #456]	; (969c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    94d2:	4973      	ldr	r1, [pc, #460]	; (96a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    94d4:	4628      	mov	r0, r5
    94d6:	47b0      	blx	r6
    TF_LITE_ENSURE_OK(context,
    94d8:	2c00      	cmp	r4, #0
    94da:	d1d4      	bne.n	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    94dc:	9a05      	ldr	r2, [sp, #20]
    94de:	9b03      	ldr	r3, [sp, #12]
    94e0:	429a      	cmp	r2, r3
    94e2:	dc07      	bgt.n	94f4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x9c>
	return __b;
      return __a;
    94e4:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    94e6:	681b      	ldr	r3, [r3, #0]
    94e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    94ea:	6013      	str	r3, [r2, #0]
    *act_max = qmax;
    94ec:	9b02      	ldr	r3, [sp, #8]
    94ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    94f0:	6013      	str	r3, [r2, #0]
    94f2:	e7c8      	b.n	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    94f4:	ab05      	add	r3, sp, #20
    94f6:	e7f6      	b.n	94e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x8e>
  const float tmp = TfLiteRound(f / scale);
    94f8:	4631      	mov	r1, r6
    94fa:	2000      	movs	r0, #0
    94fc:	f7f7 fcbc 	bl	e78 <__aeabi_fdiv>
    9500:	f7f6 ff8e 	bl	420 <__aeabi_f2d>
    9504:	f007 f87c 	bl	10600 <round>
    9508:	f7f7 faa4 	bl	a54 <__aeabi_d2f>
    950c:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    950e:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9512:	f7f7 fdaf 	bl	1074 <__aeabi_fcmpge>
    9516:	b160      	cbz	r0, 9532 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
    9518:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    951c:	4620      	mov	r0, r4
    951e:	f7f7 fd9f 	bl	1060 <__aeabi_fcmple>
    9522:	b130      	cbz	r0, 9532 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xda>
  q = zero_point + static_cast<int32_t>(tmp);
    9524:	4620      	mov	r0, r4
    9526:	f7f7 fdb9 	bl	109c <__aeabi_f2iz>
    952a:	4438      	add	r0, r7
    952c:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    952e:	2400      	movs	r4, #0
    9530:	e009      	b.n	9546 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xee>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9532:	696c      	ldr	r4, [r5, #20]
    9534:	4b58      	ldr	r3, [pc, #352]	; (9698 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9536:	9300      	str	r3, [sp, #0]
    9538:	f240 1359 	movw	r3, #345	; 0x159
    953c:	4a57      	ldr	r2, [pc, #348]	; (969c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    953e:	4958      	ldr	r1, [pc, #352]	; (96a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9540:	4628      	mov	r0, r5
    9542:	47a0      	blx	r4
    9544:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9546:	2c00      	cmp	r4, #0
    9548:	d19d      	bne.n	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    954a:	9a03      	ldr	r2, [sp, #12]
    954c:	9b05      	ldr	r3, [sp, #20]
    954e:	429a      	cmp	r2, r3
    9550:	db1f      	blt.n	9592 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13a>
      return __a;
    9552:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9554:	681b      	ldr	r3, [r3, #0]
    9556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9558:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    955a:	4631      	mov	r1, r6
    955c:	4851      	ldr	r0, [pc, #324]	; (96a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x24c>)
    955e:	f7f7 fc8b 	bl	e78 <__aeabi_fdiv>
    9562:	f7f6 ff5d 	bl	420 <__aeabi_f2d>
    9566:	f007 f84b 	bl	10600 <round>
    956a:	f7f7 fa73 	bl	a54 <__aeabi_d2f>
    956e:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9570:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9574:	f7f7 fd7e 	bl	1074 <__aeabi_fcmpge>
    9578:	b168      	cbz	r0, 9596 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
    957a:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    957e:	4630      	mov	r0, r6
    9580:	f7f7 fd6e 	bl	1060 <__aeabi_fcmple>
    9584:	b138      	cbz	r0, 9596 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x13e>
  q = zero_point + static_cast<int32_t>(tmp);
    9586:	4630      	mov	r0, r6
    9588:	f7f7 fd88 	bl	109c <__aeabi_f2iz>
    958c:	4407      	add	r7, r0
    958e:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9590:	e00b      	b.n	95aa <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x152>
	return __b;
    9592:	ab05      	add	r3, sp, #20
    9594:	e7de      	b.n	9554 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0xfc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9596:	696c      	ldr	r4, [r5, #20]
    9598:	4b3f      	ldr	r3, [pc, #252]	; (9698 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    959a:	9300      	str	r3, [sp, #0]
    959c:	f240 1359 	movw	r3, #345	; 0x159
    95a0:	4a3e      	ldr	r2, [pc, #248]	; (969c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    95a2:	493f      	ldr	r1, [pc, #252]	; (96a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    95a4:	4628      	mov	r0, r5
    95a6:	47a0      	blx	r4
    95a8:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    95aa:	2c00      	cmp	r4, #0
    95ac:	f47f af6b 	bne.w	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    95b0:	9a05      	ldr	r2, [sp, #20]
    95b2:	9b02      	ldr	r3, [sp, #8]
    95b4:	429a      	cmp	r2, r3
    95b6:	db04      	blt.n	95c2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x16a>
      return __a;
    95b8:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    95ba:	681b      	ldr	r3, [r3, #0]
    95bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    95be:	6013      	str	r3, [r2, #0]
    95c0:	e761      	b.n	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    95c2:	ab05      	add	r3, sp, #20
    95c4:	e7f9      	b.n	95ba <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x162>
  const float tmp = TfLiteRound(f / scale);
    95c6:	4631      	mov	r1, r6
    95c8:	4837      	ldr	r0, [pc, #220]	; (96a8 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x250>)
    95ca:	f7f7 fc55 	bl	e78 <__aeabi_fdiv>
    95ce:	f7f6 ff27 	bl	420 <__aeabi_f2d>
    95d2:	f007 f815 	bl	10600 <round>
    95d6:	f7f7 fa3d 	bl	a54 <__aeabi_d2f>
    95da:	4604      	mov	r4, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    95dc:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    95e0:	f7f7 fd48 	bl	1074 <__aeabi_fcmpge>
    95e4:	b160      	cbz	r0, 9600 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
    95e6:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    95ea:	4620      	mov	r0, r4
    95ec:	f7f7 fd38 	bl	1060 <__aeabi_fcmple>
    95f0:	b130      	cbz	r0, 9600 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1a8>
  q = zero_point + static_cast<int32_t>(tmp);
    95f2:	4620      	mov	r0, r4
    95f4:	f7f7 fd52 	bl	109c <__aeabi_f2iz>
    95f8:	4438      	add	r0, r7
    95fa:	9005      	str	r0, [sp, #20]
  return kTfLiteOk;
    95fc:	2400      	movs	r4, #0
    95fe:	e009      	b.n	9614 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1bc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9600:	696c      	ldr	r4, [r5, #20]
    9602:	4b25      	ldr	r3, [pc, #148]	; (9698 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    9604:	9300      	str	r3, [sp, #0]
    9606:	f240 1359 	movw	r3, #345	; 0x159
    960a:	4a24      	ldr	r2, [pc, #144]	; (969c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    960c:	4924      	ldr	r1, [pc, #144]	; (96a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    960e:	4628      	mov	r0, r5
    9610:	47a0      	blx	r4
    9612:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    9614:	2c00      	cmp	r4, #0
    9616:	f47f af36 	bne.w	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__a < __b)
    961a:	9a03      	ldr	r2, [sp, #12]
    961c:	9b05      	ldr	r3, [sp, #20]
    961e:	429a      	cmp	r2, r3
    9620:	db20      	blt.n	9664 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x20c>
      return __a;
    9622:	ab03      	add	r3, sp, #12
    *act_min = std::max(qmin, tmp_q);
    9624:	681b      	ldr	r3, [r3, #0]
    9626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9628:	6013      	str	r3, [r2, #0]
  const float tmp = TfLiteRound(f / scale);
    962a:	4631      	mov	r1, r6
    962c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9630:	f7f7 fc22 	bl	e78 <__aeabi_fdiv>
    9634:	f7f6 fef4 	bl	420 <__aeabi_f2d>
    9638:	f006 ffe2 	bl	10600 <round>
    963c:	f7f7 fa0a 	bl	a54 <__aeabi_d2f>
    9640:	4606      	mov	r6, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
    9642:	f04f 414f 	mov.w	r1, #3472883712	; 0xcf000000
    9646:	f7f7 fd15 	bl	1074 <__aeabi_fcmpge>
    964a:	b168      	cbz	r0, 9668 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
    964c:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
    9650:	4630      	mov	r0, r6
    9652:	f7f7 fd05 	bl	1060 <__aeabi_fcmple>
    9656:	b138      	cbz	r0, 9668 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x210>
  q = zero_point + static_cast<int32_t>(tmp);
    9658:	4630      	mov	r0, r6
    965a:	f7f7 fd1f 	bl	109c <__aeabi_f2iz>
    965e:	4407      	add	r7, r0
    9660:	9705      	str	r7, [sp, #20]
  return kTfLiteOk;
    9662:	e00b      	b.n	967c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x224>
	return __b;
    9664:	ab05      	add	r3, sp, #20
    9666:	e7dd      	b.n	9624 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x1cc>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
    9668:	696c      	ldr	r4, [r5, #20]
    966a:	4b0b      	ldr	r3, [pc, #44]	; (9698 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x240>)
    966c:	9300      	str	r3, [sp, #0]
    966e:	f240 1359 	movw	r3, #345	; 0x159
    9672:	4a0a      	ldr	r2, [pc, #40]	; (969c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x244>)
    9674:	490a      	ldr	r1, [pc, #40]	; (96a0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x248>)
    9676:	4628      	mov	r0, r5
    9678:	47a0      	blx	r4
    967a:	2401      	movs	r4, #1
    TF_LITE_ENSURE_OK(context,
    967c:	2c00      	cmp	r4, #0
    967e:	f47f af02 	bne.w	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
      if (__b < __a)
    9682:	9a05      	ldr	r2, [sp, #20]
    9684:	9b02      	ldr	r3, [sp, #8]
    9686:	429a      	cmp	r2, r3
    9688:	db04      	blt.n	9694 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x23c>
      return __a;
    968a:	ab02      	add	r3, sp, #8
    *act_max = std::min(qmax, tmp_q);
    968c:	681b      	ldr	r3, [r3, #0]
    968e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9690:	6013      	str	r3, [r2, #0]
    9692:	e6f8      	b.n	9486 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x2e>
	return __b;
    9694:	ab05      	add	r3, sp, #20
    9696:	e7f9      	b.n	968c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_+0x234>
    9698:	0006ad4c 	.word	0x0006ad4c
    969c:	0006ad00 	.word	0x0006ad00
    96a0:	0006aafc 	.word	0x0006aafc
    96a4:	40c00000 	.word	0x40c00000
    96a8:	bf800000 	.word	0xbf800000

000096ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
    96ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96b0:	b082      	sub	sp, #8
    96b2:	4680      	mov	r8, r0
    96b4:	4608      	mov	r0, r1
    96b6:	461d      	mov	r5, r3
      static_cast<double>(input->params.scale * filter->params.scale);
    96b8:	68d1      	ldr	r1, [r2, #12]
    96ba:	68c0      	ldr	r0, [r0, #12]
    96bc:	f7f7 fb28 	bl	d10 <__aeabi_fmul>
    96c0:	4604      	mov	r4, r0
  const double input_product_scale =
    96c2:	f7f6 fead 	bl	420 <__aeabi_f2d>
    96c6:	4606      	mov	r6, r0
    96c8:	460f      	mov	r7, r1
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    96ca:	2100      	movs	r1, #0
    96cc:	4620      	mov	r0, r4
    96ce:	f7f7 fcd1 	bl	1074 <__aeabi_fcmpge>
    96d2:	b178      	cbz	r0, 96f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x48>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
    96d4:	68e8      	ldr	r0, [r5, #12]
    96d6:	f7f6 fea3 	bl	420 <__aeabi_f2d>
    96da:	4602      	mov	r2, r0
    96dc:	460b      	mov	r3, r1
    96de:	4630      	mov	r0, r6
    96e0:	4639      	mov	r1, r7
    96e2:	f7f7 f81f 	bl	724 <__aeabi_ddiv>
    96e6:	9b08      	ldr	r3, [sp, #32]
    96e8:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
    96ec:	2000      	movs	r0, #0
}
    96ee:	b002      	add	sp, #8
    96f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
    96f4:	f8d8 4014 	ldr.w	r4, [r8, #20]
    96f8:	4b04      	ldr	r3, [pc, #16]	; (970c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
    96fa:	9300      	str	r3, [sp, #0]
    96fc:	f240 134b 	movw	r3, #331	; 0x14b
    9700:	4a03      	ldr	r2, [pc, #12]	; (9710 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x64>)
    9702:	4904      	ldr	r1, [pc, #16]	; (9714 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x68>)
    9704:	4640      	mov	r0, r8
    9706:	47a0      	blx	r4
    9708:	2001      	movs	r0, #1
    970a:	e7f0      	b.n	96ee <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x42>
    970c:	0006ad74 	.word	0x0006ad74
    9710:	0006ad00 	.word	0x0006ad00
    9714:	0006aafc 	.word	0x0006aafc

00009718 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
    9718:	b570      	push	{r4, r5, r6, lr}
    971a:	b084      	sub	sp, #16
    971c:	4614      	mov	r4, r2
    971e:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
    9720:	7813      	ldrb	r3, [r2, #0]
    9722:	2b03      	cmp	r3, #3
    9724:	d00d      	beq.n	9742 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
    9726:	2b09      	cmp	r3, #9
    9728:	d00e      	beq.n	9748 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x30>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
    972a:	2b07      	cmp	r3, #7
    972c:	d017      	beq.n	975e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x46>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
    972e:	6944      	ldr	r4, [r0, #20]
    9730:	4b0d      	ldr	r3, [pc, #52]	; (9768 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>)
    9732:	9300      	str	r3, [sp, #0]
    9734:	f240 1391 	movw	r3, #401	; 0x191
    9738:	4a0c      	ldr	r2, [pc, #48]	; (976c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x54>)
    973a:	490d      	ldr	r1, [pc, #52]	; (9770 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>)
    973c:	47a0      	blx	r4
    973e:	2001      	movs	r0, #1
    9740:	e00b      	b.n	975a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x42>
    qmax = std::numeric_limits<uint8_t>::max();
    9742:	23ff      	movs	r3, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
    9744:	2200      	movs	r2, #0
    9746:	e002      	b.n	974e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    qmax = std::numeric_limits<int8_t>::max();
    9748:	237f      	movs	r3, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
    974a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
    974e:	9e08      	ldr	r6, [sp, #32]
    9750:	9602      	str	r6, [sp, #8]
    9752:	9501      	str	r5, [sp, #4]
    9754:	9400      	str	r4, [sp, #0]
    9756:	f7ff fe7f 	bl	9458 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationiiP12TfLiteTensorPiS6_>
                                               output, act_min, act_max);
}
    975a:	b004      	add	sp, #16
    975c:	bd70      	pop	{r4, r5, r6, pc}
    qmax = std::numeric_limits<int16_t>::max();
    975e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
    9762:	4a04      	ldr	r2, [pc, #16]	; (9774 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x5c>)
    9764:	e7f3      	b.n	974e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x36>
    9766:	bf00      	nop
    9768:	0006adb4 	.word	0x0006adb4
    976c:	0006ad00 	.word	0x0006ad00
    9770:	0006aafc 	.word	0x0006aafc
    9774:	ffff8000 	.word	0xffff8000

00009778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
    9778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    977c:	b08d      	sub	sp, #52	; 0x34
    977e:	4604      	mov	r4, r0
    9780:	9304      	str	r3, [sp, #16]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
    9782:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
    9786:	2e01      	cmp	r6, #1
    9788:	d010      	beq.n	97ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x34>
    978a:	6947      	ldr	r7, [r0, #20]
    978c:	2501      	movs	r5, #1
    978e:	9503      	str	r5, [sp, #12]
    9790:	9602      	str	r6, [sp, #8]
    9792:	4b7d      	ldr	r3, [pc, #500]	; (9988 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    9794:	9301      	str	r3, [sp, #4]
    9796:	4b7d      	ldr	r3, [pc, #500]	; (998c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
    9798:	9300      	str	r3, [sp, #0]
    979a:	23da      	movs	r3, #218	; 0xda
    979c:	4a7c      	ldr	r2, [pc, #496]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    979e:	497d      	ldr	r1, [pc, #500]	; (9994 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    97a0:	47b8      	blx	r7
    97a2:	462e      	mov	r6, r5
}
    97a4:	4630      	mov	r0, r6
    97a6:	b00d      	add	sp, #52	; 0x34
    97a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97ac:	460d      	mov	r5, r1
    97ae:	4692      	mov	sl, r2
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    97b0:	f892 8030 	ldrb.w	r8, [r2, #48]	; 0x30
    97b4:	f1b8 0f01 	cmp.w	r8, #1
    97b8:	d00d      	beq.n	97d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x5e>
    97ba:	6945      	ldr	r5, [r0, #20]
    97bc:	2301      	movs	r3, #1
    97be:	9303      	str	r3, [sp, #12]
    97c0:	f8cd 8008 	str.w	r8, [sp, #8]
    97c4:	4b70      	ldr	r3, [pc, #448]	; (9988 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
    97c6:	9301      	str	r3, [sp, #4]
    97c8:	4b73      	ldr	r3, [pc, #460]	; (9998 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
    97ca:	9300      	str	r3, [sp, #0]
    97cc:	23dc      	movs	r3, #220	; 0xdc
    97ce:	4a70      	ldr	r2, [pc, #448]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    97d0:	4970      	ldr	r1, [pc, #448]	; (9994 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    97d2:	47a8      	blx	r5
    97d4:	e7e6      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
    97d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
    97d8:	b1b3      	cbz	r3, 9808 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x90>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    97da:	f8d3 b000 	ldr.w	fp, [r3]
    97de:	f1bb 0f00 	cmp.w	fp, #0
    97e2:	d01a      	beq.n	981a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xa2>
  const bool is_per_channel = affine_quantization->scale->size > 1;
    97e4:	f8db 7000 	ldr.w	r7, [fp]
  if (is_per_channel) {
    97e8:	2f01      	cmp	r7, #1
    97ea:	dd5a      	ble.n	98a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    TF_LITE_ENSURE(context,
    97ec:	780a      	ldrb	r2, [r1, #0]
    97ee:	2a09      	cmp	r2, #9
    97f0:	d01c      	beq.n	982c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    97f2:	2a07      	cmp	r2, #7
    97f4:	d01a      	beq.n	982c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xb4>
    97f6:	6945      	ldr	r5, [r0, #20]
    97f8:	4b68      	ldr	r3, [pc, #416]	; (999c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
    97fa:	9300      	str	r3, [sp, #0]
    97fc:	23ec      	movs	r3, #236	; 0xec
    97fe:	4a64      	ldr	r2, [pc, #400]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9800:	4967      	ldr	r1, [pc, #412]	; (99a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9802:	47a8      	blx	r5
    9804:	4646      	mov	r6, r8
    9806:	e7cd      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization);
    9808:	6945      	ldr	r5, [r0, #20]
    980a:	4b66      	ldr	r3, [pc, #408]	; (99a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x22c>)
    980c:	9300      	str	r3, [sp, #0]
    980e:	23e7      	movs	r3, #231	; 0xe7
    9810:	4a5f      	ldr	r2, [pc, #380]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9812:	4963      	ldr	r1, [pc, #396]	; (99a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9814:	47a8      	blx	r5
    9816:	4646      	mov	r6, r8
    9818:	e7c4      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
    981a:	6945      	ldr	r5, [r0, #20]
    981c:	4b62      	ldr	r3, [pc, #392]	; (99a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>)
    981e:	9300      	str	r3, [sp, #0]
    9820:	23e8      	movs	r3, #232	; 0xe8
    9822:	4a5b      	ldr	r2, [pc, #364]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9824:	495e      	ldr	r1, [pc, #376]	; (99a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
    9826:	47a8      	blx	r5
    9828:	4646      	mov	r6, r8
    982a:	e7bb      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
    982c:	f89a 2000 	ldrb.w	r2, [sl]
    9830:	2a09      	cmp	r2, #9
    9832:	d00e      	beq.n	9852 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xda>
    9834:	6965      	ldr	r5, [r4, #20]
    9836:	2309      	movs	r3, #9
    9838:	9303      	str	r3, [sp, #12]
    983a:	9202      	str	r2, [sp, #8]
    983c:	4b5b      	ldr	r3, [pc, #364]	; (99ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x234>)
    983e:	9301      	str	r3, [sp, #4]
    9840:	4b5b      	ldr	r3, [pc, #364]	; (99b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x238>)
    9842:	9300      	str	r3, [sp, #0]
    9844:	23ee      	movs	r3, #238	; 0xee
    9846:	4a52      	ldr	r2, [pc, #328]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9848:	4952      	ldr	r1, [pc, #328]	; (9994 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    984a:	4620      	mov	r0, r4
    984c:	47a8      	blx	r5
    984e:	4646      	mov	r6, r8
    9850:	e7a8      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
    9852:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9854:	4297      	cmp	r7, r2
    9856:	d00d      	beq.n	9874 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xfc>
    9858:	6965      	ldr	r5, [r4, #20]
    985a:	9203      	str	r2, [sp, #12]
    985c:	9702      	str	r7, [sp, #8]
    985e:	4b55      	ldr	r3, [pc, #340]	; (99b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    9860:	9301      	str	r3, [sp, #4]
    9862:	4b55      	ldr	r3, [pc, #340]	; (99b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x240>)
    9864:	9300      	str	r3, [sp, #0]
    9866:	23ef      	movs	r3, #239	; 0xef
    9868:	4a49      	ldr	r2, [pc, #292]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    986a:	494a      	ldr	r1, [pc, #296]	; (9994 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    986c:	4620      	mov	r0, r4
    986e:	47a8      	blx	r5
    9870:	4646      	mov	r6, r8
    9872:	e797      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
    9874:	f8da 2008 	ldr.w	r2, [sl, #8]
    9878:	689b      	ldr	r3, [r3, #8]
    987a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    987e:	6853      	ldr	r3, [r2, #4]
    9880:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    9882:	4293      	cmp	r3, r2
    9884:	d00d      	beq.n	98a2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12a>
    9886:	6965      	ldr	r5, [r4, #20]
    9888:	9303      	str	r3, [sp, #12]
    988a:	9202      	str	r2, [sp, #8]
    988c:	4b4b      	ldr	r3, [pc, #300]	; (99bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x244>)
    988e:	9301      	str	r3, [sp, #4]
    9890:	4b48      	ldr	r3, [pc, #288]	; (99b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x23c>)
    9892:	9300      	str	r3, [sp, #0]
    9894:	23f0      	movs	r3, #240	; 0xf0
    9896:	4a3e      	ldr	r2, [pc, #248]	; (9990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
    9898:	493e      	ldr	r1, [pc, #248]	; (9994 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
    989a:	4620      	mov	r0, r4
    989c:	47a8      	blx	r5
    989e:	4646      	mov	r6, r8
    98a0:	e780      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
  const float input_scale = input->params.scale;
    98a2:	f8d5 900c 	ldr.w	r9, [r5, #12]
  const float output_scale = output->params.scale;
    98a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98a8:	f8d3 800c 	ldr.w	r8, [r3, #12]
  const float* filter_scales = affine_quantization->scale->data;
    98ac:	f10b 0304 	add.w	r3, fp, #4
  for (int i = 0; i < num_channels; ++i) {
    98b0:	2600      	movs	r6, #0
    98b2:	9405      	str	r4, [sp, #20]
    98b4:	9506      	str	r5, [sp, #24]
    98b6:	f8cd a01c 	str.w	sl, [sp, #28]
    98ba:	469a      	mov	sl, r3
    98bc:	e024      	b.n	9908 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x190>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    98be:	f8db 0004 	ldr.w	r0, [fp, #4]
    const double filter_scale = static_cast<double>(scale);
    98c2:	f7f6 fdad 	bl	420 <__aeabi_f2d>
    98c6:	4604      	mov	r4, r0
    98c8:	460d      	mov	r5, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    98ca:	4648      	mov	r0, r9
    98cc:	f7f6 fda8 	bl	420 <__aeabi_f2d>
    98d0:	4622      	mov	r2, r4
    98d2:	462b      	mov	r3, r5
    98d4:	f7f6 fdfc 	bl	4d0 <__aeabi_dmul>
    98d8:	4604      	mov	r4, r0
    98da:	460d      	mov	r5, r1
                                          static_cast<double>(output_scale);
    98dc:	4640      	mov	r0, r8
    98de:	f7f6 fd9f 	bl	420 <__aeabi_f2d>
    98e2:	4602      	mov	r2, r0
    98e4:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
    98e6:	4620      	mov	r0, r4
    98e8:	4629      	mov	r1, r5
    98ea:	f7f6 ff1b 	bl	724 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
    98ee:	ab0a      	add	r3, sp, #40	; 0x28
    98f0:	aa09      	add	r2, sp, #36	; 0x24
    98f2:	f7ff fd49 	bl	9388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
    98f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    98f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    98fa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    per_channel_shift[i] = channel_shift;
    98fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9900:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9902:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
    9906:	3601      	adds	r6, #1
    9908:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    990a:	429e      	cmp	r6, r3
    990c:	da04      	bge.n	9918 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1a0>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
    990e:	2f01      	cmp	r7, #1
    9910:	ddd5      	ble.n	98be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x146>
    9912:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
    9916:	e7d4      	b.n	98c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x14a>
    9918:	9c05      	ldr	r4, [sp, #20]
    991a:	9d06      	ldr	r5, [sp, #24]
    991c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  if (input->type == kTfLiteUInt8) {
    9920:	782b      	ldrb	r3, [r5, #0]
    9922:	2b03      	cmp	r3, #3
    9924:	d008      	beq.n	9938 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1c0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
    9926:	782b      	ldrb	r3, [r5, #0]
    9928:	2b09      	cmp	r3, #9
    992a:	d022      	beq.n	9972 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    992c:	2b03      	cmp	r3, #3
    992e:	d020      	beq.n	9972 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
    9930:	2b07      	cmp	r3, #7
    9932:	d01e      	beq.n	9972 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fa>
  return kTfLiteOk;
    9934:	2600      	movs	r6, #0
    9936:	e735      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    double real_multiplier = 0.0;
    9938:	2200      	movs	r2, #0
    993a:	2300      	movs	r3, #0
    993c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
    9940:	ab0a      	add	r3, sp, #40	; 0x28
    9942:	9301      	str	r3, [sp, #4]
    9944:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9946:	9300      	str	r3, [sp, #0]
    9948:	9b04      	ldr	r3, [sp, #16]
    994a:	4652      	mov	r2, sl
    994c:	4629      	mov	r1, r5
    994e:	4620      	mov	r0, r4
    9950:	f7f7 fdf6 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
    9954:	4606      	mov	r6, r0
    9956:	2800      	cmp	r0, #0
    9958:	f47f af24 	bne.w	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
    995c:	ab09      	add	r3, sp, #36	; 0x24
    995e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9960:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    9964:	f7ff fd10 	bl	9388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
    9968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    996a:	425b      	negs	r3, r3
    996c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    996e:	6013      	str	r3, [r2, #0]
    9970:	e7d9      	b.n	9926 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ae>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
    9972:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9974:	9300      	str	r3, [sp, #0]
    9976:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9978:	9a16      	ldr	r2, [sp, #88]	; 0x58
    997a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    997c:	7809      	ldrb	r1, [r1, #0]
    997e:	4620      	mov	r0, r4
    9980:	f7ff feca 	bl	9718 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    9984:	4606      	mov	r6, r0
    9986:	e70d      	b.n	97a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2c>
    9988:	0006add8 	.word	0x0006add8
    998c:	0006adf4 	.word	0x0006adf4
    9990:	0006ad00 	.word	0x0006ad00
    9994:	0006adbc 	.word	0x0006adbc
    9998:	0006ae10 	.word	0x0006ae10
    999c:	0006ae5c 	.word	0x0006ae5c
    99a0:	0006aafc 	.word	0x0006aafc
    99a4:	0006ae2c 	.word	0x0006ae2c
    99a8:	0006ae40 	.word	0x0006ae40
    99ac:	0006ae98 	.word	0x0006ae98
    99b0:	0006aea4 	.word	0x0006aea4
    99b4:	0006aeb4 	.word	0x0006aeb4
    99b8:	0006aec4 	.word	0x0006aec4
    99bc:	0006aee8 	.word	0x0006aee8

000099c0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
    99c0:	b508      	push	{r3, lr}
    99c2:	4613      	mov	r3, r2
  switch (tensor_type) {
    99c4:	280f      	cmp	r0, #15
    99c6:	d848      	bhi.n	9a5a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x9a>
    99c8:	e8df f000 	tbb	[pc, r0]
    99cc:	1f17080c 	.word	0x1f17080c
    99d0:	13332f27 	.word	0x13332f27
    99d4:	3b0f2337 	.word	0x3b0f2337
    99d8:	1b433f2b 	.word	0x1b433f2b
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
    99dc:	230a      	movs	r3, #10
    99de:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    99e0:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
    99e2:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
    99e4:	2301      	movs	r3, #1
    99e6:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    99e8:	e7fb      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
    99ea:	230b      	movs	r3, #11
    99ec:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    99ee:	2000      	movs	r0, #0
    99f0:	e7f7      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
    99f2:	2307      	movs	r3, #7
    99f4:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    99f6:	2000      	movs	r0, #0
    99f8:	e7f3      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
    99fa:	2302      	movs	r3, #2
    99fc:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    99fe:	2000      	movs	r0, #0
    9a00:	e7ef      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
    9a02:	2310      	movs	r3, #16
    9a04:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a06:	2000      	movs	r0, #0
    9a08:	e7eb      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
    9a0a:	2303      	movs	r3, #3
    9a0c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a0e:	2000      	movs	r0, #0
    9a10:	e7e7      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
    9a12:	2309      	movs	r3, #9
    9a14:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a16:	2000      	movs	r0, #0
    9a18:	e7e3      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
    9a1a:	2304      	movs	r3, #4
    9a1c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a1e:	2000      	movs	r0, #0
    9a20:	e7df      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
    9a22:	230d      	movs	r3, #13
    9a24:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a26:	2000      	movs	r0, #0
    9a28:	e7db      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
    9a2a:	2305      	movs	r3, #5
    9a2c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a2e:	2000      	movs	r0, #0
    9a30:	e7d7      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
    9a32:	2306      	movs	r3, #6
    9a34:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a36:	2000      	movs	r0, #0
    9a38:	e7d3      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
    9a3a:	2308      	movs	r3, #8
    9a3c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a3e:	2000      	movs	r0, #0
    9a40:	e7cf      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
    9a42:	230c      	movs	r3, #12
    9a44:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a46:	2000      	movs	r0, #0
    9a48:	e7cb      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
    9a4a:	230e      	movs	r3, #14
    9a4c:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a4e:	2000      	movs	r0, #0
    9a50:	e7c7      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
    9a52:	230f      	movs	r3, #15
    9a54:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
    9a56:	2000      	movs	r0, #0
    9a58:	e7c3      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
    9a5a:	2200      	movs	r2, #0
    9a5c:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
    9a5e:	4602      	mov	r2, r0
    9a60:	4902      	ldr	r1, [pc, #8]	; (9a6c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xac>)
    9a62:	4618      	mov	r0, r3
    9a64:	f00a f97f 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9a68:	2001      	movs	r0, #1
    9a6a:	e7ba      	b.n	99e2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
    9a6c:	0006af28 	.word	0x0006af28

00009a70 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>:
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
    9a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a74:	461c      	mov	r4, r3
  if (!flat_vector) {
    9a76:	b1d1      	cbz	r1, 9aae <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x3e>
    9a78:	4680      	mov	r8, r0
    9a7a:	4617      	mov	r7, r2
    9a7c:	460d      	mov	r5, r1
  uoffset_t size() const { return EndianScalar(length_); }
    9a7e:	6808      	ldr	r0, [r1, #0]
    9a80:	f008 fa09 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    9a84:	4606      	mov	r6, r0
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
    9a86:	ebb0 0f98 	cmp.w	r0, r8, lsr #2
    9a8a:	d817      	bhi.n	9abc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x4c>
      for (size_t i = 0; i < num_dimensions; ++i) {
    9a8c:	2400      	movs	r4, #0
    9a8e:	42b4      	cmp	r4, r6
    9a90:	d222      	bcs.n	9ad8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x68>
    9a92:	6828      	ldr	r0, [r5, #0]
    9a94:	f008 f9ff 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
    FLATBUFFERS_ASSERT(i < size());
    9a98:	4284      	cmp	r4, r0
    9a9a:	d216      	bcs.n	9aca <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x5a>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
    9a9c:	1d2b      	adds	r3, r5, #4
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
    9a9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    9aa2:	f009 fc1c 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
        buffer[i] = flat_vector->Get(i);
    9aa6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
    9aaa:	3401      	adds	r4, #1
    9aac:	e7ef      	b.n	9a8e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x1e>
    TF_LITE_REPORT_ERROR(error_reporter,
    9aae:	9a06      	ldr	r2, [sp, #24]
    9ab0:	490b      	ldr	r1, [pc, #44]	; (9ae0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x70>)
    9ab2:	4618      	mov	r0, r3
    9ab4:	f00a f957 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
    9ab8:	2001      	movs	r0, #1
    9aba:	e00e      	b.n	9ada <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
      TF_LITE_REPORT_ERROR(
    9abc:	9a06      	ldr	r2, [sp, #24]
    9abe:	4909      	ldr	r1, [pc, #36]	; (9ae4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x74>)
    9ac0:	4620      	mov	r0, r4
    9ac2:	f00a f950 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
    9ac6:	2001      	movs	r0, #1
    9ac8:	e007      	b.n	9ada <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x6a>
    FLATBUFFERS_ASSERT(i < size());
    9aca:	4b07      	ldr	r3, [pc, #28]	; (9ae8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x78>)
    9acc:	4a07      	ldr	r2, [pc, #28]	; (9aec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x7c>)
    9ace:	f44f 7183 	mov.w	r1, #262	; 0x106
    9ad2:	4807      	ldr	r0, [pc, #28]	; (9af0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc+0x80>)
    9ad4:	f006 ff74 	bl	109c0 <__assert_func>
  return kTfLiteOk;
    9ad8:	2000      	movs	r0, #0
}
    9ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ade:	bf00      	nop
    9ae0:	0006af4c 	.word	0x0006af4c
    9ae4:	0006af7c 	.word	0x0006af7c
    9ae8:	0006924c 	.word	0x0006924c
    9aec:	00069258 	.word	0x00069258
    9af0:	00069318 	.word	0x00069318

00009af4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    9af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9af8:	b084      	sub	sp, #16
    9afa:	4604      	mov	r4, r0
    9afc:	4688      	mov	r8, r1
    9afe:	4615      	mov	r5, r2
    9b00:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9b02:	f00a f922 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9b06:	682b      	ldr	r3, [r5, #0]
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	2204      	movs	r2, #4
    9b0c:	2124      	movs	r1, #36	; 0x24
    9b0e:	4628      	mov	r0, r5
    9b10:	4798      	blx	r3
    return new (allocated_memory) T();
    9b12:	4606      	mov	r6, r0
    9b14:	b118      	cbz	r0, 9b1e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9b16:	2224      	movs	r2, #36	; 0x24
    9b18:	2100      	movs	r1, #0
    9b1a:	f00c fb64 	bl	161e6 <memset>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    9b1e:	9502      	str	r5, [sp, #8]
    9b20:	9603      	str	r6, [sp, #12]
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9b22:	b336      	cbz	r6, 9b72 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9b24:	4620      	mov	r0, r4
    9b26:	f009 fbdb 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b2a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b2c:	4628      	mov	r0, r5
    9b2e:	f009 fbdd 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b32:	280a      	cmp	r0, #10
    9b34:	d92a      	bls.n	9b8c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9b36:	f105 000a 	add.w	r0, r5, #10
    9b3a:	f009 fbd7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b3e:	b338      	cbz	r0, 9b90 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9b40:	4420      	add	r0, r4
    9b42:	f009 fc9c 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
    9b46:	2811      	cmp	r0, #17
    9b48:	d128      	bne.n	9b9c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9b4a:	4620      	mov	r0, r4
    9b4c:	f009 fbc8 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9b50:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9b52:	4628      	mov	r0, r5
    9b54:	f009 fbca 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b58:	280c      	cmp	r0, #12
    9b5a:	d91b      	bls.n	9b94 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9b5c:	f105 000c 	add.w	r0, r5, #12
    9b60:	f009 fbc4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9b64:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b66:	b1b8      	cbz	r0, 9b98 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9b68:	4620      	mov	r0, r4
    9b6a:	f009 fbb3 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9b6e:	4404      	add	r4, r0
    9b70:	e015      	b.n	9b9e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9b72:	4b26      	ldr	r3, [pc, #152]	; (9c0c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>)
    9b74:	9301      	str	r3, [sp, #4]
    9b76:	f240 63c3 	movw	r3, #1731	; 0x6c3
    9b7a:	9300      	str	r3, [sp, #0]
    9b7c:	4b24      	ldr	r3, [pc, #144]	; (9c10 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>)
    9b7e:	4a25      	ldr	r2, [pc, #148]	; (9c14 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>)
    9b80:	4641      	mov	r1, r8
    9b82:	4640      	mov	r0, r8
    9b84:	f00a f8fe 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9b88:	2501      	movs	r5, #1
    9b8a:	e030      	b.n	9bee <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b8c:	2000      	movs	r0, #0
    9b8e:	e7d6      	b.n	9b3e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9b90:	2000      	movs	r0, #0
    9b92:	e7d8      	b.n	9b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9b94:	2000      	movs	r0, #0
    9b96:	e7e5      	b.n	9b64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9b98:	2400      	movs	r4, #0
    9b9a:	e000      	b.n	9b9e <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9b9c:	2400      	movs	r4, #0

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
    9b9e:	b314      	cbz	r4, 9be6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
    9ba0:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9ba2:	4620      	mov	r0, r4
    9ba4:	f009 fb9c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ba8:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9baa:	4620      	mov	r0, r4
    9bac:	f009 fb9e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9bb0:	2804      	cmp	r0, #4
    9bb2:	d926      	bls.n	9c02 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    9bb4:	1d20      	adds	r0, r4, #4
    9bb6:	f009 fb99 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9bba:	4405      	add	r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9bbc:	b318      	cbz	r0, 9c06 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x112>
    9bbe:	4628      	mov	r0, r5
    9bc0:	f009 fb88 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9bc4:	182c      	adds	r4, r5, r0
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
    9bc6:	b174      	cbz	r4, 9be6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf2>
      TF_LITE_ENSURE_STATUS(
    9bc8:	4b13      	ldr	r3, [pc, #76]	; (9c18 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>)
    9bca:	9300      	str	r3, [sp, #0]
    9bcc:	4643      	mov	r3, r8
    9bce:	4632      	mov	r2, r6
    9bd0:	4621      	mov	r1, r4
    9bd2:	2020      	movs	r0, #32
    9bd4:	f7ff ff4c 	bl	9a70 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc>
    9bd8:	4605      	mov	r5, r0
    9bda:	b940      	cbnz	r0, 9bee <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
  uoffset_t size() const { return EndianScalar(length_); }
    9bdc:	6820      	ldr	r0, [r4, #0]
    9bde:	f008 f95a 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9be2:	9b03      	ldr	r3, [sp, #12]
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
    9be4:	6218      	str	r0, [r3, #32]
    9be6:	9b03      	ldr	r3, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	_M_t._M_ptr() = pointer();
    9be8:	2500      	movs	r5, #0
    9bea:	9503      	str	r5, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    9bec:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9bee:	9903      	ldr	r1, [sp, #12]
    9bf0:	b119      	cbz	r1, 9bfa <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9bf2:	9802      	ldr	r0, [sp, #8]
    9bf4:	6803      	ldr	r3, [r0, #0]
    9bf6:	685b      	ldr	r3, [r3, #4]
    9bf8:	4798      	blx	r3
  return kTfLiteOk;
}
    9bfa:	4628      	mov	r0, r5
    9bfc:	b004      	add	sp, #16
    9bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c02:	2000      	movs	r0, #0
    9c04:	e7d9      	b.n	9bba <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c06:	2400      	movs	r4, #0
    9c08:	e7dd      	b.n	9bc6 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    9c0a:	bf00      	nop
    9c0c:	0006b018 	.word	0x0006b018
    9c10:	0006afc0 	.word	0x0006afc0
    9c14:	0006aafc 	.word	0x0006aafc
    9c18:	0006b02c 	.word	0x0006b02c

00009c1c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
    9c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c20:	b084      	sub	sp, #16
    9c22:	4604      	mov	r4, r0
    9c24:	4688      	mov	r8, r1
    9c26:	4615      	mov	r5, r2
    9c28:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9c2a:	f00a f88e 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9c2e:	682b      	ldr	r3, [r5, #0]
    9c30:	681b      	ldr	r3, [r3, #0]
    9c32:	2204      	movs	r2, #4
    9c34:	2128      	movs	r1, #40	; 0x28
    9c36:	4628      	mov	r0, r5
    9c38:	4798      	blx	r3
    return new (allocated_memory) T();
    9c3a:	4607      	mov	r7, r0
    9c3c:	b118      	cbz	r0, 9c46 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2a>
    9c3e:	2228      	movs	r2, #40	; 0x28
    9c40:	2100      	movs	r1, #0
    9c42:	f00c fad0 	bl	161e6 <memset>
    9c46:	9502      	str	r5, [sp, #8]
    9c48:	9703      	str	r7, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9c4a:	b337      	cbz	r7, 9c9a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    return data_ - ReadScalar<soffset_t>(data_);
    9c4c:	4620      	mov	r0, r4
    9c4e:	f009 fb47 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c52:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c54:	4628      	mov	r0, r5
    9c56:	f009 fb49 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c5a:	280a      	cmp	r0, #10
    9c5c:	d92a      	bls.n	9cb4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    9c5e:	f105 000a 	add.w	r0, r5, #10
    9c62:	f009 fb43 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9c66:	b338      	cbz	r0, 9cb8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    9c68:	4420      	add	r0, r4
    9c6a:	f009 fc08 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
    9c6e:	2805      	cmp	r0, #5
    9c70:	d128      	bne.n	9cc4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    return data_ - ReadScalar<soffset_t>(data_);
    9c72:	4620      	mov	r0, r4
    9c74:	f009 fb34 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9c78:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9c7a:	4628      	mov	r0, r5
    9c7c:	f009 fb36 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9c80:	280c      	cmp	r0, #12
    9c82:	d91b      	bls.n	9cbc <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    9c84:	f105 000c 	add.w	r0, r5, #12
    9c88:	f009 fb30 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9c8c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9c8e:	b1b8      	cbz	r0, 9cc0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    9c90:	4620      	mov	r0, r4
    9c92:	f009 fb1f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9c96:	4404      	add	r4, r0
    9c98:	e015      	b.n	9cc6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9c9a:	4b5b      	ldr	r3, [pc, #364]	; (9e08 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>)
    9c9c:	9301      	str	r3, [sp, #4]
    9c9e:	f240 6361 	movw	r3, #1633	; 0x661
    9ca2:	9300      	str	r3, [sp, #0]
    9ca4:	4b59      	ldr	r3, [pc, #356]	; (9e0c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9ca6:	4a5a      	ldr	r2, [pc, #360]	; (9e10 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9ca8:	4641      	mov	r1, r8
    9caa:	4640      	mov	r0, r8
    9cac:	f00a f86a 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9cb0:	2401      	movs	r4, #1
    9cb2:	e086      	b.n	9dc2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a6>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cb4:	2000      	movs	r0, #0
    9cb6:	e7d6      	b.n	9c66 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9cb8:	2000      	movs	r0, #0
    9cba:	e7d8      	b.n	9c6e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cbc:	2000      	movs	r0, #0
    9cbe:	e7e5      	b.n	9c8c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9cc0:	2400      	movs	r4, #0
    9cc2:	e000      	b.n	9cc6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9cc4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9cc6:	2c00      	cmp	r4, #0
    9cc8:	d077      	beq.n	9dba <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19e>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9cca:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9ccc:	4620      	mov	r0, r4
    9cce:	f009 fb07 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9cd2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9cd4:	4620      	mov	r0, r4
    9cd6:	f009 fb09 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9cda:	2804      	cmp	r0, #4
    9cdc:	d97b      	bls.n	9dd6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ba>
    9cde:	1d20      	adds	r0, r4, #4
    9ce0:	f009 fb04 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d078      	beq.n	9dda <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1be>
    9ce8:	4428      	add	r0, r5
    9cea:	f009 fb05 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9cee:	b2c0      	uxtb	r0, r0
    9cf0:	f00a f822 	bl	13d38 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9cf4:	7038      	strb	r0, [r7, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9cf6:	9f03      	ldr	r7, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9cf8:	4628      	mov	r0, r5
    9cfa:	f009 faf1 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9cfe:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d00:	4620      	mov	r0, r4
    9d02:	f009 faf3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d06:	2806      	cmp	r0, #6
    9d08:	d969      	bls.n	9dde <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c2>
    9d0a:	1da0      	adds	r0, r4, #6
    9d0c:	f009 faee 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d10:	2800      	cmp	r0, #0
    9d12:	d066      	beq.n	9de2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c6>
    9d14:	4428      	add	r0, r5
    9d16:	f009 fae3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9d1a:	6078      	str	r0, [r7, #4]
    9d1c:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9d1e:	4628      	mov	r0, r5
    9d20:	f009 fade 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d24:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d26:	4638      	mov	r0, r7
    9d28:	f009 fae0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d2c:	2808      	cmp	r0, #8
    9d2e:	d95a      	bls.n	9de6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ca>
    9d30:	f107 0008 	add.w	r0, r7, #8
    9d34:	f009 fada 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d38:	2800      	cmp	r0, #0
    9d3a:	d056      	beq.n	9dea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ce>
    9d3c:	4428      	add	r0, r5
    9d3e:	f009 facf 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9d42:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9d44:	4628      	mov	r0, r5
    9d46:	f009 facb 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d4a:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d4c:	4638      	mov	r0, r7
    9d4e:	f009 facd 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d52:	280a      	cmp	r0, #10
    9d54:	d94b      	bls.n	9dee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    9d56:	f107 000a 	add.w	r0, r7, #10
    9d5a:	f009 fac7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d5e:	2800      	cmp	r0, #0
    9d60:	d047      	beq.n	9df2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d6>
    9d62:	4428      	add	r0, r5
    9d64:	f009 fabc 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_width = schema_params->filter_width();
    9d68:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9d6a:	4628      	mov	r0, r5
    9d6c:	f009 fab8 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d70:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d72:	4638      	mov	r0, r7
    9d74:	f009 faba 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d78:	280c      	cmp	r0, #12
    9d7a:	d93c      	bls.n	9df6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    9d7c:	f107 000c 	add.w	r0, r7, #12
    9d80:	f009 fab4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9d84:	2800      	cmp	r0, #0
    9d86:	d038      	beq.n	9dfa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1de>
    9d88:	4428      	add	r0, r5
    9d8a:	f009 faa9 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->filter_height = schema_params->filter_height();
    9d8e:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9d90:	4628      	mov	r0, r5
    9d92:	f009 faa5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9d96:	1a2f      	subs	r7, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9d98:	4638      	mov	r0, r7
    9d9a:	f009 faa7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9d9e:	280e      	cmp	r0, #14
    9da0:	d92d      	bls.n	9dfe <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e2>
    9da2:	f107 000e 	add.w	r0, r7, #14
    9da6:	f009 faa1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9daa:	b350      	cbz	r0, 9e02 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    9dac:	4428      	add	r0, r5
    9dae:	f009 faa3 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9db2:	b2c0      	uxtb	r0, r0
    9db4:	f009 ffb6 	bl	13d24 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9db8:	7520      	strb	r0, [r4, #20]
    9dba:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9dbc:	2400      	movs	r4, #0
    9dbe:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9dc0:	6033      	str	r3, [r6, #0]
	if (__ptr != nullptr)
    9dc2:	9903      	ldr	r1, [sp, #12]
    9dc4:	b119      	cbz	r1, 9dce <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b2>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9dc6:	9802      	ldr	r0, [sp, #8]
    9dc8:	6803      	ldr	r3, [r0, #0]
    9dca:	685b      	ldr	r3, [r3, #4]
    9dcc:	4798      	blx	r3
}
    9dce:	4620      	mov	r0, r4
    9dd0:	b004      	add	sp, #16
    9dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dd6:	2000      	movs	r0, #0
    9dd8:	e784      	b.n	9ce4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dda:	2000      	movs	r0, #0
    9ddc:	e787      	b.n	9cee <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dde:	2000      	movs	r0, #0
    9de0:	e796      	b.n	9d10 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9de2:	2000      	movs	r0, #0
    9de4:	e799      	b.n	9d1a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfe>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9de6:	2000      	movs	r0, #0
    9de8:	e7a6      	b.n	9d38 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dea:	2000      	movs	r0, #0
    9dec:	e7a9      	b.n	9d42 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x126>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dee:	2000      	movs	r0, #0
    9df0:	e7b5      	b.n	9d5e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x142>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9df2:	2000      	movs	r0, #0
    9df4:	e7b8      	b.n	9d68 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9df6:	2000      	movs	r0, #0
    9df8:	e7c4      	b.n	9d84 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9dfa:	2000      	movs	r0, #0
    9dfc:	e7c7      	b.n	9d8e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9dfe:	2000      	movs	r0, #0
    9e00:	e7d3      	b.n	9daa <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18e>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e02:	2000      	movs	r0, #0
    9e04:	e7d5      	b.n	9db2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x196>
    9e06:	bf00      	nop
    9e08:	0006b018 	.word	0x0006b018
    9e0c:	0006afc0 	.word	0x0006afc0
    9e10:	0006aafc 	.word	0x0006aafc

00009e14 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
    9e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e18:	b084      	sub	sp, #16
    9e1a:	4604      	mov	r4, r0
    9e1c:	4688      	mov	r8, r1
    9e1e:	4615      	mov	r5, r2
    9e20:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    9e22:	f009 ff92 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    9e26:	682b      	ldr	r3, [r5, #0]
    9e28:	681b      	ldr	r3, [r3, #0]
    9e2a:	2204      	movs	r2, #4
    9e2c:	2118      	movs	r1, #24
    9e2e:	4628      	mov	r0, r5
    9e30:	4798      	blx	r3
    return new (allocated_memory) T();
    9e32:	4606      	mov	r6, r0
    9e34:	b130      	cbz	r0, 9e44 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
    9e36:	2300      	movs	r3, #0
    9e38:	6003      	str	r3, [r0, #0]
    9e3a:	6043      	str	r3, [r0, #4]
    9e3c:	6083      	str	r3, [r0, #8]
    9e3e:	60c3      	str	r3, [r0, #12]
    9e40:	6103      	str	r3, [r0, #16]
    9e42:	6143      	str	r3, [r0, #20]
    9e44:	9502      	str	r5, [sp, #8]
    9e46:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    9e48:	b336      	cbz	r6, 9e98 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return data_ - ReadScalar<soffset_t>(data_);
    9e4a:	4620      	mov	r0, r4
    9e4c:	f009 fa48 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e50:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e52:	4628      	mov	r0, r5
    9e54:	f009 fa4a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e58:	280a      	cmp	r0, #10
    9e5a:	d92a      	bls.n	9eb2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
    9e5c:	f105 000a 	add.w	r0, r5, #10
    9e60:	f009 fa44 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9e64:	b338      	cbz	r0, 9eb6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    9e66:	4420      	add	r0, r4
    9e68:	f009 fb09 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
    9e6c:	2801      	cmp	r0, #1
    9e6e:	d128      	bne.n	9ec2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
    return data_ - ReadScalar<soffset_t>(data_);
    9e70:	4620      	mov	r0, r4
    9e72:	f009 fa35 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9e76:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9e78:	4628      	mov	r0, r5
    9e7a:	f009 fa37 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9e7e:	280c      	cmp	r0, #12
    9e80:	d91b      	bls.n	9eba <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    9e82:	f105 000c 	add.w	r0, r5, #12
    9e86:	f009 fa31 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    9e8a:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9e8c:	b1b8      	cbz	r0, 9ebe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
    9e8e:	4620      	mov	r0, r4
    9e90:	f009 fa20 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    9e94:	4404      	add	r4, r0
    9e96:	e015      	b.n	9ec4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9e98:	4b5a      	ldr	r3, [pc, #360]	; (a004 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f0>)
    9e9a:	9301      	str	r3, [sp, #4]
    9e9c:	f240 434d 	movw	r3, #1101	; 0x44d
    9ea0:	9300      	str	r3, [sp, #0]
    9ea2:	4b59      	ldr	r3, [pc, #356]	; (a008 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f4>)
    9ea4:	4a59      	ldr	r2, [pc, #356]	; (a00c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f8>)
    9ea6:	4641      	mov	r1, r8
    9ea8:	4640      	mov	r0, r8
    9eaa:	f009 ff6b 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    9eae:	2401      	movs	r4, #1
    9eb0:	e086      	b.n	9fc0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eb2:	2000      	movs	r0, #0
    9eb4:	e7d6      	b.n	9e64 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9eb6:	2000      	movs	r0, #0
    9eb8:	e7d8      	b.n	9e6c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9eba:	2000      	movs	r0, #0
    9ebc:	e7e5      	b.n	9e8a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    9ebe:	2400      	movs	r4, #0
    9ec0:	e000      	b.n	9ec4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    9ec2:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    9ec4:	2c00      	cmp	r4, #0
    9ec6:	d077      	beq.n	9fb8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    9ec8:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    9eca:	4620      	mov	r0, r4
    9ecc:	f009 fa08 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9ed0:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9ed2:	4620      	mov	r0, r4
    9ed4:	f009 fa0a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ed8:	2804      	cmp	r0, #4
    9eda:	d97b      	bls.n	9fd4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c0>
    9edc:	1d20      	adds	r0, r4, #4
    9ede:	f009 fa05 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ee2:	2800      	cmp	r0, #0
    9ee4:	d078      	beq.n	9fd8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c4>
    9ee6:	4428      	add	r0, r5
    9ee8:	f009 fa06 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    9eec:	b2c0      	uxtb	r0, r0
    9eee:	f009 ff23 	bl	13d38 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    9ef2:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    9ef4:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9ef6:	4628      	mov	r0, r5
    9ef8:	f009 f9f2 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9efc:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9efe:	4620      	mov	r0, r4
    9f00:	f009 f9f4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f04:	2806      	cmp	r0, #6
    9f06:	d969      	bls.n	9fdc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    9f08:	1da0      	adds	r0, r4, #6
    9f0a:	f009 f9ef 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f0e:	2800      	cmp	r0, #0
    9f10:	d066      	beq.n	9fe0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1cc>
    9f12:	4428      	add	r0, r5
    9f14:	f009 f9e4 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    9f18:	6070      	str	r0, [r6, #4]
    9f1a:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f1c:	4628      	mov	r0, r5
    9f1e:	f009 f9df 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f22:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f24:	4630      	mov	r0, r6
    9f26:	f009 f9e1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f2a:	2808      	cmp	r0, #8
    9f2c:	d95a      	bls.n	9fe4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    9f2e:	f106 0008 	add.w	r0, r6, #8
    9f32:	f009 f9db 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f36:	2800      	cmp	r0, #0
    9f38:	d056      	beq.n	9fe8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d4>
    9f3a:	4428      	add	r0, r5
    9f3c:	f009 f9d0 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    9f40:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    9f42:	4628      	mov	r0, r5
    9f44:	f009 f9cc 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f48:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f4a:	4630      	mov	r0, r6
    9f4c:	f009 f9ce 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f50:	280a      	cmp	r0, #10
    9f52:	d94b      	bls.n	9fec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d8>
    9f54:	f106 000a 	add.w	r0, r6, #10
    9f58:	f009 f9c8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d047      	beq.n	9ff0 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1dc>
    9f60:	4428      	add	r0, r5
    9f62:	f009 f9c9 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    9f66:	b2c0      	uxtb	r0, r0
    9f68:	f009 fedc 	bl	13d24 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    9f6c:	7320      	strb	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    9f6e:	4628      	mov	r0, r5
    9f70:	f009 f9b6 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f74:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f76:	4630      	mov	r0, r6
    9f78:	f009 f9b8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9f7c:	280c      	cmp	r0, #12
    9f7e:	d939      	bls.n	9ff4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e0>
    9f80:	f106 000c 	add.w	r0, r6, #12
    9f84:	f009 f9b2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9f88:	2800      	cmp	r0, #0
    9f8a:	d035      	beq.n	9ff8 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e4>
    9f8c:	4428      	add	r0, r5
    9f8e:	f009 f9a7 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    9f92:	6120      	str	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    9f94:	4628      	mov	r0, r5
    9f96:	f009 f9a3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    9f9a:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    9f9c:	4630      	mov	r0, r6
    9f9e:	f009 f9a5 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fa2:	280e      	cmp	r0, #14
    9fa4:	d92a      	bls.n	9ffc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e8>
    9fa6:	f106 000e 	add.w	r0, r6, #14
    9faa:	f009 f99f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fae:	b338      	cbz	r0, a000 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ec>
    9fb0:	4428      	add	r0, r5
    9fb2:	f009 f995 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    9fb6:	6160      	str	r0, [r4, #20]
    9fb8:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    9fba:	2400      	movs	r4, #0
    9fbc:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    9fbe:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    9fc0:	9903      	ldr	r1, [sp, #12]
    9fc2:	b119      	cbz	r1, 9fcc <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1b8>
    void operator()(void* data) { allocator_->Deallocate(data); }
    9fc4:	9802      	ldr	r0, [sp, #8]
    9fc6:	6803      	ldr	r3, [r0, #0]
    9fc8:	685b      	ldr	r3, [r3, #4]
    9fca:	4798      	blx	r3
}
    9fcc:	4620      	mov	r0, r4
    9fce:	b004      	add	sp, #16
    9fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fd4:	2000      	movs	r0, #0
    9fd6:	e784      	b.n	9ee2 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xce>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fd8:	2000      	movs	r0, #0
    9fda:	e787      	b.n	9eec <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fdc:	2000      	movs	r0, #0
    9fde:	e796      	b.n	9f0e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fe0:	2000      	movs	r0, #0
    9fe2:	e799      	b.n	9f18 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fe4:	2000      	movs	r0, #0
    9fe6:	e7a6      	b.n	9f36 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x122>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9fe8:	2000      	movs	r0, #0
    9fea:	e7a9      	b.n	9f40 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9fec:	2000      	movs	r0, #0
    9fee:	e7b5      	b.n	9f5c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x148>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ff0:	2000      	movs	r0, #0
    9ff2:	e7b8      	b.n	9f66 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x152>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ff4:	2000      	movs	r0, #0
    9ff6:	e7c7      	b.n	9f88 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x174>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    9ff8:	2001      	movs	r0, #1
    9ffa:	e7ca      	b.n	9f92 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    9ffc:	2000      	movs	r0, #0
    9ffe:	e7d6      	b.n	9fae <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x19a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a000:	2001      	movs	r0, #1
    a002:	e7d8      	b.n	9fb6 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    a004:	0006b018 	.word	0x0006b018
    a008:	0006afc0 	.word	0x0006afc0
    a00c:	0006aafc 	.word	0x0006aafc

0000a010 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
    a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a014:	b084      	sub	sp, #16
    a016:	4604      	mov	r4, r0
    a018:	4688      	mov	r8, r1
    a01a:	4616      	mov	r6, r2
    a01c:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a01e:	f009 fe94 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a022:	6833      	ldr	r3, [r6, #0]
    a024:	681b      	ldr	r3, [r3, #0]
    a026:	2201      	movs	r2, #1
    a028:	2104      	movs	r1, #4
    a02a:	4630      	mov	r0, r6
    a02c:	4798      	blx	r3
    return new (allocated_memory) T();
    a02e:	4605      	mov	r5, r0
    a030:	b108      	cbz	r0, a036 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a032:	2300      	movs	r3, #0
    a034:	6003      	str	r3, [r0, #0]
    a036:	9602      	str	r6, [sp, #8]
    a038:	9503      	str	r5, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a03a:	b305      	cbz	r5, a07e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return data_ - ReadScalar<soffset_t>(data_);
    a03c:	4620      	mov	r0, r4
    a03e:	f009 f94f 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a042:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a044:	4630      	mov	r0, r6
    a046:	f009 f951 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a04a:	280a      	cmp	r0, #10
    a04c:	d924      	bls.n	a098 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    a04e:	f106 000a 	add.w	r0, r6, #10
    a052:	f009 f94b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a056:	b308      	cbz	r0, a09c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>
    a058:	4420      	add	r0, r4
    a05a:	f009 fa10 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
    a05e:	2808      	cmp	r0, #8
    a060:	d128      	bne.n	a0b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a062:	4620      	mov	r0, r4
    a064:	f009 f93c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a068:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a06a:	4630      	mov	r0, r6
    a06c:	f009 f93e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a070:	280c      	cmp	r0, #12
    a072:	d915      	bls.n	a0a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>
    a074:	f106 000c 	add.w	r0, r6, #12
    a078:	f009 f938 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a07c:	e011      	b.n	a0a2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    a07e:	4b4c      	ldr	r3, [pc, #304]	; (a1b0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a0>)
    a080:	9301      	str	r3, [sp, #4]
    a082:	f240 531d 	movw	r3, #1309	; 0x51d
    a086:	9300      	str	r3, [sp, #0]
    a088:	4b4a      	ldr	r3, [pc, #296]	; (a1b4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a4>)
    a08a:	4a4b      	ldr	r2, [pc, #300]	; (a1b8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a8>)
    a08c:	4641      	mov	r1, r8
    a08e:	4640      	mov	r0, r8
    a090:	f009 fe78 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a094:	2401      	movs	r4, #1
    a096:	e07d      	b.n	a194 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
    a098:	2000      	movs	r0, #0
    a09a:	e7dc      	b.n	a056 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a09c:	2000      	movs	r0, #0
    a09e:	e7de      	b.n	a05e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0a0:	2000      	movs	r0, #0
    auto p = data_ + field_offset;
    a0a2:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a0a4:	b120      	cbz	r0, a0b0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a0a6:	4620      	mov	r0, r4
    a0a8:	f009 f914 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a0ac:	4404      	add	r4, r0
    a0ae:	e002      	b.n	a0b6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a0b0:	2400      	movs	r4, #0
    a0b2:	e000      	b.n	a0b6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a0b4:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a0b6:	2c00      	cmp	r4, #0
    a0b8:	d069      	beq.n	a18e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
    a0ba:	4626      	mov	r6, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a0bc:	4620      	mov	r0, r4
    a0be:	f009 f90f 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a0c2:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a0c4:	4620      	mov	r0, r4
    a0c6:	f009 f911 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0ca:	2804      	cmp	r0, #4
    a0cc:	d903      	bls.n	a0d6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    a0ce:	1d20      	adds	r0, r4, #4
    a0d0:	f009 f90c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a0d4:	e000      	b.n	a0d8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
    a0d6:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a0d8:	b118      	cbz	r0, a0e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    a0da:	4430      	add	r0, r6
    a0dc:	f009 f90c 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a0e0:	e000      	b.n	a0e4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    a0e2:	2000      	movs	r0, #0
        ConvertActivation(schema_params->fused_activation_function());
    a0e4:	b2c0      	uxtb	r0, r0
    a0e6:	f009 fe1d 	bl	13d24 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a0ea:	7028      	strb	r0, [r5, #0]
    return data_ - ReadScalar<soffset_t>(data_);
    a0ec:	4630      	mov	r0, r6
    a0ee:	f009 f8f7 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a0f2:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a0f4:	4620      	mov	r0, r4
    a0f6:	f009 f8f9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a0fa:	2808      	cmp	r0, #8
    a0fc:	d904      	bls.n	a108 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
    a0fe:	f104 0008 	add.w	r0, r4, #8
    a102:	f009 f8f3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a106:	e000      	b.n	a10a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
    a108:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a10a:	b118      	cbz	r0, a114 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x104>
    a10c:	4430      	add	r0, r6
    a10e:	f009 f9b6 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a112:	e000      	b.n	a116 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    a114:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
    a116:	3800      	subs	r0, #0
    a118:	bf18      	it	ne
    a11a:	2001      	movne	r0, #1
    params->keep_num_dims = schema_params->keep_num_dims();
    a11c:	70a8      	strb	r0, [r5, #2]
    return data_ - ReadScalar<soffset_t>(data_);
    a11e:	4630      	mov	r0, r6
    a120:	f009 f8de 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a124:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a126:	4620      	mov	r0, r4
    a128:	f009 f8e0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a12c:	280a      	cmp	r0, #10
    a12e:	d904      	bls.n	a13a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    a130:	f104 000a 	add.w	r0, r4, #10
    a134:	f009 f8da 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a138:	e000      	b.n	a13c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>
    a13a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a13c:	b118      	cbz	r0, a146 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
    a13e:	4430      	add	r0, r6
    a140:	f009 f99d 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    a144:	e000      	b.n	a148 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>
    a146:	2000      	movs	r0, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
    a148:	3800      	subs	r0, #0
    a14a:	bf18      	it	ne
    a14c:	2001      	movne	r0, #1
    params->asymmetric_quantize_inputs =
    a14e:	70e8      	strb	r0, [r5, #3]
    return data_ - ReadScalar<soffset_t>(data_);
    a150:	4630      	mov	r0, r6
    a152:	f009 f8c5 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a156:	1a34      	subs	r4, r6, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a158:	4620      	mov	r0, r4
    a15a:	f009 f8c7 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a15e:	2806      	cmp	r0, #6
    a160:	d903      	bls.n	a16a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    a162:	1da0      	adds	r0, r4, #6
    a164:	f009 f8c2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a168:	e000      	b.n	a16c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15c>
    a16a:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a16c:	b118      	cbz	r0, a176 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x166>
    a16e:	4430      	add	r0, r6
    a170:	f009 f8c2 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    a174:	e000      	b.n	a178 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x168>
    a176:	2000      	movs	r0, #0
    switch (schema_params->weights_format()) {
    a178:	b138      	cbz	r0, a18a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17a>
    a17a:	2801      	cmp	r0, #1
    a17c:	d014      	beq.n	a1a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x198>
        TF_LITE_REPORT_ERROR(error_reporter,
    a17e:	490f      	ldr	r1, [pc, #60]	; (a1bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>)
    a180:	4640      	mov	r0, r8
    a182:	f009 fdf0 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
    a186:	2401      	movs	r4, #1
    a188:	e004      	b.n	a194 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x184>
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
    a18a:	2300      	movs	r3, #0
    a18c:	706b      	strb	r3, [r5, #1]
	_M_t._M_ptr() = pointer();
    a18e:	2400      	movs	r4, #0
    a190:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a192:	603d      	str	r5, [r7, #0]
	if (__ptr != nullptr)
    a194:	9903      	ldr	r1, [sp, #12]
    a196:	b119      	cbz	r1, a1a0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x190>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a198:	9802      	ldr	r0, [sp, #8]
    a19a:	6803      	ldr	r3, [r0, #0]
    a19c:	685b      	ldr	r3, [r3, #4]
    a19e:	4798      	blx	r3
}
    a1a0:	4620      	mov	r0, r4
    a1a2:	b004      	add	sp, #16
    a1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        params->weights_format =
    a1a8:	2301      	movs	r3, #1
    a1aa:	706b      	strb	r3, [r5, #1]
        break;
    a1ac:	e7ef      	b.n	a18e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x17e>
    a1ae:	bf00      	nop
    a1b0:	0006b018 	.word	0x0006b018
    a1b4:	0006afc0 	.word	0x0006afc0
    a1b8:	0006aafc 	.word	0x0006aafc
    a1bc:	0006b034 	.word	0x0006b034

0000a1c0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
    a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1c4:	b084      	sub	sp, #16
    a1c6:	4604      	mov	r4, r0
    a1c8:	4688      	mov	r8, r1
    a1ca:	4615      	mov	r5, r2
    a1cc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a1ce:	f009 fdbc 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a1d2:	682b      	ldr	r3, [r5, #0]
    a1d4:	681b      	ldr	r3, [r3, #0]
    a1d6:	2204      	movs	r2, #4
    a1d8:	211c      	movs	r1, #28
    a1da:	4628      	mov	r0, r5
    a1dc:	4798      	blx	r3
    return new (allocated_memory) T();
    a1de:	4606      	mov	r6, r0
    a1e0:	b138      	cbz	r0, a1f2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x32>
    a1e2:	2300      	movs	r3, #0
    a1e4:	6003      	str	r3, [r0, #0]
    a1e6:	6043      	str	r3, [r0, #4]
    a1e8:	6083      	str	r3, [r0, #8]
    a1ea:	60c3      	str	r3, [r0, #12]
    a1ec:	6103      	str	r3, [r0, #16]
    a1ee:	6143      	str	r3, [r0, #20]
    a1f0:	6183      	str	r3, [r0, #24]
    a1f2:	9502      	str	r5, [sp, #8]
    a1f4:	9603      	str	r6, [sp, #12]
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a1f6:	b336      	cbz	r6, a246 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
    return data_ - ReadScalar<soffset_t>(data_);
    a1f8:	4620      	mov	r0, r4
    a1fa:	f009 f871 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a1fe:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a200:	4628      	mov	r0, r5
    a202:	f009 f873 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a206:	280a      	cmp	r0, #10
    a208:	d92a      	bls.n	a260 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a20a:	f105 000a 	add.w	r0, r5, #10
    a20e:	f009 f86d 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a212:	b338      	cbz	r0, a264 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    a214:	4420      	add	r0, r4
    a216:	f009 f932 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
    a21a:	2802      	cmp	r0, #2
    a21c:	d128      	bne.n	a270 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return data_ - ReadScalar<soffset_t>(data_);
    a21e:	4620      	mov	r0, r4
    a220:	f009 f85e 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a224:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a226:	4628      	mov	r0, r5
    a228:	f009 f860 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a22c:	280c      	cmp	r0, #12
    a22e:	d91b      	bls.n	a268 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
    a230:	f105 000c 	add.w	r0, r5, #12
    a234:	f009 f85a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a238:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a23a:	b1b8      	cbz	r0, a26c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    a23c:	4620      	mov	r0, r4
    a23e:	f009 f849 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a242:	4404      	add	r4, r0
    a244:	e015      	b.n	a272 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a246:	4b68      	ldr	r3, [pc, #416]	; (a3e8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x228>)
    a248:	9301      	str	r3, [sp, #4]
    a24a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    a24e:	9300      	str	r3, [sp, #0]
    a250:	4b66      	ldr	r3, [pc, #408]	; (a3ec <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22c>)
    a252:	4a67      	ldr	r2, [pc, #412]	; (a3f0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x230>)
    a254:	4641      	mov	r1, r8
    a256:	4640      	mov	r0, r8
    a258:	f009 fd94 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a25c:	2401      	movs	r4, #1
    a25e:	e09c      	b.n	a39a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1da>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a260:	2000      	movs	r0, #0
    a262:	e7d6      	b.n	a212 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a264:	2000      	movs	r0, #0
    a266:	e7d8      	b.n	a21a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a268:	2000      	movs	r0, #0
    a26a:	e7e5      	b.n	a238 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a26c:	2400      	movs	r4, #0
    a26e:	e000      	b.n	a272 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb2>
    a270:	2400      	movs	r4, #0
  if (schema_params != nullptr) {
    a272:	2c00      	cmp	r4, #0
    a274:	f000 808d 	beq.w	a392 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d2>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
    a278:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a27a:	4620      	mov	r0, r4
    a27c:	f009 f830 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a280:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a282:	4620      	mov	r0, r4
    a284:	f009 f832 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a288:	2804      	cmp	r0, #4
    a28a:	f240 8090 	bls.w	a3ae <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ee>
    a28e:	1d20      	adds	r0, r4, #4
    a290:	f009 f82c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a294:	2800      	cmp	r0, #0
    a296:	f000 808c 	beq.w	a3b2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f2>
    a29a:	4428      	add	r0, r5
    a29c:	f009 f82c 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
    params->padding = ConvertPadding(schema_params->padding());
    a2a0:	b2c0      	uxtb	r0, r0
    a2a2:	f009 fd49 	bl	13d38 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    a2a6:	7030      	strb	r0, [r6, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
    a2a8:	9e03      	ldr	r6, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a2aa:	4628      	mov	r0, r5
    a2ac:	f009 f818 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2b0:	1a2c      	subs	r4, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2b2:	4620      	mov	r0, r4
    a2b4:	f009 f81a 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2b8:	2806      	cmp	r0, #6
    a2ba:	d97c      	bls.n	a3b6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1f6>
    a2bc:	1da0      	adds	r0, r4, #6
    a2be:	f009 f815 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d079      	beq.n	a3ba <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fa>
    a2c6:	4428      	add	r0, r5
    a2c8:	f009 f80a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_width = schema_params->stride_w();
    a2cc:	6070      	str	r0, [r6, #4]
    a2ce:	9c03      	ldr	r4, [sp, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a2d0:	4628      	mov	r0, r5
    a2d2:	f009 f805 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2d6:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2d8:	4630      	mov	r0, r6
    a2da:	f009 f807 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a2de:	2808      	cmp	r0, #8
    a2e0:	d96d      	bls.n	a3be <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1fe>
    a2e2:	f106 0008 	add.w	r0, r6, #8
    a2e6:	f009 f801 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a2ea:	2800      	cmp	r0, #0
    a2ec:	d069      	beq.n	a3c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x202>
    a2ee:	4428      	add	r0, r5
    a2f0:	f008 fff6 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->stride_height = schema_params->stride_h();
    a2f4:	60a0      	str	r0, [r4, #8]
    return data_ - ReadScalar<soffset_t>(data_);
    a2f6:	4628      	mov	r0, r5
    a2f8:	f008 fff2 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a2fc:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a2fe:	4630      	mov	r0, r6
    a300:	f008 fff4 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a304:	280a      	cmp	r0, #10
    a306:	d95e      	bls.n	a3c6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x206>
    a308:	f106 000a 	add.w	r0, r6, #10
    a30c:	f008 ffee 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a310:	2800      	cmp	r0, #0
    a312:	d05a      	beq.n	a3ca <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20a>
    a314:	4428      	add	r0, r5
    a316:	f008 ffe3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->depth_multiplier = schema_params->depth_multiplier();
    a31a:	60e0      	str	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
    a31c:	4628      	mov	r0, r5
    a31e:	f008 ffdf 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a322:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a324:	4630      	mov	r0, r6
    a326:	f008 ffe1 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a32a:	280c      	cmp	r0, #12
    a32c:	d94f      	bls.n	a3ce <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x20e>
    a32e:	f106 000c 	add.w	r0, r6, #12
    a332:	f008 ffdb 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a336:	2800      	cmp	r0, #0
    a338:	d04b      	beq.n	a3d2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x212>
    a33a:	4428      	add	r0, r5
    a33c:	f008 ffdc 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
        ConvertActivation(schema_params->fused_activation_function());
    a340:	b2c0      	uxtb	r0, r0
    a342:	f009 fcef 	bl	13d24 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
    params->activation =
    a346:	7420      	strb	r0, [r4, #16]
    return data_ - ReadScalar<soffset_t>(data_);
    a348:	4628      	mov	r0, r5
    a34a:	f008 ffc9 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a34e:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a350:	4630      	mov	r0, r6
    a352:	f008 ffcb 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a356:	280e      	cmp	r0, #14
    a358:	d93d      	bls.n	a3d6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x216>
    a35a:	f106 000e 	add.w	r0, r6, #14
    a35e:	f008 ffc5 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a362:	2800      	cmp	r0, #0
    a364:	d039      	beq.n	a3da <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21a>
    a366:	4428      	add	r0, r5
    a368:	f008 ffba 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_width_factor = schema_params->dilation_w_factor();
    a36c:	6160      	str	r0, [r4, #20]
    return data_ - ReadScalar<soffset_t>(data_);
    a36e:	4628      	mov	r0, r5
    a370:	f008 ffb6 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a374:	1a2e      	subs	r6, r5, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a376:	4630      	mov	r0, r6
    a378:	f008 ffb8 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a37c:	2810      	cmp	r0, #16
    a37e:	d92e      	bls.n	a3de <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x21e>
    a380:	f106 0010 	add.w	r0, r6, #16
    a384:	f008 ffb2 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a388:	b358      	cbz	r0, a3e2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x222>
    a38a:	4428      	add	r0, r5
    a38c:	f008 ffa8 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    params->dilation_height_factor = schema_params->dilation_h_factor();
    a390:	61a0      	str	r0, [r4, #24]
    a392:	9b03      	ldr	r3, [sp, #12]
	_M_t._M_ptr() = pointer();
    a394:	2400      	movs	r4, #0
    a396:	9403      	str	r4, [sp, #12]
  *builtin_data = params.release();
    a398:	603b      	str	r3, [r7, #0]
	if (__ptr != nullptr)
    a39a:	9903      	ldr	r1, [sp, #12]
    a39c:	b119      	cbz	r1, a3a6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1e6>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a39e:	9802      	ldr	r0, [sp, #8]
    a3a0:	6803      	ldr	r3, [r0, #0]
    a3a2:	685b      	ldr	r3, [r3, #4]
    a3a4:	4798      	blx	r3
}
    a3a6:	4620      	mov	r0, r4
    a3a8:	b004      	add	sp, #16
    a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3ae:	2000      	movs	r0, #0
    a3b0:	e770      	b.n	a294 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3b2:	2000      	movs	r0, #0
    a3b4:	e774      	b.n	a2a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3b6:	2000      	movs	r0, #0
    a3b8:	e783      	b.n	a2c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x102>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3ba:	2000      	movs	r0, #0
    a3bc:	e786      	b.n	a2cc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3be:	2000      	movs	r0, #0
    a3c0:	e793      	b.n	a2ea <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12a>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3c2:	2000      	movs	r0, #0
    a3c4:	e796      	b.n	a2f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3c6:	2000      	movs	r0, #0
    a3c8:	e7a2      	b.n	a310 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3ca:	2000      	movs	r0, #0
    a3cc:	e7a5      	b.n	a31a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x15a>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3ce:	2000      	movs	r0, #0
    a3d0:	e7b1      	b.n	a336 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x176>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3d2:	2000      	movs	r0, #0
    a3d4:	e7b4      	b.n	a340 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x180>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3d6:	2000      	movs	r0, #0
    a3d8:	e7c3      	b.n	a362 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1a2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3da:	2001      	movs	r0, #1
    a3dc:	e7c6      	b.n	a36c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1ac>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a3de:	2000      	movs	r0, #0
    a3e0:	e7d2      	b.n	a388 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1c8>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a3e2:	2001      	movs	r0, #1
    a3e4:	e7d4      	b.n	a390 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x1d0>
    a3e6:	bf00      	nop
    a3e8:	0006b018 	.word	0x0006b018
    a3ec:	0006afc0 	.word	0x0006afc0
    a3f0:	0006aafc 	.word	0x0006aafc

0000a3f4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
    a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3f8:	b084      	sub	sp, #16
    a3fa:	4604      	mov	r4, r0
    a3fc:	4688      	mov	r8, r1
    a3fe:	4615      	mov	r5, r2
    a400:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
    a402:	f009 fca2 	bl	13d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
    a406:	682b      	ldr	r3, [r5, #0]
    a408:	681b      	ldr	r3, [r3, #0]
    a40a:	2204      	movs	r2, #4
    a40c:	4611      	mov	r1, r2
    a40e:	4628      	mov	r0, r5
    a410:	4798      	blx	r3
    return new (allocated_memory) T();
    a412:	4606      	mov	r6, r0
    a414:	b108      	cbz	r0, a41a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x26>
    a416:	2300      	movs	r3, #0
    a418:	6003      	str	r3, [r0, #0]
    a41a:	9502      	str	r5, [sp, #8]
    a41c:	9603      	str	r6, [sp, #12]

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
    a41e:	b336      	cbz	r6, a46e <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
    return data_ - ReadScalar<soffset_t>(data_);
    a420:	4620      	mov	r0, r4
    a422:	f008 ff5d 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a426:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a428:	4628      	mov	r0, r5
    a42a:	f008 ff5f 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a42e:	280a      	cmp	r0, #10
    a430:	d92a      	bls.n	a488 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>
    a432:	f105 000a 	add.w	r0, r5, #10
    a436:	f008 ff59 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a43a:	b338      	cbz	r0, a48c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    a43c:	4420      	add	r0, r4
    a43e:	f009 f81e 	bl	1347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
    a442:	2809      	cmp	r0, #9
    a444:	d128      	bne.n	a498 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return data_ - ReadScalar<soffset_t>(data_);
    a446:	4620      	mov	r0, r4
    a448:	f008 ff4a 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a44c:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a44e:	4628      	mov	r0, r5
    a450:	f008 ff4c 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a454:	280c      	cmp	r0, #12
    a456:	d91b      	bls.n	a490 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
    a458:	f105 000c 	add.w	r0, r5, #12
    a45c:	f008 ff46 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a460:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a462:	b1b8      	cbz	r0, a494 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
    a464:	4620      	mov	r0, r4
    a466:	f008 ff35 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a46a:	4404      	add	r4, r0
    a46c:	e015      	b.n	a49a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a46e:	4b1d      	ldr	r3, [pc, #116]	; (a4e4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
    a470:	9301      	str	r3, [sp, #4]
    a472:	f240 734c 	movw	r3, #1868	; 0x74c
    a476:	9300      	str	r3, [sp, #0]
    a478:	4b1b      	ldr	r3, [pc, #108]	; (a4e8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
    a47a:	4a1c      	ldr	r2, [pc, #112]	; (a4ec <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
    a47c:	4641      	mov	r1, r8
    a47e:	4640      	mov	r0, r8
    a480:	f009 fc80 	bl	13d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    a484:	2401      	movs	r4, #1
    a486:	e01e      	b.n	a4c6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a488:	2000      	movs	r0, #0
    a48a:	e7d6      	b.n	a43a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a48c:	2000      	movs	r0, #0
    a48e:	e7d8      	b.n	a442 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a490:	2000      	movs	r0, #0
    a492:	e7e5      	b.n	a460 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a494:	2400      	movs	r4, #0
    a496:	e000      	b.n	a49a <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    a498:	2400      	movs	r4, #0

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    a49a:	b18c      	cbz	r4, a4c0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>
    return GetField<float>(VT_BETA, 0.0f);
    a49c:	4625      	mov	r5, r4
    return data_ - ReadScalar<soffset_t>(data_);
    a49e:	4620      	mov	r0, r4
    a4a0:	f008 ff1e 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a4a4:	1a24      	subs	r4, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a4a6:	4620      	mov	r0, r4
    a4a8:	f008 ff20 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4ac:	2804      	cmp	r0, #4
    a4ae:	d914      	bls.n	a4da <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
    a4b0:	1d20      	adds	r0, r4, #4
    a4b2:	f008 ff1b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4b6:	b190      	cbz	r0, a4de <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xea>
    a4b8:	4428      	add	r0, r5
    a4ba:	f008 ffe7 	bl	1348c <_ZN11flatbuffers10ReadScalarIfEET_PKv>
    params->beta = schema_params->beta();
    a4be:	6030      	str	r0, [r6, #0]
	_M_t._M_ptr() = pointer();
    a4c0:	2400      	movs	r4, #0
    a4c2:	9403      	str	r4, [sp, #12]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
    a4c4:	603e      	str	r6, [r7, #0]
	if (__ptr != nullptr)
    a4c6:	9903      	ldr	r1, [sp, #12]
    a4c8:	b119      	cbz	r1, a4d2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xde>
    void operator()(void* data) { allocator_->Deallocate(data); }
    a4ca:	9802      	ldr	r0, [sp, #8]
    a4cc:	6803      	ldr	r3, [r0, #0]
    a4ce:	685b      	ldr	r3, [r3, #4]
    a4d0:	4798      	blx	r3
  return kTfLiteOk;
}
    a4d2:	4620      	mov	r0, r4
    a4d4:	b004      	add	sp, #16
    a4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a4da:	2000      	movs	r0, #0
    a4dc:	e7eb      	b.n	a4b6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a4de:	2000      	movs	r0, #0
    a4e0:	e7ed      	b.n	a4be <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
    a4e2:	bf00      	nop
    a4e4:	0006b018 	.word	0x0006b018
    a4e8:	0006afc0 	.word	0x0006afc0
    a4ec:	0006aafc 	.word	0x0006aafc

0000a4f0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
    a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4f4:	4604      	mov	r4, r0
    a4f6:	4688      	mov	r8, r1
    a4f8:	4691      	mov	r9, r2
    a4fa:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
    a4fc:	2300      	movs	r3, #0
    a4fe:	6033      	str	r3, [r6, #0]
  auto builtin_code = GetBuiltinCode(opcode);
    a500:	f009 fc4f 	bl	13da2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    a504:	4605      	mov	r5, r0
    return data_ - ReadScalar<soffset_t>(data_);
    a506:	4620      	mov	r0, r4
    a508:	f008 feea 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a50c:	1a27      	subs	r7, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a50e:	4638      	mov	r0, r7
    a510:	f008 feec 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a514:	2808      	cmp	r0, #8
    a516:	d904      	bls.n	a522 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x32>
    a518:	f107 0008 	add.w	r0, r7, #8
    a51c:	f008 fee6 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    a520:	e000      	b.n	a524 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x34>
    a522:	2000      	movs	r0, #0
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
    a524:	b120      	cbz	r0, a530 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
    a526:	4420      	add	r0, r4
    a528:	f008 feda 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a52c:	4607      	mov	r7, r0
    a52e:	e000      	b.n	a532 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
    a530:	2701      	movs	r7, #1
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
    a532:	2d91      	cmp	r5, #145	; 0x91
    a534:	d80d      	bhi.n	a552 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x62>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
    a536:	2d20      	cmp	r5, #32
    a538:	d01c      	beq.n	a574 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
    *registration = op_resolver.FindOp(builtin_code, version);
    a53a:	f8d8 3000 	ldr.w	r3, [r8]
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	463a      	mov	r2, r7
    a542:	4629      	mov	r1, r5
    a544:	4640      	mov	r0, r8
    a546:	4798      	blx	r3
    a548:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a54a:	b148      	cbz	r0, a560 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x70>
  TfLiteStatus status = kTfLiteOk;
    a54c:	2000      	movs	r0, #0
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
    a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(
    a552:	462a      	mov	r2, r5
    a554:	491c      	ldr	r1, [pc, #112]	; (a5c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd8>)
    a556:	4648      	mov	r0, r9
    a558:	f009 fc05 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a55c:	2001      	movs	r0, #1
    a55e:	e7f6      	b.n	a54e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      TF_LITE_REPORT_ERROR(
    a560:	463b      	mov	r3, r7
    a562:	4a1a      	ldr	r2, [pc, #104]	; (a5cc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdc>)
    a564:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    a568:	4919      	ldr	r1, [pc, #100]	; (a5d0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
    a56a:	4648      	mov	r0, r9
    a56c:	f009 fbfb 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
    a570:	2001      	movs	r0, #1
    a572:	e7ec      	b.n	a54e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return data_ - ReadScalar<soffset_t>(data_);
    a574:	4620      	mov	r0, r4
    a576:	f008 feb3 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    a57a:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
    a57c:	4628      	mov	r0, r5
    a57e:	f008 feb5 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a582:	2806      	cmp	r0, #6
    a584:	d914      	bls.n	a5b0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>
    a586:	1da8      	adds	r0, r5, #6
    a588:	f008 feb0 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
    a58c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a58e:	b188      	cbz	r0, a5b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>
    a590:	4620      	mov	r0, r4
    a592:	f008 fe9f 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
    a596:	1821      	adds	r1, r4, r0
  } else if (!opcode->custom_code()) {
    a598:	b171      	cbz	r1, a5b8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>
    *registration = op_resolver.FindOp(name, version);
    a59a:	f8d8 3000 	ldr.w	r3, [r8]
    a59e:	685b      	ldr	r3, [r3, #4]
    a5a0:	463a      	mov	r2, r7
    a5a2:	3104      	adds	r1, #4
    a5a4:	4640      	mov	r0, r8
    a5a6:	4798      	blx	r3
    a5a8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
    a5aa:	b158      	cbz	r0, a5c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  TfLiteStatus status = kTfLiteOk;
    a5ac:	2000      	movs	r0, #0
    a5ae:	e7ce      	b.n	a54e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
    a5b0:	2000      	movs	r0, #0
    a5b2:	e7eb      	b.n	a58c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
    a5b4:	2100      	movs	r1, #0
    a5b6:	e7ef      	b.n	a598 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
    TF_LITE_REPORT_ERROR(
    a5b8:	4906      	ldr	r1, [pc, #24]	; (a5d4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
    a5ba:	4648      	mov	r0, r9
    a5bc:	f009 fbd3 	bl	13d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
    a5c0:	2001      	movs	r0, #1
    a5c2:	e7c4      	b.n	a54e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
      status = kTfLiteError;
    a5c4:	2001      	movs	r0, #1
    a5c6:	e7c2      	b.n	a54e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5e>
    a5c8:	0006b060 	.word	0x0006b060
    a5cc:	00069da8 	.word	0x00069da8
    a5d0:	0006b0b4 	.word	0x0006b0b4
    a5d4:	0006b158 	.word	0x0006b158

0000a5d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
    a5d8:	2801      	cmp	r0, #1
    a5da:	d009      	beq.n	a5f0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x18>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
    a5dc:	2803      	cmp	r0, #3
    a5de:	d00c      	beq.n	a5fa <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x22>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    a5e0:	2802      	cmp	r0, #2
    a5e2:	d00f      	beq.n	a604 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    a5e4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    a5e8:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a5ea:	4b09      	ldr	r3, [pc, #36]	; (a610 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a5ec:	6013      	str	r3, [r2, #0]
  }
}
    a5ee:	4770      	bx	lr
    *activation_min = 0;
    a5f0:	2300      	movs	r3, #0
    a5f2:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
    a5f4:	4b06      	ldr	r3, [pc, #24]	; (a610 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
    a5f6:	6013      	str	r3, [r2, #0]
    a5f8:	4770      	bx	lr
    *activation_min = 0;
    a5fa:	2300      	movs	r3, #0
    a5fc:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
    a5fe:	4b05      	ldr	r3, [pc, #20]	; (a614 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x3c>)
    a600:	6013      	str	r3, [r2, #0]
    a602:	4770      	bx	lr
    *activation_min = -1;
    a604:	4b04      	ldr	r3, [pc, #16]	; (a618 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x40>)
    a606:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
    a608:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    a60c:	6013      	str	r3, [r2, #0]
    a60e:	4770      	bx	lr
    a610:	7f7fffff 	.word	0x7f7fffff
    a614:	40c00000 	.word	0x40c00000
    a618:	bf800000 	.word	0xbf800000

0000a61c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
    a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a620:	b0a5      	sub	sp, #148	; 0x94
    a622:	9118      	str	r1, [sp, #96]	; 0x60
    a624:	9219      	str	r2, [sp, #100]	; 0x64
    a626:	461d      	mov	r5, r3
    a628:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
    a62c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    a62e:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  const int stride_width = params.stride_width;
    a632:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    a636:	920e      	str	r2, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
    a638:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    a63c:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
    a63e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    a642:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
    a644:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    a648:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
    a64a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    a64e:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
    a650:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    a654:	9213      	str	r2, [sp, #76]	; 0x4c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
    a656:	6a82      	ldr	r2, [r0, #40]	; 0x28
    a658:	921d      	str	r2, [sp, #116]	; 0x74
  const int32_t output_activation_max = params.quantized_activation_max;
    a65a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    a65c:	911c      	str	r1, [sp, #112]	; 0x70

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a65e:	428a      	cmp	r2, r1
    a660:	f300 8086 	bgt.w	a770 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x154>
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
  }

  inline int32_t DimensionsCount() const { return size_; }
    a664:	682a      	ldr	r2, [r5, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a666:	2a04      	cmp	r2, #4
    a668:	f040 8084 	bne.w	a774 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x158>
    a66c:	f8de 2000 	ldr.w	r2, [lr]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a670:	2a04      	cmp	r2, #4
    a672:	f040 8081 	bne.w	a778 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x15c>
    a676:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a67a:	2a04      	cmp	r2, #4
    a67c:	d17e      	bne.n	a77c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x160>
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
    TFLITE_DCHECK_LT(i, size_);
    a67e:	682a      	ldr	r2, [r5, #0]
    a680:	2a00      	cmp	r2, #0
    a682:	dd7d      	ble.n	a780 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x164>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a684:	2a05      	cmp	r2, #5
    a686:	dd7d      	ble.n	a784 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x168>
    a688:	686a      	ldr	r2, [r5, #4]
    a68a:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a68c:	f8d9 2000 	ldr.w	r2, [r9]
    a690:	2a00      	cmp	r2, #0
    a692:	dd79      	ble.n	a788 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a694:	2a05      	cmp	r2, #5
    a696:	dd79      	ble.n	a78c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x170>
    a698:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a69c:	6812      	ldr	r2, [r2, #0]
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a69e:	428a      	cmp	r2, r1
    a6a0:	d177      	bne.n	a792 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a6a2:	9123      	str	r1, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    a6a4:	f8d9 2000 	ldr.w	r2, [r9]
    a6a8:	2a00      	cmp	r2, #0
    a6aa:	dd74      	ble.n	a796 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6ac:	2a05      	cmp	r2, #5
    a6ae:	dd74      	ble.n	a79a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x17e>
    a6b0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a6b4:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a6b6:	9222      	str	r2, [sp, #136]	; 0x88
      if (__b < __a)
    a6b8:	4291      	cmp	r1, r2
    a6ba:	dc71      	bgt.n	a7a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x184>
      return __a;
    a6bc:	aa23      	add	r2, sp, #140	; 0x8c
    a6be:	6812      	ldr	r2, [r2, #0]
    a6c0:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    a6c2:	682a      	ldr	r2, [r5, #0]
    a6c4:	2a03      	cmp	r2, #3
    a6c6:	dd6d      	ble.n	a7a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6c8:	2a05      	cmp	r2, #5
    a6ca:	dd6d      	ble.n	a7a8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
    a6cc:	686a      	ldr	r2, [r5, #4]
    a6ce:	68d1      	ldr	r1, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    a6d0:	f8de 2000 	ldr.w	r2, [lr]
    a6d4:	2a03      	cmp	r2, #3
    a6d6:	dd69      	ble.n	a7ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x190>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6d8:	2a05      	cmp	r2, #5
    a6da:	dd69      	ble.n	a7b0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x194>
    a6dc:	f8de 2004 	ldr.w	r2, [lr, #4]
    a6e0:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a6e2:	428a      	cmp	r2, r1
    a6e4:	d167      	bne.n	a7b6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a6e6:	9121      	str	r1, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    a6e8:	f8de 2000 	ldr.w	r2, [lr]
    a6ec:	2a03      	cmp	r2, #3
    a6ee:	dd64      	ble.n	a7ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a6f0:	2a05      	cmp	r2, #5
    a6f2:	dd64      	ble.n	a7be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a2>
    a6f4:	f8de 2004 	ldr.w	r2, [lr, #4]
    a6f8:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a6fa:	9220      	str	r2, [sp, #128]	; 0x80
      if (__b < __a)
    a6fc:	4291      	cmp	r1, r2
    a6fe:	dc61      	bgt.n	a7c4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1a8>
      return __a;
    a700:	aa21      	add	r2, sp, #132	; 0x84
    a702:	6812      	ldr	r2, [r2, #0]
    a704:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    a706:	f8de 2000 	ldr.w	r2, [lr]
    a70a:	2a00      	cmp	r2, #0
    a70c:	dd5c      	ble.n	a7c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a70e:	2a05      	cmp	r2, #5
    a710:	dd5c      	ble.n	a7cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b0>
    a712:	f8de 2004 	ldr.w	r2, [lr, #4]
    a716:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    a718:	f8d9 2000 	ldr.w	r2, [r9]
    a71c:	2a03      	cmp	r2, #3
    a71e:	dd58      	ble.n	a7d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a720:	2a05      	cmp	r2, #5
    a722:	dd58      	ble.n	a7d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ba>
    a724:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a728:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a72a:	428a      	cmp	r2, r1
    a72c:	d156      	bne.n	a7dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a72e:	911f      	str	r1, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
    a730:	f8d9 2000 	ldr.w	r2, [r9]
    a734:	2a03      	cmp	r2, #3
    a736:	dd53      	ble.n	a7e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a738:	2a05      	cmp	r2, #5
    a73a:	dd53      	ble.n	a7e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c8>
    a73c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a740:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    a742:	921e      	str	r2, [sp, #120]	; 0x78
      if (__b < __a)
    a744:	4291      	cmp	r1, r2
    a746:	dc50      	bgt.n	a7ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ce>
      return __a;
    a748:	aa1f      	add	r2, sp, #124	; 0x7c
    a74a:	6812      	ldr	r2, [r2, #0]
    a74c:	9205      	str	r2, [sp, #20]
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
    a74e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    a750:	2a00      	cmp	r2, #0
    a752:	d051      	beq.n	a7f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a754:	6818      	ldr	r0, [r3, #0]
    a756:	2805      	cmp	r0, #5
    a758:	dd49      	ble.n	a7ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d2>
    a75a:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    a75c:	2100      	movs	r1, #0
    int buffer_size = 1;
    a75e:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
    a760:	4281      	cmp	r1, r0
    a762:	da46      	bge.n	a7f2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1d6>
      buffer_size *= dims_data[i];
    a764:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    a768:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
    a76c:	3101      	adds	r1, #1
    a76e:	e7f7      	b.n	a760 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x144>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    a770:	f00b fd13 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    a774:	f00b fd11 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    a778:	f00b fd0f 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    a77c:	f00b fd0d 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    a780:	f00b fd0b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a784:	6869      	ldr	r1, [r5, #4]
    a786:	e781      	b.n	a68c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
    TFLITE_DCHECK_LT(i, size_);
    a788:	f00b fd07 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a78c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a790:	e785      	b.n	a69e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x82>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a792:	f00b fd02 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    a796:	f00b fd00 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a79a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    a79e:	e78a      	b.n	a6b6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x9a>
	return __b;
    a7a0:	aa22      	add	r2, sp, #136	; 0x88
    a7a2:	e78c      	b.n	a6be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xa2>
    TFLITE_DCHECK_LT(i, size_);
    a7a4:	f00b fcf9 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7a8:	6929      	ldr	r1, [r5, #16]
    a7aa:	e791      	b.n	a6d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xb4>
    TFLITE_DCHECK_LT(i, size_);
    a7ac:	f00b fcf5 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7b0:	f8de 2010 	ldr.w	r2, [lr, #16]
    a7b4:	e795      	b.n	a6e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a7b6:	f00b fcf0 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    a7ba:	f00b fcee 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7be:	f8de 2010 	ldr.w	r2, [lr, #16]
    a7c2:	e79a      	b.n	a6fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xde>
    a7c4:	aa20      	add	r2, sp, #128	; 0x80
    a7c6:	e79c      	b.n	a702 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_LT(i, size_);
    a7c8:	f00b fce7 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7cc:	f8de 1004 	ldr.w	r1, [lr, #4]
    a7d0:	e7a2      	b.n	a718 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xfc>
    TFLITE_DCHECK_LT(i, size_);
    a7d2:	f00b fce2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a7da:	e7a6      	b.n	a72a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    a7dc:	f00b fcdd 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    a7e0:	f00b fcdb 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7e4:	f8d9 2010 	ldr.w	r2, [r9, #16]
    a7e8:	e7ab      	b.n	a742 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x126>
    a7ea:	aa1e      	add	r2, sp, #120	; 0x78
    a7ec:	e7ad      	b.n	a74a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x12e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    a7ee:	3304      	adds	r3, #4
    a7f0:	e7b4      	b.n	a75c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x140>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a7f2:	9b05      	ldr	r3, [sp, #20]
    a7f4:	429c      	cmp	r4, r3
    a7f6:	d160      	bne.n	a8ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x29e>
    TFLITE_DCHECK_LT(i, size_);
    a7f8:	682b      	ldr	r3, [r5, #0]
    a7fa:	2b01      	cmp	r3, #1
    a7fc:	dd5f      	ble.n	a8be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a7fe:	2b05      	cmp	r3, #5
    a800:	dd5f      	ble.n	a8c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2a6>
    a802:	686b      	ldr	r3, [r5, #4]
    a804:	685b      	ldr	r3, [r3, #4]
    a806:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    a808:	682b      	ldr	r3, [r5, #0]
    a80a:	2b02      	cmp	r3, #2
    a80c:	dd5c      	ble.n	a8c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a80e:	2b05      	cmp	r3, #5
    a810:	dd5c      	ble.n	a8cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b0>
    a812:	686b      	ldr	r3, [r5, #4]
    a814:	689b      	ldr	r3, [r3, #8]
    a816:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    a818:	f8de 3000 	ldr.w	r3, [lr]
    a81c:	2b01      	cmp	r3, #1
    a81e:	dd58      	ble.n	a8d2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a820:	2b05      	cmp	r3, #5
    a822:	dd58      	ble.n	a8d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ba>
    a824:	f8de 3004 	ldr.w	r3, [lr, #4]
    a828:	685b      	ldr	r3, [r3, #4]
    a82a:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    a82c:	f8de 3000 	ldr.w	r3, [lr]
    a830:	2b02      	cmp	r3, #2
    a832:	dd54      	ble.n	a8de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a834:	2b05      	cmp	r3, #5
    a836:	dd54      	ble.n	a8e2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c6>
    a838:	f8de 3004 	ldr.w	r3, [lr, #4]
    a83c:	689b      	ldr	r3, [r3, #8]
    a83e:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    a840:	f8d9 3000 	ldr.w	r3, [r9]
    a844:	2b01      	cmp	r3, #1
    a846:	dd50      	ble.n	a8ea <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a848:	2b05      	cmp	r3, #5
    a84a:	dd50      	ble.n	a8ee <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2d2>
    a84c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a850:	685b      	ldr	r3, [r3, #4]
    a852:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    a854:	f8d9 3000 	ldr.w	r3, [r9]
    a858:	2b02      	cmp	r3, #2
    a85a:	dd4c      	ble.n	a8f6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2da>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a85c:	2b05      	cmp	r3, #5
    a85e:	dd4c      	ble.n	a8fa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2de>
    a860:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a864:	689b      	ldr	r3, [r3, #8]
    a866:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
    a868:	2300      	movs	r3, #0
    a86a:	9300      	str	r3, [sp, #0]
    a86c:	46f0      	mov	r8, lr
    a86e:	464c      	mov	r4, r9
    a870:	46a9      	mov	r9, r5
    a872:	9b00      	ldr	r3, [sp, #0]
    a874:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a876:	4293      	cmp	r3, r2
    a878:	f280 8190 	bge.w	ab9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x580>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    a87c:	2300      	movs	r3, #0
    a87e:	9301      	str	r3, [sp, #4]
    a880:	46ce      	mov	lr, r9
    a882:	46c1      	mov	r9, r8
    a884:	9b01      	ldr	r3, [sp, #4]
    a886:	9907      	ldr	r1, [sp, #28]
    a888:	428b      	cmp	r3, r1
    a88a:	f280 8181 	bge.w	ab90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x574>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    a88e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a890:	fb02 f303 	mul.w	r3, r2, r3
    a894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a896:	1a9b      	subs	r3, r3, r2
    a898:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    a89a:	2300      	movs	r3, #0
    a89c:	9304      	str	r3, [sp, #16]
    a89e:	46f0      	mov	r8, lr
    a8a0:	9b04      	ldr	r3, [sp, #16]
    a8a2:	9906      	ldr	r1, [sp, #24]
    a8a4:	428b      	cmp	r3, r1
    a8a6:	f280 816e 	bge.w	ab86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x56a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    a8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a8ac:	fb02 f303 	mul.w	r3, r2, r3
    a8b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a8b2:	1a9b      	subs	r3, r3, r2
    a8b4:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    a8b6:	2100      	movs	r1, #0
    a8b8:	e135      	b.n	ab26 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x50a>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    a8ba:	f00b fc6e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    a8be:	f00b fc6c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8c2:	68ab      	ldr	r3, [r5, #8]
    a8c4:	930b      	str	r3, [sp, #44]	; 0x2c
    a8c6:	e79f      	b.n	a808 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    a8c8:	f00b fc67 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8cc:	68eb      	ldr	r3, [r5, #12]
    a8ce:	930a      	str	r3, [sp, #40]	; 0x28
    a8d0:	e7a2      	b.n	a818 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1fc>
    TFLITE_DCHECK_LT(i, size_);
    a8d2:	f00b fc62 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8d6:	f8de 3008 	ldr.w	r3, [lr, #8]
    a8da:	9309      	str	r3, [sp, #36]	; 0x24
    a8dc:	e7a6      	b.n	a82c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x210>
    TFLITE_DCHECK_LT(i, size_);
    a8de:	f00b fc5c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8e2:	f8de 300c 	ldr.w	r3, [lr, #12]
    a8e6:	9308      	str	r3, [sp, #32]
    a8e8:	e7aa      	b.n	a840 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x224>
    TFLITE_DCHECK_LT(i, size_);
    a8ea:	f00b fc56 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
    a8f2:	9307      	str	r3, [sp, #28]
    a8f4:	e7ae      	b.n	a854 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x238>
    TFLITE_DCHECK_LT(i, size_);
    a8f6:	f00b fc50 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    a8fa:	f8d9 300c 	ldr.w	r3, [r9, #12]
    a8fe:	9306      	str	r3, [sp, #24]
    a900:	e7b2      	b.n	a868 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x24c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a902:	f00b fc4a 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a906:	f00b fc48 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a90a:	f00b fc46 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a90e:	f00b fc44 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a912:	f00b fc42 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a916:	f00b fc40 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a91a:	f00b fc3e 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a91e:	f00b fc3c 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a922:	f00b fc3a 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a926:	f00b fc38 	bl	1619a <abort>
    a92a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    a92c:	3501      	adds	r5, #1
    a92e:	9b08      	ldr	r3, [sp, #32]
    a930:	429d      	cmp	r5, r3
    a932:	da68      	bge.n	aa06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    a934:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a936:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a938:	fb03 2205 	mla	r2, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    a93c:	2a00      	cmp	r2, #0
    a93e:	dbf5      	blt.n	a92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a942:	429a      	cmp	r2, r3
    a944:	daf2      	bge.n	a92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a946:	2f00      	cmp	r7, #0
    a948:	dbf0      	blt.n	a92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a94c:	429f      	cmp	r7, r3
    a94e:	daed      	bge.n	a92c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x310>
    a950:	2300      	movs	r3, #0
    a952:	9433      	str	r4, [sp, #204]	; 0xcc

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    a954:	9c16      	ldr	r4, [sp, #88]	; 0x58
    a956:	42a3      	cmp	r3, r4
    a958:	dae7      	bge.n	a92a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a95a:	f8d8 4000 	ldr.w	r4, [r8]
    a95e:	2c04      	cmp	r4, #4
    a960:	d1cf      	bne.n	a902 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a962:	2800      	cmp	r0, #0
    a964:	dbcf      	blt.n	a906 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
    a966:	f8d8 4004 	ldr.w	r4, [r8, #4]
    a96a:	42a0      	cmp	r0, r4
    a96c:	dacb      	bge.n	a906 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a96e:	2f00      	cmp	r7, #0
    a970:	dbcb      	blt.n	a90a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
    a972:	f8d8 a008 	ldr.w	sl, [r8, #8]
    a976:	4557      	cmp	r7, sl
    a978:	dac7      	bge.n	a90a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a97a:	2a00      	cmp	r2, #0
    a97c:	dbc7      	blt.n	a90e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
    a97e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
    a982:	4572      	cmp	r2, lr
    a984:	dac3      	bge.n	a90e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a986:	2b00      	cmp	r3, #0
    a988:	dbc3      	blt.n	a912 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
    a98a:	f8d8 c010 	ldr.w	ip, [r8, #16]
    a98e:	4563      	cmp	r3, ip
    a990:	dabf      	bge.n	a912 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a992:	fb0a 7a00 	mla	sl, sl, r0, r7
    a996:	fb0a 2a0e 	mla	sl, sl, lr, r2
    a99a:	fb0a 3c0c 	mla	ip, sl, ip, r3
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
    a99e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
    a9a0:	f934 e01c 	ldrsh.w	lr, [r4, ip, lsl #1]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    a9a4:	f8d9 4000 	ldr.w	r4, [r9]
    a9a8:	2c04      	cmp	r4, #4
    a9aa:	d1b4      	bne.n	a916 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    a9ac:	2900      	cmp	r1, #0
    a9ae:	dbb4      	blt.n	a91a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
    a9b0:	f8d9 4004 	ldr.w	r4, [r9, #4]
    a9b4:	42a1      	cmp	r1, r4
    a9b6:	dab0      	bge.n	a91a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2fe>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    a9b8:	2e00      	cmp	r6, #0
    a9ba:	dbb0      	blt.n	a91e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
    a9bc:	f8d9 c008 	ldr.w	ip, [r9, #8]
    a9c0:	4566      	cmp	r6, ip
    a9c2:	daac      	bge.n	a91e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x302>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    a9c4:	2d00      	cmp	r5, #0
    a9c6:	dbac      	blt.n	a922 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
    a9c8:	f8d9 b00c 	ldr.w	fp, [r9, #12]
    a9cc:	455d      	cmp	r5, fp
    a9ce:	daa8      	bge.n	a922 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x306>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	dba8      	blt.n	a926 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
    a9d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
    a9d8:	4553      	cmp	r3, sl
    a9da:	daa4      	bge.n	a926 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x30a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    a9dc:	fb0c 6c01 	mla	ip, ip, r1, r6
    a9e0:	fb0c 5c0b 	mla	ip, ip, fp, r5
    a9e4:	fb0c 3c0a 	mla	ip, ip, sl, r3
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    a9e8:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    a9ea:	f914 c00c 	ldrsb.w	ip, [r4, ip]
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
    a9ee:	fb0c fe0e 	mul.w	lr, ip, lr
    a9f2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    a9f6:	eb1a 0a0e 	adds.w	sl, sl, lr
    a9fa:	eb4b 7bee 	adc.w	fp, fp, lr, asr #31
    a9fe:	e9cd ab02 	strd	sl, fp, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    aa02:	3301      	adds	r3, #1
    aa04:	e7a6      	b.n	a954 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x338>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    aa06:	3601      	adds	r6, #1
    aa08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aa0a:	429e      	cmp	r6, r3
    aa0c:	da06      	bge.n	aa1c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    aa0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aa10:	9a14      	ldr	r2, [sp, #80]	; 0x50
    aa12:	fb03 2706 	mla	r7, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    aa16:	2500      	movs	r5, #0
    aa18:	9800      	ldr	r0, [sp, #0]
    aa1a:	e788      	b.n	a92e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x312>
    aa1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
              }
            }
          }
          if (bias_data) {
    aa20:	9832      	ldr	r0, [sp, #200]	; 0xc8
    aa22:	b130      	cbz	r0, aa32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x416>
            acc += bias_data[out_channel];
    aa24:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    aa28:	6828      	ldr	r0, [r5, #0]
    aa2a:	686d      	ldr	r5, [r5, #4]
    aa2c:	1812      	adds	r2, r2, r0
    aa2e:	eb45 0303 	adc.w	r3, r5, r3
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
    aa32:	9818      	ldr	r0, [sp, #96]	; 0x60
    aa34:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    aa38:	9d19      	ldr	r5, [sp, #100]	; 0x64
    aa3a:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
    aa3e:	2800      	cmp	r0, #0
    aa40:	db7a      	blt.n	ab38 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x51c>
  assert(shift >= -31 && shift < 8);
    aa42:	f105 061f 	add.w	r6, r5, #31
    aa46:	2e26      	cmp	r6, #38	; 0x26
    aa48:	d87c      	bhi.n	ab44 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x528>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    aa4a:	1c16      	adds	r6, r2, #0
    aa4c:	960c      	str	r6, [sp, #48]	; 0x30
    aa4e:	f543 4600 	adc.w	r6, r3, #32768	; 0x8000
    aa52:	960d      	str	r6, [sp, #52]	; 0x34
    aa54:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    aa58:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    aa5c:	bf08      	it	eq
    aa5e:	2e00      	cmpeq	r6, #0
    aa60:	d276      	bcs.n	ab50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x534>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    aa62:	4e50      	ldr	r6, [pc, #320]	; (aba4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x588>)
    aa64:	42b0      	cmp	r0, r6
    aa66:	dc79      	bgt.n	ab5c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x540>
    aa68:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
    aa6c:	1400      	asrs	r0, r0, #16
                                   : 0x7FFF;
  int total_shift = 15 - shift;
    aa6e:	f1c5 0c0f 	rsb	ip, r5, #15
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
    aa72:	17c7      	asrs	r7, r0, #31
    aa74:	fb02 f607 	mul.w	r6, r2, r7
    aa78:	fb00 6603 	mla	r6, r0, r3, r6
    aa7c:	fba2 2300 	umull	r2, r3, r2, r0
    aa80:	4433      	add	r3, r6
    aa82:	f1c5 070e 	rsb	r7, r5, #14
    aa86:	2001      	movs	r0, #1
    aa88:	f1a7 0a20 	sub.w	sl, r7, #32
    aa8c:	f1c7 0e20 	rsb	lr, r7, #32
    aa90:	fa00 f60a 	lsl.w	r6, r0, sl
    aa94:	fa20 fe0e 	lsr.w	lr, r0, lr
    aa98:	ea46 060e 	orr.w	r6, r6, lr
    aa9c:	40b8      	lsls	r0, r7
    aa9e:	1810      	adds	r0, r2, r0
    aaa0:	eb43 0606 	adc.w	r6, r3, r6
  int32_t result = x >> total_shift;
    aaa4:	3511      	adds	r5, #17
    aaa6:	f1bc 0320 	subs.w	r3, ip, #32
    aaaa:	fa20 f00c 	lsr.w	r0, r0, ip
    aaae:	fa06 f505 	lsl.w	r5, r6, r5
    aab2:	ea40 0005 	orr.w	r0, r0, r5
    aab6:	d402      	bmi.n	aabe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4a2>
    aab8:	fa46 f303 	asr.w	r3, r6, r3
    aabc:	4318      	orrs	r0, r3
              acc, output_multiplier[out_channel], output_shift[out_channel]);
    aabe:	901b      	str	r0, [sp, #108]	; 0x6c
      if (__a < __b)
    aac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aac2:	4283      	cmp	r3, r0
    aac4:	dc4d      	bgt.n	ab62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x546>
      return __a;
    aac6:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::max(scaled_acc, output_activation_min);
    aac8:	681a      	ldr	r2, [r3, #0]
    aaca:	921b      	str	r2, [sp, #108]	; 0x6c
      if (__b < __a)
    aacc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    aace:	429a      	cmp	r2, r3
    aad0:	dc49      	bgt.n	ab66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54a>
      return __a;
    aad2:	ab1b      	add	r3, sp, #108	; 0x6c
          scaled_acc = std::min(scaled_acc, output_activation_max);
    aad4:	681a      	ldr	r2, [r3, #0]
    aad6:	921b      	str	r2, [sp, #108]	; 0x6c
  inline int32_t DimensionsCount() const { return size_; }
    aad8:	6823      	ldr	r3, [r4, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aada:	2b04      	cmp	r3, #4
    aadc:	d145      	bne.n	ab6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x54e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aade:	9800      	ldr	r0, [sp, #0]
    aae0:	2800      	cmp	r0, #0
    aae2:	db44      	blt.n	ab6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
    aae4:	6863      	ldr	r3, [r4, #4]
    aae6:	4298      	cmp	r0, r3
    aae8:	da41      	bge.n	ab6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x552>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aaea:	9b01      	ldr	r3, [sp, #4]
    aaec:	2b00      	cmp	r3, #0
    aaee:	db40      	blt.n	ab72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
    aaf0:	68a5      	ldr	r5, [r4, #8]
    aaf2:	42ab      	cmp	r3, r5
    aaf4:	da3d      	bge.n	ab72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x556>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    aaf6:	9b04      	ldr	r3, [sp, #16]
    aaf8:	2b00      	cmp	r3, #0
    aafa:	db3c      	blt.n	ab76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
    aafc:	68e0      	ldr	r0, [r4, #12]
    aafe:	4283      	cmp	r3, r0
    ab00:	da39      	bge.n	ab76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ab02:	2900      	cmp	r1, #0
    ab04:	db39      	blt.n	ab7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
    ab06:	6923      	ldr	r3, [r4, #16]
    ab08:	4299      	cmp	r1, r3
    ab0a:	da36      	bge.n	ab7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x55e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    ab0c:	9e00      	ldr	r6, [sp, #0]
    ab0e:	9f01      	ldr	r7, [sp, #4]
    ab10:	fb05 7506 	mla	r5, r5, r6, r7
    ab14:	9e04      	ldr	r6, [sp, #16]
    ab16:	fb05 6000 	mla	r0, r5, r0, r6
    ab1a:	fb00 1303 	mla	r3, r0, r3, r1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    ab1e:	9834      	ldr	r0, [sp, #208]	; 0xd0
    ab20:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    ab24:	3101      	adds	r1, #1
    ab26:	9b05      	ldr	r3, [sp, #20]
    ab28:	4299      	cmp	r1, r3
    ab2a:	da28      	bge.n	ab7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x562>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    ab2c:	2600      	movs	r6, #0
          std::int64_t acc = 0;
    ab2e:	2200      	movs	r2, #0
    ab30:	2300      	movs	r3, #0
    ab32:	e9cd 2302 	strd	r2, r3, [sp, #8]
    ab36:	e767      	b.n	aa08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3ec>
  assert(quantized_multiplier >= 0);
    ab38:	4b1b      	ldr	r3, [pc, #108]	; (aba8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x58c>)
    ab3a:	4a1c      	ldr	r2, [pc, #112]	; (abac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    ab3c:	21b3      	movs	r1, #179	; 0xb3
    ab3e:	481c      	ldr	r0, [pc, #112]	; (abb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    ab40:	f005 ff3e 	bl	109c0 <__assert_func>
  assert(shift >= -31 && shift < 8);
    ab44:	4b1b      	ldr	r3, [pc, #108]	; (abb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x598>)
    ab46:	4a19      	ldr	r2, [pc, #100]	; (abac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    ab48:	21b4      	movs	r1, #180	; 0xb4
    ab4a:	4819      	ldr	r0, [pc, #100]	; (abb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    ab4c:	f005 ff38 	bl	109c0 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
    ab50:	4b19      	ldr	r3, [pc, #100]	; (abb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x59c>)
    ab52:	4a16      	ldr	r2, [pc, #88]	; (abac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x590>)
    ab54:	21b5      	movs	r1, #181	; 0xb5
    ab56:	4816      	ldr	r0, [pc, #88]	; (abb0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x594>)
    ab58:	f005 ff32 	bl	109c0 <__assert_func>
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
    ab5c:	f647 70ff 	movw	r0, #32767	; 0x7fff
    ab60:	e785      	b.n	aa6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x452>
	return __b;
    ab62:	ab1d      	add	r3, sp, #116	; 0x74
    ab64:	e7b0      	b.n	aac8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4ac>
	return __b;
    ab66:	ab1c      	add	r3, sp, #112	; 0x70
    ab68:	e7b4      	b.n	aad4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x4b8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    ab6a:	f00b fb16 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    ab6e:	f00b fb14 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    ab72:	f00b fb12 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    ab76:	f00b fb10 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    ab7a:	f00b fb0e 	bl	1619a <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ab7e:	9b04      	ldr	r3, [sp, #16]
    ab80:	3301      	adds	r3, #1
    ab82:	9304      	str	r3, [sp, #16]
    ab84:	e68c      	b.n	a8a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x284>
    ab86:	46c6      	mov	lr, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ab88:	9b01      	ldr	r3, [sp, #4]
    ab8a:	3301      	adds	r3, #1
    ab8c:	9301      	str	r3, [sp, #4]
    ab8e:	e679      	b.n	a884 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x268>
    ab90:	46c8      	mov	r8, r9
    ab92:	46f1      	mov	r9, lr
  for (int batch = 0; batch < batches; ++batch) {
    ab94:	9b00      	ldr	r3, [sp, #0]
    ab96:	3301      	adds	r3, #1
    ab98:	9300      	str	r3, [sp, #0]
    ab9a:	e66a      	b.n	a872 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x256>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
    ab9c:	b025      	add	sp, #148	; 0x94
    ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aba2:	bf00      	nop
    aba4:	7ffeffff 	.word	0x7ffeffff
    aba8:	0006b190 	.word	0x0006b190
    abac:	0006b1ac 	.word	0x0006b1ac
    abb0:	0006b1f4 	.word	0x0006b1f4
    abb4:	0006b244 	.word	0x0006b244
    abb8:	0006b260 	.word	0x0006b260

0000abbc <_ZN6tflite16Register_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_CONV_2D() {
    abbc:	b470      	push	{r4, r5, r6}
    abbe:	4606      	mov	r6, r0
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    abc0:	4604      	mov	r4, r0
    abc2:	4d05      	ldr	r5, [pc, #20]	; (abd8 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
    abc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    abcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    abd0:	4630      	mov	r0, r6
    abd2:	bc70      	pop	{r4, r5, r6}
    abd4:	4770      	bx	lr
    abd6:	bf00      	nop
    abd8:	00017110 	.word	0x00017110

0000abdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    int8_t* output_data) {
    abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abe0:	b0a7      	sub	sp, #156	; 0x9c
    abe2:	911a      	str	r1, [sp, #104]	; 0x68
    abe4:	921b      	str	r2, [sp, #108]	; 0x6c
    abe6:	469a      	mov	sl, r3
    abe8:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    abea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    abec:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
    abf0:	6942      	ldr	r2, [r0, #20]
    abf2:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_width = params.stride_width;
    abf4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    abf8:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
    abfa:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    abfe:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
    ac00:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    ac04:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
    ac06:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    ac0a:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
    ac0c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    ac10:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
    ac12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    ac16:	9212      	str	r2, [sp, #72]	; 0x48
  const int32_t output_offset = params.output_offset;
    ac18:	69c2      	ldr	r2, [r0, #28]
    ac1a:	9213      	str	r2, [sp, #76]	; 0x4c
  const int32_t output_activation_min = params.quantized_activation_min;
    ac1c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ac1e:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    ac20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ac22:	921e      	str	r2, [sp, #120]	; 0x78
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ac24:	4291      	cmp	r1, r2
    ac26:	f300 8082 	bgt.w	ad2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
  inline int32_t DimensionsCount() const { return size_; }
    ac2a:	f8da 2000 	ldr.w	r2, [sl]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ac2e:	2a04      	cmp	r2, #4
    ac30:	d17f      	bne.n	ad32 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x156>
    ac32:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ac34:	2a04      	cmp	r2, #4
    ac36:	d17e      	bne.n	ad36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15a>
    ac38:	f8d8 2000 	ldr.w	r2, [r8]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ac3c:	2a04      	cmp	r2, #4
    ac3e:	d17c      	bne.n	ad3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x15e>
    TFLITE_DCHECK_LT(i, size_);
    ac40:	f8da 2000 	ldr.w	r2, [sl]
    ac44:	2a00      	cmp	r2, #0
    ac46:	dd7a      	ble.n	ad3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac48:	2a05      	cmp	r2, #5
    ac4a:	dd7a      	ble.n	ad42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
    ac4c:	f8da 2004 	ldr.w	r2, [sl, #4]
    ac50:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    ac52:	f8d8 1000 	ldr.w	r1, [r8]
    ac56:	2900      	cmp	r1, #0
    ac58:	dd76      	ble.n	ad48 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x16c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac5a:	2905      	cmp	r1, #5
    ac5c:	dd76      	ble.n	ad4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x170>
    ac5e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ac62:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ac64:	4291      	cmp	r1, r2
    ac66:	d174      	bne.n	ad52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ac68:	9225      	str	r2, [sp, #148]	; 0x94
    TFLITE_DCHECK_LT(i, size_);
    ac6a:	f8d8 1000 	ldr.w	r1, [r8]
    ac6e:	2900      	cmp	r1, #0
    ac70:	dd71      	ble.n	ad56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac72:	2905      	cmp	r1, #5
    ac74:	dd71      	ble.n	ad5a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
    ac76:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ac7a:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ac7c:	9124      	str	r1, [sp, #144]	; 0x90
      if (__b < __a)
    ac7e:	428a      	cmp	r2, r1
    ac80:	dc6e      	bgt.n	ad60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      return __a;
    ac82:	aa25      	add	r2, sp, #148	; 0x94
    ac84:	6812      	ldr	r2, [r2, #0]
    ac86:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    ac88:	f8da 2000 	ldr.w	r2, [sl]
    ac8c:	2a03      	cmp	r2, #3
    ac8e:	dd69      	ble.n	ad64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ac90:	2a05      	cmp	r2, #5
    ac92:	dd69      	ble.n	ad68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
    ac94:	f8da 2004 	ldr.w	r2, [sl, #4]
    ac98:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    ac9a:	6839      	ldr	r1, [r7, #0]
    ac9c:	2903      	cmp	r1, #3
    ac9e:	dd66      	ble.n	ad6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aca0:	2905      	cmp	r1, #5
    aca2:	dd66      	ble.n	ad72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x196>
    aca4:	6879      	ldr	r1, [r7, #4]
    aca6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    aca8:	4291      	cmp	r1, r2
    acaa:	d164      	bne.n	ad76 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    acac:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    acae:	6839      	ldr	r1, [r7, #0]
    acb0:	2903      	cmp	r1, #3
    acb2:	dd62      	ble.n	ad7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acb4:	2905      	cmp	r1, #5
    acb6:	dd62      	ble.n	ad7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a2>
    acb8:	6879      	ldr	r1, [r7, #4]
    acba:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    acbc:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    acbe:	428a      	cmp	r2, r1
    acc0:	dc5f      	bgt.n	ad82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
      return __a;
    acc2:	aa23      	add	r2, sp, #140	; 0x8c
    acc4:	6812      	ldr	r2, [r2, #0]
    acc6:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
    acc8:	683a      	ldr	r2, [r7, #0]
    acca:	2a00      	cmp	r2, #0
    accc:	dd5b      	ble.n	ad86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acce:	2a05      	cmp	r2, #5
    acd0:	dd5b      	ble.n	ad8a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ae>
    acd2:	687a      	ldr	r2, [r7, #4]
    acd4:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    acd6:	f8d8 1000 	ldr.w	r1, [r8]
    acda:	2903      	cmp	r1, #3
    acdc:	dd57      	ble.n	ad8e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acde:	2905      	cmp	r1, #5
    ace0:	dd57      	ble.n	ad92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b6>
    ace2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ace6:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ace8:	4291      	cmp	r1, r2
    acea:	d155      	bne.n	ad98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    acec:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    acee:	f8d8 1000 	ldr.w	r1, [r8]
    acf2:	2903      	cmp	r1, #3
    acf4:	dd52      	ble.n	ad9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    acf6:	2905      	cmp	r1, #5
    acf8:	dd52      	ble.n	ada0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    acfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
    acfe:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ad00:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    ad02:	428a      	cmp	r2, r1
    ad04:	dc4f      	bgt.n	ada6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ca>
      return __a;
    ad06:	aa21      	add	r2, sp, #132	; 0x84
    ad08:	6812      	ldr	r2, [r2, #0]
    ad0a:	9203      	str	r2, [sp, #12]
  if (bias_data) {
    ad0c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    ad0e:	2a00      	cmp	r2, #0
    ad10:	d050      	beq.n	adb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    ad12:	681c      	ldr	r4, [r3, #0]
    ad14:	2c05      	cmp	r4, #5
    ad16:	dd48      	ble.n	adaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
    ad18:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    ad1a:	2200      	movs	r2, #0
    int buffer_size = 1;
    ad1c:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
    ad1e:	42a2      	cmp	r2, r4
    ad20:	da45      	bge.n	adae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d2>
      buffer_size *= dims_data[i];
    ad22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    ad26:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
    ad2a:	3201      	adds	r2, #1
    ad2c:	e7f7      	b.n	ad1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ad2e:	f00b fa34 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    ad32:	f00b fa32 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    ad36:	f00b fa30 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    ad3a:	f00b fa2e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ad3e:	f00b fa2c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad42:	f8da 2004 	ldr.w	r2, [sl, #4]
    ad46:	e784      	b.n	ac52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x76>
    TFLITE_DCHECK_LT(i, size_);
    ad48:	f00b fa27 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ad50:	e788      	b.n	ac64 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x88>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ad52:	f00b fa22 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ad56:	f00b fa20 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ad5e:	e78d      	b.n	ac7c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
	return __b;
    ad60:	aa24      	add	r2, sp, #144	; 0x90
    ad62:	e78f      	b.n	ac84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    ad64:	f00b fa19 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad68:	f8da 2010 	ldr.w	r2, [sl, #16]
    ad6c:	e795      	b.n	ac9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xbe>
    TFLITE_DCHECK_LT(i, size_);
    ad6e:	f00b fa14 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad72:	6939      	ldr	r1, [r7, #16]
    ad74:	e798      	b.n	aca8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xcc>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ad76:	f00b fa10 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ad7a:	f00b fa0e 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad7e:	6939      	ldr	r1, [r7, #16]
    ad80:	e79c      	b.n	acbc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe0>
    ad82:	aa22      	add	r2, sp, #136	; 0x88
    ad84:	e79e      	b.n	acc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe8>
    TFLITE_DCHECK_LT(i, size_);
    ad86:	f00b fa08 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad8a:	687a      	ldr	r2, [r7, #4]
    ad8c:	e7a3      	b.n	acd6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xfa>
    TFLITE_DCHECK_LT(i, size_);
    ad8e:	f00b fa04 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ad92:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ad96:	e7a7      	b.n	ace8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ad98:	f00b f9ff 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ad9c:	f00b f9fd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ada0:	f8d8 1010 	ldr.w	r1, [r8, #16]
    ada4:	e7ac      	b.n	ad00 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
    ada6:	aa20      	add	r2, sp, #128	; 0x80
    ada8:	e7ae      	b.n	ad08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    adaa:	3304      	adds	r3, #4
    adac:	e7b5      	b.n	ad1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    adae:	9b03      	ldr	r3, [sp, #12]
    adb0:	4299      	cmp	r1, r3
    adb2:	d167      	bne.n	ae84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a8>
    TFLITE_DCHECK_LT(i, size_);
    adb4:	f8da 3000 	ldr.w	r3, [sl]
    adb8:	2b01      	cmp	r3, #1
    adba:	dd65      	ble.n	ae88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    adbc:	2b05      	cmp	r3, #5
    adbe:	dd65      	ble.n	ae8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b0>
    adc0:	f8da 3004 	ldr.w	r3, [sl, #4]
    adc4:	685b      	ldr	r3, [r3, #4]
    adc6:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    adc8:	f8da 3000 	ldr.w	r3, [sl]
    adcc:	2b02      	cmp	r3, #2
    adce:	dd61      	ble.n	ae94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    add0:	2b05      	cmp	r3, #5
    add2:	dd61      	ble.n	ae98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2bc>
    add4:	f8da 3004 	ldr.w	r3, [sl, #4]
    add8:	689b      	ldr	r3, [r3, #8]
    adda:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    addc:	683b      	ldr	r3, [r7, #0]
    adde:	2b01      	cmp	r3, #1
    ade0:	dd5e      	ble.n	aea0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ade2:	2b05      	cmp	r3, #5
    ade4:	dd5e      	ble.n	aea4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c8>
    ade6:	687b      	ldr	r3, [r7, #4]
    ade8:	685b      	ldr	r3, [r3, #4]
    adea:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
    adec:	683b      	ldr	r3, [r7, #0]
    adee:	2b02      	cmp	r3, #2
    adf0:	dd5b      	ble.n	aeaa <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    adf2:	2b05      	cmp	r3, #5
    adf4:	dd5b      	ble.n	aeae <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    adf6:	687b      	ldr	r3, [r7, #4]
    adf8:	689b      	ldr	r3, [r3, #8]
    adfa:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
    adfc:	f8d8 3000 	ldr.w	r3, [r8]
    ae00:	2b01      	cmp	r3, #1
    ae02:	dd57      	ble.n	aeb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ae04:	2b05      	cmp	r3, #5
    ae06:	dd57      	ble.n	aeb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2dc>
    ae08:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ae0c:	685b      	ldr	r3, [r3, #4]
    ae0e:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    ae10:	f8d8 3000 	ldr.w	r3, [r8]
    ae14:	2b02      	cmp	r3, #2
    ae16:	dd53      	ble.n	aec0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ae18:	2b05      	cmp	r3, #5
    ae1a:	dd53      	ble.n	aec4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e8>
    ae1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ae20:	689b      	ldr	r3, [r3, #8]
    ae22:	9304      	str	r3, [sp, #16]
  for (int batch = 0; batch < batches; ++batch) {
    ae24:	f04f 0b00 	mov.w	fp, #0
    ae28:	46d1      	mov	r9, sl
    ae2a:	46ba      	mov	sl, r7
    ae2c:	4647      	mov	r7, r8
    ae2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ae30:	459b      	cmp	fp, r3
    ae32:	f280 81cd 	bge.w	b1d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    ae36:	2300      	movs	r3, #0
    ae38:	9301      	str	r3, [sp, #4]
    ae3a:	46c8      	mov	r8, r9
    ae3c:	46d1      	mov	r9, sl
    ae3e:	46da      	mov	sl, fp
    ae40:	46bb      	mov	fp, r7
    ae42:	9b01      	ldr	r3, [sp, #4]
    ae44:	9905      	ldr	r1, [sp, #20]
    ae46:	428b      	cmp	r3, r1
    ae48:	f280 81bb 	bge.w	b1c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e6>
      const int in_y_origin = (out_y * stride_height) - pad_height;
    ae4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ae4e:	fb02 f303 	mul.w	r3, r2, r3
    ae52:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ae54:	1a9b      	subs	r3, r3, r2
    ae56:	9314      	str	r3, [sp, #80]	; 0x50
      for (int out_x = 0; out_x < output_width; ++out_x) {
    ae58:	2300      	movs	r3, #0
    ae5a:	9302      	str	r3, [sp, #8]
    ae5c:	f8cd b0d4 	str.w	fp, [sp, #212]	; 0xd4
    ae60:	46c3      	mov	fp, r8
    ae62:	46c8      	mov	r8, r9
    ae64:	46d1      	mov	r9, sl
    ae66:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
    ae6a:	9b02      	ldr	r3, [sp, #8]
    ae6c:	9904      	ldr	r1, [sp, #16]
    ae6e:	428b      	cmp	r3, r1
    ae70:	f280 819c 	bge.w	b1ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5d0>
        const int in_x_origin = (out_x * stride_width) - pad_width;
    ae74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ae76:	fb02 f303 	mul.w	r3, r2, r3
    ae7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ae7c:	1a9b      	subs	r3, r3, r2
    ae7e:	9315      	str	r3, [sp, #84]	; 0x54
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    ae80:	2400      	movs	r4, #0
    ae82:	e157      	b.n	b134 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    ae84:	f00b f989 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ae88:	f00b f987 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ae8c:	f8da 3008 	ldr.w	r3, [sl, #8]
    ae90:	9309      	str	r3, [sp, #36]	; 0x24
    ae92:	e799      	b.n	adc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
    ae94:	f00b f981 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ae98:	f8da 300c 	ldr.w	r3, [sl, #12]
    ae9c:	9308      	str	r3, [sp, #32]
    ae9e:	e79d      	b.n	addc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
    TFLITE_DCHECK_LT(i, size_);
    aea0:	f00b f97b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aea4:	68bb      	ldr	r3, [r7, #8]
    aea6:	9307      	str	r3, [sp, #28]
    aea8:	e7a0      	b.n	adec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    TFLITE_DCHECK_LT(i, size_);
    aeaa:	f00b f976 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aeae:	68fb      	ldr	r3, [r7, #12]
    aeb0:	9306      	str	r3, [sp, #24]
    aeb2:	e7a3      	b.n	adfc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x220>
    TFLITE_DCHECK_LT(i, size_);
    aeb4:	f00b f971 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aeb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    aebc:	9305      	str	r3, [sp, #20]
    aebe:	e7a7      	b.n	ae10 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x234>
    TFLITE_DCHECK_LT(i, size_);
    aec0:	f00b f96b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    aec4:	f8d8 300c 	ldr.w	r3, [r8, #12]
    aec8:	9304      	str	r3, [sp, #16]
    aeca:	e7ab      	b.n	ae24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aecc:	f00b f965 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aed0:	f00b f963 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aed4:	f00b f961 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    aed8:	f00b f95f 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aedc:	f00b f95d 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    aee0:	f00b f95b 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    aee4:	f00b f959 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    aee8:	f00b f957 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    aeec:	f00b f955 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    aef0:	f00b f953 	bl	1619a <abort>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    aef4:	3201      	adds	r2, #1
    aef6:	9b06      	ldr	r3, [sp, #24]
    aef8:	429a      	cmp	r2, r3
    aefa:	da63      	bge.n	afc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e8>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
    aefc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aefe:	9815      	ldr	r0, [sp, #84]	; 0x54
    af00:	fb03 0002 	mla	r0, r3, r2, r0
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    af04:	2800      	cmp	r0, #0
    af06:	dbf5      	blt.n	aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    af08:	9b08      	ldr	r3, [sp, #32]
    af0a:	4298      	cmp	r0, r3
    af0c:	daf2      	bge.n	aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    af0e:	2900      	cmp	r1, #0
    af10:	dbf0      	blt.n	aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    af12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af14:	4299      	cmp	r1, r3
    af16:	daed      	bge.n	aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
    af18:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    af1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    af1c:	42ab      	cmp	r3, r5
    af1e:	dae9      	bge.n	aef4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x318>
  inline int32_t DimensionsCount() const { return size_; }
    af20:	f8db 5000 	ldr.w	r5, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    af24:	2d04      	cmp	r5, #4
    af26:	d1d1      	bne.n	aecc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    af28:	f1b9 0f00 	cmp.w	r9, #0
    af2c:	dbd0      	blt.n	aed0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
    af2e:	f8db 5004 	ldr.w	r5, [fp, #4]
    af32:	45a9      	cmp	r9, r5
    af34:	dacc      	bge.n	aed0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    af36:	2900      	cmp	r1, #0
    af38:	dbcc      	blt.n	aed4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
    af3a:	f8db c008 	ldr.w	ip, [fp, #8]
    af3e:	4561      	cmp	r1, ip
    af40:	dac8      	bge.n	aed4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    af42:	2800      	cmp	r0, #0
    af44:	dbc8      	blt.n	aed8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
    af46:	f8db 700c 	ldr.w	r7, [fp, #12]
    af4a:	42b8      	cmp	r0, r7
    af4c:	dac4      	bge.n	aed8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    af4e:	2b00      	cmp	r3, #0
    af50:	dbc4      	blt.n	aedc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
    af52:	f8db 5010 	ldr.w	r5, [fp, #16]
    af56:	42ab      	cmp	r3, r5
    af58:	dac0      	bge.n	aedc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x300>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    af5a:	fb0c 1c09 	mla	ip, ip, r9, r1
    af5e:	fb0c 0707 	mla	r7, ip, r7, r0
    af62:	fb07 3505 	mla	r5, r7, r5, r3
                                                      in_x, in_channel)];
    af66:	9f30      	ldr	r7, [sp, #192]	; 0xc0
    af68:	577f      	ldrsb	r7, [r7, r5]
  inline int32_t DimensionsCount() const { return size_; }
    af6a:	f8d8 5000 	ldr.w	r5, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    af6e:	2d04      	cmp	r5, #4
    af70:	d1b6      	bne.n	aee0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x304>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    af72:	2c00      	cmp	r4, #0
    af74:	dbb6      	blt.n	aee4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
    af76:	f8d8 5004 	ldr.w	r5, [r8, #4]
    af7a:	42ac      	cmp	r4, r5
    af7c:	dab2      	bge.n	aee4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x308>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    af7e:	2e00      	cmp	r6, #0
    af80:	dbb2      	blt.n	aee8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
    af82:	f8d8 e008 	ldr.w	lr, [r8, #8]
    af86:	4576      	cmp	r6, lr
    af88:	daae      	bge.n	aee8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    af8a:	2a00      	cmp	r2, #0
    af8c:	dbae      	blt.n	aeec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
    af8e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    af92:	4562      	cmp	r2, ip
    af94:	daaa      	bge.n	aeec <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x310>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    af96:	2b00      	cmp	r3, #0
    af98:	dbaa      	blt.n	aef0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
    af9a:	f8d8 5010 	ldr.w	r5, [r8, #16]
    af9e:	42ab      	cmp	r3, r5
    afa0:	daa6      	bge.n	aef0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x314>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    afa2:	fb0e 6e04 	mla	lr, lr, r4, r6
    afa6:	fb0e 2c0c 	mla	ip, lr, ip, r2
    afaa:	fb0c 3c05 	mla	ip, ip, r5, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
    afae:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    afb0:	f915 c00c 	ldrsb.w	ip, [r5, ip]
                acc += filter_val * (input_val + input_offset);
    afb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    afb6:	442f      	add	r7, r5
    afb8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    afba:	fb0c 5507 	mla	r5, ip, r7, r5
    afbe:	951d      	str	r5, [sp, #116]	; 0x74
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    afc0:	3301      	adds	r3, #1
    afc2:	e7aa      	b.n	af1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    afc4:	3601      	adds	r6, #1
    afc6:	9b07      	ldr	r3, [sp, #28]
    afc8:	429e      	cmp	r6, r3
    afca:	da05      	bge.n	afd8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fc>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
    afcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    afce:	9a14      	ldr	r2, [sp, #80]	; 0x50
    afd0:	fb03 2106 	mla	r1, r3, r6, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    afd4:	2200      	movs	r2, #0
    afd6:	e78e      	b.n	aef6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x31a>
          if (bias_data) {
    afd8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    afda:	b123      	cbz	r3, afe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40a>
            acc += bias_data[out_channel];
    afdc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    afe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    afe2:	4413      	add	r3, r2
    afe4:	931d      	str	r3, [sp, #116]	; 0x74
          acc = MultiplyByQuantizedMultiplier(
    afe6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    afe8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    afea:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
    afee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aff0:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    aff4:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    aff8:	2e00      	cmp	r6, #0
    affa:	f340 80a1 	ble.w	b140 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x564>
    affe:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    b000:	409d      	lsls	r5, r3
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b002:	45ac      	cmp	ip, r5
    b004:	f000 809e 	beq.w	b144 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x568>
    b008:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    b00a:	17eb      	asrs	r3, r5, #31
  std::int64_t b_64(b);
    b00c:	4660      	mov	r0, ip
    b00e:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    b010:	fb05 f101 	mul.w	r1, r5, r1
    b014:	fb0c 1103 	mla	r1, ip, r3, r1
    b018:	fba5 230c 	umull	r2, r3, r5, ip
    b01c:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b01e:	2a00      	cmp	r2, #0
    b020:	f173 0100 	sbcs.w	r1, r3, #0
    b024:	f2c0 8095 	blt.w	b152 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x576>
    b028:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b02c:	1852      	adds	r2, r2, r1
    b02e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    b032:	4611      	mov	r1, r2
    b034:	461d      	mov	r5, r3
    b036:	2a00      	cmp	r2, #0
    b038:	f173 0000 	sbcs.w	r0, r3, #0
    b03c:	f2c0 808b 	blt.w	b156 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57a>
    b040:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    b042:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b046:	2f00      	cmp	r7, #0
    b048:	f040 808d 	bne.w	b166 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x58a>

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
    b04c:	2e00      	cmp	r6, #0
    b04e:	f2c0 808d 	blt.w	b16c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x590>
  assert(exponent <= 31);
    b052:	2e1f      	cmp	r6, #31
    b054:	f300 8091 	bgt.w	b17a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x59e>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    b058:	2701      	movs	r7, #1
    b05a:	fa07 f006 	lsl.w	r0, r7, r6
    b05e:	3801      	subs	r0, #1
    b060:	f008 fef1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b064:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType zero = Dup<IntegerType>(0);
    b066:	2000      	movs	r0, #0
    b068:	f008 feed 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b06c:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    b06e:	4638      	mov	r0, r7
    b070:	f008 fee9 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    b074:	900b      	str	r0, [sp, #44]	; 0x2c
  const IntegerType remainder = BitAnd(x, mask);
    b076:	990a      	ldr	r1, [sp, #40]	; 0x28
    b078:	4628      	mov	r0, r5
    b07a:	f008 fee5 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b07e:	9019      	str	r0, [sp, #100]	; 0x64
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    b080:	4639      	mov	r1, r7
    b082:	980a      	ldr	r0, [sp, #40]	; 0x28
    b084:	f008 fee2 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b088:	4607      	mov	r7, r0
    b08a:	9918      	ldr	r1, [sp, #96]	; 0x60
    b08c:	4628      	mov	r0, r5
    b08e:	f008 fee9 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    b092:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b094:	f008 fed8 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b098:	4601      	mov	r1, r0
    b09a:	4638      	mov	r0, r7
    b09c:	f008 fed8 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    b0a0:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    b0a2:	4631      	mov	r1, r6
    b0a4:	4628      	mov	r0, r5
    b0a6:	f008 fed1 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    b0aa:	4605      	mov	r5, r0
    b0ac:	4639      	mov	r1, r7
    b0ae:	9819      	ldr	r0, [sp, #100]	; 0x64
    b0b0:	f008 fee0 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    b0b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b0b6:	f008 fec7 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    b0ba:	4601      	mov	r1, r0
    b0bc:	4628      	mov	r0, r5
    b0be:	f008 fec7 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
          acc += output_offset;
    b0c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b0c4:	4418      	add	r0, r3
    b0c6:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    b0c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b0ca:	4290      	cmp	r0, r2
    b0cc:	db5c      	blt.n	b188 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
      return __a;
    b0ce:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::max(acc, output_activation_min);
    b0d0:	681b      	ldr	r3, [r3, #0]
    b0d2:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    b0d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b0d6:	4293      	cmp	r3, r2
    b0d8:	dc58      	bgt.n	b18c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
      return __a;
    b0da:	ab1d      	add	r3, sp, #116	; 0x74
          acc = std::min(acc, output_activation_max);
    b0dc:	6818      	ldr	r0, [r3, #0]
    b0de:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    b0e0:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b0e4:	2b04      	cmp	r3, #4
    b0e6:	d153      	bne.n	b190 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b0e8:	f1b9 0f00 	cmp.w	r9, #0
    b0ec:	db52      	blt.n	b194 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    b0ee:	f8da 3004 	ldr.w	r3, [sl, #4]
    b0f2:	4599      	cmp	r9, r3
    b0f4:	da4e      	bge.n	b194 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b0f6:	9b01      	ldr	r3, [sp, #4]
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	db4d      	blt.n	b198 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
    b0fc:	f8da 1008 	ldr.w	r1, [sl, #8]
    b100:	428b      	cmp	r3, r1
    b102:	da49      	bge.n	b198 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b104:	9b02      	ldr	r3, [sp, #8]
    b106:	2b00      	cmp	r3, #0
    b108:	db48      	blt.n	b19c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
    b10a:	f8da 200c 	ldr.w	r2, [sl, #12]
    b10e:	4293      	cmp	r3, r2
    b110:	da44      	bge.n	b19c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b112:	2c00      	cmp	r4, #0
    b114:	db44      	blt.n	b1a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
    b116:	f8da 3010 	ldr.w	r3, [sl, #16]
    b11a:	429c      	cmp	r4, r3
    b11c:	da40      	bge.n	b1a0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    b11e:	9d01      	ldr	r5, [sp, #4]
    b120:	fb01 5109 	mla	r1, r1, r9, r5
    b124:	9d02      	ldr	r5, [sp, #8]
    b126:	fb01 5202 	mla	r2, r1, r2, r5
    b12a:	fb02 4303 	mla	r3, r2, r3, r4
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
    b12e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    b130:	54d0      	strb	r0, [r2, r3]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
    b132:	3401      	adds	r4, #1
    b134:	9b03      	ldr	r3, [sp, #12]
    b136:	429c      	cmp	r4, r3
    b138:	da34      	bge.n	b1a4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c8>
          int32_t acc = 0;
    b13a:	2600      	movs	r6, #0
    b13c:	961d      	str	r6, [sp, #116]	; 0x74
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    b13e:	e742      	b.n	afc6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ea>
  int right_shift = shift > 0 ? 0 : -shift;
    b140:	4276      	negs	r6, r6
    b142:	e75d      	b.n	b000 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x424>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    b144:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
    b148:	d001      	beq.n	b14e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x572>
    b14a:	2700      	movs	r7, #0
    b14c:	e75d      	b.n	b00a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
    b14e:	2701      	movs	r7, #1
    b150:	e75b      	b.n	b00a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42e>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    b152:	4921      	ldr	r1, [pc, #132]	; (b1d8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5fc>)
    b154:	e76a      	b.n	b02c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x450>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    b156:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b15a:	1851      	adds	r1, r2, r1
    b15c:	f04f 0500 	mov.w	r5, #0
    b160:	eb43 0505 	adc.w	r5, r3, r5
    b164:	e76c      	b.n	b040 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x464>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    b166:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    b16a:	e76f      	b.n	b04c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x470>
  assert(exponent >= 0);
    b16c:	4b1b      	ldr	r3, [pc, #108]	; (b1dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    b16e:	4a1c      	ldr	r2, [pc, #112]	; (b1e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    b170:	f44f 71b3 	mov.w	r1, #358	; 0x166
    b174:	481b      	ldr	r0, [pc, #108]	; (b1e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    b176:	f005 fc23 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    b17a:	4b1b      	ldr	r3, [pc, #108]	; (b1e8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    b17c:	4a18      	ldr	r2, [pc, #96]	; (b1e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    b17e:	f240 1167 	movw	r1, #359	; 0x167
    b182:	4818      	ldr	r0, [pc, #96]	; (b1e4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    b184:	f005 fc1c 	bl	109c0 <__assert_func>
	return __b;
    b188:	ab1f      	add	r3, sp, #124	; 0x7c
    b18a:	e7a1      	b.n	b0d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4f4>
	return __b;
    b18c:	ab1e      	add	r3, sp, #120	; 0x78
    b18e:	e7a5      	b.n	b0dc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x500>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    b190:	f00b f803 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    b194:	f00b f801 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    b198:	f00a ffff 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    b19c:	f00a fffd 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    b1a0:	f00a fffb 	bl	1619a <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    b1a4:	9b02      	ldr	r3, [sp, #8]
    b1a6:	3301      	adds	r3, #1
    b1a8:	9302      	str	r3, [sp, #8]
    b1aa:	e65e      	b.n	ae6a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28e>
    b1ac:	f8cd a0d4 	str.w	sl, [sp, #212]	; 0xd4
    b1b0:	46ca      	mov	sl, r9
    b1b2:	46c1      	mov	r9, r8
    b1b4:	46d8      	mov	r8, fp
    b1b6:	f8dd b0d4 	ldr.w	fp, [sp, #212]	; 0xd4
    for (int out_y = 0; out_y < output_height; ++out_y) {
    b1ba:	9b01      	ldr	r3, [sp, #4]
    b1bc:	3301      	adds	r3, #1
    b1be:	9301      	str	r3, [sp, #4]
    b1c0:	e63f      	b.n	ae42 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x266>
    b1c2:	465f      	mov	r7, fp
    b1c4:	46d3      	mov	fp, sl
    b1c6:	46ca      	mov	sl, r9
    b1c8:	46c1      	mov	r9, r8
  for (int batch = 0; batch < batches; ++batch) {
    b1ca:	f10b 0b01 	add.w	fp, fp, #1
    b1ce:	e62e      	b.n	ae2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
}
    b1d0:	b027      	add	sp, #156	; 0x9c
    b1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1d6:	bf00      	nop
    b1d8:	c0000001 	.word	0xc0000001
    b1dc:	0006b2b0 	.word	0x0006b2b0
    b1e0:	0006b2c0 	.word	0x0006b2c0
    b1e4:	0006b318 	.word	0x0006b318
    b1e8:	0006b374 	.word	0x0006b374

0000b1ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1f0:	b0e7      	sub	sp, #412	; 0x19c
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
    b1f2:	4bae      	ldr	r3, [pc, #696]	; (b4ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>)
    b1f4:	681a      	ldr	r2, [r3, #0]
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
    b1f6:	2800      	cmp	r0, #0
    b1f8:	d052      	beq.n	b2a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    b1fa:	4688      	mov	r8, r1
    b1fc:	4681      	mov	r9, r0
  TFLITE_DCHECK(node != nullptr);
    b1fe:	2900      	cmp	r1, #0
    b200:	d050      	beq.n	b2a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b202:	6d44      	ldr	r4, [r0, #84]	; 0x54
    b204:	680b      	ldr	r3, [r1, #0]
    b206:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    b20a:	6859      	ldr	r1, [r3, #4]
    b20c:	47a0      	blx	r4
    b20e:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
    b210:	4ba7      	ldr	r3, [pc, #668]	; (b4b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c4>)
    b212:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    b214:	f1b9 0f00 	cmp.w	r9, #0
    b218:	d046      	beq.n	b2a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbc>
  TFLITE_DCHECK(node != nullptr);
    b21a:	f1b8 0f00 	cmp.w	r8, #0
    b21e:	d045      	beq.n	b2ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b220:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b224:	f8d8 3000 	ldr.w	r3, [r8]
    b228:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b22c:	6859      	ldr	r1, [r3, #4]
    b22e:	4648      	mov	r0, r9
    b230:	4790      	blx	r2
    b232:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    b234:	f8d8 3000 	ldr.w	r3, [r8]
    b238:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    b23a:	2b03      	cmp	r3, #3
    b23c:	d038      	beq.n	b2b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    b23e:	2600      	movs	r6, #0
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
    b240:	4b9c      	ldr	r3, [pc, #624]	; (b4b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c8>)
    b242:	6819      	ldr	r1, [r3, #0]
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
    b244:	f1b9 0f00 	cmp.w	r9, #0
    b248:	d049      	beq.n	b2de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2>
  TFLITE_DCHECK(node != nullptr);
    b24a:	f1b8 0f00 	cmp.w	r8, #0
    b24e:	d048      	beq.n	b2e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    b250:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b254:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b258:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b25c:	6859      	ldr	r1, [r3, #4]
    b25e:	4648      	mov	r0, r9
    b260:	4790      	blx	r2
    b262:	4604      	mov	r4, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b264:	f8d8 1014 	ldr.w	r1, [r8, #20]
    b268:	2900      	cmp	r1, #0
    b26a:	d03c      	beq.n	b2e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
  TFLITE_DCHECK(node->user_data != nullptr);
    b26c:	f8d8 b010 	ldr.w	fp, [r8, #16]
    b270:	f1bb 0f00 	cmp.w	fp, #0
    b274:	d039      	beq.n	b2ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
    b276:	7a38      	ldrb	r0, [r7, #8]
    b278:	7a23      	ldrb	r3, [r4, #8]
    b27a:	4298      	cmp	r0, r3
    b27c:	d037      	beq.n	b2ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
    b27e:	f8d9 4014 	ldr.w	r4, [r9, #20]
    b282:	9303      	str	r3, [sp, #12]
    b284:	9002      	str	r0, [sp, #8]
    b286:	4b8c      	ldr	r3, [pc, #560]	; (b4b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>)
    b288:	9301      	str	r3, [sp, #4]
    b28a:	4b8c      	ldr	r3, [pc, #560]	; (b4bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d0>)
    b28c:	9300      	str	r3, [sp, #0]
    b28e:	2337      	movs	r3, #55	; 0x37
    b290:	4a8b      	ldr	r2, [pc, #556]	; (b4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>)
    b292:	498c      	ldr	r1, [pc, #560]	; (b4c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d8>)
    b294:	4648      	mov	r0, r9
    b296:	47a0      	blx	r4
    b298:	2001      	movs	r0, #1
}
    b29a:	b067      	add	sp, #412	; 0x19c
    b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(context != nullptr);
    b2a0:	f00a ff7b 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    b2a4:	f00a ff79 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    b2a8:	f00a ff77 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    b2ac:	f00a ff75 	bl	1619a <abort>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
    b2b0:	4b85      	ldr	r3, [pc, #532]	; (b4c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>)
    b2b2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    b2b4:	f1b9 0f00 	cmp.w	r9, #0
    b2b8:	d00d      	beq.n	b2d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node != nullptr);
    b2ba:	f1b8 0f00 	cmp.w	r8, #0
    b2be:	d00c      	beq.n	b2da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xee>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    b2c0:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
    b2c4:	f8d8 3000 	ldr.w	r3, [r8]
    b2c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b2cc:	6859      	ldr	r1, [r3, #4]
    b2ce:	4648      	mov	r0, r9
    b2d0:	4790      	blx	r2
    b2d2:	4606      	mov	r6, r0
    b2d4:	e7b4      	b.n	b240 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x54>
  TFLITE_DCHECK(context != nullptr);
    b2d6:	f00a ff60 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    b2da:	f00a ff5e 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    b2de:	f00a ff5c 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    b2e2:	f00a ff5a 	bl	1619a <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b2e6:	f00a ff58 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    b2ea:	f00a ff56 	bl	1619a <abort>
  TF_LITE_ENSURE_MSG(
    b2ee:	7a2b      	ldrb	r3, [r5, #8]
    b2f0:	4298      	cmp	r0, r3
    b2f2:	d00a      	beq.n	b30a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b2f4:	2807      	cmp	r0, #7
    b2f6:	d101      	bne.n	b2fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x110>
    b2f8:	2b09      	cmp	r3, #9
    b2fa:	d006      	beq.n	b30a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11e>
    b2fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    b300:	4972      	ldr	r1, [pc, #456]	; (b4cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>)
    b302:	4648      	mov	r0, r9
    b304:	4798      	blx	r3
    b306:	2001      	movs	r0, #1
    b308:	e7c7      	b.n	b29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  switch (input->type) {  // Already know in/out types are same.
    b30a:	2807      	cmp	r0, #7
    b30c:	d073      	beq.n	b3f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    b30e:	2809      	cmp	r0, #9
    b310:	f000 80e0 	beq.w	b4d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    b314:	2801      	cmp	r0, #1
    b316:	d00a      	beq.n	b32e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    b318:	f8d9 4014 	ldr.w	r4, [r9, #20]
    b31c:	f7fd ffde 	bl	92dc <TfLiteTypeGetName>
    b320:	4602      	mov	r2, r0
    b322:	7a3b      	ldrb	r3, [r7, #8]
    b324:	496a      	ldr	r1, [pc, #424]	; (b4d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e4>)
    b326:	4648      	mov	r0, r9
    b328:	47a0      	blx	r4
      return kTfLiteError;
    b32a:	2001      	movs	r0, #1
    b32c:	e7b5      	b.n	b29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
    b32e:	465a      	mov	r2, fp
    b330:	a80a      	add	r0, sp, #40	; 0x28
    b332:	f009 f840 	bl	143b6 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b336:	4639      	mov	r1, r7
    b338:	a818      	add	r0, sp, #96	; 0x60
    b33a:	f009 fb59 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b33e:	4638      	mov	r0, r7
    b340:	f008 fd6d 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b344:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(filter),
    b346:	4629      	mov	r1, r5
    b348:	a81e      	add	r0, sp, #120	; 0x78
    b34a:	f009 fb51 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b34e:	4628      	mov	r0, r5
    b350:	f008 fd65 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b354:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b356:	f10d 0890 	add.w	r8, sp, #144	; 0x90
    b35a:	4631      	mov	r1, r6
    b35c:	4640      	mov	r0, r8
    b35e:	f009 fb47 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b362:	4630      	mov	r0, r6
    b364:	f008 fd5b 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    b368:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b36a:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
    b36e:	4621      	mov	r1, r4
    b370:	4648      	mov	r0, r9
    b372:	f009 fb3d 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b376:	4620      	mov	r0, r4
    b378:	f008 fd57 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    b37c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(nullptr), nullptr);
    b37e:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
    b382:	2100      	movs	r1, #0
    b384:	4650      	mov	r0, sl
    b386:	f009 fb33 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Conv(
    b38a:	2300      	movs	r3, #0
    b38c:	9306      	str	r3, [sp, #24]
    b38e:	f8cd a014 	str.w	sl, [sp, #20]
    b392:	9404      	str	r4, [sp, #16]
    b394:	f8cd 900c 	str.w	r9, [sp, #12]
    b398:	9602      	str	r6, [sp, #8]
    b39a:	f8cd 8004 	str.w	r8, [sp, #4]
    b39e:	9500      	str	r5, [sp, #0]
    b3a0:	ab1e      	add	r3, sp, #120	; 0x78
    b3a2:	463a      	mov	r2, r7
    b3a4:	a918      	add	r1, sp, #96	; 0x60
    b3a6:	a80a      	add	r0, sp, #40	; 0x28
    b3a8:	f008 fd8a 	bl	13ec0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
    if (size_ > kMaxSmallSize) {
    b3ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    b3ae:	2b05      	cmp	r3, #5
    b3b0:	dd03      	ble.n	b3ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
      delete[] dims_pointer_;
    b3b2:	9831      	ldr	r0, [sp, #196]	; 0xc4
    b3b4:	b108      	cbz	r0, b3ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    b3b6:	f00a fedb 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b3ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    b3bc:	2b05      	cmp	r3, #5
    b3be:	dd03      	ble.n	b3c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
      delete[] dims_pointer_;
    b3c0:	982b      	ldr	r0, [sp, #172]	; 0xac
    b3c2:	b108      	cbz	r0, b3c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
    b3c4:	f00a fed4 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b3c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b3ca:	2b05      	cmp	r3, #5
    b3cc:	dd03      	ble.n	b3d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      delete[] dims_pointer_;
    b3ce:	9825      	ldr	r0, [sp, #148]	; 0x94
    b3d0:	b108      	cbz	r0, b3d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
    b3d2:	f00a fecd 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b3d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    b3d8:	2b05      	cmp	r3, #5
    b3da:	dd03      	ble.n	b3e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      delete[] dims_pointer_;
    b3dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3de:	b108      	cbz	r0, b3e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f8>
    b3e0:	f00a fec6 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b3e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b3e6:	2b05      	cmp	r3, #5
    b3e8:	dd03      	ble.n	b3f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
      delete[] dims_pointer_;
    b3ea:	9819      	ldr	r0, [sp, #100]	; 0x64
    b3ec:	b108      	cbz	r0, b3f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x206>
    b3ee:	f00a febf 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    b3f2:	2000      	movs	r0, #0
      break;
    b3f4:	e751      	b.n	b29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b3f6:	465a      	mov	r2, fp
    b3f8:	a80a      	add	r0, sp, #40	; 0x28
    b3fa:	f008 ffb5 	bl	14368 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b3fe:	f8db a024 	ldr.w	sl, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b402:	f8db b028 	ldr.w	fp, [fp, #40]	; 0x28
    b406:	4639      	mov	r1, r7
    b408:	a836      	add	r0, sp, #216	; 0xd8
    b40a:	f009 faf1 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b40e:	4638      	mov	r0, r7
    b410:	f008 fd38 	bl	13e84 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    b414:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b416:	af3c      	add	r7, sp, #240	; 0xf0
    b418:	4629      	mov	r1, r5
    b41a:	4638      	mov	r0, r7
    b41c:	f009 fae8 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b420:	4628      	mov	r0, r5
    b422:	f008 fd06 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b426:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b428:	f50d 7884 	add.w	r8, sp, #264	; 0x108
    b42c:	4631      	mov	r1, r6
    b42e:	4640      	mov	r0, r8
    b430:	f009 fade 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b434:	4630      	mov	r0, r6
    b436:	f008 fd35 	bl	13ea4 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>
    b43a:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b43c:	f50d 7990 	add.w	r9, sp, #288	; 0x120
    b440:	4621      	mov	r1, r4
    b442:	4648      	mov	r0, r9
    b444:	f009 fad4 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b448:	4620      	mov	r0, r4
    b44a:	f008 fd21 	bl	13e90 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    b44e:	9006      	str	r0, [sp, #24]
    b450:	f8cd 9014 	str.w	r9, [sp, #20]
    b454:	9604      	str	r6, [sp, #16]
    b456:	f8cd 800c 	str.w	r8, [sp, #12]
    b45a:	9502      	str	r5, [sp, #8]
    b45c:	9701      	str	r7, [sp, #4]
    b45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b460:	9300      	str	r3, [sp, #0]
    b462:	ab36      	add	r3, sp, #216	; 0xd8
    b464:	465a      	mov	r2, fp
    b466:	4651      	mov	r1, sl
    b468:	a80a      	add	r0, sp, #40	; 0x28
    b46a:	f7ff f8d7 	bl	a61c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
    if (size_ > kMaxSmallSize) {
    b46e:	9b48      	ldr	r3, [sp, #288]	; 0x120
    b470:	2b05      	cmp	r3, #5
    b472:	dd03      	ble.n	b47c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
      delete[] dims_pointer_;
    b474:	9849      	ldr	r0, [sp, #292]	; 0x124
    b476:	b108      	cbz	r0, b47c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>
    b478:	f00a fe7a 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b47c:	9b42      	ldr	r3, [sp, #264]	; 0x108
    b47e:	2b05      	cmp	r3, #5
    b480:	dd03      	ble.n	b48a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      delete[] dims_pointer_;
    b482:	9843      	ldr	r0, [sp, #268]	; 0x10c
    b484:	b108      	cbz	r0, b48a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
    b486:	f00a fe73 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b48a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    b48c:	2b05      	cmp	r3, #5
    b48e:	dd03      	ble.n	b498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
      delete[] dims_pointer_;
    b490:	983d      	ldr	r0, [sp, #244]	; 0xf4
    b492:	b108      	cbz	r0, b498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
    b494:	f00a fe6c 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b498:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    b49a:	2b05      	cmp	r3, #5
    b49c:	dd03      	ble.n	b4a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
      delete[] dims_pointer_;
    b49e:	9837      	ldr	r0, [sp, #220]	; 0xdc
    b4a0:	b108      	cbz	r0, b4a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ba>
    b4a2:	f00a fe65 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    b4a6:	2000      	movs	r0, #0
      break;
    b4a8:	e6f7      	b.n	b29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
    b4aa:	bf00      	nop
    b4ac:	0006b5f4 	.word	0x0006b5f4
    b4b0:	0006b5fc 	.word	0x0006b5fc
    b4b4:	0006b5f8 	.word	0x0006b5f8
    b4b8:	0006b3d0 	.word	0x0006b3d0
    b4bc:	0006b3e0 	.word	0x0006b3e0
    b4c0:	0006b384 	.word	0x0006b384
    b4c4:	0006adbc 	.word	0x0006adbc
    b4c8:	0006b5f0 	.word	0x0006b5f0
    b4cc:	0006b3ec 	.word	0x0006b3ec
    b4d0:	0006b468 	.word	0x0006b468
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
    b4d4:	465a      	mov	r2, fp
    b4d6:	a80a      	add	r0, sp, #40	; 0x28
    b4d8:	f008 ff46 	bl	14368 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
    b4dc:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
    b4e0:	f8db 9028 	ldr.w	r9, [fp, #40]	; 0x28
    b4e4:	4639      	mov	r1, r7
    b4e6:	a84e      	add	r0, sp, #312	; 0x138
    b4e8:	f009 fa82 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b4ec:	4638      	mov	r0, r7
    b4ee:	f008 fca0 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b4f2:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    b4f4:	af54      	add	r7, sp, #336	; 0x150
    b4f6:	4629      	mov	r1, r5
    b4f8:	4638      	mov	r0, r7
    b4fa:	f009 fa79 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b4fe:	4628      	mov	r0, r5
    b500:	f008 fc97 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    b504:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    b506:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
    b50a:	4631      	mov	r1, r6
    b50c:	4650      	mov	r0, sl
    b50e:	f009 fa6f 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b512:	4630      	mov	r0, r6
    b514:	f008 fcc0 	bl	13e98 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    b518:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    b51a:	f50d 7bc0 	add.w	fp, sp, #384	; 0x180
    b51e:	4621      	mov	r1, r4
    b520:	4658      	mov	r0, fp
    b522:	f009 fa65 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::ConvPerChannel(
    b526:	4620      	mov	r0, r4
    b528:	f008 fc89 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    b52c:	9006      	str	r0, [sp, #24]
    b52e:	f8cd b014 	str.w	fp, [sp, #20]
    b532:	9604      	str	r6, [sp, #16]
    b534:	f8cd a00c 	str.w	sl, [sp, #12]
    b538:	9502      	str	r5, [sp, #8]
    b53a:	9701      	str	r7, [sp, #4]
    b53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b53e:	9300      	str	r3, [sp, #0]
    b540:	ab4e      	add	r3, sp, #312	; 0x138
    b542:	464a      	mov	r2, r9
    b544:	4641      	mov	r1, r8
    b546:	a80a      	add	r0, sp, #40	; 0x28
    b548:	f7ff fb48 	bl	abdc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    b54c:	9b60      	ldr	r3, [sp, #384]	; 0x180
    b54e:	2b05      	cmp	r3, #5
    b550:	dd03      	ble.n	b55a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
      delete[] dims_pointer_;
    b552:	9861      	ldr	r0, [sp, #388]	; 0x184
    b554:	b108      	cbz	r0, b55a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36e>
    b556:	f00a fe0b 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b55a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    b55c:	2b05      	cmp	r3, #5
    b55e:	dd03      	ble.n	b568 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
      delete[] dims_pointer_;
    b560:	985b      	ldr	r0, [sp, #364]	; 0x16c
    b562:	b108      	cbz	r0, b568 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
    b564:	f00a fe04 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b568:	9b54      	ldr	r3, [sp, #336]	; 0x150
    b56a:	2b05      	cmp	r3, #5
    b56c:	dd03      	ble.n	b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
      delete[] dims_pointer_;
    b56e:	9855      	ldr	r0, [sp, #340]	; 0x154
    b570:	b108      	cbz	r0, b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38a>
    b572:	f00a fdfd 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    b576:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    b578:	2b05      	cmp	r3, #5
    b57a:	dd03      	ble.n	b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
      delete[] dims_pointer_;
    b57c:	984f      	ldr	r0, [sp, #316]	; 0x13c
    b57e:	b108      	cbz	r0, b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x398>
    b580:	f00a fdf6 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    b584:	2000      	movs	r0, #0
      break;
    b586:	e688      	b.n	b29a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>

0000b588 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
    b588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b58c:	b08f      	sub	sp, #60	; 0x3c
    b58e:	4604      	mov	r4, r0
    b590:	460d      	mov	r5, r1
    b592:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    b594:	6809      	ldr	r1, [r1, #0]
    b596:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    b598:	2903      	cmp	r1, #3
    b59a:	d00a      	beq.n	b5b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b59c:	2902      	cmp	r1, #2
    b59e:	d008      	beq.n	b5b2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    b5a0:	6945      	ldr	r5, [r0, #20]
    b5a2:	4b77      	ldr	r3, [pc, #476]	; (b780 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
    b5a4:	9300      	str	r3, [sp, #0]
    b5a6:	2356      	movs	r3, #86	; 0x56
    b5a8:	4a76      	ldr	r2, [pc, #472]	; (b784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b5aa:	4977      	ldr	r1, [pc, #476]	; (b788 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b5ac:	47a8      	blx	r5
    b5ae:	2001      	movs	r0, #1
    b5b0:	e011      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    b5b2:	686a      	ldr	r2, [r5, #4]
    b5b4:	6812      	ldr	r2, [r2, #0]
    b5b6:	2a01      	cmp	r2, #1
    b5b8:	d010      	beq.n	b5dc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    b5ba:	6966      	ldr	r6, [r4, #20]
    b5bc:	2501      	movs	r5, #1
    b5be:	9503      	str	r5, [sp, #12]
    b5c0:	9202      	str	r2, [sp, #8]
    b5c2:	4b72      	ldr	r3, [pc, #456]	; (b78c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    b5c4:	9301      	str	r3, [sp, #4]
    b5c6:	4b72      	ldr	r3, [pc, #456]	; (b790 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    b5c8:	9300      	str	r3, [sp, #0]
    b5ca:	2357      	movs	r3, #87	; 0x57
    b5cc:	4a6d      	ldr	r2, [pc, #436]	; (b784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b5ce:	4971      	ldr	r1, [pc, #452]	; (b794 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    b5d0:	4620      	mov	r0, r4
    b5d2:	47b0      	blx	r6
    b5d4:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    b5d6:	b00f      	add	sp, #60	; 0x3c
    b5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    b5dc:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    b5e0:	68b1      	ldr	r1, [r6, #8]
    b5e2:	6872      	ldr	r2, [r6, #4]
    b5e4:	f8d6 8014 	ldr.w	r8, [r6, #20]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b5e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b5ea:	3801      	subs	r0, #1
    b5ec:	6937      	ldr	r7, [r6, #16]
    b5ee:	fb00 f007 	mul.w	r0, r0, r7
    b5f2:	f100 0901 	add.w	r9, r0, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
    b5f6:	b1b2      	cbz	r2, b626 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>

  switch (padding) {
    b5f8:	f1be 0f01 	cmp.w	lr, #1
    b5fc:	d005      	beq.n	b60a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    b5fe:	f1be 0f02 	cmp.w	lr, #2
    b602:	d009      	beq.n	b618 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    b604:	f04f 0c00 	mov.w	ip, #0
    b608:	e00e      	b.n	b628 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    b60a:	eb02 0c03 	add.w	ip, r2, r3
    b60e:	f10c 3cff 	add.w	ip, ip, #4294967295
    b612:	fb9c fcf2 	sdiv	ip, ip, r2
    b616:	e007      	b.n	b628 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    b618:	eb02 0c03 	add.w	ip, r2, r3
    b61c:	ebac 0c09 	sub.w	ip, ip, r9
    b620:	fb9c fcf2 	sdiv	ip, ip, r2
    b624:	e000      	b.n	b628 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    b626:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    b628:	9f18      	ldr	r7, [sp, #96]	; 0x60
    b62a:	3f01      	subs	r7, #1
    b62c:	fb07 f708 	mul.w	r7, r7, r8
    b630:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    b632:	b1c1      	cbz	r1, b666 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    b634:	f1be 0f01 	cmp.w	lr, #1
    b638:	d005      	beq.n	b646 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    b63a:	f1be 0f02 	cmp.w	lr, #2
    b63e:	d00a      	beq.n	b656 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    b640:	f04f 0e00 	mov.w	lr, #0
    b644:	e010      	b.n	b668 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    b646:	9816      	ldr	r0, [sp, #88]	; 0x58
    b648:	eb01 0e00 	add.w	lr, r1, r0
    b64c:	f10e 3eff 	add.w	lr, lr, #4294967295
    b650:	fb9e fef1 	sdiv	lr, lr, r1
    b654:	e008      	b.n	b668 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    b656:	9816      	ldr	r0, [sp, #88]	; 0x58
    b658:	eb01 0e00 	add.w	lr, r1, r0
    b65c:	ebae 0e07 	sub.w	lr, lr, r7
    b660:	fb9e fef1 	sdiv	lr, lr, r1
    b664:	e000      	b.n	b668 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    b666:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b668:	f10e 3eff 	add.w	lr, lr, #4294967295
    b66c:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    b670:	9f16      	ldr	r7, [sp, #88]	; 0x58
    b672:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    b674:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    b678:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    b67c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    b680:	1049      	asrs	r1, r1, #1
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
  padding_values.height =
    b682:	910b      	str	r1, [sp, #44]	; 0x2c
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
    b684:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    b686:	f10c 3cff 	add.w	ip, ip, #4294967295
    b68a:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    b68e:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    b690:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    b694:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    b698:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    b69c:	1052      	asrs	r2, r2, #1
  padding_values.width =
    b69e:	920a      	str	r2, [sp, #40]	; 0x28
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
    b6a0:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    b6a2:	ab0e      	add	r3, sp, #56	; 0x38
    b6a4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    b6a8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    b6aa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b6ae:	2200      	movs	r2, #0
    b6b0:	4629      	mov	r1, r5
    b6b2:	4620      	mov	r0, r4
    b6b4:	f008 faf4 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b6b8:	4607      	mov	r7, r0
    b6ba:	b308      	cbz	r0, b700 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x178>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b6bc:	2201      	movs	r2, #1
    b6be:	4629      	mov	r1, r5
    b6c0:	4620      	mov	r0, r4
    b6c2:	f008 faed 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b6c6:	4680      	mov	r8, r0
    b6c8:	b320      	cbz	r0, b714 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18c>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    b6ca:	2202      	movs	r2, #2
    b6cc:	4629      	mov	r1, r5
    b6ce:	4620      	mov	r0, r4
    b6d0:	f008 fb24 	bl	13d1c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    b6d4:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b6d6:	2200      	movs	r2, #0
    b6d8:	4629      	mov	r1, r5
    b6da:	4620      	mov	r0, r4
    b6dc:	f008 faff 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b6e0:	4605      	mov	r5, r0
    b6e2:	b308      	cbz	r0, b728 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a0>
  if (data_type != kTfLiteFloat32) {
    b6e4:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    b6e8:	2b01      	cmp	r3, #1
    b6ea:	d127      	bne.n	b73c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b4>
  data->input_zero_point = input->params.zero_point;
    b6ec:	693b      	ldr	r3, [r7, #16]
    b6ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    b6f0:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    b6f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
    b6f6:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    b6f8:	692b      	ldr	r3, [r5, #16]
    b6fa:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    b6fc:	2000      	movs	r0, #0
    b6fe:	e76a      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    b700:	6965      	ldr	r5, [r4, #20]
    b702:	4b25      	ldr	r3, [pc, #148]	; (b798 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    b704:	9300      	str	r3, [sp, #0]
    b706:	2361      	movs	r3, #97	; 0x61
    b708:	4a1e      	ldr	r2, [pc, #120]	; (b784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b70a:	491f      	ldr	r1, [pc, #124]	; (b788 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b70c:	4620      	mov	r0, r4
    b70e:	47a8      	blx	r5
    b710:	2001      	movs	r0, #1
    b712:	e760      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    b714:	6965      	ldr	r5, [r4, #20]
    b716:	4b21      	ldr	r3, [pc, #132]	; (b79c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    b718:	9300      	str	r3, [sp, #0]
    b71a:	2363      	movs	r3, #99	; 0x63
    b71c:	4a19      	ldr	r2, [pc, #100]	; (b784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b71e:	491a      	ldr	r1, [pc, #104]	; (b788 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b720:	4620      	mov	r0, r4
    b722:	47a8      	blx	r5
    b724:	2001      	movs	r0, #1
    b726:	e756      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    b728:	6965      	ldr	r5, [r4, #20]
    b72a:	4b1d      	ldr	r3, [pc, #116]	; (b7a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    b72c:	9300      	str	r3, [sp, #0]
    b72e:	2367      	movs	r3, #103	; 0x67
    b730:	4a14      	ldr	r2, [pc, #80]	; (b784 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
    b732:	4915      	ldr	r1, [pc, #84]	; (b788 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    b734:	4620      	mov	r0, r4
    b736:	47a8      	blx	r5
    b738:	2001      	movs	r0, #1
    b73a:	e74c      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
    b73c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b740:	685b      	ldr	r3, [r3, #4]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    b742:	360c      	adds	r6, #12
    b744:	9308      	str	r3, [sp, #32]
    b746:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b74a:	9307      	str	r3, [sp, #28]
    b74c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b750:	9306      	str	r3, [sp, #24]
    b752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b754:	3330      	adds	r3, #48	; 0x30
    b756:	9305      	str	r3, [sp, #20]
    b758:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b75a:	332c      	adds	r3, #44	; 0x2c
    b75c:	9304      	str	r3, [sp, #16]
    b75e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b760:	3320      	adds	r3, #32
    b762:	9303      	str	r3, [sp, #12]
    b764:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b766:	331c      	adds	r3, #28
    b768:	9302      	str	r3, [sp, #8]
    b76a:	9601      	str	r6, [sp, #4]
    b76c:	9000      	str	r0, [sp, #0]
    b76e:	464b      	mov	r3, r9
    b770:	4642      	mov	r2, r8
    b772:	4639      	mov	r1, r7
    b774:	4620      	mov	r0, r4
    b776:	f7fd ffff 	bl	9778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    b77a:	2800      	cmp	r0, #0
    b77c:	d0b6      	beq.n	b6ec <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x164>
    b77e:	e72a      	b.n	b5d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    b780:	0006b4d8 	.word	0x0006b4d8
    b784:	0006b484 	.word	0x0006b484
    b788:	0006aafc 	.word	0x0006aafc
    b78c:	0006bb44 	.word	0x0006bb44
    b790:	0006b4fc 	.word	0x0006b4fc
    b794:	0006adbc 	.word	0x0006adbc
    b798:	0006b510 	.word	0x0006b510
    b79c:	0006b524 	.word	0x0006b524
    b7a0:	0006b538 	.word	0x0006b538

0000b7a4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7a8:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    b7aa:	690e      	ldr	r6, [r1, #16]
    b7ac:	2e00      	cmp	r6, #0
    b7ae:	d052      	beq.n	b856 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
    b7b0:	4604      	mov	r4, r0
    b7b2:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b7b4:	694f      	ldr	r7, [r1, #20]
    b7b6:	2f00      	cmp	r7, #0
    b7b8:	d04f      	beq.n	b85a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb6>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    b7ba:	2200      	movs	r2, #0
    b7bc:	f008 fa8f 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    b7c0:	4680      	mov	r8, r0
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d04b      	beq.n	b85e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    b7c6:	2200      	movs	r2, #0
    b7c8:	4629      	mov	r1, r5
    b7ca:	4620      	mov	r0, r4
    b7cc:	f008 fa68 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    b7d0:	4681      	mov	r9, r0
    b7d2:	2800      	cmp	r0, #0
    b7d4:	d051      	beq.n	b87a <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    b7d6:	2201      	movs	r2, #1
    b7d8:	4629      	mov	r1, r5
    b7da:	4620      	mov	r0, r4
    b7dc:	f008 fa60 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    b7e0:	4682      	mov	sl, r0
    b7e2:	2800      	cmp	r0, #0
    b7e4:	d054      	beq.n	b890 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xec>

  const int input_width = input->dims->data[2];
    b7e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    b7ea:	68da      	ldr	r2, [r3, #12]
    b7ec:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    b7ee:	689b      	ldr	r3, [r3, #8]
    b7f0:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    b7f2:	6883      	ldr	r3, [r0, #8]
    b7f4:	68da      	ldr	r2, [r3, #12]
    b7f6:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    b7f8:	689a      	ldr	r2, [r3, #8]
    b7fa:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    b7fc:	f8d8 2008 	ldr.w	r2, [r8, #8]
    b800:	68d1      	ldr	r1, [r2, #12]
    b802:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    b804:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
    b808:	685a      	ldr	r2, [r3, #4]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b80a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b80c:	ea4f 0882 	mov.w	r8, r2, lsl #2
    b810:	4641      	mov	r1, r8
    b812:	4620      	mov	r0, r4
    b814:	4798      	blx	r3
  data->per_channel_output_multiplier =
    b816:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    b818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b81a:	4641      	mov	r1, r8
    b81c:	4620      	mov	r0, r4
    b81e:	4798      	blx	r3
  data->per_channel_output_shift =
    b820:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
    b822:	f899 3000 	ldrb.w	r3, [r9]
    b826:	2b09      	cmp	r3, #9
    b828:	d03d      	beq.n	b8a6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
    b82a:	2b07      	cmp	r3, #7
    b82c:	d03b      	beq.n	b8a6 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x102>
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
    b82e:	9606      	str	r6, [sp, #24]
    b830:	9305      	str	r3, [sp, #20]
    b832:	f8cd b010 	str.w	fp, [sp, #16]
    b836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b838:	9303      	str	r3, [sp, #12]
    b83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b83c:	9302      	str	r3, [sp, #8]
    b83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b840:	9301      	str	r3, [sp, #4]
    b842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b844:	9300      	str	r3, [sp, #0]
    b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b848:	463a      	mov	r2, r7
    b84a:	4629      	mov	r1, r5
    b84c:	4620      	mov	r0, r4
    b84e:	f7ff fe9b 	bl	b588 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    b852:	4680      	mov	r8, r0
    b854:	e00d      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node->user_data != nullptr);
    b856:	f00a fca0 	bl	1619a <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    b85a:	f00a fc9e 	bl	1619a <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    b85e:	6965      	ldr	r5, [r4, #20]
    b860:	4b32      	ldr	r3, [pc, #200]	; (b92c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    b862:	9300      	str	r3, [sp, #0]
    b864:	2386      	movs	r3, #134	; 0x86
    b866:	4a32      	ldr	r2, [pc, #200]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b868:	4932      	ldr	r1, [pc, #200]	; (b934 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b86a:	4620      	mov	r0, r4
    b86c:	47a8      	blx	r5
    b86e:	f04f 0801 	mov.w	r8, #1
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    b872:	4640      	mov	r0, r8
    b874:	b00f      	add	sp, #60	; 0x3c
    b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    b87a:	6965      	ldr	r5, [r4, #20]
    b87c:	4b2e      	ldr	r3, [pc, #184]	; (b938 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    b87e:	9300      	str	r3, [sp, #0]
    b880:	2388      	movs	r3, #136	; 0x88
    b882:	4a2b      	ldr	r2, [pc, #172]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b884:	492b      	ldr	r1, [pc, #172]	; (b934 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b886:	4620      	mov	r0, r4
    b888:	47a8      	blx	r5
    b88a:	f04f 0801 	mov.w	r8, #1
    b88e:	e7f0      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
  TF_LITE_ENSURE(context, filter != nullptr);
    b890:	6965      	ldr	r5, [r4, #20]
    b892:	4b2a      	ldr	r3, [pc, #168]	; (b93c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    b894:	9300      	str	r3, [sp, #0]
    b896:	238a      	movs	r3, #138	; 0x8a
    b898:	4a25      	ldr	r2, [pc, #148]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b89a:	4926      	ldr	r1, [pc, #152]	; (b934 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b89c:	4620      	mov	r0, r4
    b89e:	47a8      	blx	r5
    b8a0:	f04f 0801 	mov.w	r8, #1
    b8a4:	e7e5      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    b8a6:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    b8aa:	f1b8 0f01 	cmp.w	r8, #1
    b8ae:	d00f      	beq.n	b8d0 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x12c>
    b8b0:	6966      	ldr	r6, [r4, #20]
    b8b2:	2501      	movs	r5, #1
    b8b4:	9503      	str	r5, [sp, #12]
    b8b6:	f8cd 8008 	str.w	r8, [sp, #8]
    b8ba:	4b21      	ldr	r3, [pc, #132]	; (b940 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    b8bc:	9301      	str	r3, [sp, #4]
    b8be:	4b21      	ldr	r3, [pc, #132]	; (b944 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    b8c0:	9300      	str	r3, [sp, #0]
    b8c2:	239e      	movs	r3, #158	; 0x9e
    b8c4:	4a1a      	ldr	r2, [pc, #104]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b8c6:	4920      	ldr	r1, [pc, #128]	; (b948 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b8c8:	4620      	mov	r0, r4
    b8ca:	47b0      	blx	r6
    b8cc:	46a8      	mov	r8, r5
    b8ce:	e7d0      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    const auto* affine_quantization =
    b8d0:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    b8d4:	b1a2      	cbz	r2, b900 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b8d6:	6811      	ldr	r1, [r2, #0]
    b8d8:	b1a1      	cbz	r1, b904 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x160>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b8da:	6850      	ldr	r0, [r2, #4]
    b8dc:	b1a0      	cbz	r0, b908 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x164>
    TF_LITE_ENSURE(context,
    b8de:	680a      	ldr	r2, [r1, #0]
    b8e0:	2a01      	cmp	r2, #1
    b8e2:	d013      	beq.n	b90c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b8e4:	f8da 1008 	ldr.w	r1, [sl, #8]
    b8e8:	6849      	ldr	r1, [r1, #4]
    b8ea:	428a      	cmp	r2, r1
    b8ec:	d00e      	beq.n	b90c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x168>
    b8ee:	6965      	ldr	r5, [r4, #20]
    b8f0:	4b16      	ldr	r3, [pc, #88]	; (b94c <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    b8f2:	9300      	str	r3, [sp, #0]
    b8f4:	23a7      	movs	r3, #167	; 0xa7
    b8f6:	4a0e      	ldr	r2, [pc, #56]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b8f8:	490e      	ldr	r1, [pc, #56]	; (b934 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    b8fa:	4620      	mov	r0, r4
    b8fc:	47a8      	blx	r5
    b8fe:	e7b8      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK(affine_quantization != nullptr);
    b900:	f00a fc4b 	bl	1619a <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    b904:	f00a fc49 	bl	1619a <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    b908:	f00a fc47 	bl	1619a <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    b90c:	6801      	ldr	r1, [r0, #0]
    b90e:	428a      	cmp	r2, r1
    b910:	d08d      	beq.n	b82e <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
    b912:	6965      	ldr	r5, [r4, #20]
    b914:	9103      	str	r1, [sp, #12]
    b916:	9202      	str	r2, [sp, #8]
    b918:	4b0d      	ldr	r3, [pc, #52]	; (b950 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    b91a:	9301      	str	r3, [sp, #4]
    b91c:	4b0d      	ldr	r3, [pc, #52]	; (b954 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
    b91e:	9300      	str	r3, [sp, #0]
    b920:	23ab      	movs	r3, #171	; 0xab
    b922:	4a03      	ldr	r2, [pc, #12]	; (b930 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    b924:	4908      	ldr	r1, [pc, #32]	; (b948 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    b926:	4620      	mov	r0, r4
    b928:	47a8      	blx	r5
    b92a:	e7a2      	b.n	b872 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xce>
    b92c:	0006b538 	.word	0x0006b538
    b930:	0006b484 	.word	0x0006b484
    b934:	0006aafc 	.word	0x0006aafc
    b938:	0006b510 	.word	0x0006b510
    b93c:	0006b524 	.word	0x0006b524
    b940:	0006add8 	.word	0x0006add8
    b944:	0006ae10 	.word	0x0006ae10
    b948:	0006adbc 	.word	0x0006adbc
    b94c:	0006b54c 	.word	0x0006b54c
    b950:	0006b5c8 	.word	0x0006b5c8
    b954:	0006aec4 	.word	0x0006aec4

0000b958 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
    b958:	b470      	push	{r4, r5, r6}
    b95a:	4606      	mov	r6, r0
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    b95c:	4604      	mov	r4, r0
    b95e:	4d05      	ldr	r5, [pc, #20]	; (b974 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
    b960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    b96c:	4630      	mov	r0, r6
    b96e:	bc70      	pop	{r4, r5, r6}
    b970:	4770      	bx	lr
    b972:	bf00      	nop
    b974:	00017130 	.word	0x00017130

0000b978 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
    b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b97c:	b0a5      	sub	sp, #148	; 0x94
    b97e:	911a      	str	r1, [sp, #104]	; 0x68
    b980:	921b      	str	r2, [sp, #108]	; 0x6c
    b982:	461f      	mov	r7, r3
    b984:	f8dd 80bc 	ldr.w	r8, [sp, #188]	; 0xbc
    b988:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    b98a:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
    b98e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    b992:	920f      	str	r2, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
    b994:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    b998:	9210      	str	r2, [sp, #64]	; 0x40
  const int dilation_width_factor = params.dilation_width_factor;
    b99a:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
    b99e:	9211      	str	r2, [sp, #68]	; 0x44
  const int dilation_height_factor = params.dilation_height_factor;
    b9a0:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
    b9a4:	9212      	str	r2, [sp, #72]	; 0x48
  const int pad_width = params.padding_values.width;
    b9a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    b9aa:	9213      	str	r2, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
    b9ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    b9b0:	9214      	str	r2, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
    b9b2:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
    b9b6:	9206      	str	r2, [sp, #24]
  const int32_t input_offset = params.input_offset;
    b9b8:	6942      	ldr	r2, [r0, #20]
    b9ba:	9215      	str	r2, [sp, #84]	; 0x54
  const int32_t output_offset = params.output_offset;
    b9bc:	69c2      	ldr	r2, [r0, #28]
    b9be:	9216      	str	r2, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    b9c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b9c2:	911f      	str	r1, [sp, #124]	; 0x7c
  const int32_t output_activation_max = params.quantized_activation_max;
    b9c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    b9c6:	921e      	str	r2, [sp, #120]	; 0x78
  inline int32_t DimensionsCount() const { return size_; }
    b9c8:	6838      	ldr	r0, [r7, #0]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    b9ca:	2804      	cmp	r0, #4
    b9cc:	f040 80b6 	bne.w	bb3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c4>
    b9d0:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    b9d4:	2804      	cmp	r0, #4
    b9d6:	f040 80b3 	bne.w	bb40 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c8>
    b9da:	f8d9 0000 	ldr.w	r0, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    b9de:	2804      	cmp	r0, #4
    b9e0:	f040 80b0 	bne.w	bb44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1cc>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    b9e4:	4291      	cmp	r1, r2
    b9e6:	f300 80af 	bgt.w	bb48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d0>
    TFLITE_DCHECK_LT(i, size_);
    b9ea:	683a      	ldr	r2, [r7, #0]
    b9ec:	2a00      	cmp	r2, #0
    b9ee:	f340 80ad 	ble.w	bb4c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    b9f2:	2a05      	cmp	r2, #5
    b9f4:	f340 80ac 	ble.w	bb50 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d8>
    b9f8:	687a      	ldr	r2, [r7, #4]
    b9fa:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    b9fc:	f8d9 1000 	ldr.w	r1, [r9]
    ba00:	2900      	cmp	r1, #0
    ba02:	f340 80a7 	ble.w	bb54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1dc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba06:	2905      	cmp	r1, #5
    ba08:	f340 80a6 	ble.w	bb58 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e0>
    ba0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba10:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ba12:	4291      	cmp	r1, r2
    ba14:	f040 80a3 	bne.w	bb5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1e6>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ba18:	9223      	str	r2, [sp, #140]	; 0x8c
    TFLITE_DCHECK_LT(i, size_);
    ba1a:	f8d9 1000 	ldr.w	r1, [r9]
    ba1e:	2900      	cmp	r1, #0
    ba20:	f340 809f 	ble.w	bb62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba24:	2905      	cmp	r1, #5
    ba26:	f340 809e 	ble.w	bb66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ee>
    ba2a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba2e:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ba30:	9122      	str	r1, [sp, #136]	; 0x88
      if (__b < __a)
    ba32:	428a      	cmp	r2, r1
    ba34:	f300 809a 	bgt.w	bb6c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
      return __a;
    ba38:	aa23      	add	r2, sp, #140	; 0x8c
    ba3a:	6812      	ldr	r2, [r2, #0]
    ba3c:	9217      	str	r2, [sp, #92]	; 0x5c
    TFLITE_DCHECK_LT(i, size_);
    ba3e:	f8d8 2000 	ldr.w	r2, [r8]
    ba42:	2a03      	cmp	r2, #3
    ba44:	f340 8094 	ble.w	bb70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba48:	2a05      	cmp	r2, #5
    ba4a:	f340 8093 	ble.w	bb74 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1fc>
    ba4e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ba52:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
    ba54:	f8d9 1000 	ldr.w	r1, [r9]
    ba58:	2903      	cmp	r1, #3
    ba5a:	f340 808e 	ble.w	bb7a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba5e:	2905      	cmp	r1, #5
    ba60:	f340 808d 	ble.w	bb7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x206>
    ba64:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba68:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ba6a:	4291      	cmp	r1, r2
    ba6c:	f040 808a 	bne.w	bb84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ba70:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
    ba72:	f8d9 1000 	ldr.w	r1, [r9]
    ba76:	2903      	cmp	r1, #3
    ba78:	f340 8086 	ble.w	bb88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba7c:	2905      	cmp	r1, #5
    ba7e:	f340 8085 	ble.w	bb8c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x214>
    ba82:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ba86:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ba88:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
    ba8a:	428a      	cmp	r2, r1
    ba8c:	f300 8081 	bgt.w	bb92 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21a>
      return __a;
    ba90:	aa21      	add	r2, sp, #132	; 0x84
    ba92:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
    ba94:	683a      	ldr	r2, [r7, #0]
    ba96:	2a01      	cmp	r2, #1
    ba98:	dd7d      	ble.n	bb96 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x21e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ba9a:	2a05      	cmp	r2, #5
    ba9c:	dd7d      	ble.n	bb9a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x222>
    ba9e:	687a      	ldr	r2, [r7, #4]
    baa0:	6852      	ldr	r2, [r2, #4]
    baa2:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    baa4:	683a      	ldr	r2, [r7, #0]
    baa6:	2a02      	cmp	r2, #2
    baa8:	dd7a      	ble.n	bba0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baaa:	2a05      	cmp	r2, #5
    baac:	dd7a      	ble.n	bba4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22c>
    baae:	687a      	ldr	r2, [r7, #4]
    bab0:	6892      	ldr	r2, [r2, #8]
    bab2:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
    bab4:	683a      	ldr	r2, [r7, #0]
    bab6:	2a03      	cmp	r2, #3
    bab8:	dd77      	ble.n	bbaa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x232>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baba:	2a05      	cmp	r2, #5
    babc:	dd77      	ble.n	bbae <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x236>
    babe:	687a      	ldr	r2, [r7, #4]
    bac0:	68d2      	ldr	r2, [r2, #12]
    bac2:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
    bac4:	f8d8 2000 	ldr.w	r2, [r8]
    bac8:	2a01      	cmp	r2, #1
    baca:	dd73      	ble.n	bbb4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x23c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bacc:	2a05      	cmp	r2, #5
    bace:	dd73      	ble.n	bbb8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x240>
    bad0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bad4:	6852      	ldr	r2, [r2, #4]
    bad6:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
    bad8:	f8d8 2000 	ldr.w	r2, [r8]
    badc:	2a02      	cmp	r2, #2
    bade:	dd6f      	ble.n	bbc0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x248>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bae0:	2a05      	cmp	r2, #5
    bae2:	dd6f      	ble.n	bbc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
    bae4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bae8:	6892      	ldr	r2, [r2, #8]
    baea:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
    baec:	f8d9 2000 	ldr.w	r2, [r9]
    baf0:	2a01      	cmp	r2, #1
    baf2:	dd6b      	ble.n	bbcc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x254>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    baf4:	2a05      	cmp	r2, #5
    baf6:	dd6b      	ble.n	bbd0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
    baf8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    bafc:	6852      	ldr	r2, [r2, #4]
    bafe:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
    bb00:	f8d9 2000 	ldr.w	r2, [r9]
    bb04:	2a02      	cmp	r2, #2
    bb06:	dd67      	ble.n	bbd8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x260>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb08:	2a05      	cmp	r2, #5
    bb0a:	dd67      	ble.n	bbdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x264>
    bb0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    bb10:	6892      	ldr	r2, [r2, #8]
    bb12:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    bb14:	9a05      	ldr	r2, [sp, #20]
    bb16:	9806      	ldr	r0, [sp, #24]
    bb18:	fb02 f200 	mul.w	r2, r2, r0
    bb1c:	428a      	cmp	r2, r1
    bb1e:	d161      	bne.n	bbe4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bb20:	681c      	ldr	r4, [r3, #0]
    bb22:	2c05      	cmp	r4, #5
    bb24:	dd60      	ble.n	bbe8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x270>
    bb26:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
    bb28:	2200      	movs	r2, #0
    int buffer_size = 1;
    bb2a:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
    bb2c:	42a2      	cmp	r2, r4
    bb2e:	da5d      	bge.n	bbec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x274>
      buffer_size *= dims_data[i];
    bb30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    bb34:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
    bb38:	3201      	adds	r2, #1
    bb3a:	e7f7      	b.n	bb2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
    bb3c:	f00a fb2d 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
    bb40:	f00a fb2b 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
    bb44:	f00a fb29 	bl	1619a <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    bb48:	f00a fb27 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    bb4c:	f00a fb25 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb50:	687a      	ldr	r2, [r7, #4]
    bb52:	e753      	b.n	b9fc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
    TFLITE_DCHECK_LT(i, size_);
    bb54:	f00a fb21 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb58:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bb5c:	e759      	b.n	ba12 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    bb5e:	f00a fb1c 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    bb62:	f00a fb1a 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb66:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bb6a:	e761      	b.n	ba30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xb8>
	return __b;
    bb6c:	aa22      	add	r2, sp, #136	; 0x88
    bb6e:	e764      	b.n	ba3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    TFLITE_DCHECK_LT(i, size_);
    bb70:	f00a fb13 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb74:	f8d8 2010 	ldr.w	r2, [r8, #16]
    bb78:	e76c      	b.n	ba54 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xdc>
    TFLITE_DCHECK_LT(i, size_);
    bb7a:	f00a fb0e 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb7e:	f8d9 1010 	ldr.w	r1, [r9, #16]
    bb82:	e772      	b.n	ba6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    bb84:	f00a fb09 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    bb88:	f00a fb07 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
    bb90:	e77a      	b.n	ba88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x110>
    bb92:	aa20      	add	r2, sp, #128	; 0x80
    bb94:	e77d      	b.n	ba92 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11a>
    TFLITE_DCHECK_LT(i, size_);
    bb96:	f00a fb00 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bb9a:	68ba      	ldr	r2, [r7, #8]
    bb9c:	920c      	str	r2, [sp, #48]	; 0x30
    bb9e:	e781      	b.n	baa4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
    TFLITE_DCHECK_LT(i, size_);
    bba0:	f00a fafb 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bba4:	68fa      	ldr	r2, [r7, #12]
    bba6:	920b      	str	r2, [sp, #44]	; 0x2c
    bba8:	e784      	b.n	bab4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
    TFLITE_DCHECK_LT(i, size_);
    bbaa:	f00a faf6 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbae:	693a      	ldr	r2, [r7, #16]
    bbb0:	9205      	str	r2, [sp, #20]
    bbb2:	e787      	b.n	bac4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14c>
    TFLITE_DCHECK_LT(i, size_);
    bbb4:	f00a faf1 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbb8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    bbbc:	920a      	str	r2, [sp, #40]	; 0x28
    bbbe:	e78b      	b.n	bad8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    TFLITE_DCHECK_LT(i, size_);
    bbc0:	f00a faeb 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbc4:	f8d8 200c 	ldr.w	r2, [r8, #12]
    bbc8:	9209      	str	r2, [sp, #36]	; 0x24
    bbca:	e78f      	b.n	baec <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x174>
    TFLITE_DCHECK_LT(i, size_);
    bbcc:	f00a fae5 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbd0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    bbd4:	9208      	str	r2, [sp, #32]
    bbd6:	e793      	b.n	bb00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x188>
    TFLITE_DCHECK_LT(i, size_);
    bbd8:	f00a fadf 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    bbdc:	f8d9 200c 	ldr.w	r2, [r9, #12]
    bbe0:	9207      	str	r2, [sp, #28]
    bbe2:	e797      	b.n	bb14 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
    bbe4:	f00a fad9 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    bbe8:	3304      	adds	r3, #4
    bbea:	e79d      	b.n	bb28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    bbec:	428d      	cmp	r5, r1
    bbee:	d128      	bne.n	bc42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ca>

  for (int batch = 0; batch < batches; ++batch) {
    bbf0:	f04f 0a00 	mov.w	sl, #0
    bbf4:	46c3      	mov	fp, r8
    bbf6:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    bbfa:	46d1      	mov	r9, sl
    bbfc:	46ba      	mov	sl, r7
    bbfe:	9f33      	ldr	r7, [sp, #204]	; 0xcc
    bc00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    bc02:	4599      	cmp	r9, r3
    bc04:	f280 81b4 	bge.w	bf70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5f8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
    bc08:	2300      	movs	r3, #0
    bc0a:	9301      	str	r3, [sp, #4]
    bc0c:	f8cd 900c 	str.w	r9, [sp, #12]
    bc10:	46d0      	mov	r8, sl
    bc12:	46d9      	mov	r9, fp
    bc14:	46ba      	mov	sl, r7
    bc16:	9b01      	ldr	r3, [sp, #4]
    bc18:	9a08      	ldr	r2, [sp, #32]
    bc1a:	4293      	cmp	r3, r2
    bc1c:	f280 81a0 	bge.w	bf60 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5e8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
    bc20:	2300      	movs	r3, #0
    bc22:	9302      	str	r3, [sp, #8]
    bc24:	464f      	mov	r7, r9
    bc26:	46c1      	mov	r9, r8
    bc28:	46d0      	mov	r8, sl
    bc2a:	9b02      	ldr	r3, [sp, #8]
    bc2c:	9a07      	ldr	r2, [sp, #28]
    bc2e:	4293      	cmp	r3, r2
    bc30:	f280 818f 	bge.w	bf52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5da>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    bc34:	f04f 0b00 	mov.w	fp, #0
    bc38:	46da      	mov	sl, fp
    bc3a:	46cb      	mov	fp, r9
    bc3c:	46c1      	mov	r9, r8
    bc3e:	46b8      	mov	r8, r7
    bc40:	e17a      	b.n	bf38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5c0>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
    bc42:	f00a faaa 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bc46:	f00a faa8 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bc4a:	f00a faa6 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bc4e:	f00a faa4 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bc52:	f00a faa2 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bc56:	f00a faa0 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bc5a:	f00a fa9e 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bc5e:	f00a fa9c 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bc62:	f00a fa9a 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bc66:	f00a fa98 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bc6a:	f00a fa96 	bl	1619a <abort>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    bc6e:	3201      	adds	r2, #1
    bc70:	9909      	ldr	r1, [sp, #36]	; 0x24
    bc72:	428a      	cmp	r2, r1
    bc74:	da5e      	bge.n	bd34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
    bc76:	9911      	ldr	r1, [sp, #68]	; 0x44
    bc78:	980d      	ldr	r0, [sp, #52]	; 0x34
    bc7a:	fb01 0602 	mla	r6, r1, r2, r0
                const int in_y =
    bc7e:	9912      	ldr	r1, [sp, #72]	; 0x48
    bc80:	fb01 4703 	mla	r7, r1, r3, r4
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
    bc84:	2e00      	cmp	r6, #0
    bc86:	dbf2      	blt.n	bc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bc88:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bc8a:	428e      	cmp	r6, r1
    bc8c:	daef      	bge.n	bc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bc8e:	2f00      	cmp	r7, #0
    bc90:	dbed      	blt.n	bc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bc92:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc94:	428f      	cmp	r7, r1
    bc96:	daea      	bge.n	bc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
  inline int32_t DimensionsCount() const { return size_; }
    bc98:	f8db 0000 	ldr.w	r0, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bc9c:	2804      	cmp	r0, #4
    bc9e:	d1d2      	bne.n	bc46 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ce>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bca0:	9903      	ldr	r1, [sp, #12]
    bca2:	2900      	cmp	r1, #0
    bca4:	dbd1      	blt.n	bc4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
    bca6:	f8db 0004 	ldr.w	r0, [fp, #4]
    bcaa:	4281      	cmp	r1, r0
    bcac:	dacd      	bge.n	bc4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d2>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bcae:	2f00      	cmp	r7, #0
    bcb0:	dbcd      	blt.n	bc4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
    bcb2:	f8db e008 	ldr.w	lr, [fp, #8]
    bcb6:	4577      	cmp	r7, lr
    bcb8:	dac9      	bge.n	bc4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2d6>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bcba:	2e00      	cmp	r6, #0
    bcbc:	dbc9      	blt.n	bc52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
    bcbe:	f8db c00c 	ldr.w	ip, [fp, #12]
    bcc2:	4566      	cmp	r6, ip
    bcc4:	dac5      	bge.n	bc52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2da>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bcc6:	f1ba 0f00 	cmp.w	sl, #0
    bcca:	dbc4      	blt.n	bc56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
    bccc:	f8db 0010 	ldr.w	r0, [fp, #16]
    bcd0:	4582      	cmp	sl, r0
    bcd2:	dac0      	bge.n	bc56 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2de>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bcd4:	9903      	ldr	r1, [sp, #12]
    bcd6:	fb0e 7701 	mla	r7, lr, r1, r7
    bcda:	fb07 660c 	mla	r6, r7, ip, r6
    bcde:	fb06 a000 	mla	r0, r6, r0, sl
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
                      input_shape, batch, in_y, in_x, in_channel)];
    bce2:	992e      	ldr	r1, [sp, #184]	; 0xb8
    bce4:	560e      	ldrsb	r6, [r1, r0]
  inline int32_t DimensionsCount() const { return size_; }
    bce6:	f8d8 0000 	ldr.w	r0, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bcea:	2804      	cmp	r0, #4
    bcec:	d1b5      	bne.n	bc5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e2>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bcee:	f8d8 0004 	ldr.w	r0, [r8, #4]
    bcf2:	2800      	cmp	r0, #0
    bcf4:	ddb3      	ble.n	bc5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2e6>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	dbb3      	blt.n	bc62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
    bcfa:	f8d8 0008 	ldr.w	r0, [r8, #8]
    bcfe:	4283      	cmp	r3, r0
    bd00:	daaf      	bge.n	bc62 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bd02:	2a00      	cmp	r2, #0
    bd04:	dbaf      	blt.n	bc66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
    bd06:	f8d8 700c 	ldr.w	r7, [r8, #12]
    bd0a:	42ba      	cmp	r2, r7
    bd0c:	daab      	bge.n	bc66 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bd0e:	2d00      	cmp	r5, #0
    bd10:	dbab      	blt.n	bc6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
    bd12:	f8d8 0010 	ldr.w	r0, [r8, #16]
    bd16:	4285      	cmp	r5, r0
    bd18:	daa7      	bge.n	bc6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f2>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    bd1a:	fb07 2703 	mla	r7, r7, r3, r2
    bd1e:	fb07 5000 	mla	r0, r7, r0, r5
                  int32_t filter_val = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, output_channel)];
    bd22:	9930      	ldr	r1, [sp, #192]	; 0xc0
    bd24:	560f      	ldrsb	r7, [r1, r0]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
    bd26:	9915      	ldr	r1, [sp, #84]	; 0x54
    bd28:	440e      	add	r6, r1
    bd2a:	981d      	ldr	r0, [sp, #116]	; 0x74
    bd2c:	fb07 0006 	mla	r0, r7, r6, r0
    bd30:	901d      	str	r0, [sp, #116]	; 0x74
    bd32:	e79c      	b.n	bc6e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f6>
    bd34:	990d      	ldr	r1, [sp, #52]	; 0x34
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    bd36:	3301      	adds	r3, #1
    bd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd3a:	4293      	cmp	r3, r2
    bd3c:	da02      	bge.n	bd44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cc>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
    bd3e:	2200      	movs	r2, #0
    bd40:	910d      	str	r1, [sp, #52]	; 0x34
    bd42:	e795      	b.n	bc70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2f8>
                }
              }
            }
            if (bias_data) {
    bd44:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    bd46:	b123      	cbz	r3, bd52 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3da>
              acc += bias_data[output_channel];
    bd48:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    bd4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    bd4e:	4413      	add	r3, r2
    bd50:	931d      	str	r3, [sp, #116]	; 0x74
            }
            acc = MultiplyByQuantizedMultiplier(
    bd52:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    bd54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bd56:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
    bd5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    bd5c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
  int left_shift = shift > 0 ? shift : 0;
    bd60:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    bd64:	2e00      	cmp	r6, #0
    bd66:	f340 80b3 	ble.w	bed0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x558>
    bd6a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    bd6c:	409c      	lsls	r4, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bd6e:	45a4      	cmp	ip, r4
    bd70:	f000 80b0 	beq.w	bed4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x55c>
    bd74:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    bd76:	17e3      	asrs	r3, r4, #31
  std::int64_t b_64(b);
    bd78:	4660      	mov	r0, ip
    bd7a:	17c1      	asrs	r1, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
    bd7c:	fb04 f101 	mul.w	r1, r4, r1
    bd80:	fb0c 1103 	mla	r1, ip, r3, r1
    bd84:	fba4 230c 	umull	r2, r3, r4, ip
    bd88:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bd8a:	2a00      	cmp	r2, #0
    bd8c:	f173 0100 	sbcs.w	r1, r3, #0
    bd90:	f2c0 80a7 	blt.w	bee2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56a>
    bd94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bd98:	1852      	adds	r2, r2, r1
    bd9a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    bd9e:	4611      	mov	r1, r2
    bda0:	461c      	mov	r4, r3
    bda2:	2a00      	cmp	r2, #0
    bda4:	f173 0000 	sbcs.w	r0, r3, #0
    bda8:	f2c0 809d 	blt.w	bee6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56e>
    bdac:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    bdae:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bdb2:	2f00      	cmp	r7, #0
    bdb4:	f040 809f 	bne.w	bef6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x57e>
  assert(exponent >= 0);
    bdb8:	2e00      	cmp	r6, #0
    bdba:	f2c0 809f 	blt.w	befc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x584>
  assert(exponent <= 31);
    bdbe:	2e1f      	cmp	r6, #31
    bdc0:	f300 80a3 	bgt.w	bf0a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x592>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    bdc4:	2701      	movs	r7, #1
    bdc6:	fa07 f006 	lsl.w	r0, r7, r6
    bdca:	3801      	subs	r0, #1
    bdcc:	f008 f83b 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bdd0:	900d      	str	r0, [sp, #52]	; 0x34
  const IntegerType zero = Dup<IntegerType>(0);
    bdd2:	2000      	movs	r0, #0
    bdd4:	f008 f837 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bdd8:	9018      	str	r0, [sp, #96]	; 0x60
  const IntegerType one = Dup<IntegerType>(1);
    bdda:	4638      	mov	r0, r7
    bddc:	f008 f833 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    bde0:	900e      	str	r0, [sp, #56]	; 0x38
  const IntegerType remainder = BitAnd(x, mask);
    bde2:	990d      	ldr	r1, [sp, #52]	; 0x34
    bde4:	4620      	mov	r0, r4
    bde6:	f008 f82f 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    bdea:	9019      	str	r0, [sp, #100]	; 0x64
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    bdec:	4639      	mov	r1, r7
    bdee:	980d      	ldr	r0, [sp, #52]	; 0x34
    bdf0:	f008 f82c 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    bdf4:	4607      	mov	r7, r0
    bdf6:	9918      	ldr	r1, [sp, #96]	; 0x60
    bdf8:	4620      	mov	r0, r4
    bdfa:	f008 f833 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    bdfe:	990e      	ldr	r1, [sp, #56]	; 0x38
    be00:	f008 f822 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    be04:	4601      	mov	r1, r0
    be06:	4638      	mov	r0, r7
    be08:	f008 f822 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    be0c:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    be0e:	4631      	mov	r1, r6
    be10:	4620      	mov	r0, r4
    be12:	f008 f81b 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    be16:	4604      	mov	r4, r0
    be18:	4639      	mov	r1, r7
    be1a:	9819      	ldr	r0, [sp, #100]	; 0x64
    be1c:	f008 f82a 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    be20:	990e      	ldr	r1, [sp, #56]	; 0x38
    be22:	f008 f811 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    be26:	4601      	mov	r1, r0
    be28:	4620      	mov	r0, r4
    be2a:	f008 f811 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
    be2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    be30:	4418      	add	r0, r3
    be32:	901d      	str	r0, [sp, #116]	; 0x74
      if (__a < __b)
    be34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    be36:	4290      	cmp	r0, r2
    be38:	db6e      	blt.n	bf18 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a0>
      return __a;
    be3a:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::max(acc, output_activation_min);
    be3c:	681b      	ldr	r3, [r3, #0]
    be3e:	931d      	str	r3, [sp, #116]	; 0x74
      if (__b < __a)
    be40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    be42:	4293      	cmp	r3, r2
    be44:	dc6a      	bgt.n	bf1c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a4>
      return __a;
    be46:	ab1d      	add	r3, sp, #116	; 0x74
            acc = std::min(acc, output_activation_max);
    be48:	6818      	ldr	r0, [r3, #0]
    be4a:	901d      	str	r0, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
    be4c:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    be50:	2b04      	cmp	r3, #4
    be52:	d165      	bne.n	bf20 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    be54:	9a03      	ldr	r2, [sp, #12]
    be56:	2a00      	cmp	r2, #0
    be58:	db64      	blt.n	bf24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
    be5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    be5e:	429a      	cmp	r2, r3
    be60:	da60      	bge.n	bf24 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    be62:	9b01      	ldr	r3, [sp, #4]
    be64:	2b00      	cmp	r3, #0
    be66:	db5f      	blt.n	bf28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
    be68:	f8d9 1008 	ldr.w	r1, [r9, #8]
    be6c:	428b      	cmp	r3, r1
    be6e:	da5b      	bge.n	bf28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    be70:	9b02      	ldr	r3, [sp, #8]
    be72:	2b00      	cmp	r3, #0
    be74:	db5a      	blt.n	bf2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
    be76:	f8d9 200c 	ldr.w	r2, [r9, #12]
    be7a:	4293      	cmp	r3, r2
    be7c:	da56      	bge.n	bf2c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    be7e:	2d00      	cmp	r5, #0
    be80:	db56      	blt.n	bf30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
    be82:	f8d9 3010 	ldr.w	r3, [r9, #16]
    be86:	429d      	cmp	r5, r3
    be88:	da52      	bge.n	bf30 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
    be8a:	9c03      	ldr	r4, [sp, #12]
    be8c:	9e01      	ldr	r6, [sp, #4]
    be8e:	fb01 6104 	mla	r1, r1, r4, r6
    be92:	9c02      	ldr	r4, [sp, #8]
    be94:	fb01 4202 	mla	r2, r1, r2, r4
    be98:	fb02 5303 	mla	r3, r2, r3, r5
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
    be9c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    be9e:	54d0      	strb	r0, [r2, r3]
          for (int m = 0; m < depth_multiplier; ++m) {
    bea0:	9b04      	ldr	r3, [sp, #16]
    bea2:	3301      	adds	r3, #1
    bea4:	9304      	str	r3, [sp, #16]
    bea6:	9904      	ldr	r1, [sp, #16]
    bea8:	9b06      	ldr	r3, [sp, #24]
    beaa:	4299      	cmp	r1, r3
    beac:	da42      	bge.n	bf34 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5bc>
            const int output_channel = m + in_channel * depth_multiplier;
    beae:	fb03 150a 	mla	r5, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
    beb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    beb4:	9a02      	ldr	r2, [sp, #8]
    beb6:	fb03 f102 	mul.w	r1, r3, r2
    beba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bebc:	1ac9      	subs	r1, r1, r3
            const int in_y_origin = (out_y * stride_height) - pad_height;
    bebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bec0:	9a01      	ldr	r2, [sp, #4]
    bec2:	fb03 f402 	mul.w	r4, r3, r2
    bec6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    bec8:	1ae4      	subs	r4, r4, r3
            int32_t acc = 0;
    beca:	2300      	movs	r3, #0
    becc:	931d      	str	r3, [sp, #116]	; 0x74
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
    bece:	e733      	b.n	bd38 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c0>
  int right_shift = shift > 0 ? 0 : -shift;
    bed0:	4276      	negs	r6, r6
    bed2:	e74b      	b.n	bd6c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3f4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    bed4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    bed8:	d001      	beq.n	bede <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x566>
    beda:	2700      	movs	r7, #0
    bedc:	e74b      	b.n	bd76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
    bede:	2701      	movs	r7, #1
    bee0:	e749      	b.n	bd76 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3fe>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    bee2:	4925      	ldr	r1, [pc, #148]	; (bf78 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x600>)
    bee4:	e758      	b.n	bd98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x420>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    bee6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    beea:	1851      	adds	r1, r2, r1
    beec:	f04f 0400 	mov.w	r4, #0
    bef0:	eb43 0404 	adc.w	r4, r3, r4
    bef4:	e75a      	b.n	bdac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x434>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    bef6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    befa:	e75d      	b.n	bdb8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x440>
  assert(exponent >= 0);
    befc:	4b1f      	ldr	r3, [pc, #124]	; (bf7c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x604>)
    befe:	4a20      	ldr	r2, [pc, #128]	; (bf80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    bf00:	f44f 71b3 	mov.w	r1, #358	; 0x166
    bf04:	481f      	ldr	r0, [pc, #124]	; (bf84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    bf06:	f004 fd5b 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    bf0a:	4b1f      	ldr	r3, [pc, #124]	; (bf88 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x610>)
    bf0c:	4a1c      	ldr	r2, [pc, #112]	; (bf80 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x608>)
    bf0e:	f240 1167 	movw	r1, #359	; 0x167
    bf12:	481c      	ldr	r0, [pc, #112]	; (bf84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x60c>)
    bf14:	f004 fd54 	bl	109c0 <__assert_func>
	return __b;
    bf18:	ab1f      	add	r3, sp, #124	; 0x7c
    bf1a:	e78f      	b.n	be3c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c4>
	return __b;
    bf1c:	ab1e      	add	r3, sp, #120	; 0x78
    bf1e:	e793      	b.n	be48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
    bf20:	f00a f93b 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
    bf24:	f00a f939 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
    bf28:	f00a f937 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
    bf2c:	f00a f935 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
    bf30:	f00a f933 	bl	1619a <abort>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
    bf34:	f10a 0a01 	add.w	sl, sl, #1
    bf38:	9b05      	ldr	r3, [sp, #20]
    bf3a:	459a      	cmp	sl, r3
    bf3c:	da02      	bge.n	bf44 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x5cc>
          for (int m = 0; m < depth_multiplier; ++m) {
    bf3e:	2300      	movs	r3, #0
    bf40:	9304      	str	r3, [sp, #16]
    bf42:	e7b0      	b.n	bea6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52e>
    bf44:	4647      	mov	r7, r8
    bf46:	46c8      	mov	r8, r9
    bf48:	46d9      	mov	r9, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
    bf4a:	9b02      	ldr	r3, [sp, #8]
    bf4c:	3301      	adds	r3, #1
    bf4e:	9302      	str	r3, [sp, #8]
    bf50:	e66b      	b.n	bc2a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2b2>
    bf52:	46c2      	mov	sl, r8
    bf54:	46c8      	mov	r8, r9
    bf56:	46b9      	mov	r9, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	3301      	adds	r3, #1
    bf5c:	9301      	str	r3, [sp, #4]
    bf5e:	e65a      	b.n	bc16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
    bf60:	46cb      	mov	fp, r9
    bf62:	f8dd 900c 	ldr.w	r9, [sp, #12]
    bf66:	4657      	mov	r7, sl
    bf68:	46c2      	mov	sl, r8
  for (int batch = 0; batch < batches; ++batch) {
    bf6a:	f109 0901 	add.w	r9, r9, #1
    bf6e:	e647      	b.n	bc00 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x288>
          }
        }
      }
    }
  }
}
    bf70:	b025      	add	sp, #148	; 0x94
    bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf76:	bf00      	nop
    bf78:	c0000001 	.word	0xc0000001
    bf7c:	0006b2b0 	.word	0x0006b2b0
    bf80:	0006b2c0 	.word	0x0006b2c0
    bf84:	0006b318 	.word	0x0006b318
    bf88:	0006b374 	.word	0x0006b374

0000bf8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf90:	b0cb      	sub	sp, #300	; 0x12c
  TFLITE_DCHECK(node->user_data != nullptr);
    bf92:	f8d1 9010 	ldr.w	r9, [r1, #16]
    bf96:	f1b9 0f00 	cmp.w	r9, #0
    bf9a:	d041      	beq.n	c020 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
    bf9c:	4605      	mov	r5, r0
    bf9e:	460e      	mov	r6, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    bfa0:	f8d1 a014 	ldr.w	sl, [r1, #20]
    bfa4:	f1ba 0f00 	cmp.w	sl, #0
    bfa8:	d03c      	beq.n	c024 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
    bfaa:	4b86      	ldr	r3, [pc, #536]	; (c1c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>)
    bfac:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bfae:	2800      	cmp	r0, #0
    bfb0:	d03a      	beq.n	c028 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  TFLITE_DCHECK(node != nullptr);
    bfb2:	2e00      	cmp	r6, #0
    bfb4:	d03a      	beq.n	c02c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa0>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    bfb6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    bfb8:	6873      	ldr	r3, [r6, #4]
    bfba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bfbe:	6859      	ldr	r1, [r3, #4]
    bfc0:	4790      	blx	r2
    bfc2:	4604      	mov	r4, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
    bfc4:	4b80      	ldr	r3, [pc, #512]	; (c1c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>)
    bfc6:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bfc8:	2d00      	cmp	r5, #0
    bfca:	d031      	beq.n	c030 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  TFLITE_DCHECK(node != nullptr);
    bfcc:	2e00      	cmp	r6, #0
    bfce:	d031      	beq.n	c034 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bfd0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bfd2:	6833      	ldr	r3, [r6, #0]
    bfd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bfd8:	6859      	ldr	r1, [r3, #4]
    bfda:	4628      	mov	r0, r5
    bfdc:	4790      	blx	r2
    bfde:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
    bfe0:	4b7a      	ldr	r3, [pc, #488]	; (c1cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x240>)
    bfe2:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    bfe4:	b345      	cbz	r5, c038 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
  TFLITE_DCHECK(node != nullptr);
    bfe6:	b34e      	cbz	r6, c03c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    bfe8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    bfea:	6833      	ldr	r3, [r6, #0]
    bfec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    bff0:	6859      	ldr	r1, [r3, #4]
    bff2:	4628      	mov	r0, r5
    bff4:	4790      	blx	r2
    bff6:	4680      	mov	r8, r0
    bff8:	6833      	ldr	r3, [r6, #0]
    bffa:	681b      	ldr	r3, [r3, #0]
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    bffc:	2b03      	cmp	r3, #3
    bffe:	d01f      	beq.n	c040 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
    c000:	2600      	movs	r6, #0
  switch (input->type) {  // Already know in/out types are same.
    c002:	7a38      	ldrb	r0, [r7, #8]
    c004:	2801      	cmp	r0, #1
    c006:	d02c      	beq.n	c062 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    c008:	2809      	cmp	r0, #9
    c00a:	d07f      	beq.n	c10c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c00c:	696c      	ldr	r4, [r5, #20]
    c00e:	f7fd f965 	bl	92dc <TfLiteTypeGetName>
    c012:	4602      	mov	r2, r0
    c014:	7a3b      	ldrb	r3, [r7, #8]
    c016:	496e      	ldr	r1, [pc, #440]	; (c1d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x244>)
    c018:	4628      	mov	r0, r5
    c01a:	47a0      	blx	r4
      return kTfLiteError;
    c01c:	2001      	movs	r0, #1
    c01e:	e072      	b.n	c106 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
  TFLITE_DCHECK(node->user_data != nullptr);
    c020:	f00a f8bb 	bl	1619a <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c024:	f00a f8b9 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c028:	f00a f8b7 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c02c:	f00a f8b5 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c030:	f00a f8b3 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c034:	f00a f8b1 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c038:	f00a f8af 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c03c:	f00a f8ad 	bl	1619a <abort>
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
    c040:	4b64      	ldr	r3, [pc, #400]	; (c1d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x248>)
    c042:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c044:	b14d      	cbz	r5, c05a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  TFLITE_DCHECK(node != nullptr);
    c046:	b156      	cbz	r6, c05e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c048:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    c04a:	6833      	ldr	r3, [r6, #0]
    c04c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c050:	6859      	ldr	r1, [r3, #4]
    c052:	4628      	mov	r0, r5
    c054:	4790      	blx	r2
    c056:	4606      	mov	r6, r0
    c058:	e7d3      	b.n	c002 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
  TFLITE_DCHECK(context != nullptr);
    c05a:	f00a f89e 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c05e:	f00a f89c 	bl	1619a <abort>
          DepthwiseConvParamsFloat(params, data),
    c062:	464a      	mov	r2, r9
    c064:	4651      	mov	r1, sl
    c066:	a80a      	add	r0, sp, #40	; 0x28
    c068:	f008 fc48 	bl	148fc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          tflite::micro::GetTensorShape(input),
    c06c:	4639      	mov	r1, r7
    c06e:	a81a      	add	r0, sp, #104	; 0x68
    c070:	f008 fcbe 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    c074:	4638      	mov	r0, r7
    c076:	f007 fed2 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c07a:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(filter),
    c07c:	4641      	mov	r1, r8
    c07e:	a820      	add	r0, sp, #128	; 0x80
    c080:	f008 fcb6 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    c084:	4640      	mov	r0, r8
    c086:	f007 feca 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c08a:	4607      	mov	r7, r0
          tflite::micro::GetTensorShape(bias),
    c08c:	f10d 0898 	add.w	r8, sp, #152	; 0x98
    c090:	4631      	mov	r1, r6
    c092:	4640      	mov	r0, r8
    c094:	f008 fcac 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    c098:	4630      	mov	r0, r6
    c09a:	f007 fec0 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c09e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c0a0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
    c0a4:	4621      	mov	r1, r4
    c0a6:	4648      	mov	r0, r9
    c0a8:	f008 fca2 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::DepthwiseConv(
    c0ac:	4620      	mov	r0, r4
    c0ae:	f007 febc 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    c0b2:	9004      	str	r0, [sp, #16]
    c0b4:	f8cd 900c 	str.w	r9, [sp, #12]
    c0b8:	9602      	str	r6, [sp, #8]
    c0ba:	f8cd 8004 	str.w	r8, [sp, #4]
    c0be:	9700      	str	r7, [sp, #0]
    c0c0:	ab20      	add	r3, sp, #128	; 0x80
    c0c2:	462a      	mov	r2, r5
    c0c4:	a91a      	add	r1, sp, #104	; 0x68
    c0c6:	a80a      	add	r0, sp, #40	; 0x28
    c0c8:	f008 f99a 	bl	14400 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
    if (size_ > kMaxSmallSize) {
    c0cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    c0ce:	2b05      	cmp	r3, #5
    c0d0:	dd03      	ble.n	c0da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
      delete[] dims_pointer_;
    c0d2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    c0d4:	b108      	cbz	r0, c0da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
    c0d6:	f00a f84b 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0da:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c0dc:	2b05      	cmp	r3, #5
    c0de:	dd03      	ble.n	c0e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
      delete[] dims_pointer_;
    c0e0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    c0e2:	b108      	cbz	r0, c0e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    c0e4:	f00a f844 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c0ea:	2b05      	cmp	r3, #5
    c0ec:	dd03      	ble.n	c0f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
      delete[] dims_pointer_;
    c0ee:	9821      	ldr	r0, [sp, #132]	; 0x84
    c0f0:	b108      	cbz	r0, c0f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
    c0f2:	f00a f83d 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c0f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c0f8:	2b05      	cmp	r3, #5
    c0fa:	dd03      	ble.n	c104 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
      delete[] dims_pointer_;
    c0fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c0fe:	b108      	cbz	r0, c104 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x178>
    c100:	f00a f836 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    c104:	2000      	movs	r0, #0
}
    c106:	b04b      	add	sp, #300	; 0x12c
    c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DepthwiseConvParamsQuantized(params, data),
    c10c:	464a      	mov	r2, r9
    c10e:	4651      	mov	r1, sl
    c110:	a80a      	add	r0, sp, #40	; 0x28
    c112:	f008 fbca 	bl	148aa <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
          data.per_channel_output_multiplier, data.per_channel_output_shift,
    c116:	f8d9 a024 	ldr.w	sl, [r9, #36]	; 0x24
    c11a:	f8d9 b028 	ldr.w	fp, [r9, #40]	; 0x28
          tflite::micro::GetTensorShape(input),
    c11e:	4639      	mov	r1, r7
    c120:	a832      	add	r0, sp, #200	; 0xc8
    c122:	f008 fc65 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c126:	4638      	mov	r0, r7
    c128:	f007 fe83 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c12c:	9009      	str	r0, [sp, #36]	; 0x24
          tflite::micro::GetTensorShape(filter),
    c12e:	af38      	add	r7, sp, #224	; 0xe0
    c130:	4641      	mov	r1, r8
    c132:	4638      	mov	r0, r7
    c134:	f008 fc5c 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c138:	4640      	mov	r0, r8
    c13a:	f007 fe7a 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    c13e:	4605      	mov	r5, r0
          tflite::micro::GetTensorShape(bias),
    c140:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
    c144:	4631      	mov	r1, r6
    c146:	4640      	mov	r0, r8
    c148:	f008 fc52 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c14c:	4630      	mov	r0, r6
    c14e:	f007 fea3 	bl	13e98 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    c152:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c154:	f50d 7988 	add.w	r9, sp, #272	; 0x110
    c158:	4621      	mov	r1, r4
    c15a:	4648      	mov	r0, r9
    c15c:	f008 fc48 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      reference_integer_ops::DepthwiseConvPerChannel(
    c160:	4620      	mov	r0, r4
    c162:	f007 fe6c 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    c166:	9006      	str	r0, [sp, #24]
    c168:	f8cd 9014 	str.w	r9, [sp, #20]
    c16c:	9604      	str	r6, [sp, #16]
    c16e:	f8cd 800c 	str.w	r8, [sp, #12]
    c172:	9502      	str	r5, [sp, #8]
    c174:	9701      	str	r7, [sp, #4]
    c176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c178:	9300      	str	r3, [sp, #0]
    c17a:	ab32      	add	r3, sp, #200	; 0xc8
    c17c:	465a      	mov	r2, fp
    c17e:	4651      	mov	r1, sl
    c180:	a80a      	add	r0, sp, #40	; 0x28
    c182:	f7ff fbf9 	bl	b978 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
    c186:	9b44      	ldr	r3, [sp, #272]	; 0x110
    c188:	2b05      	cmp	r3, #5
    c18a:	dd03      	ble.n	c194 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
      delete[] dims_pointer_;
    c18c:	9845      	ldr	r0, [sp, #276]	; 0x114
    c18e:	b108      	cbz	r0, c194 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
    c190:	f009 ffee 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c194:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    c196:	2b05      	cmp	r3, #5
    c198:	dd03      	ble.n	c1a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
      delete[] dims_pointer_;
    c19a:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c19c:	b108      	cbz	r0, c1a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    c19e:	f009 ffe7 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c1a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    c1a4:	2b05      	cmp	r3, #5
    c1a6:	dd03      	ble.n	c1b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
      delete[] dims_pointer_;
    c1a8:	9839      	ldr	r0, [sp, #228]	; 0xe4
    c1aa:	b108      	cbz	r0, c1b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>
    c1ac:	f009 ffe0 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c1b0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    c1b2:	2b05      	cmp	r3, #5
    c1b4:	dd03      	ble.n	c1be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
      delete[] dims_pointer_;
    c1b6:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c1b8:	b108      	cbz	r0, c1be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
    c1ba:	f009 ffd9 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    c1be:	2000      	movs	r0, #0
      break;
    c1c0:	e7a1      	b.n	c106 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
    c1c2:	bf00      	nop
    c1c4:	0006b6e8 	.word	0x0006b6e8
    c1c8:	0006b6e4 	.word	0x0006b6e4
    c1cc:	0006b6ec 	.word	0x0006b6ec
    c1d0:	0006b468 	.word	0x0006b468
    c1d4:	0006b6e0 	.word	0x0006b6e0

0000c1d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
    c1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c1dc:	b08f      	sub	sp, #60	; 0x3c
    c1de:	4604      	mov	r4, r0
    c1e0:	460d      	mov	r5, r1
    c1e2:	4616      	mov	r6, r2
  bool has_bias = node->inputs->size == 3;
    c1e4:	6809      	ldr	r1, [r1, #0]
    c1e6:	6809      	ldr	r1, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
    c1e8:	2903      	cmp	r1, #3
    c1ea:	d00a      	beq.n	c202 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    c1ec:	2902      	cmp	r1, #2
    c1ee:	d008      	beq.n	c202 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x2a>
    c1f0:	6945      	ldr	r5, [r0, #20]
    c1f2:	4b79      	ldr	r3, [pc, #484]	; (c3d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
    c1f4:	9300      	str	r3, [sp, #0]
    c1f6:	2357      	movs	r3, #87	; 0x57
    c1f8:	4a78      	ldr	r2, [pc, #480]	; (c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c1fa:	4979      	ldr	r1, [pc, #484]	; (c3e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c1fc:	47a8      	blx	r5
    c1fe:	2001      	movs	r0, #1
    c200:	e011      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
    c202:	686a      	ldr	r2, [r5, #4]
    c204:	6812      	ldr	r2, [r2, #0]
    c206:	2a01      	cmp	r2, #1
    c208:	d010      	beq.n	c22c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x54>
    c20a:	6966      	ldr	r6, [r4, #20]
    c20c:	2501      	movs	r5, #1
    c20e:	9503      	str	r5, [sp, #12]
    c210:	9202      	str	r2, [sp, #8]
    c212:	4b74      	ldr	r3, [pc, #464]	; (c3e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
    c214:	9301      	str	r3, [sp, #4]
    c216:	4b74      	ldr	r3, [pc, #464]	; (c3e8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
    c218:	9300      	str	r3, [sp, #0]
    c21a:	2358      	movs	r3, #88	; 0x58
    c21c:	4a6f      	ldr	r2, [pc, #444]	; (c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c21e:	4973      	ldr	r1, [pc, #460]	; (c3ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
    c220:	4620      	mov	r0, r4
    c222:	47b0      	blx	r6
    c224:	4628      	mov	r0, r5
  data->input_zero_point = input->params.zero_point;
  data->filter_zero_point = filter->params.zero_point;
  data->output_zero_point = output->params.zero_point;

  return kTfLiteOk;
}
    c226:	b00f      	add	sp, #60	; 0x3c
    c228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  auto padding = params.padding;
    c22c:	f896 e000 	ldrb.w	lr, [r6]
      params.stride_height, params.stride_width, params.dilation_height_factor,
    c230:	68b1      	ldr	r1, [r6, #8]
    c232:	6872      	ldr	r2, [r6, #4]
    c234:	f8d6 8018 	ldr.w	r8, [r6, #24]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    c238:	9817      	ldr	r0, [sp, #92]	; 0x5c
    c23a:	3801      	subs	r0, #1
    c23c:	6977      	ldr	r7, [r6, #20]
    c23e:	fb00 f007 	mul.w	r0, r0, r7
    c242:	f100 0901 	add.w	r9, r0, #1
  if (stride == 0) return 0;
    c246:	b1b2      	cbz	r2, c276 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
    c248:	f1be 0f01 	cmp.w	lr, #1
    c24c:	d005      	beq.n	c25a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
    c24e:	f1be 0f02 	cmp.w	lr, #2
    c252:	d009      	beq.n	c268 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x90>
    c254:	f04f 0c00 	mov.w	ip, #0
    c258:	e00e      	b.n	c278 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - 1) / stride;
    c25a:	eb02 0c03 	add.w	ip, r2, r3
    c25e:	f10c 3cff 	add.w	ip, ip, #4294967295
    c262:	fb9c fcf2 	sdiv	ip, ip, r2
    c266:	e007      	b.n	c278 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
      return (image_size + stride - effective_filter_size) / stride;
    c268:	eb02 0c03 	add.w	ip, r2, r3
    c26c:	ebac 0c09 	sub.w	ip, ip, r9
    c270:	fb9c fcf2 	sdiv	ip, ip, r2
    c274:	e000      	b.n	c278 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa0>
  if (stride == 0) return 0;
    c276:	4694      	mov	ip, r2
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
    c278:	9f18      	ldr	r7, [sp, #96]	; 0x60
    c27a:	3f01      	subs	r7, #1
    c27c:	fb07 f708 	mul.w	r7, r7, r8
    c280:	3701      	adds	r7, #1
  if (stride == 0) return 0;
    c282:	b1c1      	cbz	r1, c2b6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xde>
  switch (padding) {
    c284:	f1be 0f01 	cmp.w	lr, #1
    c288:	d005      	beq.n	c296 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xbe>
    c28a:	f1be 0f02 	cmp.w	lr, #2
    c28e:	d00a      	beq.n	c2a6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xce>
    c290:	f04f 0e00 	mov.w	lr, #0
    c294:	e010      	b.n	c2b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - 1) / stride;
    c296:	9816      	ldr	r0, [sp, #88]	; 0x58
    c298:	eb01 0e00 	add.w	lr, r1, r0
    c29c:	f10e 3eff 	add.w	lr, lr, #4294967295
    c2a0:	fb9e fef1 	sdiv	lr, lr, r1
    c2a4:	e008      	b.n	c2b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
      return (image_size + stride - effective_filter_size) / stride;
    c2a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    c2a8:	eb01 0e00 	add.w	lr, r1, r0
    c2ac:	ebae 0e07 	sub.w	lr, lr, r7
    c2b0:	fb9e fef1 	sdiv	lr, lr, r1
    c2b4:	e000      	b.n	c2b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xe0>
  if (stride == 0) return 0;
    c2b6:	468e      	mov	lr, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
    c2b8:	f10e 3eff 	add.w	lr, lr, #4294967295
    c2bc:	fb0e 7101 	mla	r1, lr, r1, r7
  int total_padding =
    c2c0:	9f16      	ldr	r7, [sp, #88]	; 0x58
    c2c2:	1bc9      	subs	r1, r1, r7
  total_padding = total_padding > 0 ? total_padding : 0;
    c2c4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  *offset = total_padding % 2;
    c2c8:	f001 0701 	and.w	r7, r1, #1
  return total_padding / 2;
    c2cc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    c2d0:	1049      	asrs	r1, r1, #1
  padding_values.height =
    c2d2:	910b      	str	r1, [sp, #44]	; 0x2c
  padding_values.height_offset = offset;
    c2d4:	970d      	str	r7, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
    c2d6:	f10c 3cff 	add.w	ip, ip, #4294967295
    c2da:	fb0c 9202 	mla	r2, ip, r2, r9
  int total_padding =
    c2de:	1ad2      	subs	r2, r2, r3
  total_padding = total_padding > 0 ? total_padding : 0;
    c2e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
    c2e4:	f002 0301 	and.w	r3, r2, #1
  return total_padding / 2;
    c2e8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    c2ec:	1052      	asrs	r2, r2, #1
  padding_values.width =
    c2ee:	920a      	str	r2, [sp, #40]	; 0x28
  padding_values.width_offset = offset;
    c2f0:	930c      	str	r3, [sp, #48]	; 0x30
      padding, &out_height, &out_width);
    c2f2:	ab0e      	add	r3, sp, #56	; 0x38
    c2f4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    c2f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    c2fa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
    c2fe:	4b3c      	ldr	r3, [pc, #240]	; (c3f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
    c300:	681a      	ldr	r2, [r3, #0]
    c302:	4629      	mov	r1, r5
    c304:	4620      	mov	r0, r4
    c306:	f007 fccb 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c30a:	4607      	mov	r7, r0
    c30c:	b320      	cbz	r0, c358 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x180>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
    c30e:	4b39      	ldr	r3, [pc, #228]	; (c3f4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
    c310:	681a      	ldr	r2, [r3, #0]
    c312:	4629      	mov	r1, r5
    c314:	4620      	mov	r0, r4
    c316:	f007 fcc3 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c31a:	4680      	mov	r8, r0
    c31c:	b330      	cbz	r0, c36c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
      GetOptionalInputTensor(context, node, kConvBiasTensor);
    c31e:	4b36      	ldr	r3, [pc, #216]	; (c3f8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
    c320:	681a      	ldr	r2, [r3, #0]
    c322:	4629      	mov	r1, r5
    c324:	4620      	mov	r0, r4
    c326:	f007 fcf9 	bl	13d1c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c32a:	4681      	mov	r9, r0
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
    c32c:	4b33      	ldr	r3, [pc, #204]	; (c3fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x224>)
    c32e:	681a      	ldr	r2, [r3, #0]
    c330:	4629      	mov	r1, r5
    c332:	4620      	mov	r0, r4
    c334:	f007 fcd3 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c338:	4605      	mov	r5, r0
    c33a:	b308      	cbz	r0, c380 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a8>
  if (data_type != kTfLiteFloat32) {
    c33c:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
    c340:	2b01      	cmp	r3, #1
    c342:	d127      	bne.n	c394 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1bc>
  data->input_zero_point = input->params.zero_point;
    c344:	693b      	ldr	r3, [r7, #16]
    c346:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c348:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
    c34a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    c34e:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
    c350:	692b      	ldr	r3, [r5, #16]
    c352:	6193      	str	r3, [r2, #24]
  return kTfLiteOk;
    c354:	2000      	movs	r0, #0
    c356:	e766      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, input != nullptr);
    c358:	6965      	ldr	r5, [r4, #20]
    c35a:	4b29      	ldr	r3, [pc, #164]	; (c400 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x228>)
    c35c:	9300      	str	r3, [sp, #0]
    c35e:	2362      	movs	r3, #98	; 0x62
    c360:	4a1e      	ldr	r2, [pc, #120]	; (c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c362:	491f      	ldr	r1, [pc, #124]	; (c3e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c364:	4620      	mov	r0, r4
    c366:	47a8      	blx	r5
    c368:	2001      	movs	r0, #1
    c36a:	e75c      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, filter != nullptr);
    c36c:	6965      	ldr	r5, [r4, #20]
    c36e:	4b25      	ldr	r3, [pc, #148]	; (c404 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x22c>)
    c370:	9300      	str	r3, [sp, #0]
    c372:	2364      	movs	r3, #100	; 0x64
    c374:	4a19      	ldr	r2, [pc, #100]	; (c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c376:	491a      	ldr	r1, [pc, #104]	; (c3e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c378:	4620      	mov	r0, r4
    c37a:	47a8      	blx	r5
    c37c:	2001      	movs	r0, #1
    c37e:	e752      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
  TF_LITE_ENSURE(context, output != nullptr);
    c380:	6965      	ldr	r5, [r4, #20]
    c382:	4b21      	ldr	r3, [pc, #132]	; (c408 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x230>)
    c384:	9300      	str	r3, [sp, #0]
    c386:	2368      	movs	r3, #104	; 0x68
    c388:	4a14      	ldr	r2, [pc, #80]	; (c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
    c38a:	4915      	ldr	r1, [pc, #84]	; (c3e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
    c38c:	4620      	mov	r0, r4
    c38e:	47a8      	blx	r5
    c390:	2001      	movs	r0, #1
    c392:	e748      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c394:	f8d8 3008 	ldr.w	r3, [r8, #8]
    c398:	691b      	ldr	r3, [r3, #16]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
    c39a:	3610      	adds	r6, #16
    c39c:	9308      	str	r3, [sp, #32]
    c39e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3a2:	9307      	str	r3, [sp, #28]
    c3a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c3a8:	9306      	str	r3, [sp, #24]
    c3aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3ac:	3330      	adds	r3, #48	; 0x30
    c3ae:	9305      	str	r3, [sp, #20]
    c3b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3b2:	332c      	adds	r3, #44	; 0x2c
    c3b4:	9304      	str	r3, [sp, #16]
    c3b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3b8:	3320      	adds	r3, #32
    c3ba:	9303      	str	r3, [sp, #12]
    c3bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c3be:	331c      	adds	r3, #28
    c3c0:	9302      	str	r3, [sp, #8]
    c3c2:	9601      	str	r6, [sp, #4]
    c3c4:	9000      	str	r0, [sp, #0]
    c3c6:	464b      	mov	r3, r9
    c3c8:	4642      	mov	r2, r8
    c3ca:	4639      	mov	r1, r7
    c3cc:	4620      	mov	r0, r4
    c3ce:	f7fd f9d3 	bl	9778 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
    c3d2:	2800      	cmp	r0, #0
    c3d4:	d0b6      	beq.n	c344 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x16c>
    c3d6:	e726      	b.n	c226 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
    c3d8:	0006b4d8 	.word	0x0006b4d8
    c3dc:	0006b600 	.word	0x0006b600
    c3e0:	0006aafc 	.word	0x0006aafc
    c3e4:	0006bb44 	.word	0x0006bb44
    c3e8:	0006b4fc 	.word	0x0006b4fc
    c3ec:	0006adbc 	.word	0x0006adbc
    c3f0:	0006b5f4 	.word	0x0006b5f4
    c3f4:	0006b5fc 	.word	0x0006b5fc
    c3f8:	0006b5f0 	.word	0x0006b5f0
    c3fc:	0006b5f8 	.word	0x0006b5f8
    c400:	0006b510 	.word	0x0006b510
    c404:	0006b524 	.word	0x0006b524
    c408:	0006b538 	.word	0x0006b538

0000c40c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
    c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c410:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
    c412:	690e      	ldr	r6, [r1, #16]
    c414:	2e00      	cmp	r6, #0
    c416:	d051      	beq.n	c4bc <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
    c418:	4604      	mov	r4, r0
    c41a:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c41c:	694f      	ldr	r7, [r1, #20]
    c41e:	2f00      	cmp	r7, #0
    c420:	d04e      	beq.n	c4c0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb4>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
    c422:	2200      	movs	r2, #0
    c424:	f007 fc5b 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c428:	4680      	mov	r8, r0
    c42a:	2800      	cmp	r0, #0
    c42c:	d04a      	beq.n	c4c4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
    c42e:	2200      	movs	r2, #0
    c430:	4629      	mov	r1, r5
    c432:	4620      	mov	r0, r4
    c434:	f007 fc34 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c438:	4681      	mov	r9, r0
    c43a:	2800      	cmp	r0, #0
    c43c:	d050      	beq.n	c4e0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
    c43e:	2201      	movs	r2, #1
    c440:	4629      	mov	r1, r5
    c442:	4620      	mov	r0, r4
    c444:	f007 fc2c 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c448:	4682      	mov	sl, r0
    c44a:	2800      	cmp	r0, #0
    c44c:	d053      	beq.n	c4f6 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xea>

  const int input_width = input->dims->data[2];
    c44e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c452:	68da      	ldr	r2, [r3, #12]
    c454:	9209      	str	r2, [sp, #36]	; 0x24
  const int input_height = input->dims->data[1];
    c456:	689b      	ldr	r3, [r3, #8]
    c458:	930a      	str	r3, [sp, #40]	; 0x28
  const int filter_width = filter->dims->data[2];
    c45a:	6883      	ldr	r3, [r0, #8]
    c45c:	68da      	ldr	r2, [r3, #12]
    c45e:	920b      	str	r2, [sp, #44]	; 0x2c
  const int filter_height = filter->dims->data[1];
    c460:	689a      	ldr	r2, [r3, #8]
    c462:	920c      	str	r2, [sp, #48]	; 0x30
  const int output_width = output->dims->data[2];
    c464:	f8d8 2008 	ldr.w	r2, [r8, #8]
    c468:	68d1      	ldr	r1, [r2, #12]
    c46a:	910d      	str	r1, [sp, #52]	; 0x34
  const int output_height = output->dims->data[1];
    c46c:	f8d2 b008 	ldr.w	fp, [r2, #8]

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
    c470:	691a      	ldr	r2, [r3, #16]
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c474:	ea4f 0882 	mov.w	r8, r2, lsl #2
    c478:	4641      	mov	r1, r8
    c47a:	4620      	mov	r0, r4
    c47c:	4798      	blx	r3
  data->per_channel_output_multiplier =
    c47e:	6270      	str	r0, [r6, #36]	; 0x24
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
    c480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c482:	4641      	mov	r1, r8
    c484:	4620      	mov	r0, r4
    c486:	4798      	blx	r3
  data->per_channel_output_shift =
    c488:	62b0      	str	r0, [r6, #40]	; 0x28
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
    c48a:	f899 3000 	ldrb.w	r3, [r9]
    c48e:	2b09      	cmp	r3, #9
    c490:	d16a      	bne.n	c568 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
    c492:	f89a 8030 	ldrb.w	r8, [sl, #48]	; 0x30
    c496:	f1b8 0f01 	cmp.w	r8, #1
    c49a:	d037      	beq.n	c50c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x100>
    c49c:	6966      	ldr	r6, [r4, #20]
    c49e:	2501      	movs	r5, #1
    c4a0:	9503      	str	r5, [sp, #12]
    c4a2:	f8cd 8008 	str.w	r8, [sp, #8]
    c4a6:	4b3a      	ldr	r3, [pc, #232]	; (c590 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x184>)
    c4a8:	9301      	str	r3, [sp, #4]
    c4aa:	4b3a      	ldr	r3, [pc, #232]	; (c594 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x188>)
    c4ac:	9300      	str	r3, [sp, #0]
    c4ae:	23a1      	movs	r3, #161	; 0xa1
    c4b0:	4a39      	ldr	r2, [pc, #228]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c4b2:	493a      	ldr	r1, [pc, #232]	; (c59c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c4b4:	4620      	mov	r0, r4
    c4b6:	47b0      	blx	r6
    c4b8:	46a8      	mov	r8, r5
    c4ba:	e00d      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TFLITE_DCHECK(node->user_data != nullptr);
    c4bc:	f009 fe6d 	bl	1619a <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c4c0:	f009 fe6b 	bl	1619a <abort>
  TF_LITE_ENSURE(context, output != nullptr);
    c4c4:	6965      	ldr	r5, [r4, #20]
    c4c6:	4b36      	ldr	r3, [pc, #216]	; (c5a0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x194>)
    c4c8:	9300      	str	r3, [sp, #0]
    c4ca:	2387      	movs	r3, #135	; 0x87
    c4cc:	4a32      	ldr	r2, [pc, #200]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c4ce:	4935      	ldr	r1, [pc, #212]	; (c5a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c4d0:	4620      	mov	r0, r4
    c4d2:	47a8      	blx	r5
    c4d4:	f04f 0801 	mov.w	r8, #1
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
    c4d8:	4640      	mov	r0, r8
    c4da:	b00f      	add	sp, #60	; 0x3c
    c4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input != nullptr);
    c4e0:	6965      	ldr	r5, [r4, #20]
    c4e2:	4b31      	ldr	r3, [pc, #196]	; (c5a8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
    c4e4:	9300      	str	r3, [sp, #0]
    c4e6:	238a      	movs	r3, #138	; 0x8a
    c4e8:	4a2b      	ldr	r2, [pc, #172]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c4ea:	492e      	ldr	r1, [pc, #184]	; (c5a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c4ec:	4620      	mov	r0, r4
    c4ee:	47a8      	blx	r5
    c4f0:	f04f 0801 	mov.w	r8, #1
    c4f4:	e7f0      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE(context, filter != nullptr);
    c4f6:	6965      	ldr	r5, [r4, #20]
    c4f8:	4b2c      	ldr	r3, [pc, #176]	; (c5ac <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
    c4fa:	9300      	str	r3, [sp, #0]
    c4fc:	238d      	movs	r3, #141	; 0x8d
    c4fe:	4a26      	ldr	r2, [pc, #152]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c500:	4928      	ldr	r1, [pc, #160]	; (c5a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c502:	4620      	mov	r0, r4
    c504:	47a8      	blx	r5
    c506:	f04f 0801 	mov.w	r8, #1
    c50a:	e7e5      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    const auto* affine_quantization =
    c50c:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
    TFLITE_DCHECK(affine_quantization != nullptr);
    c510:	b1a2      	cbz	r2, c53c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x130>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c512:	6811      	ldr	r1, [r2, #0]
    c514:	b1a1      	cbz	r1, c540 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c516:	6850      	ldr	r0, [r2, #4]
    c518:	b1a0      	cbz	r0, c544 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    TF_LITE_ENSURE(
    c51a:	680a      	ldr	r2, [r1, #0]
    c51c:	2a01      	cmp	r2, #1
    c51e:	d013      	beq.n	c548 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c520:	f8da 1008 	ldr.w	r1, [sl, #8]
    c524:	6909      	ldr	r1, [r1, #16]
    c526:	428a      	cmp	r2, r1
    c528:	d00e      	beq.n	c548 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x13c>
    c52a:	6965      	ldr	r5, [r4, #20]
    c52c:	4b20      	ldr	r3, [pc, #128]	; (c5b0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
    c52e:	9300      	str	r3, [sp, #0]
    c530:	23aa      	movs	r3, #170	; 0xaa
    c532:	4a19      	ldr	r2, [pc, #100]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c534:	491b      	ldr	r1, [pc, #108]	; (c5a4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x198>)
    c536:	4620      	mov	r0, r4
    c538:	47a8      	blx	r5
    c53a:	e7cd      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    TFLITE_DCHECK(affine_quantization != nullptr);
    c53c:	f009 fe2d 	bl	1619a <abort>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
    c540:	f009 fe2b 	bl	1619a <abort>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
    c544:	f009 fe29 	bl	1619a <abort>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
    c548:	6801      	ldr	r1, [r0, #0]
    c54a:	428a      	cmp	r2, r1
    c54c:	d00c      	beq.n	c568 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x15c>
    c54e:	6965      	ldr	r5, [r4, #20]
    c550:	9103      	str	r1, [sp, #12]
    c552:	9202      	str	r2, [sp, #8]
    c554:	4b17      	ldr	r3, [pc, #92]	; (c5b4 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
    c556:	9301      	str	r3, [sp, #4]
    c558:	4b17      	ldr	r3, [pc, #92]	; (c5b8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
    c55a:	9300      	str	r3, [sp, #0]
    c55c:	23af      	movs	r3, #175	; 0xaf
    c55e:	4a0e      	ldr	r2, [pc, #56]	; (c598 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
    c560:	490e      	ldr	r1, [pc, #56]	; (c59c <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x190>)
    c562:	4620      	mov	r0, r4
    c564:	47a8      	blx	r5
    c566:	e7b7      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
    c568:	9606      	str	r6, [sp, #24]
    c56a:	9305      	str	r3, [sp, #20]
    c56c:	f8cd b010 	str.w	fp, [sp, #16]
    c570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c572:	9303      	str	r3, [sp, #12]
    c574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c576:	9302      	str	r3, [sp, #8]
    c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c57a:	9301      	str	r3, [sp, #4]
    c57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c57e:	9300      	str	r3, [sp, #0]
    c580:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c582:	463a      	mov	r2, r7
    c584:	4629      	mov	r1, r5
    c586:	4620      	mov	r0, r4
    c588:	f7ff fe26 	bl	c1d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
    c58c:	4680      	mov	r8, r0
    c58e:	e7a3      	b.n	c4d8 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xcc>
    c590:	0006add8 	.word	0x0006add8
    c594:	0006ae10 	.word	0x0006ae10
    c598:	0006b600 	.word	0x0006b600
    c59c:	0006adbc 	.word	0x0006adbc
    c5a0:	0006b538 	.word	0x0006b538
    c5a4:	0006aafc 	.word	0x0006aafc
    c5a8:	0006b510 	.word	0x0006b510
    c5ac:	0006b524 	.word	0x0006b524
    c5b0:	0006b65c 	.word	0x0006b65c
    c5b4:	0006b5c8 	.word	0x0006b5c8
    c5b8:	0006aec4 	.word	0x0006aec4

0000c5bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context,
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5c0:	b084      	sub	sp, #16
  TFLITE_DCHECK(node->user_data != nullptr);
    c5c2:	690d      	ldr	r5, [r1, #16]
    c5c4:	b37d      	cbz	r5, c626 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
    c5c6:	4607      	mov	r7, r0
    c5c8:	460c      	mov	r4, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c5ca:	694e      	ldr	r6, [r1, #20]
    c5cc:	b36e      	cbz	r6, c62a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
    c5ce:	4b38      	ldr	r3, [pc, #224]	; (c6b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
    c5d0:	681a      	ldr	r2, [r3, #0]
    c5d2:	f007 fb65 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    c5d6:	4681      	mov	r9, r0
    c5d8:	b348      	cbz	r0, c62e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x72>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
    c5da:	4b36      	ldr	r3, [pc, #216]	; (c6b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
    c5dc:	681a      	ldr	r2, [r3, #0]
    c5de:	4621      	mov	r1, r4
    c5e0:	4638      	mov	r0, r7
    c5e2:	f007 fb5d 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
    c5e6:	4682      	mov	sl, r0
    c5e8:	b368      	cbz	r0, c646 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
    c5ea:	4b33      	ldr	r3, [pc, #204]	; (c6b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
    c5ec:	681a      	ldr	r2, [r3, #0]
    c5ee:	4621      	mov	r1, r4
    c5f0:	4638      	mov	r0, r7
    c5f2:	f007 fb93 	bl	13d1c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    c5f6:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
    c5f8:	4b30      	ldr	r3, [pc, #192]	; (c6bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
    c5fa:	681a      	ldr	r2, [r3, #0]
    c5fc:	4621      	mov	r1, r4
    c5fe:	4638      	mov	r0, r7
    c600:	f007 fb6d 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    c604:	4604      	mov	r4, r0
    c606:	b340      	cbz	r0, c65a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c608:	f899 0000 	ldrb.w	r0, [r9]
    c60c:	7823      	ldrb	r3, [r4, #0]
    c60e:	4298      	cmp	r0, r3
    c610:	d12d      	bne.n	c66e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
    c612:	f89a 3000 	ldrb.w	r3, [sl]
    c616:	4298      	cmp	r0, r3
    c618:	d03d      	beq.n	c696 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xda>
    c61a:	697b      	ldr	r3, [r7, #20]
    c61c:	4928      	ldr	r1, [pc, #160]	; (c6c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
    c61e:	4638      	mov	r0, r7
    c620:	4798      	blx	r3
    c622:	2001      	movs	r0, #1
    c624:	e00c      	b.n	c640 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TFLITE_DCHECK(node->user_data != nullptr);
    c626:	f009 fdb8 	bl	1619a <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c62a:	f009 fdb6 	bl	1619a <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    c62e:	697c      	ldr	r4, [r7, #20]
    c630:	4b24      	ldr	r3, [pc, #144]	; (c6c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>)
    c632:	9300      	str	r3, [sp, #0]
    c634:	232f      	movs	r3, #47	; 0x2f
    c636:	4a24      	ldr	r2, [pc, #144]	; (c6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c638:	4924      	ldr	r1, [pc, #144]	; (c6cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c63a:	4638      	mov	r0, r7
    c63c:	47a0      	blx	r4
    c63e:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
                                       input, filter, bias, output, data);
}
    c640:	b004      	add	sp, #16
    c642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, filter != nullptr);
    c646:	697c      	ldr	r4, [r7, #20]
    c648:	4b21      	ldr	r3, [pc, #132]	; (c6d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x114>)
    c64a:	9300      	str	r3, [sp, #0]
    c64c:	2332      	movs	r3, #50	; 0x32
    c64e:	4a1e      	ldr	r2, [pc, #120]	; (c6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c650:	491e      	ldr	r1, [pc, #120]	; (c6cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c652:	4638      	mov	r0, r7
    c654:	47a0      	blx	r4
    c656:	2001      	movs	r0, #1
    c658:	e7f2      	b.n	c640 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE(context, output != nullptr);
    c65a:	697c      	ldr	r4, [r7, #20]
    c65c:	4b1d      	ldr	r3, [pc, #116]	; (c6d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>)
    c65e:	9300      	str	r3, [sp, #0]
    c660:	2336      	movs	r3, #54	; 0x36
    c662:	4a19      	ldr	r2, [pc, #100]	; (c6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c664:	4919      	ldr	r1, [pc, #100]	; (c6cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x110>)
    c666:	4638      	mov	r0, r7
    c668:	47a0      	blx	r4
    c66a:	2001      	movs	r0, #1
    c66c:	e7e8      	b.n	c640 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    c66e:	697e      	ldr	r6, [r7, #20]
    c670:	f7fc fe34 	bl	92dc <TfLiteTypeGetName>
    c674:	4605      	mov	r5, r0
    c676:	7820      	ldrb	r0, [r4, #0]
    c678:	f7fc fe30 	bl	92dc <TfLiteTypeGetName>
    c67c:	9003      	str	r0, [sp, #12]
    c67e:	9502      	str	r5, [sp, #8]
    c680:	4b15      	ldr	r3, [pc, #84]	; (c6d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11c>)
    c682:	9301      	str	r3, [sp, #4]
    c684:	4b15      	ldr	r3, [pc, #84]	; (c6dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>)
    c686:	9300      	str	r3, [sp, #0]
    c688:	2338      	movs	r3, #56	; 0x38
    c68a:	4a0f      	ldr	r2, [pc, #60]	; (c6c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
    c68c:	4914      	ldr	r1, [pc, #80]	; (c6e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
    c68e:	4638      	mov	r0, r7
    c690:	47b0      	blx	r6
    c692:	2001      	movs	r0, #1
    c694:	e7d4      	b.n	c640 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
  return CalculateOpDataFullyConnected(context, params->activation, input->type,
    c696:	7831      	ldrb	r1, [r6, #0]
    c698:	9503      	str	r5, [sp, #12]
    c69a:	9402      	str	r4, [sp, #8]
    c69c:	f8cd 8004 	str.w	r8, [sp, #4]
    c6a0:	f8cd a000 	str.w	sl, [sp]
    c6a4:	464b      	mov	r3, r9
    c6a6:	4602      	mov	r2, r0
    c6a8:	4638      	mov	r0, r7
    c6aa:	f008 f95f 	bl	1496c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
                                       input, filter, bias, output, data);
    c6ae:	e7c7      	b.n	c640 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x84>
    c6b0:	0006b7f0 	.word	0x0006b7f0
    c6b4:	0006b7f8 	.word	0x0006b7f8
    c6b8:	0006b7ec 	.word	0x0006b7ec
    c6bc:	0006b7f4 	.word	0x0006b7f4
    c6c0:	0006b764 	.word	0x0006b764
    c6c4:	0006b510 	.word	0x0006b510
    c6c8:	0006b6f0 	.word	0x0006b6f0
    c6cc:	0006aafc 	.word	0x0006aafc
    c6d0:	0006b524 	.word	0x0006b524
    c6d4:	0006b538 	.word	0x0006b538
    c6d8:	0006b3d0 	.word	0x0006b3d0
    c6dc:	0006b3e0 	.word	0x0006b3e0
    c6e0:	0006b748 	.word	0x0006b748

0000c6e4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
    c6e4:	b470      	push	{r4, r5, r6}
    c6e6:	4606      	mov	r6, r0
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    c6e8:	4604      	mov	r4, r0
    c6ea:	4d05      	ldr	r5, [pc, #20]	; (c700 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
    c6ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c6ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c6f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c6f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    c6f8:	4630      	mov	r0, r6
    c6fa:	bc70      	pop	{r4, r5, r6}
    c6fc:	4770      	bx	lr
    c6fe:	bf00      	nop
    c700:	00017150 	.word	0x00017150

0000c704 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
    c704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c708:	b0cf      	sub	sp, #316	; 0x13c
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c70a:	f8d1 a014 	ldr.w	sl, [r1, #20]
    c70e:	f1ba 0f00 	cmp.w	sl, #0
    c712:	d04c      	beq.n	c7ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
    c714:	4604      	mov	r4, r0
    c716:	460e      	mov	r6, r1
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
    c718:	4ba5      	ldr	r3, [pc, #660]	; (c9b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
    c71a:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c71c:	2800      	cmp	r0, #0
    c71e:	d048      	beq.n	c7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
  TFLITE_DCHECK(node != nullptr);
    c720:	2e00      	cmp	r6, #0
    c722:	d048      	beq.n	c7b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c724:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c726:	6833      	ldr	r3, [r6, #0]
    c728:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c72c:	6859      	ldr	r1, [r3, #4]
    c72e:	4790      	blx	r2
    c730:	4680      	mov	r8, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
    c732:	4ba0      	ldr	r3, [pc, #640]	; (c9b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
    c734:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c736:	2c00      	cmp	r4, #0
    c738:	d03f      	beq.n	c7ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb6>
  TFLITE_DCHECK(node != nullptr);
    c73a:	2e00      	cmp	r6, #0
    c73c:	d03f      	beq.n	c7be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c73e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c740:	6833      	ldr	r3, [r6, #0]
    c742:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c746:	6859      	ldr	r1, [r3, #4]
    c748:	4620      	mov	r0, r4
    c74a:	4790      	blx	r2
    c74c:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
    c74e:	4b9a      	ldr	r3, [pc, #616]	; (c9b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
    c750:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c752:	2c00      	cmp	r4, #0
    c754:	d035      	beq.n	c7c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
  TFLITE_DCHECK(node != nullptr);
    c756:	2e00      	cmp	r6, #0
    c758:	d035      	beq.n	c7c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc2>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    c75a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c75c:	6833      	ldr	r3, [r6, #0]
    c75e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c762:	6859      	ldr	r1, [r3, #4]
    c764:	4620      	mov	r0, r4
    c766:	4790      	blx	r2
    c768:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
    c76a:	4b94      	ldr	r3, [pc, #592]	; (c9bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>)
    c76c:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    c76e:	b364      	cbz	r4, c7ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node != nullptr);
    c770:	b36e      	cbz	r6, c7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xca>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    c772:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c774:	6873      	ldr	r3, [r6, #4]
    c776:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c77a:	6859      	ldr	r1, [r3, #4]
    c77c:	4620      	mov	r0, r4
    c77e:	4790      	blx	r2
    c780:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    c782:	6931      	ldr	r1, [r6, #16]
    c784:	b329      	cbz	r1, c7d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xce>
  switch (input->type) {
    c786:	f898 0008 	ldrb.w	r0, [r8, #8]
    c78a:	2801      	cmp	r0, #1
    c78c:	d023      	beq.n	c7d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
    c78e:	2809      	cmp	r0, #9
    c790:	f000 8136 	beq.w	ca00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    c794:	6965      	ldr	r5, [r4, #20]
    c796:	f7fc fda1 	bl	92dc <TfLiteTypeGetName>
    c79a:	4602      	mov	r2, r0
    c79c:	f898 3008 	ldrb.w	r3, [r8, #8]
    c7a0:	4987      	ldr	r1, [pc, #540]	; (c9c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
    c7a2:	4620      	mov	r0, r4
    c7a4:	47a8      	blx	r5
      return kTfLiteError;
    c7a6:	2001      	movs	r0, #1
}
    c7a8:	b04f      	add	sp, #316	; 0x13c
    c7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TFLITE_DCHECK(node->builtin_data != nullptr);
    c7ae:	f009 fcf4 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c7b2:	f009 fcf2 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c7b6:	f009 fcf0 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c7ba:	f009 fcee 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c7be:	f009 fcec 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c7c2:	f009 fcea 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c7c6:	f009 fce8 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    c7ca:	f009 fce6 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    c7ce:	f009 fce4 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    c7d2:	f009 fce2 	bl	1619a <abort>
          FullyConnectedParamsFloat(params->activation),
    c7d6:	f89a 1000 	ldrb.w	r1, [sl]
    c7da:	a812      	add	r0, sp, #72	; 0x48
    c7dc:	f008 f8fd 	bl	149da <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
    c7e0:	4641      	mov	r1, r8
    c7e2:	a81c      	add	r0, sp, #112	; 0x70
    c7e4:	f008 f904 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c7e8:	4640      	mov	r0, r8
    c7ea:	f007 fb18 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c7ee:	9001      	str	r0, [sp, #4]
          tflite::micro::GetTensorShape(filter),
    c7f0:	4649      	mov	r1, r9
    c7f2:	a822      	add	r0, sp, #136	; 0x88
    c7f4:	f008 f8fc 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c7f8:	4648      	mov	r0, r9
    c7fa:	f007 fb10 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c7fe:	9002      	str	r0, [sp, #8]
          tflite::micro::GetTensorShape(bias),
    c800:	4639      	mov	r1, r7
    c802:	a828      	add	r0, sp, #160	; 0xa0
    c804:	f008 f8f4 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c808:	4638      	mov	r0, r7
    c80a:	f007 fb08 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    c80e:	4606      	mov	r6, r0
          tflite::micro::GetTensorShape(output),
    c810:	4629      	mov	r1, r5
    c812:	a82e      	add	r0, sp, #184	; 0xb8
    c814:	f008 f8ec 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
    c818:	4628      	mov	r0, r5
    c81a:	f007 fb06 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    c81e:	9003      	str	r0, [sp, #12]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  const float output_activation_min = params.float_activation_min;
    c820:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c822:	9304      	str	r3, [sp, #16]
  const float output_activation_max = params.float_activation_max;
    c824:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  inline int32_t DimensionsCount() const { return size_; }
    c828:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c82a:	9922      	ldr	r1, [sp, #136]	; 0x88
    c82c:	461c      	mov	r4, r3
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c82e:	1e5a      	subs	r2, r3, #1
    c830:	d405      	bmi.n	c83e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    c832:	429a      	cmp	r2, r3
    c834:	da03      	bge.n	c83e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c836:	2b05      	cmp	r3, #5
    c838:	dd03      	ble.n	c842 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
    c83a:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    c83c:	e002      	b.n	c844 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    c83e:	f009 fcac 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    c842:	ad2f      	add	r5, sp, #188	; 0xbc
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
    c844:	2300      	movs	r3, #0
  int flat_size = 1;
    c846:	f04f 0801 	mov.w	r8, #1
    c84a:	e004      	b.n	c856 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c84c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    c850:	fb00 f808 	mul.w	r8, r0, r8
  for (int i = 0; i < dims_count; ++i) {
    c854:	3301      	adds	r3, #1
    c856:	429c      	cmp	r4, r3
    c858:	dd03      	ble.n	c862 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    c85a:	429a      	cmp	r2, r3
    c85c:	d1f6      	bne.n	c84c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
    c85e:	2001      	movs	r0, #1
    c860:	e7f6      	b.n	c850 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    TFLITE_DCHECK_GE(i, 0);
    c862:	1e8b      	subs	r3, r1, #2
    c864:	d433      	bmi.n	c8ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
    TFLITE_DCHECK_LT(i, size_);
    c866:	9822      	ldr	r0, [sp, #136]	; 0x88
    c868:	4283      	cmp	r3, r0
    c86a:	da32      	bge.n	c8d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ce>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c86c:	2805      	cmp	r0, #5
    c86e:	dd32      	ble.n	c8d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    c870:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c872:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    c876:	2a00      	cmp	r2, #0
    c878:	db33      	blt.n	c8e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1de>
    TFLITE_DCHECK_LT(i, size_);
    c87a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c87c:	4282      	cmp	r2, r0
    c87e:	da32      	bge.n	c8e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c880:	2805      	cmp	r0, #5
    c882:	dd32      	ble.n	c8ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
    c884:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c886:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c88a:	4298      	cmp	r0, r3
    c88c:	d133      	bne.n	c8f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f2>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c88e:	934d      	str	r3, [sp, #308]	; 0x134
    TFLITE_DCHECK_GE(i, 0);
    c890:	2a00      	cmp	r2, #0
    c892:	db32      	blt.n	c8fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
    c894:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c896:	4282      	cmp	r2, r0
    c898:	da31      	bge.n	c8fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c89a:	2805      	cmp	r0, #5
    c89c:	dd31      	ble.n	c902 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
    c89e:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c8a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    c8a4:	924c      	str	r2, [sp, #304]	; 0x130
      if (__b < __a)
    c8a6:	4293      	cmp	r3, r2
    c8a8:	dc31      	bgt.n	c90e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
      return __a;
    c8aa:	ab4d      	add	r3, sp, #308	; 0x134
    c8ac:	f8d3 b000 	ldr.w	fp, [r3]
    TFLITE_DCHECK_GE(i, 0);
    c8b0:	3901      	subs	r1, #1
    c8b2:	d42e      	bmi.n	c912 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
    TFLITE_DCHECK_LT(i, size_);
    c8b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c8b6:	4299      	cmp	r1, r3
    c8b8:	da2d      	bge.n	c916 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8ba:	2b05      	cmp	r3, #5
    c8bc:	dd2d      	ble.n	c91a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
    c8be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c8c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  for (int b = 0; b < batches; ++b) {
    c8c4:	2700      	movs	r7, #0
    c8c6:	f8cd 8014 	str.w	r8, [sp, #20]
    c8ca:	46b0      	mov	r8, r6
    c8cc:	e06a      	b.n	c9a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    TFLITE_DCHECK_GE(i, 0);
    c8ce:	f009 fc64 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8d2:	f009 fc62 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8d6:	a84e      	add	r0, sp, #312	; 0x138
    c8d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    c8dc:	f853 3cac 	ldr.w	r3, [r3, #-172]
    c8e0:	e7c9      	b.n	c876 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x172>
    TFLITE_DCHECK_GE(i, 0);
    c8e2:	f009 fc5a 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8e6:	f009 fc58 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c8ea:	a84e      	add	r0, sp, #312	; 0x138
    c8ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    c8f0:	f850 0c7c 	ldr.w	r0, [r0, #-124]
    c8f4:	e7c9      	b.n	c88a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x186>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    c8f6:	f009 fc50 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    c8fa:	f009 fc4e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    c8fe:	f009 fc4c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c902:	a84e      	add	r0, sp, #312	; 0x138
    c904:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    c908:	f852 2c7c 	ldr.w	r2, [r2, #-124]
    c90c:	e7ca      	b.n	c8a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a0>
	return __b;
    c90e:	ab4c      	add	r3, sp, #304	; 0x130
    c910:	e7cc      	b.n	c8ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    TFLITE_DCHECK_GE(i, 0);
    c912:	f009 fc42 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    c916:	f009 fc40 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    c91a:	ab4e      	add	r3, sp, #312	; 0x138
    c91c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c920:	f851 9cac 	ldr.w	r9, [r1, #-172]
    c924:	e7ce      	b.n	c8c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
    c926:	fb09 6307 	mla	r3, r9, r7, r6
                 weights_data[out_c * accum_depth + d];
    c92a:	fb09 6204 	mla	r2, r9, r4, r6
        total += input_data[b * accum_depth + d] *
    c92e:	9902      	ldr	r1, [sp, #8]
    c930:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    c934:	9a01      	ldr	r2, [sp, #4]
    c936:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    c93a:	f7f4 f9e9 	bl	d10 <__aeabi_fmul>
    c93e:	4601      	mov	r1, r0
    c940:	4628      	mov	r0, r5
    c942:	f7f4 f8dd 	bl	b00 <__addsf3>
    c946:	4605      	mov	r5, r0
      for (int d = 0; d < accum_depth; ++d) {
    c948:	3601      	adds	r6, #1
    c94a:	454e      	cmp	r6, r9
    c94c:	dbeb      	blt.n	c926 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x222>
      }
      float bias_value = 0.0f;
      if (bias_data) {
    c94e:	f1b8 0f00 	cmp.w	r8, #0
    c952:	d020      	beq.n	c996 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
        bias_value = bias_data[out_c];
    c954:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
    c958:	4628      	mov	r0, r5
    c95a:	f7f4 f8d1 	bl	b00 <__addsf3>
    c95e:	4601      	mov	r1, r0
    c960:	fb0b 4607 	mla	r6, fp, r7, r4
    c964:	9011      	str	r0, [sp, #68]	; 0x44
    c966:	9b04      	ldr	r3, [sp, #16]
    c968:	9310      	str	r3, [sp, #64]	; 0x40
    c96a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
      if (__a < __b)
    c96e:	4618      	mov	r0, r3
    c970:	f7f4 fb8a 	bl	1088 <__aeabi_fcmpgt>
    c974:	b988      	cbnz	r0, c99a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
      return __a;
    c976:	ad11      	add	r5, sp, #68	; 0x44
      if (__b < __a)
    c978:	6829      	ldr	r1, [r5, #0]
    c97a:	4650      	mov	r0, sl
    c97c:	f7f4 fb66 	bl	104c <__aeabi_fcmplt>
    c980:	b968      	cbnz	r0, c99e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29a>
  return min(max(x, output_activation_min), output_activation_max);
    c982:	682b      	ldr	r3, [r5, #0]
    c984:	9a03      	ldr	r2, [sp, #12]
    c986:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c98a:	3401      	adds	r4, #1
    c98c:	455c      	cmp	r4, fp
    c98e:	da08      	bge.n	c9a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      for (int d = 0; d < accum_depth; ++d) {
    c990:	2600      	movs	r6, #0
      float total = 0.f;
    c992:	2500      	movs	r5, #0
    c994:	e7d9      	b.n	c94a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
      float bias_value = 0.0f;
    c996:	2100      	movs	r1, #0
    c998:	e7de      	b.n	c958 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
	return __b;
    c99a:	ad10      	add	r5, sp, #64	; 0x40
    c99c:	e7ec      	b.n	c978 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
	return __b;
    c99e:	ad0f      	add	r5, sp, #60	; 0x3c
    c9a0:	e7ef      	b.n	c982 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
  for (int b = 0; b < batches; ++b) {
    c9a2:	3701      	adds	r7, #1
    c9a4:	9b05      	ldr	r3, [sp, #20]
    c9a6:	429f      	cmp	r7, r3
    c9a8:	da0c      	bge.n	c9c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    c9aa:	2400      	movs	r4, #0
    c9ac:	e7ee      	b.n	c98c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>
    c9ae:	bf00      	nop
    c9b0:	0006b7f0 	.word	0x0006b7f0
    c9b4:	0006b7f8 	.word	0x0006b7f8
    c9b8:	0006b7ec 	.word	0x0006b7ec
    c9bc:	0006b7f4 	.word	0x0006b7f4
    c9c0:	0006b468 	.word	0x0006b468
    if (size_ > kMaxSmallSize) {
    c9c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    c9c6:	2b05      	cmp	r3, #5
    c9c8:	dd03      	ble.n	c9d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
      delete[] dims_pointer_;
    c9ca:	982f      	ldr	r0, [sp, #188]	; 0xbc
    c9cc:	b108      	cbz	r0, c9d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
    c9ce:	f009 fbcf 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    c9d4:	2b05      	cmp	r3, #5
    c9d6:	dd03      	ble.n	c9e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
      delete[] dims_pointer_;
    c9d8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    c9da:	b108      	cbz	r0, c9e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    c9dc:	f009 fbc8 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c9e2:	2b05      	cmp	r3, #5
    c9e4:	dd03      	ble.n	c9ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
      delete[] dims_pointer_;
    c9e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c9e8:	b108      	cbz	r0, c9ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ea>
    c9ea:	f009 fbc1 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    c9ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    c9f0:	2b05      	cmp	r3, #5
    c9f2:	dd03      	ble.n	c9fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
      delete[] dims_pointer_;
    c9f4:	981d      	ldr	r0, [sp, #116]	; 0x74
    c9f6:	b108      	cbz	r0, c9fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
    c9f8:	f009 fbba 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    c9fc:	2000      	movs	r0, #0
      break;
    c9fe:	e6d3      	b.n	c7a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
          FullyConnectedParamsQuantized(data),
    ca00:	a812      	add	r0, sp, #72	; 0x48
    ca02:	f007 ffa2 	bl	1494a <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
    ca06:	4641      	mov	r1, r8
    ca08:	a834      	add	r0, sp, #208	; 0xd0
    ca0a:	f007 fff1 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    ca0e:	4640      	mov	r0, r8
    ca10:	f007 fa0f 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    ca14:	9005      	str	r0, [sp, #20]
          tflite::micro::GetTensorShape(filter),
    ca16:	4649      	mov	r1, r9
    ca18:	a83a      	add	r0, sp, #232	; 0xe8
    ca1a:	f007 ffe9 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    ca1e:	4648      	mov	r0, r9
    ca20:	f007 fa07 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    ca24:	9006      	str	r0, [sp, #24]
          tflite::micro::GetTensorShape(bias),
    ca26:	4639      	mov	r1, r7
    ca28:	a840      	add	r0, sp, #256	; 0x100
    ca2a:	f007 ffe1 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    ca2e:	4638      	mov	r0, r7
    ca30:	f007 fa32 	bl	13e98 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>
    ca34:	9007      	str	r0, [sp, #28]
          tflite::micro::GetTensorShape(output),
    ca36:	4629      	mov	r1, r5
    ca38:	a846      	add	r0, sp, #280	; 0x118
    ca3a:	f007 ffd9 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_integer_ops::FullyConnected(
    ca3e:	4628      	mov	r0, r5
    ca40:	f007 f9fd 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    ca44:	9008      	str	r0, [sp, #32]
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
    ca46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca48:	9309      	str	r3, [sp, #36]	; 0x24
  const int32_t filter_offset = params.weights_offset;
    ca4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca4c:	930a      	str	r3, [sp, #40]	; 0x28
  const int32_t output_offset = params.output_offset;
    ca4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ca50:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32_t output_multiplier = params.output_multiplier;
    ca52:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
  const int output_shift = params.output_shift;
    ca56:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  const int32_t output_activation_min = params.quantized_activation_min;
    ca5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    ca5c:	910f      	str	r1, [sp, #60]	; 0x3c
  const int32_t output_activation_max = params.quantized_activation_max;
    ca5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ca60:	9210      	str	r2, [sp, #64]	; 0x40
  inline int32_t DimensionsCount() const { return size_; }
    ca62:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    ca64:	2b01      	cmp	r3, #1
    ca66:	dd33      	ble.n	cad0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3cc>
    ca68:	9846      	ldr	r0, [sp, #280]	; 0x118
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    ca6a:	2802      	cmp	r0, #2
    ca6c:	d132      	bne.n	cad4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    ca6e:	4291      	cmp	r1, r2
    ca70:	dc32      	bgt.n	cad8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
    TFLITE_DCHECK_LT(i, size_);
    ca72:	9a46      	ldr	r2, [sp, #280]	; 0x118
    ca74:	2a00      	cmp	r2, #0
    ca76:	dd31      	ble.n	cadc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca78:	2a05      	cmp	r2, #5
    ca7a:	dd31      	ble.n	cae0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3dc>
    ca7c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    ca7e:	6812      	ldr	r2, [r2, #0]
    ca80:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
    ca82:	9a46      	ldr	r2, [sp, #280]	; 0x118
    ca84:	2a01      	cmp	r2, #1
    ca86:	dd2e      	ble.n	cae6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca88:	2a05      	cmp	r2, #5
    ca8a:	dd2e      	ble.n	caea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e6>
    ca8c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    ca8e:	6852      	ldr	r2, [r2, #4]
    ca90:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_GE(i, 0);
    ca92:	1e9a      	subs	r2, r3, #2
    ca94:	d42c      	bmi.n	caf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ec>
    TFLITE_DCHECK_LT(i, size_);
    ca96:	993a      	ldr	r1, [sp, #232]	; 0xe8
    ca98:	428a      	cmp	r2, r1
    ca9a:	da2b      	bge.n	caf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ca9c:	2905      	cmp	r1, #5
    ca9e:	dd2b      	ble.n	caf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f4>
    caa0:	993b      	ldr	r1, [sp, #236]	; 0xec
    caa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    caa6:	9901      	ldr	r1, [sp, #4]
    caa8:	428a      	cmp	r2, r1
    caaa:	db2b      	blt.n	cb04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x400>
    TFLITE_DCHECK_GE(i, 0);
    caac:	3b01      	subs	r3, #1
    caae:	d42b      	bmi.n	cb08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
    TFLITE_DCHECK_LT(i, size_);
    cab0:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    cab2:	4293      	cmp	r3, r2
    cab4:	da2a      	bge.n	cb0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x408>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cab6:	2a05      	cmp	r2, #5
    cab8:	dd2a      	ble.n	cb10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40c>
    caba:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    cabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cac0:	930d      	str	r3, [sp, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
    cac2:	f04f 0a00 	mov.w	sl, #0
    cac6:	4653      	mov	r3, sl
    cac8:	46ca      	mov	sl, r9
    caca:	46d9      	mov	r9, fp
    cacc:	469b      	mov	fp, r3
    cace:	e0ee      	b.n	ccae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5aa>
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
    cad0:	f009 fb63 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
    cad4:	f009 fb61 	bl	1619a <abort>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
    cad8:	f009 fb5f 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    cadc:	f009 fb5d 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cae0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    cae2:	920c      	str	r2, [sp, #48]	; 0x30
    cae4:	e7cd      	b.n	ca82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37e>
    TFLITE_DCHECK_LT(i, size_);
    cae6:	f009 fb58 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    caea:	9a48      	ldr	r2, [sp, #288]	; 0x120
    caec:	9201      	str	r2, [sp, #4]
    caee:	e7d0      	b.n	ca92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
    TFLITE_DCHECK_GE(i, 0);
    caf0:	f009 fb53 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    caf4:	f009 fb51 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    caf8:	a94e      	add	r1, sp, #312	; 0x138
    cafa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    cafe:	f852 2c4c 	ldr.w	r2, [r2, #-76]
    cb02:	e7d0      	b.n	caa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a2>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
    cb04:	f009 fb49 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    cb08:	f009 fb47 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    cb0c:	f009 fb45 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    cb10:	aa4e      	add	r2, sp, #312	; 0x138
    cb12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cb16:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    cb1a:	930d      	str	r3, [sp, #52]	; 0x34
    cb1c:	e7d1      	b.n	cac2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3be>
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
        int32_t filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
      }
      if (bias_data) {
    cb1e:	9b07      	ldr	r3, [sp, #28]
    cb20:	b123      	cbz	r3, cb2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x428>
        acc += bias_data[out_c];
    cb22:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    cb26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb28:	4413      	add	r3, r2
    cb2a:	9311      	str	r3, [sp, #68]	; 0x44
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
    cb2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  int left_shift = shift > 0 ? shift : 0;
    cb2e:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    cb32:	f1b9 0f00 	cmp.w	r9, #0
    cb36:	f340 808f 	ble.w	cc58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x554>
    cb3a:	2600      	movs	r6, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    cb3c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cb3e:	4592      	cmp	sl, r2
    cb40:	f000 808d 	beq.w	cc5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55a>
    cb44:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    cb46:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    cb48:	4653      	mov	r3, sl
    cb4a:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    cb4c:	fb02 f304 	mul.w	r3, r2, r4
    cb50:	fb0a 3101 	mla	r1, sl, r1, r3
    cb54:	fba2 230a 	umull	r2, r3, r2, sl
    cb58:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cb5a:	2a00      	cmp	r2, #0
    cb5c:	f173 0100 	sbcs.w	r1, r3, #0
    cb60:	f2c0 8084 	blt.w	cc6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
    cb64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cb68:	1852      	adds	r2, r2, r1
    cb6a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cb6e:	4611      	mov	r1, r2
    cb70:	461c      	mov	r4, r3
    cb72:	2a00      	cmp	r2, #0
    cb74:	f173 0000 	sbcs.w	r0, r3, #0
    cb78:	db7a      	blt.n	cc70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56c>
    cb7a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cb7c:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cb80:	2f00      	cmp	r7, #0
    cb82:	d17d      	bne.n	cc80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57c>
  assert(exponent >= 0);
    cb84:	2e00      	cmp	r6, #0
    cb86:	db7e      	blt.n	cc86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x582>
  assert(exponent <= 31);
    cb88:	2e1f      	cmp	r6, #31
    cb8a:	f300 8083 	bgt.w	cc94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x590>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cb8e:	2701      	movs	r7, #1
    cb90:	fa07 f006 	lsl.w	r0, r7, r6
    cb94:	3801      	subs	r0, #1
    cb96:	f007 f956 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cb9a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cb9c:	2000      	movs	r0, #0
    cb9e:	f007 f952 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cba2:	9002      	str	r0, [sp, #8]
  const IntegerType one = Dup<IntegerType>(1);
    cba4:	4638      	mov	r0, r7
    cba6:	f007 f94e 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cbaa:	9003      	str	r0, [sp, #12]
  const IntegerType remainder = BitAnd(x, mask);
    cbac:	4641      	mov	r1, r8
    cbae:	4620      	mov	r0, r4
    cbb0:	f007 f94a 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cbb4:	9004      	str	r0, [sp, #16]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cbb6:	4639      	mov	r1, r7
    cbb8:	4640      	mov	r0, r8
    cbba:	f007 f947 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cbbe:	4680      	mov	r8, r0
    cbc0:	9902      	ldr	r1, [sp, #8]
    cbc2:	4620      	mov	r0, r4
    cbc4:	f007 f94e 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cbc8:	9f03      	ldr	r7, [sp, #12]
    cbca:	4639      	mov	r1, r7
    cbcc:	f007 f93c 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cbd0:	4601      	mov	r1, r0
    cbd2:	4640      	mov	r0, r8
    cbd4:	f007 f93c 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cbd8:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    cbda:	4631      	mov	r1, r6
    cbdc:	4620      	mov	r0, r4
    cbde:	f007 f935 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cbe2:	4604      	mov	r4, r0
    cbe4:	4641      	mov	r1, r8
    cbe6:	9804      	ldr	r0, [sp, #16]
    cbe8:	f007 f944 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cbec:	4639      	mov	r1, r7
    cbee:	f007 f92b 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cbf2:	4601      	mov	r1, r0
    cbf4:	4620      	mov	r0, r4
    cbf6:	f007 f92b 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
      acc += output_offset;
    cbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbfc:	4418      	add	r0, r3
    cbfe:	9011      	str	r0, [sp, #68]	; 0x44
      if (__a < __b)
    cc00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc02:	4298      	cmp	r0, r3
    cc04:	db4d      	blt.n	cca2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59e>
      return __a;
    cc06:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::max(acc, output_activation_min);
    cc08:	681b      	ldr	r3, [r3, #0]
    cc0a:	9311      	str	r3, [sp, #68]	; 0x44
      if (__b < __a)
    cc0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cc0e:	4293      	cmp	r3, r2
    cc10:	dc49      	bgt.n	cca6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
      return __a;
    cc12:	ab11      	add	r3, sp, #68	; 0x44
      acc = std::min(acc, output_activation_max);
    cc14:	681a      	ldr	r2, [r3, #0]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
    cc16:	9b01      	ldr	r3, [sp, #4]
    cc18:	fb03 530b 	mla	r3, r3, fp, r5
    cc1c:	9908      	ldr	r1, [sp, #32]
    cc1e:	54ca      	strb	r2, [r1, r3]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    cc20:	3501      	adds	r5, #1
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	429d      	cmp	r5, r3
    cc26:	da40      	bge.n	ccaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a6>
      int32_t acc = 0;
    cc28:	2300      	movs	r3, #0
    cc2a:	9311      	str	r3, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    cc2c:	980d      	ldr	r0, [sp, #52]	; 0x34
    cc2e:	4283      	cmp	r3, r0
    cc30:	f6bf af75 	bge.w	cb1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41a>
        int32_t input_val = input_data[b * accum_depth + d];
    cc34:	fb00 320b 	mla	r2, r0, fp, r3
    cc38:	9905      	ldr	r1, [sp, #20]
    cc3a:	5689      	ldrsb	r1, [r1, r2]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
    cc3c:	fb00 3205 	mla	r2, r0, r5, r3
    cc40:	9c06      	ldr	r4, [sp, #24]
    cc42:	56a2      	ldrsb	r2, [r4, r2]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
    cc44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    cc46:	4422      	add	r2, r4
    cc48:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cc4a:	4421      	add	r1, r4
    cc4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cc4e:	fb01 4202 	mla	r2, r1, r2, r4
    cc52:	9211      	str	r2, [sp, #68]	; 0x44
      for (int d = 0; d < accum_depth; ++d) {
    cc54:	3301      	adds	r3, #1
    cc56:	e7ea      	b.n	cc2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
  int right_shift = shift > 0 ? 0 : -shift;
    cc58:	f1c9 0600 	rsb	r6, r9, #0
    cc5c:	e76e      	b.n	cb3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cc5e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc62:	d001      	beq.n	cc68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x564>
    cc64:	2700      	movs	r7, #0
    cc66:	e76e      	b.n	cb46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
    cc68:	2701      	movs	r7, #1
    cc6a:	e76c      	b.n	cb46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x442>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cc6c:	4921      	ldr	r1, [pc, #132]	; (ccf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>)
    cc6e:	e77b      	b.n	cb68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x464>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cc70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cc74:	1851      	adds	r1, r2, r1
    cc76:	f04f 0400 	mov.w	r4, #0
    cc7a:	eb43 0404 	adc.w	r4, r3, r4
    cc7e:	e77c      	b.n	cb7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cc80:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    cc84:	e77e      	b.n	cb84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x480>
  assert(exponent >= 0);
    cc86:	4b1c      	ldr	r3, [pc, #112]	; (ccf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f4>)
    cc88:	4a1c      	ldr	r2, [pc, #112]	; (ccfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    cc8a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    cc8e:	481c      	ldr	r0, [pc, #112]	; (cd00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    cc90:	f003 fe96 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    cc94:	4b1b      	ldr	r3, [pc, #108]	; (cd04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x600>)
    cc96:	4a19      	ldr	r2, [pc, #100]	; (ccfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f8>)
    cc98:	f240 1167 	movw	r1, #359	; 0x167
    cc9c:	4818      	ldr	r0, [pc, #96]	; (cd00 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>)
    cc9e:	f003 fe8f 	bl	109c0 <__assert_func>
	return __b;
    cca2:	ab0f      	add	r3, sp, #60	; 0x3c
    cca4:	e7b0      	b.n	cc08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x504>
	return __b;
    cca6:	ab10      	add	r3, sp, #64	; 0x40
    cca8:	e7b4      	b.n	cc14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x510>
  for (int b = 0; b < batches; ++b) {
    ccaa:	f10b 0b01 	add.w	fp, fp, #1
    ccae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccb0:	459b      	cmp	fp, r3
    ccb2:	da01      	bge.n	ccb8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b4>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
    ccb4:	2500      	movs	r5, #0
    ccb6:	e7b4      	b.n	cc22 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
    if (size_ > kMaxSmallSize) {
    ccb8:	9b46      	ldr	r3, [sp, #280]	; 0x118
    ccba:	2b05      	cmp	r3, #5
    ccbc:	dd03      	ble.n	ccc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
      delete[] dims_pointer_;
    ccbe:	9847      	ldr	r0, [sp, #284]	; 0x11c
    ccc0:	b108      	cbz	r0, ccc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
    ccc2:	f009 fa55 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    ccc6:	9b40      	ldr	r3, [sp, #256]	; 0x100
    ccc8:	2b05      	cmp	r3, #5
    ccca:	dd03      	ble.n	ccd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
      delete[] dims_pointer_;
    cccc:	9841      	ldr	r0, [sp, #260]	; 0x104
    ccce:	b108      	cbz	r0, ccd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d0>
    ccd0:	f009 fa4e 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    ccd4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    ccd6:	2b05      	cmp	r3, #5
    ccd8:	dd03      	ble.n	cce2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      delete[] dims_pointer_;
    ccda:	983b      	ldr	r0, [sp, #236]	; 0xec
    ccdc:	b108      	cbz	r0, cce2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
    ccde:	f009 fa47 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    cce2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    cce4:	2b05      	cmp	r3, #5
    cce6:	dd03      	ble.n	ccf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
      delete[] dims_pointer_;
    cce8:	9835      	ldr	r0, [sp, #212]	; 0xd4
    ccea:	b108      	cbz	r0, ccf0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ec>
    ccec:	f009 fa40 	bl	16170 <_ZdaPv>
  return kTfLiteOk;
    ccf0:	2000      	movs	r0, #0
      break;
    ccf2:	e559      	b.n	c7a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
    ccf4:	c0000001 	.word	0xc0000001
    ccf8:	0006b2b0 	.word	0x0006b2b0
    ccfc:	0006b2c0 	.word	0x0006b2c0
    cd00:	0006b318 	.word	0x0006b318
    cd04:	0006b374 	.word	0x0006b374

0000cd08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
// A FixedPoint multiplication is just a
// SaturatingRoundingDoublingHighMul operation on the underlying
// raw integer values. The IntegerBits simply add up, as is obvious
// from the fact that the range is [-2^IntegerBits, 2^IntegerBits).
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cd08:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cd0a:	4288      	cmp	r0, r1
    cd0c:	d01e      	beq.n	cd4c <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cd0e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cd10:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cd12:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cd14:	fb01 f407 	mul.w	r4, r1, r7
    cd18:	fb00 4403 	mla	r4, r0, r3, r4
    cd1c:	fba1 2300 	umull	r2, r3, r1, r0
    cd20:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cd22:	2a00      	cmp	r2, #0
    cd24:	f173 0100 	sbcs.w	r1, r3, #0
    cd28:	db17      	blt.n	cd5a <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cd2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cd2e:	1852      	adds	r2, r2, r1
    cd30:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cd34:	4611      	mov	r1, r2
    cd36:	4618      	mov	r0, r3
    cd38:	2a00      	cmp	r2, #0
    cd3a:	f173 0400 	sbcs.w	r4, r3, #0
    cd3e:	db0e      	blt.n	cd5e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cd40:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cd42:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cd46:	b995      	cbnz	r5, cd6e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
  return c;
}
    cd48:	bcf0      	pop	{r4, r5, r6, r7}
    cd4a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cd4c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cd50:	d001      	beq.n	cd56 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cd52:	2500      	movs	r5, #0
    cd54:	e7dc      	b.n	cd10 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cd56:	2501      	movs	r5, #1
    cd58:	e7da      	b.n	cd10 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cd5a:	4906      	ldr	r1, [pc, #24]	; (cd74 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cd5c:	e7e7      	b.n	cd2e <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cd5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cd62:	1851      	adds	r1, r2, r1
    cd64:	f04f 0000 	mov.w	r0, #0
    cd68:	eb43 0000 	adc.w	r0, r3, r0
    cd6c:	e7e8      	b.n	cd40 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cd6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cd72:	e7e9      	b.n	cd48 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cd74:	c0000001 	.word	0xc0000001

0000cd78 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cd78:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cd7a:	4288      	cmp	r0, r1
    cd7c:	d01e      	beq.n	cdbc <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cd7e:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    cd80:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    cd82:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    cd84:	fb01 f407 	mul.w	r4, r1, r7
    cd88:	fb00 4403 	mla	r4, r0, r3, r4
    cd8c:	fba1 2300 	umull	r2, r3, r1, r0
    cd90:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cd92:	2a00      	cmp	r2, #0
    cd94:	f173 0100 	sbcs.w	r1, r3, #0
    cd98:	db17      	blt.n	cdca <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    cd9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cd9e:	1852      	adds	r2, r2, r1
    cda0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    cda4:	4611      	mov	r1, r2
    cda6:	4618      	mov	r0, r3
    cda8:	2a00      	cmp	r2, #0
    cdaa:	f173 0400 	sbcs.w	r4, r3, #0
    cdae:	db0e      	blt.n	cdce <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    cdb0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    cdb2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cdb6:	b995      	cbnz	r5, cdde <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    cdb8:	bcf0      	pop	{r4, r5, r6, r7}
    cdba:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cdbc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    cdc0:	d001      	beq.n	cdc6 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    cdc2:	2500      	movs	r5, #0
    cdc4:	e7dc      	b.n	cd80 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    cdc6:	2501      	movs	r5, #1
    cdc8:	e7da      	b.n	cd80 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    cdca:	4906      	ldr	r1, [pc, #24]	; (cde4 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    cdcc:	e7e7      	b.n	cd9e <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    cdce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cdd2:	1851      	adds	r1, r2, r1
    cdd4:	f04f 0000 	mov.w	r0, #0
    cdd8:	eb43 0000 	adc.w	r0, r3, r0
    cddc:	e7e8      	b.n	cdb0 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    cdde:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cde2:	e7e9      	b.n	cdb8 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    cde4:	c0000001 	.word	0xc0000001

0000cde8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    cde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdec:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    cdee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    cdf2:	f007 f828 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cdf6:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    cdf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cdfc:	f007 f823 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce00:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ce02:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
    ce06:	f007 f81e 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce0a:	4601      	mov	r1, r0
    ce0c:	4620      	mov	r0, r4
    ce0e:	f007 f831 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce12:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ce14:	480b      	ldr	r0, [pc, #44]	; (ce44 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_+0x5c>)
    ce16:	f007 f816 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce1a:	4601      	mov	r1, r0
    ce1c:	4620      	mov	r0, r4
    ce1e:	f007 f821 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ce22:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ce24:	2102      	movs	r1, #2
    ce26:	4620      	mov	r0, r4
    ce28:	f007 fe4b 	bl	14ac2 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ce2c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ce2e:	4641      	mov	r1, r8
    ce30:	4638      	mov	r0, r7
    ce32:	f007 fe67 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ce36:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ce38:	4631      	mov	r1, r6
    ce3a:	4628      	mov	r0, r5
    ce3c:	f007 fe62 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce44:	e0000001 	.word	0xe0000001

0000ce48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce4c:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    ce4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ce52:	f006 fff8 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce56:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    ce58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ce5c:	f006 fff3 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce60:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    ce62:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    ce66:	f006 ffee 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce6a:	4601      	mov	r1, r0
    ce6c:	4620      	mov	r0, r4
    ce6e:	f007 f801 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    ce72:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    ce74:	480b      	ldr	r0, [pc, #44]	; (cea4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_+0x5c>)
    ce76:	f006 ffe6 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ce7a:	4601      	mov	r1, r0
    ce7c:	4620      	mov	r0, r4
    ce7e:	f006 fff1 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    ce82:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    ce84:	2101      	movs	r1, #1
    ce86:	4620      	mov	r0, r4
    ce88:	f007 fe1b 	bl	14ac2 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    ce8c:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    ce8e:	4641      	mov	r1, r8
    ce90:	4638      	mov	r0, r7
    ce92:	f007 fe37 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    ce96:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    ce98:	4631      	mov	r1, r6
    ce9a:	4628      	mov	r0, r5
    ce9c:	f007 fe32 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    cea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cea4:	c0000001 	.word	0xc0000001

0000cea8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
    cea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ceac:	4604      	mov	r4, r0
    retval.raw() = Dup<RawType>(x);
    ceae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ceb2:	f006 ffc8 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ceb6:	4601      	mov	r1, r0
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
    ceb8:	4620      	mov	r0, r4
    ceba:	f007 fe34 	bl	14b26 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cebe:	4607      	mov	r7, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cec0:	2000      	movs	r0, #0
    cec2:	f006 ffc0 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cec6:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cec8:	2000      	movs	r0, #0
    ceca:	f006 ffbc 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cece:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
    ced0:	2001      	movs	r0, #1
    ced2:	f006 ffb8 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    ced6:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    ced8:	4629      	mov	r1, r5
    ceda:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cede:	f006 ffb3 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cee2:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cee4:	2101      	movs	r1, #1
    cee6:	4628      	mov	r0, r5
    cee8:	f006 ffb0 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    ceec:	4605      	mov	r5, r0
    ceee:	4641      	mov	r1, r8
    cef0:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cef4:	f006 ffb6 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cef8:	4621      	mov	r1, r4
    cefa:	f006 ffa5 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cefe:	4601      	mov	r1, r0
    cf00:	4628      	mov	r0, r5
    cf02:	f006 ffa5 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cf06:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    cf08:	2100      	movs	r1, #0
    cf0a:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
    cf0e:	f006 ff9d 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cf12:	4605      	mov	r5, r0
    cf14:	4641      	mov	r1, r8
    cf16:	4630      	mov	r0, r6
    cf18:	f006 ffac 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cf1c:	4621      	mov	r1, r4
    cf1e:	f006 ff93 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf22:	4601      	mov	r1, r0
    cf24:	4628      	mov	r0, r5
    cf26:	f006 ff93 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cf2a:	f006 ff8c 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf2e:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    cf30:	2000      	movs	r0, #0
    cf32:	f006 ff88 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf36:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    cf38:	2000      	movs	r0, #0
    cf3a:	f006 ff84 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf3e:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    cf40:	2001      	movs	r0, #1
    cf42:	f006 ff80 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf46:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    cf48:	f8df a0a8 	ldr.w	sl, [pc, #168]	; cff4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x14c>
    cf4c:	4629      	mov	r1, r5
    cf4e:	4650      	mov	r0, sl
    cf50:	f006 ff7a 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf54:	4680      	mov	r8, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    cf56:	2101      	movs	r1, #1
    cf58:	4628      	mov	r0, r5
    cf5a:	f006 ff77 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cf5e:	4605      	mov	r5, r0
    cf60:	4649      	mov	r1, r9
    cf62:	4650      	mov	r0, sl
    cf64:	f006 ff7e 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    cf68:	4621      	mov	r1, r4
    cf6a:	f006 ff6d 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf6e:	4601      	mov	r1, r0
    cf70:	4628      	mov	r0, r5
    cf72:	f006 ff6d 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    cf76:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    cf78:	2100      	movs	r1, #0
    cf7a:	4650      	mov	r0, sl
    cf7c:	f006 ff66 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    cf80:	4605      	mov	r5, r0
    cf82:	4649      	mov	r1, r9
    cf84:	4640      	mov	r0, r8
    cf86:	f006 ff75 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    cf8a:	4621      	mov	r1, r4
    cf8c:	f006 ff5c 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    cf90:	4601      	mov	r1, r0
    cf92:	4628      	mov	r0, r5
    cf94:	f006 ff5c 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    cf98:	f006 ff55 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    cf9c:	4601      	mov	r1, r0
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
    cf9e:	4638      	mov	r0, r7
    cfa0:	f7ff feb2 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cfa4:	4601      	mov	r1, r0
    cfa6:	4630      	mov	r0, r6
    cfa8:	f007 fdd8 	bl	14b5c <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cfac:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    cfae:	2600      	movs	r6, #0
    cfb0:	e017      	b.n	cfe2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x13a>
    F2 half_denominator_times_x = half_denominator * x;
    cfb2:	4621      	mov	r1, r4
    cfb4:	4638      	mov	r0, r7
    cfb6:	f7ff fea7 	bl	cd08 <_ZN8gemmlowpmlIiLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cfba:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    cfbc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    cfc0:	f006 ff41 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    cfc4:	4629      	mov	r1, r5
    cfc6:	f007 fdce 	bl	14b66 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cfca:	4601      	mov	r1, r0
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
    cfcc:	4620      	mov	r0, r4
    cfce:	f7ff fed3 	bl	cd78 <_ZN8gemmlowpmlIiLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    cfd2:	f007 fdd3 	bl	14b7c <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    cfd6:	4601      	mov	r1, r0
    cfd8:	4620      	mov	r0, r4
    cfda:	f007 fdbf 	bl	14b5c <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
    cfde:	4604      	mov	r4, r0
  for (int i = 0; i < 3; i++) {
    cfe0:	3601      	adds	r6, #1
    cfe2:	2e02      	cmp	r6, #2
    cfe4:	dde5      	ble.n	cfb2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
    cfe6:	4620      	mov	r0, r4
    cfe8:	f007 fdbc 	bl	14b64 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
    cfec:	f007 fdca 	bl	14b84 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
}
    cff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cff4:	c3c3c3c4 	.word	0xc3c3c3c4

0000cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    cff8:	b4f0      	push	{r4, r5, r6, r7}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    cffa:	4288      	cmp	r0, r1
    cffc:	d01e      	beq.n	d03c <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x44>
    cffe:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    d000:	17c7      	asrs	r7, r0, #31
  std::int64_t b_64(b);
    d002:	17cb      	asrs	r3, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
    d004:	fb01 f407 	mul.w	r4, r1, r7
    d008:	fb00 4403 	mla	r4, r0, r3, r4
    d00c:	fba1 2300 	umull	r2, r3, r1, r0
    d010:	4423      	add	r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d012:	2a00      	cmp	r2, #0
    d014:	f173 0100 	sbcs.w	r1, r3, #0
    d018:	db17      	blt.n	d04a <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x52>
    d01a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d01e:	1852      	adds	r2, r2, r1
    d020:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    d024:	4611      	mov	r1, r2
    d026:	4618      	mov	r0, r3
    d028:	2a00      	cmp	r2, #0
    d02a:	f173 0400 	sbcs.w	r4, r3, #0
    d02e:	db0e      	blt.n	d04e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x56>
    d030:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    d032:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d036:	b995      	cbnz	r5, d05e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x66>
}
    d038:	bcf0      	pop	{r4, r5, r6, r7}
    d03a:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    d03c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    d040:	d001      	beq.n	d046 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x4e>
    d042:	2500      	movs	r5, #0
    d044:	e7dc      	b.n	d000 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
    d046:	2501      	movs	r5, #1
    d048:	e7da      	b.n	d000 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x8>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    d04a:	4906      	ldr	r1, [pc, #24]	; (d064 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x6c>)
    d04c:	e7e7      	b.n	d01e <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x26>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    d04e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d052:	1851      	adds	r1, r2, r1
    d054:	f04f 0000 	mov.w	r0, #0
    d058:	eb43 0000 	adc.w	r0, r3, r0
    d05c:	e7e8      	b.n	d030 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x38>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    d05e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d062:	e7e9      	b.n	d038 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE+0x40>
    d064:	c0000001 	.word	0xc0000001

0000d068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
    d068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d06c:	4680      	mov	r8, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d06e:	2000      	movs	r0, #0
    d070:	f006 fee9 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d074:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d076:	2000      	movs	r0, #0
    d078:	f006 fee5 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d07c:	4607      	mov	r7, r0
  const IntegerType one = Dup<IntegerType>(1);
    d07e:	2001      	movs	r0, #1
    d080:	f006 fee1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d084:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    d086:	f8df 9124 	ldr.w	r9, [pc, #292]	; d1ac <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x144>
    d08a:	4629      	mov	r1, r5
    d08c:	4648      	mov	r0, r9
    d08e:	f006 fedb 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d092:	4606      	mov	r6, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d094:	2101      	movs	r1, #1
    d096:	4628      	mov	r0, r5
    d098:	f006 fed8 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d09c:	4605      	mov	r5, r0
    d09e:	4639      	mov	r1, r7
    d0a0:	4648      	mov	r0, r9
    d0a2:	f006 fedf 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d0a6:	4621      	mov	r1, r4
    d0a8:	f006 fece 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d0ac:	4601      	mov	r1, r0
    d0ae:	4628      	mov	r0, r5
    d0b0:	f006 fece 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d0b4:	4607      	mov	r7, r0
  return Add(ShiftRight(x, exponent),
    d0b6:	2100      	movs	r1, #0
    d0b8:	4648      	mov	r0, r9
    d0ba:	f006 fec7 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d0be:	4605      	mov	r5, r0
    d0c0:	4639      	mov	r1, r7
    d0c2:	4630      	mov	r0, r6
    d0c4:	f006 fed6 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d0c8:	4621      	mov	r1, r4
    d0ca:	f006 febd 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d0ce:	4601      	mov	r1, r0
    d0d0:	4628      	mov	r0, r5
    d0d2:	f006 febd 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d0d6:	f006 feb6 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0da:	4606      	mov	r6, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d0dc:	2000      	movs	r0, #0
    d0de:	f006 feb2 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0e2:	4605      	mov	r5, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d0e4:	2000      	movs	r0, #0
    d0e6:	f006 feae 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0ea:	4681      	mov	r9, r0
  const IntegerType one = Dup<IntegerType>(1);
    d0ec:	2001      	movs	r0, #1
    d0ee:	f006 feaa 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d0f2:	4604      	mov	r4, r0
  const IntegerType remainder = BitAnd(x, mask);
    d0f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; d1b0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x148>
    d0f8:	4629      	mov	r1, r5
    d0fa:	4650      	mov	r0, sl
    d0fc:	f006 fea4 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d100:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d102:	2101      	movs	r1, #1
    d104:	4628      	mov	r0, r5
    d106:	f006 fea1 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d10a:	4605      	mov	r5, r0
    d10c:	4649      	mov	r1, r9
    d10e:	4650      	mov	r0, sl
    d110:	f006 fea8 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d114:	4621      	mov	r1, r4
    d116:	f006 fe97 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d11a:	4601      	mov	r1, r0
    d11c:	4628      	mov	r0, r5
    d11e:	f006 fe97 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d122:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    d124:	2100      	movs	r1, #0
    d126:	4650      	mov	r0, sl
    d128:	f006 fe90 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d12c:	4605      	mov	r5, r0
    d12e:	4649      	mov	r1, r9
    d130:	4638      	mov	r0, r7
    d132:	f006 fe9f 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d136:	4621      	mov	r1, r4
    d138:	f006 fe86 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d13c:	4601      	mov	r1, r0
    d13e:	4628      	mov	r0, r5
    d140:	f006 fe86 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d144:	f006 fe7f 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d148:	4607      	mov	r7, r0
    d14a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d14e:	f006 fe7a 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d152:	4601      	mov	r1, r0
  F x = a + F::template ConstantPOT<-3>();
    d154:	4640      	mov	r0, r8
    d156:	f007 fd1d 	bl	14b94 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d15a:	4604      	mov	r4, r0
  F x2 = x * x;
    d15c:	4601      	mov	r1, r0
    d15e:	f7ff ff4b 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d162:	4605      	mov	r5, r0
  F x3 = x2 * x;
    d164:	4621      	mov	r1, r4
    d166:	f7ff ff47 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d16a:	4680      	mov	r8, r0
  F x4 = x2 * x2;
    d16c:	4629      	mov	r1, r5
    d16e:	4628      	mov	r0, r5
    d170:	f7ff ff42 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
    d174:	f007 fd4d 	bl	14c12 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
      SaturatingRoundingMultiplyByPOT<-1>(
    d178:	4641      	mov	r1, r8
    d17a:	f007 fd0b 	bl	14b94 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d17e:	4639      	mov	r1, r7
    d180:	f7ff ff3a 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d184:	4629      	mov	r1, r5
    d186:	f007 fd05 	bl	14b94 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d18a:	f007 fd07 	bl	14b9c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>
    d18e:	4601      	mov	r1, r0
  return AddSaturatingIf16Bit(
    d190:	4620      	mov	r0, r4
    d192:	f007 fcff 	bl	14b94 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d196:	4601      	mov	r1, r0
    d198:	4630      	mov	r0, r6
    d19a:	f7ff ff2d 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d19e:	4601      	mov	r1, r0
    d1a0:	4630      	mov	r0, r6
    d1a2:	f007 fd3e 	bl	14c22 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
}
    d1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d1aa:	bf00      	nop
    d1ac:	70f5a894 	.word	0x70f5a894
    d1b0:	2aaaaaab 	.word	0x2aaaaaab

0000d1b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
    d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1b8:	4604      	mov	r4, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
    d1ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    d1be:	f006 fe42 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1c2:	4606      	mov	r6, r0
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
    d1c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d1c8:	f006 fe3d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1cc:	4680      	mov	r8, r0
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
    d1ce:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
    d1d2:	f006 fe38 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1d6:	4601      	mov	r1, r0
    d1d8:	4620      	mov	r0, r4
    d1da:	f006 fe4b 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d1de:	4607      	mov	r7, r0
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
    d1e0:	480b      	ldr	r0, [pc, #44]	; (d210 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_+0x5c>)
    d1e2:	f006 fe30 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d1e6:	4601      	mov	r1, r0
    d1e8:	4620      	mov	r0, r4
    d1ea:	f006 fe3b 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d1ee:	4605      	mov	r5, r0
    IntegerType result = ShiftLeft(x, Exponent);
    d1f0:	2105      	movs	r1, #5
    d1f2:	4620      	mov	r0, r4
    d1f4:	f007 fc65 	bl	14ac2 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>
    d1f8:	4602      	mov	r2, r0
    result = SelectUsingMask(positive_mask, max, result);
    d1fa:	4641      	mov	r1, r8
    d1fc:	4638      	mov	r0, r7
    d1fe:	f007 fc81 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
    d202:	4602      	mov	r2, r0
    result = SelectUsingMask(negative_mask, min, result);
    d204:	4631      	mov	r1, r6
    d206:	4628      	mov	r0, r5
    d208:	f007 fc7c 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
    d20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d210:	fc000001 	.word	0xfc000001

0000d214 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
    d214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d218:	4606      	mov	r6, r0
    retval.raw() = Dup<RawType>(x);
    d21a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    d21e:	f006 fe12 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d222:	4604      	mov	r4, r0
    d224:	2001      	movs	r0, #1
    d226:	f006 fe0e 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d22a:	4601      	mov	r1, r0
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
    d22c:	4620      	mov	r0, r4
    d22e:	f007 fd00 	bl	14c32 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d232:	4601      	mov	r1, r0
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
    d234:	4630      	mov	r0, r6
    d236:	f007 fd00 	bl	14c3a <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d23a:	4621      	mov	r1, r4
    d23c:	f007 fcf9 	bl	14c32 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d240:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
    d242:	f007 fd3e 	bl	14cc2 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    d246:	f7ff ff0f 	bl	d068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
    d24a:	4604      	mov	r4, r0
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
    d24c:	4631      	mov	r1, r6
    d24e:	4628      	mov	r0, r5
    d250:	f007 fcef 	bl	14c32 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
    d254:	4605      	mov	r5, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d256:	2000      	movs	r0, #0
    d258:	f006 fdf5 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d25c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d25e:	2000      	movs	r0, #0
    d260:	f006 fdf1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d264:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d266:	2001      	movs	r0, #1
    d268:	f006 fded 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d26c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d26e:	f8df b428 	ldr.w	fp, [pc, #1064]	; d698 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x484>
    d272:	4641      	mov	r1, r8
    d274:	4658      	mov	r0, fp
    d276:	f006 fde7 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d27a:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d27c:	2101      	movs	r1, #1
    d27e:	4640      	mov	r0, r8
    d280:	f006 fde4 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d284:	4680      	mov	r8, r0
    d286:	4651      	mov	r1, sl
    d288:	4658      	mov	r0, fp
    d28a:	f006 fdeb 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d28e:	4639      	mov	r1, r7
    d290:	f006 fdda 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d294:	4601      	mov	r1, r0
    d296:	4640      	mov	r0, r8
    d298:	f006 fdda 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d29c:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d29e:	2100      	movs	r1, #0
    d2a0:	4658      	mov	r0, fp
    d2a2:	f006 fdd3 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d2a6:	4680      	mov	r8, r0
    d2a8:	4651      	mov	r1, sl
    d2aa:	4648      	mov	r0, r9
    d2ac:	f006 fde2 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d2b0:	4639      	mov	r1, r7
    d2b2:	f006 fdc9 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2b6:	4601      	mov	r1, r0
    d2b8:	4640      	mov	r0, r8
    d2ba:	f006 fdc9 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d2be:	f006 fdc2 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2c2:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
    d2c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    d2c8:	f006 fdbd 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2cc:	4601      	mov	r1, r0
    d2ce:	4628      	mov	r0, r5
    d2d0:	f006 fdba 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d2d4:	f006 fdc0 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d2d8:	4607      	mov	r7, r0
    d2da:	4641      	mov	r1, r8
    d2dc:	4620      	mov	r0, r4
    d2de:	f7ff fe8b 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d2e2:	4601      	mov	r1, r0
    d2e4:	4622      	mov	r2, r4
    d2e6:	4638      	mov	r0, r7
    d2e8:	f007 fc50 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d2ec:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d2ee:	2000      	movs	r0, #0
    d2f0:	f006 fda9 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2f4:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d2f6:	2000      	movs	r0, #0
    d2f8:	f006 fda5 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d2fc:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d2fe:	2001      	movs	r0, #1
    d300:	f006 fda1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d304:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d306:	f8df b394 	ldr.w	fp, [pc, #916]	; d69c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x488>
    d30a:	4641      	mov	r1, r8
    d30c:	4658      	mov	r0, fp
    d30e:	f006 fd9b 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d312:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d314:	2101      	movs	r1, #1
    d316:	4640      	mov	r0, r8
    d318:	f006 fd98 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d31c:	4680      	mov	r8, r0
    d31e:	4651      	mov	r1, sl
    d320:	4658      	mov	r0, fp
    d322:	f006 fd9f 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d326:	4639      	mov	r1, r7
    d328:	f006 fd8e 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d32c:	4601      	mov	r1, r0
    d32e:	4640      	mov	r0, r8
    d330:	f006 fd8e 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d334:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d336:	2100      	movs	r1, #0
    d338:	4658      	mov	r0, fp
    d33a:	f006 fd87 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d33e:	4680      	mov	r8, r0
    d340:	4651      	mov	r1, sl
    d342:	4648      	mov	r0, r9
    d344:	f006 fd96 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d348:	4639      	mov	r1, r7
    d34a:	f006 fd7d 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d34e:	4601      	mov	r1, r0
    d350:	4640      	mov	r0, r8
    d352:	f006 fd7d 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d356:	f006 fd76 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d35a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
    d35c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    d360:	f006 fd71 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d364:	4601      	mov	r1, r0
    d366:	4628      	mov	r0, r5
    d368:	f006 fd6e 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d36c:	f006 fd74 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d370:	4607      	mov	r7, r0
    d372:	4641      	mov	r1, r8
    d374:	4620      	mov	r0, r4
    d376:	f7ff fe3f 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d37a:	4601      	mov	r1, r0
    d37c:	4622      	mov	r2, r4
    d37e:	4638      	mov	r0, r7
    d380:	f007 fc04 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d384:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d386:	2000      	movs	r0, #0
    d388:	f006 fd5d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d38c:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d38e:	2000      	movs	r0, #0
    d390:	f006 fd59 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d394:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d396:	2001      	movs	r0, #1
    d398:	f006 fd55 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d39c:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d39e:	f8df b300 	ldr.w	fp, [pc, #768]	; d6a0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x48c>
    d3a2:	4641      	mov	r1, r8
    d3a4:	4658      	mov	r0, fp
    d3a6:	f006 fd4f 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d3aa:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d3ac:	2101      	movs	r1, #1
    d3ae:	4640      	mov	r0, r8
    d3b0:	f006 fd4c 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d3b4:	4680      	mov	r8, r0
    d3b6:	4651      	mov	r1, sl
    d3b8:	4658      	mov	r0, fp
    d3ba:	f006 fd53 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d3be:	4639      	mov	r1, r7
    d3c0:	f006 fd42 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d3c4:	4601      	mov	r1, r0
    d3c6:	4640      	mov	r0, r8
    d3c8:	f006 fd42 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d3cc:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d3ce:	2100      	movs	r1, #0
    d3d0:	4658      	mov	r0, fp
    d3d2:	f006 fd3b 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d3d6:	4680      	mov	r8, r0
    d3d8:	4651      	mov	r1, sl
    d3da:	4648      	mov	r0, r9
    d3dc:	f006 fd4a 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d3e0:	4639      	mov	r1, r7
    d3e2:	f006 fd31 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d3e6:	4601      	mov	r1, r0
    d3e8:	4640      	mov	r0, r8
    d3ea:	f006 fd31 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d3ee:	f006 fd2a 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d3f2:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
    d3f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    d3f8:	f006 fd25 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d3fc:	4601      	mov	r1, r0
    d3fe:	4628      	mov	r0, r5
    d400:	f006 fd22 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d404:	f006 fd28 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d408:	4607      	mov	r7, r0
    d40a:	4641      	mov	r1, r8
    d40c:	4620      	mov	r0, r4
    d40e:	f7ff fdf3 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d412:	4601      	mov	r1, r0
    d414:	4622      	mov	r2, r4
    d416:	4638      	mov	r0, r7
    d418:	f007 fbb8 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d41c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d41e:	2000      	movs	r0, #0
    d420:	f006 fd11 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d424:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d426:	2000      	movs	r0, #0
    d428:	f006 fd0d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d42c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d42e:	2001      	movs	r0, #1
    d430:	f006 fd09 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d434:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d436:	f8df b26c 	ldr.w	fp, [pc, #620]	; d6a4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x490>
    d43a:	4641      	mov	r1, r8
    d43c:	4658      	mov	r0, fp
    d43e:	f006 fd03 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d442:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d444:	2101      	movs	r1, #1
    d446:	4640      	mov	r0, r8
    d448:	f006 fd00 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d44c:	4680      	mov	r8, r0
    d44e:	4651      	mov	r1, sl
    d450:	4658      	mov	r0, fp
    d452:	f006 fd07 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d456:	4639      	mov	r1, r7
    d458:	f006 fcf6 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d45c:	4601      	mov	r1, r0
    d45e:	4640      	mov	r0, r8
    d460:	f006 fcf6 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d464:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d466:	2100      	movs	r1, #0
    d468:	4658      	mov	r0, fp
    d46a:	f006 fcef 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d46e:	4680      	mov	r8, r0
    d470:	4651      	mov	r1, sl
    d472:	4648      	mov	r0, r9
    d474:	f006 fcfe 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d478:	4639      	mov	r1, r7
    d47a:	f006 fce5 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d47e:	4601      	mov	r1, r0
    d480:	4640      	mov	r0, r8
    d482:	f006 fce5 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d486:	f006 fcde 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d48a:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
    d48c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    d490:	f006 fcd9 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d494:	4601      	mov	r1, r0
    d496:	4628      	mov	r0, r5
    d498:	f006 fcd6 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d49c:	f006 fcdc 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d4a0:	4607      	mov	r7, r0
    d4a2:	4641      	mov	r1, r8
    d4a4:	4620      	mov	r0, r4
    d4a6:	f7ff fda7 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d4aa:	4601      	mov	r1, r0
    d4ac:	4622      	mov	r2, r4
    d4ae:	4638      	mov	r0, r7
    d4b0:	f007 fb6c 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d4b4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d4b6:	2000      	movs	r0, #0
    d4b8:	f006 fcc5 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4bc:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d4be:	2000      	movs	r0, #0
    d4c0:	f006 fcc1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4c4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d4c6:	2001      	movs	r0, #1
    d4c8:	f006 fcbd 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d4cc:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d4ce:	f8df b1d8 	ldr.w	fp, [pc, #472]	; d6a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x494>
    d4d2:	4641      	mov	r1, r8
    d4d4:	4658      	mov	r0, fp
    d4d6:	f006 fcb7 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d4da:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d4dc:	2101      	movs	r1, #1
    d4de:	4640      	mov	r0, r8
    d4e0:	f006 fcb4 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d4e4:	4680      	mov	r8, r0
    d4e6:	4651      	mov	r1, sl
    d4e8:	4658      	mov	r0, fp
    d4ea:	f006 fcbb 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d4ee:	4639      	mov	r1, r7
    d4f0:	f006 fcaa 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d4f4:	4601      	mov	r1, r0
    d4f6:	4640      	mov	r0, r8
    d4f8:	f006 fcaa 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d4fc:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d4fe:	2100      	movs	r1, #0
    d500:	4658      	mov	r0, fp
    d502:	f006 fca3 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d506:	4680      	mov	r8, r0
    d508:	4651      	mov	r1, sl
    d50a:	4648      	mov	r0, r9
    d50c:	f006 fcb2 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d510:	4639      	mov	r1, r7
    d512:	f006 fc99 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d516:	4601      	mov	r1, r0
    d518:	4640      	mov	r0, r8
    d51a:	f006 fc99 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d51e:	f006 fc92 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d522:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
    d524:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d528:	f006 fc8d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d52c:	4601      	mov	r1, r0
    d52e:	4628      	mov	r0, r5
    d530:	f006 fc8a 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d534:	f006 fc90 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d538:	4607      	mov	r7, r0
    d53a:	4641      	mov	r1, r8
    d53c:	4620      	mov	r0, r4
    d53e:	f7ff fd5b 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d542:	4601      	mov	r1, r0
    d544:	4622      	mov	r2, r4
    d546:	4638      	mov	r0, r7
    d548:	f007 fb20 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d54c:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d54e:	2000      	movs	r0, #0
    d550:	f006 fc79 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d554:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d556:	2000      	movs	r0, #0
    d558:	f006 fc75 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d55c:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d55e:	2001      	movs	r0, #1
    d560:	f006 fc71 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d564:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d566:	f8df b144 	ldr.w	fp, [pc, #324]	; d6ac <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x498>
    d56a:	4641      	mov	r1, r8
    d56c:	4658      	mov	r0, fp
    d56e:	f006 fc6b 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d572:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d574:	2101      	movs	r1, #1
    d576:	4640      	mov	r0, r8
    d578:	f006 fc68 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d57c:	4680      	mov	r8, r0
    d57e:	4651      	mov	r1, sl
    d580:	4658      	mov	r0, fp
    d582:	f006 fc6f 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d586:	4639      	mov	r1, r7
    d588:	f006 fc5e 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d58c:	4601      	mov	r1, r0
    d58e:	4640      	mov	r0, r8
    d590:	f006 fc5e 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d594:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d596:	2100      	movs	r1, #0
    d598:	4658      	mov	r0, fp
    d59a:	f006 fc57 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d59e:	4680      	mov	r8, r0
    d5a0:	4651      	mov	r1, sl
    d5a2:	4648      	mov	r0, r9
    d5a4:	f006 fc66 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d5a8:	4639      	mov	r1, r7
    d5aa:	f006 fc4d 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d5ae:	4601      	mov	r1, r0
    d5b0:	4640      	mov	r0, r8
    d5b2:	f006 fc4d 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d5b6:	f006 fc46 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d5ba:	4680      	mov	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
    d5bc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    d5c0:	f006 fc41 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d5c4:	4601      	mov	r1, r0
    d5c6:	4628      	mov	r0, r5
    d5c8:	f006 fc3e 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d5cc:	f006 fc44 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d5d0:	4607      	mov	r7, r0
    d5d2:	4641      	mov	r1, r8
    d5d4:	4620      	mov	r0, r4
    d5d6:	f7ff fd0f 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d5da:	4601      	mov	r1, r0
    d5dc:	4622      	mov	r2, r4
    d5de:	4638      	mov	r0, r7
    d5e0:	f007 fad4 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d5e4:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    d5e6:	2000      	movs	r0, #0
    d5e8:	f006 fc2d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d5ec:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    d5ee:	2000      	movs	r0, #0
    d5f0:	f006 fc29 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d5f4:	4682      	mov	sl, r0
  const IntegerType one = Dup<IntegerType>(1);
    d5f6:	2001      	movs	r0, #1
    d5f8:	f006 fc25 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d5fc:	4607      	mov	r7, r0
  const IntegerType remainder = BitAnd(x, mask);
    d5fe:	4641      	mov	r1, r8
    d600:	20f2      	movs	r0, #242	; 0xf2
    d602:	f006 fc21 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d606:	4681      	mov	r9, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    d608:	2101      	movs	r1, #1
    d60a:	4640      	mov	r0, r8
    d60c:	f006 fc1e 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d610:	4680      	mov	r8, r0
    d612:	4651      	mov	r1, sl
    d614:	20f2      	movs	r0, #242	; 0xf2
    d616:	f006 fc25 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    d61a:	4639      	mov	r1, r7
    d61c:	f006 fc14 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d620:	4601      	mov	r1, r0
    d622:	4640      	mov	r0, r8
    d624:	f006 fc14 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    d628:	4682      	mov	sl, r0
  return Add(ShiftRight(x, exponent),
    d62a:	2100      	movs	r1, #0
    d62c:	20f2      	movs	r0, #242	; 0xf2
    d62e:	f006 fc0d 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    d632:	4680      	mov	r8, r0
    d634:	4651      	mov	r1, sl
    d636:	4648      	mov	r0, r9
    d638:	f006 fc1c 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    d63c:	4639      	mov	r1, r7
    d63e:	f006 fc03 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d642:	4601      	mov	r1, r0
    d644:	4640      	mov	r0, r8
    d646:	f006 fc03 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    retval.raw() = Dup<RawType>(x);
    d64a:	f006 fbfc 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d64e:	4607      	mov	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
    d650:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d654:	f006 fbf7 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d658:	4601      	mov	r1, r0
    d65a:	4628      	mov	r0, r5
    d65c:	f006 fbf4 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    d660:	f006 fbfa 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
    d664:	4605      	mov	r5, r0
    d666:	4639      	mov	r1, r7
    d668:	4620      	mov	r0, r4
    d66a:	f7ff fcc5 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    d66e:	4601      	mov	r1, r0
    d670:	4622      	mov	r2, r4
    d672:	4628      	mov	r0, r5
    d674:	f007 fa8a 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
    d678:	4604      	mov	r4, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d67a:	4630      	mov	r0, r6
    d67c:	f007 fb1d 	bl	14cba <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>
    d680:	4605      	mov	r5, r0
    retval.raw() = Dup<RawType>(x);
    d682:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    d686:	f006 fbde 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    d68a:	4601      	mov	r1, r0
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
    d68c:	4622      	mov	r2, r4
    d68e:	4628      	mov	r0, r5
    d690:	f007 fa7c 	bl	14b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
}
    d694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d698:	63afbe7b 	.word	0x63afbe7b
    d69c:	4da2cbf2 	.word	0x4da2cbf2
    d6a0:	2f16ac6c 	.word	0x2f16ac6c
    d6a4:	1152aaa4 	.word	0x1152aaa4
    d6a8:	02582ab7 	.word	0x02582ab7
    d6ac:	000afe11 	.word	0x000afe11

0000d6b0 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
    d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6b4:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d6b6:	694f      	ldr	r7, [r1, #20]
    d6b8:	b35f      	cbz	r7, d712 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d6ba:	4604      	mov	r4, r0
    d6bc:	460d      	mov	r5, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d6be:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d6c2:	f1b8 0f00 	cmp.w	r8, #0
    d6c6:	d026      	beq.n	d716 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x66>
  const OpDataPooling* data =
      static_cast<const OpDataPooling*>(node->user_data);

  const TfLiteEvalTensor* input =
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d6c8:	4b23      	ldr	r3, [pc, #140]	; (d758 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d6ca:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d6cc:	b328      	cbz	r0, d71a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d6ce:	b335      	cbz	r5, d71e <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d6d0:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d6d2:	682b      	ldr	r3, [r5, #0]
    d6d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d6d8:	6859      	ldr	r1, [r3, #4]
    d6da:	4790      	blx	r2
    d6dc:	4606      	mov	r6, r0
  TfLiteEvalTensor* output =
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d6de:	4b1f      	ldr	r3, [pc, #124]	; (d75c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d6e0:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d6e2:	b1f4      	cbz	r4, d722 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d6e4:	b1fd      	cbz	r5, d726 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d6e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d6e8:	686b      	ldr	r3, [r5, #4]
    d6ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d6ee:	6859      	ldr	r1, [r3, #4]
    d6f0:	4620      	mov	r0, r4
    d6f2:	4790      	blx	r2

  switch (input->type) {
    d6f4:	7a33      	ldrb	r3, [r6, #8]
    d6f6:	2b01      	cmp	r3, #1
    d6f8:	d017      	beq.n	d72a <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d6fa:	2b09      	cmp	r3, #9
    d6fc:	d021      	beq.n	d742 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
      break;
    case kTfLiteInt8:
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
    d6fe:	6965      	ldr	r5, [r4, #20]
    d700:	4618      	mov	r0, r3
    d702:	f7fb fdeb 	bl	92dc <TfLiteTypeGetName>
    d706:	4602      	mov	r2, r0
    d708:	4915      	ldr	r1, [pc, #84]	; (d760 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d70a:	4620      	mov	r0, r4
    d70c:	47a8      	blx	r5
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    d70e:	2001      	movs	r0, #1
    d710:	e014      	b.n	d73c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d712:	f008 fd42 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d716:	f008 fd40 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    d71a:	f008 fd3e 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    d71e:	f008 fd3c 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    d722:	f008 fd3a 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    d726:	f008 fd38 	bl	1619a <abort>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
    d72a:	9001      	str	r0, [sp, #4]
    d72c:	9600      	str	r6, [sp, #0]
    d72e:	4643      	mov	r3, r8
    d730:	463a      	mov	r2, r7
    d732:	4629      	mov	r1, r5
    d734:	4620      	mov	r0, r4
    d736:	f007 fcf3 	bl	15120 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  }
  return kTfLiteOk;
    d73a:	2000      	movs	r0, #0
}
    d73c:	b002      	add	sp, #8
    d73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
    d742:	9001      	str	r0, [sp, #4]
    d744:	9600      	str	r6, [sp, #0]
    d746:	4643      	mov	r3, r8
    d748:	463a      	mov	r2, r7
    d74a:	4629      	mov	r1, r5
    d74c:	4620      	mov	r0, r4
    d74e:	f008 f884 	bl	1585a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
    d752:	2000      	movs	r0, #0
      break;
    d754:	e7f2      	b.n	d73c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d756:	bf00      	nop
    d758:	0006b8a4 	.word	0x0006b8a4
    d75c:	0006b8a8 	.word	0x0006b8a8
    d760:	0006b7fc 	.word	0x0006b7fc

0000d764 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
    d764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d768:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d76a:	694f      	ldr	r7, [r1, #20]
    d76c:	b35f      	cbz	r7, d7c6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x62>
    d76e:	4604      	mov	r4, r0
    d770:	460d      	mov	r5, r1
  TFLITE_DCHECK(node->user_data != nullptr);
    d772:	f8d1 8010 	ldr.w	r8, [r1, #16]
    d776:	f1b8 0f00 	cmp.w	r8, #0
    d77a:	d026      	beq.n	d7ca <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x66>
      micro::GetEvalInput(context, node, kPoolingInputTensor);
    d77c:	4b23      	ldr	r3, [pc, #140]	; (d80c <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
    d77e:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d780:	b328      	cbz	r0, d7ce <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6a>
  TFLITE_DCHECK(node != nullptr);
    d782:	b335      	cbz	r5, d7d2 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x6e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    d784:	6d42      	ldr	r2, [r0, #84]	; 0x54
    d786:	682b      	ldr	r3, [r5, #0]
    d788:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d78c:	6859      	ldr	r1, [r3, #4]
    d78e:	4790      	blx	r2
    d790:	4606      	mov	r6, r0
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
    d792:	4b1f      	ldr	r3, [pc, #124]	; (d810 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xac>)
    d794:	6819      	ldr	r1, [r3, #0]
  TFLITE_DCHECK(context != nullptr);
    d796:	b1f4      	cbz	r4, d7d6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
  TFLITE_DCHECK(node != nullptr);
    d798:	b1fd      	cbz	r5, d7da <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x76>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    d79a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d79c:	686b      	ldr	r3, [r5, #4]
    d79e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d7a2:	6859      	ldr	r1, [r3, #4]
    d7a4:	4620      	mov	r0, r4
    d7a6:	4790      	blx	r2
  switch (input->type) {
    d7a8:	7a33      	ldrb	r3, [r6, #8]
    d7aa:	2b01      	cmp	r3, #1
    d7ac:	d017      	beq.n	d7de <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x7a>
    d7ae:	2b09      	cmp	r3, #9
    d7b0:	d021      	beq.n	d7f6 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x92>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
    d7b2:	6965      	ldr	r5, [r4, #20]
    d7b4:	4618      	mov	r0, r3
    d7b6:	f7fb fd91 	bl	92dc <TfLiteTypeGetName>
    d7ba:	4602      	mov	r2, r0
    d7bc:	4915      	ldr	r1, [pc, #84]	; (d814 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
    d7be:	4620      	mov	r0, r4
    d7c0:	47a8      	blx	r5
      return kTfLiteError;
    d7c2:	2001      	movs	r0, #1
    d7c4:	e014      	b.n	d7f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d7c6:	f008 fce8 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d7ca:	f008 fce6 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    d7ce:	f008 fce4 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    d7d2:	f008 fce2 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    d7d6:	f008 fce0 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    d7da:	f008 fcde 	bl	1619a <abort>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
    d7de:	9001      	str	r0, [sp, #4]
    d7e0:	9600      	str	r6, [sp, #0]
    d7e2:	4643      	mov	r3, r8
    d7e4:	463a      	mov	r2, r7
    d7e6:	4629      	mov	r1, r5
    d7e8:	4620      	mov	r0, r4
    d7ea:	f007 fac8 	bl	14d7e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
    d7ee:	2000      	movs	r0, #0
}
    d7f0:	b002      	add	sp, #8
    d7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
    d7f6:	9001      	str	r0, [sp, #4]
    d7f8:	9600      	str	r6, [sp, #0]
    d7fa:	4643      	mov	r3, r8
    d7fc:	463a      	mov	r2, r7
    d7fe:	4629      	mov	r1, r5
    d800:	4620      	mov	r0, r4
    d802:	f007 fe5b 	bl	154bc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
  return kTfLiteOk;
    d806:	2000      	movs	r0, #0
      break;
    d808:	e7f2      	b.n	d7f0 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x8c>
    d80a:	bf00      	nop
    d80c:	0006b8a4 	.word	0x0006b8a4
    d810:	0006b8a8 	.word	0x0006b8a8
    d814:	0006b820 	.word	0x0006b820

0000d818 <_ZN6tflite24Register_AVERAGE_POOL_2DEv>:
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
}

}  // namespace

TfLiteRegistration Register_AVERAGE_POOL_2D() {
    d818:	b470      	push	{r4, r5, r6}
    d81a:	4606      	mov	r6, r0
          /*prepare=*/PoolingPrepare,
          /*invoke=*/AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    d81c:	4604      	mov	r4, r0
    d81e:	4d05      	ldr	r5, [pc, #20]	; (d834 <_ZN6tflite24Register_AVERAGE_POOL_2DEv+0x1c>)
    d820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    d82c:	4630      	mov	r0, r6
    d82e:	bc70      	pop	{r4, r5, r6}
    d830:	4770      	bx	lr
    d832:	bf00      	nop
    d834:	00017170 	.word	0x00017170

0000d838 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:
      params->filter_width, params->padding, &out_height, &out_width);

  return kTfLiteOk;
}

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
    d838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d83c:	b083      	sub	sp, #12
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d83e:	694f      	ldr	r7, [r1, #20]
    d840:	b34f      	cbz	r7, d896 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x5e>
    d842:	4605      	mov	r5, r0
    d844:	460c      	mov	r4, r1
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
    d846:	690e      	ldr	r6, [r1, #16]
    d848:	b33e      	cbz	r6, d89a <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x62>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
    d84a:	2200      	movs	r2, #0
    d84c:	f006 fa28 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d850:	4680      	mov	r8, r0
    d852:	b320      	cbz	r0, d89e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x66>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
    d854:	2200      	movs	r2, #0
    d856:	4621      	mov	r1, r4
    d858:	4628      	mov	r0, r5
    d85a:	f006 fa40 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d85e:	4681      	mov	r9, r0
    d860:	b350      	cbz	r0, d8b8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x80>

  TF_LITE_ENSURE_STATUS(
    d862:	9600      	str	r6, [sp, #0]
    d864:	4603      	mov	r3, r0
    d866:	4642      	mov	r2, r8
    d868:	4639      	mov	r1, r7
    d86a:	4628      	mov	r0, r5
    d86c:	f007 fa35 	bl	14cda <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
    d870:	4604      	mov	r4, r0
    d872:	b9e8      	cbnz	r0, d8b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
    d874:	f898 3000 	ldrb.w	r3, [r8]
    d878:	2b01      	cmp	r3, #1
    d87a:	d027      	beq.n	d8cc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x94>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
    d87c:	2b09      	cmp	r3, #9
    d87e:	d117      	bne.n	d8b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRangeQuantized(context, params->activation, output,
    d880:	7d39      	ldrb	r1, [r7, #20]
    d882:	f106 0314 	add.w	r3, r6, #20
    d886:	9300      	str	r3, [sp, #0]
    d888:	f106 0310 	add.w	r3, r6, #16
    d88c:	464a      	mov	r2, r9
    d88e:	4628      	mov	r0, r5
    d890:	f7fb ff42 	bl	9718 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
    d894:	e00c      	b.n	d8b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
  TFLITE_DCHECK(node->builtin_data != nullptr);
    d896:	f008 fc80 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    d89a:	f008 fc7e 	bl	1619a <abort>
  TF_LITE_ENSURE(context, input != nullptr);
    d89e:	696c      	ldr	r4, [r5, #20]
    d8a0:	4b0e      	ldr	r3, [pc, #56]	; (d8dc <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
    d8a2:	9300      	str	r3, [sp, #0]
    d8a4:	233a      	movs	r3, #58	; 0x3a
    d8a6:	4a0e      	ldr	r2, [pc, #56]	; (d8e0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d8a8:	490e      	ldr	r1, [pc, #56]	; (d8e4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d8aa:	4628      	mov	r0, r5
    d8ac:	47a0      	blx	r4
    d8ae:	2401      	movs	r4, #1
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
    d8b0:	4620      	mov	r0, r4
    d8b2:	b003      	add	sp, #12
    d8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d8b8:	696c      	ldr	r4, [r5, #20]
    d8ba:	4b0b      	ldr	r3, [pc, #44]	; (d8e8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
    d8bc:	9300      	str	r3, [sp, #0]
    d8be:	233c      	movs	r3, #60	; 0x3c
    d8c0:	4a07      	ldr	r2, [pc, #28]	; (d8e0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
    d8c2:	4908      	ldr	r1, [pc, #32]	; (d8e4 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
    d8c4:	4628      	mov	r0, r5
    d8c6:	47a0      	blx	r4
    d8c8:	2401      	movs	r4, #1
    d8ca:	e7f1      	b.n	d8b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
    d8cc:	f106 021c 	add.w	r2, r6, #28
    d8d0:	f106 0118 	add.w	r1, r6, #24
    d8d4:	7d38      	ldrb	r0, [r7, #20]
    d8d6:	f7fc fe7f 	bl	a5d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
    d8da:	e7e9      	b.n	d8b0 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x78>
    d8dc:	0006b510 	.word	0x0006b510
    d8e0:	0006b84c 	.word	0x0006b84c
    d8e4:	0006aafc 	.word	0x0006aafc
    d8e8:	0006b538 	.word	0x0006b538

0000d8ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
    d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8f0:	b084      	sub	sp, #16
    d8f2:	4604      	mov	r4, r0
    d8f4:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
    d8f6:	2200      	movs	r2, #0
    d8f8:	f006 f9d2 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    d8fc:	b308      	cbz	r0, d942 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
    d8fe:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
    d900:	2200      	movs	r2, #0
    d902:	4639      	mov	r1, r7
    d904:	4620      	mov	r0, r4
    d906:	f006 f9ea 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    d90a:	4606      	mov	r6, r0
    d90c:	b328      	cbz	r0, d95a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x6e>
  return NumElements(t->dims);
    d90e:	f8d5 8008 	ldr.w	r8, [r5, #8]
  for (int i = 0; i < dims->size; ++i) {
    d912:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
    d916:	2201      	movs	r2, #1
    d918:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
    d91a:	f8d8 1000 	ldr.w	r1, [r8]
    d91e:	4561      	cmp	r1, ip
    d920:	dd25      	ble.n	d96e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x82>
    count *= dims->data[i];
    d922:	eb08 018c 	add.w	r1, r8, ip, lsl #2
    d926:	f8d1 e004 	ldr.w	lr, [r1, #4]
    d92a:	4670      	mov	r0, lr
    d92c:	17c1      	asrs	r1, r0, #31
    d92e:	fb02 f101 	mul.w	r1, r2, r1
    d932:	fb0e 1103 	mla	r1, lr, r3, r1
    d936:	fba2 230e 	umull	r2, r3, r2, lr
    d93a:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
    d93c:	f10c 0c01 	add.w	ip, ip, #1
    d940:	e7eb      	b.n	d91a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2e>
  TF_LITE_ENSURE(context, input != nullptr);
    d942:	6965      	ldr	r5, [r4, #20]
    d944:	4b3e      	ldr	r3, [pc, #248]	; (da40 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
    d946:	9300      	str	r3, [sp, #0]
    d948:	2323      	movs	r3, #35	; 0x23
    d94a:	4a3e      	ldr	r2, [pc, #248]	; (da44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d94c:	493e      	ldr	r1, [pc, #248]	; (da48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d94e:	4620      	mov	r0, r4
    d950:	47a8      	blx	r5
    d952:	2001      	movs	r0, #1
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  return kTfLiteOk;
}
    d954:	b004      	add	sp, #16
    d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, output != nullptr);
    d95a:	6965      	ldr	r5, [r4, #20]
    d95c:	4b3b      	ldr	r3, [pc, #236]	; (da4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
    d95e:	9300      	str	r3, [sp, #0]
    d960:	2325      	movs	r3, #37	; 0x25
    d962:	4a38      	ldr	r2, [pc, #224]	; (da44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d964:	4938      	ldr	r1, [pc, #224]	; (da48 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
    d966:	4620      	mov	r0, r4
    d968:	47a8      	blx	r5
    d96a:	2001      	movs	r0, #1
    d96c:	e7f2      	b.n	d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TfLiteIntArray* output_shape = output->dims;
    d96e:	68b0      	ldr	r0, [r6, #8]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    d970:	683b      	ldr	r3, [r7, #0]
    d972:	681b      	ldr	r3, [r3, #0]
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d974:	2b01      	cmp	r3, #1
    d976:	d004      	beq.n	d982 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x96>
  for (int i = 0; i < output_shape->size; ++i) {
    d978:	2300      	movs	r3, #0
  int stretch_dim = -1;
    d97a:	f04f 3cff 	mov.w	ip, #4294967295
  int num_output_elements = 1;
    d97e:	2701      	movs	r7, #1
    d980:	e01b      	b.n	d9ba <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xce>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d982:	6803      	ldr	r3, [r0, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
    d984:	2b01      	cmp	r3, #1
    d986:	d1f7      	bne.n	d978 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      output_shape->size == 1 && output_shape->data[0] == 0) {
    d988:	6843      	ldr	r3, [r0, #4]
    d98a:	2b00      	cmp	r3, #0
    d98c:	d1f4      	bne.n	d978 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
    output_shape->size = 0;
    d98e:	6003      	str	r3, [r0, #0]
    d990:	e7f2      	b.n	d978 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8c>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d992:	6965      	ldr	r5, [r4, #20]
    d994:	f04f 33ff 	mov.w	r3, #4294967295
    d998:	9303      	str	r3, [sp, #12]
    d99a:	f8cd c008 	str.w	ip, [sp, #8]
    d99e:	4b2c      	ldr	r3, [pc, #176]	; (da50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
    d9a0:	9301      	str	r3, [sp, #4]
    d9a2:	4b2c      	ldr	r3, [pc, #176]	; (da54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
    d9a4:	9300      	str	r3, [sp, #0]
    d9a6:	233a      	movs	r3, #58	; 0x3a
    d9a8:	4a26      	ldr	r2, [pc, #152]	; (da44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    d9aa:	492b      	ldr	r1, [pc, #172]	; (da58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    d9ac:	4620      	mov	r0, r4
    d9ae:	47a8      	blx	r5
    d9b0:	2001      	movs	r0, #1
    d9b2:	e7cf      	b.n	d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      num_output_elements *= value;
    d9b4:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < output_shape->size; ++i) {
    d9b8:	3301      	adds	r3, #1
    d9ba:	6801      	ldr	r1, [r0, #0]
    d9bc:	4299      	cmp	r1, r3
    d9be:	dd0a      	ble.n	d9d6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xea>
    int value = output_shape->data[i];
    d9c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
    d9c4:	6849      	ldr	r1, [r1, #4]
    if (value == -1) {
    d9c6:	f1b1 3fff 	cmp.w	r1, #4294967295
    d9ca:	d1f3      	bne.n	d9b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
    d9cc:	f1bc 3fff 	cmp.w	ip, #4294967295
    d9d0:	d1df      	bne.n	d992 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa6>
      stretch_dim = i;
    d9d2:	469c      	mov	ip, r3
    d9d4:	e7f0      	b.n	d9b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  if (stretch_dim != -1) {
    d9d6:	f1bc 3fff 	cmp.w	ip, #4294967295
    d9da:	d006      	beq.n	d9ea <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    d9dc:	fb92 f3f7 	sdiv	r3, r2, r7
    d9e0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    d9e4:	6043      	str	r3, [r0, #4]
    num_output_elements *= output_shape->data[stretch_dim];
    d9e6:	fb03 f707 	mul.w	r7, r3, r7
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    d9ea:	7828      	ldrb	r0, [r5, #0]
    d9ec:	7833      	ldrb	r3, [r6, #0]
    d9ee:	4298      	cmp	r0, r3
    d9f0:	d10f      	bne.n	da12 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x126>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
    d9f2:	4297      	cmp	r7, r2
    d9f4:	d021      	beq.n	da3a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x14e>
    d9f6:	6965      	ldr	r5, [r4, #20]
    d9f8:	9703      	str	r7, [sp, #12]
    d9fa:	9202      	str	r2, [sp, #8]
    d9fc:	4b17      	ldr	r3, [pc, #92]	; (da5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
    d9fe:	9301      	str	r3, [sp, #4]
    da00:	4b17      	ldr	r3, [pc, #92]	; (da60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
    da02:	9300      	str	r3, [sp, #0]
    da04:	2346      	movs	r3, #70	; 0x46
    da06:	4a0f      	ldr	r2, [pc, #60]	; (da44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    da08:	4913      	ldr	r1, [pc, #76]	; (da58 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
    da0a:	4620      	mov	r0, r4
    da0c:	47a8      	blx	r5
    da0e:	2001      	movs	r0, #1
    da10:	e7a0      	b.n	d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
    da12:	6967      	ldr	r7, [r4, #20]
    da14:	f7fb fc62 	bl	92dc <TfLiteTypeGetName>
    da18:	4605      	mov	r5, r0
    da1a:	7830      	ldrb	r0, [r6, #0]
    da1c:	f7fb fc5e 	bl	92dc <TfLiteTypeGetName>
    da20:	9003      	str	r0, [sp, #12]
    da22:	9502      	str	r5, [sp, #8]
    da24:	4b0f      	ldr	r3, [pc, #60]	; (da64 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
    da26:	9301      	str	r3, [sp, #4]
    da28:	4b0f      	ldr	r3, [pc, #60]	; (da68 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
    da2a:	9300      	str	r3, [sp, #0]
    da2c:	2345      	movs	r3, #69	; 0x45
    da2e:	4a05      	ldr	r2, [pc, #20]	; (da44 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
    da30:	490e      	ldr	r1, [pc, #56]	; (da6c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
    da32:	4620      	mov	r0, r4
    da34:	47b8      	blx	r7
    da36:	2001      	movs	r0, #1
    da38:	e78c      	b.n	d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  return kTfLiteOk;
    da3a:	2000      	movs	r0, #0
    da3c:	e78a      	b.n	d954 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    da3e:	bf00      	nop
    da40:	0006b510 	.word	0x0006b510
    da44:	0006b8ac 	.word	0x0006b8ac
    da48:	0006aafc 	.word	0x0006aafc
    da4c:	0006b538 	.word	0x0006b538
    da50:	0006b8fc 	.word	0x0006b8fc
    da54:	0006b900 	.word	0x0006b900
    da58:	0006adbc 	.word	0x0006adbc
    da5c:	0006b90c 	.word	0x0006b90c
    da60:	0006b920 	.word	0x0006b920
    da64:	0006b3d0 	.word	0x0006b3d0
    da68:	0006b3e0 	.word	0x0006b3e0
    da6c:	0006b748 	.word	0x0006b748

0000da70 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	b084      	sub	sp, #16
    da74:	4605      	mov	r5, r0
    da76:	460c      	mov	r4, r1
    da78:	680b      	ldr	r3, [r1, #0]
    da7a:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
    da7c:	2b01      	cmp	r3, #1
    da7e:	d00a      	beq.n	da96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    da80:	2b02      	cmp	r3, #2
    da82:	d008      	beq.n	da96 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
    da84:	6944      	ldr	r4, [r0, #20]
    da86:	4b1a      	ldr	r3, [pc, #104]	; (daf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
    da88:	9300      	str	r3, [sp, #0]
    da8a:	234b      	movs	r3, #75	; 0x4b
    da8c:	4a19      	ldr	r2, [pc, #100]	; (daf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    da8e:	491a      	ldr	r1, [pc, #104]	; (daf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
    da90:	47a0      	blx	r4
    da92:	2001      	movs	r0, #1
    da94:	e011      	b.n	daba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    da96:	6863      	ldr	r3, [r4, #4]
    da98:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    da9a:	2b01      	cmp	r3, #1
    da9c:	d00f      	beq.n	dabe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
    da9e:	696e      	ldr	r6, [r5, #20]
    daa0:	2401      	movs	r4, #1
    daa2:	9403      	str	r4, [sp, #12]
    daa4:	9302      	str	r3, [sp, #8]
    daa6:	4b15      	ldr	r3, [pc, #84]	; (dafc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
    daa8:	9301      	str	r3, [sp, #4]
    daaa:	4b15      	ldr	r3, [pc, #84]	; (db00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
    daac:	9300      	str	r3, [sp, #0]
    daae:	234c      	movs	r3, #76	; 0x4c
    dab0:	4a10      	ldr	r2, [pc, #64]	; (daf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    dab2:	4914      	ldr	r1, [pc, #80]	; (db04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    dab4:	4628      	mov	r0, r5
    dab6:	47b0      	blx	r6
    dab8:	4620      	mov	r0, r4
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
    daba:	b004      	add	sp, #16
    dabc:	bd70      	pop	{r4, r5, r6, pc}
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
    dabe:	4621      	mov	r1, r4
    dac0:	4628      	mov	r0, r5
    dac2:	f7ff ff13 	bl	d8ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    dac6:	2800      	cmp	r0, #0
    dac8:	d0f7      	beq.n	daba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    daca:	696e      	ldr	r6, [r5, #20]
    dacc:	4621      	mov	r1, r4
    dace:	4628      	mov	r0, r5
    dad0:	f7ff ff0c 	bl	d8ec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
    dad4:	2300      	movs	r3, #0
    dad6:	9303      	str	r3, [sp, #12]
    dad8:	9002      	str	r0, [sp, #8]
    dada:	4b0b      	ldr	r3, [pc, #44]	; (db08 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x98>)
    dadc:	9301      	str	r3, [sp, #4]
    dade:	4b0b      	ldr	r3, [pc, #44]	; (db0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
    dae0:	9300      	str	r3, [sp, #0]
    dae2:	234d      	movs	r3, #77	; 0x4d
    dae4:	4a03      	ldr	r2, [pc, #12]	; (daf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
    dae6:	4907      	ldr	r1, [pc, #28]	; (db04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
    dae8:	4628      	mov	r0, r5
    daea:	47b0      	blx	r6
    daec:	2001      	movs	r0, #1
    daee:	e7e4      	b.n	daba <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
    daf0:	0006b934 	.word	0x0006b934
    daf4:	0006b8ac 	.word	0x0006b8ac
    daf8:	0006aafc 	.word	0x0006aafc
    dafc:	0006bb44 	.word	0x0006bb44
    db00:	0006b964 	.word	0x0006b964
    db04:	0006adbc 	.word	0x0006adbc
    db08:	0006b978 	.word	0x0006b978
    db0c:	0006b984 	.word	0x0006b984

0000db10 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
    db10:	b470      	push	{r4, r5, r6}
    db12:	4606      	mov	r6, r0
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    db14:	4604      	mov	r4, r0
    db16:	4d05      	ldr	r5, [pc, #20]	; (db2c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
    db18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    db20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    db24:	4630      	mov	r0, r6
    db26:	bc70      	pop	{r4, r5, r6}
    db28:	4770      	bx	lr
    db2a:	bf00      	nop
    db2c:	000171b0 	.word	0x000171b0

0000db30 <_ZN6tflite16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace

TfLiteRegistration Register_SOFTMAX() {
    db30:	b470      	push	{r4, r5, r6}
    db32:	4606      	mov	r6, r0
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
    db34:	4604      	mov	r4, r0
    db36:	4d05      	ldr	r5, [pc, #20]	; (db4c <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
    db38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    db3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    db3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    db40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    db44:	4630      	mov	r0, r6
    db46:	bc70      	pop	{r4, r5, r6}
    db48:	4770      	bx	lr
    db4a:	bf00      	nop
    db4c:	000171d0 	.word	0x000171d0

0000db50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
    db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db54:	b091      	sub	sp, #68	; 0x44
    db56:	4691      	mov	r9, r2
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
    db58:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    db5c:	68c2      	ldr	r2, [r0, #12]
    db5e:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    db60:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    db62:	680d      	ldr	r5, [r1, #0]
      gemmlowp::FixedPoint<int32_t, kScaledDiffIntegerBits>;
  using FixedPointAccum =
      gemmlowp::FixedPoint<int32_t, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32_t, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
    db64:	1e68      	subs	r0, r5, #1

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
    db66:	2200      	movs	r2, #0
    db68:	e011      	b.n	db8e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    db6a:	f008 fb16 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    db6e:	f008 fb14 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db72:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    db76:	6866      	ldr	r6, [r4, #4]
    db78:	e017      	b.n	dbaa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    db7a:	f008 fb0e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    db7e:	f008 fb0c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    db82:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    db86:	6864      	ldr	r4, [r4, #4]
    if (i != skip_dim) {
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    db88:	42b4      	cmp	r4, r6
    db8a:	d119      	bne.n	dbc0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    db8c:	3201      	adds	r2, #1
    db8e:	4295      	cmp	r5, r2
    db90:	dd18      	ble.n	dbc4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    db92:	4290      	cmp	r0, r2
    db94:	d0fa      	beq.n	db8c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    db96:	2a00      	cmp	r2, #0
    db98:	dbe7      	blt.n	db6a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    db9a:	680c      	ldr	r4, [r1, #0]
    db9c:	42a2      	cmp	r2, r4
    db9e:	dae6      	bge.n	db6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dba0:	2c05      	cmp	r4, #5
    dba2:	dde6      	ble.n	db72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    dba4:	684c      	ldr	r4, [r1, #4]
    dba6:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dbaa:	2a00      	cmp	r2, #0
    dbac:	dbe5      	blt.n	db7a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    dbae:	681c      	ldr	r4, [r3, #0]
    dbb0:	42a2      	cmp	r2, r4
    dbb2:	dae4      	bge.n	db7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dbb4:	2c05      	cmp	r4, #5
    dbb6:	dde4      	ble.n	db82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    dbb8:	685c      	ldr	r4, [r3, #4]
    dbba:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    dbbe:	e7e3      	b.n	db88 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    dbc0:	f008 faeb 	bl	1619a <abort>
  inline int32_t DimensionsCount() const { return size_; }
    dbc4:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dbc6:	2800      	cmp	r0, #0
    dbc8:	db08      	blt.n	dbdc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    dbca:	42a8      	cmp	r0, r5
    dbcc:	da06      	bge.n	dbdc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dbce:	2d05      	cmp	r5, #5
    dbd0:	dd06      	ble.n	dbe0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    dbd2:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    dbd4:	2200      	movs	r2, #0
  int flat_size = 1;
    dbd6:	2401      	movs	r4, #1
    dbd8:	46ac      	mov	ip, r5
    dbda:	e007      	b.n	dbec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dbdc:	f008 fadd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dbe0:	1d0e      	adds	r6, r1, #4
    dbe2:	e7f7      	b.n	dbd4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dbe4:	2501      	movs	r5, #1
    dbe6:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    dbea:	3201      	adds	r2, #1
    dbec:	4594      	cmp	ip, r2
    dbee:	dd04      	ble.n	dbfa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dbf0:	4290      	cmp	r0, r2
    dbf2:	d0f7      	beq.n	dbe4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    dbf4:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    dbf8:	e7f5      	b.n	dbe6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    dbfa:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    dbfc:	2800      	cmp	r0, #0
    dbfe:	db2e      	blt.n	dc5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    dc00:	680a      	ldr	r2, [r1, #0]
    dc02:	4290      	cmp	r0, r2
    dc04:	da2d      	bge.n	dc62 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc06:	2a05      	cmp	r2, #5
    dc08:	dd2d      	ble.n	dc66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    dc0a:	684a      	ldr	r2, [r1, #4]
    dc0c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dc10:	2800      	cmp	r0, #0
    dc12:	db2c      	blt.n	dc6e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    dc14:	6819      	ldr	r1, [r3, #0]
    dc16:	4288      	cmp	r0, r1
    dc18:	da2b      	bge.n	dc72 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc1a:	2905      	cmp	r1, #5
    dc1c:	dd2b      	ble.n	dc76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    dc1e:	6859      	ldr	r1, [r3, #4]
    dc20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc24:	4291      	cmp	r1, r2
    dc26:	d12a      	bne.n	dc7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    dc28:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    dc2a:	2800      	cmp	r0, #0
    dc2c:	db29      	blt.n	dc82 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    dc2e:	6819      	ldr	r1, [r3, #0]
    dc30:	4288      	cmp	r0, r1
    dc32:	da28      	bge.n	dc86 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc34:	2905      	cmp	r1, #5
    dc36:	dd28      	ble.n	dc8a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    dc38:	685b      	ldr	r3, [r3, #4]
    dc3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    dc3e:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    dc40:	429a      	cmp	r2, r3
    dc42:	dc26      	bgt.n	dc92 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    dc44:	ab0f      	add	r3, sp, #60	; 0x3c
    dc46:	f8d3 b000 	ldr.w	fp, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    dc4a:	f04f 0a00 	mov.w	sl, #0
    dc4e:	4642      	mov	r2, r8
    dc50:	46d0      	mov	r8, sl
    dc52:	9702      	str	r7, [sp, #8]
    dc54:	464b      	mov	r3, r9
    dc56:	46d9      	mov	r9, fp
    dc58:	469b      	mov	fp, r3
    dc5a:	4692      	mov	sl, r2
    dc5c:	e15d      	b.n	df1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ca>
    TFLITE_DCHECK_GE(i, 0);
    dc5e:	f008 fa9c 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc62:	f008 fa9a 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc66:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    dc6a:	684a      	ldr	r2, [r1, #4]
    dc6c:	e7d0      	b.n	dc10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    dc6e:	f008 fa94 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc72:	f008 fa92 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc76:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    dc7a:	6849      	ldr	r1, [r1, #4]
    dc7c:	e7d2      	b.n	dc24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    dc7e:	f008 fa8c 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    dc82:	f008 fa8a 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    dc86:	f008 fa88 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dc8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    dc8e:	685b      	ldr	r3, [r3, #4]
    dc90:	e7d5      	b.n	dc3e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    dc92:	ab0e      	add	r3, sp, #56	; 0x38
    dc94:	e7d7      	b.n	dc46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dc96:	f991 2000 	ldrsb.w	r2, [r1]
    dc9a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    dc9e:	3301      	adds	r3, #1
    dca0:	454b      	cmp	r3, r9
    dca2:	da0c      	bge.n	dcbe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    dca4:	fb09 3208 	mla	r2, r9, r8, r3
    dca8:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    dcac:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    dcb0:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    dcb4:	4282      	cmp	r2, r0
    dcb6:	dcee      	bgt.n	dc96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    dcb8:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    dcbc:	e7eb      	b.n	dc96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    dcbe:	2000      	movs	r0, #0
    dcc0:	f006 f8c1 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    dcc4:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dcc6:	2400      	movs	r4, #0
    dcc8:	9f06      	ldr	r7, [sp, #24]
    dcca:	9e02      	ldr	r6, [sp, #8]
    dccc:	e01a      	b.n	dd04 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dcce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dcd2:	d002      	beq.n	dcda <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    dcd4:	f04f 0c00 	mov.w	ip, #0
    dcd8:	e024      	b.n	dd24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    dcda:	f04f 0c01 	mov.w	ip, #1
    dcde:	e021      	b.n	dd24 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dce0:	4993      	ldr	r1, [pc, #588]	; (df30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    dce2:	e02f      	b.n	dd44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dce4:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    dce6:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dcea:	f1bc 0f00 	cmp.w	ip, #0
    dcee:	d13a      	bne.n	dd66 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    dcf0:	f7ff fa90 	bl	d214 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    dcf4:	f006 ffdd 	bl	14cb2 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    dcf8:	4601      	mov	r1, r0
    dcfa:	4628      	mov	r0, r5
    dcfc:	f006 ff95 	bl	14c2a <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    dd00:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    dd02:	3401      	adds	r4, #1
    dd04:	454c      	cmp	r4, r9
    dd06:	da31      	bge.n	dd6c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    dd08:	fb09 4308 	mla	r3, r9, r8, r4
    dd0c:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    dd10:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    dd14:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    dd16:	4296      	cmp	r6, r2
    dd18:	dcf3      	bgt.n	dd02 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    dd1a:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dd1c:	4592      	cmp	sl, r2
    dd1e:	d0d6      	beq.n	dcce <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    dd20:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    dd24:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    dd26:	fb0a f301 	mul.w	r3, sl, r1
    dd2a:	4650      	mov	r0, sl
    dd2c:	17c1      	asrs	r1, r0, #31
    dd2e:	fb02 3101 	mla	r1, r2, r1, r3
    dd32:	fbaa 2302 	umull	r2, r3, sl, r2
    dd36:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dd38:	2a00      	cmp	r2, #0
    dd3a:	f173 0100 	sbcs.w	r1, r3, #0
    dd3e:	dbcf      	blt.n	dce0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    dd40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dd44:	1852      	adds	r2, r2, r1
    dd46:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    dd4a:	4611      	mov	r1, r2
    dd4c:	4618      	mov	r0, r3
    dd4e:	2a00      	cmp	r2, #0
    dd50:	f173 0e00 	sbcs.w	lr, r3, #0
    dd54:	dac6      	bge.n	dce4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    dd56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dd5a:	1851      	adds	r1, r2, r1
    dd5c:	f04f 0000 	mov.w	r0, #0
    dd60:	eb43 0000 	adc.w	r0, r3, r0
    dd64:	e7be      	b.n	dce4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    dd66:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    dd6a:	e7c1      	b.n	dcf0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    dd6c:	4628      	mov	r0, r5
    dd6e:	f006 fe69 	bl	14a44 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    dd72:	f1c0 030c 	rsb	r3, r0, #12
    dd76:	9307      	str	r3, [sp, #28]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    dd78:	fa05 f000 	lsl.w	r0, r5, r0
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    dd7c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    dd80:	f7ff f892 	bl	cea8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    dd84:	9008      	str	r0, [sp, #32]
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
    dd86:	2600      	movs	r6, #0
    dd88:	f8cd 8000 	str.w	r8, [sp]
    dd8c:	4657      	mov	r7, sl
    dd8e:	46ca      	mov	sl, r9
    dd90:	f8cd b004 	str.w	fp, [sp, #4]
    dd94:	e02b      	b.n	ddee <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    dd96:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dd9a:	d001      	beq.n	dda0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    dd9c:	2500      	movs	r5, #0
    dd9e:	e039      	b.n	de14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
    dda0:	2501      	movs	r5, #1
    dda2:	e037      	b.n	de14 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    dda4:	4962      	ldr	r1, [pc, #392]	; (df30 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    dda6:	e045      	b.n	de34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    dda8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ddac:	1851      	adds	r1, r2, r1
    ddae:	f04f 0000 	mov.w	r0, #0
    ddb2:	eb43 0000 	adc.w	r0, r3, r0
    ddb6:	e046      	b.n	de46 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f6>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    ddb8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ddbc:	e048      	b.n	de50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x300>
  assert(exponent >= 0);
    ddbe:	4b5d      	ldr	r3, [pc, #372]	; (df34 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    ddc0:	4a5d      	ldr	r2, [pc, #372]	; (df38 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    ddc2:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ddc6:	485d      	ldr	r0, [pc, #372]	; (df3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    ddc8:	f002 fdfa 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    ddcc:	4b5c      	ldr	r3, [pc, #368]	; (df40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f0>)
    ddce:	4a5a      	ldr	r2, [pc, #360]	; (df38 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    ddd0:	f240 1167 	movw	r1, #359	; 0x167
    ddd4:	4859      	ldr	r0, [pc, #356]	; (df3c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
    ddd6:	f002 fdf3 	bl	109c0 <__assert_func>
	return __b;
    ddda:	ab0c      	add	r3, sp, #48	; 0x30
    dddc:	e089      	b.n	def2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a2>
	return __b;
    ddde:	ab0d      	add	r3, sp, #52	; 0x34
    dde0:	e08e      	b.n	df00 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    dde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    dde6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dde8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    for (int c = 0; c < depth; ++c) {
    ddec:	3601      	adds	r6, #1
    ddee:	4556      	cmp	r6, sl
    ddf0:	f280 808b 	bge.w	df0a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ba>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    ddf4:	9b00      	ldr	r3, [sp, #0]
    ddf6:	fb0a 6403 	mla	r4, sl, r3, r6
    ddfa:	9b01      	ldr	r3, [sp, #4]
    ddfc:	571a      	ldrsb	r2, [r3, r4]
    ddfe:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    de02:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    de04:	9b02      	ldr	r3, [sp, #8]
    de06:	4293      	cmp	r3, r2
    de08:	dceb      	bgt.n	dde2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    de0a:	9b06      	ldr	r3, [sp, #24]
    de0c:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    de0e:	4297      	cmp	r7, r2
    de10:	d0c1      	beq.n	dd96 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    de12:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    de14:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    de16:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    de1a:	fb02 f309 	mul.w	r3, r2, r9
    de1e:	fb07 3101 	mla	r1, r7, r1, r3
    de22:	fba2 2307 	umull	r2, r3, r2, r7
    de26:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    de28:	2a00      	cmp	r2, #0
    de2a:	f173 0100 	sbcs.w	r1, r3, #0
    de2e:	dbb9      	blt.n	dda4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    de30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    de34:	1852      	adds	r2, r2, r1
    de36:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    de3a:	4611      	mov	r1, r2
    de3c:	4618      	mov	r0, r3
    de3e:	2a00      	cmp	r2, #0
    de40:	f173 0c00 	sbcs.w	ip, r3, #0
    de44:	dbb0      	blt.n	dda8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    de46:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    de48:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    de4c:	2d00      	cmp	r5, #0
    de4e:	d1b3      	bne.n	ddb8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    de50:	f7ff f9e0 	bl	d214 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    de54:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    de56:	9808      	ldr	r0, [sp, #32]
    de58:	f7ff f8ce 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    de5c:	4605      	mov	r5, r0
  assert(exponent >= 0);
    de5e:	9b07      	ldr	r3, [sp, #28]
    de60:	f113 090f 	adds.w	r9, r3, #15
    de64:	d4ab      	bmi.n	ddbe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    de66:	f1b9 0f1f 	cmp.w	r9, #31
    de6a:	dcaf      	bgt.n	ddcc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    de6c:	f04f 0b01 	mov.w	fp, #1
    de70:	fa0b f009 	lsl.w	r0, fp, r9
    de74:	3801      	subs	r0, #1
    de76:	f005 ffe6 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    de7a:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    de7c:	2000      	movs	r0, #0
    de7e:	f005 ffe2 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    de82:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    de84:	4658      	mov	r0, fp
    de86:	f005 ffde 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    de8a:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    de8c:	4641      	mov	r1, r8
    de8e:	4628      	mov	r0, r5
    de90:	f005 ffda 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    de94:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    de96:	4659      	mov	r1, fp
    de98:	4640      	mov	r0, r8
    de9a:	f005 ffd7 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    de9e:	4680      	mov	r8, r0
    dea0:	9903      	ldr	r1, [sp, #12]
    dea2:	4628      	mov	r0, r5
    dea4:	f005 ffde 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    dea8:	f8dd b010 	ldr.w	fp, [sp, #16]
    deac:	4659      	mov	r1, fp
    deae:	f005 ffcb 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    deb2:	4601      	mov	r1, r0
    deb4:	4640      	mov	r0, r8
    deb6:	f005 ffcb 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    deba:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    debc:	4649      	mov	r1, r9
    debe:	4628      	mov	r0, r5
    dec0:	f005 ffc4 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    dec4:	4605      	mov	r5, r0
    dec6:	4641      	mov	r1, r8
    dec8:	9805      	ldr	r0, [sp, #20]
    deca:	f005 ffd3 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    dece:	4659      	mov	r1, fp
    ded0:	f005 ffba 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    ded4:	4601      	mov	r1, r0
    ded6:	4628      	mov	r0, r5
    ded8:	f005 ffba 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    dedc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
        const int32_t shifted_output =
    dee0:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    dee2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    dee6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    dee8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    deec:	f6bf af75 	bge.w	ddda <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    def0:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    def2:	4a14      	ldr	r2, [pc, #80]	; (df44 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3f4>)
    def4:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    def6:	681a      	ldr	r2, [r3, #0]
    def8:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
    defc:	f6ff af6f 	blt.w	ddde <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    df00:	681b      	ldr	r3, [r3, #0]
    df02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    df04:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    df08:	e770      	b.n	ddec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29c>
    df0a:	f8dd 8000 	ldr.w	r8, [sp]
    df0e:	46d1      	mov	r9, sl
    df10:	46ba      	mov	sl, r7
    df12:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    df16:	f108 0801 	add.w	r8, r8, #1
    df1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df1c:	4598      	cmp	r8, r3
    df1e:	da04      	bge.n	df2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3da>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    df20:	2380      	movs	r3, #128	; 0x80
    df22:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    df26:	2300      	movs	r3, #0
    df28:	e6ba      	b.n	dca0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
      }
    }
  }
}
    df2a:	b011      	add	sp, #68	; 0x44
    df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df30:	c0000001 	.word	0xc0000001
    df34:	0006b2b0 	.word	0x0006b2b0
    df38:	0006b2c0 	.word	0x0006b2c0
    df3c:	0006b318 	.word	0x0006b318
    df40:	0006b374 	.word	0x0006b374
    df44:	ffff8000 	.word	0xffff8000

0000df48 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
    df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df4c:	b091      	sub	sp, #68	; 0x44
    df4e:	4691      	mov	r9, r2
  const int32_t input_beta_multiplier = params.input_multiplier;
    df50:	f8d0 8008 	ldr.w	r8, [r0, #8]
  const int32_t input_beta_left_shift = params.input_left_shift;
    df54:	68c2      	ldr	r2, [r0, #12]
    df56:	9206      	str	r2, [sp, #24]
  const int diff_min = params.diff_min;
    df58:	6987      	ldr	r7, [r0, #24]
  inline int32_t DimensionsCount() const { return size_; }
    df5a:	680d      	ldr	r5, [r1, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    df5c:	1e68      	subs	r0, r5, #1
  for (int i = 0; i < dims_count; ++i) {
    df5e:	2200      	movs	r2, #0
    df60:	e011      	b.n	df86 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e>
    TFLITE_DCHECK_GE(i, 0);
    df62:	f008 f91a 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    df66:	f008 f918 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df6a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    df6e:	6866      	ldr	r6, [r4, #4]
    df70:	e017      	b.n	dfa2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_GE(i, 0);
    df72:	f008 f912 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    df76:	f008 f910 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df7a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    df7e:	6864      	ldr	r4, [r4, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    df80:	42b4      	cmp	r4, r6
    df82:	d119      	bne.n	dfb8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
  for (int i = 0; i < dims_count; ++i) {
    df84:	3201      	adds	r2, #1
    df86:	4295      	cmp	r5, r2
    df88:	dd18      	ble.n	dfbc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
    if (i != skip_dim) {
    df8a:	4290      	cmp	r0, r2
    df8c:	d0fa      	beq.n	df84 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
    TFLITE_DCHECK_GE(i, 0);
    df8e:	2a00      	cmp	r2, #0
    df90:	dbe7      	blt.n	df62 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a>
    TFLITE_DCHECK_LT(i, size_);
    df92:	680c      	ldr	r4, [r1, #0]
    df94:	42a2      	cmp	r2, r4
    df96:	dae6      	bge.n	df66 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    df98:	2c05      	cmp	r4, #5
    df9a:	dde6      	ble.n	df6a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22>
    df9c:	684c      	ldr	r4, [r1, #4]
    df9e:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    dfa2:	2a00      	cmp	r2, #0
    dfa4:	dbe5      	blt.n	df72 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a>
    TFLITE_DCHECK_LT(i, size_);
    dfa6:	681c      	ldr	r4, [r3, #0]
    dfa8:	42a2      	cmp	r2, r4
    dfaa:	dae4      	bge.n	df76 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dfac:	2c05      	cmp	r4, #5
    dfae:	dde4      	ble.n	df7a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32>
    dfb0:	685c      	ldr	r4, [r3, #4]
    dfb2:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
    dfb6:	e7e3      	b.n	df80 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x38>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    dfb8:	f008 f8ef 	bl	1619a <abort>
  inline int32_t DimensionsCount() const { return size_; }
    dfbc:	680d      	ldr	r5, [r1, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dfbe:	2800      	cmp	r0, #0
    dfc0:	db08      	blt.n	dfd4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    dfc2:	42a8      	cmp	r0, r5
    dfc4:	da06      	bge.n	dfd4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x8c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dfc6:	2d05      	cmp	r5, #5
    dfc8:	dd06      	ble.n	dfd8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x90>
    dfca:	684e      	ldr	r6, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
    dfcc:	2200      	movs	r2, #0
  int flat_size = 1;
    dfce:	2401      	movs	r4, #1
    dfd0:	46ac      	mov	ip, r5
    dfd2:	e007      	b.n	dfe4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x9c>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    dfd4:	f008 f8e1 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    dfd8:	1d0e      	adds	r6, r1, #4
    dfda:	e7f7      	b.n	dfcc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x84>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dfdc:	2501      	movs	r5, #1
    dfde:	fb05 f404 	mul.w	r4, r5, r4
  for (int i = 0; i < dims_count; ++i) {
    dfe2:	3201      	adds	r2, #1
    dfe4:	4594      	cmp	ip, r2
    dfe6:	dd04      	ble.n	dff2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    dfe8:	4290      	cmp	r0, r2
    dfea:	d0f7      	beq.n	dfdc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
    dfec:	f856 5022 	ldr.w	r5, [r6, r2, lsl #2]
    dff0:	e7f5      	b.n	dfde <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
    dff2:	9409      	str	r4, [sp, #36]	; 0x24
    TFLITE_DCHECK_GE(i, 0);
    dff4:	2800      	cmp	r0, #0
    dff6:	db2e      	blt.n	e056 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10e>
    TFLITE_DCHECK_LT(i, size_);
    dff8:	680a      	ldr	r2, [r1, #0]
    dffa:	4290      	cmp	r0, r2
    dffc:	da2d      	bge.n	e05a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    dffe:	2a05      	cmp	r2, #5
    e000:	dd2d      	ble.n	e05e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x116>
    e002:	684a      	ldr	r2, [r1, #4]
    e004:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e008:	2800      	cmp	r0, #0
    e00a:	db2c      	blt.n	e066 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
    TFLITE_DCHECK_LT(i, size_);
    e00c:	6819      	ldr	r1, [r3, #0]
    e00e:	4288      	cmp	r0, r1
    e010:	da2b      	bge.n	e06a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e012:	2905      	cmp	r1, #5
    e014:	dd2b      	ble.n	e06e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
    e016:	6859      	ldr	r1, [r3, #4]
    e018:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e01c:	4291      	cmp	r1, r2
    e01e:	d12a      	bne.n	e076 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e020:	920f      	str	r2, [sp, #60]	; 0x3c
    TFLITE_DCHECK_GE(i, 0);
    e022:	2800      	cmp	r0, #0
    e024:	db29      	blt.n	e07a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
    TFLITE_DCHECK_LT(i, size_);
    e026:	6819      	ldr	r1, [r3, #0]
    e028:	4288      	cmp	r0, r1
    e02a:	da28      	bge.n	e07e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e02c:	2905      	cmp	r1, #5
    e02e:	dd28      	ble.n	e082 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
    e030:	685b      	ldr	r3, [r3, #4]
    e032:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e036:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
    e038:	429a      	cmp	r2, r3
    e03a:	dc26      	bgt.n	e08a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x142>
      return __a;
    e03c:	ab0f      	add	r3, sp, #60	; 0x3c
    e03e:	f8d3 b000 	ldr.w	fp, [r3]
  for (int i = 0; i < outer_size; ++i) {
    e042:	f04f 0a00 	mov.w	sl, #0
    e046:	4642      	mov	r2, r8
    e048:	46d0      	mov	r8, sl
    e04a:	9702      	str	r7, [sp, #8]
    e04c:	464b      	mov	r3, r9
    e04e:	46d9      	mov	r9, fp
    e050:	469b      	mov	fp, r3
    e052:	4692      	mov	sl, r2
    e054:	e158      	b.n	e308 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c0>
    TFLITE_DCHECK_GE(i, 0);
    e056:	f008 f8a0 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e05a:	f008 f89e 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e05e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    e062:	684a      	ldr	r2, [r1, #4]
    e064:	e7d0      	b.n	e008 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
    TFLITE_DCHECK_GE(i, 0);
    e066:	f008 f898 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e06a:	f008 f896 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e06e:	eb03 0180 	add.w	r1, r3, r0, lsl #2
    e072:	6849      	ldr	r1, [r1, #4]
    e074:	e7d2      	b.n	e01c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e076:	f008 f890 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    e07a:	f008 f88e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e07e:	f008 f88c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e082:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    e086:	685b      	ldr	r3, [r3, #4]
    e088:	e7d5      	b.n	e036 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xee>
	return __b;
    e08a:	ab0e      	add	r3, sp, #56	; 0x38
    e08c:	e7d7      	b.n	e03e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e08e:	f991 2000 	ldrsb.w	r2, [r1]
    e092:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    e096:	3301      	adds	r3, #1
    e098:	454b      	cmp	r3, r9
    e09a:	da0c      	bge.n	e0b6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x16e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e09c:	fb09 3208 	mla	r2, r9, r8, r3
    e0a0:	eb0b 0102 	add.w	r1, fp, r2
      if (__a < __b)
    e0a4:	f99d 002b 	ldrsb.w	r0, [sp, #43]	; 0x2b
    e0a8:	f91b 2002 	ldrsb.w	r2, [fp, r2]
    e0ac:	4282      	cmp	r2, r0
    e0ae:	dcee      	bgt.n	e08e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
      return __a;
    e0b0:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
    e0b4:	e7eb      	b.n	e08e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x146>
    retval.raw() = Dup<RawType>(x);
    e0b6:	2000      	movs	r0, #0
    e0b8:	f005 fec5 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    e0bc:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    e0be:	2400      	movs	r4, #0
    e0c0:	9f06      	ldr	r7, [sp, #24]
    e0c2:	9e02      	ldr	r6, [sp, #8]
    e0c4:	e01a      	b.n	e0fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b4>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e0c6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e0ca:	d002      	beq.n	e0d2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x18a>
    e0cc:	f04f 0c00 	mov.w	ip, #0
    e0d0:	e024      	b.n	e11c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
    e0d2:	f04f 0c01 	mov.w	ip, #1
    e0d6:	e021      	b.n	e11c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d4>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e0d8:	4991      	ldr	r1, [pc, #580]	; (e320 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    e0da:	e02f      	b.n	e13c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1f4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e0dc:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e0de:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e0e2:	f1bc 0f00 	cmp.w	ip, #0
    e0e6:	d13a      	bne.n	e15e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x216>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
    e0e8:	f7ff f894 	bl	d214 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e0ec:	f006 fde1 	bl	14cb2 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
    e0f0:	4601      	mov	r1, r0
    e0f2:	4628      	mov	r0, r5
    e0f4:	f006 fd99 	bl	14c2a <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
    e0f8:	4605      	mov	r5, r0
    for (int c = 0; c < depth; ++c) {
    e0fa:	3401      	adds	r4, #1
    e0fc:	454c      	cmp	r4, r9
    e0fe:	da31      	bge.n	e164 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e100:	fb09 4308 	mla	r3, r9, r8, r4
    e104:	f91b 2003 	ldrsb.w	r2, [fp, r3]
    e108:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    e10c:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    e10e:	4296      	cmp	r6, r2
    e110:	dcf3      	bgt.n	e0fa <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    e112:	40ba      	lsls	r2, r7
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e114:	4592      	cmp	sl, r2
    e116:	d0d6      	beq.n	e0c6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x17e>
    e118:	f04f 0c00 	mov.w	ip, #0
  std::int64_t a_64(a);
    e11c:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
    e11e:	fb0a f301 	mul.w	r3, sl, r1
    e122:	4650      	mov	r0, sl
    e124:	17c1      	asrs	r1, r0, #31
    e126:	fb02 3101 	mla	r1, r2, r1, r3
    e12a:	fbaa 2302 	umull	r2, r3, sl, r2
    e12e:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e130:	2a00      	cmp	r2, #0
    e132:	f173 0100 	sbcs.w	r1, r3, #0
    e136:	dbcf      	blt.n	e0d8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x190>
    e138:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e13c:	1852      	adds	r2, r2, r1
    e13e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e142:	4611      	mov	r1, r2
    e144:	4618      	mov	r0, r3
    e146:	2a00      	cmp	r2, #0
    e148:	f173 0e00 	sbcs.w	lr, r3, #0
    e14c:	dac6      	bge.n	e0dc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
    e14e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e152:	1851      	adds	r1, r2, r1
    e154:	f04f 0000 	mov.w	r0, #0
    e158:	eb43 0000 	adc.w	r0, r3, r0
    e15c:	e7be      	b.n	e0dc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x194>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e15e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e162:	e7c1      	b.n	e0e8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a0>
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
    e164:	4628      	mov	r0, r5
    e166:	f006 fc6d 	bl	14a44 <_ZN6tflite17CountLeadingZerosIjEEiT_>
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
    e16a:	f1c0 030c 	rsb	r3, r0, #12
    e16e:	9307      	str	r3, [sp, #28]
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
    e170:	fa05 f000 	lsl.w	r0, r5, r0
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
    e174:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    e178:	f7fe fe96 	bl	cea8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
    e17c:	9008      	str	r0, [sp, #32]
    for (int c = 0; c < depth; ++c) {
    e17e:	2600      	movs	r6, #0
    e180:	f8cd 8000 	str.w	r8, [sp]
    e184:	4657      	mov	r7, sl
    e186:	46ca      	mov	sl, r9
    e188:	f8cd b004 	str.w	fp, [sp, #4]
    e18c:	e029      	b.n	e1e2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e18e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e192:	d001      	beq.n	e198 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x250>
    e194:	2500      	movs	r5, #0
    e196:	e037      	b.n	e208 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
    e198:	2501      	movs	r5, #1
    e19a:	e035      	b.n	e208 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c0>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e19c:	4960      	ldr	r1, [pc, #384]	; (e320 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d8>)
    e19e:	e043      	b.n	e228 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e1a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e1a4:	1851      	adds	r1, r2, r1
    e1a6:	f04f 0000 	mov.w	r0, #0
    e1aa:	eb43 0000 	adc.w	r0, r3, r0
    e1ae:	e044      	b.n	e23a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2f2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e1b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e1b4:	e046      	b.n	e244 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fc>
  assert(exponent >= 0);
    e1b6:	4b5b      	ldr	r3, [pc, #364]	; (e324 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
    e1b8:	4a5b      	ldr	r2, [pc, #364]	; (e328 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    e1ba:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e1be:	485b      	ldr	r0, [pc, #364]	; (e32c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    e1c0:	f002 fbfe 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    e1c4:	4b5a      	ldr	r3, [pc, #360]	; (e330 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
    e1c6:	4a58      	ldr	r2, [pc, #352]	; (e328 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
    e1c8:	f240 1167 	movw	r1, #359	; 0x167
    e1cc:	4857      	ldr	r0, [pc, #348]	; (e32c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
    e1ce:	f002 fbf7 	bl	109c0 <__assert_func>
	return __b;
    e1d2:	ab0c      	add	r3, sp, #48	; 0x30
    e1d4:	e084      	b.n	e2e0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>
	return __b;
    e1d6:	ab0d      	add	r3, sp, #52	; 0x34
    e1d8:	e08a      	b.n	e2f0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a8>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
    e1da:	2380      	movs	r3, #128	; 0x80
    e1dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e1de:	5513      	strb	r3, [r2, r4]
    for (int c = 0; c < depth; ++c) {
    e1e0:	3601      	adds	r6, #1
    e1e2:	4556      	cmp	r6, sl
    e1e4:	f280 8088 	bge.w	e2f8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3b0>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
    e1e8:	9b00      	ldr	r3, [sp, #0]
    e1ea:	fb0a 6403 	mla	r4, sl, r3, r6
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	571a      	ldrsb	r2, [r3, r4]
    e1f2:	f99d 302b 	ldrsb.w	r3, [sp, #43]	; 0x2b
      int32_t input_diff =
    e1f6:	1ad2      	subs	r2, r2, r3
      if (input_diff >= diff_min) {
    e1f8:	9b02      	ldr	r3, [sp, #8]
    e1fa:	4293      	cmp	r3, r2
    e1fc:	dced      	bgt.n	e1da <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x292>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
    e1fe:	9b06      	ldr	r3, [sp, #24]
    e200:	409a      	lsls	r2, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e202:	4297      	cmp	r7, r2
    e204:	d0c3      	beq.n	e18e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x246>
    e206:	2500      	movs	r5, #0
  std::int64_t a_64(a);
    e208:	17d1      	asrs	r1, r2, #31
  std::int64_t b_64(b);
    e20a:	ea4f 79e7 	mov.w	r9, r7, asr #31
  std::int64_t ab_64 = a_64 * b_64;
    e20e:	fb02 f309 	mul.w	r3, r2, r9
    e212:	fb07 3101 	mla	r1, r7, r1, r3
    e216:	fba2 2307 	umull	r2, r3, r2, r7
    e21a:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e21c:	2a00      	cmp	r2, #0
    e21e:	f173 0100 	sbcs.w	r1, r3, #0
    e222:	dbbb      	blt.n	e19c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x254>
    e224:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e228:	1852      	adds	r2, r2, r1
    e22a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e22e:	4611      	mov	r1, r2
    e230:	4618      	mov	r0, r3
    e232:	2a00      	cmp	r2, #0
    e234:	f173 0c00 	sbcs.w	ip, r3, #0
    e238:	dbb2      	blt.n	e1a0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x258>
    e23a:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e23c:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e240:	2d00      	cmp	r5, #0
    e242:	d1b5      	bne.n	e1b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x268>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
    e244:	f7fe ffe6 	bl	d214 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    e248:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
    e24a:	9808      	ldr	r0, [sp, #32]
    e24c:	f7fe fed4 	bl	cff8 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    e250:	4605      	mov	r5, r0
  assert(exponent >= 0);
    e252:	9b07      	ldr	r3, [sp, #28]
    e254:	f113 0917 	adds.w	r9, r3, #23
    e258:	d4ad      	bmi.n	e1b6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x26e>
  assert(exponent <= 31);
    e25a:	f1b9 0f1f 	cmp.w	r9, #31
    e25e:	dcb1      	bgt.n	e1c4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e260:	f04f 0b01 	mov.w	fp, #1
    e264:	fa0b f009 	lsl.w	r0, fp, r9
    e268:	3801      	subs	r0, #1
    e26a:	f005 fdec 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e26e:	4680      	mov	r8, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e270:	2000      	movs	r0, #0
    e272:	f005 fde8 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e276:	9003      	str	r0, [sp, #12]
  const IntegerType one = Dup<IntegerType>(1);
    e278:	4658      	mov	r0, fp
    e27a:	f005 fde4 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e27e:	9004      	str	r0, [sp, #16]
  const IntegerType remainder = BitAnd(x, mask);
    e280:	4641      	mov	r1, r8
    e282:	4628      	mov	r0, r5
    e284:	f005 fde0 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e288:	9005      	str	r0, [sp, #20]
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e28a:	4659      	mov	r1, fp
    e28c:	4640      	mov	r0, r8
    e28e:	f005 fddd 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e292:	4680      	mov	r8, r0
    e294:	9903      	ldr	r1, [sp, #12]
    e296:	4628      	mov	r0, r5
    e298:	f005 fde4 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e29c:	f8dd b010 	ldr.w	fp, [sp, #16]
    e2a0:	4659      	mov	r1, fp
    e2a2:	f005 fdd1 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e2a6:	4601      	mov	r1, r0
    e2a8:	4640      	mov	r0, r8
    e2aa:	f005 fdd1 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e2ae:	4680      	mov	r8, r0
  return Add(ShiftRight(x, exponent),
    e2b0:	4649      	mov	r1, r9
    e2b2:	4628      	mov	r0, r5
    e2b4:	f005 fdca 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e2b8:	4605      	mov	r5, r0
    e2ba:	4641      	mov	r1, r8
    e2bc:	9805      	ldr	r0, [sp, #20]
    e2be:	f005 fdd9 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e2c2:	4659      	mov	r1, fp
    e2c4:	f005 fdc0 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e2c8:	4601      	mov	r1, r0
    e2ca:	4628      	mov	r0, r5
    e2cc:	f005 fdc0 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
            unsat_output +
    e2d0:	3880      	subs	r0, #128	; 0x80
        const int32_t shifted_output =
    e2d2:	900b      	str	r0, [sp, #44]	; 0x2c
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
    e2d4:	237f      	movs	r3, #127	; 0x7f
    e2d6:	930c      	str	r3, [sp, #48]	; 0x30
      if (__b < __a)
    e2d8:	4298      	cmp	r0, r3
    e2da:	f73f af7a 	bgt.w	e1d2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28a>
      return __a;
    e2de:	ab0b      	add	r3, sp, #44	; 0x2c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
    e2e0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    e2e4:	920d      	str	r2, [sp, #52]	; 0x34
      if (__a < __b)
    e2e6:	681a      	ldr	r2, [r3, #0]
    e2e8:	f112 0f80 	cmn.w	r2, #128	; 0x80
    e2ec:	f6ff af73 	blt.w	e1d6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x28e>
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
    e2f0:	681b      	ldr	r3, [r3, #0]
    e2f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e2f4:	5513      	strb	r3, [r2, r4]
    e2f6:	e773      	b.n	e1e0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x298>
    e2f8:	f8dd 8000 	ldr.w	r8, [sp]
    e2fc:	46d1      	mov	r9, sl
    e2fe:	46ba      	mov	sl, r7
    e300:	f8dd b004 	ldr.w	fp, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
    e304:	f108 0801 	add.w	r8, r8, #1
    e308:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e30a:	4598      	cmp	r8, r3
    e30c:	da04      	bge.n	e318 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3d0>
    InputT max_in_row = std::numeric_limits<InputT>::min();
    e30e:	2380      	movs	r3, #128	; 0x80
    e310:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    for (int c = 0; c < depth; ++c) {
    e314:	2300      	movs	r3, #0
    e316:	e6bf      	b.n	e098 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x150>
}
    e318:	b011      	add	sp, #68	; 0x44
    e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e31e:	bf00      	nop
    e320:	c0000001 	.word	0xc0000001
    e324:	0006b2b0 	.word	0x0006b2b0
    e328:	0006b2c0 	.word	0x0006b2c0
    e32c:	0006b318 	.word	0x0006b318
    e330:	0006b374 	.word	0x0006b374

0000e334 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
    e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e338:	b0bf      	sub	sp, #252	; 0xfc
    e33a:	4604      	mov	r4, r0
    e33c:	460d      	mov	r5, r1
    e33e:	4693      	mov	fp, r2
  if (input->type == kTfLiteInt8) {
    e340:	7a03      	ldrb	r3, [r0, #8]
    e342:	2b09      	cmp	r3, #9
    e344:	d152      	bne.n	e3ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xb8>
    if (output->type == kTfLiteInt16) {
    e346:	7a0b      	ldrb	r3, [r1, #8]
    e348:	2b07      	cmp	r3, #7
    e34a:	d027      	beq.n	e39c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x68>
          op_data, tflite::micro::GetTensorShape(input),
    e34c:	4601      	mov	r1, r0
    e34e:	a81e      	add	r0, sp, #120	; 0x78
    e350:	f006 fb4e 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e354:	4620      	mov	r0, r4
    e356:	f005 fd6c 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e35a:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e35c:	4629      	mov	r1, r5
    e35e:	a824      	add	r0, sp, #144	; 0x90
    e360:	f006 fb46 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e364:	4628      	mov	r0, r5
    e366:	f005 fd6a 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
    e36a:	9000      	str	r0, [sp, #0]
    e36c:	ab24      	add	r3, sp, #144	; 0x90
    e36e:	4622      	mov	r2, r4
    e370:	a91e      	add	r1, sp, #120	; 0x78
    e372:	4658      	mov	r0, fp
    e374:	f7ff fde8 	bl	df48 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e378:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e37a:	2b05      	cmp	r3, #5
    e37c:	dd03      	ble.n	e386 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
      delete[] dims_pointer_;
    e37e:	9825      	ldr	r0, [sp, #148]	; 0x94
    e380:	b108      	cbz	r0, e386 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x52>
    e382:	f007 fef5 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e386:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e388:	2b05      	cmp	r3, #5
    e38a:	f340 828b 	ble.w	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e38e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    e390:	2800      	cmp	r0, #0
    e392:	f000 8287 	beq.w	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e396:	f007 feeb 	bl	16170 <_ZdaPv>
    e39a:	e283      	b.n	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
          op_data, tflite::micro::GetTensorShape(input),
    e39c:	4601      	mov	r1, r0
    e39e:	a812      	add	r0, sp, #72	; 0x48
    e3a0:	f006 fb26 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e3a4:	4620      	mov	r0, r4
    e3a6:	f005 fd44 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
    e3aa:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
    e3ac:	4629      	mov	r1, r5
    e3ae:	a818      	add	r0, sp, #96	; 0x60
    e3b0:	f006 fb1e 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e3b4:	4628      	mov	r0, r5
    e3b6:	f005 fd6b 	bl	13e90 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e3ba:	9000      	str	r0, [sp, #0]
    e3bc:	ab18      	add	r3, sp, #96	; 0x60
    e3be:	4622      	mov	r2, r4
    e3c0:	a912      	add	r1, sp, #72	; 0x48
    e3c2:	4658      	mov	r0, fp
    e3c4:	f7ff fbc4 	bl	db50 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
    e3c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e3ca:	2b05      	cmp	r3, #5
    e3cc:	dd03      	ble.n	e3d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
      delete[] dims_pointer_;
    e3ce:	9819      	ldr	r0, [sp, #100]	; 0x64
    e3d0:	b108      	cbz	r0, e3d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xa2>
    e3d2:	f007 fecd 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e3d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e3d8:	2b05      	cmp	r3, #5
    e3da:	f340 8263 	ble.w	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e3de:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e3e0:	2800      	cmp	r0, #0
    e3e2:	f000 825f 	beq.w	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e3e6:	f007 fec3 	bl	16170 <_ZdaPv>
    e3ea:	e25b      	b.n	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
        op_data, tflite::micro::GetTensorShape(input),
    e3ec:	4601      	mov	r1, r0
    e3ee:	a82a      	add	r0, sp, #168	; 0xa8
    e3f0:	f006 fafe 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e3f4:	4620      	mov	r0, r4
    e3f6:	f005 fd45 	bl	13e84 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
    e3fa:	9005      	str	r0, [sp, #20]
        tflite::micro::GetTensorShape(output),
    e3fc:	4629      	mov	r1, r5
    e3fe:	a830      	add	r0, sp, #192	; 0xc0
    e400:	f006 faf6 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
    e404:	4628      	mov	r0, r5
    e406:	f005 fd43 	bl	13e90 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
    e40a:	9006      	str	r0, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
    e40c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e40e:	1e62      	subs	r2, r4, #1
  for (int i = 0; i < dims_count; ++i) {
    e410:	2300      	movs	r3, #0
    e412:	e015      	b.n	e440 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10c>
    TFLITE_DCHECK_GE(i, 0);
    e414:	f007 fec1 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e418:	f007 febf 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e41c:	a93e      	add	r1, sp, #248	; 0xf8
    e41e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e422:	f851 1c4c 	ldr.w	r1, [r1, #-76]
    e426:	e019      	b.n	e45c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x128>
    TFLITE_DCHECK_GE(i, 0);
    e428:	f007 feb7 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e42c:	f007 feb5 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e430:	a83e      	add	r0, sp, #248	; 0xf8
    e432:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    e436:	f850 0c34 	ldr.w	r0, [r0, #-52]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e43a:	4288      	cmp	r0, r1
    e43c:	d119      	bne.n	e472 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x13e>
  for (int i = 0; i < dims_count; ++i) {
    e43e:	3301      	adds	r3, #1
    e440:	429c      	cmp	r4, r3
    e442:	dd18      	ble.n	e476 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x142>
    if (i != skip_dim) {
    e444:	429a      	cmp	r2, r3
    e446:	d0fa      	beq.n	e43e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x10a>
    TFLITE_DCHECK_GE(i, 0);
    e448:	2b00      	cmp	r3, #0
    e44a:	dbe3      	blt.n	e414 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe0>
    TFLITE_DCHECK_LT(i, size_);
    e44c:	992a      	ldr	r1, [sp, #168]	; 0xa8
    e44e:	428b      	cmp	r3, r1
    e450:	dae2      	bge.n	e418 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e452:	2905      	cmp	r1, #5
    e454:	dde2      	ble.n	e41c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xe8>
    e456:	992b      	ldr	r1, [sp, #172]	; 0xac
    e458:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e45c:	2b00      	cmp	r3, #0
    e45e:	dbe3      	blt.n	e428 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf4>
    TFLITE_DCHECK_LT(i, size_);
    e460:	9830      	ldr	r0, [sp, #192]	; 0xc0
    e462:	4283      	cmp	r3, r0
    e464:	dae2      	bge.n	e42c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xf8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e466:	2805      	cmp	r0, #5
    e468:	dde2      	ble.n	e430 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xfc>
    e46a:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e46c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e470:	e7e3      	b.n	e43a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x106>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e472:	f007 fe92 	bl	1619a <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e476:	982a      	ldr	r0, [sp, #168]	; 0xa8
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e478:	2a00      	cmp	r2, #0
    e47a:	db05      	blt.n	e488 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    e47c:	4282      	cmp	r2, r0
    e47e:	da03      	bge.n	e488 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e480:	2805      	cmp	r0, #5
    e482:	dd03      	ble.n	e48c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x158>
    e484:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    e486:	e002      	b.n	e48e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x15a>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e488:	f007 fe87 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e48c:	ac2b      	add	r4, sp, #172	; 0xac
  for (int i = 0; i < dims_count; ++i) {
    e48e:	2300      	movs	r3, #0
  int flat_size = 1;
    e490:	2501      	movs	r5, #1
    e492:	e004      	b.n	e49e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x16a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e494:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    e498:	fb01 f505 	mul.w	r5, r1, r5
  for (int i = 0; i < dims_count; ++i) {
    e49c:	3301      	adds	r3, #1
    e49e:	4298      	cmp	r0, r3
    e4a0:	dd03      	ble.n	e4aa <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x176>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e4a2:	429a      	cmp	r2, r3
    e4a4:	d1f6      	bne.n	e494 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x160>
    e4a6:	2101      	movs	r1, #1
    e4a8:	e7f6      	b.n	e498 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x164>
    e4aa:	950d      	str	r5, [sp, #52]	; 0x34
    TFLITE_DCHECK_GE(i, 0);
    e4ac:	2a00      	cmp	r2, #0
    e4ae:	db2a      	blt.n	e506 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d2>
    TFLITE_DCHECK_LT(i, size_);
    e4b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e4b2:	429a      	cmp	r2, r3
    e4b4:	da29      	bge.n	e50a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1d6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e4b6:	2b05      	cmp	r3, #5
    e4b8:	dd29      	ble.n	e50e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1da>
    e4ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    e4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e4c0:	2a00      	cmp	r2, #0
    e4c2:	db2a      	blt.n	e51a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1e6>
    TFLITE_DCHECK_LT(i, size_);
    e4c4:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e4c6:	428a      	cmp	r2, r1
    e4c8:	da29      	bge.n	e51e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ea>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e4ca:	2905      	cmp	r1, #5
    e4cc:	dd29      	ble.n	e522 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ee>
    e4ce:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e4d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e4d4:	4299      	cmp	r1, r3
    e4d6:	d12a      	bne.n	e52e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fa>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e4d8:	933b      	str	r3, [sp, #236]	; 0xec
    TFLITE_DCHECK_GE(i, 0);
    e4da:	2a00      	cmp	r2, #0
    e4dc:	db29      	blt.n	e532 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1fe>
    TFLITE_DCHECK_LT(i, size_);
    e4de:	9930      	ldr	r1, [sp, #192]	; 0xc0
    e4e0:	428a      	cmp	r2, r1
    e4e2:	da28      	bge.n	e536 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e4e4:	2905      	cmp	r1, #5
    e4e6:	dd28      	ble.n	e53a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x206>
    e4e8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    e4ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    e4ee:	923a      	str	r2, [sp, #232]	; 0xe8
      if (__b < __a)
    e4f0:	4293      	cmp	r3, r2
    e4f2:	dc28      	bgt.n	e546 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x212>
      return __a;
    e4f4:	ab3b      	add	r3, sp, #236	; 0xec
    e4f6:	f8d3 a000 	ldr.w	sl, [r3]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
    e4fa:	f04f 0800 	mov.w	r8, #0
    e4fe:	46c1      	mov	r9, r8
    e500:	46d8      	mov	r8, fp
    e502:	46d3      	mov	fp, sl
    e504:	e1b6      	b.n	e874 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x540>
    TFLITE_DCHECK_GE(i, 0);
    e506:	f007 fe48 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e50a:	f007 fe46 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e50e:	ab3e      	add	r3, sp, #248	; 0xf8
    e510:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    e514:	f853 3c4c 	ldr.w	r3, [r3, #-76]
    e518:	e7d2      	b.n	e4c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x18c>
    TFLITE_DCHECK_GE(i, 0);
    e51a:	f007 fe3e 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e51e:	f007 fe3c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e522:	a93e      	add	r1, sp, #248	; 0xf8
    e524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    e528:	f851 1c34 	ldr.w	r1, [r1, #-52]
    e52c:	e7d2      	b.n	e4d4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1a0>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    e52e:	f007 fe34 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    e532:	f007 fe32 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e536:	f007 fe30 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e53a:	a93e      	add	r1, sp, #248	; 0xf8
    e53c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    e540:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e544:	e7d3      	b.n	e4ee <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1ba>
	return __b;
    e546:	ab3a      	add	r3, sp, #232	; 0xe8
    e548:	e7d5      	b.n	e4f6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1c2>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    for (int c = 0; c < depth; ++c) {
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e54a:	f9b2 2000 	ldrsh.w	r2, [r2]
    e54e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e552:	3301      	adds	r3, #1
    e554:	455b      	cmp	r3, fp
    e556:	da0c      	bge.n	e572 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x23e>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
    e558:	fb0b 3109 	mla	r1, fp, r9, r3
    e55c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
      if (__a < __b)
    e560:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	; 0x3e
    e564:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
    e568:	428c      	cmp	r4, r1
    e56a:	dbee      	blt.n	e54a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
      return __a;
    e56c:	f10d 023e 	add.w	r2, sp, #62	; 0x3e
    e570:	e7eb      	b.n	e54a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x216>
    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    int16_t* exp_results_Q015 = output_data + i * depth;
    e572:	fb0b f309 	mul.w	r3, fp, r9
    e576:	9307      	str	r3, [sp, #28]
    e578:	9a06      	ldr	r2, [sp, #24]
    e57a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e57e:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    e580:	2600      	movs	r6, #0
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
    e582:	46b2      	mov	sl, r6
    e584:	f8cd 9010 	str.w	r9, [sp, #16]
    e588:	e07c      	b.n	e684 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x350>
  int right_shift = shift > 0 ? 0 : -shift;
    e58a:	426d      	negs	r5, r5
    e58c:	e091      	b.n	e6b2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x37e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e58e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    e592:	d001      	beq.n	e598 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x264>
    e594:	2700      	movs	r7, #0
    e596:	e091      	b.n	e6bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
    e598:	2701      	movs	r7, #1
    e59a:	e08f      	b.n	e6bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x388>
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e59c:	49c3      	ldr	r1, [pc, #780]	; (e8ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x578>)
    e59e:	e0a1      	b.n	e6e4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3b0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e5a0:	0fc9      	lsrs	r1, r1, #31
  std::int32_t ab_x2_high32 =
    e5a2:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e5a6:	2f00      	cmp	r7, #0
    e5a8:	f040 80ae 	bne.w	e708 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3d4>
  assert(exponent >= 0);
    e5ac:	2d00      	cmp	r5, #0
    e5ae:	f2c0 80ae 	blt.w	e70e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3da>
  assert(exponent <= 31);
    e5b2:	2d1f      	cmp	r5, #31
    e5b4:	f300 80b2 	bgt.w	e71c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3e8>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
    e5b8:	2701      	movs	r7, #1
    e5ba:	fa07 f005 	lsl.w	r0, r7, r5
    e5be:	3801      	subs	r0, #1
    e5c0:	f005 fc41 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e5c4:	4681      	mov	r9, r0
  const IntegerType zero = Dup<IntegerType>(0);
    e5c6:	2000      	movs	r0, #0
    e5c8:	f005 fc3d 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e5cc:	9008      	str	r0, [sp, #32]
  const IntegerType one = Dup<IntegerType>(1);
    e5ce:	4638      	mov	r0, r7
    e5d0:	f005 fc39 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
    e5d4:	900a      	str	r0, [sp, #40]	; 0x28
  const IntegerType remainder = BitAnd(x, mask);
    e5d6:	4649      	mov	r1, r9
    e5d8:	4620      	mov	r0, r4
    e5da:	f005 fc35 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e5de:	900b      	str	r0, [sp, #44]	; 0x2c
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
    e5e0:	4639      	mov	r1, r7
    e5e2:	4648      	mov	r0, r9
    e5e4:	f005 fc32 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e5e8:	4681      	mov	r9, r0
    e5ea:	9908      	ldr	r1, [sp, #32]
    e5ec:	4620      	mov	r0, r4
    e5ee:	f005 fc39 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
    e5f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    e5f4:	4639      	mov	r1, r7
    e5f6:	f005 fc27 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e5fa:	4601      	mov	r1, r0
    e5fc:	4648      	mov	r0, r9
    e5fe:	f005 fc27 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
    e602:	4681      	mov	r9, r0
  return Add(ShiftRight(x, exponent),
    e604:	4629      	mov	r1, r5
    e606:	4620      	mov	r0, r4
    e608:	f005 fc20 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
    e60c:	4604      	mov	r4, r0
    e60e:	4649      	mov	r1, r9
    e610:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e612:	f005 fc2f 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
    e616:	4639      	mov	r1, r7
    e618:	f005 fc16 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
    e61c:	4601      	mov	r1, r0
    e61e:	4620      	mov	r0, r4
    e620:	f005 fc16 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
  int32_t sym_scaled_diff = scaled_diff + 32767;
    e624:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
    e628:	307f      	adds	r0, #127	; 0x7f
    e62a:	9011      	str	r0, [sp, #68]	; 0x44
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
    e62c:	4ba0      	ldr	r3, [pc, #640]	; (e8b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e62e:	933d      	str	r3, [sp, #244]	; 0xf4
      if (__a < __b)
    e630:	4298      	cmp	r0, r3
    e632:	db7a      	blt.n	e72a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3f6>
      return __a;
    e634:	ab11      	add	r3, sp, #68	; 0x44
               static_cast<int32_t>(32767));
    e636:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e63a:	923c      	str	r2, [sp, #240]	; 0xf0
      if (__b < __a)
    e63c:	681a      	ldr	r2, [r3, #0]
    e63e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e642:	da74      	bge.n	e72e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fa>
    e644:	f9b3 3000 	ldrsh.w	r3, [r3]
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
    e648:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e64c:	11da      	asrs	r2, r3, #7
    e64e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    e652:	b292      	uxth	r2, r2
  assert(index < 512 && "LUT index out of range.");
    e654:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    e658:	d26b      	bcs.n	e732 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x3fe>
  int16_t offset = value & 0x7f;
    e65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  int16_t base = lut[index];
    e65e:	f930 1012 	ldrsh.w	r1, [r0, r2, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e662:	3201      	adds	r2, #1
    e664:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    e668:	1a52      	subs	r2, r2, r1
    e66a:	b212      	sxth	r2, r2
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e66c:	fb03 f302 	mul.w	r3, r3, r2
    e670:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e672:	f343 13cf 	sbfx	r3, r3, #7, #16
    e676:	440b      	add	r3, r1
    e678:	b21b      	sxth	r3, r3
      exp_results_Q015[c] =
    e67a:	9a03      	ldr	r2, [sp, #12]
    e67c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e67e:	5253      	strh	r3, [r2, r1]
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
      sum_of_exps += exp_results_Q015[c];
    e680:	449a      	add	sl, r3
    for (int c = 0; c < depth; ++c) {
    e682:	3601      	adds	r6, #1
    e684:	455e      	cmp	r6, fp
    e686:	da5b      	bge.n	e740 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x40c>
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
    e688:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
      exp_results_Q015[c] =
    e68c:	0072      	lsls	r2, r6, #1
    e68e:	920c      	str	r2, [sp, #48]	; 0x30
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
    e690:	9a04      	ldr	r2, [sp, #16]
    e692:	fb0b 6202 	mla	r2, fp, r2, r6
    e696:	9905      	ldr	r1, [sp, #20]
    e698:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
    e69c:	1ad2      	subs	r2, r2, r3
      input_diff, params.input_multiplier, params.input_left_shift);
    e69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e6a2:	f8d8 500c 	ldr.w	r5, [r8, #12]
  int left_shift = shift > 0 ? shift : 0;
    e6a6:	ea25 71e5 	bic.w	r1, r5, r5, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
    e6aa:	2d00      	cmp	r5, #0
    e6ac:	f77f af6d 	ble.w	e58a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x256>
    e6b0:	2500      	movs	r5, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
    e6b2:	408a      	lsls	r2, r1
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
    e6b4:	4293      	cmp	r3, r2
    e6b6:	f43f af6a 	beq.w	e58e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x25a>
    e6ba:	2700      	movs	r7, #0
  std::int64_t a_64(a);
    e6bc:	4610      	mov	r0, r2
    e6be:	17d1      	asrs	r1, r2, #31
    e6c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  std::int64_t b_64(b);
    e6c4:	17d9      	asrs	r1, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
    e6c6:	fb02 f001 	mul.w	r0, r2, r1
    e6ca:	9909      	ldr	r1, [sp, #36]	; 0x24
    e6cc:	fb03 0101 	mla	r1, r3, r1, r0
    e6d0:	fba2 2303 	umull	r2, r3, r2, r3
    e6d4:	440b      	add	r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
    e6d6:	2a00      	cmp	r2, #0
    e6d8:	f173 0100 	sbcs.w	r1, r3, #0
    e6dc:	f6ff af5e 	blt.w	e59c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x268>
    e6e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
    e6e4:	1852      	adds	r2, r2, r1
    e6e6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    e6ea:	4611      	mov	r1, r2
    e6ec:	461c      	mov	r4, r3
    e6ee:	2a00      	cmp	r2, #0
    e6f0:	f173 0000 	sbcs.w	r0, r3, #0
    e6f4:	f6bf af54 	bge.w	e5a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
    e6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e6fc:	1851      	adds	r1, r2, r1
    e6fe:	f04f 0400 	mov.w	r4, #0
    e702:	eb43 0404 	adc.w	r4, r3, r4
    e706:	e74b      	b.n	e5a0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x26c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
    e708:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    e70c:	e74e      	b.n	e5ac <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x278>
  assert(exponent >= 0);
    e70e:	4b69      	ldr	r3, [pc, #420]	; (e8b4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x580>)
    e710:	4a69      	ldr	r2, [pc, #420]	; (e8b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e712:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e716:	4869      	ldr	r0, [pc, #420]	; (e8bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e718:	f002 f952 	bl	109c0 <__assert_func>
  assert(exponent <= 31);
    e71c:	4b68      	ldr	r3, [pc, #416]	; (e8c0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x58c>)
    e71e:	4a66      	ldr	r2, [pc, #408]	; (e8b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x584>)
    e720:	f240 1167 	movw	r1, #359	; 0x167
    e724:	4865      	ldr	r0, [pc, #404]	; (e8bc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x588>)
    e726:	f002 f94b 	bl	109c0 <__assert_func>
	return __b;
    e72a:	ab3d      	add	r3, sp, #244	; 0xf4
    e72c:	e783      	b.n	e636 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x302>
	return __b;
    e72e:	ab3c      	add	r3, sp, #240	; 0xf0
    e730:	e788      	b.n	e644 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x310>
  assert(index < 512 && "LUT index out of range.");
    e732:	4b64      	ldr	r3, [pc, #400]	; (e8c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e734:	4a64      	ldr	r2, [pc, #400]	; (e8c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e736:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e73a:	4864      	ldr	r0, [pc, #400]	; (e8cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e73c:	f002 f940 	bl	109c0 <__assert_func>
    e740:	f8dd 9010 	ldr.w	r9, [sp, #16]
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
    e744:	4650      	mov	r0, sl
    e746:	f006 f97d 	bl	14a44 <_ZN6tflite17CountLeadingZerosIjEEiT_>
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
    e74a:	4652      	mov	r2, sl
    e74c:	17d3      	asrs	r3, r2, #31
    e74e:	b2c1      	uxtb	r1, r0
    e750:	1e4d      	subs	r5, r1, #1
    e752:	f1a1 0421 	sub.w	r4, r1, #33	; 0x21
    e756:	f1c1 0121 	rsb	r1, r1, #33	; 0x21
    e75a:	fa03 f205 	lsl.w	r2, r3, r5
    e75e:	fa0a f404 	lsl.w	r4, sl, r4
    e762:	4322      	orrs	r2, r4
    e764:	fa2a f101 	lsr.w	r1, sl, r1
    e768:	430a      	orrs	r2, r1
    e76a:	fa0a f305 	lsl.w	r3, sl, r5
    e76e:	f513 5300 	adds.w	r3, r3, #8192	; 0x2000
    e772:	f142 0200 	adc.w	r2, r2, #0
         (1 << 13)) >>
    e776:	0b9b      	lsrs	r3, r3, #14
    e778:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
    e77c:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
    e780:	9310      	str	r3, [sp, #64]	; 0x40
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
    e782:	4a4b      	ldr	r2, [pc, #300]	; (e8b0 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x57c>)
    e784:	9239      	str	r2, [sp, #228]	; 0xe4
      if (__a < __b)
    e786:	4293      	cmp	r3, r2
    e788:	db25      	blt.n	e7d6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a2>
      return __a;
    e78a:	ab10      	add	r3, sp, #64	; 0x40
                 static_cast<int32_t>(32767)));
    e78c:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e790:	9238      	str	r2, [sp, #224]	; 0xe0
      if (__b < __a)
    e792:	681a      	ldr	r2, [r3, #0]
    e794:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    e798:	da1f      	bge.n	e7da <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4a6>
    e79a:	f9b3 2000 	ldrsh.w	r2, [r3]
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
    e79e:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
    e7a2:	11d3      	asrs	r3, r2, #7
    e7a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    e7a8:	b29b      	uxth	r3, r3
  assert(index < 512 && "LUT index out of range.");
    e7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e7ae:	d216      	bcs.n	e7de <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4aa>
  int16_t offset = value & 0x7f;
    e7b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  int16_t base = lut[index];
    e7b4:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
  int16_t slope = lut[index + 1] - lut[index];
    e7b8:	3301      	adds	r3, #1
    e7ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
    e7be:	1b1b      	subs	r3, r3, r4
    e7c0:	b21b      	sxth	r3, r3
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
    e7c2:	fb02 f303 	mul.w	r3, r2, r3
    e7c6:	3340      	adds	r3, #64	; 0x40
  return base + delta;
    e7c8:	f343 13cf 	sbfx	r3, r3, #7, #16
    e7cc:	18e2      	adds	r2, r4, r3
    e7ce:	b212      	sxth	r2, r2

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
    e7d0:	2100      	movs	r1, #0
    e7d2:	465f      	mov	r7, fp
    e7d4:	e01e      	b.n	e814 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4e0>
	return __b;
    e7d6:	ab39      	add	r3, sp, #228	; 0xe4
    e7d8:	e7d8      	b.n	e78c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x458>
	return __b;
    e7da:	ab38      	add	r3, sp, #224	; 0xe0
    e7dc:	e7dd      	b.n	e79a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x466>
  assert(index < 512 && "LUT index out of range.");
    e7de:	4b39      	ldr	r3, [pc, #228]	; (e8c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x590>)
    e7e0:	4a39      	ldr	r2, [pc, #228]	; (e8c8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x594>)
    e7e2:	f44f 71ac 	mov.w	r1, #344	; 0x158
    e7e6:	4839      	ldr	r0, [pc, #228]	; (e8cc <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x598>)
    e7e8:	f002 f8ea 	bl	109c0 <__assert_func>
      uint8_t right_shift = 31 - headroom_plus_one;
      int64_t round = 1 << (right_shift - 1);
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e7ec:	9311      	str	r3, [sp, #68]	; 0x44
                            static_cast<int64_t>(reciprocal_scale_Q015) +
                        round) >>
                       right_shift;
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
    e7ee:	2400      	movs	r4, #0
    e7f0:	9437      	str	r4, [sp, #220]	; 0xdc
      if (__a < __b)
    e7f2:	42a3      	cmp	r3, r4
    e7f4:	db37      	blt.n	e866 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x532>
      return __a;
    e7f6:	ab11      	add	r3, sp, #68	; 0x44
                   static_cast<int32_t>(32767)));
    e7f8:	f647 74ff 	movw	r4, #32767	; 0x7fff
    e7fc:	9436      	str	r4, [sp, #216]	; 0xd8
      if (__b < __a)
    e7fe:	681c      	ldr	r4, [r3, #0]
    e800:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    e804:	da31      	bge.n	e86a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x536>
          std::min(std::max(result, static_cast<int32_t>(0)),
    e806:	681c      	ldr	r4, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
    e808:	9b07      	ldr	r3, [sp, #28]
    e80a:	440b      	add	r3, r1
    e80c:	9d06      	ldr	r5, [sp, #24]
    e80e:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
    e812:	3101      	adds	r1, #1
    e814:	42b9      	cmp	r1, r7
    e816:	da2a      	bge.n	e86e <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x53a>
      uint8_t right_shift = 31 - headroom_plus_one;
    e818:	f1c0 031f 	rsb	r3, r0, #31
    e81c:	b2db      	uxtb	r3, r3
      int64_t round = 1 << (right_shift - 1);
    e81e:	1e5c      	subs	r4, r3, #1
    e820:	2601      	movs	r6, #1
    e822:	40a6      	lsls	r6, r4
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e824:	9c03      	ldr	r4, [sp, #12]
    e826:	f934 4011 	ldrsh.w	r4, [r4, r1, lsl #1]
    e82a:	17e5      	asrs	r5, r4, #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e82c:	fa0f fa82 	sxth.w	sl, r2
    e830:	ea4f 7bea 	mov.w	fp, sl, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
    e834:	fb04 fc0b 	mul.w	ip, r4, fp
    e838:	fb02 cc05 	mla	ip, r2, r5, ip
    e83c:	fba4 450a 	umull	r4, r5, r4, sl
    e840:	4465      	add	r5, ip
                            static_cast<int64_t>(reciprocal_scale_Q015) +
    e842:	19a4      	adds	r4, r4, r6
    e844:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
                        round) >>
    e848:	f1c3 0c20 	rsb	ip, r3, #32
    e84c:	f1b3 0620 	subs.w	r6, r3, #32
    e850:	fa24 f303 	lsr.w	r3, r4, r3
    e854:	fa05 fc0c 	lsl.w	ip, r5, ip
    e858:	ea43 030c 	orr.w	r3, r3, ip
    e85c:	d4c6      	bmi.n	e7ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
    e85e:	fa45 f606 	asr.w	r6, r5, r6
    e862:	4333      	orrs	r3, r6
    e864:	e7c2      	b.n	e7ec <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4b8>
	return __b;
    e866:	ab37      	add	r3, sp, #220	; 0xdc
    e868:	e7c6      	b.n	e7f8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4c4>
	return __b;
    e86a:	ab36      	add	r3, sp, #216	; 0xd8
    e86c:	e7cb      	b.n	e806 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x4d2>
    e86e:	46bb      	mov	fp, r7
  for (int i = 0; i < outer_size; ++i) {
    e870:	f109 0901 	add.w	r9, r9, #1
    e874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e876:	4599      	cmp	r9, r3
    e878:	da06      	bge.n	e888 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x554>
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
    e87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e87e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for (int c = 0; c < depth; ++c) {
    e882:	2300      	movs	r3, #0
    e884:	9805      	ldr	r0, [sp, #20]
    e886:	e665      	b.n	e554 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x220>
    if (size_ > kMaxSmallSize) {
    e888:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    e88a:	2b05      	cmp	r3, #5
    e88c:	dd03      	ble.n	e896 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
      delete[] dims_pointer_;
    e88e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    e890:	b108      	cbz	r0, e896 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x562>
    e892:	f007 fc6d 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    e896:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    e898:	2b05      	cmp	r3, #5
    e89a:	dd03      	ble.n	e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
      delete[] dims_pointer_;
    e89c:	982b      	ldr	r0, [sp, #172]	; 0xac
    e89e:	b108      	cbz	r0, e8a4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x570>
    e8a0:	f007 fc66 	bl	16170 <_ZdaPv>
}
    e8a4:	b03f      	add	sp, #252	; 0xfc
    e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8aa:	bf00      	nop
    e8ac:	c0000001 	.word	0xc0000001
    e8b0:	ffff8000 	.word	0xffff8000
    e8b4:	0006b2b0 	.word	0x0006b2b0
    e8b8:	0006b2c0 	.word	0x0006b2c0
    e8bc:	0006b318 	.word	0x0006b318
    e8c0:	0006b374 	.word	0x0006b374
    e8c4:	0006b9a4 	.word	0x0006b9a4
    e8c8:	0006b9d0 	.word	0x0006b9d0
    e8cc:	0006b1f4 	.word	0x0006b1f4

0000e8d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
    e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8d4:	b0a1      	sub	sp, #132	; 0x84
  TFLITE_DCHECK(context != nullptr);
    e8d6:	2800      	cmp	r0, #0
    e8d8:	d030      	beq.n	e93c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x6c>
    e8da:	460c      	mov	r4, r1
    e8dc:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
    e8de:	2900      	cmp	r1, #0
    e8e0:	d02e      	beq.n	e940 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
  return context->GetEvalTensor(context, node->inputs->data[index]);
    e8e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    e8e4:	680a      	ldr	r2, [r1, #0]
    e8e6:	6851      	ldr	r1, [r2, #4]
    e8e8:	4798      	blx	r3
    e8ea:	4607      	mov	r7, r0
  TFLITE_DCHECK(context != nullptr);
    e8ec:	b356      	cbz	r6, e944 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
    e8ee:	b35c      	cbz	r4, e948 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
  return context->GetEvalTensor(context, node->outputs->data[index]);
    e8f0:	6d73      	ldr	r3, [r6, #84]	; 0x54
    e8f2:	6862      	ldr	r2, [r4, #4]
    e8f4:	6851      	ldr	r1, [r2, #4]
    e8f6:	4630      	mov	r0, r6
    e8f8:	4798      	blx	r3
    e8fa:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
    e8fc:	6924      	ldr	r4, [r4, #16]
    e8fe:	b32c      	cbz	r4, e94c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7c>
  SoftmaxParams op_data = *static_cast<SoftmaxParams*>(node->user_data);
    e900:	ad04      	add	r5, sp, #16
    e902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e90a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e90c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e90e:	e894 0003 	ldmia.w	r4, {r0, r1}
    e912:	e885 0003 	stmia.w	r5, {r0, r1}
  switch (input->type) {
    e916:	7a38      	ldrb	r0, [r7, #8]
    e918:	2807      	cmp	r0, #7
    e91a:	f000 811a 	beq.w	eb52 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e91e:	2809      	cmp	r0, #9
    e920:	f000 8117 	beq.w	eb52 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x282>
    e924:	2801      	cmp	r0, #1
    e926:	d013      	beq.n	e950 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
    e928:	6974      	ldr	r4, [r6, #20]
    e92a:	f7fa fcd7 	bl	92dc <TfLiteTypeGetName>
    e92e:	4602      	mov	r2, r0
    e930:	7a3b      	ldrb	r3, [r7, #8]
    e932:	498c      	ldr	r1, [pc, #560]	; (eb64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>)
    e934:	4630      	mov	r0, r6
    e936:	47a0      	blx	r4
      return kTfLiteError;
    e938:	2001      	movs	r0, #1
    e93a:	e110      	b.n	eb5e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
  TFLITE_DCHECK(context != nullptr);
    e93c:	f007 fc2d 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    e940:	f007 fc2b 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
    e944:	f007 fc29 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
    e948:	f007 fc27 	bl	1619a <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
    e94c:	f007 fc25 	bl	1619a <abort>
          op_data, tflite::micro::GetTensorShape(input),
    e950:	4639      	mov	r1, r7
    e952:	a812      	add	r0, sp, #72	; 0x48
    e954:	f006 f84c 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e958:	4638      	mov	r0, r7
    e95a:	f005 fa60 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
    e95e:	4680      	mov	r8, r0
          tflite::micro::GetTensorShape(output),
    e960:	4649      	mov	r1, r9
    e962:	a818      	add	r0, sp, #96	; 0x60
    e964:	f006 f844 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
    e968:	4648      	mov	r0, r9
    e96a:	f005 fa5e 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
    e96e:	4681      	mov	r9, r0
  inline int32_t DimensionsCount() const { return size_; }
    e970:	9812      	ldr	r0, [sp, #72]	; 0x48
  const int trailing_dim = input_shape.DimensionsCount() - 1;
    e972:	1e44      	subs	r4, r0, #1
  for (int i = 0; i < dims_count; ++i) {
    e974:	2300      	movs	r3, #0
    e976:	e013      	b.n	e9a0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xd0>
    TFLITE_DCHECK_GE(i, 0);
    e978:	f007 fc0f 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e97c:	f007 fc0d 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e980:	aa20      	add	r2, sp, #128	; 0x80
    e982:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e986:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e98a:	e017      	b.n	e9bc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
    TFLITE_DCHECK_GE(i, 0);
    e98c:	f007 fc05 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    e990:	f007 fc03 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e994:	9919      	ldr	r1, [sp, #100]	; 0x64
    e996:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e99a:	4291      	cmp	r1, r2
    e99c:	d11b      	bne.n	e9d6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
  for (int i = 0; i < dims_count; ++i) {
    e99e:	3301      	adds	r3, #1
    e9a0:	4298      	cmp	r0, r3
    e9a2:	dd1a      	ble.n	e9da <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
    if (i != skip_dim) {
    e9a4:	429c      	cmp	r4, r3
    e9a6:	d0fa      	beq.n	e99e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xce>
    TFLITE_DCHECK_GE(i, 0);
    e9a8:	2b00      	cmp	r3, #0
    e9aa:	dbe5      	blt.n	e978 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa8>
    TFLITE_DCHECK_LT(i, size_);
    e9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e9ae:	4293      	cmp	r3, r2
    e9b0:	dae4      	bge.n	e97c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9b2:	2a05      	cmp	r2, #5
    e9b4:	dde4      	ble.n	e980 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
    e9b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e9b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    e9bc:	2b00      	cmp	r3, #0
    e9be:	dbe5      	blt.n	e98c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
    TFLITE_DCHECK_LT(i, size_);
    e9c0:	9918      	ldr	r1, [sp, #96]	; 0x60
    e9c2:	428b      	cmp	r3, r1
    e9c4:	dae4      	bge.n	e990 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    e9c6:	2905      	cmp	r1, #5
    e9c8:	dce4      	bgt.n	e994 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
    e9ca:	a920      	add	r1, sp, #128	; 0x80
    e9cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    e9d0:	f851 1c1c 	ldr.w	r1, [r1, #-28]
    e9d4:	e7e1      	b.n	e99a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
    e9d6:	f007 fbe0 	bl	1619a <abort>
  inline int32_t DimensionsCount() const { return size_; }
    e9da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e9dc:	2c00      	cmp	r4, #0
    e9de:	db08      	blt.n	e9f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    e9e0:	429c      	cmp	r4, r3
    e9e2:	da06      	bge.n	e9f2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x122>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e9e4:	2b05      	cmp	r3, #5
    e9e6:	dd06      	ble.n	e9f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x126>
    e9e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  for (int i = 0; i < dims_count; ++i) {
    e9ea:	2200      	movs	r2, #0
  int flat_size = 1;
    e9ec:	f04f 0a01 	mov.w	sl, #1
    e9f0:	e007      	b.n	ea02 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
    e9f2:	f007 fbd2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
    e9f6:	a813      	add	r0, sp, #76	; 0x4c
    e9f8:	e7f7      	b.n	e9ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    e9fa:	2101      	movs	r1, #1
    e9fc:	fb01 fa0a 	mul.w	sl, r1, sl
  for (int i = 0; i < dims_count; ++i) {
    ea00:	3201      	adds	r2, #1
    ea02:	4293      	cmp	r3, r2
    ea04:	dd04      	ble.n	ea10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
    ea06:	4294      	cmp	r4, r2
    ea08:	d0f7      	beq.n	e9fa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12a>
    ea0a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    ea0e:	e7f5      	b.n	e9fc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x12c>
    TFLITE_DCHECK_GE(i, 0);
    ea10:	2c00      	cmp	r4, #0
    ea12:	db25      	blt.n	ea60 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x190>
    TFLITE_DCHECK_LT(i, size_);
    ea14:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ea16:	429c      	cmp	r4, r3
    ea18:	da24      	bge.n	ea64 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea1a:	2b05      	cmp	r3, #5
    ea1c:	dd24      	ble.n	ea68 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x198>
    ea1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ea20:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    TFLITE_DCHECK_GE(i, 0);
    ea24:	2c00      	cmp	r4, #0
    ea26:	db25      	blt.n	ea74 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a4>
    TFLITE_DCHECK_LT(i, size_);
    ea28:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ea2a:	429c      	cmp	r4, r3
    ea2c:	da24      	bge.n	ea78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea2e:	2b05      	cmp	r3, #5
    ea30:	dd24      	ble.n	ea7c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    ea32:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ea34:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ea38:	4293      	cmp	r3, r2
    ea3a:	d125      	bne.n	ea88 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1b8>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ea3c:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_GE(i, 0);
    ea3e:	2c00      	cmp	r4, #0
    ea40:	db24      	blt.n	ea8c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1bc>
    TFLITE_DCHECK_LT(i, size_);
    ea42:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ea44:	429c      	cmp	r4, r3
    ea46:	da23      	bge.n	ea90 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea48:	2b05      	cmp	r3, #5
    ea4a:	dd23      	ble.n	ea94 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    ea4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ea4e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
    ea52:	931e      	str	r3, [sp, #120]	; 0x78
      if (__b < __a)
    ea54:	429a      	cmp	r2, r3
    ea56:	dc23      	bgt.n	eaa0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      return __a;
    ea58:	ab1f      	add	r3, sp, #124	; 0x7c
    ea5a:	681d      	ldr	r5, [r3, #0]
  for (int i = 0; i < outer_size; ++i) {
    ea5c:	2400      	movs	r4, #0
    ea5e:	e061      	b.n	eb24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x254>
    TFLITE_DCHECK_GE(i, 0);
    ea60:	f007 fb9b 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ea64:	f007 fb99 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea68:	ab20      	add	r3, sp, #128	; 0x80
    ea6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ea6e:	f853 2c34 	ldr.w	r2, [r3, #-52]
    ea72:	e7d7      	b.n	ea24 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x154>
    TFLITE_DCHECK_GE(i, 0);
    ea74:	f007 fb91 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ea78:	f007 fb8f 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea7c:	ab20      	add	r3, sp, #128	; 0x80
    ea7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ea82:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    ea86:	e7d7      	b.n	ea38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x168>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
    ea88:	f007 fb87 	bl	1619a <abort>
    TFLITE_DCHECK_GE(i, 0);
    ea8c:	f007 fb85 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
    ea90:	f007 fb83 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
    ea94:	ab20      	add	r3, sp, #128	; 0x80
    ea96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ea9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
    ea9e:	e7d8      	b.n	ea52 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x182>
	return __b;
    eaa0:	ab1e      	add	r3, sp, #120	; 0x78
    eaa2:	e7da      	b.n	ea5a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x18a>
      max = std::max(max, input_data[i * depth + c]);
    eaa4:	683b      	ldr	r3, [r7, #0]
    eaa6:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    eaa8:	3601      	adds	r6, #1
    eaaa:	42ae      	cmp	r6, r5
    eaac:	da0c      	bge.n	eac8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
      max = std::max(max, input_data[i * depth + c]);
    eaae:	fb05 6304 	mla	r3, r5, r4, r6
    eab2:	eb08 0783 	add.w	r7, r8, r3, lsl #2
      if (__a < __b)
    eab6:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    eaba:	9803      	ldr	r0, [sp, #12]
    eabc:	f7f2 fac6 	bl	104c <__aeabi_fcmplt>
    eac0:	2800      	cmp	r0, #0
    eac2:	d1ef      	bne.n	eaa4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
      return __a;
    eac4:	af03      	add	r7, sp, #12
    eac6:	e7ed      	b.n	eaa4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1d4>
    for (int c = 0; c < depth; ++c) {
    eac8:	2700      	movs	r7, #0
    float sum = 0.f;
    eaca:	2600      	movs	r6, #0
    for (int c = 0; c < depth; ++c) {
    eacc:	42af      	cmp	r7, r5
    eace:	da1a      	bge.n	eb06 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x236>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    ead0:	fb05 7b04 	mla	fp, r5, r4, r7
    ead4:	9903      	ldr	r1, [sp, #12]
    ead6:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
    eada:	f7f2 f80f 	bl	afc <__aeabi_fsub>
    eade:	9001      	str	r0, [sp, #4]
                                   static_cast<float>(params.beta));
    eae0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    eae4:	f7f1 ffb6 	bl	a54 <__aeabi_d2f>
    eae8:	4601      	mov	r1, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
    eaea:	9801      	ldr	r0, [sp, #4]
    eaec:	f7f2 f910 	bl	d10 <__aeabi_fmul>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    eaf0:	f001 fdce 	bl	10690 <expf>
    eaf4:	4601      	mov	r1, r0
      output_data[i * depth + c] = exp_c;
    eaf6:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
      sum += exp_c;
    eafa:	4630      	mov	r0, r6
    eafc:	f7f2 f800 	bl	b00 <__addsf3>
    eb00:	4606      	mov	r6, r0
    for (int c = 0; c < depth; ++c) {
    eb02:	3701      	adds	r7, #1
    eb04:	e7e2      	b.n	eacc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>
    for (int c = 0; c < depth; ++c) {
    eb06:	2700      	movs	r7, #0
    eb08:	42af      	cmp	r7, r5
    eb0a:	da0a      	bge.n	eb22 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x252>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
    eb0c:	fb05 7b04 	mla	fp, r5, r4, r7
    eb10:	4631      	mov	r1, r6
    eb12:	f859 002b 	ldr.w	r0, [r9, fp, lsl #2]
    eb16:	f7f2 f9af 	bl	e78 <__aeabi_fdiv>
    eb1a:	f849 002b 	str.w	r0, [r9, fp, lsl #2]
    for (int c = 0; c < depth; ++c) {
    eb1e:	3701      	adds	r7, #1
    eb20:	e7f2      	b.n	eb08 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>
  for (int i = 0; i < outer_size; ++i) {
    eb22:	3401      	adds	r4, #1
    eb24:	4554      	cmp	r4, sl
    eb26:	da04      	bge.n	eb32 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x262>
    float max = std::numeric_limits<float>::lowest();
    eb28:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
    eb2c:	9303      	str	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
    eb2e:	2600      	movs	r6, #0
    eb30:	e7bb      	b.n	eaaa <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1da>
    if (size_ > kMaxSmallSize) {
    eb32:	9b18      	ldr	r3, [sp, #96]	; 0x60
    eb34:	2b05      	cmp	r3, #5
    eb36:	dd03      	ble.n	eb40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
      delete[] dims_pointer_;
    eb38:	9819      	ldr	r0, [sp, #100]	; 0x64
    eb3a:	b108      	cbz	r0, eb40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
    eb3c:	f007 fb18 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
    eb40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb42:	2b05      	cmp	r3, #5
    eb44:	dd03      	ble.n	eb4e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
      delete[] dims_pointer_;
    eb46:	9813      	ldr	r0, [sp, #76]	; 0x4c
    eb48:	b108      	cbz	r0, eb4e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x27e>
    eb4a:	f007 fb11 	bl	16170 <_ZdaPv>
      return kTfLiteOk;
    eb4e:	2000      	movs	r0, #0
    eb50:	e005      	b.n	eb5e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
      SoftmaxQuantized(input, output, op_data);
    eb52:	aa04      	add	r2, sp, #16
    eb54:	4649      	mov	r1, r9
    eb56:	4638      	mov	r0, r7
    eb58:	f7ff fbec 	bl	e334 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
    eb5c:	2000      	movs	r0, #0
}
    eb5e:	b021      	add	sp, #132	; 0x84
    eb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb64:	0006b468 	.word	0x0006b468

0000eb68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
    eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb6c:	b097      	sub	sp, #92	; 0x5c
    eb6e:	4604      	mov	r4, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
    eb70:	680b      	ldr	r3, [r1, #0]
    eb72:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
    eb74:	2b01      	cmp	r3, #1
    eb76:	d00f      	beq.n	eb98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
    eb78:	6946      	ldr	r6, [r0, #20]
    eb7a:	2501      	movs	r5, #1
    eb7c:	9503      	str	r5, [sp, #12]
    eb7e:	9302      	str	r3, [sp, #8]
    eb80:	4ba9      	ldr	r3, [pc, #676]	; (ee28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    eb82:	9301      	str	r3, [sp, #4]
    eb84:	4ba9      	ldr	r3, [pc, #676]	; (ee2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
    eb86:	9300      	str	r3, [sp, #0]
    eb88:	235d      	movs	r3, #93	; 0x5d
    eb8a:	4aa9      	ldr	r2, [pc, #676]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    eb8c:	49a9      	ldr	r1, [pc, #676]	; (ee34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    eb8e:	47b0      	blx	r6
    eb90:	4628      	mov	r0, r5
    op_data->scale = output->params.scale;
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
  return CalculateSoftmaxParams(context, input, output, params, op_data);
}
    eb92:	b017      	add	sp, #92	; 0x5c
    eb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb98:	460d      	mov	r5, r1
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
    eb9a:	684b      	ldr	r3, [r1, #4]
    eb9c:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
    eb9e:	2b01      	cmp	r3, #1
    eba0:	d00d      	beq.n	ebbe <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x56>
    eba2:	6946      	ldr	r6, [r0, #20]
    eba4:	2501      	movs	r5, #1
    eba6:	9503      	str	r5, [sp, #12]
    eba8:	9302      	str	r3, [sp, #8]
    ebaa:	4b9f      	ldr	r3, [pc, #636]	; (ee28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
    ebac:	9301      	str	r3, [sp, #4]
    ebae:	4ba2      	ldr	r3, [pc, #648]	; (ee38 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
    ebb0:	9300      	str	r3, [sp, #0]
    ebb2:	235e      	movs	r3, #94	; 0x5e
    ebb4:	4a9e      	ldr	r2, [pc, #632]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ebb6:	499f      	ldr	r1, [pc, #636]	; (ee34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ebb8:	47b0      	blx	r6
    ebba:	4628      	mov	r0, r5
    ebbc:	e7e9      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  const TfLiteTensor* input = GetInput(context, node, 0);
    ebbe:	2200      	movs	r2, #0
    ebc0:	f005 f86e 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
    ebc4:	4606      	mov	r6, r0
    ebc6:	b340      	cbz	r0, ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb2>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
    ebc8:	6883      	ldr	r3, [r0, #8]
    ebca:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    ebcc:	2b00      	cmp	r3, #0
    ebce:	dd2e      	ble.n	ec2e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TfLiteTensor* output = GetOutput(context, node, 0);
    ebd0:	2200      	movs	r2, #0
    ebd2:	4629      	mov	r1, r5
    ebd4:	4620      	mov	r0, r4
    ebd6:	f005 f882 	bl	13cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
    ebda:	9005      	str	r0, [sp, #20]
    ebdc:	2800      	cmp	r0, #0
    ebde:	d030      	beq.n	ec42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    ebe0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    ebe4:	f1b9 0f00 	cmp.w	r9, #0
    ebe8:	d035      	beq.n	ec56 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (input->type == kTfLiteInt16) {
    ebea:	7833      	ldrb	r3, [r6, #0]
    ebec:	2b07      	cmp	r3, #7
    ebee:	d03c      	beq.n	ec6a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
  if (output->type == kTfLiteInt16) {
    ebf0:	9b05      	ldr	r3, [sp, #20]
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	2b07      	cmp	r3, #7
    ebf6:	d05d      	beq.n	ecb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
    ebf8:	7832      	ldrb	r2, [r6, #0]
    ebfa:	4293      	cmp	r3, r2
    ebfc:	d069      	beq.n	ecd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ebfe:	6965      	ldr	r5, [r4, #20]
    ec00:	9303      	str	r3, [sp, #12]
    ec02:	9202      	str	r2, [sp, #8]
    ec04:	4b8d      	ldr	r3, [pc, #564]	; (ee3c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
    ec06:	9301      	str	r3, [sp, #4]
    ec08:	4b8d      	ldr	r3, [pc, #564]	; (ee40 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
    ec0a:	9300      	str	r3, [sp, #0]
    ec0c:	2378      	movs	r3, #120	; 0x78
    ec0e:	4a88      	ldr	r2, [pc, #544]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec10:	4988      	ldr	r1, [pc, #544]	; (ee34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ec12:	4620      	mov	r0, r4
    ec14:	47a8      	blx	r5
    ec16:	2001      	movs	r0, #1
    ec18:	e7bb      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, input != nullptr);
    ec1a:	6965      	ldr	r5, [r4, #20]
    ec1c:	4b89      	ldr	r3, [pc, #548]	; (ee44 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
    ec1e:	9300      	str	r3, [sp, #0]
    ec20:	2360      	movs	r3, #96	; 0x60
    ec22:	4a83      	ldr	r2, [pc, #524]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec24:	4988      	ldr	r1, [pc, #544]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ec26:	4620      	mov	r0, r4
    ec28:	47a8      	blx	r5
    ec2a:	2001      	movs	r0, #1
    ec2c:	e7b1      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
    ec2e:	6965      	ldr	r5, [r4, #20]
    ec30:	4b86      	ldr	r3, [pc, #536]	; (ee4c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
    ec32:	9300      	str	r3, [sp, #0]
    ec34:	2361      	movs	r3, #97	; 0x61
    ec36:	4a7e      	ldr	r2, [pc, #504]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec38:	4983      	ldr	r1, [pc, #524]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ec3a:	4620      	mov	r0, r4
    ec3c:	47a8      	blx	r5
    ec3e:	2001      	movs	r0, #1
    ec40:	e7a7      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, output != nullptr);
    ec42:	6965      	ldr	r5, [r4, #20]
    ec44:	4b82      	ldr	r3, [pc, #520]	; (ee50 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
    ec46:	9300      	str	r3, [sp, #0]
    ec48:	2363      	movs	r3, #99	; 0x63
    ec4a:	4a79      	ldr	r2, [pc, #484]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec4c:	497e      	ldr	r1, [pc, #504]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ec4e:	4620      	mov	r0, r4
    ec50:	47a8      	blx	r5
    ec52:	2001      	movs	r0, #1
    ec54:	e79d      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
    ec56:	6965      	ldr	r5, [r4, #20]
    ec58:	4b7e      	ldr	r3, [pc, #504]	; (ee54 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
    ec5a:	9300      	str	r3, [sp, #0]
    ec5c:	2365      	movs	r3, #101	; 0x65
    ec5e:	4a74      	ldr	r2, [pc, #464]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec60:	4979      	ldr	r1, [pc, #484]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ec62:	4620      	mov	r0, r4
    ec64:	47a8      	blx	r5
    ec66:	2001      	movs	r0, #1
    ec68:	e793      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
    ec6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ec6c:	f240 4102 	movw	r1, #1026	; 0x402
    ec70:	4620      	mov	r0, r4
    ec72:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    ec74:	b150      	cbz	r0, ec8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x124>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
    ec76:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
    ec7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ec7c:	f240 4102 	movw	r1, #1026	; 0x402
    ec80:	4620      	mov	r0, r4
    ec82:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    ec84:	b160      	cbz	r0, eca0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x138>
    op_data->one_over_one_plus_x_lut =
    ec86:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
    ec8a:	e7b1      	b.n	ebf0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
    ec8c:	6965      	ldr	r5, [r4, #20]
    ec8e:	4b72      	ldr	r3, [pc, #456]	; (ee58 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
    ec90:	9300      	str	r3, [sp, #0]
    ec92:	236b      	movs	r3, #107	; 0x6b
    ec94:	4a66      	ldr	r2, [pc, #408]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ec96:	496c      	ldr	r1, [pc, #432]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ec98:	4620      	mov	r0, r4
    ec9a:	47a8      	blx	r5
    ec9c:	2001      	movs	r0, #1
    ec9e:	e778      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
    eca0:	6965      	ldr	r5, [r4, #20]
    eca2:	4b6e      	ldr	r3, [pc, #440]	; (ee5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
    eca4:	9300      	str	r3, [sp, #0]
    eca6:	236f      	movs	r3, #111	; 0x6f
    eca8:	4a61      	ldr	r2, [pc, #388]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ecaa:	4967      	ldr	r1, [pc, #412]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ecac:	4620      	mov	r0, r4
    ecae:	47a8      	blx	r5
    ecb0:	2001      	movs	r0, #1
    ecb2:	e76e      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    TF_LITE_ENSURE(context,
    ecb4:	7833      	ldrb	r3, [r6, #0]
    ecb6:	2b09      	cmp	r3, #9
    ecb8:	d00b      	beq.n	ecd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ecba:	2b07      	cmp	r3, #7
    ecbc:	d009      	beq.n	ecd2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
    ecbe:	6965      	ldr	r5, [r4, #20]
    ecc0:	4b67      	ldr	r3, [pc, #412]	; (ee60 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
    ecc2:	9300      	str	r3, [sp, #0]
    ecc4:	2375      	movs	r3, #117	; 0x75
    ecc6:	4a5a      	ldr	r2, [pc, #360]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ecc8:	495f      	ldr	r1, [pc, #380]	; (ee48 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
    ecca:	4620      	mov	r0, r4
    eccc:	47a8      	blx	r5
    ecce:	2001      	movs	r0, #1
    ecd0:	e75f      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
  if (input->type == kTfLiteInt16) {
    ecd2:	7833      	ldrb	r3, [r6, #0]
    ecd4:	2b07      	cmp	r3, #7
    ecd6:	f040 81b7 	bne.w	f048 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4e0>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    ecda:	9b05      	ldr	r3, [sp, #20]
    ecdc:	f8d3 b010 	ldr.w	fp, [r3, #16]
    ece0:	f1bb 0f00 	cmp.w	fp, #0
    ece4:	d00f      	beq.n	ed06 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x19e>
    ece6:	6965      	ldr	r5, [r4, #20]
    ece8:	2300      	movs	r3, #0
    ecea:	9303      	str	r3, [sp, #12]
    ecec:	f8cd b008 	str.w	fp, [sp, #8]
    ecf0:	4b5c      	ldr	r3, [pc, #368]	; (ee64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
    ecf2:	9301      	str	r3, [sp, #4]
    ecf4:	4b5c      	ldr	r3, [pc, #368]	; (ee68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x300>)
    ecf6:	9300      	str	r3, [sp, #0]
    ecf8:	237d      	movs	r3, #125	; 0x7d
    ecfa:	4a4d      	ldr	r2, [pc, #308]	; (ee30 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
    ecfc:	494d      	ldr	r1, [pc, #308]	; (ee34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
    ecfe:	4620      	mov	r0, r4
    ed00:	47a8      	blx	r5
    ed02:	2001      	movs	r0, #1
    ed04:	e745      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
    ed06:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
    ed0a:	9306      	str	r3, [sp, #24]
  for (int i = 0; i < num - 1; i++) {
    ed0c:	465f      	mov	r7, fp
    ed0e:	f8cd 901c 	str.w	r9, [sp, #28]
    ed12:	f8cd b020 	str.w	fp, [sp, #32]
    ed16:	469b      	mov	fp, r3
    ed18:	9609      	str	r6, [sp, #36]	; 0x24
    ed1a:	e007      	b.n	ed2c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
	return __b;
    ed1c:	ae14      	add	r6, sp, #80	; 0x50
    ed1e:	e079      	b.n	ee14 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2ac>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    ed20:	6830      	ldr	r0, [r6, #0]
    ed22:	f7f2 f9bb 	bl	109c <__aeabi_f2iz>
    ed26:	f82b 0017 	strh.w	r0, [fp, r7, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    ed2a:	4657      	mov	r7, sl
    ed2c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    ed30:	f280 80a4 	bge.w	ee7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x314>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    ed34:	4638      	mov	r0, r7
    ed36:	f7f1 ff97 	bl	c68 <__aeabi_i2f>
    ed3a:	494c      	ldr	r1, [pc, #304]	; (ee6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ed3c:	f7f1 ffe8 	bl	d10 <__aeabi_fmul>
    ed40:	494b      	ldr	r1, [pc, #300]	; (ee70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ed42:	f7f1 fedb 	bl	afc <__aeabi_fsub>
    ed46:	4606      	mov	r6, r0
    ed48:	f006 ffa7 	bl	15c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ed4c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ed50:	f7f1 ffde 	bl	d10 <__aeabi_fmul>
    ed54:	f7f1 fb64 	bl	420 <__aeabi_f2d>
    ed58:	f001 fc52 	bl	10600 <round>
    ed5c:	f7f1 fe7a 	bl	a54 <__aeabi_d2f>
    ed60:	4680      	mov	r8, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ed62:	f107 0a01 	add.w	sl, r7, #1
    ed66:	4650      	mov	r0, sl
    ed68:	f7f1 ff7e 	bl	c68 <__aeabi_i2f>
    ed6c:	493f      	ldr	r1, [pc, #252]	; (ee6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x304>)
    ed6e:	f7f1 ffcf 	bl	d10 <__aeabi_fmul>
    ed72:	493f      	ldr	r1, [pc, #252]	; (ee70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x308>)
    ed74:	f7f1 fec2 	bl	afc <__aeabi_fsub>
    ed78:	f006 ff8f 	bl	15c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ed7c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ed80:	f7f1 ffc6 	bl	d10 <__aeabi_fmul>
    ed84:	4681      	mov	r9, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ed86:	4630      	mov	r0, r6
    ed88:	f006 ff87 	bl	15c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ed8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ed90:	f7f1 ffbe 	bl	d10 <__aeabi_fmul>
    ed94:	f7f1 fb44 	bl	420 <__aeabi_f2d>
    ed98:	f001 fc32 	bl	10600 <round>
    ed9c:	f7f1 fe5a 	bl	a54 <__aeabi_d2f>
    eda0:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    eda2:	4648      	mov	r0, r9
    eda4:	f7f1 feac 	bl	b00 <__addsf3>
    eda8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    edac:	f7f1 ffb0 	bl	d10 <__aeabi_fmul>
    edb0:	f7f1 fb36 	bl	420 <__aeabi_f2d>
    edb4:	f001 fc24 	bl	10600 <round>
    edb8:	f7f1 fe4c 	bl	a54 <__aeabi_d2f>
    edbc:	4681      	mov	r9, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    edbe:	492d      	ldr	r1, [pc, #180]	; (ee74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
    edc0:	4630      	mov	r0, r6
    edc2:	f7f1 fe9d 	bl	b00 <__addsf3>
    edc6:	f006 ff68 	bl	15c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    edca:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    edce:	f7f1 ff9f 	bl	d10 <__aeabi_fmul>
    edd2:	f7f1 fb25 	bl	420 <__aeabi_f2d>
    edd6:	f001 fc13 	bl	10600 <round>
    edda:	f7f1 fe3b 	bl	a54 <__aeabi_d2f>
    edde:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    ede0:	4648      	mov	r0, r9
    ede2:	f7f1 fe8b 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    ede6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    edea:	f7f1 ff91 	bl	d10 <__aeabi_fmul>
    edee:	f7f1 fb17 	bl	420 <__aeabi_f2d>
    edf2:	f001 fc05 	bl	10600 <round>
    edf6:	f7f1 fe2d 	bl	a54 <__aeabi_d2f>
    edfa:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    edfc:	4640      	mov	r0, r8
    edfe:	f7f1 fe7d 	bl	afc <__aeabi_fsub>
    ee02:	9015      	str	r0, [sp, #84]	; 0x54
    ee04:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    ee08:	9114      	str	r1, [sp, #80]	; 0x50
      if (__a < __b)
    ee0a:	f7f2 f91f 	bl	104c <__aeabi_fcmplt>
    ee0e:	2800      	cmp	r0, #0
    ee10:	d184      	bne.n	ed1c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
      return __a;
    ee12:	ae15      	add	r6, sp, #84	; 0x54
                               32767.0f);
    ee14:	4918      	ldr	r1, [pc, #96]	; (ee78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x310>)
    ee16:	9113      	str	r1, [sp, #76]	; 0x4c
      if (__b < __a)
    ee18:	6830      	ldr	r0, [r6, #0]
    ee1a:	f7f2 f935 	bl	1088 <__aeabi_fcmpgt>
    ee1e:	2800      	cmp	r0, #0
    ee20:	f43f af7e 	beq.w	ed20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
	return __b;
    ee24:	ae13      	add	r6, sp, #76	; 0x4c
    ee26:	e77b      	b.n	ed20 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
    ee28:	0006bb44 	.word	0x0006bb44
    ee2c:	0006bb1c 	.word	0x0006bb1c
    ee30:	0006ba14 	.word	0x0006ba14
    ee34:	0006adbc 	.word	0x0006adbc
    ee38:	0006b964 	.word	0x0006b964
    ee3c:	0006b3d0 	.word	0x0006b3d0
    ee40:	0006b3e0 	.word	0x0006b3e0
    ee44:	0006b510 	.word	0x0006b510
    ee48:	0006aafc 	.word	0x0006aafc
    ee4c:	0006bb2c 	.word	0x0006bb2c
    ee50:	0006b538 	.word	0x0006b538
    ee54:	0006bb48 	.word	0x0006bb48
    ee58:	0006bb64 	.word	0x0006bb64
    ee5c:	0006bb7c 	.word	0x0006bb7c
    ee60:	0006ae5c 	.word	0x0006ae5c
    ee64:	0006b1a8 	.word	0x0006b1a8
    ee68:	0006ba6c 	.word	0x0006ba6c
    ee6c:	3ca00000 	.word	0x3ca00000
    ee70:	41200000 	.word	0x41200000
    ee74:	3c200000 	.word	0x3c200000
    ee78:	46fffe00 	.word	0x46fffe00
    ee7c:	f8dd 901c 	ldr.w	r9, [sp, #28]
    ee80:	f8dd b020 	ldr.w	fp, [sp, #32]
    ee84:	9e09      	ldr	r6, [sp, #36]	; 0x24
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    ee86:	2000      	movs	r0, #0
    ee88:	f006 ff07 	bl	15c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>
    ee8c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ee90:	f7f1 ff3e 	bl	d10 <__aeabi_fmul>
    ee94:	f7f1 fac4 	bl	420 <__aeabi_f2d>
    ee98:	f001 fbb2 	bl	10600 <round>
    ee9c:	f7f1 fdda 	bl	a54 <__aeabi_d2f>
    eea0:	9012      	str	r0, [sp, #72]	; 0x48
    eea2:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    eea6:	9111      	str	r1, [sp, #68]	; 0x44
      if (__a < __b)
    eea8:	f7f2 f8d0 	bl	104c <__aeabi_fcmplt>
    eeac:	b9a0      	cbnz	r0, eed8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x370>
      return __a;
    eeae:	af12      	add	r7, sp, #72	; 0x48
    eeb0:	496c      	ldr	r1, [pc, #432]	; (f064 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    eeb2:	9110      	str	r1, [sp, #64]	; 0x40
      if (__b < __a)
    eeb4:	6838      	ldr	r0, [r7, #0]
    eeb6:	f7f2 f8e7 	bl	1088 <__aeabi_fcmpgt>
    eeba:	b978      	cbnz	r0, eedc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x374>
  table[num - 1] = std::min<float>(
    eebc:	6838      	ldr	r0, [r7, #0]
    eebe:	f7f2 f8ed 	bl	109c <__aeabi_f2iz>
    eec2:	9b06      	ldr	r3, [sp, #24]
    eec4:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
    eec8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
    eecc:	9306      	str	r3, [sp, #24]
    eece:	f8cd 901c 	str.w	r9, [sp, #28]
    eed2:	469a      	mov	sl, r3
    eed4:	9608      	str	r6, [sp, #32]
    eed6:	e00b      	b.n	eef0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x388>
	return __b;
    eed8:	af11      	add	r7, sp, #68	; 0x44
    eeda:	e7e9      	b.n	eeb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x348>
	return __b;
    eedc:	af10      	add	r7, sp, #64	; 0x40
    eede:	e7ed      	b.n	eebc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x354>
	return __b;
    eee0:	ae0e      	add	r6, sp, #56	; 0x38
    eee2:	e07b      	b.n	efdc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x474>
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    eee4:	6830      	ldr	r0, [r6, #0]
    eee6:	f7f2 f8d9 	bl	109c <__aeabi_f2iz>
    eeea:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (int i = 0; i < num - 1; i++) {
    eeee:	46cb      	mov	fp, r9
    eef0:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    eef4:	da7c      	bge.n	eff0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x488>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
    eef6:	4658      	mov	r0, fp
    eef8:	f7f1 feb6 	bl	c68 <__aeabi_i2f>
    eefc:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ef00:	f7f1 ff06 	bl	d10 <__aeabi_fmul>
    ef04:	2100      	movs	r1, #0
    ef06:	f7f1 fdfb 	bl	b00 <__addsf3>
    ef0a:	4606      	mov	r6, r0
    ef0c:	f006 feba 	bl	15c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ef10:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ef14:	f7f1 fefc 	bl	d10 <__aeabi_fmul>
    ef18:	f7f1 fa82 	bl	420 <__aeabi_f2d>
    ef1c:	f001 fb70 	bl	10600 <round>
    ef20:	f7f1 fd98 	bl	a54 <__aeabi_d2f>
    ef24:	4607      	mov	r7, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ef26:	f10b 0901 	add.w	r9, fp, #1
    ef2a:	4648      	mov	r0, r9
    ef2c:	f7f1 fe9c 	bl	c68 <__aeabi_i2f>
    ef30:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
    ef34:	f7f1 feec 	bl	d10 <__aeabi_fmul>
    ef38:	2100      	movs	r1, #0
    ef3a:	f7f1 fde1 	bl	b00 <__addsf3>
    ef3e:	f006 fea1 	bl	15c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ef42:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ef46:	f7f1 fee3 	bl	d10 <__aeabi_fmul>
    ef4a:	4680      	mov	r8, r0
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
    ef4c:	4630      	mov	r0, r6
    ef4e:	f006 fe99 	bl	15c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ef52:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ef56:	f7f1 fedb 	bl	d10 <__aeabi_fmul>
    ef5a:	f7f1 fa61 	bl	420 <__aeabi_f2d>
    ef5e:	f001 fb4f 	bl	10600 <round>
    ef62:	f7f1 fd77 	bl	a54 <__aeabi_d2f>
    ef66:	4601      	mov	r1, r0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
    ef68:	4640      	mov	r0, r8
    ef6a:	f7f1 fdc9 	bl	b00 <__addsf3>
    ef6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    ef72:	f7f1 fecd 	bl	d10 <__aeabi_fmul>
    ef76:	f7f1 fa53 	bl	420 <__aeabi_f2d>
    ef7a:	f001 fb41 	bl	10600 <round>
    ef7e:	f7f1 fd69 	bl	a54 <__aeabi_d2f>
    ef82:	4680      	mov	r8, r0
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
    ef84:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
    ef88:	4630      	mov	r0, r6
    ef8a:	f7f1 fdb9 	bl	b00 <__addsf3>
    ef8e:	f006 fe79 	bl	15c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    ef92:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    ef96:	f7f1 febb 	bl	d10 <__aeabi_fmul>
    ef9a:	f7f1 fa41 	bl	420 <__aeabi_f2d>
    ef9e:	f001 fb2f 	bl	10600 <round>
    efa2:	f7f1 fd57 	bl	a54 <__aeabi_d2f>
    efa6:	4601      	mov	r1, r0
    float midpoint_err = midpoint_interp_val - midpoint_val;
    efa8:	4640      	mov	r0, r8
    efaa:	f7f1 fda7 	bl	afc <__aeabi_fsub>
    float bias = TfLiteRound(midpoint_err / 2.0f);
    efae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    efb2:	f7f1 fead 	bl	d10 <__aeabi_fmul>
    efb6:	f7f1 fa33 	bl	420 <__aeabi_f2d>
    efba:	f001 fb21 	bl	10600 <round>
    efbe:	f7f1 fd49 	bl	a54 <__aeabi_d2f>
    efc2:	4601      	mov	r1, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
    efc4:	4638      	mov	r0, r7
    efc6:	f7f1 fd99 	bl	afc <__aeabi_fsub>
    efca:	900f      	str	r0, [sp, #60]	; 0x3c
    efcc:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    efd0:	910e      	str	r1, [sp, #56]	; 0x38
      if (__a < __b)
    efd2:	f7f2 f83b 	bl	104c <__aeabi_fcmplt>
    efd6:	2800      	cmp	r0, #0
    efd8:	d182      	bne.n	eee0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x378>
      return __a;
    efda:	ae0f      	add	r6, sp, #60	; 0x3c
                               32767.0f);
    efdc:	4921      	ldr	r1, [pc, #132]	; (f064 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    efde:	910d      	str	r1, [sp, #52]	; 0x34
      if (__b < __a)
    efe0:	6830      	ldr	r0, [r6, #0]
    efe2:	f7f2 f851 	bl	1088 <__aeabi_fcmpgt>
    efe6:	2800      	cmp	r0, #0
    efe8:	f43f af7c 	beq.w	eee4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
	return __b;
    efec:	ae0d      	add	r6, sp, #52	; 0x34
    efee:	e779      	b.n	eee4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    eff0:	f8dd 901c 	ldr.w	r9, [sp, #28]
    eff4:	9e08      	ldr	r6, [sp, #32]
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
    eff6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    effa:	f006 fe43 	bl	15c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>
    effe:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
    f002:	f7f1 fe85 	bl	d10 <__aeabi_fmul>
    f006:	f7f1 fa0b 	bl	420 <__aeabi_f2d>
    f00a:	f001 faf9 	bl	10600 <round>
    f00e:	f7f1 fd21 	bl	a54 <__aeabi_d2f>
    f012:	900c      	str	r0, [sp, #48]	; 0x30
    f014:	f04f 4147 	mov.w	r1, #3338665984	; 0xc7000000
    f018:	910b      	str	r1, [sp, #44]	; 0x2c
      if (__a < __b)
    f01a:	f7f2 f817 	bl	104c <__aeabi_fcmplt>
    f01e:	b9e0      	cbnz	r0, f05a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f2>
      return __a;
    f020:	af0c      	add	r7, sp, #48	; 0x30
    f022:	4910      	ldr	r1, [pc, #64]	; (f064 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4fc>)
    f024:	910a      	str	r1, [sp, #40]	; 0x28
      if (__b < __a)
    f026:	6838      	ldr	r0, [r7, #0]
    f028:	f7f2 f82e 	bl	1088 <__aeabi_fcmpgt>
    f02c:	b9b8      	cbnz	r0, f05e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4f6>
  table[num - 1] = std::min<float>(
    f02e:	6838      	ldr	r0, [r7, #0]
    f030:	f7f2 f834 	bl	109c <__aeabi_f2iz>
    f034:	9b06      	ldr	r3, [sp, #24]
    f036:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
    op_data->zero_point = output->params.zero_point;
    f03a:	9a05      	ldr	r2, [sp, #20]
    f03c:	6913      	ldr	r3, [r2, #16]
    f03e:	f8c9 301c 	str.w	r3, [r9, #28]
    op_data->scale = output->params.scale;
    f042:	68d3      	ldr	r3, [r2, #12]
    f044:	f8c9 3020 	str.w	r3, [r9, #32]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
    f048:	f8cd 9000 	str.w	r9, [sp]
    f04c:	696b      	ldr	r3, [r5, #20]
    f04e:	9a05      	ldr	r2, [sp, #20]
    f050:	4631      	mov	r1, r6
    f052:	4620      	mov	r0, r4
    f054:	f7f2 facc 	bl	15f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
    f058:	e59b      	b.n	eb92 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2a>
	return __b;
    f05a:	af0b      	add	r7, sp, #44	; 0x2c
    f05c:	e7e1      	b.n	f022 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
	return __b;
    f05e:	af0a      	add	r7, sp, #40	; 0x28
    f060:	e7e5      	b.n	f02e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c6>
    f062:	bf00      	nop
    f064:	46fffe00 	.word	0x46fffe00

0000f068 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    f068:	4b03      	ldr	r3, [pc, #12]	; (f078 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    f06a:	4a04      	ldr	r2, [pc, #16]	; (f07c <z_device_state_init+0x14>)
    f06c:	4293      	cmp	r3, r2
    f06e:	d201      	bcs.n	f074 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    f070:	3318      	adds	r3, #24
    f072:	e7fa      	b.n	f06a <z_device_state_init+0x2>
	}
}
    f074:	4770      	bx	lr
    f076:	bf00      	nop
    f078:	00016e08 	.word	0x00016e08
    f07c:	00016e80 	.word	0x00016e80

0000f080 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    f080:	b570      	push	{r4, r5, r6, lr}
    f082:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f084:	4b11      	ldr	r3, [pc, #68]	; (f0cc <z_sys_init_run_level+0x4c>)
    f086:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f08a:	e009      	b.n	f0a0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    f08c:	4240      	negs	r0, r0
    f08e:	e017      	b.n	f0c0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    f090:	68eb      	ldr	r3, [r5, #12]
    f092:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    f094:	68ea      	ldr	r2, [r5, #12]
    f096:	7853      	ldrb	r3, [r2, #1]
    f098:	f043 0301 	orr.w	r3, r3, #1
    f09c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f09e:	3408      	adds	r4, #8
    f0a0:	1c73      	adds	r3, r6, #1
    f0a2:	4a0a      	ldr	r2, [pc, #40]	; (f0cc <z_sys_init_run_level+0x4c>)
    f0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0a8:	42a3      	cmp	r3, r4
    f0aa:	d90d      	bls.n	f0c8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    f0ac:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    f0ae:	6823      	ldr	r3, [r4, #0]
    f0b0:	4628      	mov	r0, r5
    f0b2:	4798      	blx	r3
		if (dev != NULL) {
    f0b4:	2d00      	cmp	r5, #0
    f0b6:	d0f2      	beq.n	f09e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    f0b8:	2800      	cmp	r0, #0
    f0ba:	d0eb      	beq.n	f094 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    f0bc:	2800      	cmp	r0, #0
    f0be:	dbe5      	blt.n	f08c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    f0c0:	28ff      	cmp	r0, #255	; 0xff
    f0c2:	dde5      	ble.n	f090 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    f0c4:	20ff      	movs	r0, #255	; 0xff
    f0c6:	e7e3      	b.n	f090 <z_sys_init_run_level+0x10>
		}
	}
}
    f0c8:	bd70      	pop	{r4, r5, r6, pc}
    f0ca:	bf00      	nop
    f0cc:	0006bba0 	.word	0x0006bba0

0000f0d0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    f0d0:	4b01      	ldr	r3, [pc, #4]	; (f0d8 <z_impl_z_errno+0x8>)
    f0d2:	6898      	ldr	r0, [r3, #8]
}
    f0d4:	3094      	adds	r0, #148	; 0x94
    f0d6:	4770      	bx	lr
    f0d8:	20020a18 	.word	0x20020a18

0000f0dc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0de:	b089      	sub	sp, #36	; 0x24
    f0e0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    f0e2:	4b15      	ldr	r3, [pc, #84]	; (f138 <init_idle_thread+0x5c>)
    f0e4:	25b0      	movs	r5, #176	; 0xb0
    f0e6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    f0ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    f0ee:	4e13      	ldr	r6, [pc, #76]	; (f13c <init_idle_thread+0x60>)
    f0f0:	eb06 1683 	add.w	r6, r6, r3, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    f0f4:	af06      	add	r7, sp, #24
    f0f6:	4603      	mov	r3, r0
    f0f8:	4a11      	ldr	r2, [pc, #68]	; (f140 <init_idle_thread+0x64>)
    f0fa:	2108      	movs	r1, #8
    f0fc:	4638      	mov	r0, r7
    f0fe:	f002 ff22 	bl	11f46 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f102:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f106:	480f      	ldr	r0, [pc, #60]	; (f144 <init_idle_thread+0x68>)
    f108:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    f10c:	9705      	str	r7, [sp, #20]
    f10e:	2301      	movs	r3, #1
    f110:	9304      	str	r3, [sp, #16]
    f112:	230f      	movs	r3, #15
    f114:	9303      	str	r3, [sp, #12]
    f116:	2300      	movs	r3, #0
    f118:	9302      	str	r3, [sp, #8]
    f11a:	9301      	str	r3, [sp, #4]
    f11c:	9400      	str	r4, [sp, #0]
    f11e:	4b0a      	ldr	r3, [pc, #40]	; (f148 <init_idle_thread+0x6c>)
    f120:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f124:	4631      	mov	r1, r6
    f126:	4628      	mov	r0, r5
    f128:	f000 f946 	bl	f3b8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f12c:	7b6b      	ldrb	r3, [r5, #13]
    f12e:	f023 0304 	bic.w	r3, r3, #4
    f132:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    f134:	b009      	add	sp, #36	; 0x24
    f136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f138:	20000360 	.word	0x20000360
    f13c:	20028c48 	.word	0x20028c48
    f140:	0006bbb8 	.word	0x0006bbb8
    f144:	20020a18 	.word	0x20020a18
    f148:	00015df3 	.word	0x00015df3

0000f14c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    f14c:	b570      	push	{r4, r5, r6, lr}
    f14e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    f150:	f000 fdfe 	bl	fd50 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    f154:	4d1a      	ldr	r5, [pc, #104]	; (f1c0 <prepare_multithreading+0x74>)
    f156:	4b1b      	ldr	r3, [pc, #108]	; (f1c4 <prepare_multithreading+0x78>)
    f158:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f15a:	4b1b      	ldr	r3, [pc, #108]	; (f1c8 <prepare_multithreading+0x7c>)
    f15c:	9305      	str	r3, [sp, #20]
    f15e:	2301      	movs	r3, #1
    f160:	9304      	str	r3, [sp, #16]
    f162:	2400      	movs	r4, #0
    f164:	9403      	str	r4, [sp, #12]
    f166:	9402      	str	r4, [sp, #8]
    f168:	9401      	str	r4, [sp, #4]
    f16a:	9400      	str	r4, [sp, #0]
    f16c:	4b17      	ldr	r3, [pc, #92]	; (f1cc <prepare_multithreading+0x80>)
    f16e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    f172:	4917      	ldr	r1, [pc, #92]	; (f1d0 <prepare_multithreading+0x84>)
    f174:	4628      	mov	r0, r5
    f176:	f000 f91f 	bl	f3b8 <z_setup_new_thread>
    f17a:	4606      	mov	r6, r0
    f17c:	7b6b      	ldrb	r3, [r5, #13]
    f17e:	f023 0304 	bic.w	r3, r3, #4
    f182:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    f184:	4628      	mov	r0, r5
    f186:	f006 fe9e 	bl	15ec6 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f18a:	2c00      	cmp	r4, #0
    f18c:	dd02      	ble.n	f194 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    f18e:	4630      	mov	r0, r6
    f190:	b006      	add	sp, #24
    f192:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    f194:	4620      	mov	r0, r4
    f196:	f7ff ffa1 	bl	f0dc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    f19a:	4b0e      	ldr	r3, [pc, #56]	; (f1d4 <prepare_multithreading+0x88>)
    f19c:	22b0      	movs	r2, #176	; 0xb0
    f19e:	fb02 3204 	mla	r2, r2, r4, r3
    f1a2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    f1a6:	4b07      	ldr	r3, [pc, #28]	; (f1c4 <prepare_multithreading+0x78>)
    f1a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f1ac:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    f1ae:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    f1b0:	4a09      	ldr	r2, [pc, #36]	; (f1d8 <prepare_multithreading+0x8c>)
    f1b2:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
    f1b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    f1ba:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f1bc:	3401      	adds	r4, #1
    f1be:	e7e4      	b.n	f18a <prepare_multithreading+0x3e>
    f1c0:	20000410 	.word	0x20000410
    f1c4:	20020a18 	.word	0x20020a18
    f1c8:	0006bbc4 	.word	0x0006bbc4
    f1cc:	0000f1dd 	.word	0x0000f1dd
    f1d0:	20020c48 	.word	0x20020c48
    f1d4:	20000360 	.word	0x20000360
    f1d8:	20028d88 	.word	0x20028d88

0000f1dc <bg_thread_main>:
{
    f1dc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    f1de:	4b0b      	ldr	r3, [pc, #44]	; (f20c <bg_thread_main+0x30>)
    f1e0:	2201      	movs	r2, #1
    f1e2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f1e4:	2002      	movs	r0, #2
    f1e6:	f7ff ff4b 	bl	f080 <z_sys_init_run_level>
	boot_banner();
    f1ea:	f001 f83b 	bl	10264 <boot_banner>
	z_cpp_init_static();
    f1ee:	f003 fabb 	bl	12768 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    f1f2:	2003      	movs	r0, #3
    f1f4:	f7ff ff44 	bl	f080 <z_sys_init_run_level>
	z_init_static_threads();
    f1f8:	f000 f942 	bl	f480 <z_init_static_threads>
	main();
    f1fc:	f002 fe20 	bl	11e40 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f200:	4a03      	ldr	r2, [pc, #12]	; (f210 <bg_thread_main+0x34>)
    f202:	7b13      	ldrb	r3, [r2, #12]
    f204:	f023 0301 	bic.w	r3, r3, #1
    f208:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f20a:	bd08      	pop	{r3, pc}
    f20c:	20020a87 	.word	0x20020a87
    f210:	20000410 	.word	0x20000410

0000f214 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    f214:	b508      	push	{r3, lr}
    f216:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f218:	4a01      	ldr	r2, [pc, #4]	; (f220 <switch_to_main_thread+0xc>)
    f21a:	4802      	ldr	r0, [pc, #8]	; (f224 <switch_to_main_thread+0x10>)
    f21c:	f7f5 f870 	bl	4300 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f220:	0000f1dd 	.word	0x0000f1dd
    f224:	20000410 	.word	0x20000410

0000f228 <z_bss_zero>:
{
    f228:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    f22a:	4803      	ldr	r0, [pc, #12]	; (f238 <z_bss_zero+0x10>)
    f22c:	4a03      	ldr	r2, [pc, #12]	; (f23c <z_bss_zero+0x14>)
    f22e:	1a12      	subs	r2, r2, r0
    f230:	2100      	movs	r1, #0
    f232:	f006 ffd8 	bl	161e6 <memset>
}
    f236:	bd08      	pop	{r3, pc}
    f238:	20000340 	.word	0x20000340
    f23c:	20020c48 	.word	0x20020c48

0000f240 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    f240:	b500      	push	{lr}
    f242:	b0ad      	sub	sp, #180	; 0xb4
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    f244:	4b1c      	ldr	r3, [pc, #112]	; (f2b8 <z_cstart+0x78>)
	uint32_t msp =
    f246:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f24a:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    f24e:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f252:	4c1a      	ldr	r4, [pc, #104]	; (f2bc <z_cstart+0x7c>)
    f254:	23e0      	movs	r3, #224	; 0xe0
    f256:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    f25a:	2500      	movs	r5, #0
    f25c:	77e5      	strb	r5, [r4, #31]
    f25e:	7625      	strb	r5, [r4, #24]
    f260:	7665      	strb	r5, [r4, #25]
    f262:	76a5      	strb	r5, [r4, #26]
    f264:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f268:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f26a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    f26e:	6263      	str	r3, [r4, #36]	; 0x24
    f270:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    f274:	f7f5 f988 	bl	4588 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    f278:	f7f4 ff56 	bl	4128 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    f27c:	f04f 33ff 	mov.w	r3, #4294967295
    f280:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    f282:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    f284:	f7f5 fbb8 	bl	49f8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f288:	f7f5 fa40 	bl	470c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    f28c:	2401      	movs	r4, #1
    f28e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    f292:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    f296:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    f298:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    f29a:	4b09      	ldr	r3, [pc, #36]	; (f2c0 <z_cstart+0x80>)
    f29c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    f2a0:	f7ff fee2 	bl	f068 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f2a4:	4628      	mov	r0, r5
    f2a6:	f7ff feeb 	bl	f080 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f2aa:	4620      	mov	r0, r4
    f2ac:	f7ff fee8 	bl	f080 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    f2b0:	f7ff ff4c 	bl	f14c <prepare_multithreading>
    f2b4:	f7ff ffae 	bl	f214 <switch_to_main_thread>
    f2b8:	20028d88 	.word	0x20028d88
    f2bc:	e000ed00 	.word	0xe000ed00
    f2c0:	20020a18 	.word	0x20020a18

0000f2c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    f2c4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f2c6:	4c06      	ldr	r4, [pc, #24]	; (f2e0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    f2c8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f2ca:	4b06      	ldr	r3, [pc, #24]	; (f2e4 <init_mem_slab_module+0x20>)
    f2cc:	429c      	cmp	r4, r3
    f2ce:	d206      	bcs.n	f2de <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    f2d0:	4620      	mov	r0, r4
    f2d2:	f006 fd15 	bl	15d00 <create_free_list>
		if (rc < 0) {
    f2d6:	2800      	cmp	r0, #0
    f2d8:	db01      	blt.n	f2de <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f2da:	3420      	adds	r4, #32
    f2dc:	e7f5      	b.n	f2ca <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    f2de:	bd10      	pop	{r4, pc}
    f2e0:	200002b4 	.word	0x200002b4
    f2e4:	200002b4 	.word	0x200002b4

0000f2e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    f2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ea:	b083      	sub	sp, #12
    f2ec:	460c      	mov	r4, r1
    f2ee:	461f      	mov	r7, r3
    f2f0:	f04f 0320 	mov.w	r3, #32
    f2f4:	f3ef 8111 	mrs	r1, BASEPRI
    f2f8:	f383 8812 	msr	BASEPRI_MAX, r3
    f2fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    f300:	6983      	ldr	r3, [r0, #24]
    f302:	b16b      	cbz	r3, f320 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    f304:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f306:	6983      	ldr	r3, [r0, #24]
    f308:	681b      	ldr	r3, [r3, #0]
    f30a:	6183      	str	r3, [r0, #24]
		slab->num_used++;
    f30c:	69c3      	ldr	r3, [r0, #28]
    f30e:	3301      	adds	r3, #1
    f310:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    f312:	2000      	movs	r0, #0
	__asm__ volatile(
    f314:	f381 8811 	msr	BASEPRI, r1
    f318:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    f31c:	b003      	add	sp, #12
    f31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f320:	4616      	mov	r6, r2
    f322:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    f326:	ea56 0307 	orrs.w	r3, r6, r7
    f32a:	d104      	bne.n	f336 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    f32c:	2300      	movs	r3, #0
    f32e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f330:	f06f 000b 	mvn.w	r0, #11
    f334:	e7ee      	b.n	f314 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    f336:	e9cd 6700 	strd	r6, r7, [sp]
    f33a:	4602      	mov	r2, r0
    f33c:	4628      	mov	r0, r5
    f33e:	f000 fbdd 	bl	fafc <z_pend_curr>
		if (result == 0) {
    f342:	2800      	cmp	r0, #0
    f344:	d1ea      	bne.n	f31c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    f346:	4b02      	ldr	r3, [pc, #8]	; (f350 <k_mem_slab_alloc+0x68>)
    f348:	689b      	ldr	r3, [r3, #8]
    f34a:	695b      	ldr	r3, [r3, #20]
    f34c:	6023      	str	r3, [r4, #0]
		return result;
    f34e:	e7e5      	b.n	f31c <k_mem_slab_alloc+0x34>
    f350:	20020a18 	.word	0x20020a18

0000f354 <z_thread_monitor_exit>:
	__asm__ volatile(
    f354:	f04f 0320 	mov.w	r3, #32
    f358:	f3ef 8111 	mrs	r1, BASEPRI
    f35c:	f383 8812 	msr	BASEPRI_MAX, r3
    f360:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    f364:	4b0a      	ldr	r3, [pc, #40]	; (f390 <z_thread_monitor_exit+0x3c>)
    f366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f368:	4283      	cmp	r3, r0
    f36a:	d104      	bne.n	f376 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    f36c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    f36e:	4b08      	ldr	r3, [pc, #32]	; (f390 <z_thread_monitor_exit+0x3c>)
    f370:	629a      	str	r2, [r3, #40]	; 0x28
    f372:	e007      	b.n	f384 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    f374:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    f376:	b113      	cbz	r3, f37e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    f378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    f37a:	4282      	cmp	r2, r0
    f37c:	d1fa      	bne.n	f374 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    f37e:	b10b      	cbz	r3, f384 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    f380:	6f02      	ldr	r2, [r0, #112]	; 0x70
    f382:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    f384:	f381 8811 	msr	BASEPRI, r1
    f388:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    f38c:	4770      	bx	lr
    f38e:	bf00      	nop
    f390:	20020a18 	.word	0x20020a18

0000f394 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    f394:	b538      	push	{r3, r4, r5, lr}
    f396:	4614      	mov	r4, r2
    f398:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f39a:	ea54 0305 	orrs.w	r3, r4, r5
    f39e:	d102      	bne.n	f3a6 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    f3a0:	f006 fd12 	bl	15dc8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    f3a4:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f3a6:	462b      	mov	r3, r5
    f3a8:	4902      	ldr	r1, [pc, #8]	; (f3b4 <schedule_new_thread+0x20>)
    f3aa:	3018      	adds	r0, #24
    f3ac:	f000 fe2e 	bl	1000c <z_add_timeout>
    f3b0:	e7f8      	b.n	f3a4 <schedule_new_thread+0x10>
    f3b2:	bf00      	nop
    f3b4:	00015eff 	.word	0x00015eff

0000f3b8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3bc:	b085      	sub	sp, #20
    f3be:	4604      	mov	r4, r0
    f3c0:	460f      	mov	r7, r1
    f3c2:	4615      	mov	r5, r2
    f3c4:	461e      	mov	r6, r3
    f3c6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    f3ca:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f3ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    f3d2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f3d6:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f3da:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    f3dc:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    f3de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f3e0:	2204      	movs	r2, #4
    f3e2:	9911      	ldr	r1, [sp, #68]	; 0x44
    f3e4:	f006 fcf4 	bl	15dd0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    f3e8:	462a      	mov	r2, r5
    f3ea:	4639      	mov	r1, r7
    f3ec:	4620      	mov	r0, r4
    f3ee:	f006 fcd9 	bl	15da4 <setup_thread_stack>
    f3f2:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f3f4:	f8cd 8008 	str.w	r8, [sp, #8]
    f3f8:	f8cd 9004 	str.w	r9, [sp, #4]
    f3fc:	f8cd a000 	str.w	sl, [sp]
    f400:	4633      	mov	r3, r6
    f402:	4602      	mov	r2, r0
    f404:	4639      	mov	r1, r7
    f406:	4620      	mov	r0, r4
    f408:	f7f4 ff5a 	bl	42c0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    f40c:	2300      	movs	r3, #0
    f40e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    f410:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    f412:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    f416:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    f41a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    f41e:	f04f 0320 	mov.w	r3, #32
    f422:	f3ef 8211 	mrs	r2, BASEPRI
    f426:	f383 8812 	msr	BASEPRI_MAX, r3
    f42a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    f42e:	4b13      	ldr	r3, [pc, #76]	; (f47c <z_setup_new_thread+0xc4>)
    f430:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f432:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    f434:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    f436:	f382 8811 	msr	BASEPRI, r2
    f43a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    f43e:	f1bb 0f00 	cmp.w	fp, #0
    f442:	d013      	beq.n	f46c <z_setup_new_thread+0xb4>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    f444:	221f      	movs	r2, #31
    f446:	4659      	mov	r1, fp
    f448:	f104 0074 	add.w	r0, r4, #116	; 0x74
    f44c:	f007 f844 	bl	164d8 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    f450:	2300      	movs	r3, #0
    f452:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    f456:	4b09      	ldr	r3, [pc, #36]	; (f47c <z_setup_new_thread+0xc4>)
    f458:	689b      	ldr	r3, [r3, #8]
    f45a:	b15b      	cbz	r3, f474 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    f45c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    f460:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    f464:	4628      	mov	r0, r5
    f466:	b005      	add	sp, #20
    f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    f46c:	2300      	movs	r3, #0
    f46e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    f472:	e7f0      	b.n	f456 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    f474:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    f478:	e7f4      	b.n	f464 <z_setup_new_thread+0xac>
    f47a:	bf00      	nop
    f47c:	20020a18 	.word	0x20020a18

0000f480 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    f480:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    f484:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f486:	4c23      	ldr	r4, [pc, #140]	; (f514 <z_init_static_threads+0x94>)
    f488:	4b23      	ldr	r3, [pc, #140]	; (f518 <z_init_static_threads+0x98>)
    f48a:	429c      	cmp	r4, r3
    f48c:	d215      	bcs.n	f4ba <z_init_static_threads+0x3a>
		z_setup_new_thread(
    f48e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f490:	9305      	str	r3, [sp, #20]
    f492:	6a23      	ldr	r3, [r4, #32]
    f494:	9304      	str	r3, [sp, #16]
    f496:	69e3      	ldr	r3, [r4, #28]
    f498:	9303      	str	r3, [sp, #12]
    f49a:	69a3      	ldr	r3, [r4, #24]
    f49c:	9302      	str	r3, [sp, #8]
    f49e:	6963      	ldr	r3, [r4, #20]
    f4a0:	9301      	str	r3, [sp, #4]
    f4a2:	6923      	ldr	r3, [r4, #16]
    f4a4:	9300      	str	r3, [sp, #0]
    f4a6:	68e3      	ldr	r3, [r4, #12]
    f4a8:	68a2      	ldr	r2, [r4, #8]
    f4aa:	6861      	ldr	r1, [r4, #4]
    f4ac:	6820      	ldr	r0, [r4, #0]
    f4ae:	f7ff ff83 	bl	f3b8 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    f4b2:	6823      	ldr	r3, [r4, #0]
    f4b4:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f4b6:	3430      	adds	r4, #48	; 0x30
    f4b8:	e7e6      	b.n	f488 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    f4ba:	f000 f9d7 	bl	f86c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f4be:	4c15      	ldr	r4, [pc, #84]	; (f514 <z_init_static_threads+0x94>)
    f4c0:	e01b      	b.n	f4fa <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    f4c2:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    f4c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f4c8:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
    f4cc:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    f4d0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    f4d4:	03d8      	lsls	r0, r3, #15
    f4d6:	f240 35e7 	movw	r5, #999	; 0x3e7
    f4da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f4de:	2300      	movs	r3, #0
    f4e0:	1940      	adds	r0, r0, r5
    f4e2:	f04f 0500 	mov.w	r5, #0
    f4e6:	eb45 0101 	adc.w	r1, r5, r1
    f4ea:	f7f1 fdfd 	bl	10e8 <__aeabi_uldivmod>
    f4ee:	4602      	mov	r2, r0
    f4f0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    f4f2:	4630      	mov	r0, r6
    f4f4:	f7ff ff4e 	bl	f394 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    f4f8:	3430      	adds	r4, #48	; 0x30
    f4fa:	4b07      	ldr	r3, [pc, #28]	; (f518 <z_init_static_threads+0x98>)
    f4fc:	429c      	cmp	r4, r3
    f4fe:	d204      	bcs.n	f50a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f500:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f502:	f1b3 3fff 	cmp.w	r3, #4294967295
    f506:	d0f7      	beq.n	f4f8 <z_init_static_threads+0x78>
    f508:	e7db      	b.n	f4c2 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    f50a:	f000 fbad 	bl	fc68 <k_sched_unlock>
}
    f50e:	b006      	add	sp, #24
    f510:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    f514:	200002b4 	.word	0x200002b4
    f518:	200002b4 	.word	0x200002b4

0000f51c <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    f51c:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    f51e:	f006 fdcd 	bl	160bc <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    f522:	4b04      	ldr	r3, [pc, #16]	; (f534 <pm_save_idle+0x18>)
    f524:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    f526:	f7f4 fcb1 	bl	3e8c <pm_system_suspend>
    f52a:	b100      	cbz	r0, f52e <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    f52c:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    f52e:	f7f4 fe01 	bl	4134 <arch_cpu_idle>
    f532:	e7fb      	b.n	f52c <pm_save_idle+0x10>
    f534:	20020a18 	.word	0x20020a18

0000f538 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f53c:	b083      	sub	sp, #12
    f53e:	4604      	mov	r4, r0
    f540:	461d      	mov	r5, r3
	__asm__ volatile(
    f542:	f04f 0320 	mov.w	r3, #32
    f546:	f3ef 8711 	mrs	r7, BASEPRI
    f54a:	f383 8812 	msr	BASEPRI_MAX, r3
    f54e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f552:	68c1      	ldr	r1, [r0, #12]
    f554:	b999      	cbnz	r1, f57e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    f556:	2900      	cmp	r1, #0
    f558:	d14f      	bne.n	f5fa <z_impl_k_mutex_lock+0xc2>
    f55a:	4b3a      	ldr	r3, [pc, #232]	; (f644 <z_impl_k_mutex_lock+0x10c>)
    f55c:	689b      	ldr	r3, [r3, #8]
    f55e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f562:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    f564:	3101      	adds	r1, #1
    f566:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    f568:	4b36      	ldr	r3, [pc, #216]	; (f644 <z_impl_k_mutex_lock+0x10c>)
    f56a:	689b      	ldr	r3, [r3, #8]
    f56c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    f56e:	f387 8811 	msr	BASEPRI, r7
    f572:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    f576:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f578:	b003      	add	sp, #12
    f57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f57e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f580:	6882      	ldr	r2, [r0, #8]
    f582:	4b30      	ldr	r3, [pc, #192]	; (f644 <z_impl_k_mutex_lock+0x10c>)
    f584:	689b      	ldr	r3, [r3, #8]
    f586:	429a      	cmp	r2, r3
    f588:	d0e5      	beq.n	f556 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f58a:	ea55 0106 	orrs.w	r1, r5, r6
    f58e:	bf0c      	ite	eq
    f590:	f04f 0801 	moveq.w	r8, #1
    f594:	f04f 0800 	movne.w	r8, #0
    f598:	d031      	beq.n	f5fe <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    f59a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f59e:	4649      	mov	r1, r9
    f5a0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f5a4:	f006 fc31 	bl	15e0a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f5a8:	4581      	cmp	r9, r0
    f5aa:	dc2f      	bgt.n	f60c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    f5ac:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f5b0:	9600      	str	r6, [sp, #0]
    f5b2:	9501      	str	r5, [sp, #4]
    f5b4:	4622      	mov	r2, r4
    f5b6:	4639      	mov	r1, r7
    f5b8:	4823      	ldr	r0, [pc, #140]	; (f648 <z_impl_k_mutex_lock+0x110>)
    f5ba:	f000 fa9f 	bl	fafc <z_pend_curr>
	if (got_mutex == 0) {
    f5be:	2800      	cmp	r0, #0
    f5c0:	d0da      	beq.n	f578 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    f5c2:	f04f 0320 	mov.w	r3, #32
    f5c6:	f3ef 8511 	mrs	r5, BASEPRI
    f5ca:	f383 8812 	msr	BASEPRI_MAX, r3
    f5ce:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f5d2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f5d4:	429c      	cmp	r4, r3
    f5d6:	d01f      	beq.n	f618 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f5d8:	b1f3      	cbz	r3, f618 <z_impl_k_mutex_lock+0xe0>
    f5da:	6921      	ldr	r1, [r4, #16]
    f5dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f5e0:	f006 fc13 	bl	15e0a <new_prio_for_inheritance>
    f5e4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f5e6:	4620      	mov	r0, r4
    f5e8:	f006 fc1a 	bl	15e20 <adjust_owner_prio>
    f5ec:	b9b0      	cbnz	r0, f61c <z_impl_k_mutex_lock+0xe4>
    f5ee:	f1b9 0f00 	cmp.w	r9, #0
    f5f2:	d015      	beq.n	f620 <z_impl_k_mutex_lock+0xe8>
    f5f4:	f04f 0801 	mov.w	r8, #1
    f5f8:	e012      	b.n	f620 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    f5fa:	6923      	ldr	r3, [r4, #16]
    f5fc:	e7b1      	b.n	f562 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    f5fe:	f387 8811 	msr	BASEPRI, r7
    f602:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    f606:	f06f 000f 	mvn.w	r0, #15
    f60a:	e7b5      	b.n	f578 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    f60c:	4601      	mov	r1, r0
    f60e:	4620      	mov	r0, r4
    f610:	f006 fc06 	bl	15e20 <adjust_owner_prio>
    f614:	4681      	mov	r9, r0
    f616:	e7cb      	b.n	f5b0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f618:	6921      	ldr	r1, [r4, #16]
    f61a:	e7e4      	b.n	f5e6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f61c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    f620:	f1b8 0f00 	cmp.w	r8, #0
    f624:	d106      	bne.n	f634 <z_impl_k_mutex_lock+0xfc>
    f626:	f385 8811 	msr	BASEPRI, r5
    f62a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    f62e:	f06f 000a 	mvn.w	r0, #10
    f632:	e7a1      	b.n	f578 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    f634:	4629      	mov	r1, r5
    f636:	4804      	ldr	r0, [pc, #16]	; (f648 <z_impl_k_mutex_lock+0x110>)
    f638:	f000 f8fc 	bl	f834 <z_reschedule>
	return -EAGAIN;
    f63c:	f06f 000a 	mvn.w	r0, #10
    f640:	e79a      	b.n	f578 <z_impl_k_mutex_lock+0x40>
    f642:	bf00      	nop
    f644:	20020a18 	.word	0x20020a18
    f648:	20020a44 	.word	0x20020a44

0000f64c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f64c:	6882      	ldr	r2, [r0, #8]
    f64e:	2a00      	cmp	r2, #0
    f650:	d035      	beq.n	f6be <z_impl_k_mutex_unlock+0x72>
{
    f652:	b538      	push	{r3, r4, r5, lr}
    f654:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f656:	4b1d      	ldr	r3, [pc, #116]	; (f6cc <z_impl_k_mutex_unlock+0x80>)
    f658:	689b      	ldr	r3, [r3, #8]
    f65a:	429a      	cmp	r2, r3
    f65c:	d132      	bne.n	f6c4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    f65e:	7bda      	ldrb	r2, [r3, #15]
    f660:	3a01      	subs	r2, #1
    f662:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f664:	68c3      	ldr	r3, [r0, #12]
    f666:	2b01      	cmp	r3, #1
    f668:	d905      	bls.n	f676 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    f66a:	3b01      	subs	r3, #1
    f66c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    f66e:	f000 fafb 	bl	fc68 <k_sched_unlock>

	return 0;
    f672:	2000      	movs	r0, #0
}
    f674:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f676:	f04f 0320 	mov.w	r3, #32
    f67a:	f3ef 8511 	mrs	r5, BASEPRI
    f67e:	f383 8812 	msr	BASEPRI_MAX, r3
    f682:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f686:	6901      	ldr	r1, [r0, #16]
    f688:	f006 fbca 	bl	15e20 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f68c:	4620      	mov	r0, r4
    f68e:	f006 fcb5 	bl	15ffc <z_unpend_first_thread>
	mutex->owner = new_owner;
    f692:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f694:	b160      	cbz	r0, f6b0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    f696:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f69a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f69c:	2300      	movs	r3, #0
    f69e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    f6a2:	f006 fc10 	bl	15ec6 <z_ready_thread>
		z_reschedule(&lock, key);
    f6a6:	4629      	mov	r1, r5
    f6a8:	4809      	ldr	r0, [pc, #36]	; (f6d0 <z_impl_k_mutex_unlock+0x84>)
    f6aa:	f000 f8c3 	bl	f834 <z_reschedule>
    f6ae:	e7de      	b.n	f66e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    f6b0:	2300      	movs	r3, #0
    f6b2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    f6b4:	f385 8811 	msr	BASEPRI, r5
    f6b8:	f3bf 8f6f 	isb	sy
    f6bc:	e7d7      	b.n	f66e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    f6be:	f06f 0015 	mvn.w	r0, #21
}
    f6c2:	4770      	bx	lr
		return -EPERM;
    f6c4:	f04f 30ff 	mov.w	r0, #4294967295
    f6c8:	e7d4      	b.n	f674 <z_impl_k_mutex_unlock+0x28>
    f6ca:	bf00      	nop
    f6cc:	20020a18 	.word	0x20020a18
    f6d0:	20020a44 	.word	0x20020a44

0000f6d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f6d4:	b538      	push	{r3, r4, r5, lr}
    f6d6:	4604      	mov	r4, r0
	__asm__ volatile(
    f6d8:	f04f 0320 	mov.w	r3, #32
    f6dc:	f3ef 8511 	mrs	r5, BASEPRI
    f6e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f6e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f6e8:	f006 fc88 	bl	15ffc <z_unpend_first_thread>

	if (thread != NULL) {
    f6ec:	b148      	cbz	r0, f702 <z_impl_k_sem_give+0x2e>
    f6ee:	2200      	movs	r2, #0
    f6f0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f6f4:	f006 fbe7 	bl	15ec6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f6f8:	4629      	mov	r1, r5
    f6fa:	4807      	ldr	r0, [pc, #28]	; (f718 <z_impl_k_sem_give+0x44>)
    f6fc:	f000 f89a 	bl	f834 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f700:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f702:	68a3      	ldr	r3, [r4, #8]
    f704:	68e2      	ldr	r2, [r4, #12]
    f706:	4293      	cmp	r3, r2
    f708:	d003      	beq.n	f712 <z_impl_k_sem_give+0x3e>
    f70a:	2201      	movs	r2, #1
    f70c:	4413      	add	r3, r2
    f70e:	60a3      	str	r3, [r4, #8]
}
    f710:	e7f2      	b.n	f6f8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f712:	2200      	movs	r2, #0
    f714:	e7fa      	b.n	f70c <z_impl_k_sem_give+0x38>
    f716:	bf00      	nop
    f718:	20020a48 	.word	0x20020a48

0000f71c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f71c:	b530      	push	{r4, r5, lr}
    f71e:	b083      	sub	sp, #12
    f720:	461d      	mov	r5, r3
    f722:	f04f 0320 	mov.w	r3, #32
    f726:	f3ef 8111 	mrs	r1, BASEPRI
    f72a:	f383 8812 	msr	BASEPRI_MAX, r3
    f72e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    f732:	6883      	ldr	r3, [r0, #8]
    f734:	b143      	cbz	r3, f748 <z_impl_k_sem_take+0x2c>
		sem->count--;
    f736:	3b01      	subs	r3, #1
    f738:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f73a:	f381 8811 	msr	BASEPRI, r1
    f73e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f742:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    f744:	b003      	add	sp, #12
    f746:	bd30      	pop	{r4, r5, pc}
    f748:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f74a:	ea54 0305 	orrs.w	r3, r4, r5
    f74e:	d006      	beq.n	f75e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f750:	e9cd 4500 	strd	r4, r5, [sp]
    f754:	4602      	mov	r2, r0
    f756:	4805      	ldr	r0, [pc, #20]	; (f76c <z_impl_k_sem_take+0x50>)
    f758:	f000 f9d0 	bl	fafc <z_pend_curr>
	return ret;
    f75c:	e7f2      	b.n	f744 <z_impl_k_sem_take+0x28>
    f75e:	f381 8811 	msr	BASEPRI, r1
    f762:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f766:	f06f 000f 	mvn.w	r0, #15
    f76a:	e7eb      	b.n	f744 <z_impl_k_sem_take+0x28>
    f76c:	20020a48 	.word	0x20020a48

0000f770 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    f770:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f772:	f1b3 3fff 	cmp.w	r3, #4294967295
    f776:	bf08      	it	eq
    f778:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    f77c:	d100      	bne.n	f780 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    f77e:	bd38      	pop	{r3, r4, r5, pc}
    f780:	4902      	ldr	r1, [pc, #8]	; (f78c <add_thread_timeout+0x1c>)
    f782:	3018      	adds	r0, #24
    f784:	f000 fc42 	bl	1000c <z_add_timeout>
    f788:	e7f9      	b.n	f77e <add_thread_timeout+0xe>
    f78a:	bf00      	nop
    f78c:	00015eff 	.word	0x00015eff

0000f790 <z_reset_time_slice>:
{
    f790:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    f792:	4b08      	ldr	r3, [pc, #32]	; (f7b4 <z_reset_time_slice+0x24>)
    f794:	681b      	ldr	r3, [r3, #0]
    f796:	b903      	cbnz	r3, f79a <z_reset_time_slice+0xa>
}
    f798:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    f79a:	f7f6 fa5b 	bl	5c54 <sys_clock_elapsed>
    f79e:	4603      	mov	r3, r0
    f7a0:	4a04      	ldr	r2, [pc, #16]	; (f7b4 <z_reset_time_slice+0x24>)
    f7a2:	6810      	ldr	r0, [r2, #0]
    f7a4:	4403      	add	r3, r0
    f7a6:	4a04      	ldr	r2, [pc, #16]	; (f7b8 <z_reset_time_slice+0x28>)
    f7a8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    f7aa:	2100      	movs	r1, #0
    f7ac:	f006 fc9c 	bl	160e8 <z_set_timeout_expiry>
}
    f7b0:	e7f2      	b.n	f798 <z_reset_time_slice+0x8>
    f7b2:	bf00      	nop
    f7b4:	20020a58 	.word	0x20020a58
    f7b8:	20020a18 	.word	0x20020a18

0000f7bc <k_sched_time_slice_set>:
{
    f7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7c0:	4606      	mov	r6, r0
    f7c2:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    f7c4:	2300      	movs	r3, #0
	__asm__ volatile(
    f7c6:	f04f 0220 	mov.w	r2, #32
    f7ca:	f3ef 8711 	mrs	r7, BASEPRI
    f7ce:	f382 8812 	msr	BASEPRI_MAX, r2
    f7d2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f7d6:	e009      	b.n	f7ec <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    f7d8:	4b13      	ldr	r3, [pc, #76]	; (f828 <k_sched_time_slice_set+0x6c>)
    f7da:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    f7de:	f7ff ffd7 	bl	f790 <z_reset_time_slice>
	__asm__ volatile(
    f7e2:	f387 8811 	msr	BASEPRI, r7
    f7e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    f7ea:	2301      	movs	r3, #1
    f7ec:	b9cb      	cbnz	r3, f822 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    f7ee:	2300      	movs	r3, #0
    f7f0:	4a0e      	ldr	r2, [pc, #56]	; (f82c <k_sched_time_slice_set+0x70>)
    f7f2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    f7f4:	0c75      	lsrs	r5, r6, #17
    f7f6:	03f4      	lsls	r4, r6, #15
    f7f8:	f240 30e7 	movw	r0, #999	; 0x3e7
    f7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f800:	2300      	movs	r3, #0
    f802:	1820      	adds	r0, r4, r0
    f804:	f04f 0100 	mov.w	r1, #0
    f808:	eb45 0101 	adc.w	r1, r5, r1
    f80c:	f7f1 fc6c 	bl	10e8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    f810:	4b07      	ldr	r3, [pc, #28]	; (f830 <k_sched_time_slice_set+0x74>)
    f812:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    f814:	2e00      	cmp	r6, #0
    f816:	dddf      	ble.n	f7d8 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    f818:	2802      	cmp	r0, #2
    f81a:	bfb8      	it	lt
    f81c:	2002      	movlt	r0, #2
    f81e:	6018      	str	r0, [r3, #0]
    f820:	e7da      	b.n	f7d8 <k_sched_time_slice_set+0x1c>
}
    f822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f826:	bf00      	nop
    f828:	20020a54 	.word	0x20020a54
    f82c:	20020a18 	.word	0x20020a18
    f830:	20020a58 	.word	0x20020a58

0000f834 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    f834:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    f836:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f838:	b921      	cbnz	r1, f844 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f83a:	f3ef 8305 	mrs	r3, IPSR
    f83e:	b913      	cbnz	r3, f846 <z_reschedule+0x12>
    f840:	2101      	movs	r1, #1
    f842:	e000      	b.n	f846 <z_reschedule+0x12>
    f844:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    f846:	f011 0f01 	tst.w	r1, #1
    f84a:	d007      	beq.n	f85c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    f84c:	4b06      	ldr	r3, [pc, #24]	; (f868 <z_reschedule+0x34>)
    f84e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    f850:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    f852:	429a      	cmp	r2, r3
    f854:	d002      	beq.n	f85c <z_reschedule+0x28>
	ret = arch_swap(key);
    f856:	f7f4 fcd9 	bl	420c <arch_swap>
		z_swap(lock, key);
    f85a:	e003      	b.n	f864 <z_reschedule+0x30>
    f85c:	f380 8811 	msr	BASEPRI, r0
    f860:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    f864:	bd08      	pop	{r3, pc}
    f866:	bf00      	nop
    f868:	20020a18 	.word	0x20020a18

0000f86c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    f86c:	2300      	movs	r3, #0
	__asm__ volatile(
    f86e:	f04f 0220 	mov.w	r2, #32
    f872:	f3ef 8111 	mrs	r1, BASEPRI
    f876:	f382 8812 	msr	BASEPRI_MAX, r2
    f87a:	f3bf 8f6f 	isb	sy
    f87e:	b953      	cbnz	r3, f896 <k_sched_lock+0x2a>
    f880:	4b05      	ldr	r3, [pc, #20]	; (f898 <k_sched_lock+0x2c>)
    f882:	689a      	ldr	r2, [r3, #8]
    f884:	7bd3      	ldrb	r3, [r2, #15]
    f886:	3b01      	subs	r3, #1
    f888:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    f88a:	f381 8811 	msr	BASEPRI, r1
    f88e:	f3bf 8f6f 	isb	sy
    f892:	2301      	movs	r3, #1
    f894:	e7f3      	b.n	f87e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    f896:	4770      	bx	lr
    f898:	20020a18 	.word	0x20020a18

0000f89c <update_cache>:
{
    f89c:	b538      	push	{r3, r4, r5, lr}
    f89e:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    f8a0:	480f      	ldr	r0, [pc, #60]	; (f8e0 <update_cache+0x44>)
    f8a2:	f006 fb09 	bl	15eb8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f8a6:	4605      	mov	r5, r0
    f8a8:	b170      	cbz	r0, f8c8 <update_cache+0x2c>
	if (preempt_ok != 0) {
    f8aa:	b984      	cbnz	r4, f8ce <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    f8ac:	4b0d      	ldr	r3, [pc, #52]	; (f8e4 <update_cache+0x48>)
    f8ae:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    f8b0:	7b5a      	ldrb	r2, [r3, #13]
    f8b2:	f012 0f1f 	tst.w	r2, #31
    f8b6:	d10a      	bne.n	f8ce <update_cache+0x32>
	return node->next != NULL;
    f8b8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    f8ba:	b942      	cbnz	r2, f8ce <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f8bc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    f8be:	2a7f      	cmp	r2, #127	; 0x7f
    f8c0:	d905      	bls.n	f8ce <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    f8c2:	4a08      	ldr	r2, [pc, #32]	; (f8e4 <update_cache+0x48>)
    f8c4:	61d3      	str	r3, [r2, #28]
    f8c6:	e00a      	b.n	f8de <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    f8c8:	4b06      	ldr	r3, [pc, #24]	; (f8e4 <update_cache+0x48>)
    f8ca:	68dd      	ldr	r5, [r3, #12]
    f8cc:	e7ed      	b.n	f8aa <update_cache+0xe>
		if (thread != _current) {
    f8ce:	4b05      	ldr	r3, [pc, #20]	; (f8e4 <update_cache+0x48>)
    f8d0:	689b      	ldr	r3, [r3, #8]
    f8d2:	42ab      	cmp	r3, r5
    f8d4:	d001      	beq.n	f8da <update_cache+0x3e>
			z_reset_time_slice();
    f8d6:	f7ff ff5b 	bl	f790 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    f8da:	4b02      	ldr	r3, [pc, #8]	; (f8e4 <update_cache+0x48>)
    f8dc:	61dd      	str	r5, [r3, #28]
}
    f8de:	bd38      	pop	{r3, r4, r5, pc}
    f8e0:	20020a38 	.word	0x20020a38
    f8e4:	20020a18 	.word	0x20020a18

0000f8e8 <move_thread_to_end_of_prio_q>:
{
    f8e8:	b538      	push	{r3, r4, r5, lr}
    f8ea:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    f8ec:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    f8ee:	f990 300d 	ldrsb.w	r3, [r0, #13]
    f8f2:	2b00      	cmp	r3, #0
    f8f4:	db28      	blt.n	f948 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    f8f6:	7b6b      	ldrb	r3, [r5, #13]
    f8f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f8fc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    f8fe:	4b1a      	ldr	r3, [pc, #104]	; (f968 <move_thread_to_end_of_prio_q+0x80>)
    f900:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f904:	429c      	cmp	r4, r3
    f906:	d02d      	beq.n	f964 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f908:	b16c      	cbz	r4, f926 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f90a:	4621      	mov	r1, r4
    f90c:	4628      	mov	r0, r5
    f90e:	f006 faac 	bl	15e6a <z_sched_prio_cmp>
    f912:	2800      	cmp	r0, #0
    f914:	dc20      	bgt.n	f958 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f916:	b134      	cbz	r4, f926 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    f918:	4b13      	ldr	r3, [pc, #76]	; (f968 <move_thread_to_end_of_prio_q+0x80>)
    f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f91c:	429c      	cmp	r4, r3
    f91e:	d002      	beq.n	f926 <move_thread_to_end_of_prio_q+0x3e>
    f920:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f922:	2c00      	cmp	r4, #0
    f924:	d1f0      	bne.n	f908 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    f926:	4b10      	ldr	r3, [pc, #64]	; (f968 <move_thread_to_end_of_prio_q+0x80>)
    f928:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    f92a:	f103 0120 	add.w	r1, r3, #32
    f92e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    f930:	606a      	str	r2, [r5, #4]

	tail->next = node;
    f932:	6015      	str	r5, [r2, #0]
	list->tail = node;
    f934:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    f936:	4b0c      	ldr	r3, [pc, #48]	; (f968 <move_thread_to_end_of_prio_q+0x80>)
    f938:	6898      	ldr	r0, [r3, #8]
    f93a:	42a8      	cmp	r0, r5
    f93c:	bf14      	ite	ne
    f93e:	2000      	movne	r0, #0
    f940:	2001      	moveq	r0, #1
    f942:	f7ff ffab 	bl	f89c <update_cache>
}
    f946:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    f948:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    f94c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    f94e:	4601      	mov	r1, r0
    f950:	4806      	ldr	r0, [pc, #24]	; (f96c <move_thread_to_end_of_prio_q+0x84>)
    f952:	f006 faa9 	bl	15ea8 <z_priq_dumb_remove>
}
    f956:	e7ce      	b.n	f8f6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    f958:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    f95a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    f95c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    f95e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    f960:	6065      	str	r5, [r4, #4]
}
    f962:	e7e8      	b.n	f936 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f964:	2400      	movs	r4, #0
    f966:	e7cf      	b.n	f908 <move_thread_to_end_of_prio_q+0x20>
    f968:	20020a18 	.word	0x20020a18
    f96c:	20020a38 	.word	0x20020a38

0000f970 <z_time_slice>:
{
    f970:	b510      	push	{r4, lr}
	__asm__ volatile(
    f972:	f04f 0320 	mov.w	r3, #32
    f976:	f3ef 8411 	mrs	r4, BASEPRI
    f97a:	f383 8812 	msr	BASEPRI_MAX, r3
    f97e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    f982:	4b1c      	ldr	r3, [pc, #112]	; (f9f4 <z_time_slice+0x84>)
    f984:	689b      	ldr	r3, [r3, #8]
    f986:	4a1c      	ldr	r2, [pc, #112]	; (f9f8 <z_time_slice+0x88>)
    f988:	6812      	ldr	r2, [r2, #0]
    f98a:	4293      	cmp	r3, r2
    f98c:	d01d      	beq.n	f9ca <z_time_slice+0x5a>
	pending_current = NULL;
    f98e:	4a1a      	ldr	r2, [pc, #104]	; (f9f8 <z_time_slice+0x88>)
    f990:	2100      	movs	r1, #0
    f992:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    f994:	4a19      	ldr	r2, [pc, #100]	; (f9fc <z_time_slice+0x8c>)
    f996:	6812      	ldr	r2, [r2, #0]
    f998:	b322      	cbz	r2, f9e4 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    f99a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    f99c:	2a7f      	cmp	r2, #127	; 0x7f
    f99e:	d821      	bhi.n	f9e4 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    f9a0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    f9a2:	f012 0f1f 	tst.w	r2, #31
    f9a6:	d11d      	bne.n	f9e4 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    f9a8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    f9ac:	4a14      	ldr	r2, [pc, #80]	; (fa00 <z_time_slice+0x90>)
    f9ae:	6812      	ldr	r2, [r2, #0]
    f9b0:	4291      	cmp	r1, r2
    f9b2:	db17      	blt.n	f9e4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    f9b4:	4a13      	ldr	r2, [pc, #76]	; (fa04 <z_time_slice+0x94>)
    f9b6:	4293      	cmp	r3, r2
    f9b8:	d014      	beq.n	f9e4 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    f9ba:	4a0e      	ldr	r2, [pc, #56]	; (f9f4 <z_time_slice+0x84>)
    f9bc:	6912      	ldr	r2, [r2, #16]
    f9be:	4282      	cmp	r2, r0
    f9c0:	dd0a      	ble.n	f9d8 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    f9c2:	1a10      	subs	r0, r2, r0
    f9c4:	4b0b      	ldr	r3, [pc, #44]	; (f9f4 <z_time_slice+0x84>)
    f9c6:	6118      	str	r0, [r3, #16]
    f9c8:	e00f      	b.n	f9ea <z_time_slice+0x7a>
		z_reset_time_slice();
    f9ca:	f7ff fee1 	bl	f790 <z_reset_time_slice>
	__asm__ volatile(
    f9ce:	f384 8811 	msr	BASEPRI, r4
    f9d2:	f3bf 8f6f 	isb	sy
		return;
    f9d6:	e00c      	b.n	f9f2 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    f9d8:	4618      	mov	r0, r3
    f9da:	f7ff ff85 	bl	f8e8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    f9de:	f7ff fed7 	bl	f790 <z_reset_time_slice>
    f9e2:	e002      	b.n	f9ea <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    f9e4:	4b03      	ldr	r3, [pc, #12]	; (f9f4 <z_time_slice+0x84>)
    f9e6:	2200      	movs	r2, #0
    f9e8:	611a      	str	r2, [r3, #16]
    f9ea:	f384 8811 	msr	BASEPRI, r4
    f9ee:	f3bf 8f6f 	isb	sy
}
    f9f2:	bd10      	pop	{r4, pc}
    f9f4:	20020a18 	.word	0x20020a18
    f9f8:	20020a4c 	.word	0x20020a4c
    f9fc:	20020a58 	.word	0x20020a58
    fa00:	20020a54 	.word	0x20020a54
    fa04:	20000360 	.word	0x20000360

0000fa08 <ready_thread>:
{
    fa08:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    fa0a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    fa0c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    fa10:	2a00      	cmp	r2, #0
    fa12:	db2d      	blt.n	fa70 <ready_thread+0x68>
    fa14:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fa16:	f013 0f1f 	tst.w	r3, #31
    fa1a:	d105      	bne.n	fa28 <ready_thread+0x20>
	return node->next != NULL;
    fa1c:	6982      	ldr	r2, [r0, #24]
    fa1e:	b10a      	cbz	r2, fa24 <ready_thread+0x1c>
    fa20:	2200      	movs	r2, #0
    fa22:	e002      	b.n	fa2a <ready_thread+0x22>
    fa24:	2201      	movs	r2, #1
    fa26:	e000      	b.n	fa2a <ready_thread+0x22>
    fa28:	2200      	movs	r2, #0
    fa2a:	b30a      	cbz	r2, fa70 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    fa2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa30:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    fa32:	4b14      	ldr	r3, [pc, #80]	; (fa84 <ready_thread+0x7c>)
    fa34:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fa38:	429d      	cmp	r5, r3
    fa3a:	d020      	beq.n	fa7e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa3c:	b16d      	cbz	r5, fa5a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fa3e:	4629      	mov	r1, r5
    fa40:	4620      	mov	r0, r4
    fa42:	f006 fa12 	bl	15e6a <z_sched_prio_cmp>
    fa46:	2800      	cmp	r0, #0
    fa48:	dc13      	bgt.n	fa72 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fa4a:	b135      	cbz	r5, fa5a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    fa4c:	4b0d      	ldr	r3, [pc, #52]	; (fa84 <ready_thread+0x7c>)
    fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fa50:	429d      	cmp	r5, r3
    fa52:	d002      	beq.n	fa5a <ready_thread+0x52>
    fa54:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa56:	2d00      	cmp	r5, #0
    fa58:	d1f0      	bne.n	fa3c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    fa5a:	4b0a      	ldr	r3, [pc, #40]	; (fa84 <ready_thread+0x7c>)
    fa5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fa5e:	f103 0120 	add.w	r1, r3, #32
    fa62:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    fa64:	6062      	str	r2, [r4, #4]
	tail->next = node;
    fa66:	6014      	str	r4, [r2, #0]
	list->tail = node;
    fa68:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    fa6a:	2000      	movs	r0, #0
    fa6c:	f7ff ff16 	bl	f89c <update_cache>
}
    fa70:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    fa72:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    fa74:	6063      	str	r3, [r4, #4]
	node->next = successor;
    fa76:	6025      	str	r5, [r4, #0]
	prev->next = node;
    fa78:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    fa7a:	606c      	str	r4, [r5, #4]
}
    fa7c:	e7f5      	b.n	fa6a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fa7e:	2500      	movs	r5, #0
    fa80:	e7dc      	b.n	fa3c <ready_thread+0x34>
    fa82:	bf00      	nop
    fa84:	20020a18 	.word	0x20020a18

0000fa88 <z_sched_start>:
{
    fa88:	b510      	push	{r4, lr}
	__asm__ volatile(
    fa8a:	f04f 0320 	mov.w	r3, #32
    fa8e:	f3ef 8411 	mrs	r4, BASEPRI
    fa92:	f383 8812 	msr	BASEPRI_MAX, r3
    fa96:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    fa9a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    fa9c:	f013 0f04 	tst.w	r3, #4
    faa0:	d104      	bne.n	faac <z_sched_start+0x24>
	__asm__ volatile(
    faa2:	f384 8811 	msr	BASEPRI, r4
    faa6:	f3bf 8f6f 	isb	sy
}
    faaa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    faac:	f023 0304 	bic.w	r3, r3, #4
    fab0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    fab2:	f7ff ffa9 	bl	fa08 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    fab6:	4621      	mov	r1, r4
    fab8:	4801      	ldr	r0, [pc, #4]	; (fac0 <z_sched_start+0x38>)
    faba:	f7ff febb 	bl	f834 <z_reschedule>
    fabe:	e7f4      	b.n	faaa <z_sched_start+0x22>
    fac0:	20020a50 	.word	0x20020a50

0000fac4 <unready_thread>:
{
    fac4:	b510      	push	{r4, lr}
    fac6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    fac8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    faca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    face:	2b00      	cmp	r3, #0
    fad0:	db08      	blt.n	fae4 <unready_thread+0x20>
	update_cache(thread == _current);
    fad2:	4b08      	ldr	r3, [pc, #32]	; (faf4 <unready_thread+0x30>)
    fad4:	6898      	ldr	r0, [r3, #8]
    fad6:	42a0      	cmp	r0, r4
    fad8:	bf14      	ite	ne
    fada:	2000      	movne	r0, #0
    fadc:	2001      	moveq	r0, #1
    fade:	f7ff fedd 	bl	f89c <update_cache>
}
    fae2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fae8:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    faea:	4601      	mov	r1, r0
    faec:	4802      	ldr	r0, [pc, #8]	; (faf8 <unready_thread+0x34>)
    faee:	f006 f9db 	bl	15ea8 <z_priq_dumb_remove>
}
    faf2:	e7ee      	b.n	fad2 <unready_thread+0xe>
    faf4:	20020a18 	.word	0x20020a18
    faf8:	20020a38 	.word	0x20020a38

0000fafc <z_pend_curr>:
{
    fafc:	b510      	push	{r4, lr}
    fafe:	460c      	mov	r4, r1
    fb00:	4611      	mov	r1, r2
	pending_current = _current;
    fb02:	4b06      	ldr	r3, [pc, #24]	; (fb1c <z_pend_curr+0x20>)
    fb04:	6898      	ldr	r0, [r3, #8]
    fb06:	4b06      	ldr	r3, [pc, #24]	; (fb20 <z_pend_curr+0x24>)
    fb08:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    fb0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    fb0e:	f006 fa54 	bl	15fba <pend>
    fb12:	4620      	mov	r0, r4
    fb14:	f7f4 fb7a 	bl	420c <arch_swap>
}
    fb18:	bd10      	pop	{r4, pc}
    fb1a:	bf00      	nop
    fb1c:	20020a18 	.word	0x20020a18
    fb20:	20020a4c 	.word	0x20020a4c

0000fb24 <z_set_prio>:
{
    fb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb28:	4604      	mov	r4, r0
    fb2a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    fb2c:	2300      	movs	r3, #0
	__asm__ volatile(
    fb2e:	f04f 0220 	mov.w	r2, #32
    fb32:	f3ef 8611 	mrs	r6, BASEPRI
    fb36:	f382 8812 	msr	BASEPRI_MAX, r2
    fb3a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    fb3e:	4698      	mov	r8, r3
    fb40:	e008      	b.n	fb54 <z_set_prio+0x30>
		if (need_sched) {
    fb42:	f012 0801 	ands.w	r8, r2, #1
    fb46:	d111      	bne.n	fb6c <z_set_prio+0x48>
			thread->base.prio = prio;
    fb48:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    fb4a:	f386 8811 	msr	BASEPRI, r6
    fb4e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fb52:	2301      	movs	r3, #1
    fb54:	461a      	mov	r2, r3
    fb56:	2b00      	cmp	r3, #0
    fb58:	d13d      	bne.n	fbd6 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    fb5a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fb5c:	f013 0f1f 	tst.w	r3, #31
    fb60:	d1ef      	bne.n	fb42 <z_set_prio+0x1e>
	return node->next != NULL;
    fb62:	69a1      	ldr	r1, [r4, #24]
    fb64:	2900      	cmp	r1, #0
    fb66:	d1ec      	bne.n	fb42 <z_set_prio+0x1e>
    fb68:	2201      	movs	r2, #1
    fb6a:	e7ea      	b.n	fb42 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fb6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fb70:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    fb72:	f8df 906c 	ldr.w	r9, [pc, #108]	; fbe0 <z_set_prio+0xbc>
    fb76:	4621      	mov	r1, r4
    fb78:	4648      	mov	r0, r9
    fb7a:	f006 f995 	bl	15ea8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    fb7e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    fb80:	7b63      	ldrb	r3, [r4, #13]
    fb82:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fb86:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    fb88:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb8c:	454d      	cmp	r5, r9
    fb8e:	d020      	beq.n	fbd2 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fb90:	b16d      	cbz	r5, fbae <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fb92:	4629      	mov	r1, r5
    fb94:	4620      	mov	r0, r4
    fb96:	f006 f968 	bl	15e6a <z_sched_prio_cmp>
    fb9a:	2800      	cmp	r0, #0
    fb9c:	dc13      	bgt.n	fbc6 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fb9e:	b135      	cbz	r5, fbae <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    fba0:	4b0e      	ldr	r3, [pc, #56]	; (fbdc <z_set_prio+0xb8>)
    fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fba4:	429d      	cmp	r5, r3
    fba6:	d002      	beq.n	fbae <z_set_prio+0x8a>
    fba8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fbaa:	2d00      	cmp	r5, #0
    fbac:	d1f0      	bne.n	fb90 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    fbae:	4b0b      	ldr	r3, [pc, #44]	; (fbdc <z_set_prio+0xb8>)
    fbb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fbb2:	f103 0120 	add.w	r1, r3, #32
    fbb6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    fbb8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    fbba:	6014      	str	r4, [r2, #0]
	list->tail = node;
    fbbc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    fbbe:	2001      	movs	r0, #1
    fbc0:	f7ff fe6c 	bl	f89c <update_cache>
    fbc4:	e7c1      	b.n	fb4a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    fbc6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    fbc8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    fbca:	6025      	str	r5, [r4, #0]
	prev->next = node;
    fbcc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    fbce:	606c      	str	r4, [r5, #4]
}
    fbd0:	e7f5      	b.n	fbbe <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fbd2:	2500      	movs	r5, #0
    fbd4:	e7dc      	b.n	fb90 <z_set_prio+0x6c>
}
    fbd6:	4640      	mov	r0, r8
    fbd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fbdc:	20020a18 	.word	0x20020a18
    fbe0:	20020a38 	.word	0x20020a38

0000fbe4 <z_impl_k_thread_suspend>:
{
    fbe4:	b538      	push	{r3, r4, r5, lr}
    fbe6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    fbe8:	3018      	adds	r0, #24
    fbea:	f006 fa49 	bl	16080 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    fbee:	2300      	movs	r3, #0
	__asm__ volatile(
    fbf0:	f04f 0220 	mov.w	r2, #32
    fbf4:	f3ef 8511 	mrs	r5, BASEPRI
    fbf8:	f382 8812 	msr	BASEPRI_MAX, r2
    fbfc:	f3bf 8f6f 	isb	sy
    fc00:	e010      	b.n	fc24 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fc02:	7b63      	ldrb	r3, [r4, #13]
    fc04:	f043 0310 	orr.w	r3, r3, #16
    fc08:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    fc0a:	4b15      	ldr	r3, [pc, #84]	; (fc60 <z_impl_k_thread_suspend+0x7c>)
    fc0c:	6898      	ldr	r0, [r3, #8]
    fc0e:	42a0      	cmp	r0, r4
    fc10:	bf14      	ite	ne
    fc12:	2000      	movne	r0, #0
    fc14:	2001      	moveq	r0, #1
    fc16:	f7ff fe41 	bl	f89c <update_cache>
	__asm__ volatile(
    fc1a:	f385 8811 	msr	BASEPRI, r5
    fc1e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fc22:	2301      	movs	r3, #1
    fc24:	b963      	cbnz	r3, fc40 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    fc26:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    fc28:	f994 300d 	ldrsb.w	r3, [r4, #13]
    fc2c:	2b00      	cmp	r3, #0
    fc2e:	dae8      	bge.n	fc02 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fc30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fc34:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    fc36:	4621      	mov	r1, r4
    fc38:	480a      	ldr	r0, [pc, #40]	; (fc64 <z_impl_k_thread_suspend+0x80>)
    fc3a:	f006 f935 	bl	15ea8 <z_priq_dumb_remove>
}
    fc3e:	e7e0      	b.n	fc02 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    fc40:	4b07      	ldr	r3, [pc, #28]	; (fc60 <z_impl_k_thread_suspend+0x7c>)
    fc42:	689b      	ldr	r3, [r3, #8]
    fc44:	42a3      	cmp	r3, r4
    fc46:	d000      	beq.n	fc4a <z_impl_k_thread_suspend+0x66>
}
    fc48:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    fc4a:	f04f 0320 	mov.w	r3, #32
    fc4e:	f3ef 8011 	mrs	r0, BASEPRI
    fc52:	f383 8812 	msr	BASEPRI_MAX, r3
    fc56:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    fc5a:	f006 f910 	bl	15e7e <z_reschedule_irqlock>
    fc5e:	e7f3      	b.n	fc48 <z_impl_k_thread_suspend+0x64>
    fc60:	20020a18 	.word	0x20020a18
    fc64:	20020a38 	.word	0x20020a38

0000fc68 <k_sched_unlock>:

void k_sched_unlock(void)
{
    fc68:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    fc6a:	2300      	movs	r3, #0
    fc6c:	f04f 0220 	mov.w	r2, #32
    fc70:	f3ef 8411 	mrs	r4, BASEPRI
    fc74:	f382 8812 	msr	BASEPRI_MAX, r2
    fc78:	f3bf 8f6f 	isb	sy
    fc7c:	b96b      	cbnz	r3, fc9a <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    fc7e:	4b0c      	ldr	r3, [pc, #48]	; (fcb0 <k_sched_unlock+0x48>)
    fc80:	689a      	ldr	r2, [r3, #8]
    fc82:	7bd3      	ldrb	r3, [r2, #15]
    fc84:	3301      	adds	r3, #1
    fc86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    fc88:	2000      	movs	r0, #0
    fc8a:	f7ff fe07 	bl	f89c <update_cache>
	__asm__ volatile(
    fc8e:	f384 8811 	msr	BASEPRI, r4
    fc92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fc96:	2301      	movs	r3, #1
    fc98:	e7f0      	b.n	fc7c <k_sched_unlock+0x14>
	__asm__ volatile(
    fc9a:	f04f 0320 	mov.w	r3, #32
    fc9e:	f3ef 8011 	mrs	r0, BASEPRI
    fca2:	f383 8812 	msr	BASEPRI_MAX, r3
    fca6:	f3bf 8f6f 	isb	sy
    fcaa:	f006 f8e8 	bl	15e7e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    fcae:	bd10      	pop	{r4, pc}
    fcb0:	20020a18 	.word	0x20020a18

0000fcb4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    fcb6:	7b43      	ldrb	r3, [r0, #13]
    fcb8:	f013 0f08 	tst.w	r3, #8
    fcbc:	d145      	bne.n	fd4a <end_thread+0x96>
    fcbe:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    fcc0:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    fcc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    fcc8:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    fcca:	f013 0f80 	tst.w	r3, #128	; 0x80
    fcce:	d114      	bne.n	fcfa <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    fcd0:	68ab      	ldr	r3, [r5, #8]
    fcd2:	b15b      	cbz	r3, fcec <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fcd4:	4628      	mov	r0, r5
    fcd6:	f006 f8c6 	bl	15e66 <pended_on_thread>
    fcda:	4629      	mov	r1, r5
    fcdc:	f006 f8e4 	bl	15ea8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    fce0:	7b6b      	ldrb	r3, [r5, #13]
    fce2:	f023 0302 	bic.w	r3, r3, #2
    fce6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    fce8:	2300      	movs	r3, #0
    fcea:	60ab      	str	r3, [r5, #8]
    fcec:	f105 0018 	add.w	r0, r5, #24
    fcf0:	f006 f9c6 	bl	16080 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    fcf4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fcf8:	e01c      	b.n	fd34 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fcfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fcfe:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    fd00:	4601      	mov	r1, r0
    fd02:	4812      	ldr	r0, [pc, #72]	; (fd4c <end_thread+0x98>)
    fd04:	f006 f8d0 	bl	15ea8 <z_priq_dumb_remove>
}
    fd08:	e7e2      	b.n	fcd0 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    fd0a:	4620      	mov	r0, r4
    fd0c:	f006 f8ab 	bl	15e66 <pended_on_thread>
    fd10:	4621      	mov	r1, r4
    fd12:	f006 f8c9 	bl	15ea8 <z_priq_dumb_remove>
    fd16:	7b63      	ldrb	r3, [r4, #13]
    fd18:	f023 0302 	bic.w	r3, r3, #2
    fd1c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    fd1e:	2600      	movs	r6, #0
    fd20:	60a6      	str	r6, [r4, #8]
    fd22:	f104 0018 	add.w	r0, r4, #24
    fd26:	f006 f9ab 	bl	16080 <z_abort_timeout>
    fd2a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    fd2e:	4620      	mov	r0, r4
    fd30:	f7ff fe6a 	bl	fa08 <ready_thread>
	return list->head == list;
    fd34:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd36:	42bc      	cmp	r4, r7
    fd38:	d001      	beq.n	fd3e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    fd3a:	2c00      	cmp	r4, #0
    fd3c:	d1e5      	bne.n	fd0a <end_thread+0x56>
		update_cache(1);
    fd3e:	2001      	movs	r0, #1
    fd40:	f7ff fdac 	bl	f89c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    fd44:	4628      	mov	r0, r5
    fd46:	f7ff fb05 	bl	f354 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    fd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd4c:	20020a38 	.word	0x20020a38

0000fd50 <z_sched_init>:
{
    fd50:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    fd52:	4b05      	ldr	r3, [pc, #20]	; (fd68 <z_sched_init+0x18>)
    fd54:	f103 0220 	add.w	r2, r3, #32
    fd58:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    fd5a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    fd5c:	2100      	movs	r1, #0
    fd5e:	4608      	mov	r0, r1
    fd60:	f7ff fd2c 	bl	f7bc <k_sched_time_slice_set>
}
    fd64:	bd08      	pop	{r3, pc}
    fd66:	bf00      	nop
    fd68:	20020a18 	.word	0x20020a18

0000fd6c <z_impl_k_yield>:
{
    fd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd6e:	f04f 0320 	mov.w	r3, #32
    fd72:	f3ef 8611 	mrs	r6, BASEPRI
    fd76:	f383 8812 	msr	BASEPRI_MAX, r3
    fd7a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    fd7e:	4c1c      	ldr	r4, [pc, #112]	; (fdf0 <z_impl_k_yield+0x84>)
    fd80:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fd82:	7b4b      	ldrb	r3, [r1, #13]
    fd84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    fd88:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    fd8a:	f104 0720 	add.w	r7, r4, #32
    fd8e:	4638      	mov	r0, r7
    fd90:	f006 f88a 	bl	15ea8 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    fd94:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    fd96:	7b6b      	ldrb	r3, [r5, #13]
    fd98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fd9c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    fd9e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fda0:	42bc      	cmp	r4, r7
    fda2:	d023      	beq.n	fdec <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fda4:	b16c      	cbz	r4, fdc2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fda6:	4621      	mov	r1, r4
    fda8:	4628      	mov	r0, r5
    fdaa:	f006 f85e 	bl	15e6a <z_sched_prio_cmp>
    fdae:	2800      	cmp	r0, #0
    fdb0:	dc16      	bgt.n	fde0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fdb2:	b134      	cbz	r4, fdc2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    fdb4:	4b0e      	ldr	r3, [pc, #56]	; (fdf0 <z_impl_k_yield+0x84>)
    fdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdb8:	429c      	cmp	r4, r3
    fdba:	d002      	beq.n	fdc2 <z_impl_k_yield+0x56>
    fdbc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fdbe:	2c00      	cmp	r4, #0
    fdc0:	d1f0      	bne.n	fda4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    fdc2:	4b0b      	ldr	r3, [pc, #44]	; (fdf0 <z_impl_k_yield+0x84>)
    fdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fdc6:	f103 0120 	add.w	r1, r3, #32
    fdca:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    fdcc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    fdce:	6015      	str	r5, [r2, #0]
	list->tail = node;
    fdd0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    fdd2:	2001      	movs	r0, #1
    fdd4:	f7ff fd62 	bl	f89c <update_cache>
    fdd8:	4630      	mov	r0, r6
    fdda:	f7f4 fa17 	bl	420c <arch_swap>
}
    fdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    fde0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    fde2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    fde4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    fde6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fde8:	6065      	str	r5, [r4, #4]
}
    fdea:	e7f2      	b.n	fdd2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fdec:	2400      	movs	r4, #0
    fdee:	e7d9      	b.n	fda4 <z_impl_k_yield+0x38>
    fdf0:	20020a18 	.word	0x20020a18

0000fdf4 <z_tick_sleep>:
{
    fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdf8:	4604      	mov	r4, r0
    fdfa:	460d      	mov	r5, r1
	if (ticks == 0) {
    fdfc:	ea54 0105 	orrs.w	r1, r4, r5
    fe00:	d037      	beq.n	fe72 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    fe02:	f06f 0101 	mvn.w	r1, #1
    fe06:	1a0a      	subs	r2, r1, r0
    fe08:	f04f 31ff 	mov.w	r1, #4294967295
    fe0c:	eb61 0305 	sbc.w	r3, r1, r5
    fe10:	2a01      	cmp	r2, #1
    fe12:	f173 0300 	sbcs.w	r3, r3, #0
    fe16:	db30      	blt.n	fe7a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    fe18:	f06f 0601 	mvn.w	r6, #1
    fe1c:	1a36      	subs	r6, r6, r0
    fe1e:	f04f 0320 	mov.w	r3, #32
    fe22:	f3ef 8811 	mrs	r8, BASEPRI
    fe26:	f383 8812 	msr	BASEPRI_MAX, r3
    fe2a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    fe2e:	4f16      	ldr	r7, [pc, #88]	; (fe88 <z_tick_sleep+0x94>)
    fe30:	68b8      	ldr	r0, [r7, #8]
    fe32:	4b16      	ldr	r3, [pc, #88]	; (fe8c <z_tick_sleep+0x98>)
    fe34:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    fe36:	f7ff fe45 	bl	fac4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    fe3a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fe3c:	4622      	mov	r2, r4
    fe3e:	462b      	mov	r3, r5
    fe40:	4913      	ldr	r1, [pc, #76]	; (fe90 <z_tick_sleep+0x9c>)
    fe42:	3018      	adds	r0, #24
    fe44:	f000 f8e2 	bl	1000c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    fe48:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    fe4a:	7b53      	ldrb	r3, [r2, #13]
    fe4c:	f043 0310 	orr.w	r3, r3, #16
    fe50:	7353      	strb	r3, [r2, #13]
    fe52:	4640      	mov	r0, r8
    fe54:	f7f4 f9da 	bl	420c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    fe58:	2500      	movs	r5, #0
    fe5a:	f006 f970 	bl	1613e <sys_clock_tick_get_32>
    fe5e:	1a34      	subs	r4, r6, r0
    fe60:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    fe64:	2c01      	cmp	r4, #1
    fe66:	f175 0300 	sbcs.w	r3, r5, #0
    fe6a:	da0a      	bge.n	fe82 <z_tick_sleep+0x8e>
	return 0;
    fe6c:	2000      	movs	r0, #0
}
    fe6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    fe72:	f7ff ff7b 	bl	fd6c <z_impl_k_yield>
		return 0;
    fe76:	2000      	movs	r0, #0
    fe78:	e7f9      	b.n	fe6e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    fe7a:	f006 f960 	bl	1613e <sys_clock_tick_get_32>
    fe7e:	1906      	adds	r6, r0, r4
    fe80:	e7cd      	b.n	fe1e <z_tick_sleep+0x2a>
		return ticks;
    fe82:	4620      	mov	r0, r4
    fe84:	e7f3      	b.n	fe6e <z_tick_sleep+0x7a>
    fe86:	bf00      	nop
    fe88:	20020a18 	.word	0x20020a18
    fe8c:	20020a4c 	.word	0x20020a4c
    fe90:	00015eff 	.word	0x00015eff

0000fe94 <z_impl_k_sleep>:
{
    fe94:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fe96:	f1b1 3fff 	cmp.w	r1, #4294967295
    fe9a:	bf08      	it	eq
    fe9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    fea0:	d01a      	beq.n	fed8 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    fea2:	f7ff ffa7 	bl	fdf4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    fea6:	4604      	mov	r4, r0
    fea8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    feaa:	0169      	lsls	r1, r5, #5
    feac:	0143      	lsls	r3, r0, #5
    feae:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    feb2:	1a18      	subs	r0, r3, r0
    feb4:	eb62 0305 	sbc.w	r3, r2, r5
    feb8:	009a      	lsls	r2, r3, #2
    feba:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    febe:	0081      	lsls	r1, r0, #2
    fec0:	4613      	mov	r3, r2
    fec2:	1908      	adds	r0, r1, r4
    fec4:	eb45 0303 	adc.w	r3, r5, r3
    fec8:	00da      	lsls	r2, r3, #3
    feca:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    fece:	00c1      	lsls	r1, r0, #3
    fed0:	0bc8      	lsrs	r0, r1, #15
    fed2:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    fed6:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    fed8:	4b03      	ldr	r3, [pc, #12]	; (fee8 <z_impl_k_sleep+0x54>)
    feda:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    fedc:	f7ff fe82 	bl	fbe4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    fee0:	f04f 30ff 	mov.w	r0, #4294967295
    fee4:	e7f7      	b.n	fed6 <z_impl_k_sleep+0x42>
    fee6:	bf00      	nop
    fee8:	20020a18 	.word	0x20020a18

0000feec <z_impl_z_current_get>:
}
    feec:	4b01      	ldr	r3, [pc, #4]	; (fef4 <z_impl_z_current_get+0x8>)
    feee:	6898      	ldr	r0, [r3, #8]
    fef0:	4770      	bx	lr
    fef2:	bf00      	nop
    fef4:	20020a18 	.word	0x20020a18

0000fef8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    fef8:	b538      	push	{r3, r4, r5, lr}
    fefa:	f04f 0320 	mov.w	r3, #32
    fefe:	f3ef 8511 	mrs	r5, BASEPRI
    ff02:	f383 8812 	msr	BASEPRI_MAX, r3
    ff06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ff0a:	7b43      	ldrb	r3, [r0, #13]
    ff0c:	f013 0f08 	tst.w	r3, #8
    ff10:	d004      	beq.n	ff1c <z_thread_abort+0x24>
	__asm__ volatile(
    ff12:	f385 8811 	msr	BASEPRI, r5
    ff16:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    ff1a:	bd38      	pop	{r3, r4, r5, pc}
    ff1c:	4604      	mov	r4, r0
	end_thread(thread);
    ff1e:	f7ff fec9 	bl	fcb4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    ff22:	4b08      	ldr	r3, [pc, #32]	; (ff44 <z_thread_abort+0x4c>)
    ff24:	689b      	ldr	r3, [r3, #8]
    ff26:	42a3      	cmp	r3, r4
    ff28:	d004      	beq.n	ff34 <z_thread_abort+0x3c>
    ff2a:	f385 8811 	msr	BASEPRI, r5
    ff2e:	f3bf 8f6f 	isb	sy
    ff32:	e7f2      	b.n	ff1a <z_thread_abort+0x22>
    ff34:	f3ef 8305 	mrs	r3, IPSR
    ff38:	2b00      	cmp	r3, #0
    ff3a:	d1f6      	bne.n	ff2a <z_thread_abort+0x32>
    ff3c:	4628      	mov	r0, r5
    ff3e:	f7f4 f965 	bl	420c <arch_swap>
	return ret;
    ff42:	e7f2      	b.n	ff2a <z_thread_abort+0x32>
    ff44:	20020a18 	.word	0x20020a18

0000ff48 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    ff48:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    ff4a:	4806      	ldr	r0, [pc, #24]	; (ff64 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ff4c:	4a06      	ldr	r2, [pc, #24]	; (ff68 <z_data_copy+0x20>)
    ff4e:	1a12      	subs	r2, r2, r0
    ff50:	4906      	ldr	r1, [pc, #24]	; (ff6c <z_data_copy+0x24>)
    ff52:	f006 f93b 	bl	161cc <memcpy>
    ff56:	4a06      	ldr	r2, [pc, #24]	; (ff70 <z_data_copy+0x28>)
    ff58:	4906      	ldr	r1, [pc, #24]	; (ff74 <z_data_copy+0x2c>)
    ff5a:	4807      	ldr	r0, [pc, #28]	; (ff78 <z_data_copy+0x30>)
    ff5c:	f006 f936 	bl	161cc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    ff60:	bd08      	pop	{r3, pc}
    ff62:	bf00      	nop
    ff64:	20000000 	.word	0x20000000
    ff68:	20000340 	.word	0x20000340
    ff6c:	0006beb8 	.word	0x0006beb8
    ff70:	00000000 	.word	0x00000000
    ff74:	0006beb8 	.word	0x0006beb8
    ff78:	20000000 	.word	0x20000000

0000ff7c <first>:
	return list->head == list;
    ff7c:	4b03      	ldr	r3, [pc, #12]	; (ff8c <first+0x10>)
    ff7e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ff80:	4298      	cmp	r0, r3
    ff82:	d000      	beq.n	ff86 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    ff84:	4770      	bx	lr
    ff86:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    ff88:	e7fc      	b.n	ff84 <first+0x8>
    ff8a:	bf00      	nop
    ff8c:	20000064 	.word	0x20000064

0000ff90 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ff90:	b130      	cbz	r0, ffa0 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    ff92:	4a04      	ldr	r2, [pc, #16]	; (ffa4 <next+0x14>)
    ff94:	6852      	ldr	r2, [r2, #4]
    ff96:	4290      	cmp	r0, r2
    ff98:	d001      	beq.n	ff9e <next+0xe>
    ff9a:	6800      	ldr	r0, [r0, #0]
    ff9c:	4770      	bx	lr
    ff9e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    ffa0:	4770      	bx	lr
    ffa2:	bf00      	nop
    ffa4:	20000064 	.word	0x20000064

0000ffa8 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    ffa8:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ffaa:	4b04      	ldr	r3, [pc, #16]	; (ffbc <elapsed+0x14>)
    ffac:	681b      	ldr	r3, [r3, #0]
    ffae:	b10b      	cbz	r3, ffb4 <elapsed+0xc>
    ffb0:	2000      	movs	r0, #0
}
    ffb2:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ffb4:	f7f5 fe4e 	bl	5c54 <sys_clock_elapsed>
    ffb8:	e7fb      	b.n	ffb2 <elapsed+0xa>
    ffba:	bf00      	nop
    ffbc:	20020a5c 	.word	0x20020a5c

0000ffc0 <next_timeout>:

static int32_t next_timeout(void)
{
    ffc0:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    ffc2:	f7ff ffdb 	bl	ff7c <first>
    ffc6:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ffc8:	f7ff ffee 	bl	ffa8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    ffcc:	b18c      	cbz	r4, fff2 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ffce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ffd2:	1a12      	subs	r2, r2, r0
    ffd4:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    ffd8:	2a01      	cmp	r2, #1
    ffda:	f173 0100 	sbcs.w	r1, r3, #0
    ffde:	db11      	blt.n	10004 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ffe0:	4610      	mov	r0, r2
    ffe2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ffe6:	f173 0300 	sbcs.w	r3, r3, #0
    ffea:	db04      	blt.n	fff6 <next_timeout+0x36>
    ffec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    fff0:	e001      	b.n	fff6 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    fff2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    fff6:	4b04      	ldr	r3, [pc, #16]	; (10008 <next_timeout+0x48>)
    fff8:	691b      	ldr	r3, [r3, #16]
    fffa:	b113      	cbz	r3, 10002 <next_timeout+0x42>
    fffc:	4283      	cmp	r3, r0
    fffe:	da00      	bge.n	10002 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   10000:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   10002:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   10004:	2000      	movs	r0, #0
   10006:	e7f6      	b.n	fff6 <next_timeout+0x36>
   10008:	20020a18 	.word	0x20020a18

0001000c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1000c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10010:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10012:	f1b3 3fff 	cmp.w	r3, #4294967295
   10016:	bf08      	it	eq
   10018:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1001c:	f000 8096 	beq.w	1014c <z_add_timeout+0x140>
   10020:	4682      	mov	sl, r0
   10022:	4614      	mov	r4, r2
   10024:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10026:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   10028:	2300      	movs	r3, #0
	__asm__ volatile(
   1002a:	f04f 0220 	mov.w	r2, #32
   1002e:	f3ef 8b11 	mrs	fp, BASEPRI
   10032:	f382 8812 	msr	BASEPRI_MAX, r2
   10036:	f3bf 8f6f 	isb	sy
   1003a:	e02e      	b.n	1009a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1003c:	2201      	movs	r2, #1
   1003e:	2300      	movs	r3, #0
   10040:	e04b      	b.n	100da <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   10042:	f7ff ffb1 	bl	ffa8 <elapsed>
   10046:	1822      	adds	r2, r4, r0
   10048:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1004c:	3201      	adds	r2, #1
   1004e:	f143 0300 	adc.w	r3, r3, #0
   10052:	f8ca 2010 	str.w	r2, [sl, #16]
   10056:	f8ca 3014 	str.w	r3, [sl, #20]
   1005a:	e042      	b.n	100e2 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1005c:	9b00      	ldr	r3, [sp, #0]
   1005e:	1ac2      	subs	r2, r0, r3
   10060:	9b01      	ldr	r3, [sp, #4]
   10062:	eb61 0303 	sbc.w	r3, r1, r3
   10066:	f8cc 2010 	str.w	r2, [ip, #16]
   1006a:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1006e:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   10072:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   10076:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1007a:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1007e:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   10082:	f1bc 0f00 	cmp.w	ip, #0
   10086:	d049      	beq.n	1011c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10088:	f7ff ff78 	bl	ff7c <first>
   1008c:	4582      	cmp	sl, r0
   1008e:	d050      	beq.n	10132 <z_add_timeout+0x126>
	__asm__ volatile(
   10090:	f38b 8811 	msr	BASEPRI, fp
   10094:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10098:	2301      	movs	r3, #1
   1009a:	2b00      	cmp	r3, #0
   1009c:	d156      	bne.n	1014c <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1009e:	f06f 0301 	mvn.w	r3, #1
   100a2:	ebb3 0804 	subs.w	r8, r3, r4
   100a6:	f04f 30ff 	mov.w	r0, #4294967295
   100aa:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   100ae:	f1b8 0f00 	cmp.w	r8, #0
   100b2:	f179 0300 	sbcs.w	r3, r9, #0
   100b6:	dbc4      	blt.n	10042 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   100b8:	4a26      	ldr	r2, [pc, #152]	; (10154 <z_add_timeout+0x148>)
   100ba:	6813      	ldr	r3, [r2, #0]
   100bc:	6852      	ldr	r2, [r2, #4]
   100be:	18e3      	adds	r3, r4, r3
   100c0:	eb45 0202 	adc.w	r2, r5, r2
   100c4:	f06f 0101 	mvn.w	r1, #1
   100c8:	1ace      	subs	r6, r1, r3
   100ca:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   100ce:	4632      	mov	r2, r6
   100d0:	463b      	mov	r3, r7
   100d2:	2e01      	cmp	r6, #1
   100d4:	f177 0100 	sbcs.w	r1, r7, #0
   100d8:	dbb0      	blt.n	1003c <z_add_timeout+0x30>
   100da:	f8ca 2010 	str.w	r2, [sl, #16]
   100de:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   100e2:	f7ff ff4b 	bl	ff7c <first>
   100e6:	4684      	mov	ip, r0
   100e8:	f1bc 0f00 	cmp.w	ip, #0
   100ec:	d0c9      	beq.n	10082 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   100ee:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   100f2:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   100f6:	e9cd 2300 	strd	r2, r3, [sp]
   100fa:	4282      	cmp	r2, r0
   100fc:	418b      	sbcs	r3, r1
   100fe:	dbad      	blt.n	1005c <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   10100:	9b00      	ldr	r3, [sp, #0]
   10102:	1a1a      	subs	r2, r3, r0
   10104:	9b01      	ldr	r3, [sp, #4]
   10106:	eb63 0301 	sbc.w	r3, r3, r1
   1010a:	f8ca 2010 	str.w	r2, [sl, #16]
   1010e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   10112:	4660      	mov	r0, ip
   10114:	f7ff ff3c 	bl	ff90 <next>
   10118:	4684      	mov	ip, r0
   1011a:	e7e5      	b.n	100e8 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1011c:	4b0e      	ldr	r3, [pc, #56]	; (10158 <z_add_timeout+0x14c>)
   1011e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   10120:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   10124:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   10128:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1012c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   10130:	e7aa      	b.n	10088 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   10132:	f7ff ff45 	bl	ffc0 <next_timeout>

			if (next_time == 0 ||
   10136:	4603      	mov	r3, r0
   10138:	b118      	cbz	r0, 10142 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1013a:	4a08      	ldr	r2, [pc, #32]	; (1015c <z_add_timeout+0x150>)
   1013c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1013e:	4282      	cmp	r2, r0
   10140:	d0a6      	beq.n	10090 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   10142:	2100      	movs	r1, #0
   10144:	4618      	mov	r0, r3
   10146:	f7f5 fd51 	bl	5bec <sys_clock_set_timeout>
   1014a:	e7a1      	b.n	10090 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1014c:	b003      	add	sp, #12
   1014e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10152:	bf00      	nop
   10154:	200004c0 	.word	0x200004c0
   10158:	20000064 	.word	0x20000064
   1015c:	20020a18 	.word	0x20020a18

00010160 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   10160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10162:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10164:	f7ff fc04 	bl	f970 <z_time_slice>
	__asm__ volatile(
   10168:	f04f 0320 	mov.w	r3, #32
   1016c:	f3ef 8511 	mrs	r5, BASEPRI
   10170:	f383 8812 	msr	BASEPRI_MAX, r3
   10174:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10178:	4b28      	ldr	r3, [pc, #160]	; (1021c <sys_clock_announce+0xbc>)
   1017a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1017c:	f7ff fefe 	bl	ff7c <first>
   10180:	4604      	mov	r4, r0
   10182:	b350      	cbz	r0, 101da <sys_clock_announce+0x7a>
   10184:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   10188:	4b24      	ldr	r3, [pc, #144]	; (1021c <sys_clock_announce+0xbc>)
   1018a:	681b      	ldr	r3, [r3, #0]
   1018c:	17d9      	asrs	r1, r3, #31
   1018e:	42b3      	cmp	r3, r6
   10190:	eb71 0207 	sbcs.w	r2, r1, r7
   10194:	db21      	blt.n	101da <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10196:	4a22      	ldr	r2, [pc, #136]	; (10220 <sys_clock_announce+0xc0>)
   10198:	e9d2 0100 	ldrd	r0, r1, [r2]
   1019c:	1980      	adds	r0, r0, r6
   1019e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   101a2:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   101a6:	1b9b      	subs	r3, r3, r6
   101a8:	4a1c      	ldr	r2, [pc, #112]	; (1021c <sys_clock_announce+0xbc>)
   101aa:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   101ac:	2200      	movs	r2, #0
   101ae:	2300      	movs	r3, #0
   101b0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   101b4:	4620      	mov	r0, r4
   101b6:	f005 ff4c 	bl	16052 <remove_timeout>
	__asm__ volatile(
   101ba:	f385 8811 	msr	BASEPRI, r5
   101be:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   101c2:	68a3      	ldr	r3, [r4, #8]
   101c4:	4620      	mov	r0, r4
   101c6:	4798      	blx	r3
	__asm__ volatile(
   101c8:	f04f 0320 	mov.w	r3, #32
   101cc:	f3ef 8511 	mrs	r5, BASEPRI
   101d0:	f383 8812 	msr	BASEPRI_MAX, r3
   101d4:	f3bf 8f6f 	isb	sy
   101d8:	e7d0      	b.n	1017c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   101da:	b144      	cbz	r4, 101ee <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   101dc:	4b0f      	ldr	r3, [pc, #60]	; (1021c <sys_clock_announce+0xbc>)
   101de:	6819      	ldr	r1, [r3, #0]
   101e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   101e4:	1a52      	subs	r2, r2, r1
   101e6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   101ea:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   101ee:	480c      	ldr	r0, [pc, #48]	; (10220 <sys_clock_announce+0xc0>)
   101f0:	490a      	ldr	r1, [pc, #40]	; (1021c <sys_clock_announce+0xbc>)
   101f2:	680c      	ldr	r4, [r1, #0]
   101f4:	e9d0 2300 	ldrd	r2, r3, [r0]
   101f8:	1912      	adds	r2, r2, r4
   101fa:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   101fe:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   10202:	2400      	movs	r4, #0
   10204:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10206:	f7ff fedb 	bl	ffc0 <next_timeout>
   1020a:	4621      	mov	r1, r4
   1020c:	f7f5 fcee 	bl	5bec <sys_clock_set_timeout>
	__asm__ volatile(
   10210:	f385 8811 	msr	BASEPRI, r5
   10214:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1021a:	bf00      	nop
   1021c:	20020a5c 	.word	0x20020a5c
   10220:	200004c0 	.word	0x200004c0

00010224 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10224:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   10226:	2100      	movs	r1, #0
	__asm__ volatile(
   10228:	f04f 0320 	mov.w	r3, #32
   1022c:	f3ef 8411 	mrs	r4, BASEPRI
   10230:	f383 8812 	msr	BASEPRI_MAX, r3
   10234:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   10238:	2200      	movs	r2, #0
   1023a:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1023c:	b969      	cbnz	r1, 1025a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1023e:	f7f5 fd09 	bl	5c54 <sys_clock_elapsed>
   10242:	4b07      	ldr	r3, [pc, #28]	; (10260 <sys_clock_tick_get+0x3c>)
   10244:	e9d3 2300 	ldrd	r2, r3, [r3]
   10248:	1812      	adds	r2, r2, r0
   1024a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1024e:	f384 8811 	msr	BASEPRI, r4
   10252:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10256:	2101      	movs	r1, #1
   10258:	e7f0      	b.n	1023c <sys_clock_tick_get+0x18>
	}
	return t;
}
   1025a:	4610      	mov	r0, r2
   1025c:	4619      	mov	r1, r3
   1025e:	bd10      	pop	{r4, pc}
   10260:	200004c0 	.word	0x200004c0

00010264 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   10264:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10266:	4a03      	ldr	r2, [pc, #12]	; (10274 <boot_banner+0x10>)
   10268:	4903      	ldr	r1, [pc, #12]	; (10278 <boot_banner+0x14>)
   1026a:	4804      	ldr	r0, [pc, #16]	; (1027c <boot_banner+0x18>)
   1026c:	f001 fe5d 	bl	11f2a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   10270:	bd08      	pop	{r3, pc}
   10272:	bf00      	nop
   10274:	00068a78 	.word	0x00068a78
   10278:	0006bbcc 	.word	0x0006bbcc
   1027c:	0006bbd8 	.word	0x0006bbd8

00010280 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   10280:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10282:	4c06      	ldr	r4, [pc, #24]	; (1029c <statics_init+0x1c>)
   10284:	4b06      	ldr	r3, [pc, #24]	; (102a0 <statics_init+0x20>)
   10286:	429c      	cmp	r4, r3
   10288:	d206      	bcs.n	10298 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1028a:	68a2      	ldr	r2, [r4, #8]
   1028c:	6861      	ldr	r1, [r4, #4]
   1028e:	4620      	mov	r0, r4
   10290:	f005 ff63 	bl	1615a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   10294:	3418      	adds	r4, #24
   10296:	e7f5      	b.n	10284 <statics_init+0x4>
		}
	}
	return 0;
}
   10298:	2000      	movs	r0, #0
   1029a:	bd10      	pop	{r4, pc}
   1029c:	200002b4 	.word	0x200002b4
   102a0:	200002b4 	.word	0x200002b4

000102a4 <nrf_cc3xx_platform_init_no_rng>:
   102a4:	b510      	push	{r4, lr}
   102a6:	4c0a      	ldr	r4, [pc, #40]	; (102d0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   102a8:	6823      	ldr	r3, [r4, #0]
   102aa:	b11b      	cbz	r3, 102b4 <nrf_cc3xx_platform_init_no_rng+0x10>
   102ac:	2301      	movs	r3, #1
   102ae:	2000      	movs	r0, #0
   102b0:	6023      	str	r3, [r4, #0]
   102b2:	bd10      	pop	{r4, pc}
   102b4:	f000 f8d4 	bl	10460 <CC_LibInitNoRng>
   102b8:	2800      	cmp	r0, #0
   102ba:	d0f7      	beq.n	102ac <nrf_cc3xx_platform_init_no_rng+0x8>
   102bc:	3801      	subs	r0, #1
   102be:	2807      	cmp	r0, #7
   102c0:	d803      	bhi.n	102ca <nrf_cc3xx_platform_init_no_rng+0x26>
   102c2:	4b04      	ldr	r3, [pc, #16]	; (102d4 <nrf_cc3xx_platform_init_no_rng+0x30>)
   102c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   102c8:	bd10      	pop	{r4, pc}
   102ca:	4803      	ldr	r0, [pc, #12]	; (102d8 <nrf_cc3xx_platform_init_no_rng+0x34>)
   102cc:	bd10      	pop	{r4, pc}
   102ce:	bf00      	nop
   102d0:	20020a60 	.word	0x20020a60
   102d4:	0006bc00 	.word	0x0006bc00
   102d8:	ffff8ffe 	.word	0xffff8ffe

000102dc <nrf_cc3xx_platform_abort>:
   102dc:	f3bf 8f4f 	dsb	sy
   102e0:	4905      	ldr	r1, [pc, #20]	; (102f8 <nrf_cc3xx_platform_abort+0x1c>)
   102e2:	4b06      	ldr	r3, [pc, #24]	; (102fc <nrf_cc3xx_platform_abort+0x20>)
   102e4:	68ca      	ldr	r2, [r1, #12]
   102e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   102ea:	4313      	orrs	r3, r2
   102ec:	60cb      	str	r3, [r1, #12]
   102ee:	f3bf 8f4f 	dsb	sy
   102f2:	bf00      	nop
   102f4:	e7fd      	b.n	102f2 <nrf_cc3xx_platform_abort+0x16>
   102f6:	bf00      	nop
   102f8:	e000ed00 	.word	0xe000ed00
   102fc:	05fa0004 	.word	0x05fa0004

00010300 <CC_PalAbort>:
   10300:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   10304:	2100      	movs	r1, #0
   10306:	b430      	push	{r4, r5}
   10308:	4a08      	ldr	r2, [pc, #32]	; (1032c <CC_PalAbort+0x2c>)
   1030a:	4c09      	ldr	r4, [pc, #36]	; (10330 <CC_PalAbort+0x30>)
   1030c:	4d09      	ldr	r5, [pc, #36]	; (10334 <CC_PalAbort+0x34>)
   1030e:	6023      	str	r3, [r4, #0]
   10310:	602b      	str	r3, [r5, #0]
   10312:	6013      	str	r3, [r2, #0]
   10314:	60e3      	str	r3, [r4, #12]
   10316:	60eb      	str	r3, [r5, #12]
   10318:	60d3      	str	r3, [r2, #12]
   1031a:	61a3      	str	r3, [r4, #24]
   1031c:	4a06      	ldr	r2, [pc, #24]	; (10338 <CC_PalAbort+0x38>)
   1031e:	4c07      	ldr	r4, [pc, #28]	; (1033c <CC_PalAbort+0x3c>)
   10320:	61ab      	str	r3, [r5, #24]
   10322:	6863      	ldr	r3, [r4, #4]
   10324:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   10328:	bc30      	pop	{r4, r5}
   1032a:	4718      	bx	r3
   1032c:	50845408 	.word	0x50845408
   10330:	50845400 	.word	0x50845400
   10334:	50845404 	.word	0x50845404
   10338:	50844000 	.word	0x50844000
   1033c:	2000006c 	.word	0x2000006c

00010340 <nrf_cc3xx_platform_set_abort>:
   10340:	4b02      	ldr	r3, [pc, #8]	; (1034c <nrf_cc3xx_platform_set_abort+0xc>)
   10342:	e9d0 1200 	ldrd	r1, r2, [r0]
   10346:	e9c3 1200 	strd	r1, r2, [r3]
   1034a:	4770      	bx	lr
   1034c:	2000006c 	.word	0x2000006c

00010350 <mutex_free>:
   10350:	b510      	push	{r4, lr}
   10352:	4604      	mov	r4, r0
   10354:	b130      	cbz	r0, 10364 <mutex_free+0x14>
   10356:	6863      	ldr	r3, [r4, #4]
   10358:	06db      	lsls	r3, r3, #27
   1035a:	d502      	bpl.n	10362 <mutex_free+0x12>
   1035c:	2300      	movs	r3, #0
   1035e:	6023      	str	r3, [r4, #0]
   10360:	6063      	str	r3, [r4, #4]
   10362:	bd10      	pop	{r4, pc}
   10364:	4b02      	ldr	r3, [pc, #8]	; (10370 <mutex_free+0x20>)
   10366:	4803      	ldr	r0, [pc, #12]	; (10374 <mutex_free+0x24>)
   10368:	685b      	ldr	r3, [r3, #4]
   1036a:	4798      	blx	r3
   1036c:	e7f3      	b.n	10356 <mutex_free+0x6>
   1036e:	bf00      	nop
   10370:	2000006c 	.word	0x2000006c
   10374:	0006bc20 	.word	0x0006bc20

00010378 <mutex_unlock>:
   10378:	b168      	cbz	r0, 10396 <mutex_unlock+0x1e>
   1037a:	6843      	ldr	r3, [r0, #4]
   1037c:	b13b      	cbz	r3, 1038e <mutex_unlock+0x16>
   1037e:	06db      	lsls	r3, r3, #27
   10380:	d507      	bpl.n	10392 <mutex_unlock+0x1a>
   10382:	f3bf 8f5f 	dmb	sy
   10386:	2300      	movs	r3, #0
   10388:	6003      	str	r3, [r0, #0]
   1038a:	4618      	mov	r0, r3
   1038c:	4770      	bx	lr
   1038e:	4803      	ldr	r0, [pc, #12]	; (1039c <mutex_unlock+0x24>)
   10390:	4770      	bx	lr
   10392:	4803      	ldr	r0, [pc, #12]	; (103a0 <mutex_unlock+0x28>)
   10394:	4770      	bx	lr
   10396:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1039a:	4770      	bx	lr
   1039c:	ffff8fea 	.word	0xffff8fea
   103a0:	ffff8fe9 	.word	0xffff8fe9

000103a4 <mutex_init>:
   103a4:	b510      	push	{r4, lr}
   103a6:	4604      	mov	r4, r0
   103a8:	b120      	cbz	r0, 103b4 <mutex_init+0x10>
   103aa:	2200      	movs	r2, #0
   103ac:	2311      	movs	r3, #17
   103ae:	6022      	str	r2, [r4, #0]
   103b0:	6063      	str	r3, [r4, #4]
   103b2:	bd10      	pop	{r4, pc}
   103b4:	4801      	ldr	r0, [pc, #4]	; (103bc <mutex_init+0x18>)
   103b6:	f7ff ffa3 	bl	10300 <CC_PalAbort>
   103ba:	e7f6      	b.n	103aa <mutex_init+0x6>
   103bc:	0006bc48 	.word	0x0006bc48

000103c0 <mutex_lock>:
   103c0:	b1a0      	cbz	r0, 103ec <mutex_lock+0x2c>
   103c2:	6843      	ldr	r3, [r0, #4]
   103c4:	b183      	cbz	r3, 103e8 <mutex_lock+0x28>
   103c6:	06db      	lsls	r3, r3, #27
   103c8:	d50c      	bpl.n	103e4 <mutex_lock+0x24>
   103ca:	2201      	movs	r2, #1
   103cc:	e8d0 3fef 	ldaex	r3, [r0]
   103d0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   103d4:	2900      	cmp	r1, #0
   103d6:	d1f9      	bne.n	103cc <mutex_lock+0xc>
   103d8:	2b01      	cmp	r3, #1
   103da:	d0f7      	beq.n	103cc <mutex_lock+0xc>
   103dc:	f3bf 8f5f 	dmb	sy
   103e0:	2000      	movs	r0, #0
   103e2:	4770      	bx	lr
   103e4:	4803      	ldr	r0, [pc, #12]	; (103f4 <mutex_lock+0x34>)
   103e6:	4770      	bx	lr
   103e8:	4803      	ldr	r0, [pc, #12]	; (103f8 <mutex_lock+0x38>)
   103ea:	4770      	bx	lr
   103ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   103f0:	4770      	bx	lr
   103f2:	bf00      	nop
   103f4:	ffff8fe9 	.word	0xffff8fe9
   103f8:	ffff8fea 	.word	0xffff8fea

000103fc <nrf_cc3xx_platform_set_mutexes>:
   103fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10400:	4c14      	ldr	r4, [pc, #80]	; (10454 <nrf_cc3xx_platform_set_mutexes+0x58>)
   10402:	6802      	ldr	r2, [r0, #0]
   10404:	68c3      	ldr	r3, [r0, #12]
   10406:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   1040a:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1040e:	e9c4 2500 	strd	r2, r5, [r4]
   10412:	4b11      	ldr	r3, [pc, #68]	; (10458 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   10414:	680e      	ldr	r6, [r1, #0]
   10416:	6848      	ldr	r0, [r1, #4]
   10418:	4d10      	ldr	r5, [pc, #64]	; (1045c <nrf_cc3xx_platform_set_mutexes+0x60>)
   1041a:	e9c3 6000 	strd	r6, r0, [r3]
   1041e:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   10422:	6908      	ldr	r0, [r1, #16]
   10424:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   10428:	e9c3 7602 	strd	r7, r6, [r3, #8]
   1042c:	6118      	str	r0, [r3, #16]
   1042e:	06cb      	lsls	r3, r1, #27
   10430:	d50d      	bpl.n	1044e <nrf_cc3xx_platform_set_mutexes+0x52>
   10432:	2300      	movs	r3, #0
   10434:	f505 7088 	add.w	r0, r5, #272	; 0x110
   10438:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1043c:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   10440:	4790      	blx	r2
   10442:	6823      	ldr	r3, [r4, #0]
   10444:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   10448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1044c:	4718      	bx	r3
   1044e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10452:	bf00      	nop
   10454:	2000007c 	.word	0x2000007c
   10458:	2000008c 	.word	0x2000008c
   1045c:	20020a88 	.word	0x20020a88

00010460 <CC_LibInitNoRng>:
   10460:	b508      	push	{r3, lr}
   10462:	f000 f80f 	bl	10484 <CC_HalInit>
   10466:	b928      	cbnz	r0, 10474 <CC_LibInitNoRng+0x14>
   10468:	f000 f80e 	bl	10488 <CC_PalInit>
   1046c:	b930      	cbnz	r0, 1047c <CC_LibInitNoRng+0x1c>
   1046e:	4a04      	ldr	r2, [pc, #16]	; (10480 <CC_LibInitNoRng+0x20>)
   10470:	6010      	str	r0, [r2, #0]
   10472:	bd08      	pop	{r3, pc}
   10474:	f000 f836 	bl	104e4 <CC_PalTerminate>
   10478:	2003      	movs	r0, #3
   1047a:	bd08      	pop	{r3, pc}
   1047c:	2004      	movs	r0, #4
   1047e:	bd08      	pop	{r3, pc}
   10480:	50845a0c 	.word	0x50845a0c

00010484 <CC_HalInit>:
   10484:	2000      	movs	r0, #0
   10486:	4770      	bx	lr

00010488 <CC_PalInit>:
   10488:	b510      	push	{r4, lr}
   1048a:	4811      	ldr	r0, [pc, #68]	; (104d0 <CC_PalInit+0x48>)
   1048c:	f000 f848 	bl	10520 <CC_PalMutexCreate>
   10490:	b100      	cbz	r0, 10494 <CC_PalInit+0xc>
   10492:	bd10      	pop	{r4, pc}
   10494:	480f      	ldr	r0, [pc, #60]	; (104d4 <CC_PalInit+0x4c>)
   10496:	f000 f843 	bl	10520 <CC_PalMutexCreate>
   1049a:	2800      	cmp	r0, #0
   1049c:	d1f9      	bne.n	10492 <CC_PalInit+0xa>
   1049e:	4c0e      	ldr	r4, [pc, #56]	; (104d8 <CC_PalInit+0x50>)
   104a0:	4620      	mov	r0, r4
   104a2:	f000 f83d 	bl	10520 <CC_PalMutexCreate>
   104a6:	2800      	cmp	r0, #0
   104a8:	d1f3      	bne.n	10492 <CC_PalInit+0xa>
   104aa:	4b0c      	ldr	r3, [pc, #48]	; (104dc <CC_PalInit+0x54>)
   104ac:	480c      	ldr	r0, [pc, #48]	; (104e0 <CC_PalInit+0x58>)
   104ae:	601c      	str	r4, [r3, #0]
   104b0:	f000 f836 	bl	10520 <CC_PalMutexCreate>
   104b4:	4601      	mov	r1, r0
   104b6:	2800      	cmp	r0, #0
   104b8:	d1eb      	bne.n	10492 <CC_PalInit+0xa>
   104ba:	f000 f82d 	bl	10518 <CC_PalDmaInit>
   104be:	4604      	mov	r4, r0
   104c0:	b108      	cbz	r0, 104c6 <CC_PalInit+0x3e>
   104c2:	4620      	mov	r0, r4
   104c4:	bd10      	pop	{r4, pc}
   104c6:	f000 f83f 	bl	10548 <CC_PalPowerSaveModeInit>
   104ca:	4620      	mov	r0, r4
   104cc:	e7fa      	b.n	104c4 <CC_PalInit+0x3c>
   104ce:	bf00      	nop
   104d0:	200000c4 	.word	0x200000c4
   104d4:	200000b8 	.word	0x200000b8
   104d8:	200000c0 	.word	0x200000c0
   104dc:	200000c8 	.word	0x200000c8
   104e0:	200000bc 	.word	0x200000bc

000104e4 <CC_PalTerminate>:
   104e4:	b508      	push	{r3, lr}
   104e6:	4808      	ldr	r0, [pc, #32]	; (10508 <CC_PalTerminate+0x24>)
   104e8:	f000 f824 	bl	10534 <CC_PalMutexDestroy>
   104ec:	4807      	ldr	r0, [pc, #28]	; (1050c <CC_PalTerminate+0x28>)
   104ee:	f000 f821 	bl	10534 <CC_PalMutexDestroy>
   104f2:	4807      	ldr	r0, [pc, #28]	; (10510 <CC_PalTerminate+0x2c>)
   104f4:	f000 f81e 	bl	10534 <CC_PalMutexDestroy>
   104f8:	4806      	ldr	r0, [pc, #24]	; (10514 <CC_PalTerminate+0x30>)
   104fa:	f000 f81b 	bl	10534 <CC_PalMutexDestroy>
   104fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10502:	f000 b80b 	b.w	1051c <CC_PalDmaTerminate>
   10506:	bf00      	nop
   10508:	200000c4 	.word	0x200000c4
   1050c:	200000b8 	.word	0x200000b8
   10510:	200000c0 	.word	0x200000c0
   10514:	200000bc 	.word	0x200000bc

00010518 <CC_PalDmaInit>:
   10518:	2000      	movs	r0, #0
   1051a:	4770      	bx	lr

0001051c <CC_PalDmaTerminate>:
   1051c:	4770      	bx	lr
   1051e:	bf00      	nop

00010520 <CC_PalMutexCreate>:
   10520:	b508      	push	{r3, lr}
   10522:	4b03      	ldr	r3, [pc, #12]	; (10530 <CC_PalMutexCreate+0x10>)
   10524:	6802      	ldr	r2, [r0, #0]
   10526:	681b      	ldr	r3, [r3, #0]
   10528:	6810      	ldr	r0, [r2, #0]
   1052a:	4798      	blx	r3
   1052c:	2000      	movs	r0, #0
   1052e:	bd08      	pop	{r3, pc}
   10530:	2000007c 	.word	0x2000007c

00010534 <CC_PalMutexDestroy>:
   10534:	b508      	push	{r3, lr}
   10536:	4b03      	ldr	r3, [pc, #12]	; (10544 <CC_PalMutexDestroy+0x10>)
   10538:	6802      	ldr	r2, [r0, #0]
   1053a:	685b      	ldr	r3, [r3, #4]
   1053c:	6810      	ldr	r0, [r2, #0]
   1053e:	4798      	blx	r3
   10540:	2000      	movs	r0, #0
   10542:	bd08      	pop	{r3, pc}
   10544:	2000007c 	.word	0x2000007c

00010548 <CC_PalPowerSaveModeInit>:
   10548:	b570      	push	{r4, r5, r6, lr}
   1054a:	4c09      	ldr	r4, [pc, #36]	; (10570 <CC_PalPowerSaveModeInit+0x28>)
   1054c:	4d09      	ldr	r5, [pc, #36]	; (10574 <CC_PalPowerSaveModeInit+0x2c>)
   1054e:	6920      	ldr	r0, [r4, #16]
   10550:	68ab      	ldr	r3, [r5, #8]
   10552:	4798      	blx	r3
   10554:	b118      	cbz	r0, 1055e <CC_PalPowerSaveModeInit+0x16>
   10556:	4b08      	ldr	r3, [pc, #32]	; (10578 <CC_PalPowerSaveModeInit+0x30>)
   10558:	4808      	ldr	r0, [pc, #32]	; (1057c <CC_PalPowerSaveModeInit+0x34>)
   1055a:	685b      	ldr	r3, [r3, #4]
   1055c:	4798      	blx	r3
   1055e:	2100      	movs	r1, #0
   10560:	4a07      	ldr	r2, [pc, #28]	; (10580 <CC_PalPowerSaveModeInit+0x38>)
   10562:	68eb      	ldr	r3, [r5, #12]
   10564:	6011      	str	r1, [r2, #0]
   10566:	6920      	ldr	r0, [r4, #16]
   10568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1056c:	4718      	bx	r3
   1056e:	bf00      	nop
   10570:	2000008c 	.word	0x2000008c
   10574:	2000007c 	.word	0x2000007c
   10578:	2000006c 	.word	0x2000006c
   1057c:	0006bc6c 	.word	0x0006bc6c
   10580:	20020a74 	.word	0x20020a74

00010584 <_ZSt15get_new_handlerv>:
   10584:	4b01      	ldr	r3, [pc, #4]	; (1058c <_ZSt15get_new_handlerv+0x8>)
   10586:	e8d3 0faf 	lda	r0, [r3]
   1058a:	4770      	bx	lr
   1058c:	20020a78 	.word	0x20020a78

00010590 <frexp>:
   10590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10592:	f8df c064 	ldr.w	ip, [pc, #100]	; 105f8 <frexp+0x68>
   10596:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1059a:	2700      	movs	r7, #0
   1059c:	4604      	mov	r4, r0
   1059e:	4563      	cmp	r3, ip
   105a0:	460d      	mov	r5, r1
   105a2:	4616      	mov	r6, r2
   105a4:	6017      	str	r7, [r2, #0]
   105a6:	dc20      	bgt.n	105ea <frexp+0x5a>
   105a8:	4684      	mov	ip, r0
   105aa:	ea53 0c0c 	orrs.w	ip, r3, ip
   105ae:	d01c      	beq.n	105ea <frexp+0x5a>
   105b0:	f8df c048 	ldr.w	ip, [pc, #72]	; 105fc <frexp+0x6c>
   105b4:	460a      	mov	r2, r1
   105b6:	ea01 0c0c 	and.w	ip, r1, ip
   105ba:	f1bc 0f00 	cmp.w	ip, #0
   105be:	d109      	bne.n	105d4 <frexp+0x44>
   105c0:	2200      	movs	r2, #0
   105c2:	4b0b      	ldr	r3, [pc, #44]	; (105f0 <frexp+0x60>)
   105c4:	f7ef ff84 	bl	4d0 <__aeabi_dmul>
   105c8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   105cc:	4604      	mov	r4, r0
   105ce:	460a      	mov	r2, r1
   105d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   105d4:	4907      	ldr	r1, [pc, #28]	; (105f4 <frexp+0x64>)
   105d6:	151b      	asrs	r3, r3, #20
   105d8:	4011      	ands	r1, r2
   105da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   105de:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
   105e2:	443b      	add	r3, r7
   105e4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   105e8:	6033      	str	r3, [r6, #0]
   105ea:	4620      	mov	r0, r4
   105ec:	4629      	mov	r1, r5
   105ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   105f0:	43500000 	.word	0x43500000
   105f4:	800fffff 	.word	0x800fffff
   105f8:	7fefffff 	.word	0x7fefffff
   105fc:	7ff00000 	.word	0x7ff00000

00010600 <round>:
   10600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10602:	f3c1 570a 	ubfx	r7, r1, #20, #11
   10606:	460d      	mov	r5, r1
   10608:	460b      	mov	r3, r1
   1060a:	4602      	mov	r2, r0
   1060c:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   10610:	2c13      	cmp	r4, #19
   10612:	dc12      	bgt.n	1063a <round+0x3a>
   10614:	2c00      	cmp	r4, #0
   10616:	db2c      	blt.n	10672 <round+0x72>
   10618:	491b      	ldr	r1, [pc, #108]	; (10688 <round+0x88>)
   1061a:	4121      	asrs	r1, r4
   1061c:	ea05 0001 	and.w	r0, r5, r1
   10620:	4310      	orrs	r0, r2
   10622:	d007      	beq.n	10634 <round+0x34>
   10624:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   10628:	2200      	movs	r2, #0
   1062a:	4123      	asrs	r3, r4
   1062c:	441d      	add	r5, r3
   1062e:	ea25 0501 	bic.w	r5, r5, r1
   10632:	462b      	mov	r3, r5
   10634:	4610      	mov	r0, r2
   10636:	4619      	mov	r1, r3
   10638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1063a:	2c33      	cmp	r4, #51	; 0x33
   1063c:	dd07      	ble.n	1064e <round+0x4e>
   1063e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   10642:	d1f7      	bne.n	10634 <round+0x34>
   10644:	f7ef fd8e 	bl	164 <__adddf3>
   10648:	4602      	mov	r2, r0
   1064a:	460b      	mov	r3, r1
   1064c:	e7f2      	b.n	10634 <round+0x34>
   1064e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   10652:	f04f 31ff 	mov.w	r1, #4294967295
   10656:	fa21 f707 	lsr.w	r7, r1, r7
   1065a:	4238      	tst	r0, r7
   1065c:	d0ea      	beq.n	10634 <round+0x34>
   1065e:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   10662:	2201      	movs	r2, #1
   10664:	409a      	lsls	r2, r3
   10666:	1882      	adds	r2, r0, r2
   10668:	bf28      	it	cs
   1066a:	3501      	addcs	r5, #1
   1066c:	ea22 0207 	bic.w	r2, r2, r7
   10670:	e7df      	b.n	10632 <round+0x32>
   10672:	3401      	adds	r4, #1
   10674:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   10678:	d002      	beq.n	10680 <round+0x80>
   1067a:	461d      	mov	r5, r3
   1067c:	2200      	movs	r2, #0
   1067e:	e7d8      	b.n	10632 <round+0x32>
   10680:	4d02      	ldr	r5, [pc, #8]	; (1068c <round+0x8c>)
   10682:	2200      	movs	r2, #0
   10684:	431d      	orrs	r5, r3
   10686:	e7d4      	b.n	10632 <round+0x32>
   10688:	000fffff 	.word	0x000fffff
   1068c:	3ff00000 	.word	0x3ff00000

00010690 <expf>:
   10690:	b5f0      	push	{r4, r5, r6, r7, lr}
   10692:	4e33      	ldr	r6, [pc, #204]	; (10760 <expf+0xd0>)
   10694:	b08b      	sub	sp, #44	; 0x2c
   10696:	4605      	mov	r5, r0
   10698:	f000 f86e 	bl	10778 <__ieee754_expf>
   1069c:	f996 3000 	ldrsb.w	r3, [r6]
   106a0:	4604      	mov	r4, r0
   106a2:	3301      	adds	r3, #1
   106a4:	d00f      	beq.n	106c6 <expf+0x36>
   106a6:	4628      	mov	r0, r5
   106a8:	f000 f982 	bl	109b0 <finitef>
   106ac:	b158      	cbz	r0, 106c6 <expf+0x36>
   106ae:	492d      	ldr	r1, [pc, #180]	; (10764 <expf+0xd4>)
   106b0:	4628      	mov	r0, r5
   106b2:	f7f0 fce9 	bl	1088 <__aeabi_fcmpgt>
   106b6:	4607      	mov	r7, r0
   106b8:	2800      	cmp	r0, #0
   106ba:	d134      	bne.n	10726 <expf+0x96>
   106bc:	492a      	ldr	r1, [pc, #168]	; (10768 <expf+0xd8>)
   106be:	4628      	mov	r0, r5
   106c0:	f7f0 fcc4 	bl	104c <__aeabi_fcmplt>
   106c4:	b910      	cbnz	r0, 106cc <expf+0x3c>
   106c6:	4620      	mov	r0, r4
   106c8:	b00b      	add	sp, #44	; 0x2c
   106ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106cc:	4b27      	ldr	r3, [pc, #156]	; (1076c <expf+0xdc>)
   106ce:	2204      	movs	r2, #4
   106d0:	4628      	mov	r0, r5
   106d2:	9708      	str	r7, [sp, #32]
   106d4:	2400      	movs	r4, #0
   106d6:	2500      	movs	r5, #0
   106d8:	e9cd 2300 	strd	r2, r3, [sp]
   106dc:	f7ef fea0 	bl	420 <__aeabi_f2d>
   106e0:	f996 3000 	ldrsb.w	r3, [r6]
   106e4:	2b02      	cmp	r3, #2
   106e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
   106ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
   106ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
   106f2:	d013      	beq.n	1071c <expf+0x8c>
   106f4:	4668      	mov	r0, sp
   106f6:	f000 f959 	bl	109ac <matherr>
   106fa:	b178      	cbz	r0, 1071c <expf+0x8c>
   106fc:	9b08      	ldr	r3, [sp, #32]
   106fe:	bb4b      	cbnz	r3, 10754 <expf+0xc4>
   10700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   10704:	f7f0 f9a6 	bl	a54 <__aeabi_d2f>
   10708:	4604      	mov	r4, r0
   1070a:	4620      	mov	r0, r4
   1070c:	b00b      	add	sp, #44	; 0x2c
   1070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10710:	2000      	movs	r0, #0
   10712:	4917      	ldr	r1, [pc, #92]	; (10770 <expf+0xe0>)
   10714:	2b02      	cmp	r3, #2
   10716:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1071a:	d1eb      	bne.n	106f4 <expf+0x64>
   1071c:	f002 f904 	bl	12928 <__errno>
   10720:	2322      	movs	r3, #34	; 0x22
   10722:	6003      	str	r3, [r0, #0]
   10724:	e7ea      	b.n	106fc <expf+0x6c>
   10726:	2300      	movs	r3, #0
   10728:	2103      	movs	r1, #3
   1072a:	4a10      	ldr	r2, [pc, #64]	; (1076c <expf+0xdc>)
   1072c:	4628      	mov	r0, r5
   1072e:	9308      	str	r3, [sp, #32]
   10730:	e9cd 1200 	strd	r1, r2, [sp]
   10734:	f7ef fe74 	bl	420 <__aeabi_f2d>
   10738:	f996 3000 	ldrsb.w	r3, [r6]
   1073c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   10740:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10744:	2b00      	cmp	r3, #0
   10746:	d1e3      	bne.n	10710 <expf+0x80>
   10748:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1074c:	4b09      	ldr	r3, [pc, #36]	; (10774 <expf+0xe4>)
   1074e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10752:	e7cf      	b.n	106f4 <expf+0x64>
   10754:	f002 f8e8 	bl	12928 <__errno>
   10758:	9b08      	ldr	r3, [sp, #32]
   1075a:	6003      	str	r3, [r0, #0]
   1075c:	e7d0      	b.n	10700 <expf+0x70>
   1075e:	bf00      	nop
   10760:	2000029c 	.word	0x2000029c
   10764:	42b17180 	.word	0x42b17180
   10768:	c2cff1b5 	.word	0xc2cff1b5
   1076c:	0006bc8c 	.word	0x0006bc8c
   10770:	7ff00000 	.word	0x7ff00000
   10774:	47efffff 	.word	0x47efffff

00010778 <__ieee754_expf>:
   10778:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
   1077c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   10780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10784:	4604      	mov	r4, r0
   10786:	d86e      	bhi.n	10866 <__ieee754_expf+0xee>
   10788:	ea4f 75d0 	mov.w	r5, r0, lsr #31
   1078c:	f000 80bf 	beq.w	1090e <__ieee754_expf+0x196>
   10790:	4976      	ldr	r1, [pc, #472]	; (1096c <__ieee754_expf+0x1f4>)
   10792:	4288      	cmp	r0, r1
   10794:	dc6c      	bgt.n	10870 <__ieee754_expf+0xf8>
   10796:	b12d      	cbz	r5, 107a4 <__ieee754_expf+0x2c>
   10798:	4b75      	ldr	r3, [pc, #468]	; (10970 <__ieee754_expf+0x1f8>)
   1079a:	429a      	cmp	r2, r3
   1079c:	d902      	bls.n	107a4 <__ieee754_expf+0x2c>
   1079e:	2000      	movs	r0, #0
   107a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   107a4:	4b73      	ldr	r3, [pc, #460]	; (10974 <__ieee754_expf+0x1fc>)
   107a6:	429a      	cmp	r2, r3
   107a8:	d968      	bls.n	1087c <__ieee754_expf+0x104>
   107aa:	4b73      	ldr	r3, [pc, #460]	; (10978 <__ieee754_expf+0x200>)
   107ac:	429a      	cmp	r2, r3
   107ae:	f200 80ba 	bhi.w	10926 <__ieee754_expf+0x1ae>
   107b2:	4b72      	ldr	r3, [pc, #456]	; (1097c <__ieee754_expf+0x204>)
   107b4:	4620      	mov	r0, r4
   107b6:	f1c5 0401 	rsb	r4, r5, #1
   107ba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   107be:	f7f0 f99d 	bl	afc <__aeabi_fsub>
   107c2:	4b6f      	ldr	r3, [pc, #444]	; (10980 <__ieee754_expf+0x208>)
   107c4:	4680      	mov	r8, r0
   107c6:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
   107ca:	1b65      	subs	r5, r4, r5
   107cc:	4649      	mov	r1, r9
   107ce:	4640      	mov	r0, r8
   107d0:	f7f0 f994 	bl	afc <__aeabi_fsub>
   107d4:	4601      	mov	r1, r0
   107d6:	4606      	mov	r6, r0
   107d8:	4604      	mov	r4, r0
   107da:	f7f0 fa99 	bl	d10 <__aeabi_fmul>
   107de:	4969      	ldr	r1, [pc, #420]	; (10984 <__ieee754_expf+0x20c>)
   107e0:	4607      	mov	r7, r0
   107e2:	f7f0 fa95 	bl	d10 <__aeabi_fmul>
   107e6:	4968      	ldr	r1, [pc, #416]	; (10988 <__ieee754_expf+0x210>)
   107e8:	f7f0 f988 	bl	afc <__aeabi_fsub>
   107ec:	4639      	mov	r1, r7
   107ee:	f7f0 fa8f 	bl	d10 <__aeabi_fmul>
   107f2:	4966      	ldr	r1, [pc, #408]	; (1098c <__ieee754_expf+0x214>)
   107f4:	f7f0 f984 	bl	b00 <__addsf3>
   107f8:	4639      	mov	r1, r7
   107fa:	f7f0 fa89 	bl	d10 <__aeabi_fmul>
   107fe:	4964      	ldr	r1, [pc, #400]	; (10990 <__ieee754_expf+0x218>)
   10800:	f7f0 f97c 	bl	afc <__aeabi_fsub>
   10804:	4639      	mov	r1, r7
   10806:	f7f0 fa83 	bl	d10 <__aeabi_fmul>
   1080a:	4962      	ldr	r1, [pc, #392]	; (10994 <__ieee754_expf+0x21c>)
   1080c:	f7f0 f978 	bl	b00 <__addsf3>
   10810:	4639      	mov	r1, r7
   10812:	f7f0 fa7d 	bl	d10 <__aeabi_fmul>
   10816:	4601      	mov	r1, r0
   10818:	4630      	mov	r0, r6
   1081a:	f7f0 f96f 	bl	afc <__aeabi_fsub>
   1081e:	4607      	mov	r7, r0
   10820:	4682      	mov	sl, r0
   10822:	2d00      	cmp	r5, #0
   10824:	d05c      	beq.n	108e0 <__ieee754_expf+0x168>
   10826:	4639      	mov	r1, r7
   10828:	4630      	mov	r0, r6
   1082a:	f7f0 fa71 	bl	d10 <__aeabi_fmul>
   1082e:	4604      	mov	r4, r0
   10830:	4639      	mov	r1, r7
   10832:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10836:	f7f0 f961 	bl	afc <__aeabi_fsub>
   1083a:	4601      	mov	r1, r0
   1083c:	4620      	mov	r0, r4
   1083e:	f7f0 fb1b 	bl	e78 <__aeabi_fdiv>
   10842:	4601      	mov	r1, r0
   10844:	4648      	mov	r0, r9
   10846:	f7f0 f959 	bl	afc <__aeabi_fsub>
   1084a:	4641      	mov	r1, r8
   1084c:	f7f0 f956 	bl	afc <__aeabi_fsub>
   10850:	4601      	mov	r1, r0
   10852:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10856:	f7f0 f951 	bl	afc <__aeabi_fsub>
   1085a:	f115 0f7d 	cmn.w	r5, #125	; 0x7d
   1085e:	db5a      	blt.n	10916 <__ieee754_expf+0x19e>
   10860:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   10864:	e002      	b.n	1086c <__ieee754_expf+0xf4>
   10866:	4601      	mov	r1, r0
   10868:	f7f0 f94a 	bl	b00 <__addsf3>
   1086c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10870:	4949      	ldr	r1, [pc, #292]	; (10998 <__ieee754_expf+0x220>)
   10872:	4608      	mov	r0, r1
   10874:	f7f0 fa4c 	bl	d10 <__aeabi_fmul>
   10878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1087c:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
   10880:	d209      	bcs.n	10896 <__ieee754_expf+0x11e>
   10882:	4945      	ldr	r1, [pc, #276]	; (10998 <__ieee754_expf+0x220>)
   10884:	4620      	mov	r0, r4
   10886:	f7f0 f93b 	bl	b00 <__addsf3>
   1088a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1088e:	f7f0 fbfb 	bl	1088 <__aeabi_fcmpgt>
   10892:	2800      	cmp	r0, #0
   10894:	d164      	bne.n	10960 <__ieee754_expf+0x1e8>
   10896:	4621      	mov	r1, r4
   10898:	4620      	mov	r0, r4
   1089a:	f7f0 fa39 	bl	d10 <__aeabi_fmul>
   1089e:	4939      	ldr	r1, [pc, #228]	; (10984 <__ieee754_expf+0x20c>)
   108a0:	4605      	mov	r5, r0
   108a2:	f7f0 fa35 	bl	d10 <__aeabi_fmul>
   108a6:	4938      	ldr	r1, [pc, #224]	; (10988 <__ieee754_expf+0x210>)
   108a8:	f7f0 f928 	bl	afc <__aeabi_fsub>
   108ac:	4629      	mov	r1, r5
   108ae:	f7f0 fa2f 	bl	d10 <__aeabi_fmul>
   108b2:	4936      	ldr	r1, [pc, #216]	; (1098c <__ieee754_expf+0x214>)
   108b4:	f7f0 f924 	bl	b00 <__addsf3>
   108b8:	4629      	mov	r1, r5
   108ba:	f7f0 fa29 	bl	d10 <__aeabi_fmul>
   108be:	4934      	ldr	r1, [pc, #208]	; (10990 <__ieee754_expf+0x218>)
   108c0:	f7f0 f91c 	bl	afc <__aeabi_fsub>
   108c4:	4629      	mov	r1, r5
   108c6:	f7f0 fa23 	bl	d10 <__aeabi_fmul>
   108ca:	4932      	ldr	r1, [pc, #200]	; (10994 <__ieee754_expf+0x21c>)
   108cc:	f7f0 f918 	bl	b00 <__addsf3>
   108d0:	4629      	mov	r1, r5
   108d2:	f7f0 fa1d 	bl	d10 <__aeabi_fmul>
   108d6:	4601      	mov	r1, r0
   108d8:	4620      	mov	r0, r4
   108da:	f7f0 f90f 	bl	afc <__aeabi_fsub>
   108de:	4682      	mov	sl, r0
   108e0:	4651      	mov	r1, sl
   108e2:	4620      	mov	r0, r4
   108e4:	f7f0 fa14 	bl	d10 <__aeabi_fmul>
   108e8:	4605      	mov	r5, r0
   108ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   108ee:	4650      	mov	r0, sl
   108f0:	f7f0 f904 	bl	afc <__aeabi_fsub>
   108f4:	4601      	mov	r1, r0
   108f6:	4628      	mov	r0, r5
   108f8:	f7f0 fabe 	bl	e78 <__aeabi_fdiv>
   108fc:	4621      	mov	r1, r4
   108fe:	f7f0 f8fd 	bl	afc <__aeabi_fsub>
   10902:	4601      	mov	r1, r0
   10904:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10908:	f7f0 f8f8 	bl	afc <__aeabi_fsub>
   1090c:	e7ae      	b.n	1086c <__ieee754_expf+0xf4>
   1090e:	2d00      	cmp	r5, #0
   10910:	f47f af45 	bne.w	1079e <__ieee754_expf+0x26>
   10914:	e7aa      	b.n	1086c <__ieee754_expf+0xf4>
   10916:	3564      	adds	r5, #100	; 0x64
   10918:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
   1091c:	eb00 50c5 	add.w	r0, r0, r5, lsl #23
   10920:	f7f0 f9f6 	bl	d10 <__aeabi_fmul>
   10924:	e7a2      	b.n	1086c <__ieee754_expf+0xf4>
   10926:	491d      	ldr	r1, [pc, #116]	; (1099c <__ieee754_expf+0x224>)
   10928:	4620      	mov	r0, r4
   1092a:	f7f0 f9f1 	bl	d10 <__aeabi_fmul>
   1092e:	4b1c      	ldr	r3, [pc, #112]	; (109a0 <__ieee754_expf+0x228>)
   10930:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
   10934:	f7f0 f8e4 	bl	b00 <__addsf3>
   10938:	f7f0 fbb0 	bl	109c <__aeabi_f2iz>
   1093c:	4605      	mov	r5, r0
   1093e:	f7f0 f993 	bl	c68 <__aeabi_i2f>
   10942:	4918      	ldr	r1, [pc, #96]	; (109a4 <__ieee754_expf+0x22c>)
   10944:	4606      	mov	r6, r0
   10946:	f7f0 f9e3 	bl	d10 <__aeabi_fmul>
   1094a:	4601      	mov	r1, r0
   1094c:	4620      	mov	r0, r4
   1094e:	f7f0 f8d5 	bl	afc <__aeabi_fsub>
   10952:	4915      	ldr	r1, [pc, #84]	; (109a8 <__ieee754_expf+0x230>)
   10954:	4680      	mov	r8, r0
   10956:	4630      	mov	r0, r6
   10958:	f7f0 f9da 	bl	d10 <__aeabi_fmul>
   1095c:	4681      	mov	r9, r0
   1095e:	e735      	b.n	107cc <__ieee754_expf+0x54>
   10960:	4620      	mov	r0, r4
   10962:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10966:	f7f0 f8cb 	bl	b00 <__addsf3>
   1096a:	e77f      	b.n	1086c <__ieee754_expf+0xf4>
   1096c:	42b17217 	.word	0x42b17217
   10970:	42cff1b5 	.word	0x42cff1b5
   10974:	3eb17218 	.word	0x3eb17218
   10978:	3f851591 	.word	0x3f851591
   1097c:	0006bc9c 	.word	0x0006bc9c
   10980:	0006bca4 	.word	0x0006bca4
   10984:	3331bb4c 	.word	0x3331bb4c
   10988:	35ddea0e 	.word	0x35ddea0e
   1098c:	388ab355 	.word	0x388ab355
   10990:	3b360b61 	.word	0x3b360b61
   10994:	3e2aaaab 	.word	0x3e2aaaab
   10998:	7149f2ca 	.word	0x7149f2ca
   1099c:	3fb8aa3b 	.word	0x3fb8aa3b
   109a0:	0006bc94 	.word	0x0006bc94
   109a4:	3f317180 	.word	0x3f317180
   109a8:	3717f7d1 	.word	0x3717f7d1

000109ac <matherr>:
   109ac:	2000      	movs	r0, #0
   109ae:	4770      	bx	lr

000109b0 <finitef>:
   109b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   109b4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
   109b8:	bfac      	ite	ge
   109ba:	2000      	movge	r0, #0
   109bc:	2001      	movlt	r0, #1
   109be:	4770      	bx	lr

000109c0 <__assert_func>:
   109c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   109c2:	4614      	mov	r4, r2
   109c4:	461a      	mov	r2, r3
   109c6:	4b09      	ldr	r3, [pc, #36]	; (109ec <__assert_func+0x2c>)
   109c8:	4605      	mov	r5, r0
   109ca:	681b      	ldr	r3, [r3, #0]
   109cc:	68d8      	ldr	r0, [r3, #12]
   109ce:	b14c      	cbz	r4, 109e4 <__assert_func+0x24>
   109d0:	4b07      	ldr	r3, [pc, #28]	; (109f0 <__assert_func+0x30>)
   109d2:	9100      	str	r1, [sp, #0]
   109d4:	4907      	ldr	r1, [pc, #28]	; (109f4 <__assert_func+0x34>)
   109d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
   109da:	462b      	mov	r3, r5
   109dc:	f000 f80e 	bl	109fc <fiprintf>
   109e0:	f005 fbdb 	bl	1619a <abort>
   109e4:	4b04      	ldr	r3, [pc, #16]	; (109f8 <__assert_func+0x38>)
   109e6:	461c      	mov	r4, r3
   109e8:	e7f3      	b.n	109d2 <__assert_func+0x12>
   109ea:	bf00      	nop
   109ec:	200000cc 	.word	0x200000cc
   109f0:	0006bd1c 	.word	0x0006bd1c
   109f4:	0006bd29 	.word	0x0006bd29
   109f8:	0006bd57 	.word	0x0006bd57

000109fc <fiprintf>:
   109fc:	b40e      	push	{r1, r2, r3}
   109fe:	b503      	push	{r0, r1, lr}
   10a00:	ab03      	add	r3, sp, #12
   10a02:	4601      	mov	r1, r0
   10a04:	4805      	ldr	r0, [pc, #20]	; (10a1c <fiprintf+0x20>)
   10a06:	f853 2b04 	ldr.w	r2, [r3], #4
   10a0a:	6800      	ldr	r0, [r0, #0]
   10a0c:	9301      	str	r3, [sp, #4]
   10a0e:	f000 f8bf 	bl	10b90 <_vfiprintf_r>
   10a12:	b002      	add	sp, #8
   10a14:	f85d eb04 	ldr.w	lr, [sp], #4
   10a18:	b003      	add	sp, #12
   10a1a:	4770      	bx	lr
   10a1c:	200000cc 	.word	0x200000cc

00010a20 <malloc>:
   10a20:	4b02      	ldr	r3, [pc, #8]	; (10a2c <malloc+0xc>)
   10a22:	4601      	mov	r1, r0
   10a24:	6818      	ldr	r0, [r3, #0]
   10a26:	f000 b859 	b.w	10adc <_malloc_r>
   10a2a:	bf00      	nop
   10a2c:	200000cc 	.word	0x200000cc

00010a30 <free>:
   10a30:	4b02      	ldr	r3, [pc, #8]	; (10a3c <free+0xc>)
   10a32:	4601      	mov	r1, r0
   10a34:	6818      	ldr	r0, [r3, #0]
   10a36:	f000 b803 	b.w	10a40 <_free_r>
   10a3a:	bf00      	nop
   10a3c:	200000cc 	.word	0x200000cc

00010a40 <_free_r>:
   10a40:	b538      	push	{r3, r4, r5, lr}
   10a42:	4605      	mov	r5, r0
   10a44:	2900      	cmp	r1, #0
   10a46:	d045      	beq.n	10ad4 <_free_r+0x94>
   10a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
   10a4c:	1f0c      	subs	r4, r1, #4
   10a4e:	2b00      	cmp	r3, #0
   10a50:	bfb8      	it	lt
   10a52:	18e4      	addlt	r4, r4, r3
   10a54:	f001 f88c 	bl	11b70 <__malloc_lock>
   10a58:	4a1f      	ldr	r2, [pc, #124]	; (10ad8 <_free_r+0x98>)
   10a5a:	6813      	ldr	r3, [r2, #0]
   10a5c:	4610      	mov	r0, r2
   10a5e:	b933      	cbnz	r3, 10a6e <_free_r+0x2e>
   10a60:	6063      	str	r3, [r4, #4]
   10a62:	6014      	str	r4, [r2, #0]
   10a64:	4628      	mov	r0, r5
   10a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10a6a:	f001 b887 	b.w	11b7c <__malloc_unlock>
   10a6e:	42a3      	cmp	r3, r4
   10a70:	d90b      	bls.n	10a8a <_free_r+0x4a>
   10a72:	6821      	ldr	r1, [r4, #0]
   10a74:	1862      	adds	r2, r4, r1
   10a76:	4293      	cmp	r3, r2
   10a78:	bf02      	ittt	eq
   10a7a:	681a      	ldreq	r2, [r3, #0]
   10a7c:	685b      	ldreq	r3, [r3, #4]
   10a7e:	1852      	addeq	r2, r2, r1
   10a80:	6063      	str	r3, [r4, #4]
   10a82:	bf08      	it	eq
   10a84:	6022      	streq	r2, [r4, #0]
   10a86:	6004      	str	r4, [r0, #0]
   10a88:	e7ec      	b.n	10a64 <_free_r+0x24>
   10a8a:	461a      	mov	r2, r3
   10a8c:	685b      	ldr	r3, [r3, #4]
   10a8e:	b10b      	cbz	r3, 10a94 <_free_r+0x54>
   10a90:	42a3      	cmp	r3, r4
   10a92:	d9fa      	bls.n	10a8a <_free_r+0x4a>
   10a94:	6811      	ldr	r1, [r2, #0]
   10a96:	1850      	adds	r0, r2, r1
   10a98:	42a0      	cmp	r0, r4
   10a9a:	d10b      	bne.n	10ab4 <_free_r+0x74>
   10a9c:	6820      	ldr	r0, [r4, #0]
   10a9e:	4401      	add	r1, r0
   10aa0:	1850      	adds	r0, r2, r1
   10aa2:	6011      	str	r1, [r2, #0]
   10aa4:	4283      	cmp	r3, r0
   10aa6:	d1dd      	bne.n	10a64 <_free_r+0x24>
   10aa8:	6818      	ldr	r0, [r3, #0]
   10aaa:	685b      	ldr	r3, [r3, #4]
   10aac:	4401      	add	r1, r0
   10aae:	6053      	str	r3, [r2, #4]
   10ab0:	6011      	str	r1, [r2, #0]
   10ab2:	e7d7      	b.n	10a64 <_free_r+0x24>
   10ab4:	d902      	bls.n	10abc <_free_r+0x7c>
   10ab6:	230c      	movs	r3, #12
   10ab8:	602b      	str	r3, [r5, #0]
   10aba:	e7d3      	b.n	10a64 <_free_r+0x24>
   10abc:	6820      	ldr	r0, [r4, #0]
   10abe:	1821      	adds	r1, r4, r0
   10ac0:	428b      	cmp	r3, r1
   10ac2:	bf02      	ittt	eq
   10ac4:	6819      	ldreq	r1, [r3, #0]
   10ac6:	685b      	ldreq	r3, [r3, #4]
   10ac8:	1809      	addeq	r1, r1, r0
   10aca:	6063      	str	r3, [r4, #4]
   10acc:	bf08      	it	eq
   10ace:	6021      	streq	r1, [r4, #0]
   10ad0:	6054      	str	r4, [r2, #4]
   10ad2:	e7c7      	b.n	10a64 <_free_r+0x24>
   10ad4:	bd38      	pop	{r3, r4, r5, pc}
   10ad6:	bf00      	nop
   10ad8:	20020a7c 	.word	0x20020a7c

00010adc <_malloc_r>:
   10adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ade:	1ccd      	adds	r5, r1, #3
   10ae0:	4606      	mov	r6, r0
   10ae2:	f025 0503 	bic.w	r5, r5, #3
   10ae6:	3508      	adds	r5, #8
   10ae8:	2d0c      	cmp	r5, #12
   10aea:	bf38      	it	cc
   10aec:	250c      	movcc	r5, #12
   10aee:	2d00      	cmp	r5, #0
   10af0:	db01      	blt.n	10af6 <_malloc_r+0x1a>
   10af2:	42a9      	cmp	r1, r5
   10af4:	d903      	bls.n	10afe <_malloc_r+0x22>
   10af6:	230c      	movs	r3, #12
   10af8:	6033      	str	r3, [r6, #0]
   10afa:	2000      	movs	r0, #0
   10afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10afe:	f001 f837 	bl	11b70 <__malloc_lock>
   10b02:	4921      	ldr	r1, [pc, #132]	; (10b88 <_malloc_r+0xac>)
   10b04:	680a      	ldr	r2, [r1, #0]
   10b06:	4614      	mov	r4, r2
   10b08:	b99c      	cbnz	r4, 10b32 <_malloc_r+0x56>
   10b0a:	4f20      	ldr	r7, [pc, #128]	; (10b8c <_malloc_r+0xb0>)
   10b0c:	683b      	ldr	r3, [r7, #0]
   10b0e:	b923      	cbnz	r3, 10b1a <_malloc_r+0x3e>
   10b10:	4621      	mov	r1, r4
   10b12:	4630      	mov	r0, r6
   10b14:	f000 fcbc 	bl	11490 <_sbrk_r>
   10b18:	6038      	str	r0, [r7, #0]
   10b1a:	4629      	mov	r1, r5
   10b1c:	4630      	mov	r0, r6
   10b1e:	f000 fcb7 	bl	11490 <_sbrk_r>
   10b22:	1c43      	adds	r3, r0, #1
   10b24:	d123      	bne.n	10b6e <_malloc_r+0x92>
   10b26:	230c      	movs	r3, #12
   10b28:	4630      	mov	r0, r6
   10b2a:	6033      	str	r3, [r6, #0]
   10b2c:	f001 f826 	bl	11b7c <__malloc_unlock>
   10b30:	e7e3      	b.n	10afa <_malloc_r+0x1e>
   10b32:	6823      	ldr	r3, [r4, #0]
   10b34:	1b5b      	subs	r3, r3, r5
   10b36:	d417      	bmi.n	10b68 <_malloc_r+0x8c>
   10b38:	2b0b      	cmp	r3, #11
   10b3a:	d903      	bls.n	10b44 <_malloc_r+0x68>
   10b3c:	6023      	str	r3, [r4, #0]
   10b3e:	441c      	add	r4, r3
   10b40:	6025      	str	r5, [r4, #0]
   10b42:	e004      	b.n	10b4e <_malloc_r+0x72>
   10b44:	6863      	ldr	r3, [r4, #4]
   10b46:	42a2      	cmp	r2, r4
   10b48:	bf0c      	ite	eq
   10b4a:	600b      	streq	r3, [r1, #0]
   10b4c:	6053      	strne	r3, [r2, #4]
   10b4e:	4630      	mov	r0, r6
   10b50:	f001 f814 	bl	11b7c <__malloc_unlock>
   10b54:	f104 000b 	add.w	r0, r4, #11
   10b58:	1d23      	adds	r3, r4, #4
   10b5a:	f020 0007 	bic.w	r0, r0, #7
   10b5e:	1ac2      	subs	r2, r0, r3
   10b60:	d0cc      	beq.n	10afc <_malloc_r+0x20>
   10b62:	1a1b      	subs	r3, r3, r0
   10b64:	50a3      	str	r3, [r4, r2]
   10b66:	e7c9      	b.n	10afc <_malloc_r+0x20>
   10b68:	4622      	mov	r2, r4
   10b6a:	6864      	ldr	r4, [r4, #4]
   10b6c:	e7cc      	b.n	10b08 <_malloc_r+0x2c>
   10b6e:	1cc4      	adds	r4, r0, #3
   10b70:	f024 0403 	bic.w	r4, r4, #3
   10b74:	42a0      	cmp	r0, r4
   10b76:	d0e3      	beq.n	10b40 <_malloc_r+0x64>
   10b78:	1a21      	subs	r1, r4, r0
   10b7a:	4630      	mov	r0, r6
   10b7c:	f000 fc88 	bl	11490 <_sbrk_r>
   10b80:	3001      	adds	r0, #1
   10b82:	d1dd      	bne.n	10b40 <_malloc_r+0x64>
   10b84:	e7cf      	b.n	10b26 <_malloc_r+0x4a>
   10b86:	bf00      	nop
   10b88:	20020a7c 	.word	0x20020a7c
   10b8c:	20020a80 	.word	0x20020a80

00010b90 <_vfiprintf_r>:
   10b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b94:	460d      	mov	r5, r1
   10b96:	b09d      	sub	sp, #116	; 0x74
   10b98:	4614      	mov	r4, r2
   10b9a:	4698      	mov	r8, r3
   10b9c:	4606      	mov	r6, r0
   10b9e:	b118      	cbz	r0, 10ba8 <_vfiprintf_r+0x18>
   10ba0:	6983      	ldr	r3, [r0, #24]
   10ba2:	b90b      	cbnz	r3, 10ba8 <_vfiprintf_r+0x18>
   10ba4:	f000 ff22 	bl	119ec <__sinit>
   10ba8:	4b89      	ldr	r3, [pc, #548]	; (10dd0 <_vfiprintf_r+0x240>)
   10baa:	429d      	cmp	r5, r3
   10bac:	d11b      	bne.n	10be6 <_vfiprintf_r+0x56>
   10bae:	6875      	ldr	r5, [r6, #4]
   10bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10bb2:	07d9      	lsls	r1, r3, #31
   10bb4:	d405      	bmi.n	10bc2 <_vfiprintf_r+0x32>
   10bb6:	89ab      	ldrh	r3, [r5, #12]
   10bb8:	059a      	lsls	r2, r3, #22
   10bba:	d402      	bmi.n	10bc2 <_vfiprintf_r+0x32>
   10bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10bbe:	f001 fea7 	bl	12910 <__retarget_lock_acquire_recursive>
   10bc2:	89ab      	ldrh	r3, [r5, #12]
   10bc4:	071b      	lsls	r3, r3, #28
   10bc6:	d501      	bpl.n	10bcc <_vfiprintf_r+0x3c>
   10bc8:	692b      	ldr	r3, [r5, #16]
   10bca:	b9eb      	cbnz	r3, 10c08 <_vfiprintf_r+0x78>
   10bcc:	4629      	mov	r1, r5
   10bce:	4630      	mov	r0, r6
   10bd0:	f000 fd9c 	bl	1170c <__swsetup_r>
   10bd4:	b1c0      	cbz	r0, 10c08 <_vfiprintf_r+0x78>
   10bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10bd8:	07dc      	lsls	r4, r3, #31
   10bda:	d50e      	bpl.n	10bfa <_vfiprintf_r+0x6a>
   10bdc:	f04f 30ff 	mov.w	r0, #4294967295
   10be0:	b01d      	add	sp, #116	; 0x74
   10be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10be6:	4b7b      	ldr	r3, [pc, #492]	; (10dd4 <_vfiprintf_r+0x244>)
   10be8:	429d      	cmp	r5, r3
   10bea:	d101      	bne.n	10bf0 <_vfiprintf_r+0x60>
   10bec:	68b5      	ldr	r5, [r6, #8]
   10bee:	e7df      	b.n	10bb0 <_vfiprintf_r+0x20>
   10bf0:	4b79      	ldr	r3, [pc, #484]	; (10dd8 <_vfiprintf_r+0x248>)
   10bf2:	429d      	cmp	r5, r3
   10bf4:	bf08      	it	eq
   10bf6:	68f5      	ldreq	r5, [r6, #12]
   10bf8:	e7da      	b.n	10bb0 <_vfiprintf_r+0x20>
   10bfa:	89ab      	ldrh	r3, [r5, #12]
   10bfc:	0598      	lsls	r0, r3, #22
   10bfe:	d4ed      	bmi.n	10bdc <_vfiprintf_r+0x4c>
   10c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10c02:	f001 fe8d 	bl	12920 <__retarget_lock_release_recursive>
   10c06:	e7e9      	b.n	10bdc <_vfiprintf_r+0x4c>
   10c08:	2300      	movs	r3, #0
   10c0a:	f8cd 800c 	str.w	r8, [sp, #12]
   10c0e:	f04f 0901 	mov.w	r9, #1
   10c12:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 10ddc <_vfiprintf_r+0x24c>
   10c16:	9309      	str	r3, [sp, #36]	; 0x24
   10c18:	2320      	movs	r3, #32
   10c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10c1e:	2330      	movs	r3, #48	; 0x30
   10c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10c24:	4623      	mov	r3, r4
   10c26:	469a      	mov	sl, r3
   10c28:	f813 2b01 	ldrb.w	r2, [r3], #1
   10c2c:	b10a      	cbz	r2, 10c32 <_vfiprintf_r+0xa2>
   10c2e:	2a25      	cmp	r2, #37	; 0x25
   10c30:	d1f9      	bne.n	10c26 <_vfiprintf_r+0x96>
   10c32:	ebba 0b04 	subs.w	fp, sl, r4
   10c36:	d00b      	beq.n	10c50 <_vfiprintf_r+0xc0>
   10c38:	465b      	mov	r3, fp
   10c3a:	4622      	mov	r2, r4
   10c3c:	4629      	mov	r1, r5
   10c3e:	4630      	mov	r0, r6
   10c40:	f005 faee 	bl	16220 <__sfputs_r>
   10c44:	3001      	adds	r0, #1
   10c46:	f000 80aa 	beq.w	10d9e <_vfiprintf_r+0x20e>
   10c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c4c:	445a      	add	r2, fp
   10c4e:	9209      	str	r2, [sp, #36]	; 0x24
   10c50:	f89a 3000 	ldrb.w	r3, [sl]
   10c54:	2b00      	cmp	r3, #0
   10c56:	f000 80a2 	beq.w	10d9e <_vfiprintf_r+0x20e>
   10c5a:	2300      	movs	r3, #0
   10c5c:	f04f 32ff 	mov.w	r2, #4294967295
   10c60:	f10a 0a01 	add.w	sl, sl, #1
   10c64:	9304      	str	r3, [sp, #16]
   10c66:	9307      	str	r3, [sp, #28]
   10c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10c6c:	931a      	str	r3, [sp, #104]	; 0x68
   10c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   10c72:	4654      	mov	r4, sl
   10c74:	2205      	movs	r2, #5
   10c76:	4859      	ldr	r0, [pc, #356]	; (10ddc <_vfiprintf_r+0x24c>)
   10c78:	f814 1b01 	ldrb.w	r1, [r4], #1
   10c7c:	f005 fa98 	bl	161b0 <memchr>
   10c80:	9a04      	ldr	r2, [sp, #16]
   10c82:	b9d8      	cbnz	r0, 10cbc <_vfiprintf_r+0x12c>
   10c84:	06d1      	lsls	r1, r2, #27
   10c86:	bf44      	itt	mi
   10c88:	2320      	movmi	r3, #32
   10c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10c8e:	0713      	lsls	r3, r2, #28
   10c90:	bf44      	itt	mi
   10c92:	232b      	movmi	r3, #43	; 0x2b
   10c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   10c98:	f89a 3000 	ldrb.w	r3, [sl]
   10c9c:	2b2a      	cmp	r3, #42	; 0x2a
   10c9e:	d015      	beq.n	10ccc <_vfiprintf_r+0x13c>
   10ca0:	9a07      	ldr	r2, [sp, #28]
   10ca2:	4654      	mov	r4, sl
   10ca4:	2000      	movs	r0, #0
   10ca6:	f04f 0c0a 	mov.w	ip, #10
   10caa:	4621      	mov	r1, r4
   10cac:	f811 3b01 	ldrb.w	r3, [r1], #1
   10cb0:	3b30      	subs	r3, #48	; 0x30
   10cb2:	2b09      	cmp	r3, #9
   10cb4:	d94e      	bls.n	10d54 <_vfiprintf_r+0x1c4>
   10cb6:	b1b0      	cbz	r0, 10ce6 <_vfiprintf_r+0x156>
   10cb8:	9207      	str	r2, [sp, #28]
   10cba:	e014      	b.n	10ce6 <_vfiprintf_r+0x156>
   10cbc:	eba0 0308 	sub.w	r3, r0, r8
   10cc0:	46a2      	mov	sl, r4
   10cc2:	fa09 f303 	lsl.w	r3, r9, r3
   10cc6:	4313      	orrs	r3, r2
   10cc8:	9304      	str	r3, [sp, #16]
   10cca:	e7d2      	b.n	10c72 <_vfiprintf_r+0xe2>
   10ccc:	9b03      	ldr	r3, [sp, #12]
   10cce:	1d19      	adds	r1, r3, #4
   10cd0:	681b      	ldr	r3, [r3, #0]
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	9103      	str	r1, [sp, #12]
   10cd6:	bfbb      	ittet	lt
   10cd8:	425b      	neglt	r3, r3
   10cda:	f042 0202 	orrlt.w	r2, r2, #2
   10cde:	9307      	strge	r3, [sp, #28]
   10ce0:	9307      	strlt	r3, [sp, #28]
   10ce2:	bfb8      	it	lt
   10ce4:	9204      	strlt	r2, [sp, #16]
   10ce6:	7823      	ldrb	r3, [r4, #0]
   10ce8:	2b2e      	cmp	r3, #46	; 0x2e
   10cea:	d10c      	bne.n	10d06 <_vfiprintf_r+0x176>
   10cec:	7863      	ldrb	r3, [r4, #1]
   10cee:	2b2a      	cmp	r3, #42	; 0x2a
   10cf0:	d135      	bne.n	10d5e <_vfiprintf_r+0x1ce>
   10cf2:	9b03      	ldr	r3, [sp, #12]
   10cf4:	3402      	adds	r4, #2
   10cf6:	1d1a      	adds	r2, r3, #4
   10cf8:	681b      	ldr	r3, [r3, #0]
   10cfa:	2b00      	cmp	r3, #0
   10cfc:	9203      	str	r2, [sp, #12]
   10cfe:	bfb8      	it	lt
   10d00:	f04f 33ff 	movlt.w	r3, #4294967295
   10d04:	9305      	str	r3, [sp, #20]
   10d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10dec <_vfiprintf_r+0x25c>
   10d0a:	2203      	movs	r2, #3
   10d0c:	7821      	ldrb	r1, [r4, #0]
   10d0e:	4650      	mov	r0, sl
   10d10:	f005 fa4e 	bl	161b0 <memchr>
   10d14:	b140      	cbz	r0, 10d28 <_vfiprintf_r+0x198>
   10d16:	2340      	movs	r3, #64	; 0x40
   10d18:	eba0 000a 	sub.w	r0, r0, sl
   10d1c:	3401      	adds	r4, #1
   10d1e:	fa03 f000 	lsl.w	r0, r3, r0
   10d22:	9b04      	ldr	r3, [sp, #16]
   10d24:	4303      	orrs	r3, r0
   10d26:	9304      	str	r3, [sp, #16]
   10d28:	f814 1b01 	ldrb.w	r1, [r4], #1
   10d2c:	2206      	movs	r2, #6
   10d2e:	482c      	ldr	r0, [pc, #176]	; (10de0 <_vfiprintf_r+0x250>)
   10d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10d34:	f005 fa3c 	bl	161b0 <memchr>
   10d38:	2800      	cmp	r0, #0
   10d3a:	d03f      	beq.n	10dbc <_vfiprintf_r+0x22c>
   10d3c:	4b29      	ldr	r3, [pc, #164]	; (10de4 <_vfiprintf_r+0x254>)
   10d3e:	bb1b      	cbnz	r3, 10d88 <_vfiprintf_r+0x1f8>
   10d40:	9b03      	ldr	r3, [sp, #12]
   10d42:	3307      	adds	r3, #7
   10d44:	f023 0307 	bic.w	r3, r3, #7
   10d48:	3308      	adds	r3, #8
   10d4a:	9303      	str	r3, [sp, #12]
   10d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d4e:	443b      	add	r3, r7
   10d50:	9309      	str	r3, [sp, #36]	; 0x24
   10d52:	e767      	b.n	10c24 <_vfiprintf_r+0x94>
   10d54:	fb0c 3202 	mla	r2, ip, r2, r3
   10d58:	460c      	mov	r4, r1
   10d5a:	2001      	movs	r0, #1
   10d5c:	e7a5      	b.n	10caa <_vfiprintf_r+0x11a>
   10d5e:	2300      	movs	r3, #0
   10d60:	3401      	adds	r4, #1
   10d62:	f04f 0c0a 	mov.w	ip, #10
   10d66:	4619      	mov	r1, r3
   10d68:	9305      	str	r3, [sp, #20]
   10d6a:	4620      	mov	r0, r4
   10d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10d70:	3a30      	subs	r2, #48	; 0x30
   10d72:	2a09      	cmp	r2, #9
   10d74:	d903      	bls.n	10d7e <_vfiprintf_r+0x1ee>
   10d76:	2b00      	cmp	r3, #0
   10d78:	d0c5      	beq.n	10d06 <_vfiprintf_r+0x176>
   10d7a:	9105      	str	r1, [sp, #20]
   10d7c:	e7c3      	b.n	10d06 <_vfiprintf_r+0x176>
   10d7e:	fb0c 2101 	mla	r1, ip, r1, r2
   10d82:	4604      	mov	r4, r0
   10d84:	2301      	movs	r3, #1
   10d86:	e7f0      	b.n	10d6a <_vfiprintf_r+0x1da>
   10d88:	ab03      	add	r3, sp, #12
   10d8a:	462a      	mov	r2, r5
   10d8c:	a904      	add	r1, sp, #16
   10d8e:	4630      	mov	r0, r6
   10d90:	9300      	str	r3, [sp, #0]
   10d92:	4b15      	ldr	r3, [pc, #84]	; (10de8 <_vfiprintf_r+0x258>)
   10d94:	f000 f82c 	bl	10df0 <_printf_float>
   10d98:	4607      	mov	r7, r0
   10d9a:	1c78      	adds	r0, r7, #1
   10d9c:	d1d6      	bne.n	10d4c <_vfiprintf_r+0x1bc>
   10d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10da0:	07d9      	lsls	r1, r3, #31
   10da2:	d405      	bmi.n	10db0 <_vfiprintf_r+0x220>
   10da4:	89ab      	ldrh	r3, [r5, #12]
   10da6:	059a      	lsls	r2, r3, #22
   10da8:	d402      	bmi.n	10db0 <_vfiprintf_r+0x220>
   10daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10dac:	f001 fdb8 	bl	12920 <__retarget_lock_release_recursive>
   10db0:	89ab      	ldrh	r3, [r5, #12]
   10db2:	065b      	lsls	r3, r3, #25
   10db4:	f53f af12 	bmi.w	10bdc <_vfiprintf_r+0x4c>
   10db8:	9809      	ldr	r0, [sp, #36]	; 0x24
   10dba:	e711      	b.n	10be0 <_vfiprintf_r+0x50>
   10dbc:	ab03      	add	r3, sp, #12
   10dbe:	462a      	mov	r2, r5
   10dc0:	a904      	add	r1, sp, #16
   10dc2:	4630      	mov	r0, r6
   10dc4:	9300      	str	r3, [sp, #0]
   10dc6:	4b08      	ldr	r3, [pc, #32]	; (10de8 <_vfiprintf_r+0x258>)
   10dc8:	f000 fa3c 	bl	11244 <_printf_i>
   10dcc:	e7e4      	b.n	10d98 <_vfiprintf_r+0x208>
   10dce:	bf00      	nop
   10dd0:	0006bcd0 	.word	0x0006bcd0
   10dd4:	0006bcf0 	.word	0x0006bcf0
   10dd8:	0006bcb0 	.word	0x0006bcb0
   10ddc:	0006be59 	.word	0x0006be59
   10de0:	0006be63 	.word	0x0006be63
   10de4:	00010df1 	.word	0x00010df1
   10de8:	00016221 	.word	0x00016221
   10dec:	0006be5f 	.word	0x0006be5f

00010df0 <_printf_float>:
   10df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10df4:	b091      	sub	sp, #68	; 0x44
   10df6:	460c      	mov	r4, r1
   10df8:	4616      	mov	r6, r2
   10dfa:	461f      	mov	r7, r3
   10dfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   10e00:	4605      	mov	r5, r0
   10e02:	f000 fe71 	bl	11ae8 <_localeconv_r>
   10e06:	6803      	ldr	r3, [r0, #0]
   10e08:	4618      	mov	r0, r3
   10e0a:	9309      	str	r3, [sp, #36]	; 0x24
   10e0c:	f7f0 fb62 	bl	14d4 <strlen>
   10e10:	2300      	movs	r3, #0
   10e12:	900a      	str	r0, [sp, #40]	; 0x28
   10e14:	930e      	str	r3, [sp, #56]	; 0x38
   10e16:	f8d8 3000 	ldr.w	r3, [r8]
   10e1a:	f894 9018 	ldrb.w	r9, [r4, #24]
   10e1e:	3307      	adds	r3, #7
   10e20:	f8d4 b000 	ldr.w	fp, [r4]
   10e24:	f023 0307 	bic.w	r3, r3, #7
   10e28:	f103 0208 	add.w	r2, r3, #8
   10e2c:	f8c8 2000 	str.w	r2, [r8]
   10e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   10e38:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   10e3c:	f04f 32ff 	mov.w	r2, #4294967295
   10e40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   10e44:	4640      	mov	r0, r8
   10e46:	930b      	str	r3, [sp, #44]	; 0x2c
   10e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10e4a:	4b9b      	ldr	r3, [pc, #620]	; (110b8 <_printf_float+0x2c8>)
   10e4c:	f7f0 fb22 	bl	1494 <__aeabi_dcmpun>
   10e50:	bb70      	cbnz	r0, 10eb0 <_printf_float+0xc0>
   10e52:	f04f 32ff 	mov.w	r2, #4294967295
   10e56:	4b98      	ldr	r3, [pc, #608]	; (110b8 <_printf_float+0x2c8>)
   10e58:	4640      	mov	r0, r8
   10e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10e5c:	f7ef fdb4 	bl	9c8 <__aeabi_dcmple>
   10e60:	bb30      	cbnz	r0, 10eb0 <_printf_float+0xc0>
   10e62:	2200      	movs	r2, #0
   10e64:	2300      	movs	r3, #0
   10e66:	4640      	mov	r0, r8
   10e68:	4651      	mov	r1, sl
   10e6a:	f7ef fda3 	bl	9b4 <__aeabi_dcmplt>
   10e6e:	b110      	cbz	r0, 10e76 <_printf_float+0x86>
   10e70:	232d      	movs	r3, #45	; 0x2d
   10e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10e76:	4b91      	ldr	r3, [pc, #580]	; (110bc <_printf_float+0x2cc>)
   10e78:	4891      	ldr	r0, [pc, #580]	; (110c0 <_printf_float+0x2d0>)
   10e7a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   10e7e:	bf94      	ite	ls
   10e80:	4698      	movls	r8, r3
   10e82:	4680      	movhi	r8, r0
   10e84:	2303      	movs	r3, #3
   10e86:	f04f 0a00 	mov.w	sl, #0
   10e8a:	6123      	str	r3, [r4, #16]
   10e8c:	f02b 0304 	bic.w	r3, fp, #4
   10e90:	6023      	str	r3, [r4, #0]
   10e92:	4633      	mov	r3, r6
   10e94:	aa0f      	add	r2, sp, #60	; 0x3c
   10e96:	4621      	mov	r1, r4
   10e98:	4628      	mov	r0, r5
   10e9a:	9700      	str	r7, [sp, #0]
   10e9c:	f005 fa70 	bl	16380 <_printf_common>
   10ea0:	3001      	adds	r0, #1
   10ea2:	f040 808f 	bne.w	10fc4 <_printf_float+0x1d4>
   10ea6:	f04f 30ff 	mov.w	r0, #4294967295
   10eaa:	b011      	add	sp, #68	; 0x44
   10eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eb0:	4642      	mov	r2, r8
   10eb2:	4653      	mov	r3, sl
   10eb4:	4640      	mov	r0, r8
   10eb6:	4651      	mov	r1, sl
   10eb8:	f7f0 faec 	bl	1494 <__aeabi_dcmpun>
   10ebc:	b140      	cbz	r0, 10ed0 <_printf_float+0xe0>
   10ebe:	f1ba 0f00 	cmp.w	sl, #0
   10ec2:	4880      	ldr	r0, [pc, #512]	; (110c4 <_printf_float+0x2d4>)
   10ec4:	bfbc      	itt	lt
   10ec6:	232d      	movlt	r3, #45	; 0x2d
   10ec8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   10ecc:	4b7e      	ldr	r3, [pc, #504]	; (110c8 <_printf_float+0x2d8>)
   10ece:	e7d4      	b.n	10e7a <_printf_float+0x8a>
   10ed0:	6863      	ldr	r3, [r4, #4]
   10ed2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   10ed6:	1c5a      	adds	r2, r3, #1
   10ed8:	d142      	bne.n	10f60 <_printf_float+0x170>
   10eda:	2306      	movs	r3, #6
   10edc:	6063      	str	r3, [r4, #4]
   10ede:	2200      	movs	r2, #0
   10ee0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   10ee4:	4628      	mov	r0, r5
   10ee6:	910b      	str	r1, [sp, #44]	; 0x2c
   10ee8:	9206      	str	r2, [sp, #24]
   10eea:	aa0e      	add	r2, sp, #56	; 0x38
   10eec:	6023      	str	r3, [r4, #0]
   10eee:	e9cd 9204 	strd	r9, r2, [sp, #16]
   10ef2:	aa0d      	add	r2, sp, #52	; 0x34
   10ef4:	9203      	str	r2, [sp, #12]
   10ef6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   10efa:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10efe:	6863      	ldr	r3, [r4, #4]
   10f00:	4642      	mov	r2, r8
   10f02:	9300      	str	r3, [sp, #0]
   10f04:	4653      	mov	r3, sl
   10f06:	f005 f99d 	bl	16244 <__cvt>
   10f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f0c:	4680      	mov	r8, r0
   10f0e:	2947      	cmp	r1, #71	; 0x47
   10f10:	990d      	ldr	r1, [sp, #52]	; 0x34
   10f12:	d108      	bne.n	10f26 <_printf_float+0x136>
   10f14:	1cc8      	adds	r0, r1, #3
   10f16:	db02      	blt.n	10f1e <_printf_float+0x12e>
   10f18:	6863      	ldr	r3, [r4, #4]
   10f1a:	4299      	cmp	r1, r3
   10f1c:	dd40      	ble.n	10fa0 <_printf_float+0x1b0>
   10f1e:	f1a9 0902 	sub.w	r9, r9, #2
   10f22:	fa5f f989 	uxtb.w	r9, r9
   10f26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10f2a:	d81f      	bhi.n	10f6c <_printf_float+0x17c>
   10f2c:	3901      	subs	r1, #1
   10f2e:	464a      	mov	r2, r9
   10f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
   10f34:	910d      	str	r1, [sp, #52]	; 0x34
   10f36:	f005 f9e5 	bl	16304 <__exponent>
   10f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10f3c:	4682      	mov	sl, r0
   10f3e:	1813      	adds	r3, r2, r0
   10f40:	2a01      	cmp	r2, #1
   10f42:	6123      	str	r3, [r4, #16]
   10f44:	dc02      	bgt.n	10f4c <_printf_float+0x15c>
   10f46:	6822      	ldr	r2, [r4, #0]
   10f48:	07d2      	lsls	r2, r2, #31
   10f4a:	d501      	bpl.n	10f50 <_printf_float+0x160>
   10f4c:	3301      	adds	r3, #1
   10f4e:	6123      	str	r3, [r4, #16]
   10f50:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   10f54:	2b00      	cmp	r3, #0
   10f56:	d09c      	beq.n	10e92 <_printf_float+0xa2>
   10f58:	232d      	movs	r3, #45	; 0x2d
   10f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   10f5e:	e798      	b.n	10e92 <_printf_float+0xa2>
   10f60:	2947      	cmp	r1, #71	; 0x47
   10f62:	d1bc      	bne.n	10ede <_printf_float+0xee>
   10f64:	2b00      	cmp	r3, #0
   10f66:	d1ba      	bne.n	10ede <_printf_float+0xee>
   10f68:	2301      	movs	r3, #1
   10f6a:	e7b7      	b.n	10edc <_printf_float+0xec>
   10f6c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   10f70:	d118      	bne.n	10fa4 <_printf_float+0x1b4>
   10f72:	2900      	cmp	r1, #0
   10f74:	6863      	ldr	r3, [r4, #4]
   10f76:	dd0b      	ble.n	10f90 <_printf_float+0x1a0>
   10f78:	6121      	str	r1, [r4, #16]
   10f7a:	b913      	cbnz	r3, 10f82 <_printf_float+0x192>
   10f7c:	6822      	ldr	r2, [r4, #0]
   10f7e:	07d0      	lsls	r0, r2, #31
   10f80:	d502      	bpl.n	10f88 <_printf_float+0x198>
   10f82:	3301      	adds	r3, #1
   10f84:	440b      	add	r3, r1
   10f86:	6123      	str	r3, [r4, #16]
   10f88:	f04f 0a00 	mov.w	sl, #0
   10f8c:	65a1      	str	r1, [r4, #88]	; 0x58
   10f8e:	e7df      	b.n	10f50 <_printf_float+0x160>
   10f90:	b913      	cbnz	r3, 10f98 <_printf_float+0x1a8>
   10f92:	6822      	ldr	r2, [r4, #0]
   10f94:	07d2      	lsls	r2, r2, #31
   10f96:	d501      	bpl.n	10f9c <_printf_float+0x1ac>
   10f98:	3302      	adds	r3, #2
   10f9a:	e7f4      	b.n	10f86 <_printf_float+0x196>
   10f9c:	2301      	movs	r3, #1
   10f9e:	e7f2      	b.n	10f86 <_printf_float+0x196>
   10fa0:	f04f 0967 	mov.w	r9, #103	; 0x67
   10fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fa6:	4299      	cmp	r1, r3
   10fa8:	db05      	blt.n	10fb6 <_printf_float+0x1c6>
   10faa:	6823      	ldr	r3, [r4, #0]
   10fac:	6121      	str	r1, [r4, #16]
   10fae:	07d8      	lsls	r0, r3, #31
   10fb0:	d5ea      	bpl.n	10f88 <_printf_float+0x198>
   10fb2:	1c4b      	adds	r3, r1, #1
   10fb4:	e7e7      	b.n	10f86 <_printf_float+0x196>
   10fb6:	2900      	cmp	r1, #0
   10fb8:	bfd4      	ite	le
   10fba:	f1c1 0202 	rsble	r2, r1, #2
   10fbe:	2201      	movgt	r2, #1
   10fc0:	4413      	add	r3, r2
   10fc2:	e7e0      	b.n	10f86 <_printf_float+0x196>
   10fc4:	6823      	ldr	r3, [r4, #0]
   10fc6:	055a      	lsls	r2, r3, #21
   10fc8:	d407      	bmi.n	10fda <_printf_float+0x1ea>
   10fca:	6923      	ldr	r3, [r4, #16]
   10fcc:	4642      	mov	r2, r8
   10fce:	4631      	mov	r1, r6
   10fd0:	4628      	mov	r0, r5
   10fd2:	47b8      	blx	r7
   10fd4:	3001      	adds	r0, #1
   10fd6:	d12b      	bne.n	11030 <_printf_float+0x240>
   10fd8:	e765      	b.n	10ea6 <_printf_float+0xb6>
   10fda:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   10fde:	f240 80dc 	bls.w	1119a <_printf_float+0x3aa>
   10fe2:	2200      	movs	r2, #0
   10fe4:	2300      	movs	r3, #0
   10fe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   10fea:	f7ef fcd9 	bl	9a0 <__aeabi_dcmpeq>
   10fee:	2800      	cmp	r0, #0
   10ff0:	d033      	beq.n	1105a <_printf_float+0x26a>
   10ff2:	2301      	movs	r3, #1
   10ff4:	4a35      	ldr	r2, [pc, #212]	; (110cc <_printf_float+0x2dc>)
   10ff6:	4631      	mov	r1, r6
   10ff8:	4628      	mov	r0, r5
   10ffa:	47b8      	blx	r7
   10ffc:	3001      	adds	r0, #1
   10ffe:	f43f af52 	beq.w	10ea6 <_printf_float+0xb6>
   11002:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   11006:	429a      	cmp	r2, r3
   11008:	db02      	blt.n	11010 <_printf_float+0x220>
   1100a:	6823      	ldr	r3, [r4, #0]
   1100c:	07d8      	lsls	r0, r3, #31
   1100e:	d50f      	bpl.n	11030 <_printf_float+0x240>
   11010:	4631      	mov	r1, r6
   11012:	4628      	mov	r0, r5
   11014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   11018:	47b8      	blx	r7
   1101a:	3001      	adds	r0, #1
   1101c:	f43f af43 	beq.w	10ea6 <_printf_float+0xb6>
   11020:	f04f 0800 	mov.w	r8, #0
   11024:	f104 091a 	add.w	r9, r4, #26
   11028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1102a:	3b01      	subs	r3, #1
   1102c:	4543      	cmp	r3, r8
   1102e:	dc09      	bgt.n	11044 <_printf_float+0x254>
   11030:	6823      	ldr	r3, [r4, #0]
   11032:	079b      	lsls	r3, r3, #30
   11034:	f100 8101 	bmi.w	1123a <_printf_float+0x44a>
   11038:	68e0      	ldr	r0, [r4, #12]
   1103a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1103c:	4298      	cmp	r0, r3
   1103e:	bfb8      	it	lt
   11040:	4618      	movlt	r0, r3
   11042:	e732      	b.n	10eaa <_printf_float+0xba>
   11044:	2301      	movs	r3, #1
   11046:	464a      	mov	r2, r9
   11048:	4631      	mov	r1, r6
   1104a:	4628      	mov	r0, r5
   1104c:	47b8      	blx	r7
   1104e:	3001      	adds	r0, #1
   11050:	f43f af29 	beq.w	10ea6 <_printf_float+0xb6>
   11054:	f108 0801 	add.w	r8, r8, #1
   11058:	e7e6      	b.n	11028 <_printf_float+0x238>
   1105a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1105c:	2b00      	cmp	r3, #0
   1105e:	dc37      	bgt.n	110d0 <_printf_float+0x2e0>
   11060:	2301      	movs	r3, #1
   11062:	4a1a      	ldr	r2, [pc, #104]	; (110cc <_printf_float+0x2dc>)
   11064:	4631      	mov	r1, r6
   11066:	4628      	mov	r0, r5
   11068:	47b8      	blx	r7
   1106a:	3001      	adds	r0, #1
   1106c:	f43f af1b 	beq.w	10ea6 <_printf_float+0xb6>
   11070:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   11074:	4313      	orrs	r3, r2
   11076:	d102      	bne.n	1107e <_printf_float+0x28e>
   11078:	6823      	ldr	r3, [r4, #0]
   1107a:	07d9      	lsls	r1, r3, #31
   1107c:	d5d8      	bpl.n	11030 <_printf_float+0x240>
   1107e:	4631      	mov	r1, r6
   11080:	4628      	mov	r0, r5
   11082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   11086:	47b8      	blx	r7
   11088:	3001      	adds	r0, #1
   1108a:	f43f af0c 	beq.w	10ea6 <_printf_float+0xb6>
   1108e:	f04f 0900 	mov.w	r9, #0
   11092:	f104 0a1a 	add.w	sl, r4, #26
   11096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11098:	425b      	negs	r3, r3
   1109a:	454b      	cmp	r3, r9
   1109c:	dc01      	bgt.n	110a2 <_printf_float+0x2b2>
   1109e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   110a0:	e794      	b.n	10fcc <_printf_float+0x1dc>
   110a2:	2301      	movs	r3, #1
   110a4:	4652      	mov	r2, sl
   110a6:	4631      	mov	r1, r6
   110a8:	4628      	mov	r0, r5
   110aa:	47b8      	blx	r7
   110ac:	3001      	adds	r0, #1
   110ae:	f43f aefa 	beq.w	10ea6 <_printf_float+0xb6>
   110b2:	f109 0901 	add.w	r9, r9, #1
   110b6:	e7ee      	b.n	11096 <_printf_float+0x2a6>
   110b8:	7fefffff 	.word	0x7fefffff
   110bc:	0006be6a 	.word	0x0006be6a
   110c0:	0006be6e 	.word	0x0006be6e
   110c4:	0006be76 	.word	0x0006be76
   110c8:	0006be72 	.word	0x0006be72
   110cc:	0006be7a 	.word	0x0006be7a
   110d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   110d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   110d4:	429a      	cmp	r2, r3
   110d6:	bfa8      	it	ge
   110d8:	461a      	movge	r2, r3
   110da:	2a00      	cmp	r2, #0
   110dc:	4691      	mov	r9, r2
   110de:	dc37      	bgt.n	11150 <_printf_float+0x360>
   110e0:	f04f 0b00 	mov.w	fp, #0
   110e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   110e8:	f104 021a 	add.w	r2, r4, #26
   110ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   110f0:	ebaa 0309 	sub.w	r3, sl, r9
   110f4:	455b      	cmp	r3, fp
   110f6:	dc33      	bgt.n	11160 <_printf_float+0x370>
   110f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   110fc:	429a      	cmp	r2, r3
   110fe:	db3b      	blt.n	11178 <_printf_float+0x388>
   11100:	6823      	ldr	r3, [r4, #0]
   11102:	07da      	lsls	r2, r3, #31
   11104:	d438      	bmi.n	11178 <_printf_float+0x388>
   11106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11108:	990d      	ldr	r1, [sp, #52]	; 0x34
   1110a:	eba2 030a 	sub.w	r3, r2, sl
   1110e:	eba2 0901 	sub.w	r9, r2, r1
   11112:	4599      	cmp	r9, r3
   11114:	bfa8      	it	ge
   11116:	4699      	movge	r9, r3
   11118:	f1b9 0f00 	cmp.w	r9, #0
   1111c:	dc34      	bgt.n	11188 <_printf_float+0x398>
   1111e:	f04f 0800 	mov.w	r8, #0
   11122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   11126:	f104 0a1a 	add.w	sl, r4, #26
   1112a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   1112e:	1a9b      	subs	r3, r3, r2
   11130:	eba3 0309 	sub.w	r3, r3, r9
   11134:	4543      	cmp	r3, r8
   11136:	f77f af7b 	ble.w	11030 <_printf_float+0x240>
   1113a:	2301      	movs	r3, #1
   1113c:	4652      	mov	r2, sl
   1113e:	4631      	mov	r1, r6
   11140:	4628      	mov	r0, r5
   11142:	47b8      	blx	r7
   11144:	3001      	adds	r0, #1
   11146:	f43f aeae 	beq.w	10ea6 <_printf_float+0xb6>
   1114a:	f108 0801 	add.w	r8, r8, #1
   1114e:	e7ec      	b.n	1112a <_printf_float+0x33a>
   11150:	4613      	mov	r3, r2
   11152:	4631      	mov	r1, r6
   11154:	4642      	mov	r2, r8
   11156:	4628      	mov	r0, r5
   11158:	47b8      	blx	r7
   1115a:	3001      	adds	r0, #1
   1115c:	d1c0      	bne.n	110e0 <_printf_float+0x2f0>
   1115e:	e6a2      	b.n	10ea6 <_printf_float+0xb6>
   11160:	2301      	movs	r3, #1
   11162:	4631      	mov	r1, r6
   11164:	4628      	mov	r0, r5
   11166:	920b      	str	r2, [sp, #44]	; 0x2c
   11168:	47b8      	blx	r7
   1116a:	3001      	adds	r0, #1
   1116c:	f43f ae9b 	beq.w	10ea6 <_printf_float+0xb6>
   11170:	f10b 0b01 	add.w	fp, fp, #1
   11174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11176:	e7b9      	b.n	110ec <_printf_float+0x2fc>
   11178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1117c:	4631      	mov	r1, r6
   1117e:	4628      	mov	r0, r5
   11180:	47b8      	blx	r7
   11182:	3001      	adds	r0, #1
   11184:	d1bf      	bne.n	11106 <_printf_float+0x316>
   11186:	e68e      	b.n	10ea6 <_printf_float+0xb6>
   11188:	464b      	mov	r3, r9
   1118a:	eb08 020a 	add.w	r2, r8, sl
   1118e:	4631      	mov	r1, r6
   11190:	4628      	mov	r0, r5
   11192:	47b8      	blx	r7
   11194:	3001      	adds	r0, #1
   11196:	d1c2      	bne.n	1111e <_printf_float+0x32e>
   11198:	e685      	b.n	10ea6 <_printf_float+0xb6>
   1119a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1119c:	2a01      	cmp	r2, #1
   1119e:	dc01      	bgt.n	111a4 <_printf_float+0x3b4>
   111a0:	07db      	lsls	r3, r3, #31
   111a2:	d537      	bpl.n	11214 <_printf_float+0x424>
   111a4:	2301      	movs	r3, #1
   111a6:	4642      	mov	r2, r8
   111a8:	4631      	mov	r1, r6
   111aa:	4628      	mov	r0, r5
   111ac:	47b8      	blx	r7
   111ae:	3001      	adds	r0, #1
   111b0:	f43f ae79 	beq.w	10ea6 <_printf_float+0xb6>
   111b4:	4631      	mov	r1, r6
   111b6:	4628      	mov	r0, r5
   111b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   111bc:	47b8      	blx	r7
   111be:	3001      	adds	r0, #1
   111c0:	f43f ae71 	beq.w	10ea6 <_printf_float+0xb6>
   111c4:	2200      	movs	r2, #0
   111c6:	2300      	movs	r3, #0
   111c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   111cc:	f7ef fbe8 	bl	9a0 <__aeabi_dcmpeq>
   111d0:	b9d8      	cbnz	r0, 1120a <_printf_float+0x41a>
   111d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   111d4:	f108 0201 	add.w	r2, r8, #1
   111d8:	3b01      	subs	r3, #1
   111da:	4631      	mov	r1, r6
   111dc:	4628      	mov	r0, r5
   111de:	47b8      	blx	r7
   111e0:	3001      	adds	r0, #1
   111e2:	d10e      	bne.n	11202 <_printf_float+0x412>
   111e4:	e65f      	b.n	10ea6 <_printf_float+0xb6>
   111e6:	2301      	movs	r3, #1
   111e8:	464a      	mov	r2, r9
   111ea:	4631      	mov	r1, r6
   111ec:	4628      	mov	r0, r5
   111ee:	47b8      	blx	r7
   111f0:	3001      	adds	r0, #1
   111f2:	f43f ae58 	beq.w	10ea6 <_printf_float+0xb6>
   111f6:	f108 0801 	add.w	r8, r8, #1
   111fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   111fc:	3b01      	subs	r3, #1
   111fe:	4543      	cmp	r3, r8
   11200:	dcf1      	bgt.n	111e6 <_printf_float+0x3f6>
   11202:	4653      	mov	r3, sl
   11204:	f104 0250 	add.w	r2, r4, #80	; 0x50
   11208:	e6e1      	b.n	10fce <_printf_float+0x1de>
   1120a:	f04f 0800 	mov.w	r8, #0
   1120e:	f104 091a 	add.w	r9, r4, #26
   11212:	e7f2      	b.n	111fa <_printf_float+0x40a>
   11214:	2301      	movs	r3, #1
   11216:	4642      	mov	r2, r8
   11218:	e7df      	b.n	111da <_printf_float+0x3ea>
   1121a:	2301      	movs	r3, #1
   1121c:	464a      	mov	r2, r9
   1121e:	4631      	mov	r1, r6
   11220:	4628      	mov	r0, r5
   11222:	47b8      	blx	r7
   11224:	3001      	adds	r0, #1
   11226:	f43f ae3e 	beq.w	10ea6 <_printf_float+0xb6>
   1122a:	f108 0801 	add.w	r8, r8, #1
   1122e:	68e3      	ldr	r3, [r4, #12]
   11230:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11232:	1a5b      	subs	r3, r3, r1
   11234:	4543      	cmp	r3, r8
   11236:	dcf0      	bgt.n	1121a <_printf_float+0x42a>
   11238:	e6fe      	b.n	11038 <_printf_float+0x248>
   1123a:	f04f 0800 	mov.w	r8, #0
   1123e:	f104 0919 	add.w	r9, r4, #25
   11242:	e7f4      	b.n	1122e <_printf_float+0x43e>

00011244 <_printf_i>:
   11244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11248:	460c      	mov	r4, r1
   1124a:	4691      	mov	r9, r2
   1124c:	4680      	mov	r8, r0
   1124e:	469a      	mov	sl, r3
   11250:	7e27      	ldrb	r7, [r4, #24]
   11252:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11256:	990c      	ldr	r1, [sp, #48]	; 0x30
   11258:	2f78      	cmp	r7, #120	; 0x78
   1125a:	d807      	bhi.n	1126c <_printf_i+0x28>
   1125c:	2f62      	cmp	r7, #98	; 0x62
   1125e:	d80a      	bhi.n	11276 <_printf_i+0x32>
   11260:	2f00      	cmp	r7, #0
   11262:	f000 80d8 	beq.w	11416 <_printf_i+0x1d2>
   11266:	2f58      	cmp	r7, #88	; 0x58
   11268:	f000 80a3 	beq.w	113b2 <_printf_i+0x16e>
   1126c:	f104 0642 	add.w	r6, r4, #66	; 0x42
   11270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   11274:	e03a      	b.n	112ec <_printf_i+0xa8>
   11276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1127a:	2b15      	cmp	r3, #21
   1127c:	d8f6      	bhi.n	1126c <_printf_i+0x28>
   1127e:	a001      	add	r0, pc, #4	; (adr r0, 11284 <_printf_i+0x40>)
   11280:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   11284:	000112dd 	.word	0x000112dd
   11288:	000112f1 	.word	0x000112f1
   1128c:	0001126d 	.word	0x0001126d
   11290:	0001126d 	.word	0x0001126d
   11294:	0001126d 	.word	0x0001126d
   11298:	0001126d 	.word	0x0001126d
   1129c:	000112f1 	.word	0x000112f1
   112a0:	0001126d 	.word	0x0001126d
   112a4:	0001126d 	.word	0x0001126d
   112a8:	0001126d 	.word	0x0001126d
   112ac:	0001126d 	.word	0x0001126d
   112b0:	000113fd 	.word	0x000113fd
   112b4:	00011321 	.word	0x00011321
   112b8:	000113df 	.word	0x000113df
   112bc:	0001126d 	.word	0x0001126d
   112c0:	0001126d 	.word	0x0001126d
   112c4:	0001141f 	.word	0x0001141f
   112c8:	0001126d 	.word	0x0001126d
   112cc:	00011321 	.word	0x00011321
   112d0:	0001126d 	.word	0x0001126d
   112d4:	0001126d 	.word	0x0001126d
   112d8:	000113e7 	.word	0x000113e7
   112dc:	680b      	ldr	r3, [r1, #0]
   112de:	f104 0642 	add.w	r6, r4, #66	; 0x42
   112e2:	1d1a      	adds	r2, r3, #4
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	600a      	str	r2, [r1, #0]
   112e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   112ec:	2301      	movs	r3, #1
   112ee:	e0a3      	b.n	11438 <_printf_i+0x1f4>
   112f0:	6825      	ldr	r5, [r4, #0]
   112f2:	6808      	ldr	r0, [r1, #0]
   112f4:	062e      	lsls	r6, r5, #24
   112f6:	f100 0304 	add.w	r3, r0, #4
   112fa:	d50a      	bpl.n	11312 <_printf_i+0xce>
   112fc:	6805      	ldr	r5, [r0, #0]
   112fe:	600b      	str	r3, [r1, #0]
   11300:	2d00      	cmp	r5, #0
   11302:	da03      	bge.n	1130c <_printf_i+0xc8>
   11304:	232d      	movs	r3, #45	; 0x2d
   11306:	426d      	negs	r5, r5
   11308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1130c:	485e      	ldr	r0, [pc, #376]	; (11488 <_printf_i+0x244>)
   1130e:	230a      	movs	r3, #10
   11310:	e019      	b.n	11346 <_printf_i+0x102>
   11312:	f015 0f40 	tst.w	r5, #64	; 0x40
   11316:	6805      	ldr	r5, [r0, #0]
   11318:	600b      	str	r3, [r1, #0]
   1131a:	bf18      	it	ne
   1131c:	b22d      	sxthne	r5, r5
   1131e:	e7ef      	b.n	11300 <_printf_i+0xbc>
   11320:	680b      	ldr	r3, [r1, #0]
   11322:	6825      	ldr	r5, [r4, #0]
   11324:	1d18      	adds	r0, r3, #4
   11326:	6008      	str	r0, [r1, #0]
   11328:	0628      	lsls	r0, r5, #24
   1132a:	d501      	bpl.n	11330 <_printf_i+0xec>
   1132c:	681d      	ldr	r5, [r3, #0]
   1132e:	e002      	b.n	11336 <_printf_i+0xf2>
   11330:	0669      	lsls	r1, r5, #25
   11332:	d5fb      	bpl.n	1132c <_printf_i+0xe8>
   11334:	881d      	ldrh	r5, [r3, #0]
   11336:	2f6f      	cmp	r7, #111	; 0x6f
   11338:	4853      	ldr	r0, [pc, #332]	; (11488 <_printf_i+0x244>)
   1133a:	bf0c      	ite	eq
   1133c:	2308      	moveq	r3, #8
   1133e:	230a      	movne	r3, #10
   11340:	2100      	movs	r1, #0
   11342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   11346:	6866      	ldr	r6, [r4, #4]
   11348:	2e00      	cmp	r6, #0
   1134a:	60a6      	str	r6, [r4, #8]
   1134c:	bfa2      	ittt	ge
   1134e:	6821      	ldrge	r1, [r4, #0]
   11350:	f021 0104 	bicge.w	r1, r1, #4
   11354:	6021      	strge	r1, [r4, #0]
   11356:	b90d      	cbnz	r5, 1135c <_printf_i+0x118>
   11358:	2e00      	cmp	r6, #0
   1135a:	d04d      	beq.n	113f8 <_printf_i+0x1b4>
   1135c:	4616      	mov	r6, r2
   1135e:	fbb5 f1f3 	udiv	r1, r5, r3
   11362:	fb03 5711 	mls	r7, r3, r1, r5
   11366:	5dc7      	ldrb	r7, [r0, r7]
   11368:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1136c:	462f      	mov	r7, r5
   1136e:	460d      	mov	r5, r1
   11370:	42bb      	cmp	r3, r7
   11372:	d9f4      	bls.n	1135e <_printf_i+0x11a>
   11374:	2b08      	cmp	r3, #8
   11376:	d10b      	bne.n	11390 <_printf_i+0x14c>
   11378:	6823      	ldr	r3, [r4, #0]
   1137a:	07df      	lsls	r7, r3, #31
   1137c:	d508      	bpl.n	11390 <_printf_i+0x14c>
   1137e:	6923      	ldr	r3, [r4, #16]
   11380:	6861      	ldr	r1, [r4, #4]
   11382:	4299      	cmp	r1, r3
   11384:	bfde      	ittt	le
   11386:	2330      	movle	r3, #48	; 0x30
   11388:	f806 3c01 	strble.w	r3, [r6, #-1]
   1138c:	f106 36ff 	addle.w	r6, r6, #4294967295
   11390:	1b92      	subs	r2, r2, r6
   11392:	6122      	str	r2, [r4, #16]
   11394:	464b      	mov	r3, r9
   11396:	aa03      	add	r2, sp, #12
   11398:	4621      	mov	r1, r4
   1139a:	4640      	mov	r0, r8
   1139c:	f8cd a000 	str.w	sl, [sp]
   113a0:	f004 ffee 	bl	16380 <_printf_common>
   113a4:	3001      	adds	r0, #1
   113a6:	d14c      	bne.n	11442 <_printf_i+0x1fe>
   113a8:	f04f 30ff 	mov.w	r0, #4294967295
   113ac:	b004      	add	sp, #16
   113ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   113b2:	4835      	ldr	r0, [pc, #212]	; (11488 <_printf_i+0x244>)
   113b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   113b8:	6823      	ldr	r3, [r4, #0]
   113ba:	680e      	ldr	r6, [r1, #0]
   113bc:	061f      	lsls	r7, r3, #24
   113be:	f856 5b04 	ldr.w	r5, [r6], #4
   113c2:	600e      	str	r6, [r1, #0]
   113c4:	d514      	bpl.n	113f0 <_printf_i+0x1ac>
   113c6:	07d9      	lsls	r1, r3, #31
   113c8:	bf44      	itt	mi
   113ca:	f043 0320 	orrmi.w	r3, r3, #32
   113ce:	6023      	strmi	r3, [r4, #0]
   113d0:	b91d      	cbnz	r5, 113da <_printf_i+0x196>
   113d2:	6823      	ldr	r3, [r4, #0]
   113d4:	f023 0320 	bic.w	r3, r3, #32
   113d8:	6023      	str	r3, [r4, #0]
   113da:	2310      	movs	r3, #16
   113dc:	e7b0      	b.n	11340 <_printf_i+0xfc>
   113de:	6823      	ldr	r3, [r4, #0]
   113e0:	f043 0320 	orr.w	r3, r3, #32
   113e4:	6023      	str	r3, [r4, #0]
   113e6:	2378      	movs	r3, #120	; 0x78
   113e8:	4828      	ldr	r0, [pc, #160]	; (1148c <_printf_i+0x248>)
   113ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   113ee:	e7e3      	b.n	113b8 <_printf_i+0x174>
   113f0:	065e      	lsls	r6, r3, #25
   113f2:	bf48      	it	mi
   113f4:	b2ad      	uxthmi	r5, r5
   113f6:	e7e6      	b.n	113c6 <_printf_i+0x182>
   113f8:	4616      	mov	r6, r2
   113fa:	e7bb      	b.n	11374 <_printf_i+0x130>
   113fc:	680b      	ldr	r3, [r1, #0]
   113fe:	6826      	ldr	r6, [r4, #0]
   11400:	1d1d      	adds	r5, r3, #4
   11402:	6960      	ldr	r0, [r4, #20]
   11404:	600d      	str	r5, [r1, #0]
   11406:	0635      	lsls	r5, r6, #24
   11408:	681b      	ldr	r3, [r3, #0]
   1140a:	d501      	bpl.n	11410 <_printf_i+0x1cc>
   1140c:	6018      	str	r0, [r3, #0]
   1140e:	e002      	b.n	11416 <_printf_i+0x1d2>
   11410:	0671      	lsls	r1, r6, #25
   11412:	d5fb      	bpl.n	1140c <_printf_i+0x1c8>
   11414:	8018      	strh	r0, [r3, #0]
   11416:	2300      	movs	r3, #0
   11418:	4616      	mov	r6, r2
   1141a:	6123      	str	r3, [r4, #16]
   1141c:	e7ba      	b.n	11394 <_printf_i+0x150>
   1141e:	680b      	ldr	r3, [r1, #0]
   11420:	1d1a      	adds	r2, r3, #4
   11422:	600a      	str	r2, [r1, #0]
   11424:	2100      	movs	r1, #0
   11426:	681e      	ldr	r6, [r3, #0]
   11428:	6862      	ldr	r2, [r4, #4]
   1142a:	4630      	mov	r0, r6
   1142c:	f004 fec0 	bl	161b0 <memchr>
   11430:	b108      	cbz	r0, 11436 <_printf_i+0x1f2>
   11432:	1b80      	subs	r0, r0, r6
   11434:	6060      	str	r0, [r4, #4]
   11436:	6863      	ldr	r3, [r4, #4]
   11438:	6123      	str	r3, [r4, #16]
   1143a:	2300      	movs	r3, #0
   1143c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   11440:	e7a8      	b.n	11394 <_printf_i+0x150>
   11442:	6923      	ldr	r3, [r4, #16]
   11444:	4632      	mov	r2, r6
   11446:	4649      	mov	r1, r9
   11448:	4640      	mov	r0, r8
   1144a:	47d0      	blx	sl
   1144c:	3001      	adds	r0, #1
   1144e:	d0ab      	beq.n	113a8 <_printf_i+0x164>
   11450:	6823      	ldr	r3, [r4, #0]
   11452:	079b      	lsls	r3, r3, #30
   11454:	d413      	bmi.n	1147e <_printf_i+0x23a>
   11456:	68e0      	ldr	r0, [r4, #12]
   11458:	9b03      	ldr	r3, [sp, #12]
   1145a:	4298      	cmp	r0, r3
   1145c:	bfb8      	it	lt
   1145e:	4618      	movlt	r0, r3
   11460:	e7a4      	b.n	113ac <_printf_i+0x168>
   11462:	2301      	movs	r3, #1
   11464:	4632      	mov	r2, r6
   11466:	4649      	mov	r1, r9
   11468:	4640      	mov	r0, r8
   1146a:	47d0      	blx	sl
   1146c:	3001      	adds	r0, #1
   1146e:	d09b      	beq.n	113a8 <_printf_i+0x164>
   11470:	3501      	adds	r5, #1
   11472:	68e3      	ldr	r3, [r4, #12]
   11474:	9903      	ldr	r1, [sp, #12]
   11476:	1a5b      	subs	r3, r3, r1
   11478:	42ab      	cmp	r3, r5
   1147a:	dcf2      	bgt.n	11462 <_printf_i+0x21e>
   1147c:	e7eb      	b.n	11456 <_printf_i+0x212>
   1147e:	2500      	movs	r5, #0
   11480:	f104 0619 	add.w	r6, r4, #25
   11484:	e7f5      	b.n	11472 <_printf_i+0x22e>
   11486:	bf00      	nop
   11488:	0006be7c 	.word	0x0006be7c
   1148c:	0006be8d 	.word	0x0006be8d

00011490 <_sbrk_r>:
   11490:	b538      	push	{r3, r4, r5, lr}
   11492:	2300      	movs	r3, #0
   11494:	4d05      	ldr	r5, [pc, #20]	; (114ac <_sbrk_r+0x1c>)
   11496:	4604      	mov	r4, r0
   11498:	4608      	mov	r0, r1
   1149a:	602b      	str	r3, [r5, #0]
   1149c:	f7f3 fb0e 	bl	4abc <_sbrk>
   114a0:	1c43      	adds	r3, r0, #1
   114a2:	d102      	bne.n	114aa <_sbrk_r+0x1a>
   114a4:	682b      	ldr	r3, [r5, #0]
   114a6:	b103      	cbz	r3, 114aa <_sbrk_r+0x1a>
   114a8:	6023      	str	r3, [r4, #0]
   114aa:	bd38      	pop	{r3, r4, r5, pc}
   114ac:	20020c44 	.word	0x20020c44

000114b0 <raise>:
   114b0:	4b02      	ldr	r3, [pc, #8]	; (114bc <raise+0xc>)
   114b2:	4601      	mov	r1, r0
   114b4:	6818      	ldr	r0, [r3, #0]
   114b6:	f004 bfd3 	b.w	16460 <_raise_r>
   114ba:	bf00      	nop
   114bc:	200000cc 	.word	0x200000cc

000114c0 <_kill_r>:
   114c0:	b538      	push	{r3, r4, r5, lr}
   114c2:	2300      	movs	r3, #0
   114c4:	4d06      	ldr	r5, [pc, #24]	; (114e0 <_kill_r+0x20>)
   114c6:	4604      	mov	r4, r0
   114c8:	4608      	mov	r0, r1
   114ca:	4611      	mov	r1, r2
   114cc:	602b      	str	r3, [r5, #0]
   114ce:	f001 fa0d 	bl	128ec <_kill>
   114d2:	1c43      	adds	r3, r0, #1
   114d4:	d102      	bne.n	114dc <_kill_r+0x1c>
   114d6:	682b      	ldr	r3, [r5, #0]
   114d8:	b103      	cbz	r3, 114dc <_kill_r+0x1c>
   114da:	6023      	str	r3, [r4, #0]
   114dc:	bd38      	pop	{r3, r4, r5, pc}
   114de:	bf00      	nop
   114e0:	20020c44 	.word	0x20020c44

000114e4 <strtok>:
   114e4:	4b13      	ldr	r3, [pc, #76]	; (11534 <strtok+0x50>)
   114e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114ea:	681f      	ldr	r7, [r3, #0]
   114ec:	4605      	mov	r5, r0
   114ee:	460e      	mov	r6, r1
   114f0:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   114f2:	b9b4      	cbnz	r4, 11522 <strtok+0x3e>
   114f4:	2050      	movs	r0, #80	; 0x50
   114f6:	f7ff fa93 	bl	10a20 <malloc>
   114fa:	65b8      	str	r0, [r7, #88]	; 0x58
   114fc:	6184      	str	r4, [r0, #24]
   114fe:	7704      	strb	r4, [r0, #28]
   11500:	6244      	str	r4, [r0, #36]	; 0x24
   11502:	e9c0 4400 	strd	r4, r4, [r0]
   11506:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1150a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   1150e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   11512:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   11516:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   1151a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   1151e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   11522:	6dba      	ldr	r2, [r7, #88]	; 0x58
   11524:	4631      	mov	r1, r6
   11526:	4628      	mov	r0, r5
   11528:	2301      	movs	r3, #1
   1152a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1152e:	f004 bff3 	b.w	16518 <__strtok_r>
   11532:	bf00      	nop
   11534:	200000cc 	.word	0x200000cc

00011538 <_strtol_l.isra.0>:
   11538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1153c:	468c      	mov	ip, r1
   1153e:	4686      	mov	lr, r0
   11540:	4e38      	ldr	r6, [pc, #224]	; (11624 <_strtol_l.isra.0+0xec>)
   11542:	4660      	mov	r0, ip
   11544:	f81c 4b01 	ldrb.w	r4, [ip], #1
   11548:	5da5      	ldrb	r5, [r4, r6]
   1154a:	f015 0508 	ands.w	r5, r5, #8
   1154e:	d1f8      	bne.n	11542 <_strtol_l.isra.0+0xa>
   11550:	2c2d      	cmp	r4, #45	; 0x2d
   11552:	d133      	bne.n	115bc <_strtol_l.isra.0+0x84>
   11554:	f89c 4000 	ldrb.w	r4, [ip]
   11558:	f04f 0801 	mov.w	r8, #1
   1155c:	f100 0c02 	add.w	ip, r0, #2
   11560:	2b00      	cmp	r3, #0
   11562:	d05b      	beq.n	1161c <_strtol_l.isra.0+0xe4>
   11564:	2b10      	cmp	r3, #16
   11566:	d10c      	bne.n	11582 <_strtol_l.isra.0+0x4a>
   11568:	2c30      	cmp	r4, #48	; 0x30
   1156a:	d10a      	bne.n	11582 <_strtol_l.isra.0+0x4a>
   1156c:	f89c 0000 	ldrb.w	r0, [ip]
   11570:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   11574:	2858      	cmp	r0, #88	; 0x58
   11576:	d14c      	bne.n	11612 <_strtol_l.isra.0+0xda>
   11578:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1157c:	2310      	movs	r3, #16
   1157e:	f10c 0c02 	add.w	ip, ip, #2
   11582:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   11586:	2600      	movs	r6, #0
   11588:	3f01      	subs	r7, #1
   1158a:	4630      	mov	r0, r6
   1158c:	fbb7 f9f3 	udiv	r9, r7, r3
   11590:	fb03 7a19 	mls	sl, r3, r9, r7
   11594:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   11598:	2d09      	cmp	r5, #9
   1159a:	d817      	bhi.n	115cc <_strtol_l.isra.0+0x94>
   1159c:	462c      	mov	r4, r5
   1159e:	42a3      	cmp	r3, r4
   115a0:	dd23      	ble.n	115ea <_strtol_l.isra.0+0xb2>
   115a2:	1c75      	adds	r5, r6, #1
   115a4:	d007      	beq.n	115b6 <_strtol_l.isra.0+0x7e>
   115a6:	4581      	cmp	r9, r0
   115a8:	d31c      	bcc.n	115e4 <_strtol_l.isra.0+0xac>
   115aa:	d101      	bne.n	115b0 <_strtol_l.isra.0+0x78>
   115ac:	45a2      	cmp	sl, r4
   115ae:	db19      	blt.n	115e4 <_strtol_l.isra.0+0xac>
   115b0:	fb00 4003 	mla	r0, r0, r3, r4
   115b4:	2601      	movs	r6, #1
   115b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   115ba:	e7eb      	b.n	11594 <_strtol_l.isra.0+0x5c>
   115bc:	2c2b      	cmp	r4, #43	; 0x2b
   115be:	46a8      	mov	r8, r5
   115c0:	bf04      	itt	eq
   115c2:	f89c 4000 	ldrbeq.w	r4, [ip]
   115c6:	f100 0c02 	addeq.w	ip, r0, #2
   115ca:	e7c9      	b.n	11560 <_strtol_l.isra.0+0x28>
   115cc:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   115d0:	2d19      	cmp	r5, #25
   115d2:	d801      	bhi.n	115d8 <_strtol_l.isra.0+0xa0>
   115d4:	3c37      	subs	r4, #55	; 0x37
   115d6:	e7e2      	b.n	1159e <_strtol_l.isra.0+0x66>
   115d8:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   115dc:	2d19      	cmp	r5, #25
   115de:	d804      	bhi.n	115ea <_strtol_l.isra.0+0xb2>
   115e0:	3c57      	subs	r4, #87	; 0x57
   115e2:	e7dc      	b.n	1159e <_strtol_l.isra.0+0x66>
   115e4:	f04f 36ff 	mov.w	r6, #4294967295
   115e8:	e7e5      	b.n	115b6 <_strtol_l.isra.0+0x7e>
   115ea:	1c73      	adds	r3, r6, #1
   115ec:	d106      	bne.n	115fc <_strtol_l.isra.0+0xc4>
   115ee:	2322      	movs	r3, #34	; 0x22
   115f0:	4638      	mov	r0, r7
   115f2:	f8ce 3000 	str.w	r3, [lr]
   115f6:	b942      	cbnz	r2, 1160a <_strtol_l.isra.0+0xd2>
   115f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   115fc:	f1b8 0f00 	cmp.w	r8, #0
   11600:	d000      	beq.n	11604 <_strtol_l.isra.0+0xcc>
   11602:	4240      	negs	r0, r0
   11604:	2a00      	cmp	r2, #0
   11606:	d0f7      	beq.n	115f8 <_strtol_l.isra.0+0xc0>
   11608:	b10e      	cbz	r6, 1160e <_strtol_l.isra.0+0xd6>
   1160a:	f10c 31ff 	add.w	r1, ip, #4294967295
   1160e:	6011      	str	r1, [r2, #0]
   11610:	e7f2      	b.n	115f8 <_strtol_l.isra.0+0xc0>
   11612:	2430      	movs	r4, #48	; 0x30
   11614:	2b00      	cmp	r3, #0
   11616:	d1b4      	bne.n	11582 <_strtol_l.isra.0+0x4a>
   11618:	2308      	movs	r3, #8
   1161a:	e7b2      	b.n	11582 <_strtol_l.isra.0+0x4a>
   1161c:	2c30      	cmp	r4, #48	; 0x30
   1161e:	d0a5      	beq.n	1156c <_strtol_l.isra.0+0x34>
   11620:	230a      	movs	r3, #10
   11622:	e7ae      	b.n	11582 <_strtol_l.isra.0+0x4a>
   11624:	0006bd59 	.word	0x0006bd59

00011628 <strtol>:
   11628:	4613      	mov	r3, r2
   1162a:	460a      	mov	r2, r1
   1162c:	4601      	mov	r1, r0
   1162e:	4802      	ldr	r0, [pc, #8]	; (11638 <strtol+0x10>)
   11630:	6800      	ldr	r0, [r0, #0]
   11632:	f7ff bf81 	b.w	11538 <_strtol_l.isra.0>
   11636:	bf00      	nop
   11638:	200000cc 	.word	0x200000cc

0001163c <viprintf>:
   1163c:	4b09      	ldr	r3, [pc, #36]	; (11664 <viprintf+0x28>)
   1163e:	b570      	push	{r4, r5, r6, lr}
   11640:	681c      	ldr	r4, [r3, #0]
   11642:	4605      	mov	r5, r0
   11644:	460e      	mov	r6, r1
   11646:	b124      	cbz	r4, 11652 <viprintf+0x16>
   11648:	69a3      	ldr	r3, [r4, #24]
   1164a:	b913      	cbnz	r3, 11652 <viprintf+0x16>
   1164c:	4620      	mov	r0, r4
   1164e:	f000 f9cd 	bl	119ec <__sinit>
   11652:	4633      	mov	r3, r6
   11654:	462a      	mov	r2, r5
   11656:	68a1      	ldr	r1, [r4, #8]
   11658:	4620      	mov	r0, r4
   1165a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1165e:	f7ff ba97 	b.w	10b90 <_vfiprintf_r>
   11662:	bf00      	nop
   11664:	200000cc 	.word	0x200000cc

00011668 <__swbuf_r>:
   11668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1166a:	460e      	mov	r6, r1
   1166c:	4614      	mov	r4, r2
   1166e:	4605      	mov	r5, r0
   11670:	b118      	cbz	r0, 1167a <__swbuf_r+0x12>
   11672:	6983      	ldr	r3, [r0, #24]
   11674:	b90b      	cbnz	r3, 1167a <__swbuf_r+0x12>
   11676:	f000 f9b9 	bl	119ec <__sinit>
   1167a:	4b21      	ldr	r3, [pc, #132]	; (11700 <__swbuf_r+0x98>)
   1167c:	429c      	cmp	r4, r3
   1167e:	d12b      	bne.n	116d8 <__swbuf_r+0x70>
   11680:	686c      	ldr	r4, [r5, #4]
   11682:	69a3      	ldr	r3, [r4, #24]
   11684:	60a3      	str	r3, [r4, #8]
   11686:	89a3      	ldrh	r3, [r4, #12]
   11688:	071a      	lsls	r2, r3, #28
   1168a:	d52f      	bpl.n	116ec <__swbuf_r+0x84>
   1168c:	6923      	ldr	r3, [r4, #16]
   1168e:	b36b      	cbz	r3, 116ec <__swbuf_r+0x84>
   11690:	6923      	ldr	r3, [r4, #16]
   11692:	b2f6      	uxtb	r6, r6
   11694:	6820      	ldr	r0, [r4, #0]
   11696:	4637      	mov	r7, r6
   11698:	1ac0      	subs	r0, r0, r3
   1169a:	6963      	ldr	r3, [r4, #20]
   1169c:	4283      	cmp	r3, r0
   1169e:	dc04      	bgt.n	116aa <__swbuf_r+0x42>
   116a0:	4621      	mov	r1, r4
   116a2:	4628      	mov	r0, r5
   116a4:	f000 f924 	bl	118f0 <_fflush_r>
   116a8:	bb30      	cbnz	r0, 116f8 <__swbuf_r+0x90>
   116aa:	68a3      	ldr	r3, [r4, #8]
   116ac:	3001      	adds	r0, #1
   116ae:	3b01      	subs	r3, #1
   116b0:	60a3      	str	r3, [r4, #8]
   116b2:	6823      	ldr	r3, [r4, #0]
   116b4:	1c5a      	adds	r2, r3, #1
   116b6:	6022      	str	r2, [r4, #0]
   116b8:	701e      	strb	r6, [r3, #0]
   116ba:	6963      	ldr	r3, [r4, #20]
   116bc:	4283      	cmp	r3, r0
   116be:	d004      	beq.n	116ca <__swbuf_r+0x62>
   116c0:	89a3      	ldrh	r3, [r4, #12]
   116c2:	07db      	lsls	r3, r3, #31
   116c4:	d506      	bpl.n	116d4 <__swbuf_r+0x6c>
   116c6:	2e0a      	cmp	r6, #10
   116c8:	d104      	bne.n	116d4 <__swbuf_r+0x6c>
   116ca:	4621      	mov	r1, r4
   116cc:	4628      	mov	r0, r5
   116ce:	f000 f90f 	bl	118f0 <_fflush_r>
   116d2:	b988      	cbnz	r0, 116f8 <__swbuf_r+0x90>
   116d4:	4638      	mov	r0, r7
   116d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116d8:	4b0a      	ldr	r3, [pc, #40]	; (11704 <__swbuf_r+0x9c>)
   116da:	429c      	cmp	r4, r3
   116dc:	d101      	bne.n	116e2 <__swbuf_r+0x7a>
   116de:	68ac      	ldr	r4, [r5, #8]
   116e0:	e7cf      	b.n	11682 <__swbuf_r+0x1a>
   116e2:	4b09      	ldr	r3, [pc, #36]	; (11708 <__swbuf_r+0xa0>)
   116e4:	429c      	cmp	r4, r3
   116e6:	bf08      	it	eq
   116e8:	68ec      	ldreq	r4, [r5, #12]
   116ea:	e7ca      	b.n	11682 <__swbuf_r+0x1a>
   116ec:	4621      	mov	r1, r4
   116ee:	4628      	mov	r0, r5
   116f0:	f000 f80c 	bl	1170c <__swsetup_r>
   116f4:	2800      	cmp	r0, #0
   116f6:	d0cb      	beq.n	11690 <__swbuf_r+0x28>
   116f8:	f04f 37ff 	mov.w	r7, #4294967295
   116fc:	e7ea      	b.n	116d4 <__swbuf_r+0x6c>
   116fe:	bf00      	nop
   11700:	0006bcd0 	.word	0x0006bcd0
   11704:	0006bcf0 	.word	0x0006bcf0
   11708:	0006bcb0 	.word	0x0006bcb0

0001170c <__swsetup_r>:
   1170c:	4b32      	ldr	r3, [pc, #200]	; (117d8 <__swsetup_r+0xcc>)
   1170e:	b570      	push	{r4, r5, r6, lr}
   11710:	681d      	ldr	r5, [r3, #0]
   11712:	4606      	mov	r6, r0
   11714:	460c      	mov	r4, r1
   11716:	b125      	cbz	r5, 11722 <__swsetup_r+0x16>
   11718:	69ab      	ldr	r3, [r5, #24]
   1171a:	b913      	cbnz	r3, 11722 <__swsetup_r+0x16>
   1171c:	4628      	mov	r0, r5
   1171e:	f000 f965 	bl	119ec <__sinit>
   11722:	4b2e      	ldr	r3, [pc, #184]	; (117dc <__swsetup_r+0xd0>)
   11724:	429c      	cmp	r4, r3
   11726:	d10f      	bne.n	11748 <__swsetup_r+0x3c>
   11728:	686c      	ldr	r4, [r5, #4]
   1172a:	89a3      	ldrh	r3, [r4, #12]
   1172c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11730:	0719      	lsls	r1, r3, #28
   11732:	d42c      	bmi.n	1178e <__swsetup_r+0x82>
   11734:	06dd      	lsls	r5, r3, #27
   11736:	d411      	bmi.n	1175c <__swsetup_r+0x50>
   11738:	2309      	movs	r3, #9
   1173a:	6033      	str	r3, [r6, #0]
   1173c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   11740:	f04f 30ff 	mov.w	r0, #4294967295
   11744:	81a3      	strh	r3, [r4, #12]
   11746:	e03e      	b.n	117c6 <__swsetup_r+0xba>
   11748:	4b25      	ldr	r3, [pc, #148]	; (117e0 <__swsetup_r+0xd4>)
   1174a:	429c      	cmp	r4, r3
   1174c:	d101      	bne.n	11752 <__swsetup_r+0x46>
   1174e:	68ac      	ldr	r4, [r5, #8]
   11750:	e7eb      	b.n	1172a <__swsetup_r+0x1e>
   11752:	4b24      	ldr	r3, [pc, #144]	; (117e4 <__swsetup_r+0xd8>)
   11754:	429c      	cmp	r4, r3
   11756:	bf08      	it	eq
   11758:	68ec      	ldreq	r4, [r5, #12]
   1175a:	e7e6      	b.n	1172a <__swsetup_r+0x1e>
   1175c:	0758      	lsls	r0, r3, #29
   1175e:	d512      	bpl.n	11786 <__swsetup_r+0x7a>
   11760:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11762:	b141      	cbz	r1, 11776 <__swsetup_r+0x6a>
   11764:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11768:	4299      	cmp	r1, r3
   1176a:	d002      	beq.n	11772 <__swsetup_r+0x66>
   1176c:	4630      	mov	r0, r6
   1176e:	f7ff f967 	bl	10a40 <_free_r>
   11772:	2300      	movs	r3, #0
   11774:	6363      	str	r3, [r4, #52]	; 0x34
   11776:	89a3      	ldrh	r3, [r4, #12]
   11778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1177c:	81a3      	strh	r3, [r4, #12]
   1177e:	2300      	movs	r3, #0
   11780:	6063      	str	r3, [r4, #4]
   11782:	6923      	ldr	r3, [r4, #16]
   11784:	6023      	str	r3, [r4, #0]
   11786:	89a3      	ldrh	r3, [r4, #12]
   11788:	f043 0308 	orr.w	r3, r3, #8
   1178c:	81a3      	strh	r3, [r4, #12]
   1178e:	6923      	ldr	r3, [r4, #16]
   11790:	b94b      	cbnz	r3, 117a6 <__swsetup_r+0x9a>
   11792:	89a3      	ldrh	r3, [r4, #12]
   11794:	f403 7320 	and.w	r3, r3, #640	; 0x280
   11798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1179c:	d003      	beq.n	117a6 <__swsetup_r+0x9a>
   1179e:	4621      	mov	r1, r4
   117a0:	4630      	mov	r0, r6
   117a2:	f000 f9a5 	bl	11af0 <__smakebuf_r>
   117a6:	89a0      	ldrh	r0, [r4, #12]
   117a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   117ac:	f010 0301 	ands.w	r3, r0, #1
   117b0:	d00a      	beq.n	117c8 <__swsetup_r+0xbc>
   117b2:	2300      	movs	r3, #0
   117b4:	60a3      	str	r3, [r4, #8]
   117b6:	6963      	ldr	r3, [r4, #20]
   117b8:	425b      	negs	r3, r3
   117ba:	61a3      	str	r3, [r4, #24]
   117bc:	6923      	ldr	r3, [r4, #16]
   117be:	b943      	cbnz	r3, 117d2 <__swsetup_r+0xc6>
   117c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   117c4:	d1ba      	bne.n	1173c <__swsetup_r+0x30>
   117c6:	bd70      	pop	{r4, r5, r6, pc}
   117c8:	0781      	lsls	r1, r0, #30
   117ca:	bf58      	it	pl
   117cc:	6963      	ldrpl	r3, [r4, #20]
   117ce:	60a3      	str	r3, [r4, #8]
   117d0:	e7f4      	b.n	117bc <__swsetup_r+0xb0>
   117d2:	2000      	movs	r0, #0
   117d4:	e7f7      	b.n	117c6 <__swsetup_r+0xba>
   117d6:	bf00      	nop
   117d8:	200000cc 	.word	0x200000cc
   117dc:	0006bcd0 	.word	0x0006bcd0
   117e0:	0006bcf0 	.word	0x0006bcf0
   117e4:	0006bcb0 	.word	0x0006bcb0

000117e8 <__sflush_r>:
   117e8:	898a      	ldrh	r2, [r1, #12]
   117ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117ee:	4605      	mov	r5, r0
   117f0:	0710      	lsls	r0, r2, #28
   117f2:	460c      	mov	r4, r1
   117f4:	d458      	bmi.n	118a8 <__sflush_r+0xc0>
   117f6:	684b      	ldr	r3, [r1, #4]
   117f8:	2b00      	cmp	r3, #0
   117fa:	dc05      	bgt.n	11808 <__sflush_r+0x20>
   117fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   117fe:	2b00      	cmp	r3, #0
   11800:	dc02      	bgt.n	11808 <__sflush_r+0x20>
   11802:	2000      	movs	r0, #0
   11804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1180a:	2e00      	cmp	r6, #0
   1180c:	d0f9      	beq.n	11802 <__sflush_r+0x1a>
   1180e:	2300      	movs	r3, #0
   11810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   11814:	682f      	ldr	r7, [r5, #0]
   11816:	602b      	str	r3, [r5, #0]
   11818:	d032      	beq.n	11880 <__sflush_r+0x98>
   1181a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1181c:	89a3      	ldrh	r3, [r4, #12]
   1181e:	075a      	lsls	r2, r3, #29
   11820:	d505      	bpl.n	1182e <__sflush_r+0x46>
   11822:	6863      	ldr	r3, [r4, #4]
   11824:	1ac0      	subs	r0, r0, r3
   11826:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11828:	b10b      	cbz	r3, 1182e <__sflush_r+0x46>
   1182a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1182c:	1ac0      	subs	r0, r0, r3
   1182e:	2300      	movs	r3, #0
   11830:	4602      	mov	r2, r0
   11832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   11834:	4628      	mov	r0, r5
   11836:	6a21      	ldr	r1, [r4, #32]
   11838:	47b0      	blx	r6
   1183a:	1c43      	adds	r3, r0, #1
   1183c:	89a3      	ldrh	r3, [r4, #12]
   1183e:	d106      	bne.n	1184e <__sflush_r+0x66>
   11840:	6829      	ldr	r1, [r5, #0]
   11842:	291d      	cmp	r1, #29
   11844:	d82c      	bhi.n	118a0 <__sflush_r+0xb8>
   11846:	4a29      	ldr	r2, [pc, #164]	; (118ec <__sflush_r+0x104>)
   11848:	40ca      	lsrs	r2, r1
   1184a:	07d6      	lsls	r6, r2, #31
   1184c:	d528      	bpl.n	118a0 <__sflush_r+0xb8>
   1184e:	2200      	movs	r2, #0
   11850:	04d9      	lsls	r1, r3, #19
   11852:	6062      	str	r2, [r4, #4]
   11854:	6922      	ldr	r2, [r4, #16]
   11856:	6022      	str	r2, [r4, #0]
   11858:	d504      	bpl.n	11864 <__sflush_r+0x7c>
   1185a:	1c42      	adds	r2, r0, #1
   1185c:	d101      	bne.n	11862 <__sflush_r+0x7a>
   1185e:	682b      	ldr	r3, [r5, #0]
   11860:	b903      	cbnz	r3, 11864 <__sflush_r+0x7c>
   11862:	6560      	str	r0, [r4, #84]	; 0x54
   11864:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11866:	602f      	str	r7, [r5, #0]
   11868:	2900      	cmp	r1, #0
   1186a:	d0ca      	beq.n	11802 <__sflush_r+0x1a>
   1186c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   11870:	4299      	cmp	r1, r3
   11872:	d002      	beq.n	1187a <__sflush_r+0x92>
   11874:	4628      	mov	r0, r5
   11876:	f7ff f8e3 	bl	10a40 <_free_r>
   1187a:	2000      	movs	r0, #0
   1187c:	6360      	str	r0, [r4, #52]	; 0x34
   1187e:	e7c1      	b.n	11804 <__sflush_r+0x1c>
   11880:	6a21      	ldr	r1, [r4, #32]
   11882:	2301      	movs	r3, #1
   11884:	4628      	mov	r0, r5
   11886:	47b0      	blx	r6
   11888:	1c41      	adds	r1, r0, #1
   1188a:	d1c7      	bne.n	1181c <__sflush_r+0x34>
   1188c:	682b      	ldr	r3, [r5, #0]
   1188e:	2b00      	cmp	r3, #0
   11890:	d0c4      	beq.n	1181c <__sflush_r+0x34>
   11892:	2b1d      	cmp	r3, #29
   11894:	d001      	beq.n	1189a <__sflush_r+0xb2>
   11896:	2b16      	cmp	r3, #22
   11898:	d101      	bne.n	1189e <__sflush_r+0xb6>
   1189a:	602f      	str	r7, [r5, #0]
   1189c:	e7b1      	b.n	11802 <__sflush_r+0x1a>
   1189e:	89a3      	ldrh	r3, [r4, #12]
   118a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   118a4:	81a3      	strh	r3, [r4, #12]
   118a6:	e7ad      	b.n	11804 <__sflush_r+0x1c>
   118a8:	690f      	ldr	r7, [r1, #16]
   118aa:	2f00      	cmp	r7, #0
   118ac:	d0a9      	beq.n	11802 <__sflush_r+0x1a>
   118ae:	0793      	lsls	r3, r2, #30
   118b0:	680e      	ldr	r6, [r1, #0]
   118b2:	600f      	str	r7, [r1, #0]
   118b4:	bf0c      	ite	eq
   118b6:	694b      	ldreq	r3, [r1, #20]
   118b8:	2300      	movne	r3, #0
   118ba:	eba6 0807 	sub.w	r8, r6, r7
   118be:	608b      	str	r3, [r1, #8]
   118c0:	f1b8 0f00 	cmp.w	r8, #0
   118c4:	dd9d      	ble.n	11802 <__sflush_r+0x1a>
   118c6:	4643      	mov	r3, r8
   118c8:	463a      	mov	r2, r7
   118ca:	6a21      	ldr	r1, [r4, #32]
   118cc:	4628      	mov	r0, r5
   118ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   118d0:	47b0      	blx	r6
   118d2:	2800      	cmp	r0, #0
   118d4:	dc06      	bgt.n	118e4 <__sflush_r+0xfc>
   118d6:	89a3      	ldrh	r3, [r4, #12]
   118d8:	f04f 30ff 	mov.w	r0, #4294967295
   118dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   118e0:	81a3      	strh	r3, [r4, #12]
   118e2:	e78f      	b.n	11804 <__sflush_r+0x1c>
   118e4:	4407      	add	r7, r0
   118e6:	eba8 0800 	sub.w	r8, r8, r0
   118ea:	e7e9      	b.n	118c0 <__sflush_r+0xd8>
   118ec:	20400001 	.word	0x20400001

000118f0 <_fflush_r>:
   118f0:	b538      	push	{r3, r4, r5, lr}
   118f2:	690b      	ldr	r3, [r1, #16]
   118f4:	4605      	mov	r5, r0
   118f6:	460c      	mov	r4, r1
   118f8:	b913      	cbnz	r3, 11900 <_fflush_r+0x10>
   118fa:	2500      	movs	r5, #0
   118fc:	4628      	mov	r0, r5
   118fe:	bd38      	pop	{r3, r4, r5, pc}
   11900:	b118      	cbz	r0, 1190a <_fflush_r+0x1a>
   11902:	6983      	ldr	r3, [r0, #24]
   11904:	b90b      	cbnz	r3, 1190a <_fflush_r+0x1a>
   11906:	f000 f871 	bl	119ec <__sinit>
   1190a:	4b14      	ldr	r3, [pc, #80]	; (1195c <_fflush_r+0x6c>)
   1190c:	429c      	cmp	r4, r3
   1190e:	d11b      	bne.n	11948 <_fflush_r+0x58>
   11910:	686c      	ldr	r4, [r5, #4]
   11912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11916:	2b00      	cmp	r3, #0
   11918:	d0ef      	beq.n	118fa <_fflush_r+0xa>
   1191a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1191c:	07d0      	lsls	r0, r2, #31
   1191e:	d404      	bmi.n	1192a <_fflush_r+0x3a>
   11920:	0599      	lsls	r1, r3, #22
   11922:	d402      	bmi.n	1192a <_fflush_r+0x3a>
   11924:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11926:	f000 fff3 	bl	12910 <__retarget_lock_acquire_recursive>
   1192a:	4628      	mov	r0, r5
   1192c:	4621      	mov	r1, r4
   1192e:	f7ff ff5b 	bl	117e8 <__sflush_r>
   11932:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11934:	4605      	mov	r5, r0
   11936:	07da      	lsls	r2, r3, #31
   11938:	d4e0      	bmi.n	118fc <_fflush_r+0xc>
   1193a:	89a3      	ldrh	r3, [r4, #12]
   1193c:	059b      	lsls	r3, r3, #22
   1193e:	d4dd      	bmi.n	118fc <_fflush_r+0xc>
   11940:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11942:	f000 ffed 	bl	12920 <__retarget_lock_release_recursive>
   11946:	e7d9      	b.n	118fc <_fflush_r+0xc>
   11948:	4b05      	ldr	r3, [pc, #20]	; (11960 <_fflush_r+0x70>)
   1194a:	429c      	cmp	r4, r3
   1194c:	d101      	bne.n	11952 <_fflush_r+0x62>
   1194e:	68ac      	ldr	r4, [r5, #8]
   11950:	e7df      	b.n	11912 <_fflush_r+0x22>
   11952:	4b04      	ldr	r3, [pc, #16]	; (11964 <_fflush_r+0x74>)
   11954:	429c      	cmp	r4, r3
   11956:	bf08      	it	eq
   11958:	68ec      	ldreq	r4, [r5, #12]
   1195a:	e7da      	b.n	11912 <_fflush_r+0x22>
   1195c:	0006bcd0 	.word	0x0006bcd0
   11960:	0006bcf0 	.word	0x0006bcf0
   11964:	0006bcb0 	.word	0x0006bcb0

00011968 <std>:
   11968:	2300      	movs	r3, #0
   1196a:	b510      	push	{r4, lr}
   1196c:	4604      	mov	r4, r0
   1196e:	6083      	str	r3, [r0, #8]
   11970:	8181      	strh	r1, [r0, #12]
   11972:	4619      	mov	r1, r3
   11974:	6643      	str	r3, [r0, #100]	; 0x64
   11976:	81c2      	strh	r2, [r0, #14]
   11978:	2208      	movs	r2, #8
   1197a:	6183      	str	r3, [r0, #24]
   1197c:	e9c0 3300 	strd	r3, r3, [r0]
   11980:	e9c0 3304 	strd	r3, r3, [r0, #16]
   11984:	305c      	adds	r0, #92	; 0x5c
   11986:	f004 fc2e 	bl	161e6 <memset>
   1198a:	4b05      	ldr	r3, [pc, #20]	; (119a0 <std+0x38>)
   1198c:	6224      	str	r4, [r4, #32]
   1198e:	6263      	str	r3, [r4, #36]	; 0x24
   11990:	4b04      	ldr	r3, [pc, #16]	; (119a4 <std+0x3c>)
   11992:	62a3      	str	r3, [r4, #40]	; 0x28
   11994:	4b04      	ldr	r3, [pc, #16]	; (119a8 <std+0x40>)
   11996:	62e3      	str	r3, [r4, #44]	; 0x2c
   11998:	4b04      	ldr	r3, [pc, #16]	; (119ac <std+0x44>)
   1199a:	6323      	str	r3, [r4, #48]	; 0x30
   1199c:	bd10      	pop	{r4, pc}
   1199e:	bf00      	nop
   119a0:	00016cd9 	.word	0x00016cd9
   119a4:	00016cfb 	.word	0x00016cfb
   119a8:	00016d33 	.word	0x00016d33
   119ac:	00016d57 	.word	0x00016d57

000119b0 <_cleanup_r>:
   119b0:	4901      	ldr	r1, [pc, #4]	; (119b8 <_cleanup_r+0x8>)
   119b2:	f004 be7e 	b.w	166b2 <_fwalk_reent>
   119b6:	bf00      	nop
   119b8:	000118f1 	.word	0x000118f1

000119bc <__sfp_lock_acquire>:
   119bc:	4801      	ldr	r0, [pc, #4]	; (119c4 <__sfp_lock_acquire+0x8>)
   119be:	f000 bfa7 	b.w	12910 <__retarget_lock_acquire_recursive>
   119c2:	bf00      	nop
   119c4:	200002c8 	.word	0x200002c8

000119c8 <__sfp_lock_release>:
   119c8:	4801      	ldr	r0, [pc, #4]	; (119d0 <__sfp_lock_release+0x8>)
   119ca:	f000 bfa9 	b.w	12920 <__retarget_lock_release_recursive>
   119ce:	bf00      	nop
   119d0:	200002c8 	.word	0x200002c8

000119d4 <__sinit_lock_acquire>:
   119d4:	4801      	ldr	r0, [pc, #4]	; (119dc <__sinit_lock_acquire+0x8>)
   119d6:	f000 bf9b 	b.w	12910 <__retarget_lock_acquire_recursive>
   119da:	bf00      	nop
   119dc:	200002dc 	.word	0x200002dc

000119e0 <__sinit_lock_release>:
   119e0:	4801      	ldr	r0, [pc, #4]	; (119e8 <__sinit_lock_release+0x8>)
   119e2:	f000 bf9d 	b.w	12920 <__retarget_lock_release_recursive>
   119e6:	bf00      	nop
   119e8:	200002dc 	.word	0x200002dc

000119ec <__sinit>:
   119ec:	b510      	push	{r4, lr}
   119ee:	4604      	mov	r4, r0
   119f0:	f7ff fff0 	bl	119d4 <__sinit_lock_acquire>
   119f4:	69a3      	ldr	r3, [r4, #24]
   119f6:	b11b      	cbz	r3, 11a00 <__sinit+0x14>
   119f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119fc:	f7ff bff0 	b.w	119e0 <__sinit_lock_release>
   11a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   11a04:	6523      	str	r3, [r4, #80]	; 0x50
   11a06:	4620      	mov	r0, r4
   11a08:	4b12      	ldr	r3, [pc, #72]	; (11a54 <__sinit+0x68>)
   11a0a:	4a13      	ldr	r2, [pc, #76]	; (11a58 <__sinit+0x6c>)
   11a0c:	681b      	ldr	r3, [r3, #0]
   11a0e:	62a2      	str	r2, [r4, #40]	; 0x28
   11a10:	42a3      	cmp	r3, r4
   11a12:	bf04      	itt	eq
   11a14:	2301      	moveq	r3, #1
   11a16:	61a3      	streq	r3, [r4, #24]
   11a18:	f000 f820 	bl	11a5c <__sfp>
   11a1c:	6060      	str	r0, [r4, #4]
   11a1e:	4620      	mov	r0, r4
   11a20:	f000 f81c 	bl	11a5c <__sfp>
   11a24:	60a0      	str	r0, [r4, #8]
   11a26:	4620      	mov	r0, r4
   11a28:	f000 f818 	bl	11a5c <__sfp>
   11a2c:	2200      	movs	r2, #0
   11a2e:	2104      	movs	r1, #4
   11a30:	60e0      	str	r0, [r4, #12]
   11a32:	6860      	ldr	r0, [r4, #4]
   11a34:	f7ff ff98 	bl	11968 <std>
   11a38:	2201      	movs	r2, #1
   11a3a:	2109      	movs	r1, #9
   11a3c:	68a0      	ldr	r0, [r4, #8]
   11a3e:	f7ff ff93 	bl	11968 <std>
   11a42:	2202      	movs	r2, #2
   11a44:	2112      	movs	r1, #18
   11a46:	68e0      	ldr	r0, [r4, #12]
   11a48:	f7ff ff8e 	bl	11968 <std>
   11a4c:	2301      	movs	r3, #1
   11a4e:	61a3      	str	r3, [r4, #24]
   11a50:	e7d2      	b.n	119f8 <__sinit+0xc>
   11a52:	bf00      	nop
   11a54:	0006bcac 	.word	0x0006bcac
   11a58:	000119b1 	.word	0x000119b1

00011a5c <__sfp>:
   11a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a5e:	4607      	mov	r7, r0
   11a60:	f7ff ffac 	bl	119bc <__sfp_lock_acquire>
   11a64:	4b1e      	ldr	r3, [pc, #120]	; (11ae0 <__sfp+0x84>)
   11a66:	681e      	ldr	r6, [r3, #0]
   11a68:	69b3      	ldr	r3, [r6, #24]
   11a6a:	b913      	cbnz	r3, 11a72 <__sfp+0x16>
   11a6c:	4630      	mov	r0, r6
   11a6e:	f7ff ffbd 	bl	119ec <__sinit>
   11a72:	3648      	adds	r6, #72	; 0x48
   11a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   11a78:	3b01      	subs	r3, #1
   11a7a:	d503      	bpl.n	11a84 <__sfp+0x28>
   11a7c:	6833      	ldr	r3, [r6, #0]
   11a7e:	b30b      	cbz	r3, 11ac4 <__sfp+0x68>
   11a80:	6836      	ldr	r6, [r6, #0]
   11a82:	e7f7      	b.n	11a74 <__sfp+0x18>
   11a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   11a88:	b9d5      	cbnz	r5, 11ac0 <__sfp+0x64>
   11a8a:	4b16      	ldr	r3, [pc, #88]	; (11ae4 <__sfp+0x88>)
   11a8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11a90:	6665      	str	r5, [r4, #100]	; 0x64
   11a92:	60e3      	str	r3, [r4, #12]
   11a94:	f000 ff33 	bl	128fe <__retarget_lock_init_recursive>
   11a98:	f7ff ff96 	bl	119c8 <__sfp_lock_release>
   11a9c:	2208      	movs	r2, #8
   11a9e:	4629      	mov	r1, r5
   11aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11aa4:	6025      	str	r5, [r4, #0]
   11aa6:	61a5      	str	r5, [r4, #24]
   11aa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   11aac:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11ab0:	f004 fb99 	bl	161e6 <memset>
   11ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   11ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   11abc:	4620      	mov	r0, r4
   11abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ac0:	3468      	adds	r4, #104	; 0x68
   11ac2:	e7d9      	b.n	11a78 <__sfp+0x1c>
   11ac4:	2104      	movs	r1, #4
   11ac6:	4638      	mov	r0, r7
   11ac8:	f004 fddd 	bl	16686 <__sfmoreglue>
   11acc:	4604      	mov	r4, r0
   11ace:	6030      	str	r0, [r6, #0]
   11ad0:	2800      	cmp	r0, #0
   11ad2:	d1d5      	bne.n	11a80 <__sfp+0x24>
   11ad4:	f7ff ff78 	bl	119c8 <__sfp_lock_release>
   11ad8:	230c      	movs	r3, #12
   11ada:	603b      	str	r3, [r7, #0]
   11adc:	e7ee      	b.n	11abc <__sfp+0x60>
   11ade:	bf00      	nop
   11ae0:	0006bcac 	.word	0x0006bcac
   11ae4:	ffff0001 	.word	0xffff0001

00011ae8 <_localeconv_r>:
   11ae8:	4800      	ldr	r0, [pc, #0]	; (11aec <_localeconv_r+0x4>)
   11aea:	4770      	bx	lr
   11aec:	20000220 	.word	0x20000220

00011af0 <__smakebuf_r>:
   11af0:	898b      	ldrh	r3, [r1, #12]
   11af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11af4:	079d      	lsls	r5, r3, #30
   11af6:	4606      	mov	r6, r0
   11af8:	460c      	mov	r4, r1
   11afa:	d507      	bpl.n	11b0c <__smakebuf_r+0x1c>
   11afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   11b00:	6023      	str	r3, [r4, #0]
   11b02:	6123      	str	r3, [r4, #16]
   11b04:	2301      	movs	r3, #1
   11b06:	6163      	str	r3, [r4, #20]
   11b08:	b002      	add	sp, #8
   11b0a:	bd70      	pop	{r4, r5, r6, pc}
   11b0c:	ab01      	add	r3, sp, #4
   11b0e:	466a      	mov	r2, sp
   11b10:	f004 fdee 	bl	166f0 <__swhatbuf_r>
   11b14:	9900      	ldr	r1, [sp, #0]
   11b16:	4605      	mov	r5, r0
   11b18:	4630      	mov	r0, r6
   11b1a:	f7fe ffdf 	bl	10adc <_malloc_r>
   11b1e:	b948      	cbnz	r0, 11b34 <__smakebuf_r+0x44>
   11b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11b24:	059a      	lsls	r2, r3, #22
   11b26:	d4ef      	bmi.n	11b08 <__smakebuf_r+0x18>
   11b28:	f023 0303 	bic.w	r3, r3, #3
   11b2c:	f043 0302 	orr.w	r3, r3, #2
   11b30:	81a3      	strh	r3, [r4, #12]
   11b32:	e7e3      	b.n	11afc <__smakebuf_r+0xc>
   11b34:	4b0d      	ldr	r3, [pc, #52]	; (11b6c <__smakebuf_r+0x7c>)
   11b36:	62b3      	str	r3, [r6, #40]	; 0x28
   11b38:	89a3      	ldrh	r3, [r4, #12]
   11b3a:	6020      	str	r0, [r4, #0]
   11b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11b40:	6120      	str	r0, [r4, #16]
   11b42:	81a3      	strh	r3, [r4, #12]
   11b44:	9b00      	ldr	r3, [sp, #0]
   11b46:	6163      	str	r3, [r4, #20]
   11b48:	9b01      	ldr	r3, [sp, #4]
   11b4a:	b15b      	cbz	r3, 11b64 <__smakebuf_r+0x74>
   11b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11b50:	4630      	mov	r0, r6
   11b52:	f000 f89b 	bl	11c8c <_isatty_r>
   11b56:	b128      	cbz	r0, 11b64 <__smakebuf_r+0x74>
   11b58:	89a3      	ldrh	r3, [r4, #12]
   11b5a:	f023 0303 	bic.w	r3, r3, #3
   11b5e:	f043 0301 	orr.w	r3, r3, #1
   11b62:	81a3      	strh	r3, [r4, #12]
   11b64:	89a0      	ldrh	r0, [r4, #12]
   11b66:	4305      	orrs	r5, r0
   11b68:	81a5      	strh	r5, [r4, #12]
   11b6a:	e7cd      	b.n	11b08 <__smakebuf_r+0x18>
   11b6c:	000119b1 	.word	0x000119b1

00011b70 <__malloc_lock>:
   11b70:	4801      	ldr	r0, [pc, #4]	; (11b78 <__malloc_lock+0x8>)
   11b72:	f000 becd 	b.w	12910 <__retarget_lock_acquire_recursive>
   11b76:	bf00      	nop
   11b78:	200002b4 	.word	0x200002b4

00011b7c <__malloc_unlock>:
   11b7c:	4801      	ldr	r0, [pc, #4]	; (11b84 <__malloc_unlock+0x8>)
   11b7e:	f000 becf 	b.w	12920 <__retarget_lock_release_recursive>
   11b82:	bf00      	nop
   11b84:	200002b4 	.word	0x200002b4

00011b88 <__pow5mult>:
   11b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b8c:	4615      	mov	r5, r2
   11b8e:	f012 0203 	ands.w	r2, r2, #3
   11b92:	4606      	mov	r6, r0
   11b94:	460f      	mov	r7, r1
   11b96:	d007      	beq.n	11ba8 <__pow5mult+0x20>
   11b98:	3a01      	subs	r2, #1
   11b9a:	4c21      	ldr	r4, [pc, #132]	; (11c20 <__pow5mult+0x98>)
   11b9c:	2300      	movs	r3, #0
   11b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   11ba2:	f004 fe14 	bl	167ce <__multadd>
   11ba6:	4607      	mov	r7, r0
   11ba8:	10ad      	asrs	r5, r5, #2
   11baa:	d035      	beq.n	11c18 <__pow5mult+0x90>
   11bac:	6a74      	ldr	r4, [r6, #36]	; 0x24
   11bae:	b93c      	cbnz	r4, 11bc0 <__pow5mult+0x38>
   11bb0:	2010      	movs	r0, #16
   11bb2:	f7fe ff35 	bl	10a20 <malloc>
   11bb6:	6270      	str	r0, [r6, #36]	; 0x24
   11bb8:	6004      	str	r4, [r0, #0]
   11bba:	60c4      	str	r4, [r0, #12]
   11bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   11bc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   11bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   11bc8:	b94c      	cbnz	r4, 11bde <__pow5mult+0x56>
   11bca:	f240 2171 	movw	r1, #625	; 0x271
   11bce:	4630      	mov	r0, r6
   11bd0:	f004 fe8a 	bl	168e8 <__i2b>
   11bd4:	2300      	movs	r3, #0
   11bd6:	4604      	mov	r4, r0
   11bd8:	f8c8 0008 	str.w	r0, [r8, #8]
   11bdc:	6003      	str	r3, [r0, #0]
   11bde:	f04f 0900 	mov.w	r9, #0
   11be2:	07eb      	lsls	r3, r5, #31
   11be4:	d50a      	bpl.n	11bfc <__pow5mult+0x74>
   11be6:	4639      	mov	r1, r7
   11be8:	4622      	mov	r2, r4
   11bea:	4630      	mov	r0, r6
   11bec:	f004 fe85 	bl	168fa <__multiply>
   11bf0:	4680      	mov	r8, r0
   11bf2:	4639      	mov	r1, r7
   11bf4:	4630      	mov	r0, r6
   11bf6:	4647      	mov	r7, r8
   11bf8:	f004 fdd2 	bl	167a0 <_Bfree>
   11bfc:	106d      	asrs	r5, r5, #1
   11bfe:	d00b      	beq.n	11c18 <__pow5mult+0x90>
   11c00:	6820      	ldr	r0, [r4, #0]
   11c02:	b938      	cbnz	r0, 11c14 <__pow5mult+0x8c>
   11c04:	4622      	mov	r2, r4
   11c06:	4621      	mov	r1, r4
   11c08:	4630      	mov	r0, r6
   11c0a:	f004 fe76 	bl	168fa <__multiply>
   11c0e:	6020      	str	r0, [r4, #0]
   11c10:	f8c0 9000 	str.w	r9, [r0]
   11c14:	4604      	mov	r4, r0
   11c16:	e7e4      	b.n	11be2 <__pow5mult+0x5a>
   11c18:	4638      	mov	r0, r7
   11c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c1e:	bf00      	nop
   11c20:	0006bd10 	.word	0x0006bd10

00011c24 <_write_r>:
   11c24:	b538      	push	{r3, r4, r5, lr}
   11c26:	4604      	mov	r4, r0
   11c28:	4d06      	ldr	r5, [pc, #24]	; (11c44 <_write_r+0x20>)
   11c2a:	4608      	mov	r0, r1
   11c2c:	4611      	mov	r1, r2
   11c2e:	2200      	movs	r2, #0
   11c30:	602a      	str	r2, [r5, #0]
   11c32:	461a      	mov	r2, r3
   11c34:	f000 fe4a 	bl	128cc <_write>
   11c38:	1c43      	adds	r3, r0, #1
   11c3a:	d102      	bne.n	11c42 <_write_r+0x1e>
   11c3c:	682b      	ldr	r3, [r5, #0]
   11c3e:	b103      	cbz	r3, 11c42 <_write_r+0x1e>
   11c40:	6023      	str	r3, [r4, #0]
   11c42:	bd38      	pop	{r3, r4, r5, pc}
   11c44:	20020c44 	.word	0x20020c44

00011c48 <_close_r>:
   11c48:	b538      	push	{r3, r4, r5, lr}
   11c4a:	2300      	movs	r3, #0
   11c4c:	4d05      	ldr	r5, [pc, #20]	; (11c64 <_close_r+0x1c>)
   11c4e:	4604      	mov	r4, r0
   11c50:	4608      	mov	r0, r1
   11c52:	602b      	str	r3, [r5, #0]
   11c54:	f000 fe40 	bl	128d8 <_close>
   11c58:	1c43      	adds	r3, r0, #1
   11c5a:	d102      	bne.n	11c62 <_close_r+0x1a>
   11c5c:	682b      	ldr	r3, [r5, #0]
   11c5e:	b103      	cbz	r3, 11c62 <_close_r+0x1a>
   11c60:	6023      	str	r3, [r4, #0]
   11c62:	bd38      	pop	{r3, r4, r5, pc}
   11c64:	20020c44 	.word	0x20020c44

00011c68 <_fstat_r>:
   11c68:	b538      	push	{r3, r4, r5, lr}
   11c6a:	2300      	movs	r3, #0
   11c6c:	4d06      	ldr	r5, [pc, #24]	; (11c88 <_fstat_r+0x20>)
   11c6e:	4604      	mov	r4, r0
   11c70:	4608      	mov	r0, r1
   11c72:	4611      	mov	r1, r2
   11c74:	602b      	str	r3, [r5, #0]
   11c76:	f000 fe3d 	bl	128f4 <_fstat>
   11c7a:	1c43      	adds	r3, r0, #1
   11c7c:	d102      	bne.n	11c84 <_fstat_r+0x1c>
   11c7e:	682b      	ldr	r3, [r5, #0]
   11c80:	b103      	cbz	r3, 11c84 <_fstat_r+0x1c>
   11c82:	6023      	str	r3, [r4, #0]
   11c84:	bd38      	pop	{r3, r4, r5, pc}
   11c86:	bf00      	nop
   11c88:	20020c44 	.word	0x20020c44

00011c8c <_isatty_r>:
   11c8c:	b538      	push	{r3, r4, r5, lr}
   11c8e:	2300      	movs	r3, #0
   11c90:	4d05      	ldr	r5, [pc, #20]	; (11ca8 <_isatty_r+0x1c>)
   11c92:	4604      	mov	r4, r0
   11c94:	4608      	mov	r0, r1
   11c96:	602b      	str	r3, [r5, #0]
   11c98:	f000 fe23 	bl	128e2 <_isatty>
   11c9c:	1c43      	adds	r3, r0, #1
   11c9e:	d102      	bne.n	11ca6 <_isatty_r+0x1a>
   11ca0:	682b      	ldr	r3, [r5, #0]
   11ca2:	b103      	cbz	r3, 11ca6 <_isatty_r+0x1a>
   11ca4:	6023      	str	r3, [r4, #0]
   11ca6:	bd38      	pop	{r3, r4, r5, pc}
   11ca8:	20020c44 	.word	0x20020c44

00011cac <_lseek_r>:
   11cac:	b538      	push	{r3, r4, r5, lr}
   11cae:	4604      	mov	r4, r0
   11cb0:	4d06      	ldr	r5, [pc, #24]	; (11ccc <_lseek_r+0x20>)
   11cb2:	4608      	mov	r0, r1
   11cb4:	4611      	mov	r1, r2
   11cb6:	2200      	movs	r2, #0
   11cb8:	602a      	str	r2, [r5, #0]
   11cba:	461a      	mov	r2, r3
   11cbc:	f000 fe0f 	bl	128de <_lseek>
   11cc0:	1c43      	adds	r3, r0, #1
   11cc2:	d102      	bne.n	11cca <_lseek_r+0x1e>
   11cc4:	682b      	ldr	r3, [r5, #0]
   11cc6:	b103      	cbz	r3, 11cca <_lseek_r+0x1e>
   11cc8:	6023      	str	r3, [r4, #0]
   11cca:	bd38      	pop	{r3, r4, r5, pc}
   11ccc:	20020c44 	.word	0x20020c44

00011cd0 <_read_r>:
   11cd0:	b538      	push	{r3, r4, r5, lr}
   11cd2:	4604      	mov	r4, r0
   11cd4:	4d06      	ldr	r5, [pc, #24]	; (11cf0 <_read_r+0x20>)
   11cd6:	4608      	mov	r0, r1
   11cd8:	4611      	mov	r1, r2
   11cda:	2200      	movs	r2, #0
   11cdc:	602a      	str	r2, [r5, #0]
   11cde:	461a      	mov	r2, r3
   11ce0:	f000 fdee 	bl	128c0 <_read>
   11ce4:	1c43      	adds	r3, r0, #1
   11ce6:	d102      	bne.n	11cee <_read_r+0x1e>
   11ce8:	682b      	ldr	r3, [r5, #0]
   11cea:	b103      	cbz	r3, 11cee <_read_r+0x1e>
   11cec:	6023      	str	r3, [r4, #0]
   11cee:	bd38      	pop	{r3, r4, r5, pc}
   11cf0:	20020c44 	.word	0x20020c44

00011cf4 <_Z9ee_hexdecPc>:
long ee_hexdec(char *hex) {
   11cf4:	4601      	mov	r1, r0
  long ret = 0;
   11cf6:	2000      	movs	r0, #0
   11cf8:	e007      	b.n	11d0a <_Z9ee_hexdecPc+0x16>
    } else if (c >= 'a' && c <= 'f') {
   11cfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   11cfe:	b2d2      	uxtb	r2, r2
   11d00:	2a05      	cmp	r2, #5
   11d02:	d80e      	bhi.n	11d22 <_Z9ee_hexdecPc+0x2e>
      dec = c - 'a' + 10;
   11d04:	3b57      	subs	r3, #87	; 0x57
    ret = (ret << 4) + dec;
   11d06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  while (*hex && ret >= 0) {
   11d0a:	780b      	ldrb	r3, [r1, #0]
   11d0c:	b193      	cbz	r3, 11d34 <_Z9ee_hexdecPc+0x40>
   11d0e:	2800      	cmp	r0, #0
   11d10:	db10      	blt.n	11d34 <_Z9ee_hexdecPc+0x40>
    c = *hex++;
   11d12:	3101      	adds	r1, #1
    if (c >= '0' && c <= '9') {
   11d14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11d18:	b2d2      	uxtb	r2, r2
   11d1a:	2a09      	cmp	r2, #9
   11d1c:	d8ed      	bhi.n	11cfa <_Z9ee_hexdecPc+0x6>
      dec = c - '0';
   11d1e:	3b30      	subs	r3, #48	; 0x30
   11d20:	e7f1      	b.n	11d06 <_Z9ee_hexdecPc+0x12>
    } else if (c >= 'A' && c <= 'F') {
   11d22:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   11d26:	b2d2      	uxtb	r2, r2
   11d28:	2a05      	cmp	r2, #5
   11d2a:	d801      	bhi.n	11d30 <_Z9ee_hexdecPc+0x3c>
      dec = c - 'A' + 10;
   11d2c:	3b37      	subs	r3, #55	; 0x37
   11d2e:	e7ea      	b.n	11d06 <_Z9ee_hexdecPc+0x12>
      return -1;
   11d30:	f04f 30ff 	mov.w	r0, #4294967295
}
   11d34:	4770      	bx	lr

00011d36 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
   11d36:	2200      	movs	r2, #0
   11d38:	6002      	str	r2, [r0, #0]
   11d3a:	6042      	str	r2, [r0, #4]
   11d3c:	6082      	str	r2, [r0, #8]
  }
   11d3e:	4770      	bx	lr

00011d40 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
   11d40:	2001      	movs	r0, #1
   11d42:	4770      	bx	lr

00011d44 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
   11d44:	b508      	push	{r3, lr}
                                   int version) const final {
    return FindOp(op);
   11d46:	6803      	ldr	r3, [r0, #0]
   11d48:	699b      	ldr	r3, [r3, #24]
   11d4a:	4798      	blx	r3
  }
   11d4c:	bd08      	pop	{r3, pc}

00011d4e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
   11d4e:	b508      	push	{r3, lr}
    return FindOp(op);
   11d50:	6803      	ldr	r3, [r0, #0]
   11d52:	69db      	ldr	r3, [r3, #28]
   11d54:	4798      	blx	r3
  }
   11d56:	bd08      	pop	{r3, pc}

00011d58 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11d58:	2920      	cmp	r1, #32
   11d5a:	d00e      	beq.n	11d7a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x22>
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   11d5c:	b410      	push	{r4}
   11d5e:	4604      	mov	r4, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11d60:	2300      	movs	r3, #0
   11d62:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
   11d66:	429a      	cmp	r2, r3
   11d68:	d909      	bls.n	11d7e <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x26>
      const TfLiteRegistration& registration = registrations_[i];
   11d6a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
   11d6e:	1d10      	adds	r0, r2, #4
      if (registration.builtin_code == op) {
   11d70:	6992      	ldr	r2, [r2, #24]
   11d72:	428a      	cmp	r2, r1
   11d74:	d004      	beq.n	11d80 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11d76:	3301      	adds	r3, #1
   11d78:	e7f3      	b.n	11d62 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0xa>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   11d7a:	2000      	movs	r0, #0
  }
   11d7c:	4770      	bx	lr
    return nullptr;
   11d7e:	2000      	movs	r0, #0
  }
   11d80:	bc10      	pop	{r4}
   11d82:	4770      	bx	lr

00011d84 <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   11d84:	4770      	bx	lr

00011d86 <_ZN6tflite16MicroModelRunnerIaaLi6EED1Ev>:
class MicroModelRunner {
   11d86:	b510      	push	{r4, lr}
   11d88:	4604      	mov	r4, r0
   11d8a:	300c      	adds	r0, #12
   11d8c:	f001 fc82 	bl	13694 <_ZN6tflite16MicroInterpreterD1Ev>
   11d90:	4620      	mov	r0, r4
   11d92:	bd10      	pop	{r4, pc}

00011d94 <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
   11d94:	b510      	push	{r4, lr}
   11d96:	4604      	mov	r4, r0
   11d98:	f004 f9e8 	bl	1616c <_ZdlPv>
   11d9c:	4620      	mov	r0, r4
   11d9e:	bd10      	pop	{r4, pc}

00011da0 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   11da0:	b510      	push	{r4, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11da2:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
   11da6:	2c06      	cmp	r4, #6
   11da8:	d801      	bhi.n	11dae <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11daa:	2300      	movs	r3, #0
   11dac:	e002      	b.n	11db4 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   11dae:	f004 f9f4 	bl	1619a <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   11db2:	3301      	adds	r3, #1
   11db4:	429c      	cmp	r4, r3
   11db6:	d908      	bls.n	11dca <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   11db8:	18c2      	adds	r2, r0, r3
   11dba:	f892 20c8 	ldrb.w	r2, [r2, #200]	; 0xc8
   11dbe:	428a      	cmp	r2, r1
   11dc0:	d1f7      	bne.n	11db2 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x12>
   11dc2:	3334      	adds	r3, #52	; 0x34
   11dc4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   11dc8:	e000      	b.n	11dcc <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x2c>
    return nullptr;
   11dca:	2000      	movs	r0, #0
  }
   11dcc:	bd10      	pop	{r4, pc}

00011dce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   11dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dd0:	4605      	mov	r5, r0
   11dd2:	460f      	mov	r7, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   11dd4:	2400      	movs	r4, #0
   11dd6:	e000      	b.n	11dda <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xc>
   11dd8:	3401      	adds	r4, #1
   11dda:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   11dde:	42a3      	cmp	r3, r4
   11de0:	d90e      	bls.n	11e00 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x32>
      const TfLiteRegistration& registration = registrations_[i];
   11de2:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11de6:	1d1e      	adds	r6, r3, #4
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11de8:	699b      	ldr	r3, [r3, #24]
   11dea:	2b20      	cmp	r3, #32
   11dec:	d1f4      	bne.n	11dd8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   11dee:	eb05 1344 	add.w	r3, r5, r4, lsl #5
   11df2:	4639      	mov	r1, r7
   11df4:	69d8      	ldr	r0, [r3, #28]
   11df6:	f7ef fb63 	bl	14c0 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   11dfa:	2800      	cmp	r0, #0
   11dfc:	d1ec      	bne.n	11dd8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa>
   11dfe:	e000      	b.n	11e02 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x34>
    return nullptr;
   11e00:	2600      	movs	r6, #0
  }
   11e02:	4630      	mov	r0, r6
   11e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e06 <_Z6th_prev>:
void th_pre() {}
   11e06:	4770      	bx	lr

00011e08 <_Z7th_postv>:
void th_post() {}
   11e08:	4770      	bx	lr

00011e0a <_Z16th_command_readyPVc>:
void th_command_ready(char volatile *p_command) {
   11e0a:	b508      	push	{r3, lr}
  ee_serial_command_parser_callback((char *)p_command);
   11e0c:	f7f0 fdb6 	bl	297c <_Z33ee_serial_command_parser_callbackPc>
}
   11e10:	bd08      	pop	{r3, pc}

00011e12 <_Z10th_strnlenPKcj>:
size_t th_strnlen(const char *str, size_t maxlen) {
   11e12:	b508      	push	{r3, lr}
  return strnlen(str, maxlen);
   11e14:	f004 fb73 	bl	164fe <strnlen>
}
   11e18:	bd08      	pop	{r3, pc}

00011e1a <_Z10th_vprintfPKcSt9__va_list>:
int th_vprintf(const char *format, va_list ap) { return vprintf(format, ap); }
   11e1a:	b508      	push	{r3, lr}
   11e1c:	f7ff fc0e 	bl	1163c <viprintf>
   11e20:	bd08      	pop	{r3, pc}

00011e22 <_Z9th_printfPKcz>:
void th_printf(const char *p_fmt, ...) {
   11e22:	b40f      	push	{r0, r1, r2, r3}
   11e24:	b500      	push	{lr}
   11e26:	b083      	sub	sp, #12
   11e28:	a904      	add	r1, sp, #16
   11e2a:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, p_fmt);
   11e2e:	9101      	str	r1, [sp, #4]
  (void)th_vprintf(p_fmt, args); /* ignore return */
   11e30:	f7ff fff3 	bl	11e1a <_Z10th_vprintfPKcSt9__va_list>
}
   11e34:	b003      	add	sp, #12
   11e36:	f85d eb04 	ldr.w	lr, [sp], #4
   11e3a:	b004      	add	sp, #16
   11e3c:	4770      	bx	lr

00011e3e <_Z24th_serialport_initializev>:
}
   11e3e:	4770      	bx	lr

00011e40 <main>:
// Enables 128MHz for the nRF53
#define MHz128 1
//  Improves clock precision.
#define PREC 1

int main(int argc, char *argv[]) {
   11e40:	b508      	push	{r3, lr}

if(MHz128) {
nrfx_clock_divider_set(NRF_CLOCK_DOMAIN_HFCLK, NRF_CLOCK_HFCLK_DIV_1);
   11e42:	2100      	movs	r1, #0
   11e44:	2001      	movs	r0, #1
   11e46:	f7f4 f98d 	bl	6164 <nrfx_clock_divider_set>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11e4a:	2001      	movs	r0, #1
   11e4c:	f7f4 f854 	bl	5ef8 <nrfx_clock_start>
}
   11e50:	e003      	b.n	11e5a <main+0x1a>
                return true;
   11e52:	2301      	movs	r3, #1
   11e54:	e00d      	b.n	11e72 <main+0x32>

NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running(void)
{
    nrf_clock_hfclk_t clk_src;
    bool ret = nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src);
    return (ret && (clk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY));
   11e56:	2300      	movs	r3, #0
}
if(PREC) {
nrfx_clock_hfclk_start();
while (!nrfx_clock_hfclk_is_running()) { }
   11e58:	b98b      	cbnz	r3, 11e7e <main+0x3e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11e5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11e5e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   11e62:	f002 0201 	and.w	r2, r2, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   11e66:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   11e6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   11e6e:	d1f0      	bne.n	11e52 <main+0x12>
    return false;
   11e70:	2300      	movs	r3, #0
   11e72:	2b00      	cmp	r3, #0
   11e74:	d0ef      	beq.n	11e56 <main+0x16>
   11e76:	2a00      	cmp	r2, #0
   11e78:	d1ee      	bne.n	11e58 <main+0x18>
   11e7a:	2300      	movs	r3, #0
   11e7c:	e7ec      	b.n	11e58 <main+0x18>

// nrfx_clock_hfclk_start();
// while (!nrfx_clock_hfclk_is_running()) {
// }

console_init();
   11e7e:	f7f1 ff7d 	bl	3d7c <console_init>
ee_benchmark_initialize();
   11e82:	f7f0 fbbd 	bl	2600 <_Z23ee_benchmark_initializev>
  //console_init();

  while (1) {
    int c;

    c = console_getchar();
   11e86:	f7f1 ff67 	bl	3d58 <console_getchar>
    if (c < 0) {
   11e8a:	2800      	cmp	r0, #0
   11e8c:	dbfb      	blt.n	11e86 <main+0x46>
      continue;
    }
    // printk("c: %d", c);
    ee_serial_callback(c);
   11e8e:	b2c0      	uxtb	r0, r0
   11e90:	f7f0 fb96 	bl	25c0 <_Z18ee_serial_callbackc>
   11e94:	e7f7      	b.n	11e86 <main+0x46>

00011e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>:
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
  #else
    return EndianSwap(t);
  #endif
}
   11e96:	4770      	bx	lr

00011e98 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
   11e98:	b510      	push	{r4, lr}
   11e9a:	4604      	mov	r4, r0
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   11e9c:	6800      	ldr	r0, [r0, #0]
   11e9e:	f7ff fffa 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   11ea2:	4420      	add	r0, r4
   11ea4:	bd10      	pop	{r4, pc}

00011ea6 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
   11ea6:	b508      	push	{r3, lr}
  return GetMutableRoot<T>(const_cast<void *>(buf));
   11ea8:	f7ff fff6 	bl	11e98 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
}
   11eac:	bd08      	pop	{r3, pc}

00011eae <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11eae:	4602      	mov	r2, r0
   11eb0:	b158      	cbz	r0, 11eca <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11eb2:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11eb4:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11eb8:	2b01      	cmp	r3, #1
   11eba:	d003      	beq.n	11ec4 <sys_notify_validate+0x16>
   11ebc:	2b03      	cmp	r3, #3
   11ebe:	d107      	bne.n	11ed0 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11ec0:	6803      	ldr	r3, [r0, #0]
   11ec2:	b143      	cbz	r3, 11ed6 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11ec4:	2000      	movs	r0, #0
   11ec6:	6090      	str	r0, [r2, #8]
   11ec8:	4770      	bx	lr
		return -EINVAL;
   11eca:	f06f 0015 	mvn.w	r0, #21
   11ece:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   11ed0:	f06f 0015 	mvn.w	r0, #21
   11ed4:	4770      	bx	lr
			rv = -EINVAL;
   11ed6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11eda:	4770      	bx	lr

00011edc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11edc:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11ede:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11ee0:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11ee4:	6081      	str	r1, [r0, #8]
	switch (method) {
   11ee6:	2a03      	cmp	r2, #3
   11ee8:	d103      	bne.n	11ef2 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11eea:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11eec:	2200      	movs	r2, #0
   11eee:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11ef0:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   11ef2:	2000      	movs	r0, #0
   11ef4:	e7fa      	b.n	11eec <sys_notify_finalize+0x10>

00011ef6 <arch_printk_char_out>:
}
   11ef6:	2000      	movs	r0, #0
   11ef8:	4770      	bx	lr

00011efa <str_out>:
{
   11efa:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11efc:	680c      	ldr	r4, [r1, #0]
   11efe:	b154      	cbz	r4, 11f16 <str_out+0x1c>
   11f00:	688a      	ldr	r2, [r1, #8]
   11f02:	684b      	ldr	r3, [r1, #4]
   11f04:	429a      	cmp	r2, r3
   11f06:	da06      	bge.n	11f16 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   11f08:	3b01      	subs	r3, #1
   11f0a:	429a      	cmp	r2, r3
   11f0c:	d008      	beq.n	11f20 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   11f0e:	1c53      	adds	r3, r2, #1
   11f10:	608b      	str	r3, [r1, #8]
   11f12:	54a0      	strb	r0, [r4, r2]
   11f14:	e002      	b.n	11f1c <str_out+0x22>
		ctx->count++;
   11f16:	688b      	ldr	r3, [r1, #8]
   11f18:	3301      	adds	r3, #1
   11f1a:	608b      	str	r3, [r1, #8]
}
   11f1c:	bc10      	pop	{r4}
   11f1e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   11f20:	1c53      	adds	r3, r2, #1
   11f22:	608b      	str	r3, [r1, #8]
   11f24:	2300      	movs	r3, #0
   11f26:	54a3      	strb	r3, [r4, r2]
   11f28:	e7f8      	b.n	11f1c <str_out+0x22>

00011f2a <printk>:
{
   11f2a:	b40f      	push	{r0, r1, r2, r3}
   11f2c:	b500      	push	{lr}
   11f2e:	b083      	sub	sp, #12
   11f30:	a904      	add	r1, sp, #16
   11f32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11f36:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11f38:	f7f1 f82e 	bl	2f98 <vprintk>
}
   11f3c:	b003      	add	sp, #12
   11f3e:	f85d eb04 	ldr.w	lr, [sp], #4
   11f42:	b004      	add	sp, #16
   11f44:	4770      	bx	lr

00011f46 <snprintk>:
{
   11f46:	b40c      	push	{r2, r3}
   11f48:	b500      	push	{lr}
   11f4a:	b083      	sub	sp, #12
   11f4c:	ab04      	add	r3, sp, #16
   11f4e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11f52:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11f54:	f7f1 f830 	bl	2fb8 <vsnprintk>
}
   11f58:	b003      	add	sp, #12
   11f5a:	f85d eb04 	ldr.w	lr, [sp], #4
   11f5e:	b002      	add	sp, #8
   11f60:	4770      	bx	lr

00011f62 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   11f62:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11f66:	8b81      	ldrh	r1, [r0, #28]
   11f68:	f021 0107 	bic.w	r1, r1, #7
   11f6c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11f6e:	8381      	strh	r1, [r0, #28]
}
   11f70:	4770      	bx	lr

00011f72 <notify_monitors>:
{
   11f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f76:	4606      	mov	r6, r0
   11f78:	460f      	mov	r7, r1
   11f7a:	4690      	mov	r8, r2
	return list->head;
   11f7c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f7e:	b119      	cbz	r1, 11f88 <notify_monitors+0x16>
   11f80:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   11f82:	b131      	cbz	r1, 11f92 <notify_monitors+0x20>
	return node->next;
   11f84:	680c      	ldr	r4, [r1, #0]
   11f86:	e004      	b.n	11f92 <notify_monitors+0x20>
   11f88:	460c      	mov	r4, r1
   11f8a:	e002      	b.n	11f92 <notify_monitors+0x20>
   11f8c:	4623      	mov	r3, r4
   11f8e:	4621      	mov	r1, r4
   11f90:	461c      	mov	r4, r3
   11f92:	b159      	cbz	r1, 11fac <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   11f94:	684d      	ldr	r5, [r1, #4]
   11f96:	4643      	mov	r3, r8
   11f98:	463a      	mov	r2, r7
   11f9a:	4630      	mov	r0, r6
   11f9c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f9e:	2c00      	cmp	r4, #0
   11fa0:	d0f4      	beq.n	11f8c <notify_monitors+0x1a>
   11fa2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11fa4:	2c00      	cmp	r4, #0
   11fa6:	d0f2      	beq.n	11f8e <notify_monitors+0x1c>
	return node->next;
   11fa8:	6823      	ldr	r3, [r4, #0]
   11faa:	e7f0      	b.n	11f8e <notify_monitors+0x1c>
}
   11fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011fb0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11fb0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   11fb2:	f013 0307 	ands.w	r3, r3, #7
   11fb6:	d103      	bne.n	11fc0 <process_recheck+0x10>
	return list->head;
   11fb8:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   11fba:	b10a      	cbz	r2, 11fc0 <process_recheck+0x10>
		evt = EVT_START;
   11fbc:	2003      	movs	r0, #3
   11fbe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11fc0:	2b02      	cmp	r3, #2
   11fc2:	d003      	beq.n	11fcc <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   11fc4:	2b01      	cmp	r3, #1
   11fc6:	d006      	beq.n	11fd6 <process_recheck+0x26>
	int evt = EVT_NOP;
   11fc8:	2000      	movs	r0, #0
   11fca:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   11fcc:	8bc2      	ldrh	r2, [r0, #30]
   11fce:	2a00      	cmp	r2, #0
   11fd0:	d1f8      	bne.n	11fc4 <process_recheck+0x14>
		evt = EVT_STOP;
   11fd2:	2004      	movs	r0, #4
   11fd4:	4770      	bx	lr
   11fd6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   11fd8:	b10b      	cbz	r3, 11fde <process_recheck+0x2e>
		evt = EVT_RESET;
   11fda:	2005      	movs	r0, #5
}
   11fdc:	4770      	bx	lr
	int evt = EVT_NOP;
   11fde:	2000      	movs	r0, #0
   11fe0:	4770      	bx	lr

00011fe2 <process_complete>:
{
   11fe2:	b538      	push	{r3, r4, r5, lr}
   11fe4:	4604      	mov	r4, r0
   11fe6:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11fe8:	8b83      	ldrh	r3, [r0, #28]
	if (res < 0) {
   11fea:	2a00      	cmp	r2, #0
   11fec:	db07      	blt.n	11ffe <process_complete+0x1c>
   11fee:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11ff2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11ff4:	2a01      	cmp	r2, #1
   11ff6:	d90e      	bls.n	12016 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11ff8:	2b04      	cmp	r3, #4
   11ffa:	d032      	beq.n	12062 <process_complete+0x80>
}
   11ffc:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   11ffe:	e9d0 0100 	ldrd	r0, r1, [r0]
   12002:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   12006:	2300      	movs	r3, #0
   12008:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1200a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1200c:	2101      	movs	r1, #1
   1200e:	4620      	mov	r0, r4
   12010:	f7ff ffa7 	bl	11f62 <set_state>
   12014:	e7f2      	b.n	11ffc <process_complete+0x1a>
		*clients = mgr->clients;
   12016:	e9d0 0100 	ldrd	r0, r1, [r0]
   1201a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1201e:	2200      	movs	r2, #0
   12020:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   12022:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   12024:	2b06      	cmp	r3, #6
   12026:	d117      	bne.n	12058 <process_complete+0x76>
	return list->head;
   12028:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1202a:	b13b      	cbz	r3, 1203c <process_complete+0x5a>
				mgr->refs += 1U;
   1202c:	8be2      	ldrh	r2, [r4, #30]
   1202e:	3201      	adds	r2, #1
   12030:	83e2      	strh	r2, [r4, #30]
Z_GENLIST_PEEK_NEXT(slist, snode)
   12032:	2b00      	cmp	r3, #0
   12034:	d0f9      	beq.n	1202a <process_complete+0x48>
	return node->next;
   12036:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12038:	2b00      	cmp	r3, #0
   1203a:	d1f6      	bne.n	1202a <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1203c:	2102      	movs	r1, #2
   1203e:	4620      	mov	r0, r4
   12040:	f7ff ff8f 	bl	11f62 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   12044:	4620      	mov	r0, r4
   12046:	f7ff ffb3 	bl	11fb0 <process_recheck>
   1204a:	2800      	cmp	r0, #0
   1204c:	d0d6      	beq.n	11ffc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1204e:	8ba3      	ldrh	r3, [r4, #28]
   12050:	f043 0320 	orr.w	r3, r3, #32
   12054:	83a3      	strh	r3, [r4, #28]
   12056:	e7d1      	b.n	11ffc <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   12058:	2100      	movs	r1, #0
   1205a:	4620      	mov	r0, r4
   1205c:	f7ff ff81 	bl	11f62 <set_state>
   12060:	e7f0      	b.n	12044 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   12062:	2100      	movs	r1, #0
   12064:	f7ff ff7d 	bl	11f62 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   12068:	4620      	mov	r0, r4
   1206a:	f7ff ffa1 	bl	11fb0 <process_recheck>
   1206e:	2800      	cmp	r0, #0
   12070:	d0c4      	beq.n	11ffc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12072:	8ba3      	ldrh	r3, [r4, #28]
   12074:	f043 0320 	orr.w	r3, r3, #32
   12078:	83a3      	strh	r3, [r4, #28]
}
   1207a:	e7bf      	b.n	11ffc <process_complete+0x1a>

0001207c <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1207c:	b158      	cbz	r0, 12096 <validate_args+0x1a>
{
   1207e:	b510      	push	{r4, lr}
   12080:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   12082:	b159      	cbz	r1, 1209c <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   12084:	1d08      	adds	r0, r1, #4
   12086:	f7ff ff12 	bl	11eae <sys_notify_validate>
	if ((rv == 0)
   1208a:	b918      	cbnz	r0, 12094 <validate_args+0x18>
	    && ((cli->notify.flags
   1208c:	68a3      	ldr	r3, [r4, #8]
   1208e:	f033 0303 	bics.w	r3, r3, #3
   12092:	d106      	bne.n	120a2 <validate_args+0x26>
}
   12094:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12096:	f06f 0015 	mvn.w	r0, #21
}
   1209a:	4770      	bx	lr
		return -EINVAL;
   1209c:	f06f 0015 	mvn.w	r0, #21
   120a0:	e7f8      	b.n	12094 <validate_args+0x18>
		rv = -EINVAL;
   120a2:	f06f 0015 	mvn.w	r0, #21
   120a6:	e7f5      	b.n	12094 <validate_args+0x18>

000120a8 <notify_one>:
{
   120a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120ac:	4607      	mov	r7, r0
   120ae:	460c      	mov	r4, r1
   120b0:	4616      	mov	r6, r2
   120b2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   120b4:	4619      	mov	r1, r3
   120b6:	1d20      	adds	r0, r4, #4
   120b8:	f7ff ff10 	bl	11edc <sys_notify_finalize>
	if (cb) {
   120bc:	b128      	cbz	r0, 120ca <notify_one+0x22>
   120be:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   120c0:	462b      	mov	r3, r5
   120c2:	4632      	mov	r2, r6
   120c4:	4621      	mov	r1, r4
   120c6:	4638      	mov	r0, r7
   120c8:	47c0      	blx	r8
}
   120ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000120ce <notify_all>:
{
   120ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   120d2:	4681      	mov	r9, r0
   120d4:	460c      	mov	r4, r1
   120d6:	4690      	mov	r8, r2
   120d8:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   120da:	e005      	b.n	120e8 <notify_all+0x1a>
	list->tail = node;
   120dc:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   120de:	463b      	mov	r3, r7
   120e0:	4642      	mov	r2, r8
   120e2:	4648      	mov	r0, r9
   120e4:	f7ff ffe0 	bl	120a8 <notify_one>
	return list->head;
   120e8:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   120ea:	b129      	cbz	r1, 120f8 <notify_all+0x2a>
	return node->next;
   120ec:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   120ee:	6025      	str	r5, [r4, #0]
	return list->tail;
   120f0:	6866      	ldr	r6, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   120f2:	428e      	cmp	r6, r1
   120f4:	d1f3      	bne.n	120de <notify_all+0x10>
   120f6:	e7f1      	b.n	120dc <notify_all+0xe>
}
   120f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000120fc <transition_complete>:
{
   120fc:	b510      	push	{r4, lr}
	__asm__ volatile(
   120fe:	f04f 0420 	mov.w	r4, #32
   12102:	f3ef 8211 	mrs	r2, BASEPRI
   12106:	f384 8812 	msr	BASEPRI_MAX, r4
   1210a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1210e:	6181      	str	r1, [r0, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12110:	2101      	movs	r1, #1
   12112:	f7f0 ff67 	bl	2fe4 <process_event>
}
   12116:	bd10      	pop	{r4, pc}

00012118 <onoff_manager_init>:
	if ((mgr == NULL)
   12118:	b170      	cbz	r0, 12138 <onoff_manager_init+0x20>
{
   1211a:	b538      	push	{r3, r4, r5, lr}
   1211c:	460c      	mov	r4, r1
   1211e:	4605      	mov	r5, r0
	    || (transitions == NULL)
   12120:	b169      	cbz	r1, 1213e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   12122:	680b      	ldr	r3, [r1, #0]
   12124:	b173      	cbz	r3, 12144 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   12126:	684b      	ldr	r3, [r1, #4]
   12128:	b17b      	cbz	r3, 1214a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1212a:	2220      	movs	r2, #32
   1212c:	2100      	movs	r1, #0
   1212e:	f004 f85a 	bl	161e6 <memset>
   12132:	612c      	str	r4, [r5, #16]
	return 0;
   12134:	2000      	movs	r0, #0
}
   12136:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   12138:	f06f 0015 	mvn.w	r0, #21
}
   1213c:	4770      	bx	lr
		return -EINVAL;
   1213e:	f06f 0015 	mvn.w	r0, #21
   12142:	e7f8      	b.n	12136 <onoff_manager_init+0x1e>
   12144:	f06f 0015 	mvn.w	r0, #21
   12148:	e7f5      	b.n	12136 <onoff_manager_init+0x1e>
   1214a:	f06f 0015 	mvn.w	r0, #21
   1214e:	e7f2      	b.n	12136 <onoff_manager_init+0x1e>

00012150 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12152:	4604      	mov	r4, r0
   12154:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12156:	f7ff ff91 	bl	1207c <validate_args>

	if (rv < 0) {
   1215a:	1e06      	subs	r6, r0, #0
   1215c:	db37      	blt.n	121ce <onoff_request+0x7e>
   1215e:	f04f 0320 	mov.w	r3, #32
   12162:	f3ef 8211 	mrs	r2, BASEPRI
   12166:	f383 8812 	msr	BASEPRI_MAX, r3
   1216a:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1216e:	8ba5      	ldrh	r5, [r4, #28]
   12170:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12174:	8be3      	ldrh	r3, [r4, #30]
   12176:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1217a:	428b      	cmp	r3, r1
   1217c:	d02f      	beq.n	121de <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1217e:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   12180:	2d02      	cmp	r5, #2
   12182:	d00c      	beq.n	1219e <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   12184:	b18d      	cbz	r5, 121aa <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   12186:	2d04      	cmp	r5, #4
   12188:	d00f      	beq.n	121aa <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1218a:	2d06      	cmp	r5, #6
   1218c:	d00d      	beq.n	121aa <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1218e:	2d05      	cmp	r5, #5
   12190:	d01f      	beq.n	121d2 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   12192:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   12196:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   12198:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1219a:	4608      	mov	r0, r1
   1219c:	e00a      	b.n	121b4 <onoff_request+0x64>
		mgr->refs += 1U;
   1219e:	3301      	adds	r3, #1
   121a0:	83e3      	strh	r3, [r4, #30]
		notify = true;
   121a2:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   121a4:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   121a6:	4618      	mov	r0, r3
   121a8:	e004      	b.n	121b4 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   121aa:	fab5 f385 	clz	r3, r5
   121ae:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   121b0:	2100      	movs	r1, #0
		add_client = true;
   121b2:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   121b4:	b128      	cbz	r0, 121c2 <onoff_request+0x72>
	parent->next = child;
   121b6:	2000      	movs	r0, #0
   121b8:	6038      	str	r0, [r7, #0]
	return list->tail;
   121ba:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   121bc:	b1a8      	cbz	r0, 121ea <onoff_request+0x9a>
	parent->next = child;
   121be:	6007      	str	r7, [r0, #0]
	list->tail = node;
   121c0:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   121c2:	b9ab      	cbnz	r3, 121f0 <onoff_request+0xa0>
	__asm__ volatile(
   121c4:	f382 8811 	msr	BASEPRI, r2
   121c8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   121cc:	b9a9      	cbnz	r1, 121fa <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   121ce:	4630      	mov	r0, r6
   121d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   121d2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   121d6:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   121d8:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   121da:	4608      	mov	r0, r1
   121dc:	e7ea      	b.n	121b4 <onoff_request+0x64>
		rv = -EAGAIN;
   121de:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   121e2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   121e4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   121e6:	4608      	mov	r0, r1
   121e8:	e7e4      	b.n	121b4 <onoff_request+0x64>
   121ea:	6067      	str	r7, [r4, #4]
	list->head = node;
   121ec:	6027      	str	r7, [r4, #0]
}
   121ee:	e7e8      	b.n	121c2 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   121f0:	2102      	movs	r1, #2
   121f2:	4620      	mov	r0, r4
   121f4:	f7f0 fef6 	bl	2fe4 <process_event>
   121f8:	e7e9      	b.n	121ce <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   121fa:	2300      	movs	r3, #0
   121fc:	462a      	mov	r2, r5
   121fe:	4639      	mov	r1, r7
   12200:	4620      	mov	r0, r4
   12202:	f7ff ff51 	bl	120a8 <notify_one>
   12206:	e7e2      	b.n	121ce <onoff_request+0x7e>

00012208 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   12208:	b508      	push	{r3, lr}
   1220a:	4604      	mov	r4, r0
   1220c:	4608      	mov	r0, r1
   1220e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   12210:	461a      	mov	r2, r3
   12212:	47a0      	blx	r4
	return z_impl_z_current_get();
   12214:	f7fd fe6a 	bl	feec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   12218:	f7f2 fa62 	bl	46e0 <z_impl_k_thread_abort>

0001221c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1221c:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1221e:	1d13      	adds	r3, r2, #4
   12220:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   12224:	b9d3      	cbnz	r3, 1225c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   12226:	2301      	movs	r3, #1
   12228:	fa03 f402 	lsl.w	r4, r3, r2
   1222c:	68c3      	ldr	r3, [r0, #12]
   1222e:	4323      	orrs	r3, r4
   12230:	60c3      	str	r3, [r0, #12]
		b->next = c;
   12232:	3204      	adds	r2, #4
   12234:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12238:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1223c:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
   1223e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   12242:	d307      	bcc.n	12254 <free_list_add_bidx+0x38>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   12244:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   12246:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   12248:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1224c:	d304      	bcc.n	12258 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1224e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   12250:	bc70      	pop	{r4, r5, r6}
   12252:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   12254:	8099      	strh	r1, [r3, #4]
   12256:	e7f6      	b.n	12246 <free_list_add_bidx+0x2a>
   12258:	80d9      	strh	r1, [r3, #6]
   1225a:	e7f9      	b.n	12250 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1225c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   12260:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   12262:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12266:	d318      	bcc.n	1229a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   12268:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1226a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1226e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   12272:	d314      	bcc.n	1229e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   12274:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   12276:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   12278:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1227c:	d311      	bcc.n	122a2 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1227e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   12280:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   12284:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1228a:	d30c      	bcc.n	122a6 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1228c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1228e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   12290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   12294:	d309      	bcc.n	122aa <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   12296:	60a1      	str	r1, [r4, #8]
   12298:	e7da      	b.n	12250 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1229a:	88a2      	ldrh	r2, [r4, #4]
   1229c:	e7e5      	b.n	1226a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1229e:	80aa      	strh	r2, [r5, #4]
   122a0:	e7e9      	b.n	12276 <free_list_add_bidx+0x5a>
   122a2:	80eb      	strh	r3, [r5, #6]
   122a4:	e7ec      	b.n	12280 <free_list_add_bidx+0x64>
   122a6:	80d1      	strh	r1, [r2, #6]
   122a8:	e7f1      	b.n	1228e <free_list_add_bidx+0x72>
   122aa:	80a1      	strh	r1, [r4, #4]
   122ac:	e7d0      	b.n	12250 <free_list_add_bidx+0x34>

000122ae <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   122ae:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   122b0:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
   122b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   122b6:	d307      	bcc.n	122c8 <free_list_add+0x1a>
	void *cmem = &buf[c];
   122b8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   122bc:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   122be:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   122c0:	2a01      	cmp	r2, #1
   122c2:	d002      	beq.n	122ca <free_list_add+0x1c>
   122c4:	2200      	movs	r2, #0
   122c6:	e000      	b.n	122ca <free_list_add+0x1c>
   122c8:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   122ca:	b9a2      	cbnz	r2, 122f6 <free_list_add+0x48>
	void *cmem = &buf[c];
   122cc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   122d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   122d4:	d310      	bcc.n	122f8 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   122d6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   122d8:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   122da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   122de:	d30d      	bcc.n	122fc <free_list_add+0x4e>
   122e0:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   122e2:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   122e4:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   122e8:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   122ea:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
   122ee:	f1c2 021f 	rsb	r2, r2, #31
   122f2:	f7ff ff93 	bl	1221c <free_list_add_bidx>
	}
}
   122f6:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   122f8:	8852      	ldrh	r2, [r2, #2]
   122fa:	e7ed      	b.n	122d8 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   122fc:	2304      	movs	r3, #4
   122fe:	e7f0      	b.n	122e2 <free_list_add+0x34>

00012300 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   12300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12302:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   12304:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   12308:	d32a      	bcc.n	12360 <sys_heap_init+0x60>
   1230a:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1230c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1230e:	1dc8      	adds	r0, r1, #7
   12310:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12314:	440d      	add	r5, r1
   12316:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1231a:	1a2d      	subs	r5, r5, r0
   1231c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1231e:	4606      	mov	r6, r0
	heap->heap = h;
   12320:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   12322:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   12324:	2300      	movs	r3, #0
   12326:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   12328:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1232c:	d31a      	bcc.n	12364 <sys_heap_init+0x64>
   1232e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12330:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   12332:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   12336:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   12338:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1233c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12340:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   12344:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12346:	f103 0e07 	add.w	lr, r3, #7
   1234a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1234e:	2300      	movs	r3, #0
   12350:	4563      	cmp	r3, ip
   12352:	da09      	bge.n	12368 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   12354:	1d1a      	adds	r2, r3, #4
   12356:	2400      	movs	r4, #0
   12358:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1235c:	3301      	adds	r3, #1
   1235e:	e7f7      	b.n	12350 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   12360:	2504      	movs	r5, #4
   12362:	e7d3      	b.n	1230c <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   12364:	2304      	movs	r3, #4
   12366:	e7e3      	b.n	12330 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12368:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1236a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1236e:	d333      	bcc.n	123d8 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   12370:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   12372:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12376:	d331      	bcc.n	123dc <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   12378:	2300      	movs	r3, #0
   1237a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1237c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12380:	d32f      	bcc.n	123e2 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   12382:	6843      	ldr	r3, [r0, #4]
   12384:	f043 0301 	orr.w	r3, r3, #1
   12388:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1238a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1238c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1238e:	f02e 0307 	bic.w	r3, lr, #7
   12392:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   12394:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   12398:	d328      	bcc.n	123ec <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1239a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1239c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1239e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   123a2:	d325      	bcc.n	123f0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   123a4:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   123a6:	f025 0307 	bic.w	r3, r5, #7
   123aa:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   123ac:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   123ae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   123b2:	d31f      	bcc.n	123f4 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   123b4:	2400      	movs	r4, #0
   123b6:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   123b8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   123ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   123be:	d31c      	bcc.n	123fa <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   123c0:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   123c2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   123c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   123c8:	d319      	bcc.n	123fe <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   123ca:	686b      	ldr	r3, [r5, #4]
   123cc:	f043 0301 	orr.w	r3, r3, #1
   123d0:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   123d2:	f7ff ff6c 	bl	122ae <free_list_add>
}
   123d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   123d8:	8043      	strh	r3, [r0, #2]
   123da:	e7ca      	b.n	12372 <sys_heap_init+0x72>
   123dc:	2300      	movs	r3, #0
   123de:	8003      	strh	r3, [r0, #0]
   123e0:	e7cc      	b.n	1237c <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   123e2:	8843      	ldrh	r3, [r0, #2]
   123e4:	f043 0301 	orr.w	r3, r3, #1
   123e8:	8043      	strh	r3, [r0, #2]
   123ea:	e7ce      	b.n	1238a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   123ec:	8066      	strh	r6, [r4, #2]
   123ee:	e7d5      	b.n	1239c <sys_heap_init+0x9c>
   123f0:	52c1      	strh	r1, [r0, r3]
   123f2:	e7d8      	b.n	123a6 <sys_heap_init+0xa6>
   123f4:	2400      	movs	r4, #0
   123f6:	806c      	strh	r4, [r5, #2]
   123f8:	e7de      	b.n	123b8 <sys_heap_init+0xb8>
   123fa:	52c2      	strh	r2, [r0, r3]
   123fc:	e7e1      	b.n	123c2 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   123fe:	886b      	ldrh	r3, [r5, #2]
   12400:	f043 0301 	orr.w	r3, r3, #1
   12404:	806b      	strh	r3, [r5, #2]
   12406:	e7e4      	b.n	123d2 <sys_heap_init+0xd2>

00012408 <outs>:
{
   12408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1240c:	4607      	mov	r7, r0
   1240e:	460e      	mov	r6, r1
   12410:	4614      	mov	r4, r2
   12412:	4698      	mov	r8, r3
	size_t count = 0;
   12414:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12416:	e006      	b.n	12426 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   12418:	4631      	mov	r1, r6
   1241a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1241e:	47b8      	blx	r7
		if (rc < 0) {
   12420:	2800      	cmp	r0, #0
   12422:	db09      	blt.n	12438 <outs+0x30>
		++count;
   12424:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12426:	4544      	cmp	r4, r8
   12428:	d3f6      	bcc.n	12418 <outs+0x10>
   1242a:	f1b8 0f00 	cmp.w	r8, #0
   1242e:	d102      	bne.n	12436 <outs+0x2e>
   12430:	7823      	ldrb	r3, [r4, #0]
   12432:	2b00      	cmp	r3, #0
   12434:	d1f0      	bne.n	12418 <outs+0x10>
	return (int)count;
   12436:	4628      	mov	r0, r5
}
   12438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001243c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1243c:	4770      	bx	lr

0001243e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1243e:	b084      	sub	sp, #16
   12440:	ab04      	add	r3, sp, #16
   12442:	e903 0007 	stmdb	r3, {r0, r1, r2}
   12446:	2300      	movs	r3, #0
   12448:	f383 8811 	msr	BASEPRI, r3
   1244c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12450:	b004      	add	sp, #16
   12452:	4770      	bx	lr

00012454 <tty_putchar>:
{
   12454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12458:	4604      	mov	r4, r0
   1245a:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1245c:	f100 0624 	add.w	r6, r0, #36	; 0x24
			 k_is_in_isr() ? K_NO_WAIT :
   12460:	f003 fcac 	bl	15dbc <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   12464:	b330      	cbz	r0, 124b4 <tty_putchar+0x60>
   12466:	2200      	movs	r2, #0
   12468:	4613      	mov	r3, r2
	return z_impl_k_sem_take(sem, timeout);
   1246a:	4630      	mov	r0, r6
   1246c:	f7fd f956 	bl	f71c <z_impl_k_sem_take>
	if (res < 0) {
   12470:	2800      	cmp	r0, #0
   12472:	db1d      	blt.n	124b0 <tty_putchar+0x5c>
	__asm__ volatile(
   12474:	f04f 0320 	mov.w	r3, #32
   12478:	f3ef 8111 	mrs	r1, BASEPRI
   1247c:	f383 8812 	msr	BASEPRI_MAX, r3
   12480:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   12484:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   12486:	1c53      	adds	r3, r2, #1
	if (tx_next >= tty->tx_ringbuf_sz) {
   12488:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1248a:	4298      	cmp	r0, r3
   1248c:	d800      	bhi.n	12490 <tty_putchar+0x3c>
		tx_next = 0;
   1248e:	2300      	movs	r3, #0
	if (tx_next == tty->tx_get) {
   12490:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
   12492:	4298      	cmp	r0, r3
   12494:	d02e      	beq.n	124f4 <tty_putchar+0xa0>
	tty->tx_ringbuf[tty->tx_put] = c;
   12496:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12498:	5485      	strb	r5, [r0, r2]
	tty->tx_put = tx_next;
   1249a:	87e3      	strh	r3, [r4, #62]	; 0x3e
	__asm__ volatile(
   1249c:	f381 8811 	msr	BASEPRI, r1
   124a0:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   124a4:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   124a6:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_enable != NULL) {
   124a8:	69db      	ldr	r3, [r3, #28]
   124aa:	b353      	cbz	r3, 12502 <tty_putchar+0xae>
		api->irq_tx_enable(dev);
   124ac:	4798      	blx	r3
	return 0;
   124ae:	2000      	movs	r0, #0
}
   124b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   124b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
	res = k_sem_take(&tty->tx_sem,
   124b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   124ba:	d017      	beq.n	124ec <tty_putchar+0x98>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   124bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   124c0:	ea4f 79e3 	mov.w	r9, r3, asr #31
   124c4:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   124c8:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   124cc:	03d8      	lsls	r0, r3, #15
   124ce:	f240 37e7 	movw	r7, #999	; 0x3e7
   124d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   124d6:	2300      	movs	r3, #0
   124d8:	19c0      	adds	r0, r0, r7
   124da:	f04f 0700 	mov.w	r7, #0
   124de:	eb47 0101 	adc.w	r1, r7, r1
   124e2:	f7ee fe01 	bl	10e8 <__aeabi_uldivmod>
	res = k_sem_take(&tty->tx_sem,
   124e6:	4602      	mov	r2, r0
   124e8:	460b      	mov	r3, r1
   124ea:	e7be      	b.n	1246a <tty_putchar+0x16>
   124ec:	f04f 32ff 	mov.w	r2, #4294967295
   124f0:	4613      	mov	r3, r2
   124f2:	e7ba      	b.n	1246a <tty_putchar+0x16>
   124f4:	f381 8811 	msr	BASEPRI, r1
   124f8:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   124fc:	f06f 001b 	mvn.w	r0, #27
   12500:	e7d6      	b.n	124b0 <tty_putchar+0x5c>
	return 0;
   12502:	2000      	movs	r0, #0
   12504:	e7d4      	b.n	124b0 <tty_putchar+0x5c>

00012506 <tty_getchar>:
{
   12506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12508:	4604      	mov	r4, r0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1250a:	1d05      	adds	r5, r0, #4
   1250c:	6a03      	ldr	r3, [r0, #32]
   1250e:	f1b3 3fff 	cmp.w	r3, #4294967295
   12512:	d031      	beq.n	12578 <tty_getchar+0x72>
   12514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12518:	17df      	asrs	r7, r3, #31
   1251a:	03f9      	lsls	r1, r7, #15
   1251c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   12520:	03d8      	lsls	r0, r3, #15
   12522:	f240 36e7 	movw	r6, #999	; 0x3e7
   12526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1252a:	2300      	movs	r3, #0
   1252c:	1980      	adds	r0, r0, r6
   1252e:	f04f 0600 	mov.w	r6, #0
   12532:	eb46 0101 	adc.w	r1, r6, r1
   12536:	f7ee fdd7 	bl	10e8 <__aeabi_uldivmod>
   1253a:	4602      	mov	r2, r0
   1253c:	460b      	mov	r3, r1
   1253e:	4628      	mov	r0, r5
   12540:	f7fd f8ec 	bl	f71c <z_impl_k_sem_take>
	if (res < 0) {
   12544:	2800      	cmp	r0, #0
   12546:	db16      	blt.n	12576 <tty_getchar+0x70>
	__asm__ volatile(
   12548:	f04f 0320 	mov.w	r3, #32
   1254c:	f3ef 8111 	mrs	r1, BASEPRI
   12550:	f383 8812 	msr	BASEPRI_MAX, r3
   12554:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   12558:	6960      	ldr	r0, [r4, #20]
   1255a:	8ba2      	ldrh	r2, [r4, #28]
   1255c:	1c53      	adds	r3, r2, #1
   1255e:	b29b      	uxth	r3, r3
   12560:	83a3      	strh	r3, [r4, #28]
   12562:	5c80      	ldrb	r0, [r0, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   12564:	69a2      	ldr	r2, [r4, #24]
   12566:	4293      	cmp	r3, r2
   12568:	d301      	bcc.n	1256e <tty_getchar+0x68>
		tty->rx_get = 0U;
   1256a:	2300      	movs	r3, #0
   1256c:	83a3      	strh	r3, [r4, #28]
	__asm__ volatile(
   1256e:	f381 8811 	msr	BASEPRI, r1
   12572:	f3bf 8f6f 	isb	sy
}
   12576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   12578:	f04f 32ff 	mov.w	r2, #4294967295
   1257c:	4613      	mov	r3, r2
   1257e:	e7de      	b.n	1253e <tty_getchar+0x38>

00012580 <tty_read_unbuf>:
{
   12580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12584:	b083      	sub	sp, #12
   12586:	4681      	mov	r9, r0
   12588:	460e      	mov	r6, r1
   1258a:	4615      	mov	r5, r2
	uint32_t timeout = tty->rx_timeout;
   1258c:	6a07      	ldr	r7, [r0, #32]
	size_t out_size = 0;
   1258e:	f04f 0800 	mov.w	r8, #0
	while (size) {
   12592:	e01a      	b.n	125ca <tty_read_unbuf+0x4a>
		return -ENOSYS;
   12594:	f06f 0457 	mvn.w	r4, #87	; 0x57
			if (out_size == 0) {
   12598:	f1b8 0f00 	cmp.w	r8, #0
   1259c:	d003      	beq.n	125a6 <tty_read_unbuf+0x26>
	return out_size;
   1259e:	4640      	mov	r0, r8
}
   125a0:	b003      	add	sp, #12
   125a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				errno = res;
   125a6:	f000 f9bf 	bl	12928 <__errno>
   125aa:	6004      	str	r4, [r0, #0]
				return -1;
   125ac:	f04f 30ff 	mov.w	r0, #4294967295
   125b0:	e7f6      	b.n	125a0 <tty_read_unbuf+0x20>
		if (size == 0 ||
   125b2:	2d00      	cmp	r5, #0
   125b4:	d0f3      	beq.n	1259e <tty_read_unbuf+0x1e>
   125b6:	f1b7 3fff 	cmp.w	r7, #4294967295
   125ba:	d003      	beq.n	125c4 <tty_read_unbuf+0x44>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   125bc:	1e7b      	subs	r3, r7, #1
   125be:	2f00      	cmp	r7, #0
   125c0:	d0ed      	beq.n	1259e <tty_read_unbuf+0x1e>
   125c2:	461f      	mov	r7, r3
		if (res == -1) {
   125c4:	f1b4 3fff 	cmp.w	r4, #4294967295
   125c8:	d018      	beq.n	125fc <tty_read_unbuf+0x7c>
	while (size) {
   125ca:	2d00      	cmp	r5, #0
   125cc:	d0e7      	beq.n	1259e <tty_read_unbuf+0x1e>
		res = uart_poll_in(tty->uart_dev, &c);
   125ce:	f8d9 0000 	ldr.w	r0, [r9]
	const struct uart_driver_api *api =
   125d2:	6883      	ldr	r3, [r0, #8]
	if (api->poll_in == NULL) {
   125d4:	681b      	ldr	r3, [r3, #0]
   125d6:	2b00      	cmp	r3, #0
   125d8:	d0dc      	beq.n	12594 <tty_read_unbuf+0x14>
	return api->poll_in(dev, p_char);
   125da:	f10d 0107 	add.w	r1, sp, #7
   125de:	4798      	blx	r3
   125e0:	4604      	mov	r4, r0
		if (res <= -2) {
   125e2:	f1b0 3fff 	cmp.w	r0, #4294967295
   125e6:	dbd7      	blt.n	12598 <tty_read_unbuf+0x18>
		if (res == 0) {
   125e8:	2800      	cmp	r0, #0
   125ea:	d1e2      	bne.n	125b2 <tty_read_unbuf+0x32>
			*p++ = c;
   125ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   125f0:	f806 3b01 	strb.w	r3, [r6], #1
			out_size++;
   125f4:	f108 0801 	add.w	r8, r8, #1
			size--;
   125f8:	3d01      	subs	r5, #1
   125fa:	e7da      	b.n	125b2 <tty_read_unbuf+0x32>
	return z_impl_k_sleep(timeout);
   125fc:	2021      	movs	r0, #33	; 0x21
   125fe:	2100      	movs	r1, #0
   12600:	f7fd fc48 	bl	fe94 <z_impl_k_sleep>
   12604:	e7e1      	b.n	125ca <tty_read_unbuf+0x4a>

00012606 <tty_irq_input_hook>:
{
   12606:	b510      	push	{r4, lr}
	int rx_next = tty->rx_put + 1;
   12608:	8bc2      	ldrh	r2, [r0, #30]
   1260a:	1c53      	adds	r3, r2, #1
	if (rx_next >= tty->rx_ringbuf_sz) {
   1260c:	6984      	ldr	r4, [r0, #24]
   1260e:	429c      	cmp	r4, r3
   12610:	d800      	bhi.n	12614 <tty_irq_input_hook+0xe>
		rx_next = 0;
   12612:	2300      	movs	r3, #0
	if (rx_next == tty->rx_get) {
   12614:	8b84      	ldrh	r4, [r0, #28]
   12616:	429c      	cmp	r4, r3
   12618:	d007      	beq.n	1262a <tty_irq_input_hook+0x24>
	tty->rx_ringbuf[tty->rx_put] = c;
   1261a:	6944      	ldr	r4, [r0, #20]
   1261c:	54a1      	strb	r1, [r4, r2]
	tty->rx_put = rx_next;
   1261e:	83c3      	strh	r3, [r0, #30]
	k_sem_give(&tty->rx_sem);
   12620:	3004      	adds	r0, #4
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   12622:	f7fd f857 	bl	f6d4 <z_impl_k_sem_give>
}
   12626:	2001      	movs	r0, #1
   12628:	bd10      	pop	{r4, pc}
		tty_putchar(tty, '~');
   1262a:	217e      	movs	r1, #126	; 0x7e
   1262c:	f7ff ff12 	bl	12454 <tty_putchar>
		return 1;
   12630:	e7f9      	b.n	12626 <tty_irq_input_hook+0x20>

00012632 <tty_uart_isr>:
{
   12632:	b530      	push	{r4, r5, lr}
   12634:	b083      	sub	sp, #12
   12636:	4604      	mov	r4, r0
   12638:	460d      	mov	r5, r1
	const struct uart_driver_api *api =
   1263a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
   1263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1263e:	b103      	cbz	r3, 12642 <tty_uart_isr+0x10>
	return api->irq_update(dev);
   12640:	4798      	blx	r3
	const struct uart_driver_api *api =
   12642:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
   12644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12646:	b143      	cbz	r3, 1265a <tty_uart_isr+0x28>
	return api->irq_rx_ready(dev);
   12648:	4620      	mov	r0, r4
   1264a:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1264c:	b180      	cbz	r0, 12670 <tty_uart_isr+0x3e>
   1264e:	e004      	b.n	1265a <tty_uart_isr+0x28>
			tty_irq_input_hook(tty, c);
   12650:	f89d 1007 	ldrb.w	r1, [sp, #7]
   12654:	4628      	mov	r0, r5
   12656:	f7ff ffd6 	bl	12606 <tty_irq_input_hook>
	const struct uart_driver_api *api =
   1265a:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
   1265c:	699b      	ldr	r3, [r3, #24]
   1265e:	2b00      	cmp	r3, #0
   12660:	d0f6      	beq.n	12650 <tty_uart_isr+0x1e>
	return api->fifo_read(dev, rx_data, size);
   12662:	2201      	movs	r2, #1
   12664:	f10d 0107 	add.w	r1, sp, #7
   12668:	4620      	mov	r0, r4
   1266a:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1266c:	2800      	cmp	r0, #0
   1266e:	d1ef      	bne.n	12650 <tty_uart_isr+0x1e>
	const struct uart_driver_api *api =
   12670:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_ready == NULL) {
   12672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12674:	b113      	cbz	r3, 1267c <tty_uart_isr+0x4a>
	return api->irq_tx_ready(dev);
   12676:	4620      	mov	r0, r4
   12678:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1267a:	b1b8      	cbz	r0, 126ac <tty_uart_isr+0x7a>
		if (tty->tx_get == tty->tx_put) {
   1267c:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
   1267e:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   12680:	4299      	cmp	r1, r3
   12682:	d015      	beq.n	126b0 <tty_uart_isr+0x7e>
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   12684:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   12686:	1c4a      	adds	r2, r1, #1
   12688:	87aa      	strh	r2, [r5, #60]	; 0x3c
   1268a:	4419      	add	r1, r3
	const struct uart_driver_api *api =
   1268c:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
   1268e:	695b      	ldr	r3, [r3, #20]
   12690:	b113      	cbz	r3, 12698 <tty_uart_isr+0x66>
	return api->fifo_fill(dev, tx_data, size);
   12692:	2201      	movs	r2, #1
   12694:	4620      	mov	r0, r4
   12696:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   12698:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   1269a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1269c:	429a      	cmp	r2, r3
   1269e:	d301      	bcc.n	126a4 <tty_uart_isr+0x72>
				tty->tx_get = 0U;
   126a0:	2300      	movs	r3, #0
   126a2:	87ab      	strh	r3, [r5, #60]	; 0x3c
			k_sem_give(&tty->tx_sem);
   126a4:	f105 0024 	add.w	r0, r5, #36	; 0x24
   126a8:	f7fd f814 	bl	f6d4 <z_impl_k_sem_give>
}
   126ac:	b003      	add	sp, #12
   126ae:	bd30      	pop	{r4, r5, pc}
	const struct uart_driver_api *api =
   126b0:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_disable != NULL) {
   126b2:	6a1b      	ldr	r3, [r3, #32]
   126b4:	2b00      	cmp	r3, #0
   126b6:	d0f9      	beq.n	126ac <tty_uart_isr+0x7a>
		api->irq_tx_disable(dev);
   126b8:	4620      	mov	r0, r4
   126ba:	4798      	blx	r3
   126bc:	e7f6      	b.n	126ac <tty_uart_isr+0x7a>

000126be <tty_read>:
{
   126be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126c2:	4607      	mov	r7, r0
   126c4:	460d      	mov	r5, r1
	if (tty->rx_ringbuf_sz == 0U) {
   126c6:	6983      	ldr	r3, [r0, #24]
   126c8:	b17b      	cbz	r3, 126ea <tty_read+0x2c>
	size_t out_size = 0;
   126ca:	2600      	movs	r6, #0
	while (size--) {
   126cc:	f102 38ff 	add.w	r8, r2, #4294967295
   126d0:	b1ba      	cbz	r2, 12702 <tty_read+0x44>
		res = tty_getchar(tty);
   126d2:	4638      	mov	r0, r7
   126d4:	f7ff ff17 	bl	12506 <tty_getchar>
		if (res < 0) {
   126d8:	1e04      	subs	r4, r0, #0
   126da:	db0a      	blt.n	126f2 <tty_read+0x34>
		*p++ = (uint8_t)res;
   126dc:	4629      	mov	r1, r5
   126de:	f801 4b01 	strb.w	r4, [r1], #1
		out_size++;
   126e2:	3601      	adds	r6, #1
		*p++ = (uint8_t)res;
   126e4:	460d      	mov	r5, r1
	while (size--) {
   126e6:	4642      	mov	r2, r8
   126e8:	e7f0      	b.n	126cc <tty_read+0xe>
		return tty_read_unbuf(tty, buf, size);
   126ea:	f7ff ff49 	bl	12580 <tty_read_unbuf>
   126ee:	4604      	mov	r4, r0
   126f0:	e008      	b.n	12704 <tty_read+0x46>
			if (out_size == 0) {
   126f2:	b10e      	cbz	r6, 126f8 <tty_read+0x3a>
			return out_size;
   126f4:	4634      	mov	r4, r6
   126f6:	e005      	b.n	12704 <tty_read+0x46>
				errno = -res;
   126f8:	f000 f916 	bl	12928 <__errno>
   126fc:	4263      	negs	r3, r4
   126fe:	6003      	str	r3, [r0, #0]
				return res;
   12700:	e000      	b.n	12704 <tty_read+0x46>
	return out_size;
   12702:	4634      	mov	r4, r6
}
   12704:	4620      	mov	r0, r4
   12706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001270a <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1270a:	b570      	push	{r4, r5, r6, lr}
   1270c:	4604      	mov	r4, r0
   1270e:	460e      	mov	r6, r1
   12710:	4615      	mov	r5, r2
	uart_irq_rx_disable(tty->uart_dev);
   12712:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   12714:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_disable != NULL) {
   12716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12718:	b103      	cbz	r3, 1271c <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   1271a:	4798      	blx	r3

	tty->rx_ringbuf = buf;
   1271c:	6166      	str	r6, [r4, #20]
	tty->rx_ringbuf_sz = size;
   1271e:	61a5      	str	r5, [r4, #24]

	if (size > 0) {
   12720:	b90d      	cbnz	r5, 12726 <tty_set_rx_buf+0x1c>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
	}

	return 0;
}
   12722:	2000      	movs	r0, #0
   12724:	bd70      	pop	{r4, r5, r6, pc}
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
   12726:	1d20      	adds	r0, r4, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   12728:	f04f 32ff 	mov.w	r2, #4294967295
   1272c:	2100      	movs	r1, #0
   1272e:	f003 fb89 	bl	15e44 <z_impl_k_sem_init>
		uart_irq_rx_enable(tty->uart_dev);
   12732:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api =
   12734:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
   12736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12738:	2b00      	cmp	r3, #0
   1273a:	d0f2      	beq.n	12722 <tty_set_rx_buf+0x18>
		api->irq_rx_enable(dev);
   1273c:	4798      	blx	r3
   1273e:	e7f0      	b.n	12722 <tty_set_rx_buf+0x18>

00012740 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   12740:	b570      	push	{r4, r5, r6, lr}
   12742:	4604      	mov	r4, r0
   12744:	460e      	mov	r6, r1
   12746:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   12748:	6800      	ldr	r0, [r0, #0]
	const struct uart_driver_api *api =
   1274a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_tx_disable != NULL) {
   1274c:	6a1b      	ldr	r3, [r3, #32]
   1274e:	b103      	cbz	r3, 12752 <tty_set_tx_buf+0x12>
		api->irq_tx_disable(dev);
   12750:	4798      	blx	r3

	tty->tx_ringbuf = buf;
   12752:	6366      	str	r6, [r4, #52]	; 0x34
	tty->tx_ringbuf_sz = size;
   12754:	63a5      	str	r5, [r4, #56]	; 0x38

	k_sem_init(&tty->tx_sem, size - 1, K_SEM_MAX_LIMIT);
   12756:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1275a:	1e69      	subs	r1, r5, #1
   1275c:	f04f 32ff 	mov.w	r2, #4294967295
   12760:	f003 fb70 	bl	15e44 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   12764:	2000      	movs	r0, #0
   12766:	bd70      	pop	{r4, r5, r6, pc}

00012768 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
   12768:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
   1276a:	f7f1 fb3f 	bl	3dec <__do_global_ctors_aux>
	__do_init_array_aux();
   1276e:	f7f1 fb2f 	bl	3dd0 <__do_init_array_aux>
}
   12772:	bd08      	pop	{r3, pc}

00012774 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   12774:	2000      	movs	r0, #0
   12776:	4770      	bx	lr

00012778 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   12778:	2200      	movs	r2, #0
   1277a:	6002      	str	r2, [r0, #0]
   1277c:	6042      	str	r2, [r0, #4]
   1277e:	6082      	str	r2, [r0, #8]
}
   12780:	4770      	bx	lr

00012782 <abort_function>:
{
   12782:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   12784:	2000      	movs	r0, #0
   12786:	f7f1 fa49 	bl	3c1c <sys_reboot>

0001278a <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1278a:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1278c:	f003 fa9e 	bl	15ccc <z_fatal_error>
}
   12790:	bd08      	pop	{r3, pc}

00012792 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   12792:	b508      	push	{r3, lr}
   12794:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12796:	6800      	ldr	r0, [r0, #0]
   12798:	f7ff fff7 	bl	1278a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1279c:	bd08      	pop	{r3, pc}

0001279e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1279e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   127a0:	2100      	movs	r1, #0
   127a2:	2001      	movs	r0, #1
   127a4:	f7ff fff1 	bl	1278a <z_arm_fatal_error>
}
   127a8:	bd08      	pop	{r3, pc}

000127aa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   127aa:	b508      	push	{r3, lr}
	handler();
   127ac:	f7f1 fd0e 	bl	41cc <z_SysNmiOnReset>
	z_arm_int_exit();
   127b0:	f7f1 fddc 	bl	436c <z_arm_exc_exit>
}
   127b4:	bd08      	pop	{r3, pc}

000127b6 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   127b6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   127ba:	f383 880b 	msr	PSPLIM, r3
}
   127be:	4770      	bx	lr

000127c0 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   127c0:	b508      	push	{r3, lr}
   127c2:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   127c4:	4601      	mov	r1, r0
   127c6:	4618      	mov	r0, r3
   127c8:	f7ff ffd4 	bl	12774 <__cxa_atexit>
}
   127cc:	bd08      	pop	{r3, pc}

000127ce <memory_fault_recoverable>:
}
   127ce:	2000      	movs	r0, #0
   127d0:	4770      	bx	lr

000127d2 <debug_monitor>:
	*recoverable = false;
   127d2:	2300      	movs	r3, #0
   127d4:	700b      	strb	r3, [r1, #0]
}
   127d6:	4770      	bx	lr

000127d8 <fault_handle>:
{
   127d8:	b508      	push	{r3, lr}
	*recoverable = false;
   127da:	2300      	movs	r3, #0
   127dc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   127de:	1ecb      	subs	r3, r1, #3
   127e0:	2b09      	cmp	r3, #9
   127e2:	d81a      	bhi.n	1281a <fault_handle+0x42>
   127e4:	e8df f003 	tbb	[pc, r3]
   127e8:	110d0905 	.word	0x110d0905
   127ec:	19191919 	.word	0x19191919
   127f0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   127f2:	4611      	mov	r1, r2
   127f4:	f7f1 fe36 	bl	4464 <hard_fault>
		break;
   127f8:	e010      	b.n	1281c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   127fa:	2100      	movs	r1, #0
   127fc:	f7f1 fdc4 	bl	4388 <mem_manage_fault>
		break;
   12800:	e00c      	b.n	1281c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   12802:	2100      	movs	r1, #0
   12804:	f7f1 fdec 	bl	43e0 <bus_fault>
		break;
   12808:	e008      	b.n	1281c <fault_handle+0x44>
		reason = usage_fault(esf);
   1280a:	f7f1 fe13 	bl	4434 <usage_fault>
		break;
   1280e:	e005      	b.n	1281c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   12810:	4611      	mov	r1, r2
   12812:	f7ff ffde 	bl	127d2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12816:	2000      	movs	r0, #0
		break;
   12818:	e000      	b.n	1281c <fault_handle+0x44>
	*recoverable = false;
   1281a:	2000      	movs	r0, #0
}
   1281c:	bd08      	pop	{r3, pc}

0001281e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1281e:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   12822:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   12826:	d001      	beq.n	1282c <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   12828:	b2c0      	uxtb	r0, r0
   1282a:	4770      	bx	lr
	}

	return -EINVAL;
   1282c:	f06f 0015 	mvn.w	r0, #21
}
   12830:	4770      	bx	lr

00012832 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   12832:	6843      	ldr	r3, [r0, #4]
		&&
   12834:	2b1f      	cmp	r3, #31
   12836:	d90a      	bls.n	1284e <mpu_partition_is_valid+0x1c>
		&&
   12838:	f013 0f1f 	tst.w	r3, #31
   1283c:	d001      	beq.n	12842 <mpu_partition_is_valid+0x10>
		&&
   1283e:	2000      	movs	r0, #0
   12840:	4770      	bx	lr
		((part->start &
   12842:	6803      	ldr	r3, [r0, #0]
		&&
   12844:	f013 0f1f 	tst.w	r3, #31
   12848:	d003      	beq.n	12852 <mpu_partition_is_valid+0x20>
   1284a:	2000      	movs	r0, #0
   1284c:	4770      	bx	lr
   1284e:	2000      	movs	r0, #0
   12850:	4770      	bx	lr
   12852:	2001      	movs	r0, #1
}
   12854:	4770      	bx	lr

00012856 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   12856:	2807      	cmp	r0, #7
   12858:	d805      	bhi.n	12866 <region_allocate_and_init+0x10>
{
   1285a:	b510      	push	{r4, lr}
   1285c:	4604      	mov	r4, r0
	region_init(index, region_conf);
   1285e:	f7f1 ff7b 	bl	4758 <region_init>
	return index;
   12862:	4620      	mov	r0, r4
}
   12864:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12866:	f06f 0015 	mvn.w	r0, #21
}
   1286a:	4770      	bx	lr

0001286c <mpu_configure_region>:
{
   1286c:	b530      	push	{r4, r5, lr}
   1286e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   12870:	680b      	ldr	r3, [r1, #0]
   12872:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12874:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   12876:	890d      	ldrh	r5, [r1, #8]
   12878:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1287c:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   12880:	7a89      	ldrb	r1, [r1, #10]
   12882:	f361 1247 	bfi	r2, r1, #5, #3
   12886:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1288a:	f023 031f 	bic.w	r3, r3, #31
   1288e:	4423      	add	r3, r4
   12890:	3b01      	subs	r3, #1
   12892:	f023 031f 	bic.w	r3, r3, #31
   12896:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   12898:	4669      	mov	r1, sp
   1289a:	f7ff ffdc 	bl	12856 <region_allocate_and_init>
}
   1289e:	b005      	add	sp, #20
   128a0:	bd30      	pop	{r4, r5, pc}

000128a2 <arm_core_mpu_configure_static_mpu_regions>:
{
   128a2:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   128a4:	f7f2 f836 	bl	4914 <mpu_configure_static_mpu_regions>
}
   128a8:	bd08      	pop	{r3, pc}

000128aa <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   128aa:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   128ac:	f7f2 f83c 	bl	4928 <mpu_mark_areas_for_dynamic_regions>
}
   128b0:	bd08      	pop	{r3, pc}

000128b2 <malloc_prepare>:
}
   128b2:	2000      	movs	r0, #0
   128b4:	4770      	bx	lr

000128b6 <_stdout_hook_default>:
}
   128b6:	f04f 30ff 	mov.w	r0, #4294967295
   128ba:	4770      	bx	lr

000128bc <_stdin_hook_default>:
}
   128bc:	2000      	movs	r0, #0
   128be:	4770      	bx	lr

000128c0 <_read>:
{
   128c0:	b508      	push	{r3, lr}
   128c2:	4608      	mov	r0, r1
   128c4:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   128c6:	f7f2 f8bf 	bl	4a48 <z_impl_zephyr_read_stdin>
}
   128ca:	bd08      	pop	{r3, pc}

000128cc <_write>:
{
   128cc:	b508      	push	{r3, lr}
   128ce:	4608      	mov	r0, r1
   128d0:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   128d2:	f7f2 f8cf 	bl	4a74 <z_impl_zephyr_write_stdout>
}
   128d6:	bd08      	pop	{r3, pc}

000128d8 <_close>:
}
   128d8:	f04f 30ff 	mov.w	r0, #4294967295
   128dc:	4770      	bx	lr

000128de <_lseek>:
}
   128de:	2000      	movs	r0, #0
   128e0:	4770      	bx	lr

000128e2 <_isatty>:
}
   128e2:	2802      	cmp	r0, #2
   128e4:	bfcc      	ite	gt
   128e6:	2000      	movgt	r0, #0
   128e8:	2001      	movle	r0, #1
   128ea:	4770      	bx	lr

000128ec <_kill>:
}
   128ec:	2000      	movs	r0, #0
   128ee:	4770      	bx	lr

000128f0 <_getpid>:
}
   128f0:	2000      	movs	r0, #0
   128f2:	4770      	bx	lr

000128f4 <_fstat>:
	st->st_mode = S_IFCHR;
   128f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   128f8:	604b      	str	r3, [r1, #4]
}
   128fa:	2000      	movs	r0, #0
   128fc:	4770      	bx	lr

000128fe <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   128fe:	b510      	push	{r4, lr}
   12900:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   12902:	2014      	movs	r0, #20
   12904:	f7fe f88c 	bl	10a20 <malloc>
   12908:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1290a:	f003 fa94 	bl	15e36 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   1290e:	bd10      	pop	{r4, pc}

00012910 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   12910:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   12912:	f04f 32ff 	mov.w	r2, #4294967295
   12916:	f04f 33ff 	mov.w	r3, #4294967295
   1291a:	f7fc fe0d 	bl	f538 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   1291e:	bd08      	pop	{r3, pc}

00012920 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   12920:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   12922:	f7fc fe93 	bl	f64c <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   12926:	bd08      	pop	{r3, pc}

00012928 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
   12928:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1292a:	f7fc fbd1 	bl	f0d0 <z_impl_z_errno>
	return z_errno();
}
   1292e:	bd08      	pop	{r3, pc}

00012930 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   12930:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   12932:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   12936:	0089      	lsls	r1, r1, #2
   12938:	3180      	adds	r1, #128	; 0x80
}
   1293a:	4408      	add	r0, r1
   1293c:	4770      	bx	lr

0001293e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1293e:	6840      	ldr	r0, [r0, #4]
}
   12940:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   12944:	4770      	bx	lr

00012946 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   12946:	6900      	ldr	r0, [r0, #16]
}
   12948:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   1294c:	4770      	bx	lr

0001294e <get_status>:
{
   1294e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   12950:	b2c9      	uxtb	r1, r1
   12952:	f7ff ffed 	bl	12930 <get_sub_data>
   12956:	6880      	ldr	r0, [r0, #8]
}
   12958:	f000 0007 	and.w	r0, r0, #7
   1295c:	bd08      	pop	{r3, pc}

0001295e <set_off_state>:
	__asm__ volatile(
   1295e:	f04f 0320 	mov.w	r3, #32
   12962:	f3ef 8211 	mrs	r2, BASEPRI
   12966:	f383 8812 	msr	BASEPRI_MAX, r3
   1296a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1296e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12970:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   12974:	d001      	beq.n	1297a <set_off_state+0x1c>
   12976:	428b      	cmp	r3, r1
   12978:	d107      	bne.n	1298a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1297a:	2301      	movs	r3, #1
   1297c:	6003      	str	r3, [r0, #0]
	int err = 0;
   1297e:	2000      	movs	r0, #0
	__asm__ volatile(
   12980:	f382 8811 	msr	BASEPRI, r2
   12984:	f3bf 8f6f 	isb	sy
}
   12988:	4770      	bx	lr
		err = -EPERM;
   1298a:	f04f 30ff 	mov.w	r0, #4294967295
   1298e:	e7f7      	b.n	12980 <set_off_state+0x22>

00012990 <set_starting_state>:
{
   12990:	b410      	push	{r4}
	__asm__ volatile(
   12992:	f04f 0320 	mov.w	r3, #32
   12996:	f3ef 8211 	mrs	r2, BASEPRI
   1299a:	f383 8812 	msr	BASEPRI_MAX, r3
   1299e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   129a2:	6803      	ldr	r3, [r0, #0]
   129a4:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   129a8:	f003 0307 	and.w	r3, r3, #7
   129ac:	2b01      	cmp	r3, #1
   129ae:	d009      	beq.n	129c4 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   129b0:	428c      	cmp	r4, r1
   129b2:	d00a      	beq.n	129ca <set_starting_state+0x3a>
		err = -EPERM;
   129b4:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   129b8:	f382 8811 	msr	BASEPRI, r2
   129bc:	f3bf 8f6f 	isb	sy
}
   129c0:	bc10      	pop	{r4}
   129c2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   129c4:	6001      	str	r1, [r0, #0]
	int err = 0;
   129c6:	2000      	movs	r0, #0
   129c8:	e7f6      	b.n	129b8 <set_starting_state+0x28>
		err = -EALREADY;
   129ca:	f06f 0077 	mvn.w	r0, #119	; 0x77
   129ce:	e7f3      	b.n	129b8 <set_starting_state+0x28>

000129d0 <set_on_state>:
	__asm__ volatile(
   129d0:	f04f 0320 	mov.w	r3, #32
   129d4:	f3ef 8211 	mrs	r2, BASEPRI
   129d8:	f383 8812 	msr	BASEPRI_MAX, r3
   129dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   129e0:	6803      	ldr	r3, [r0, #0]
   129e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   129e6:	f043 0302 	orr.w	r3, r3, #2
   129ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   129ec:	f382 8811 	msr	BASEPRI, r2
   129f0:	f3bf 8f6f 	isb	sy
}
   129f4:	4770      	bx	lr

000129f6 <clkstarted_handle>:
{
   129f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129f8:	4606      	mov	r6, r0
   129fa:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   129fc:	f7ff ff98 	bl	12930 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   12a00:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   12a02:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   12a04:	2300      	movs	r3, #0
   12a06:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   12a0a:	f7ff ffe1 	bl	129d0 <set_on_state>
	if (callback) {
   12a0e:	b11d      	cbz	r5, 12a18 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   12a10:	463a      	mov	r2, r7
   12a12:	4621      	mov	r1, r4
   12a14:	4630      	mov	r0, r6
   12a16:	47a8      	blx	r5
}
   12a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a1a <stop>:
{
   12a1a:	b570      	push	{r4, r5, r6, lr}
   12a1c:	4606      	mov	r6, r0
   12a1e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   12a20:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   12a22:	4621      	mov	r1, r4
   12a24:	f7ff ff84 	bl	12930 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   12a28:	4629      	mov	r1, r5
   12a2a:	3008      	adds	r0, #8
   12a2c:	f7ff ff97 	bl	1295e <set_off_state>
	if (err < 0) {
   12a30:	2800      	cmp	r0, #0
   12a32:	db06      	blt.n	12a42 <stop+0x28>
	get_sub_config(dev, type)->stop();
   12a34:	4621      	mov	r1, r4
   12a36:	4630      	mov	r0, r6
   12a38:	f7ff ff81 	bl	1293e <get_sub_config>
   12a3c:	6843      	ldr	r3, [r0, #4]
   12a3e:	4798      	blx	r3
	return 0;
   12a40:	2000      	movs	r0, #0
}
   12a42:	bd70      	pop	{r4, r5, r6, pc}

00012a44 <api_stop>:
{
   12a44:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   12a46:	2280      	movs	r2, #128	; 0x80
   12a48:	f7ff ffe7 	bl	12a1a <stop>
}
   12a4c:	bd08      	pop	{r3, pc}

00012a4e <async_start>:
{
   12a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a52:	4606      	mov	r6, r0
   12a54:	4690      	mov	r8, r2
   12a56:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   12a58:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   12a5a:	4629      	mov	r1, r5
   12a5c:	f7ff ff68 	bl	12930 <get_sub_data>
   12a60:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   12a62:	9906      	ldr	r1, [sp, #24]
   12a64:	3008      	adds	r0, #8
   12a66:	f7ff ff93 	bl	12990 <set_starting_state>
	if (err < 0) {
   12a6a:	2800      	cmp	r0, #0
   12a6c:	db09      	blt.n	12a82 <async_start+0x34>
	subdata->cb = cb;
   12a6e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   12a72:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   12a74:	4629      	mov	r1, r5
   12a76:	4630      	mov	r0, r6
   12a78:	f7ff ff61 	bl	1293e <get_sub_config>
   12a7c:	6803      	ldr	r3, [r0, #0]
   12a7e:	4798      	blx	r3
	return 0;
   12a80:	2000      	movs	r0, #0
}
   12a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012a86 <api_start>:
{
   12a86:	b510      	push	{r4, lr}
   12a88:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   12a8a:	2480      	movs	r4, #128	; 0x80
   12a8c:	9400      	str	r4, [sp, #0]
   12a8e:	f7ff ffde 	bl	12a4e <async_start>
}
   12a92:	b002      	add	sp, #8
   12a94:	bd10      	pop	{r4, pc}

00012a96 <onoff_started_callback>:
{
   12a96:	b510      	push	{r4, lr}
   12a98:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   12a9a:	b2c9      	uxtb	r1, r1
   12a9c:	f7ff ff53 	bl	12946 <get_onoff_manager>
	notify(mgr, 0);
   12aa0:	2100      	movs	r1, #0
   12aa2:	47a0      	blx	r4
}
   12aa4:	bd10      	pop	{r4, pc}

00012aa6 <hfclk_start>:
{
   12aa6:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12aa8:	2001      	movs	r0, #1
   12aaa:	f7f3 fa25 	bl	5ef8 <nrfx_clock_start>
}
   12aae:	bd08      	pop	{r3, pc}

00012ab0 <hfclkaudio_start>:
{
   12ab0:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   12ab2:	2003      	movs	r0, #3
   12ab4:	f7f3 fa20 	bl	5ef8 <nrfx_clock_start>
}
   12ab8:	bd08      	pop	{r3, pc}

00012aba <hfclk192m_start>:
{
   12aba:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   12abc:	2002      	movs	r0, #2
   12abe:	f7f3 fa1b 	bl	5ef8 <nrfx_clock_start>
}
   12ac2:	bd08      	pop	{r3, pc}

00012ac4 <lfclk_start>:
{
   12ac4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   12ac6:	2000      	movs	r0, #0
   12ac8:	f7f3 fa16 	bl	5ef8 <nrfx_clock_start>
}
   12acc:	bd08      	pop	{r3, pc}

00012ace <hfclk_stop>:
{
   12ace:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12ad0:	2001      	movs	r0, #1
   12ad2:	f7f3 fa6b 	bl	5fac <nrfx_clock_stop>
}
   12ad6:	bd08      	pop	{r3, pc}

00012ad8 <hfclkaudio_stop>:
{
   12ad8:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   12ada:	2003      	movs	r0, #3
   12adc:	f7f3 fa66 	bl	5fac <nrfx_clock_stop>
}
   12ae0:	bd08      	pop	{r3, pc}

00012ae2 <hfclk192m_stop>:
{
   12ae2:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   12ae4:	2002      	movs	r0, #2
   12ae6:	f7f3 fa61 	bl	5fac <nrfx_clock_stop>
}
   12aea:	bd08      	pop	{r3, pc}

00012aec <lfclk_stop>:
{
   12aec:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   12aee:	2000      	movs	r0, #0
   12af0:	f7f3 fa5c 	bl	5fac <nrfx_clock_stop>
}
   12af4:	bd08      	pop	{r3, pc}

00012af6 <blocking_start_callback>:
{
   12af6:	b508      	push	{r3, lr}
   12af8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   12afa:	f7fc fdeb 	bl	f6d4 <z_impl_k_sem_give>
}
   12afe:	bd08      	pop	{r3, pc}

00012b00 <debug_hook_out_nop>:
}
   12b00:	2000      	movs	r0, #0
   12b02:	4770      	bx	lr

00012b04 <gpio_nrfx_port_get_raw>:
	return port->config;
   12b04:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12b06:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   12b08:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   12b0a:	600b      	str	r3, [r1, #0]
}
   12b0c:	2000      	movs	r0, #0
   12b0e:	4770      	bx	lr

00012b10 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   12b10:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12b12:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   12b14:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   12b16:	4042      	eors	r2, r0
   12b18:	400a      	ands	r2, r1
   12b1a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   12b1c:	605a      	str	r2, [r3, #4]
}
   12b1e:	2000      	movs	r0, #0
   12b20:	4770      	bx	lr

00012b22 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   12b22:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12b24:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   12b26:	6099      	str	r1, [r3, #8]
}
   12b28:	2000      	movs	r0, #0
   12b2a:	4770      	bx	lr

00012b2c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   12b2c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12b2e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   12b30:	60d9      	str	r1, [r3, #12]
}
   12b32:	2000      	movs	r0, #0
   12b34:	4770      	bx	lr

00012b36 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   12b36:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12b38:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12b3a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   12b3c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   12b3e:	6053      	str	r3, [r2, #4]
}
   12b40:	2000      	movs	r0, #0
   12b42:	4770      	bx	lr

00012b44 <gpio_nrfx_manage_callback>:
{
   12b44:	b470      	push	{r4, r5, r6}
	return port->data;
   12b46:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   12b48:	1d05      	adds	r5, r0, #4
	return list->head;
   12b4a:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   12b4c:	b1db      	cbz	r3, 12b86 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   12b4e:	460e      	mov	r6, r1
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b50:	2400      	movs	r4, #0
   12b52:	e00a      	b.n	12b6a <gpio_nrfx_manage_callback+0x26>
	return node->next;
   12b54:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   12b56:	6043      	str	r3, [r0, #4]
	return list->tail;
   12b58:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   12b5a:	42a1      	cmp	r1, r4
   12b5c:	d10f      	bne.n	12b7e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12b5e:	606b      	str	r3, [r5, #4]
}
   12b60:	e00d      	b.n	12b7e <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   12b62:	606c      	str	r4, [r5, #4]
}
   12b64:	e00b      	b.n	12b7e <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b66:	461c      	mov	r4, r3
   12b68:	681b      	ldr	r3, [r3, #0]
   12b6a:	b15b      	cbz	r3, 12b84 <gpio_nrfx_manage_callback+0x40>
   12b6c:	429e      	cmp	r6, r3
   12b6e:	d1fa      	bne.n	12b66 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   12b70:	2c00      	cmp	r4, #0
   12b72:	d0ef      	beq.n	12b54 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   12b74:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   12b76:	6023      	str	r3, [r4, #0]
	return list->tail;
   12b78:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   12b7a:	4299      	cmp	r1, r3
   12b7c:	d0f1      	beq.n	12b62 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   12b7e:	2300      	movs	r3, #0
   12b80:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12b82:	e000      	b.n	12b86 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   12b84:	b152      	cbz	r2, 12b9c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   12b86:	b162      	cbz	r2, 12ba2 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   12b88:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   12b8a:	600b      	str	r3, [r1, #0]
	list->head = node;
   12b8c:	6041      	str	r1, [r0, #4]
	return list->tail;
   12b8e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   12b90:	b10b      	cbz	r3, 12b96 <gpio_nrfx_manage_callback+0x52>
	return 0;
   12b92:	2000      	movs	r0, #0
   12b94:	e006      	b.n	12ba4 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   12b96:	6069      	str	r1, [r5, #4]
   12b98:	2000      	movs	r0, #0
}
   12b9a:	e003      	b.n	12ba4 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   12b9c:	f06f 0015 	mvn.w	r0, #21
   12ba0:	e000      	b.n	12ba4 <gpio_nrfx_manage_callback+0x60>
	return 0;
   12ba2:	2000      	movs	r0, #0
}
   12ba4:	bc70      	pop	{r4, r5, r6}
   12ba6:	4770      	bx	lr

00012ba8 <endtx_isr>:
	return dev->config;
   12ba8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12baa:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   12bac:	f04f 0120 	mov.w	r1, #32
   12bb0:	f3ef 8211 	mrs	r2, BASEPRI
   12bb4:	f381 8812 	msr	BASEPRI_MAX, r1
   12bb8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bbc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   12bc0:	b131      	cbz	r1, 12bd0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12bc2:	2100      	movs	r1, #0
   12bc4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   12bc8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bcc:	2101      	movs	r1, #1
   12bce:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   12bd0:	f382 8811 	msr	BASEPRI, r2
   12bd4:	f3bf 8f6f 	isb	sy
}
   12bd8:	4770      	bx	lr

00012bda <uarte_nrfx_isr_int>:
{
   12bda:	b538      	push	{r3, r4, r5, lr}
   12bdc:	4604      	mov	r4, r0
	return dev->config;
   12bde:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12be0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12be2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   12be6:	f413 7f80 	tst.w	r3, #256	; 0x100
   12bea:	d003      	beq.n	12bf4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12bec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d139      	bne.n	12c68 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   12bf4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12bf6:	685b      	ldr	r3, [r3, #4]
   12bf8:	f013 0f10 	tst.w	r3, #16
   12bfc:	d01a      	beq.n	12c34 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   12bfe:	f04f 0320 	mov.w	r3, #32
   12c02:	f3ef 8211 	mrs	r2, BASEPRI
   12c06:	f383 8812 	msr	BASEPRI_MAX, r3
   12c0a:	f3bf 8f6f 	isb	sy
   12c0e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12c12:	b113      	cbz	r3, 12c1a <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12c14:	2300      	movs	r3, #0
   12c16:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   12c1a:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   12c1c:	68db      	ldr	r3, [r3, #12]
   12c1e:	b10b      	cbz	r3, 12c24 <uarte_nrfx_isr_int+0x4a>
   12c20:	691b      	ldr	r3, [r3, #16]
   12c22:	b91b      	cbnz	r3, 12c2c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   12c24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12c28:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   12c2c:	f382 8811 	msr	BASEPRI, r2
   12c30:	f3bf 8f6f 	isb	sy
	return dev->data;
   12c34:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   12c36:	68da      	ldr	r2, [r3, #12]
   12c38:	b1aa      	cbz	r2, 12c66 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12c3a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12c3e:	b121      	cbz	r1, 12c4a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   12c40:	2100      	movs	r1, #0
   12c42:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   12c44:	68da      	ldr	r2, [r3, #12]
   12c46:	7b92      	ldrb	r2, [r2, #14]
   12c48:	b98a      	cbnz	r2, 12c6e <uarte_nrfx_isr_int+0x94>
   12c4a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   12c4e:	b122      	cbz	r2, 12c5a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12c50:	2200      	movs	r2, #0
   12c52:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   12c56:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   12c5a:	68da      	ldr	r2, [r3, #12]
   12c5c:	6813      	ldr	r3, [r2, #0]
   12c5e:	b113      	cbz	r3, 12c66 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   12c60:	6851      	ldr	r1, [r2, #4]
   12c62:	4620      	mov	r0, r4
   12c64:	4798      	blx	r3
}
   12c66:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   12c68:	f7ff ff9e 	bl	12ba8 <endtx_isr>
   12c6c:	e7c2      	b.n	12bf4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   12c6e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   12c72:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   12c76:	68db      	ldr	r3, [r3, #12]
   12c78:	7399      	strb	r1, [r3, #14]
			return;
   12c7a:	e7f4      	b.n	12c66 <uarte_nrfx_isr_int+0x8c>

00012c7c <uarte_nrfx_configure>:
{
   12c7c:	b530      	push	{r4, r5, lr}
   12c7e:	b083      	sub	sp, #12
   12c80:	4605      	mov	r5, r0
   12c82:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   12c84:	794b      	ldrb	r3, [r1, #5]
   12c86:	2b01      	cmp	r3, #1
   12c88:	d006      	beq.n	12c98 <uarte_nrfx_configure+0x1c>
   12c8a:	2b03      	cmp	r3, #3
   12c8c:	d011      	beq.n	12cb2 <uarte_nrfx_configure+0x36>
   12c8e:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   12c92:	4610      	mov	r0, r2
   12c94:	b003      	add	sp, #12
   12c96:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   12c98:	2300      	movs	r3, #0
   12c9a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12c9e:	79a3      	ldrb	r3, [r4, #6]
   12ca0:	2b03      	cmp	r3, #3
   12ca2:	d14f      	bne.n	12d44 <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
   12ca4:	79e3      	ldrb	r3, [r4, #7]
   12ca6:	b143      	cbz	r3, 12cba <uarte_nrfx_configure+0x3e>
   12ca8:	2b01      	cmp	r3, #1
   12caa:	d015      	beq.n	12cd8 <uarte_nrfx_configure+0x5c>
   12cac:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12cb0:	e7ef      	b.n	12c92 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12cb2:	2310      	movs	r3, #16
   12cb4:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   12cb8:	e7f1      	b.n	12c9e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   12cba:	2300      	movs	r3, #0
   12cbc:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   12cc0:	2300      	movs	r3, #0
   12cc2:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   12cc6:	7923      	ldrb	r3, [r4, #4]
   12cc8:	2b01      	cmp	r3, #1
   12cca:	d033      	beq.n	12d34 <uarte_nrfx_configure+0xb8>
   12ccc:	2b02      	cmp	r3, #2
   12cce:	d02d      	beq.n	12d2c <uarte_nrfx_configure+0xb0>
   12cd0:	b173      	cbz	r3, 12cf0 <uarte_nrfx_configure+0x74>
   12cd2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12cd6:	e7dc      	b.n	12c92 <uarte_nrfx_configure+0x16>
	return dev->config;
   12cd8:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   12cda:	685b      	ldr	r3, [r3, #4]
   12cdc:	f003 0201 	and.w	r2, r3, #1
   12ce0:	f003 0302 	and.w	r3, r3, #2
   12ce4:	4313      	orrs	r3, r2
   12ce6:	d030      	beq.n	12d4a <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   12ce8:	2301      	movs	r3, #1
   12cea:	f88d 3000 	strb.w	r3, [sp]
		break;
   12cee:	e7e7      	b.n	12cc0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   12cf0:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12cf4:	6821      	ldr	r1, [r4, #0]
   12cf6:	4628      	mov	r0, r5
   12cf8:	f7f2 fbac 	bl	5454 <baudrate_set>
   12cfc:	4602      	mov	r2, r0
   12cfe:	bb38      	cbnz	r0, 12d50 <uarte_nrfx_configure+0xd4>
	return dev->config;
   12d00:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   12d02:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12d04:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   12d08:	f89d 0002 	ldrb.w	r0, [sp, #2]
   12d0c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   12d0e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   12d12:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   12d14:	f89d 0000 	ldrb.w	r0, [sp]
   12d18:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12d1a:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   12d1e:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   12d20:	3304      	adds	r3, #4
   12d22:	e894 0003 	ldmia.w	r4, {r0, r1}
   12d26:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   12d2a:	e7b2      	b.n	12c92 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12d2c:	230e      	movs	r3, #14
   12d2e:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   12d32:	e7df      	b.n	12cf4 <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12d34:	230e      	movs	r3, #14
   12d36:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   12d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
   12d3e:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   12d42:	e7d7      	b.n	12cf4 <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
   12d44:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12d48:	e7a3      	b.n	12c92 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   12d4a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12d4e:	e7a0      	b.n	12c92 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   12d50:	f06f 0285 	mvn.w	r2, #133	; 0x85
   12d54:	e79d      	b.n	12c92 <uarte_nrfx_configure+0x16>

00012d56 <uarte_nrfx_config_get>:
{
   12d56:	460b      	mov	r3, r1
	return dev->data;
   12d58:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   12d5a:	6891      	ldr	r1, [r2, #8]
   12d5c:	6850      	ldr	r0, [r2, #4]
   12d5e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12d62:	2000      	movs	r0, #0
   12d64:	4770      	bx	lr

00012d66 <uarte_nrfx_err_check>:
	return dev->config;
   12d66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d68:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   12d6a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12d6e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12d72:	4770      	bx	lr

00012d74 <is_tx_ready>:
	return dev->config;
   12d74:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d76:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   12d78:	685b      	ldr	r3, [r3, #4]
   12d7a:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12d7e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   12d82:	b929      	cbnz	r1, 12d90 <is_tx_ready+0x1c>
   12d84:	b933      	cbnz	r3, 12d94 <is_tx_ready+0x20>
   12d86:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   12d8a:	b92b      	cbnz	r3, 12d98 <is_tx_ready+0x24>
   12d8c:	2000      	movs	r0, #0
   12d8e:	4770      	bx	lr
   12d90:	2001      	movs	r0, #1
   12d92:	4770      	bx	lr
   12d94:	2000      	movs	r0, #0
   12d96:	4770      	bx	lr
   12d98:	2001      	movs	r0, #1
}
   12d9a:	4770      	bx	lr

00012d9c <uarte_enable>:
	return dev->config;
   12d9c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12d9e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   12da0:	2208      	movs	r2, #8
   12da2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   12da6:	4770      	bx	lr

00012da8 <tx_start>:
{
   12da8:	b510      	push	{r4, lr}
	return dev->config;
   12daa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12dac:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12dae:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12db2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12db6:	2300      	movs	r3, #0
   12db8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12dbc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   12dc0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   12dc4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   12dc8:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12dca:	685b      	ldr	r3, [r3, #4]
   12dcc:	f013 0f10 	tst.w	r3, #16
   12dd0:	d102      	bne.n	12dd8 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12dd2:	2301      	movs	r3, #1
   12dd4:	60a3      	str	r3, [r4, #8]
}
   12dd6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   12dd8:	2101      	movs	r1, #1
   12dda:	f7ff ffdf 	bl	12d9c <uarte_enable>
    p_reg->INTENSET = mask;
   12dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   12de2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   12de6:	e7f4      	b.n	12dd2 <tx_start+0x2a>

00012de8 <uarte_nrfx_poll_in>:
{
   12de8:	b410      	push	{r4}
	return dev->data;
   12dea:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   12dec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12dee:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12df0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12df4:	b152      	cbz	r2, 12e0c <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   12df6:	7d62      	ldrb	r2, [r4, #21]
   12df8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12dfa:	2000      	movs	r0, #0
   12dfc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   12e00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12e04:	2201      	movs	r2, #1
   12e06:	601a      	str	r2, [r3, #0]
}
   12e08:	bc10      	pop	{r4}
   12e0a:	4770      	bx	lr
		return -1;
   12e0c:	f04f 30ff 	mov.w	r0, #4294967295
   12e10:	e7fa      	b.n	12e08 <uarte_nrfx_poll_in+0x20>

00012e12 <uarte_nrfx_fifo_fill>:
{
   12e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e16:	4680      	mov	r8, r0
	return dev->data;
   12e18:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   12e1a:	68fb      	ldr	r3, [r7, #12]
   12e1c:	899e      	ldrh	r6, [r3, #12]
   12e1e:	4296      	cmp	r6, r2
   12e20:	bfa8      	it	ge
   12e22:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   12e24:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12e26:	2201      	movs	r2, #1
   12e28:	e8d3 0fef 	ldaex	r0, [r3]
   12e2c:	2800      	cmp	r0, #0
   12e2e:	d103      	bne.n	12e38 <uarte_nrfx_fifo_fill+0x26>
   12e30:	e8c3 2fe4 	stlex	r4, r2, [r3]
   12e34:	2c00      	cmp	r4, #0
   12e36:	d1f7      	bne.n	12e28 <uarte_nrfx_fifo_fill+0x16>
   12e38:	d101      	bne.n	12e3e <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   12e3a:	2300      	movs	r3, #0
   12e3c:	e006      	b.n	12e4c <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   12e3e:	2600      	movs	r6, #0
   12e40:	e019      	b.n	12e76 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   12e42:	68fc      	ldr	r4, [r7, #12]
   12e44:	68a4      	ldr	r4, [r4, #8]
   12e46:	5ccd      	ldrb	r5, [r1, r3]
   12e48:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   12e4a:	3301      	adds	r3, #1
   12e4c:	42b3      	cmp	r3, r6
   12e4e:	dbf8      	blt.n	12e42 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   12e50:	f04f 0320 	mov.w	r3, #32
   12e54:	f3ef 8411 	mrs	r4, BASEPRI
   12e58:	f383 8812 	msr	BASEPRI_MAX, r3
   12e5c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   12e60:	4640      	mov	r0, r8
   12e62:	f7ff ff87 	bl	12d74 <is_tx_ready>
   12e66:	b948      	cbnz	r0, 12e7c <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   12e68:	68fb      	ldr	r3, [r7, #12]
   12e6a:	2600      	movs	r6, #0
   12e6c:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   12e6e:	f384 8811 	msr	BASEPRI, r4
   12e72:	f3bf 8f6f 	isb	sy
}
   12e76:	4630      	mov	r0, r6
   12e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   12e7c:	68fb      	ldr	r3, [r7, #12]
   12e7e:	4632      	mov	r2, r6
   12e80:	6899      	ldr	r1, [r3, #8]
   12e82:	4640      	mov	r0, r8
   12e84:	f7ff ff90 	bl	12da8 <tx_start>
   12e88:	e7f1      	b.n	12e6e <uarte_nrfx_fifo_fill+0x5c>

00012e8a <uarte_nrfx_fifo_read>:
	return dev->config;
   12e8a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12e8c:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   12e8e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12e90:	2a00      	cmp	r2, #0
   12e92:	dd0c      	ble.n	12eae <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12e94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12e98:	b15a      	cbz	r2, 12eb2 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12e9a:	2200      	movs	r2, #0
   12e9c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12ea0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   12ea4:	7d42      	ldrb	r2, [r0, #21]
   12ea6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12ea8:	2001      	movs	r0, #1
   12eaa:	6018      	str	r0, [r3, #0]
}
   12eac:	4770      	bx	lr
	int num_rx = 0;
   12eae:	2000      	movs	r0, #0
   12eb0:	4770      	bx	lr
   12eb2:	2000      	movs	r0, #0
}
   12eb4:	4770      	bx	lr

00012eb6 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   12eb6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12eb8:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   12eba:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   12ebc:	f04f 0020 	mov.w	r0, #32
   12ec0:	f3ef 8311 	mrs	r3, BASEPRI
   12ec4:	f380 8812 	msr	BASEPRI_MAX, r0
   12ec8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   12ecc:	68c9      	ldr	r1, [r1, #12]
   12ece:	2000      	movs	r0, #0
   12ed0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   12ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12ed6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   12eda:	f383 8811 	msr	BASEPRI, r3
   12ede:	f3bf 8f6f 	isb	sy
}
   12ee2:	4770      	bx	lr

00012ee4 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   12ee4:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   12ee6:	68db      	ldr	r3, [r3, #12]
   12ee8:	2201      	movs	r2, #1
   12eea:	739a      	strb	r2, [r3, #14]
}
   12eec:	4770      	bx	lr

00012eee <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   12eee:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12ef0:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   12ef2:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   12ef4:	68db      	ldr	r3, [r3, #12]
   12ef6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12ef8:	b94a      	cbnz	r2, 12f0e <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12efa:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   12efe:	b15a      	cbz	r2, 12f18 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   12f00:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12f04:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   12f08:	d008      	beq.n	12f1c <uarte_nrfx_irq_tx_ready_complete+0x2e>
   12f0a:	2001      	movs	r0, #1
   12f0c:	e000      	b.n	12f10 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12f0e:	2000      	movs	r0, #0
	if (ready) {
   12f10:	b108      	cbz	r0, 12f16 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   12f12:	2200      	movs	r2, #0
   12f14:	611a      	str	r2, [r3, #16]
}
   12f16:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   12f18:	2000      	movs	r0, #0
   12f1a:	e7f9      	b.n	12f10 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12f1c:	2000      	movs	r0, #0
   12f1e:	e7f7      	b.n	12f10 <uarte_nrfx_irq_tx_ready_complete+0x22>

00012f20 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   12f20:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f22:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12f24:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   12f28:	3800      	subs	r0, #0
   12f2a:	bf18      	it	ne
   12f2c:	2001      	movne	r0, #1
   12f2e:	4770      	bx	lr

00012f30 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   12f30:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12f34:	2210      	movs	r2, #16
   12f36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12f3a:	4770      	bx	lr

00012f3c <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   12f3c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f3e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12f40:	2210      	movs	r2, #16
   12f42:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12f46:	4770      	bx	lr

00012f48 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   12f48:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f4a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   12f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   12f50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12f54:	4770      	bx	lr

00012f56 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   12f56:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f58:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   12f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
   12f5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12f62:	4770      	bx	lr

00012f64 <uarte_nrfx_irq_is_pending>:
{
   12f64:	b538      	push	{r3, r4, r5, lr}
   12f66:	4604      	mov	r4, r0
	return dev->config;
   12f68:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12f6a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   12f6c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   12f70:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   12f74:	d106      	bne.n	12f84 <uarte_nrfx_irq_is_pending+0x20>
   12f76:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   12f7a:	f013 0f10 	tst.w	r3, #16
   12f7e:	d107      	bne.n	12f90 <uarte_nrfx_irq_is_pending+0x2c>
   12f80:	2000      	movs	r0, #0
}
   12f82:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   12f84:	f7ff ffb3 	bl	12eee <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   12f88:	2800      	cmp	r0, #0
   12f8a:	d0f4      	beq.n	12f76 <uarte_nrfx_irq_is_pending+0x12>
		||
   12f8c:	2001      	movs	r0, #1
   12f8e:	e7f8      	b.n	12f82 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   12f90:	4620      	mov	r0, r4
   12f92:	f7ff ffc5 	bl	12f20 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   12f96:	2800      	cmp	r0, #0
   12f98:	d0f3      	beq.n	12f82 <uarte_nrfx_irq_is_pending+0x1e>
		||
   12f9a:	2001      	movs	r0, #1
   12f9c:	e7f1      	b.n	12f82 <uarte_nrfx_irq_is_pending+0x1e>

00012f9e <uarte_nrfx_irq_update>:
}
   12f9e:	2001      	movs	r0, #1
   12fa0:	4770      	bx	lr

00012fa2 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   12fa2:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   12fa4:	68d8      	ldr	r0, [r3, #12]
   12fa6:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   12fa8:	68db      	ldr	r3, [r3, #12]
   12faa:	605a      	str	r2, [r3, #4]
}
   12fac:	4770      	bx	lr

00012fae <wait_tx_ready>:
{
   12fae:	b570      	push	{r4, r5, r6, lr}
   12fb0:	4606      	mov	r6, r0
   12fb2:	e014      	b.n	12fde <wait_tx_ready+0x30>
		if (res) {
   12fb4:	b17d      	cbz	r5, 12fd6 <wait_tx_ready+0x28>
	__asm__ volatile(
   12fb6:	f04f 0320 	mov.w	r3, #32
   12fba:	f3ef 8411 	mrs	r4, BASEPRI
   12fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   12fc2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12fc6:	4630      	mov	r0, r6
   12fc8:	f7ff fed4 	bl	12d74 <is_tx_ready>
   12fcc:	b9a0      	cbnz	r0, 12ff8 <wait_tx_ready+0x4a>
	__asm__ volatile(
   12fce:	f384 8811 	msr	BASEPRI, r4
   12fd2:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   12fd6:	2021      	movs	r0, #33	; 0x21
   12fd8:	2100      	movs	r1, #0
   12fda:	f7fc ff5b 	bl	fe94 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12fde:	2464      	movs	r4, #100	; 0x64
   12fe0:	4630      	mov	r0, r6
   12fe2:	f7ff fec7 	bl	12d74 <is_tx_ready>
   12fe6:	4605      	mov	r5, r0
   12fe8:	2800      	cmp	r0, #0
   12fea:	d1e3      	bne.n	12fb4 <wait_tx_ready+0x6>
   12fec:	2001      	movs	r0, #1
   12fee:	f000 f8a1 	bl	13134 <nrfx_busy_wait>
   12ff2:	3c01      	subs	r4, #1
   12ff4:	d1f4      	bne.n	12fe0 <wait_tx_ready+0x32>
   12ff6:	e7dd      	b.n	12fb4 <wait_tx_ready+0x6>
}
   12ff8:	4620      	mov	r0, r4
   12ffa:	bd70      	pop	{r4, r5, r6, pc}

00012ffc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12ffc:	b510      	push	{r4, lr}
   12ffe:	4604      	mov	r4, r0
   13000:	2200      	movs	r2, #0
   13002:	2101      	movs	r1, #1
   13004:	2008      	movs	r0, #8
   13006:	f7f1 f8cb 	bl	41a0 <z_arm_irq_priority_set>
   1300a:	2008      	movs	r0, #8
   1300c:	f7f1 f8aa 	bl	4164 <arch_irq_enable>
   13010:	2101      	movs	r1, #1
   13012:	4620      	mov	r0, r4
   13014:	f7f2 fb1e 	bl	5654 <uarte_instance_init>
   13018:	bd10      	pop	{r4, pc}

0001301a <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1301a:	4770      	bx	lr

0001301c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1301c:	4770      	bx	lr

0001301e <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   1301e:	4770      	bx	lr

00013020 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   13020:	1a40      	subs	r0, r0, r1
}
   13022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13026:	4770      	bx	lr

00013028 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13028:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1302c:	009b      	lsls	r3, r3, #2
   1302e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13030:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   13034:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   13038:	2200      	movs	r2, #0
   1303a:	601a      	str	r2, [r3, #0]
   1303c:	681b      	ldr	r3, [r3, #0]
}
   1303e:	4770      	bx	lr

00013040 <absolute_time_to_cc>:
}
   13040:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13044:	4770      	bx	lr

00013046 <full_int_lock>:
	__asm__ volatile(
   13046:	f04f 0320 	mov.w	r3, #32
   1304a:	f3ef 8011 	mrs	r0, BASEPRI
   1304e:	f383 8812 	msr	BASEPRI_MAX, r3
   13052:	f3bf 8f6f 	isb	sy
}
   13056:	4770      	bx	lr

00013058 <full_int_unlock>:
	__asm__ volatile(
   13058:	f380 8811 	msr	BASEPRI, r0
   1305c:	f3bf 8f6f 	isb	sy
}
   13060:	4770      	bx	lr

00013062 <set_absolute_alarm>:
{
   13062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13064:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13066:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1306a:	f7f2 fbc5 	bl	57f8 <get_comparator>
   1306e:	4607      	mov	r7, r0
   13070:	e019      	b.n	130a6 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   13072:	2013      	movs	r0, #19
   13074:	f003 f86b 	bl	1614e <z_impl_k_busy_wait>
}
   13078:	e022      	b.n	130c0 <set_absolute_alarm+0x5e>
		event_clear(chan);
   1307a:	4630      	mov	r0, r6
   1307c:	f7ff ffd4 	bl	13028 <event_clear>
		event_enable(chan);
   13080:	4630      	mov	r0, r6
   13082:	f7f2 fbc1 	bl	5808 <event_enable>
		set_comparator(chan, cc_val);
   13086:	4629      	mov	r1, r5
   13088:	4630      	mov	r0, r6
   1308a:	f7f2 fbab 	bl	57e4 <set_comparator>
		now2 = counter();
   1308e:	f7f2 fbcf 	bl	5830 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13092:	4284      	cmp	r4, r0
   13094:	d01e      	beq.n	130d4 <set_absolute_alarm+0x72>
   13096:	1c81      	adds	r1, r0, #2
   13098:	4628      	mov	r0, r5
   1309a:	f7ff ffc1 	bl	13020 <counter_sub>
	} while ((now2 != now) &&
   1309e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   130a2:	d917      	bls.n	130d4 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   130a4:	462f      	mov	r7, r5
		now = counter();
   130a6:	f7f2 fbc3 	bl	5830 <counter>
   130aa:	4604      	mov	r4, r0
		set_comparator(chan, now);
   130ac:	4601      	mov	r1, r0
   130ae:	4630      	mov	r0, r6
   130b0:	f7f2 fb98 	bl	57e4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   130b4:	4621      	mov	r1, r4
   130b6:	4638      	mov	r0, r7
   130b8:	f7ff ffb2 	bl	13020 <counter_sub>
   130bc:	2801      	cmp	r0, #1
   130be:	d0d8      	beq.n	13072 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   130c0:	1ca7      	adds	r7, r4, #2
   130c2:	4639      	mov	r1, r7
   130c4:	4628      	mov	r0, r5
   130c6:	f7ff ffab 	bl	13020 <counter_sub>
   130ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   130ce:	d9d4      	bls.n	1307a <set_absolute_alarm+0x18>
			cc_val = now + 2;
   130d0:	463d      	mov	r5, r7
   130d2:	e7d2      	b.n	1307a <set_absolute_alarm+0x18>
}
   130d4:	4628      	mov	r0, r5
   130d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000130d8 <compare_set>:
{
   130d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   130da:	b083      	sub	sp, #12
   130dc:	4604      	mov	r4, r0
   130de:	4617      	mov	r7, r2
   130e0:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   130e2:	f7f2 fbab 	bl	583c <compare_int_lock>
   130e6:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   130e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   130ea:	9301      	str	r3, [sp, #4]
   130ec:	9b08      	ldr	r3, [sp, #32]
   130ee:	9300      	str	r3, [sp, #0]
   130f0:	463a      	mov	r2, r7
   130f2:	462b      	mov	r3, r5
   130f4:	4620      	mov	r0, r4
   130f6:	f7f2 fc7f 	bl	59f8 <compare_set_nolocks>
   130fa:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   130fc:	4631      	mov	r1, r6
   130fe:	4620      	mov	r0, r4
   13100:	f7f2 fbf6 	bl	58f0 <compare_int_unlock>
}
   13104:	4628      	mov	r0, r5
   13106:	b003      	add	sp, #12
   13108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001310a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1310a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1310c:	2000      	movs	r0, #0
   1310e:	f7f1 fa9b 	bl	4648 <sys_arch_reboot>

00013112 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   13112:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   13114:	f7fd f8c6 	bl	102a4 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   13118:	bd08      	pop	{r3, pc}

0001311a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1311a:	b510      	push	{r4, lr}
   1311c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1311e:	f7f0 ff19 	bl	3f54 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   13122:	f7f0 ffed 	bl	4100 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   13126:	4620      	mov	r0, r4
   13128:	f7ff fff3 	bl	13112 <hw_cc3xx_init_internal>
	return res;
}
   1312c:	bd10      	pop	{r4, pc}

0001312e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1312e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   13130:	4780      	blx	r0
}
   13132:	bd08      	pop	{r3, pc}

00013134 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   13134:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   13136:	f003 f80a 	bl	1614e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1313a:	bd08      	pop	{r3, pc}

0001313c <nrfx_clock_enable>:
{
   1313c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1313e:	2005      	movs	r0, #5
   13140:	f7f1 f820 	bl	4184 <arch_irq_is_enabled>
   13144:	b138      	cbz	r0, 13156 <nrfx_clock_enable+0x1a>
    p_reg->HFCLKSRC = (uint32_t)(source);
   13146:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1314a:	2201      	movs	r2, #1
   1314c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   13150:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
   13154:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13156:	2005      	movs	r0, #5
   13158:	f7f1 f804 	bl	4164 <arch_irq_enable>
   1315c:	e7f3      	b.n	13146 <nrfx_clock_enable+0xa>

0001315e <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1315e:	2301      	movs	r3, #1
   13160:	4083      	lsls	r3, r0
   13162:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   13166:	bf14      	ite	ne
   13168:	2001      	movne	r0, #1
   1316a:	2000      	moveq	r0, #0
   1316c:	4770      	bx	lr

0001316e <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   1316e:	4770      	bx	lr

00013170 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
   13170:	6903      	ldr	r3, [r0, #16]
   13172:	6183      	str	r3, [r0, #24]
   13174:	4770      	bx	lr

00013176 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   13176:	b510      	push	{r4, lr}
   13178:	4604      	mov	r4, r0
   1317a:	f002 fff7 	bl	1616c <_ZdlPv>
   1317e:	4620      	mov	r0, r4
   13180:	bd10      	pop	{r4, pc}

00013182 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   13182:	b510      	push	{r4, lr}
   13184:	4604      	mov	r4, r0
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   13186:	4413      	add	r3, r2
   13188:	f7f3 f9cc 	bl	6524 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
   1318c:	4620      	mov	r0, r4
   1318e:	bd10      	pop	{r4, pc}

00013190 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
   13190:	6880      	ldr	r0, [r0, #8]
   13192:	4770      	bx	lr

00013194 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
   13194:	b570      	push	{r4, r5, r6, lr}
   13196:	4604      	mov	r4, r0
   13198:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
   1319a:	6980      	ldr	r0, [r0, #24]
   1319c:	f000 f823 	bl	131e6 <_ZN6tflite14AlignPointerUpEPhj>
   131a0:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
   131a2:	4631      	mov	r1, r6
   131a4:	6960      	ldr	r0, [r4, #20]
   131a6:	f000 f825 	bl	131f4 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
   131aa:	1b40      	subs	r0, r0, r5
   131ac:	bd70      	pop	{r4, r5, r6, pc}

000131ae <_ZN6tflite18MicroErrorReporterD1Ev>:
 public:
  ~MicroErrorReporter() override {}
   131ae:	4770      	bx	lr

000131b0 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
   131b0:	b508      	push	{r3, lr}
   131b2:	4608      	mov	r0, r1
  Log(format, args);
   131b4:	4611      	mov	r1, r2
   131b6:	f7f3 f9fb 	bl	65b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
}
   131ba:	2000      	movs	r0, #0
   131bc:	bd08      	pop	{r3, pc}

000131be <_ZN6tflite18MicroErrorReporterD0Ev>:
   131be:	b510      	push	{r4, lr}
   131c0:	4604      	mov	r4, r0
   131c2:	f002 ffd3 	bl	1616c <_ZdlPv>
   131c6:	4620      	mov	r0, r4
   131c8:	bd10      	pop	{r4, pc}

000131ca <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
   131ca:	b40f      	push	{r0, r1, r2, r3}
   131cc:	b500      	push	{lr}
   131ce:	b083      	sub	sp, #12
   131d0:	a904      	add	r1, sp, #16
   131d2:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, format);
   131d6:	9101      	str	r1, [sp, #4]
  Log(format, args);
   131d8:	f7f3 f9ea 	bl	65b0 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
}
   131dc:	b003      	add	sp, #12
   131de:	f85d eb04 	ldr.w	lr, [sp], #4
   131e2:	b004      	add	sp, #16
   131e4:	4770      	bx	lr

000131e6 <_ZN6tflite14AlignPointerUpEPhj>:
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   131e6:	4408      	add	r0, r1
   131e8:	3801      	subs	r0, #1
   131ea:	fbb0 f0f1 	udiv	r0, r0, r1
}
   131ee:	fb01 f000 	mul.w	r0, r1, r0
   131f2:	4770      	bx	lr

000131f4 <_ZN6tflite16AlignPointerDownEPhj>:
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   131f4:	fbb0 f0f1 	udiv	r0, r0, r1
}
   131f8:	fb01 f000 	mul.w	r0, r1, r0
   131fc:	4770      	bx	lr

000131fe <_ZN6tflite11AlignSizeUpEjj>:
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   131fe:	4408      	add	r0, r1
   13200:	3801      	subs	r0, #1
   13202:	fbb0 f0f1 	udiv	r0, r0, r1
}
   13206:	fb01 f000 	mul.w	r0, r1, r0
   1320a:	4770      	bx	lr

0001320c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:
  switch (type) {
   1320c:	3801      	subs	r0, #1
   1320e:	280f      	cmp	r0, #15
   13210:	d83d      	bhi.n	1328e <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x82>
   13212:	e8df f000 	tbb	[pc, r0]
   13216:	180c      	.short	0x180c
   13218:	303c2820 	.word	0x303c2820
   1321c:	08243414 	.word	0x08243414
   13220:	3c2c3810 	.word	0x3c2c3810
   13224:	1c3c      	.short	0x1c3c
      *size = sizeof(int16_t);
   13226:	2302      	movs	r3, #2
   13228:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1322a:	2000      	movs	r0, #0
      break;
   1322c:	4770      	bx	lr
      *size = sizeof(float);
   1322e:	2304      	movs	r3, #4
   13230:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13232:	2000      	movs	r0, #0
      break;
   13234:	4770      	bx	lr
      *size = sizeof(double);
   13236:	2308      	movs	r3, #8
   13238:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1323a:	2000      	movs	r0, #0
      break;
   1323c:	4770      	bx	lr
      *size = sizeof(int16_t);
   1323e:	2302      	movs	r3, #2
   13240:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13242:	2000      	movs	r0, #0
      break;
   13244:	4770      	bx	lr
      *size = sizeof(int32_t);
   13246:	2304      	movs	r3, #4
   13248:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1324a:	2000      	movs	r0, #0
      break;
   1324c:	4770      	bx	lr
      *size = sizeof(uint32_t);
   1324e:	2304      	movs	r3, #4
   13250:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13252:	2000      	movs	r0, #0
      break;
   13254:	4770      	bx	lr
      *size = sizeof(uint8_t);
   13256:	2301      	movs	r3, #1
   13258:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1325a:	2000      	movs	r0, #0
      break;
   1325c:	4770      	bx	lr
      *size = sizeof(int8_t);
   1325e:	2301      	movs	r3, #1
   13260:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13262:	2000      	movs	r0, #0
      break;
   13264:	4770      	bx	lr
      *size = sizeof(int64_t);
   13266:	2308      	movs	r3, #8
   13268:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1326a:	2000      	movs	r0, #0
      break;
   1326c:	4770      	bx	lr
      *size = sizeof(uint64_t);
   1326e:	2308      	movs	r3, #8
   13270:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13272:	2000      	movs	r0, #0
      break;
   13274:	4770      	bx	lr
      *size = sizeof(bool);
   13276:	2301      	movs	r3, #1
   13278:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1327a:	2000      	movs	r0, #0
      break;
   1327c:	4770      	bx	lr
      *size = sizeof(float) * 2;
   1327e:	2308      	movs	r3, #8
   13280:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   13282:	2000      	movs	r0, #0
      break;
   13284:	4770      	bx	lr
      *size = sizeof(double) * 2;
   13286:	2310      	movs	r3, #16
   13288:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
   1328a:	2000      	movs	r0, #0
      break;
   1328c:	4770      	bx	lr
  return kTfLiteOk;
   1328e:	2001      	movs	r0, #1
}
   13290:	4770      	bx	lr

00013292 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
   13292:	b530      	push	{r4, r5, lr}
   13294:	b083      	sub	sp, #12
  TFLITE_DCHECK(out_bytes != nullptr);
   13296:	b129      	cbz	r1, 132a4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x12>
   13298:	460d      	mov	r5, r1

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
   1329a:	6842      	ldr	r2, [r0, #4]
   1329c:	b1c2      	cbz	r2, 132d0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   1329e:	2300      	movs	r3, #0
  int element_count = 1;
   132a0:	2401      	movs	r4, #1
   132a2:	e007      	b.n	132b4 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  TFLITE_DCHECK(out_bytes != nullptr);
   132a4:	f002 ff79 	bl	1619a <abort>
      element_count *= eval_tensor->dims->data[n];
   132a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   132ac:	6849      	ldr	r1, [r1, #4]
   132ae:	fb01 f404 	mul.w	r4, r1, r4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
   132b2:	3301      	adds	r3, #1
   132b4:	6811      	ldr	r1, [r2, #0]
   132b6:	4299      	cmp	r1, r3
   132b8:	dcf6      	bgt.n	132a8 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
   132ba:	a901      	add	r1, sp, #4
   132bc:	7a00      	ldrb	r0, [r0, #8]
   132be:	f7ff ffa5 	bl	1320c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   132c2:	b918      	cbnz	r0, 132cc <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3a>
  *out_bytes = element_count * type_size;
   132c4:	9b01      	ldr	r3, [sp, #4]
   132c6:	fb03 f404 	mul.w	r4, r3, r4
   132ca:	602c      	str	r4, [r5, #0]
  return kTfLiteOk;
}
   132cc:	b003      	add	sp, #12
   132ce:	bd30      	pop	{r4, r5, pc}
  int element_count = 1;
   132d0:	2401      	movs	r4, #1
   132d2:	e7f2      	b.n	132ba <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x28>

000132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
   132d4:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   132d6:	6800      	ldr	r0, [r0, #0]
   132d8:	f7fe fddd 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   132dc:	bd08      	pop	{r3, pc}

000132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>:
}
   132de:	4770      	bx	lr

000132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>:
T ReadScalar(const void *p) {
   132e0:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   132e2:	6800      	ldr	r0, [r0, #0]
   132e4:	f7ff fffb 	bl	132de <_ZN11flatbuffers12EndianScalarIiEET_S1_>
}
   132e8:	bd08      	pop	{r3, pc}

000132ea <_ZN11flatbuffers12EndianScalarItEET_S1_>:
}
   132ea:	4770      	bx	lr

000132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>:
T ReadScalar(const void *p) {
   132ec:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   132ee:	8800      	ldrh	r0, [r0, #0]
   132f0:	f7ff fffb 	bl	132ea <_ZN11flatbuffers12EndianScalarItEET_S1_>
}
   132f4:	bd08      	pop	{r3, pc}

000132f6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
}
   132f6:	4770      	bx	lr

000132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
   132f8:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   132fa:	f990 0000 	ldrsb.w	r0, [r0]
   132fe:	f7ff fffa 	bl	132f6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
}
   13302:	bd08      	pop	{r3, pc}

00013304 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
}
   13304:	4770      	bx	lr

00013306 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:
  char* p2 = end - 1;
   13306:	3901      	subs	r1, #1
  char* p1 = start;
   13308:	4603      	mov	r3, r0
  while (p1 < p2) {
   1330a:	4288      	cmp	r0, r1
   1330c:	d20a      	bcs.n	13324 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x1e>
char* ReverseStringInPlace(char* start, char* end) {
   1330e:	b410      	push	{r4}
    char tmp = *p1;
   13310:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
   13312:	780c      	ldrb	r4, [r1, #0]
   13314:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
   13318:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
   1331c:	428b      	cmp	r3, r1
   1331e:	d3f7      	bcc.n	13310 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0xa>
}
   13320:	bc10      	pop	{r4}
   13322:	4770      	bx	lr
   13324:	4770      	bx	lr

00013326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   13326:	b410      	push	{r4}
   13328:	4604      	mov	r4, r0
  while (*current != 0) {
   1332a:	7803      	ldrb	r3, [r0, #0]
   1332c:	b10b      	cbz	r3, 13332 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xc>
    ++current;
   1332e:	3001      	adds	r0, #1
  while (*current != 0) {
   13330:	e7fb      	b.n	1332a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x4>
  char* current_end = main + (main_max_length - 1);
   13332:	3901      	subs	r1, #1
   13334:	4421      	add	r1, r4
  while ((*to_append != 0) && (current < current_end)) {
   13336:	7813      	ldrb	r3, [r2, #0]
   13338:	b12b      	cbz	r3, 13346 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
   1333a:	4288      	cmp	r0, r1
   1333c:	d203      	bcs.n	13346 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    *current = *to_append;
   1333e:	f800 3b01 	strb.w	r3, [r0], #1
    ++to_append;
   13342:	3201      	adds	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   13344:	e7f7      	b.n	13336 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  *current = 0;
   13346:	2300      	movs	r3, #0
   13348:	7003      	strb	r3, [r0, #0]
}
   1334a:	bc10      	pop	{r4}
   1334c:	4770      	bx	lr

0001334e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   1334e:	b538      	push	{r3, r4, r5, lr}
   13350:	4605      	mov	r5, r0
   13352:	4608      	mov	r0, r1
   13354:	460c      	mov	r4, r1
   13356:	e008      	b.n	1336a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1c>
      character = '0' + digit;
   13358:	3330      	adds	r3, #48	; 0x30
   1335a:	b2db      	uxtb	r3, r3
    *buffer++ = character;
   1335c:	f804 3b01 	strb.w	r3, [r4], #1
    i /= base;
   13360:	fbb5 f3f2 	udiv	r3, r5, r2
  } while (i > 0);
   13364:	42aa      	cmp	r2, r5
   13366:	d809      	bhi.n	1337c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    i /= base;
   13368:	461d      	mov	r5, r3
    int32_t digit = i % base;
   1336a:	fbb5 f3f2 	udiv	r3, r5, r2
   1336e:	fb02 5313 	mls	r3, r2, r3, r5
    if (digit < 10) {
   13372:	2b09      	cmp	r3, #9
   13374:	ddf0      	ble.n	13358 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xa>
      character = 'a' + (digit - 10);
   13376:	3357      	adds	r3, #87	; 0x57
   13378:	b2db      	uxtb	r3, r3
   1337a:	e7ef      	b.n	1335c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0xe>
  *buffer = 0;
   1337c:	2300      	movs	r3, #0
   1337e:	7023      	strb	r3, [r4, #0]
  ReverseStringInPlace(start, buffer);
   13380:	4621      	mov	r1, r4
   13382:	f7ff ffc0 	bl	13306 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
}
   13386:	4620      	mov	r0, r4
   13388:	bd38      	pop	{r3, r4, r5, pc}

0001338a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>:
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
   1338a:	b508      	push	{r3, lr}
  if (i < 0) {
   1338c:	2800      	cmp	r0, #0
   1338e:	db03      	blt.n	13398 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0xe>
  return FastUInt32ToBufferLeft(u, buffer, 10);
   13390:	220a      	movs	r2, #10
   13392:	f7ff ffdc 	bl	1334e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   13396:	bd08      	pop	{r3, pc}
    *buffer++ = '-';
   13398:	222d      	movs	r2, #45	; 0x2d
   1339a:	f801 2b01 	strb.w	r2, [r1], #1
    u = -u;
   1339e:	4240      	negs	r0, r0
   133a0:	e7f6      	b.n	13390 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc+0x6>

000133a2 <_ZN12_GLOBAL__N_111StrCatInt32EPcii>:
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
   133a2:	b530      	push	{r4, r5, lr}
   133a4:	b08d      	sub	sp, #52	; 0x34
   133a6:	4604      	mov	r4, r0
   133a8:	460d      	mov	r5, r1
  FastInt32ToBufferLeft(number, number_string);
   133aa:	4669      	mov	r1, sp
   133ac:	4610      	mov	r0, r2
   133ae:	f7ff ffec 	bl	1338a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
  return StrCatStr(main, main_max_length, number_string);
   133b2:	466a      	mov	r2, sp
   133b4:	4629      	mov	r1, r5
   133b6:	4620      	mov	r0, r4
   133b8:	f7ff ffb5 	bl	13326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   133bc:	b00d      	add	sp, #52	; 0x34
   133be:	bd30      	pop	{r4, r5, pc}

000133c0 <_ZN12_GLOBAL__N_112StrCatUInt32EPciji>:
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
   133c0:	b530      	push	{r4, r5, lr}
   133c2:	b08d      	sub	sp, #52	; 0x34
   133c4:	4604      	mov	r4, r0
   133c6:	460d      	mov	r5, r1
   133c8:	4610      	mov	r0, r2
  FastUInt32ToBufferLeft(number, number_string, base);
   133ca:	461a      	mov	r2, r3
   133cc:	4669      	mov	r1, sp
   133ce:	f7ff ffbe 	bl	1334e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   133d2:	466a      	mov	r2, sp
   133d4:	4629      	mov	r1, r5
   133d6:	4620      	mov	r0, r4
   133d8:	f7ff ffa5 	bl	13326 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
}
   133dc:	b00d      	add	sp, #52	; 0x34
   133de:	bd30      	pop	{r4, r5, pc}

000133e0 <_ZN12_GLOBAL__N_111FormatInt32EPci>:
int FormatInt32(char* output, int32_t i) {
   133e0:	b510      	push	{r4, lr}
   133e2:	4604      	mov	r4, r0
   133e4:	4608      	mov	r0, r1
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
   133e6:	4621      	mov	r1, r4
   133e8:	f7ff ffcf 	bl	1338a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftEiPc>
}
   133ec:	1b00      	subs	r0, r0, r4
   133ee:	bd10      	pop	{r4, pc}

000133f0 <_ZN12_GLOBAL__N_112FormatUInt32EPcj>:
int FormatUInt32(char* output, uint32_t i) {
   133f0:	b510      	push	{r4, lr}
   133f2:	4604      	mov	r4, r0
   133f4:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   133f6:	220a      	movs	r2, #10
   133f8:	4621      	mov	r1, r4
   133fa:	f7ff ffa8 	bl	1334e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   133fe:	1b00      	subs	r0, r0, r4
   13400:	bd10      	pop	{r4, pc}

00013402 <_ZN12_GLOBAL__N_19FormatHexEPcj>:
int FormatHex(char* output, uint32_t i) {
   13402:	b510      	push	{r4, lr}
   13404:	4604      	mov	r4, r0
   13406:	4608      	mov	r0, r1
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   13408:	2210      	movs	r2, #16
   1340a:	4621      	mov	r1, r4
   1340c:	f7ff ff9f 	bl	1334e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
}
   13410:	1b00      	subs	r0, r0, r4
   13412:	bd10      	pop	{r4, pc}

00013414 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:
int FormatFloat(char* output, float i) {
   13414:	b510      	push	{r4, lr}
   13416:	4604      	mov	r4, r0
   13418:	4608      	mov	r0, r1
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   1341a:	4621      	mov	r1, r4
   1341c:	f7f3 f962 	bl	66e4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
}
   13420:	1b00      	subs	r0, r0, r4
   13422:	bd10      	pop	{r4, pc}

00013424 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
   13424:	4602      	mov	r2, r0
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   13426:	2300      	movs	r3, #0
  int result = 1;
   13428:	2001      	movs	r0, #1
  for (int i = 0; i < dims.size; ++i) {
   1342a:	6811      	ldr	r1, [r2, #0]
   1342c:	4299      	cmp	r1, r3
   1342e:	dd06      	ble.n	1343e <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x1a>
    result *= dims.data[i];
   13430:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   13434:	6849      	ldr	r1, [r1, #4]
   13436:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
   1343a:	3301      	adds	r3, #1
   1343c:	e7f5      	b.n	1342a <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x6>
  }
  return result;
}
   1343e:	4770      	bx	lr

00013440 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
   13440:	b538      	push	{r3, r4, r5, lr}
   13442:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   13444:	f7ff ff4c 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13448:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   1344a:	4628      	mov	r0, r5
   1344c:	f7ff ff4e 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13450:	280a      	cmp	r0, #10
   13452:	d90e      	bls.n	13472 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x32>
   13454:	f105 000a 	add.w	r0, r5, #10
   13458:	f7ff ff48 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   1345c:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1345e:	b150      	cbz	r0, 13476 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x36>
   13460:	4620      	mov	r0, r4
   13462:	f7ff ff37 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   13466:	4420      	add	r0, r4
  if (subgraph->operators() != nullptr) {
   13468:	b138      	cbz	r0, 1347a <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x3a>
  uoffset_t size() const { return EndianScalar(length_); }
   1346a:	6800      	ldr	r0, [r0, #0]
   1346c:	f7fe fd13 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
}
   13470:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13472:	2000      	movs	r0, #0
   13474:	e7f2      	b.n	1345c <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x1c>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13476:	2000      	movs	r0, #0
   13478:	e7f6      	b.n	13468 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x28>
    return 0;
   1347a:	2000      	movs	r0, #0
   1347c:	e7f8      	b.n	13470 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x30>

0001347e <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
   1347e:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   13480:	7800      	ldrb	r0, [r0, #0]
   13482:	f7ff ff3f 	bl	13304 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
}
   13486:	bd08      	pop	{r3, pc}

00013488 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
}
   13488:	4770      	bx	lr

0001348a <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
   1348a:	4770      	bx	lr

0001348c <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
   1348c:	b508      	push	{r3, lr}
  return EndianScalar(*reinterpret_cast<const T *>(p));
   1348e:	6800      	ldr	r0, [r0, #0]
   13490:	f7ff fffb 	bl	1348a <_ZN11flatbuffers12EndianScalarIfEET_S1_>
}
   13494:	bd08      	pop	{r3, pc}

00013496 <_ZN6tflite10MicroGraphD1Ev>:
MicroGraph::~MicroGraph() {}
   13496:	4770      	bx	lr

00013498 <_ZN6tflite10MicroGraphD0Ev>:
   13498:	b510      	push	{r4, lr}
   1349a:	4604      	mov	r4, r0
   1349c:	f002 fe66 	bl	1616c <_ZdlPv>
   134a0:	4620      	mov	r0, r4
   134a2:	bd10      	pop	{r4, pc}

000134a4 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:
  subgraph_allocations_ = subgraph_allocations;
   134a4:	6101      	str	r1, [r0, #16]
}
   134a6:	4770      	bx	lr

000134a8 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:
TfLiteStatus MicroGraph::InitSubgraphs() {
   134a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   134ac:	4606      	mov	r6, r0
  int previous_subgraph_idx = current_subgraph_index_;
   134ae:	f8d0 9014 	ldr.w	r9, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   134b2:	2700      	movs	r7, #0
   134b4:	e017      	b.n	134e6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3e>
        init_data = reinterpret_cast<const char*>(node->builtin_data);
   134b6:	6961      	ldr	r1, [r4, #20]
        init_data_size = 0;
   134b8:	2200      	movs	r2, #0
      if (registration->init) {
   134ba:	681b      	ldr	r3, [r3, #0]
   134bc:	b113      	cbz	r3, 134c4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1c>
            registration->init(context_, init_data, init_data_size);
   134be:	6870      	ldr	r0, [r6, #4]
   134c0:	4798      	blx	r3
        node->user_data =
   134c2:	6120      	str	r0, [r4, #16]
    for (size_t i = 0; i < operators_size; ++i) {
   134c4:	3501      	adds	r5, #1
   134c6:	4545      	cmp	r5, r8
   134c8:	d20c      	bcs.n	134e4 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x3c>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   134ca:	6933      	ldr	r3, [r6, #16]
   134cc:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
   134d0:	242c      	movs	r4, #44	; 0x2c
   134d2:	fb04 3405 	mla	r4, r4, r5, r3
      const TfLiteRegistration* registration =
   134d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   134d8:	695a      	ldr	r2, [r3, #20]
   134da:	2a20      	cmp	r2, #32
   134dc:	d1eb      	bne.n	134b6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0xe>
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
   134de:	69a1      	ldr	r1, [r4, #24]
        init_data_size = node->custom_initial_data_size;
   134e0:	69e2      	ldr	r2, [r4, #28]
   134e2:	e7ea      	b.n	134ba <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x12>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   134e4:	3701      	adds	r7, #1
   134e6:	69b3      	ldr	r3, [r6, #24]
  uoffset_t size() const { return EndianScalar(length_); }
   134e8:	6818      	ldr	r0, [r3, #0]
   134ea:	f7fe fcd4 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   134ee:	4287      	cmp	r7, r0
   134f0:	d207      	bcs.n	13502 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    current_subgraph_index_ = subgraph_idx;
   134f2:	6177      	str	r7, [r6, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   134f4:	4639      	mov	r1, r7
   134f6:	68b0      	ldr	r0, [r6, #8]
   134f8:	f7f3 fa4a 	bl	6990 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   134fc:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
   134fe:	2500      	movs	r5, #0
   13500:	e7e1      	b.n	134c6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1e>
  current_subgraph_index_ = previous_subgraph_idx;
   13502:	f8c6 9014 	str.w	r9, [r6, #20]
}
   13506:	2000      	movs	r0, #0
   13508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001350c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
TfLiteStatus MicroGraph::FreeSubgraphs() {
   1350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13510:	4605      	mov	r5, r0
  int previous_subgraph_idx = current_subgraph_index_;
   13512:	f8d0 8014 	ldr.w	r8, [r0, #20]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   13516:	2600      	movs	r6, #0
   13518:	e013      	b.n	13542 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x36>
    for (size_t i = 0; i < operators_size; ++i) {
   1351a:	3401      	adds	r4, #1
   1351c:	42bc      	cmp	r4, r7
   1351e:	d20f      	bcs.n	13540 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x34>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
   13520:	692b      	ldr	r3, [r5, #16]
   13522:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
   13526:	232c      	movs	r3, #44	; 0x2c
   13528:	fb03 2304 	mla	r3, r3, r4, r2
      const TfLiteRegistration* registration =
   1352c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if (registration != nullptr && registration->free != nullptr) {
   1352e:	2a00      	cmp	r2, #0
   13530:	d0f3      	beq.n	1351a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
   13532:	6852      	ldr	r2, [r2, #4]
   13534:	2a00      	cmp	r2, #0
   13536:	d0f0      	beq.n	1351a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
        registration->free(context_, node->user_data);
   13538:	6919      	ldr	r1, [r3, #16]
   1353a:	6868      	ldr	r0, [r5, #4]
   1353c:	4790      	blx	r2
   1353e:	e7ec      	b.n	1351a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0xe>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
   13540:	3601      	adds	r6, #1
   13542:	69ab      	ldr	r3, [r5, #24]
   13544:	6818      	ldr	r0, [r3, #0]
   13546:	f7fe fca6 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   1354a:	4286      	cmp	r6, r0
   1354c:	d207      	bcs.n	1355e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x52>
    current_subgraph_index_ = subgraph_idx;
   1354e:	616e      	str	r6, [r5, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
   13550:	4631      	mov	r1, r6
   13552:	68a8      	ldr	r0, [r5, #8]
   13554:	f7f3 fa1c 	bl	6990 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
   13558:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
   1355a:	2400      	movs	r4, #0
   1355c:	e7de      	b.n	1351c <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
  current_subgraph_index_ = previous_subgraph_idx;
   1355e:	f8c5 8014 	str.w	r8, [r5, #20]
}
   13562:	2000      	movs	r0, #0
   13564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013568 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
   13568:	b538      	push	{r3, r4, r5, lr}
   1356a:	6884      	ldr	r4, [r0, #8]
    return data_ - ReadScalar<soffset_t>(data_);
   1356c:	4620      	mov	r0, r4
   1356e:	f7ff feb7 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13572:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13574:	4628      	mov	r0, r5
   13576:	f7ff feb9 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1357a:	2808      	cmp	r0, #8
   1357c:	d90d      	bls.n	1359a <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x32>
   1357e:	f105 0008 	add.w	r0, r5, #8
   13582:	f7ff feb3 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    auto p = data_ + field_offset;
   13586:	4404      	add	r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   13588:	b148      	cbz	r0, 1359e <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x36>
   1358a:	4620      	mov	r0, r4
   1358c:	f7ff fea2 	bl	132d4 <_ZN11flatbuffers10ReadScalarIjEET_PKv>
   13590:	4404      	add	r4, r0
  uoffset_t size() const { return EndianScalar(length_); }
   13592:	6820      	ldr	r0, [r4, #0]
   13594:	f7fe fc7f 	bl	11e96 <_ZN11flatbuffers12EndianScalarIjEET_S1_>
   13598:	bd38      	pop	{r3, r4, r5, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   1359a:	2000      	movs	r0, #0
   1359c:	e7f3      	b.n	13586 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x1e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1359e:	2400      	movs	r4, #0
   135a0:	e7f7      	b.n	13592 <_ZN6tflite10MicroGraph12NumSubgraphsEv+0x2a>

000135a2 <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextj>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
  return graph_.ResetVariableTensors();
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
   135a2:	b508      	push	{r3, lr}
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
   135a4:	68c3      	ldr	r3, [r0, #12]
      ->allocator_.AllocatePersistentBuffer(bytes);
   135a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   135a8:	6803      	ldr	r3, [r0, #0]
   135aa:	68db      	ldr	r3, [r3, #12]
   135ac:	4798      	blx	r3
}
   135ae:	bd08      	pop	{r3, pc}

000135b0 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:
  return interpreter->allocator_.RequestScratchBufferInArena(
      bytes, interpreter->graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
   135b0:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
   135b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  return handle->data;
}
   135b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   135ba:	4770      	bx	lr

000135bc <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
   135bc:	b570      	push	{r4, r5, r6, lr}
   135be:	b082      	sub	sp, #8
   135c0:	460b      	mov	r3, r1
  MicroInterpreter* interpreter =
   135c2:	68c4      	ldr	r4, [r0, #12]
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   135c4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
      interpreter->model_, interpreter->graph_.GetAllocations(), tensor_idx,
      interpreter->get_subgraph_index());
   135c6:	6802      	ldr	r2, [r0, #0]
   135c8:	6855      	ldr	r5, [r2, #4]
   135ca:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   135cc:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  return interpreter->allocator_.AllocateTempTfLiteTensor(
   135d0:	6821      	ldr	r1, [r4, #0]
   135d2:	9600      	str	r6, [sp, #0]
   135d4:	47a8      	blx	r5
}
   135d6:	b002      	add	sp, #8
   135d8:	bd70      	pop	{r4, r5, r6, pc}

000135da <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
   135da:	68c2      	ldr	r2, [r0, #12]
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   135dc:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
   135de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
   135e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
              .tensors[tensor_idx];
   135e6:	6858      	ldr	r0, [r3, #4]
   135e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   135ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   135f0:	4770      	bx	lr

000135f2 <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
   135f2:	68c3      	ldr	r3, [r0, #12]
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
   135f4:	336c      	adds	r3, #108	; 0x6c
   135f6:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
}
   135f8:	2000      	movs	r0, #0
   135fa:	4770      	bx	lr

000135fc <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
                                                           int* buffer_idx) {
   135fc:	b508      	push	{r3, lr}
   135fe:	4613      	mov	r3, r2
  MicroInterpreter* interpreter =
   13600:	68c0      	ldr	r0, [r0, #12]
  return interpreter->allocator_.RequestScratchBufferInArena(
   13602:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
   13606:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13608:	f7f4 fb60 	bl	7ccc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
}
   1360c:	bd08      	pop	{r3, pc}

0001360e <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
   1360e:	b40e      	push	{r1, r2, r3}
   13610:	b500      	push	{lr}
   13612:	b082      	sub	sp, #8
   13614:	aa03      	add	r2, sp, #12
   13616:	f852 1b04 	ldr.w	r1, [r2], #4
  MicroInterpreter* interpreter =
   1361a:	68c3      	ldr	r3, [r0, #12]
  va_start(args, format);
   1361c:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
   1361e:	6898      	ldr	r0, [r3, #8]
   13620:	6803      	ldr	r3, [r0, #0]
   13622:	689b      	ldr	r3, [r3, #8]
   13624:	4798      	blx	r3
}
   13626:	b002      	add	sp, #8
   13628:	f85d eb04 	ldr.w	lr, [sp], #4
   1362c:	b003      	add	sp, #12
   1362e:	4770      	bx	lr

00013630 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   13630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13634:	4604      	mov	r4, r0
   13636:	460d      	mov	r5, r1
   13638:	461e      	mov	r6, r3
   1363a:	f8dd 801c 	ldr.w	r8, [sp, #28]
      output_tensors_(nullptr) {
   1363e:	6001      	str	r1, [r0, #0]
   13640:	6042      	str	r2, [r0, #4]
   13642:	f8c0 8008 	str.w	r8, [r0, #8]
   13646:	f100 070c 	add.w	r7, r0, #12
   1364a:	225c      	movs	r2, #92	; 0x5c
   1364c:	2100      	movs	r1, #0
   1364e:	4638      	mov	r0, r7
   13650:	f002 fdc9 	bl	161e6 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   13654:	4642      	mov	r2, r8
   13656:	9906      	ldr	r1, [sp, #24]
   13658:	4630      	mov	r0, r6
   1365a:	f000 f90a 	bl	13872 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
   1365e:	4603      	mov	r3, r0
      output_tensors_(nullptr) {
   13660:	66a0      	str	r0, [r4, #104]	; 0x68
   13662:	462a      	mov	r2, r5
   13664:	4639      	mov	r1, r7
   13666:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1366a:	f7f3 fa87 	bl	6b7c <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
   1366e:	2300      	movs	r3, #0
   13670:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
   13674:	2201      	movs	r2, #1
   13676:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
   1367a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1367e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   13682:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  Init(profiler);
   13686:	9908      	ldr	r1, [sp, #32]
   13688:	4620      	mov	r0, r4
   1368a:	f7f3 fd07 	bl	709c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
   1368e:	4620      	mov	r0, r4
   13690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013694 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   13694:	b510      	push	{r4, lr}
   13696:	4604      	mov	r4, r0
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
   13698:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  if (graph_.GetAllocations() != nullptr) {
   1369a:	b113      	cbz	r3, 136a2 <_ZN6tflite16MicroInterpreterD1Ev+0xe>
    graph_.FreeSubgraphs();
   1369c:	306c      	adds	r0, #108	; 0x6c
   1369e:	f7ff ff35 	bl	1350c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
   136a2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   136a6:	f7ff fef6 	bl	13496 <_ZN6tflite10MicroGraphD1Ev>
}
   136aa:	4620      	mov	r0, r4
   136ac:	bd10      	pop	{r4, pc}

000136ae <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
   136ae:	b508      	push	{r3, lr}
  return graph_.ResetVariableTensors();
   136b0:	306c      	adds	r0, #108	; 0x6c
   136b2:	f7f3 fbff 	bl	6eb4 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
   136b6:	bd08      	pop	{r3, pc}

000136b8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  void* Allocate(size_t size, size_t alignment_hint) override {
   136b8:	b508      	push	{r3, lr}
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   136ba:	6840      	ldr	r0, [r0, #4]
   136bc:	6803      	ldr	r3, [r0, #0]
   136be:	68db      	ldr	r3, [r3, #12]
   136c0:	4798      	blx	r3
  }
   136c2:	bd08      	pop	{r3, pc}

000136c4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   136c4:	4770      	bx	lr

000136c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
   136c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   136c8:	6844      	ldr	r4, [r0, #4]
   136ca:	6843      	ldr	r3, [r0, #4]
   136cc:	6885      	ldr	r5, [r0, #8]
   136ce:	441d      	add	r5, r3
   136d0:	42a5      	cmp	r5, r4
   136d2:	d91a      	bls.n	1370a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x44>
        &(scratch_buffer_requests[i - tensor_count_]);
   136d4:	1ae3      	subs	r3, r4, r3
    internal::ScratchBufferRequest* current_request =
   136d6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
    ScratchBufferHandle* current_handle =
   136da:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    AllocationInfo* current = &info_[i];
   136de:	6806      	ldr	r6, [r0, #0]
   136e0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   136e4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
   136e8:	f8c5 e004 	str.w	lr, [r5, #4]
    current->bytes = current_request->bytes;
   136ec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   136f0:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    current->first_created = current_request->node_idx;
   136f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   136f8:	60ab      	str	r3, [r5, #8]
    current->last_used = current_request->node_idx;
   136fa:	60eb      	str	r3, [r5, #12]
    current->offline_offset = kOnlinePlannedBuffer;
   136fc:	f04f 33ff 	mov.w	r3, #4294967295
   13700:	612b      	str	r3, [r5, #16]
    current->needs_allocating = true;
   13702:	2301      	movs	r3, #1
   13704:	752b      	strb	r3, [r5, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   13706:	441c      	add	r4, r3
   13708:	e7df      	b.n	136ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x4>
}
   1370a:	2000      	movs	r0, #0
   1370c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001370e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   1370e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13712:	b085      	sub	sp, #20
   13714:	9001      	str	r0, [sp, #4]
   13716:	4688      	mov	r8, r1
   13718:	4693      	mov	fp, r2
   1371a:	461f      	mov	r7, r3
   1371c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  for (size_t i = 0; i < allocation_info_size; ++i) {
   13720:	2400      	movs	r4, #0
  int planner_index = 0;
   13722:	4626      	mov	r6, r4
   13724:	e000      	b.n	13728 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x1a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   13726:	3401      	adds	r4, #1
   13728:	454c      	cmp	r4, r9
   1372a:	d21a      	bcs.n	13762 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x54>
    const AllocationInfo* current = &allocation_info[i];
   1372c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   13730:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    if (current->needs_allocating) {
   13734:	7d2b      	ldrb	r3, [r5, #20]
   13736:	2b00      	cmp	r3, #0
   13738:	d0f5      	beq.n	13726 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
      int offset = -1;
   1373a:	f04f 33ff 	mov.w	r3, #4294967295
   1373e:	9303      	str	r3, [sp, #12]
      TF_LITE_ENSURE_STATUS(
   13740:	f8d8 3000 	ldr.w	r3, [r8]
   13744:	f8d3 a014 	ldr.w	sl, [r3, #20]
   13748:	ab03      	add	r3, sp, #12
   1374a:	4632      	mov	r2, r6
   1374c:	9901      	ldr	r1, [sp, #4]
   1374e:	4640      	mov	r0, r8
   13750:	47d0      	blx	sl
   13752:	4603      	mov	r3, r0
   13754:	b930      	cbnz	r0, 13764 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x56>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   13756:	686a      	ldr	r2, [r5, #4]
   13758:	9b03      	ldr	r3, [sp, #12]
   1375a:	445b      	add	r3, fp
   1375c:	6013      	str	r3, [r2, #0]
      ++planner_index;
   1375e:	3601      	adds	r6, #1
   13760:	e7e1      	b.n	13726 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x18>
  return kTfLiteOk;
   13762:	2300      	movs	r3, #0
}
   13764:	4618      	mov	r0, r3
   13766:	b005      	add	sp, #20
   13768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001376c <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   1376c:	4770      	bx	lr

0001376e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
   1376e:	b508      	push	{r3, lr}
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   13770:	6840      	ldr	r0, [r0, #4]
   13772:	6803      	ldr	r3, [r0, #0]
   13774:	68db      	ldr	r3, [r3, #12]
   13776:	2210      	movs	r2, #16
   13778:	4798      	blx	r3
}
   1377a:	bd08      	pop	{r3, pc}

0001377c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
void MicroAllocator::ResetTempAllocations() {
   1377c:	b508      	push	{r3, lr}
  memory_allocator_->ResetTempAllocations();
   1377e:	6840      	ldr	r0, [r0, #4]
   13780:	6803      	ldr	r3, [r0, #0]
   13782:	695b      	ldr	r3, [r3, #20]
   13784:	4798      	blx	r3
}
   13786:	bd08      	pop	{r3, pc}

00013788 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
   13788:	b508      	push	{r3, lr}
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1378a:	6840      	ldr	r0, [r0, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
   1378c:	6803      	ldr	r3, [r0, #0]
   1378e:	68db      	ldr	r3, [r3, #12]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   13790:	2204      	movs	r2, #4
   13792:	2140      	movs	r1, #64	; 0x40
   13794:	4798      	blx	r3
}
   13796:	bd08      	pop	{r3, pc}

00013798 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   13798:	4770      	bx	lr

0001379a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
   1379a:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   1379c:	b161      	cbz	r1, 137b8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
   1379e:	4613      	mov	r3, r2
   137a0:	460c      	mov	r4, r1

  if (scratch_buffer_request_count_ == 0) {
   137a2:	6942      	ldr	r2, [r0, #20]
   137a4:	b132      	cbz	r2, 137b4 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
   137a6:	6840      	ldr	r0, [r0, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
   137a8:	6802      	ldr	r2, [r0, #0]
   137aa:	68d5      	ldr	r5, [r2, #12]
      memory_allocator_->AllocateFromTail(
   137ac:	2204      	movs	r2, #4
   137ae:	0099      	lsls	r1, r3, #2
   137b0:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
   137b2:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
   137b4:	2000      	movs	r0, #0
   137b6:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
   137b8:	f002 fcef 	bl	1619a <abort>

000137bc <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   137bc:	b510      	push	{r4, lr}
   137be:	4604      	mov	r4, r0
   137c0:	f002 fcd4 	bl	1616c <_ZdlPv>
   137c4:	4620      	mov	r0, r4
   137c6:	bd10      	pop	{r4, pc}

000137c8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   137c8:	b510      	push	{r4, lr}
   137ca:	4604      	mov	r4, r0
   137cc:	f002 fcce 	bl	1616c <_ZdlPv>
   137d0:	4620      	mov	r0, r4
   137d2:	bd10      	pop	{r4, pc}

000137d4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:
                        size_t allocation_info_size) {
   137d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137d8:	b082      	sub	sp, #8
   137da:	4682      	mov	sl, r0
   137dc:	4689      	mov	r9, r1
   137de:	4617      	mov	r7, r2
   137e0:	4698      	mov	r8, r3
  for (size_t i = 0; i < allocation_info_size; ++i) {
   137e2:	2500      	movs	r5, #0
   137e4:	e00a      	b.n	137fc <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x28>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   137e6:	68e1      	ldr	r1, [r4, #12]
   137e8:	9301      	str	r3, [sp, #4]
   137ea:	9100      	str	r1, [sp, #0]
   137ec:	68a3      	ldr	r3, [r4, #8]
   137ee:	4651      	mov	r1, sl
   137f0:	4648      	mov	r0, r9
   137f2:	f000 f8c9 	bl	13988 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   137f6:	4603      	mov	r3, r0
   137f8:	bb08      	cbnz	r0, 1383e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   137fa:	3501      	adds	r5, #1
   137fc:	4545      	cmp	r5, r8
   137fe:	d21d      	bcs.n	1383c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x68>
    const AllocationInfo* current = &allocation_info[i];
   13800:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   13804:	00e3      	lsls	r3, r4, #3
   13806:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    if (current->needs_allocating) {
   1380a:	7d26      	ldrb	r6, [r4, #20]
   1380c:	2e00      	cmp	r6, #0
   1380e:	d0f4      	beq.n	137fa <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
          AlignSizeUp(current->bytes, kBufferAlignment);
   13810:	2110      	movs	r1, #16
   13812:	58f8      	ldr	r0, [r7, r3]
   13814:	f7ff fcf3 	bl	131fe <_ZN6tflite11AlignSizeUpEjj>
   13818:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   1381a:	6923      	ldr	r3, [r4, #16]
   1381c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13820:	d1e1      	bne.n	137e6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
        TF_LITE_ENSURE_STATUS(
   13822:	f8d9 3000 	ldr.w	r3, [r9]
   13826:	689e      	ldr	r6, [r3, #8]
   13828:	68e3      	ldr	r3, [r4, #12]
   1382a:	9300      	str	r3, [sp, #0]
   1382c:	68a3      	ldr	r3, [r4, #8]
   1382e:	4651      	mov	r1, sl
   13830:	4648      	mov	r0, r9
   13832:	47b0      	blx	r6
   13834:	4603      	mov	r3, r0
   13836:	2800      	cmp	r0, #0
   13838:	d0df      	beq.n	137fa <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x26>
   1383a:	e000      	b.n	1383e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x6a>
  return kTfLiteOk;
   1383c:	2300      	movs	r3, #0
}
   1383e:	4618      	mov	r0, r3
   13840:	b002      	add	sp, #8
   13842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013846 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   13846:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(memory_allocator != nullptr);
   13848:	b178      	cbz	r0, 1386a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x24>
   1384a:	460c      	mov	r4, r1
   1384c:	4605      	mov	r5, r0
  TFLITE_DCHECK(error_reporter != nullptr);
   1384e:	b171      	cbz	r1, 1386e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x28>
      sizeof(MicroAllocator), alignof(MicroAllocator));
   13850:	6803      	ldr	r3, [r0, #0]
   13852:	68db      	ldr	r3, [r3, #12]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   13854:	2204      	movs	r2, #4
   13856:	211c      	movs	r1, #28
   13858:	4798      	blx	r3
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   1385a:	4606      	mov	r6, r0
   1385c:	b118      	cbz	r0, 13866 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x20>
   1385e:	4622      	mov	r2, r4
   13860:	4629      	mov	r1, r5
   13862:	f7f4 fa25 	bl	7cb0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   13866:	4630      	mov	r0, r6
   13868:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
   1386a:	f002 fc96 	bl	1619a <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1386e:	f002 fc94 	bl	1619a <abort>

00013872 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   13872:	b570      	push	{r4, r5, r6, lr}
   13874:	4604      	mov	r4, r0
   13876:	460e      	mov	r6, r1
   13878:	4615      	mov	r5, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1387a:	2110      	movs	r1, #16
   1387c:	f7ff fcb3 	bl	131e6 <_ZN6tflite14AlignPointerUpEPhj>
   13880:	4601      	mov	r1, r0
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   13882:	4434      	add	r4, r6
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   13884:	1a22      	subs	r2, r4, r0
   13886:	4628      	mov	r0, r5
   13888:	f7f2 fe5a 	bl	6540 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   1388c:	4629      	mov	r1, r5
   1388e:	f7ff ffda 	bl	13846 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
}
   13892:	bd70      	pop	{r4, r5, r6, pc}

00013894 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
   13894:	b508      	push	{r3, lr}
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
   13896:	2300      	movs	r3, #0
   13898:	6143      	str	r3, [r0, #20]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   1389a:	6840      	ldr	r0, [r0, #4]
   1389c:	6803      	ldr	r3, [r0, #0]
   1389e:	689b      	ldr	r3, [r3, #8]
   138a0:	2204      	movs	r2, #4
   138a2:	2160      	movs	r1, #96	; 0x60
   138a4:	4798      	blx	r3
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}
   138a6:	bd08      	pop	{r3, pc}

000138a8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
   138a8:	b508      	push	{r3, lr}
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
   138aa:	6840      	ldr	r0, [r0, #4]
   138ac:	f7ff fc70 	bl	13190 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
   138b0:	2104      	movs	r1, #4
   138b2:	f7ff fc98 	bl	131e6 <_ZN6tflite14AlignPointerUpEPhj>
                     alignof(internal::ScratchBufferRequest)));
}
   138b6:	bd08      	pop	{r3, pc}

000138b8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
   138b8:	b570      	push	{r4, r5, r6, lr}
   138ba:	4605      	mov	r5, r0
   138bc:	460e      	mov	r6, r1
  ResetTempAllocations();
   138be:	6803      	ldr	r3, [r0, #0]
   138c0:	689b      	ldr	r3, [r3, #8]
   138c2:	4798      	blx	r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
   138c4:	4628      	mov	r0, r5
   138c6:	f7ff ffef 	bl	138a8 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   138ca:	2300      	movs	r3, #0
   138cc:	e000      	b.n	138d0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
   138ce:	3301      	adds	r3, #1
   138d0:	6969      	ldr	r1, [r5, #20]
   138d2:	4299      	cmp	r1, r3
   138d4:	d907      	bls.n	138e6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   138d6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   138da:	6854      	ldr	r4, [r2, #4]
   138dc:	f1b4 3fff 	cmp.w	r4, #4294967295
   138e0:	d1f5      	bne.n	138ce <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
      requests[i].node_idx = node_id;
   138e2:	6056      	str	r6, [r2, #4]
   138e4:	e7f3      	b.n	138ce <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x16>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
   138e6:	6868      	ldr	r0, [r5, #4]
   138e8:	6803      	ldr	r3, [r0, #0]
   138ea:	689b      	ldr	r3, [r3, #8]
   138ec:	310c      	adds	r1, #12
   138ee:	2204      	movs	r2, #4
   138f0:	00c9      	lsls	r1, r1, #3
   138f2:	4798      	blx	r3
}
   138f4:	bd70      	pop	{r4, r5, r6, pc}

000138f6 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
   138f6:	6880      	ldr	r0, [r0, #8]
   138f8:	4770      	bx	lr

000138fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   138fa:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   138fc:	b119      	cbz	r1, 13906 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   138fe:	b122      	cbz	r2, 1390a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   13900:	601a      	str	r2, [r3, #0]
}
   13902:	2000      	movs	r0, #0
   13904:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   13906:	f002 fc48 	bl	1619a <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1390a:	f002 fc46 	bl	1619a <abort>

0001390e <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
    TfLiteIntArray** result) {
   1390e:	b508      	push	{r3, lr}
   13910:	4613      	mov	r3, r2
  return internal::FlatBufferVectorToTfLiteTypeArray(
   13912:	460a      	mov	r2, r1
   13914:	68c1      	ldr	r1, [r0, #12]
   13916:	6840      	ldr	r0, [r0, #4]
   13918:	f7ff ffef 	bl	138fa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIi14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
}
   1391c:	bd08      	pop	{r3, pc}

0001391e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   1391e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(error_reporter != nullptr);
   13920:	b119      	cbz	r1, 1392a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0xc>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   13922:	b122      	cbz	r2, 1392e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x10>
    *result = const_cast<kTfLiteArrayType*>(
   13924:	601a      	str	r2, [r3, #0]
}
   13926:	2000      	movs	r0, #0
   13928:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
   1392a:	f002 fc36 	bl	1619a <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1392e:	f002 fc34 	bl	1619a <abort>

00013932 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   13932:	4770      	bx	lr

00013934 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   13934:	6880      	ldr	r0, [r0, #8]
   13936:	4770      	bx	lr

00013938 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   13938:	b510      	push	{r4, lr}
   1393a:	4604      	mov	r4, r0
}
   1393c:	f002 fc16 	bl	1616c <_ZdlPv>
   13940:	4620      	mov	r0, r4
   13942:	bd10      	pop	{r4, pc}

00013944 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   13944:	b4f0      	push	{r4, r5, r6, r7}
    for (int i = 1; i < size; ++i) {
   13946:	2301      	movs	r3, #1
    any_swapped = false;
   13948:	2700      	movs	r7, #0
   1394a:	e000      	b.n	1394e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
    for (int i = 1; i < size; ++i) {
   1394c:	3301      	adds	r3, #1
   1394e:	4293      	cmp	r3, r2
   13950:	da16      	bge.n	13980 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x3c>
      if (values[i - 1] < values[i]) {
   13952:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   13956:	3c01      	subs	r4, #1
   13958:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1395c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   13960:	42b5      	cmp	r5, r6
   13962:	daf3      	bge.n	1394c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
        values[i - 1] = values[i];
   13964:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        values[i] = value_temp;
   13968:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
        const int id_temp = ids[i - 1];
   1396c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        ids[i - 1] = ids[i];
   13970:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
   13974:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
        ids[i] = id_temp;
   13978:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
        any_swapped = true;
   1397c:	2701      	movs	r7, #1
   1397e:	e7e5      	b.n	1394c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x8>
  do {
   13980:	2f00      	cmp	r7, #0
   13982:	d1e0      	bne.n	13946 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   13984:	bcf0      	pop	{r4, r5, r6, r7}
   13986:	4770      	bx	lr

00013988 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   13988:	b570      	push	{r4, r5, r6, lr}
   1398a:	b082      	sub	sp, #8
  BufferRequirements* current = &requirements_[buffer_count_];
   1398c:	68c5      	ldr	r5, [r0, #12]
   1398e:	6886      	ldr	r6, [r0, #8]
   13990:	eb05 1506 	add.w	r5, r5, r6, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   13994:	6804      	ldr	r4, [r0, #0]
   13996:	68a4      	ldr	r4, [r4, #8]
   13998:	9e06      	ldr	r6, [sp, #24]
   1399a:	9600      	str	r6, [sp, #0]
   1399c:	47a0      	blx	r4
   1399e:	b918      	cbnz	r0, 139a8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x20>
  current->offline_offset = offline_offset;
   139a0:	9b07      	ldr	r3, [sp, #28]
   139a2:	606b      	str	r3, [r5, #4]
}
   139a4:	b002      	add	sp, #8
   139a6:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
   139a8:	2001      	movs	r0, #1
   139aa:	e7fb      	b.n	139a4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1c>

000139ac <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
   139ac:	68c0      	ldr	r0, [r0, #12]
   139ae:	6849      	ldr	r1, [r1, #4]
  const BufferRequirements* entry_requirements =
   139b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   139b4:	6888      	ldr	r0, [r1, #8]
   139b6:	4298      	cmp	r0, r3
   139b8:	dc04      	bgt.n	139c4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x18>
  if (first_time_used > entry_requirements->last_time_used) {
   139ba:	68cb      	ldr	r3, [r1, #12]
   139bc:	4293      	cmp	r3, r2
   139be:	db03      	blt.n	139c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  return true;
   139c0:	2001      	movs	r0, #1
   139c2:	4770      	bx	lr
    return false;
   139c4:	2000      	movs	r0, #0
   139c6:	4770      	bx	lr
    return false;
   139c8:	2000      	movs	r0, #0
}
   139ca:	4770      	bx	lr

000139cc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   139cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139ce:	4605      	mov	r5, r0
   139d0:	4616      	mov	r6, r2
   139d2:	461f      	mov	r7, r3
  if (start == nullptr) {
   139d4:	b1c9      	cbz	r1, 13a0a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
    if (start->next_entry_index == -1) {
   139d6:	688b      	ldr	r3, [r1, #8]
   139d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   139dc:	d01c      	beq.n	13a18 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4c>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
   139de:	6984      	ldr	r4, [r0, #24]
   139e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   139e4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   139e8:	463b      	mov	r3, r7
   139ea:	4632      	mov	r2, r6
   139ec:	4621      	mov	r1, r4
   139ee:	4628      	mov	r0, r5
   139f0:	f7ff ffdc 	bl	139ac <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   139f4:	b998      	cbnz	r0, 13a1e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
    if (candidate_next_entry->next_entry_index == -1) {
   139f6:	68a4      	ldr	r4, [r4, #8]
   139f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   139fc:	d00e      	beq.n	13a1c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x50>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   139fe:	69a9      	ldr	r1, [r5, #24]
   13a00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    candidate_next_entry =
   13a04:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   13a08:	e7ee      	b.n	139e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   13a0a:	6984      	ldr	r4, [r0, #24]
   13a0c:	6a03      	ldr	r3, [r0, #32]
   13a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a12:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   13a16:	e7e7      	b.n	139e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x1c>
      return nullptr;
   13a18:	2400      	movs	r4, #0
   13a1a:	e000      	b.n	13a1e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x52>
  ListEntry* result = nullptr;
   13a1c:	2400      	movs	r4, #0
}
   13a1e:	4620      	mov	r0, r4
   13a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   13a22:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13a26:	2b00      	cmp	r3, #0
   13a28:	f000 80d5 	beq.w	13bd6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b4>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   13a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	b083      	sub	sp, #12
   13a32:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   13a34:	6886      	ldr	r6, [r0, #8]
   13a36:	2e00      	cmp	r6, #0
   13a38:	f000 80ca 	beq.w	13bd0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
  need_to_calculate_offsets_ = false;
   13a3c:	2000      	movs	r0, #0
   13a3e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   13a42:	4603      	mov	r3, r0
   13a44:	e00e      	b.n	13a64 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x42>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   13a46:	6925      	ldr	r5, [r4, #16]
   13a48:	5852      	ldr	r2, [r2, r1]
   13a4a:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
   13a4e:	6962      	ldr	r2, [r4, #20]
   13a50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   13a54:	68e2      	ldr	r2, [r4, #12]
   13a56:	4411      	add	r1, r2
   13a58:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13a5a:	6849      	ldr	r1, [r1, #4]
   13a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
   13a60:	3001      	adds	r0, #1
  for (int i = 0; i < buffer_count_; ++i) {
   13a62:	3301      	adds	r3, #1
   13a64:	68a2      	ldr	r2, [r4, #8]
   13a66:	429a      	cmp	r2, r3
   13a68:	dd15      	ble.n	13a96 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   13a6a:	68e2      	ldr	r2, [r4, #12]
   13a6c:	0119      	lsls	r1, r3, #4
   13a6e:	eb02 1503 	add.w	r5, r2, r3, lsl #4
   13a72:	686d      	ldr	r5, [r5, #4]
   13a74:	f1b5 3fff 	cmp.w	r5, #4294967295
   13a78:	d1e5      	bne.n	13a46 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      idx_from_tail--;
   13a7a:	3e01      	subs	r6, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   13a7c:	6925      	ldr	r5, [r4, #16]
   13a7e:	5852      	ldr	r2, [r2, r1]
   13a80:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   13a84:	6962      	ldr	r2, [r4, #20]
   13a86:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
      buffer_offsets_[i] = -1;
   13a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13a8c:	f04f 31ff 	mov.w	r1, #4294967295
   13a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   13a94:	e7e5      	b.n	13a62 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x40>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   13a96:	6923      	ldr	r3, [r4, #16]
                     &buffer_ids_sorted_[idx_from_head],
   13a98:	6961      	ldr	r1, [r4, #20]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   13a9a:	1a12      	subs	r2, r2, r0
   13a9c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   13aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13aa4:	f7ff ff4e 	bl	13944 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  first_entry_index_ = 0;
   13aa8:	2300      	movs	r3, #0
   13aaa:	6223      	str	r3, [r4, #32]
  next_free_entry_ = 1;
   13aac:	2301      	movs	r3, #1
   13aae:	61e3      	str	r3, [r4, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   13ab0:	f8d4 a018 	ldr.w	sl, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   13ab4:	f04f 33ff 	mov.w	r3, #4294967295
   13ab8:	f8ca 3008 	str.w	r3, [sl, #8]
  int buffer_id = buffer_ids_sorted_[0];
   13abc:	6963      	ldr	r3, [r4, #20]
   13abe:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   13ac0:	f8ca 3004 	str.w	r3, [sl, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   13ac4:	68e2      	ldr	r2, [r4, #12]
   13ac6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   13aca:	6852      	ldr	r2, [r2, #4]
   13acc:	f1b2 3fff 	cmp.w	r2, #4294967295
   13ad0:	d007      	beq.n	13ae2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xc0>
  first_entry->offset = buffer_offsets_[buffer_id];
   13ad2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad8:	f8ca 3000 	str.w	r3, [sl]
  for (int i = 1; i < buffer_count_; ++i) {
   13adc:	f04f 0901 	mov.w	r9, #1
   13ae0:	e036      	b.n	13b50 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12e>
    buffer_offsets_[buffer_id] = 0;
   13ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13ae4:	2100      	movs	r1, #0
   13ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   13aea:	e7f2      	b.n	13ad2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb0>
      ListEntry* prior_entry = nullptr;
   13aec:	2100      	movs	r1, #0
    int candidate_offset = 0;
   13aee:	460d      	mov	r5, r1
   13af0:	f8cd a000 	str.w	sl, [sp]
   13af4:	f8cd 9004 	str.w	r9, [sp, #4]
   13af8:	4681      	mov	r9, r0
   13afa:	4692      	mov	sl, r2
   13afc:	e004      	b.n	13b08 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe6>
        if (next_entry == nullptr) {
   13afe:	b1d9      	cbz	r1, 13b38 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x116>
        const int gap = next_entry->offset - candidate_offset;
   13b00:	680b      	ldr	r3, [r1, #0]
   13b02:	1b5b      	subs	r3, r3, r5
        if (gap >= wanted_size) {
   13b04:	459b      	cmp	fp, r3
   13b06:	dd12      	ble.n	13b2e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   13b08:	460e      	mov	r6, r1
   13b0a:	4653      	mov	r3, sl
   13b0c:	464a      	mov	r2, r9
   13b0e:	4620      	mov	r0, r4
   13b10:	f7ff ff5c 	bl	139cc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
   13b14:	4601      	mov	r1, r0
        if (prior_entry) {
   13b16:	2e00      	cmp	r6, #0
   13b18:	d0f1      	beq.n	13afe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
              &requirements_[prior_entry->requirements_index];
   13b1a:	6873      	ldr	r3, [r6, #4]
   13b1c:	011a      	lsls	r2, r3, #4
              prior_entry->offset + candidate_requirements->size;
   13b1e:	6833      	ldr	r3, [r6, #0]
   13b20:	f858 2002 	ldr.w	r2, [r8, r2]
          const int prior_entry_offset =
   13b24:	4413      	add	r3, r2
          if (prior_entry_offset > candidate_offset) {
   13b26:	429d      	cmp	r5, r3
   13b28:	dae9      	bge.n	13afe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
            candidate_offset = prior_entry_offset;
   13b2a:	461d      	mov	r5, r3
   13b2c:	e7e7      	b.n	13afe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xdc>
   13b2e:	f8dd a000 	ldr.w	sl, [sp]
   13b32:	f8dd 9004 	ldr.w	r9, [sp, #4]
   13b36:	e01f      	b.n	13b78 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
   13b38:	f8dd a000 	ldr.w	sl, [sp]
   13b3c:	f8dd 9004 	ldr.w	r9, [sp, #4]
   13b40:	e01a      	b.n	13b78 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x156>
      first_entry->next_entry_index = first_entry_index_;
   13b42:	6a23      	ldr	r3, [r4, #32]
   13b44:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
   13b48:	6227      	str	r7, [r4, #32]
      first_entry = new_entry;
   13b4a:	46e2      	mov	sl, ip
  for (int i = 1; i < buffer_count_; ++i) {
   13b4c:	f109 0901 	add.w	r9, r9, #1
   13b50:	68a3      	ldr	r3, [r4, #8]
   13b52:	454b      	cmp	r3, r9
   13b54:	dd3c      	ble.n	13bd0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ae>
    buffer_id = buffer_ids_sorted_[i];
   13b56:	6963      	ldr	r3, [r4, #20]
   13b58:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   13b5c:	f8d4 800c 	ldr.w	r8, [r4, #12]
   13b60:	013a      	lsls	r2, r7, #4
   13b62:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    const int wanted_size = wanted_requirements->size;
   13b66:	f858 b002 	ldr.w	fp, [r8, r2]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   13b6a:	689a      	ldr	r2, [r3, #8]
   13b6c:	4610      	mov	r0, r2
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   13b6e:	68da      	ldr	r2, [r3, #12]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   13b70:	685d      	ldr	r5, [r3, #4]
   13b72:	f1b5 3fff 	cmp.w	r5, #4294967295
   13b76:	d0b9      	beq.n	13aec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xca>
    buffer_offsets_[buffer_id] = candidate_offset;
   13b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13b7a:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   13b7e:	69a2      	ldr	r2, [r4, #24]
   13b80:	69e3      	ldr	r3, [r4, #28]
   13b82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13b86:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    new_entry->offset = candidate_offset;
   13b8a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    new_entry->requirements_index = buffer_id;
   13b8e:	f8cc 7004 	str.w	r7, [ip, #4]
    const int new_entry_index = next_free_entry_;
   13b92:	69e7      	ldr	r7, [r4, #28]
    ++next_free_entry_;
   13b94:	1c7b      	adds	r3, r7, #1
   13b96:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   13b98:	f8da 3000 	ldr.w	r3, [sl]
   13b9c:	42ab      	cmp	r3, r5
   13b9e:	dcd0      	bgt.n	13b42 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x120>
      ListEntry* current_entry = first_entry;
   13ba0:	4650      	mov	r0, sl
   13ba2:	e000      	b.n	13ba6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x184>
        current_entry = next_entry;
   13ba4:	4630      	mov	r0, r6
        const int next_entry_index = current_entry->next_entry_index;
   13ba6:	6883      	ldr	r3, [r0, #8]
        if (next_entry_index == -1) {
   13ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
   13bac:	d00c      	beq.n	13bc8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a6>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   13bae:	69a2      	ldr	r2, [r4, #24]
   13bb0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   13bb4:	eb02 0681 	add.w	r6, r2, r1, lsl #2
        if (next_entry->offset > candidate_offset) {
   13bb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   13bbc:	42aa      	cmp	r2, r5
   13bbe:	ddf1      	ble.n	13ba4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x182>
          new_entry->next_entry_index = current_entry->next_entry_index;
   13bc0:	f8cc 3008 	str.w	r3, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
   13bc4:	6087      	str	r7, [r0, #8]
          break;
   13bc6:	e7c1      	b.n	13b4c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
          current_entry->next_entry_index = new_entry_index;
   13bc8:	6087      	str	r7, [r0, #8]
          new_entry->next_entry_index = -1;
   13bca:	f8cc 3008 	str.w	r3, [ip, #8]
          break;
   13bce:	e7bd      	b.n	13b4c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x12a>
}
   13bd0:	b003      	add	sp, #12
   13bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd6:	4770      	bx	lr

00013bd8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   13bd8:	b570      	push	{r4, r5, r6, lr}
   13bda:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   13bdc:	f7ff ff21 	bl	13a22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   13be0:	68a3      	ldr	r3, [r4, #8]
   13be2:	b1d3      	cbz	r3, 13c1a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   13be4:	69a6      	ldr	r6, [r4, #24]
   13be6:	6a23      	ldr	r3, [r4, #32]
   13be8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13bec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  size_t max_size = 0;
   13bf0:	2000      	movs	r0, #0
   13bf2:	e007      	b.n	13c04 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x2c>
    if (entry->next_entry_index == -1) {
   13bf4:	689b      	ldr	r3, [r3, #8]
   13bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
   13bfa:	d00f      	beq.n	13c1c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   13bfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13c00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (entry) {
   13c04:	b153      	cbz	r3, 13c1c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x44>
        &requirements_[entry->requirements_index];
   13c06:	68e5      	ldr	r5, [r4, #12]
   13c08:	685a      	ldr	r2, [r3, #4]
   13c0a:	0111      	lsls	r1, r2, #4
    const size_t current_size = entry->offset + requirements->size;
   13c0c:	681a      	ldr	r2, [r3, #0]
   13c0e:	5869      	ldr	r1, [r5, r1]
   13c10:	440a      	add	r2, r1
    if (current_size > max_size) {
   13c12:	4290      	cmp	r0, r2
   13c14:	d2ee      	bcs.n	13bf4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
      max_size = current_size;
   13c16:	4610      	mov	r0, r2
   13c18:	e7ec      	b.n	13bf4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1c>
    return 0;
   13c1a:	2000      	movs	r0, #0
}
   13c1c:	bd70      	pop	{r4, r5, r6, pc}

00013c1e <TfLiteIntArrayGetSizeInBytes>:
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
   13c1e:	3001      	adds	r0, #1
}
   13c20:	0080      	lsls	r0, r0, #2
   13c22:	4770      	bx	lr

00013c24 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   13c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c28:	460e      	mov	r6, r1
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   13c2a:	2401      	movs	r4, #1
   13c2c:	fa04 fc00 	lsl.w	ip, r4, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   13c30:	1a12      	subs	r2, r2, r0
   13c32:	f1a2 0120 	sub.w	r1, r2, #32
   13c36:	f1c2 0320 	rsb	r3, r2, #32
   13c3a:	fa04 f101 	lsl.w	r1, r4, r1
   13c3e:	fa24 f303 	lsr.w	r3, r4, r3
   13c42:	ea41 0703 	orr.w	r7, r1, r3
   13c46:	fa04 f502 	lsl.w	r5, r4, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   13c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
   13c4e:	f7ec fbd5 	bl	3fc <__aeabi_i2d>
   13c52:	4680      	mov	r8, r0
   13c54:	4689      	mov	r9, r1
   13c56:	4628      	mov	r0, r5
   13c58:	4639      	mov	r1, r7
   13c5a:	f7ec fc0b 	bl	474 <__aeabi_l2d>
   13c5e:	4602      	mov	r2, r0
   13c60:	460b      	mov	r3, r1
   13c62:	4640      	mov	r0, r8
   13c64:	4649      	mov	r1, r9
   13c66:	f7ec fc33 	bl	4d0 <__aeabi_dmul>
   13c6a:	4680      	mov	r8, r0
   13c6c:	4689      	mov	r9, r1
      (1ll << input_left_shift);
   13c6e:	f1a6 0120 	sub.w	r1, r6, #32
   13c72:	f1c6 0320 	rsb	r3, r6, #32
   13c76:	fa04 f101 	lsl.w	r1, r4, r1
   13c7a:	fa24 f303 	lsr.w	r3, r4, r3
      (1ll << (total_signed_bits - input_integer_bits)) /
   13c7e:	fa04 f006 	lsl.w	r0, r4, r6
   13c82:	4319      	orrs	r1, r3
   13c84:	f7ec fbf6 	bl	474 <__aeabi_l2d>
   13c88:	4602      	mov	r2, r0
   13c8a:	460b      	mov	r3, r1
  const double max_input_rescaled =
   13c8c:	4640      	mov	r0, r8
   13c8e:	4649      	mov	r1, r9
   13c90:	f7ec fd48 	bl	724 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   13c94:	f7ed fe48 	bl	1928 <floor>
   13c98:	f7ec feb4 	bl	a04 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   13c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                             const TfLiteNode* node, int index) {
   13ca0:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13ca2:	680b      	ldr	r3, [r1, #0]
   13ca4:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13ca8:	2a00      	cmp	r2, #0
   13caa:	db10      	blt.n	13cce <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
   13cac:	428a      	cmp	r2, r1
   13cae:	da10      	bge.n	13cd2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13cb4:	f1b1 3fff 	cmp.w	r1, #4294967295
   13cb8:	d00d      	beq.n	13cd6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13cba:	2900      	cmp	r1, #0
   13cbc:	db0d      	blt.n	13cda <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13cbe:	6883      	ldr	r3, [r0, #8]
   13cc0:	b113      	cbz	r3, 13cc8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13cc2:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13cc6:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13cc8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13cca:	4798      	blx	r3
   13ccc:	e7fb      	b.n	13cc6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13cce:	2000      	movs	r0, #0
   13cd0:	e7f9      	b.n	13cc6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13cd2:	2000      	movs	r0, #0
   13cd4:	e7f7      	b.n	13cc6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13cd6:	2000      	movs	r0, #0
   13cd8:	e7f5      	b.n	13cc6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
   13cda:	2000      	movs	r0, #0
  return GetMutableInput(context, node, index);
   13cdc:	e7f3      	b.n	13cc6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>

00013cde <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
   13cde:	b508      	push	{r3, lr}
  const int tensor_index = ValidateTensorIndexing(
   13ce0:	684b      	ldr	r3, [r1, #4]
   13ce2:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
   13ce6:	2a00      	cmp	r2, #0
   13ce8:	db10      	blt.n	13d0c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
   13cea:	4291      	cmp	r1, r2
   13cec:	dd10      	ble.n	13d10 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x32>
    const int tensor_index = tensor_indices[index];
   13cee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
   13cf2:	f1b1 3fff 	cmp.w	r1, #4294967295
   13cf6:	d00d      	beq.n	13d14 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  if (tensor_index < 0) {
   13cf8:	2900      	cmp	r1, #0
   13cfa:	db0d      	blt.n	13d18 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x3a>
  if (context->tensors != nullptr) {
   13cfc:	6883      	ldr	r3, [r0, #8]
   13cfe:	b113      	cbz	r3, 13d06 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x28>
    return &context->tensors[tensor_index];
   13d00:	eb03 1081 	add.w	r0, r3, r1, lsl #6
}
   13d04:	bd08      	pop	{r3, pc}
    return context->GetTensor(context, tensor_index);
   13d06:	6d03      	ldr	r3, [r0, #80]	; 0x50
   13d08:	4798      	blx	r3
   13d0a:	e7fb      	b.n	13d04 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return nullptr;
   13d0c:	2000      	movs	r0, #0
   13d0e:	e7f9      	b.n	13d04 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13d10:	2000      	movs	r0, #0
   13d12:	e7f7      	b.n	13d04 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13d14:	2000      	movs	r0, #0
   13d16:	e7f5      	b.n	13d04 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
   13d18:	2000      	movs	r0, #0
   13d1a:	e7f3      	b.n	13d04 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>

00013d1c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                           const TfLiteNode* node, int index) {
   13d1c:	b508      	push	{r3, lr}
  return GetInput(context, node, index);
   13d1e:	f7ff ffbf 	bl	13ca0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
}
   13d22:	bd08      	pop	{r3, pc}

00013d24 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  switch (activation) {
   13d24:	1e43      	subs	r3, r0, #1
   13d26:	2b04      	cmp	r3, #4
   13d28:	d804      	bhi.n	13d34 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x10>
   13d2a:	e8df f003 	tbb	[pc, r3]
   13d2e:	0404      	.short	0x0404
   13d30:	0404      	.short	0x0404
   13d32:	04          	.byte	0x04
   13d33:	00          	.byte	0x00
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
   13d34:	2000      	movs	r0, #0
}
   13d36:	4770      	bx	lr

00013d38 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   13d38:	b118      	cbz	r0, 13d42 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xa>
   13d3a:	2801      	cmp	r0, #1
   13d3c:	d103      	bne.n	13d46 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xe>
      return kTfLitePaddingValid;
   13d3e:	2002      	movs	r0, #2
   13d40:	4770      	bx	lr
  switch (padding) {
   13d42:	2001      	movs	r0, #1
   13d44:	4770      	bx	lr
  return kTfLitePaddingUnknown;
   13d46:	2000      	movs	r0, #0
}
   13d48:	4770      	bx	lr

00013d4a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   13d4a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   13d4c:	b118      	cbz	r0, 13d56 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc>
  TFLITE_DCHECK(error_reporter != nullptr);
   13d4e:	b121      	cbz	r1, 13d5a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10>
  TFLITE_DCHECK(allocator != nullptr);
   13d50:	b12a      	cbz	r2, 13d5e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14>
  TFLITE_DCHECK(builtin_data != nullptr);
   13d52:	b133      	cbz	r3, 13d62 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
}
   13d54:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op != nullptr);
   13d56:	f002 fa20 	bl	1619a <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   13d5a:	f002 fa1e 	bl	1619a <abort>
  TFLITE_DCHECK(allocator != nullptr);
   13d5e:	f002 fa1c 	bl	1619a <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
   13d62:	f002 fa1a 	bl	1619a <abort>

00013d66 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   13d66:	b40e      	push	{r1, r2, r3}
   13d68:	b500      	push	{lr}
   13d6a:	b082      	sub	sp, #8
   13d6c:	aa03      	add	r2, sp, #12
   13d6e:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13d72:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13d74:	6803      	ldr	r3, [r0, #0]
   13d76:	689b      	ldr	r3, [r3, #8]
   13d78:	4798      	blx	r3
  va_end(args);
  return code;
}
   13d7a:	b002      	add	sp, #8
   13d7c:	f85d eb04 	ldr.w	lr, [sp], #4
   13d80:	b003      	add	sp, #12
   13d82:	4770      	bx	lr

00013d84 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   13d84:	b40c      	push	{r2, r3}
   13d86:	b500      	push	{lr}
   13d88:	b083      	sub	sp, #12
   13d8a:	aa04      	add	r2, sp, #16
   13d8c:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
   13d90:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   13d92:	6803      	ldr	r3, [r0, #0]
   13d94:	689b      	ldr	r3, [r3, #8]
   13d96:	4798      	blx	r3
  va_end(args);
  return code;
}
   13d98:	b003      	add	sp, #12
   13d9a:	f85d eb04 	ldr.w	lr, [sp], #4
   13d9e:	b002      	add	sp, #8
   13da0:	4770      	bx	lr

00013da2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
   13da2:	b570      	push	{r4, r5, r6, lr}
   13da4:	b082      	sub	sp, #8
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
   13da6:	b368      	cbz	r0, 13e04 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x62>
   13da8:	4604      	mov	r4, r0
    return data_ - ReadScalar<soffset_t>(data_);
   13daa:	f7ff fa99 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13dae:	1a25      	subs	r5, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13db0:	4628      	mov	r0, r5
   13db2:	f7ff fa9b 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13db6:	280a      	cmp	r0, #10
   13db8:	d926      	bls.n	13e08 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
   13dba:	f105 000a 	add.w	r0, r5, #10
   13dbe:	f7ff fa95 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13dc2:	b318      	cbz	r0, 13e0c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6a>
   13dc4:	4420      	add	r0, r4
   13dc6:	f7ff fa8b 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
   13dca:	b2c5      	uxtb	r5, r0

  return std::max(
      op_code->builtin_code(),
   13dcc:	f88d 5006 	strb.w	r5, [sp, #6]
    return data_ - ReadScalar<soffset_t>(data_);
   13dd0:	4620      	mov	r0, r4
   13dd2:	f7ff fa85 	bl	132e0 <_ZN11flatbuffers10ReadScalarIiEET_PKv>
   13dd6:	1a26      	subs	r6, r4, r0
    auto vtsize = ReadScalar<voffset_t>(vtable);
   13dd8:	4630      	mov	r0, r6
   13dda:	f7ff fa87 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13dde:	2804      	cmp	r0, #4
   13de0:	d916      	bls.n	13e10 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x6e>
   13de2:	1d30      	adds	r0, r6, #4
   13de4:	f7ff fa82 	bl	132ec <_ZN11flatbuffers10ReadScalarItEET_PKv>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13de8:	b1a0      	cbz	r0, 13e14 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x72>
   13dea:	4420      	add	r0, r4
   13dec:	f7ff fa84 	bl	132f8 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
   13df0:	b2c0      	uxtb	r0, r0
   13df2:	f88d 0007 	strb.w	r0, [sp, #7]
      if (__a < __b)
   13df6:	42a8      	cmp	r0, r5
   13df8:	d80e      	bhi.n	13e18 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x76>
      return __a;
   13dfa:	f10d 0306 	add.w	r3, sp, #6
}
   13dfe:	7818      	ldrb	r0, [r3, #0]
   13e00:	b002      	add	sp, #8
   13e02:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(op_code != nullptr);
   13e04:	f002 f9c9 	bl	1619a <abort>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13e08:	2000      	movs	r0, #0
   13e0a:	e7da      	b.n	13dc2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x20>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13e0c:	2000      	movs	r0, #0
   13e0e:	e7dc      	b.n	13dca <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x28>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   13e10:	2000      	movs	r0, #0
   13e12:	e7e9      	b.n	13de8 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x46>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   13e14:	2000      	movs	r0, #0
   13e16:	e7eb      	b.n	13df0 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x4e>
	return __b;
   13e18:	f10d 0307 	add.w	r3, sp, #7
   13e1c:	e7ef      	b.n	13dfe <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5c>

00013e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13e1e:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13e20:	b108      	cbz	r0, 13e26 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x8>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
   13e22:	6800      	ldr	r0, [r0, #0]
   13e24:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13e26:	f002 f9b8 	bl	1619a <abort>

00013e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13e2a:	b108      	cbz	r0, 13e30 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x6>
   13e2c:	6800      	ldr	r0, [r0, #0]
   13e2e:	4770      	bx	lr
}
   13e30:	4770      	bx	lr

00013e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13e32:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13e34:	b108      	cbz	r0, 13e3a <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13e36:	6800      	ldr	r0, [r0, #0]
   13e38:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13e3a:	f002 f9ae 	bl	1619a <abort>

00013e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13e3e:	b108      	cbz	r0, 13e44 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x6>
   13e40:	6800      	ldr	r0, [r0, #0]
   13e42:	4770      	bx	lr
}
   13e44:	4770      	bx	lr

00013e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
}
   13e46:	4770      	bx	lr

00013e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>:
}
   13e48:	4008      	ands	r0, r1
   13e4a:	4770      	bx	lr

00013e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>:
}
   13e4c:	4108      	asrs	r0, r1
   13e4e:	4770      	bx	lr

00013e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>:
}
   13e50:	4408      	add	r0, r1
   13e52:	4770      	bx	lr

00013e54 <_ZN8gemmlowp6BitNotIiEET_S1_>:
}
   13e54:	43c0      	mvns	r0, r0
   13e56:	4770      	bx	lr

00013e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
   13e58:	b508      	push	{r3, lr}
  return a ? BitNot(zero) : zero;
   13e5a:	b110      	cbz	r0, 13e62 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_+0xa>
   13e5c:	2000      	movs	r0, #0
   13e5e:	f7ff fff9 	bl	13e54 <_ZN8gemmlowp6BitNotIiEET_S1_>
}
   13e62:	bd08      	pop	{r3, pc}

00013e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
   13e64:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a < b);
   13e66:	4288      	cmp	r0, r1
   13e68:	bfac      	ite	ge
   13e6a:	2000      	movge	r0, #0
   13e6c:	2001      	movlt	r0, #1
   13e6e:	f7ff fff3 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13e72:	bd08      	pop	{r3, pc}

00013e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
   13e74:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(a > b);
   13e76:	4288      	cmp	r0, r1
   13e78:	bfd4      	ite	le
   13e7a:	2000      	movle	r0, #0
   13e7c:	2001      	movgt	r0, #1
   13e7e:	f7ff ffeb 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   13e82:	bd08      	pop	{r3, pc}

00013e84 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13e84:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13e86:	b108      	cbz	r0, 13e8c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13e88:	6800      	ldr	r0, [r0, #0]
   13e8a:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13e8c:	f002 f985 	bl	1619a <abort>

00013e90 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   13e90:	b108      	cbz	r0, 13e96 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x6>
   13e92:	6800      	ldr	r0, [r0, #0]
   13e94:	4770      	bx	lr
}
   13e96:	4770      	bx	lr

00013e98 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13e98:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13e9a:	b108      	cbz	r0, 13ea0 <_ZN6tflite5micro13GetTensorDataIiEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13e9c:	6800      	ldr	r0, [r0, #0]
   13e9e:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13ea0:	f002 f97b 	bl	1619a <abort>

00013ea4 <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
   13ea4:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
   13ea6:	b108      	cbz	r0, 13eac <_ZN6tflite5micro13GetTensorDataIxEEPKT_PK16TfLiteEvalTensor+0x8>
}
   13ea8:	6800      	ldr	r0, [r0, #0]
   13eaa:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(tensor != nullptr);
   13eac:	f002 f975 	bl	1619a <abort>

00013eb0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   13eb0:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13eb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13eb4:	b113      	cbz	r3, 13ebc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   13eb6:	2134      	movs	r1, #52	; 0x34
   13eb8:	4798      	blx	r3
}
   13eba:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   13ebc:	f002 f96d 	bl	1619a <abort>

00013ec0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   13ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ec4:	b0a3      	sub	sp, #140	; 0x8c
   13ec6:	9217      	str	r2, [sp, #92]	; 0x5c
   13ec8:	461e      	mov	r6, r3
   13eca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   13ecc:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int stride_width = params.stride_width;
   13ece:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   13ed2:	920c      	str	r2, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   13ed4:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   13ed8:	920d      	str	r2, [sp, #52]	; 0x34
  const int dilation_width_factor = params.dilation_width_factor;
   13eda:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   13ede:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_height_factor = params.dilation_height_factor;
   13ee0:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   13ee4:	920f      	str	r2, [sp, #60]	; 0x3c
  const int pad_width = params.padding_values.width;
   13ee6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   13eea:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   13eec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   13ef0:	9211      	str	r2, [sp, #68]	; 0x44
  const float output_activation_min = params.float_activation_min;
   13ef2:	6b02      	ldr	r2, [r0, #48]	; 0x30
   13ef4:	9212      	str	r2, [sp, #72]	; 0x48
  const float output_activation_max = params.float_activation_max;
   13ef6:	6b42      	ldr	r2, [r0, #52]	; 0x34
   13ef8:	9204      	str	r2, [sp, #16]
  inline int32_t DimensionsCount() const { return size_; }
   13efa:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13efc:	2a04      	cmp	r2, #4
   13efe:	d173      	bne.n	13fe8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x128>
   13f00:	468b      	mov	fp, r1
   13f02:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13f04:	2a04      	cmp	r2, #4
   13f06:	d171      	bne.n	13fec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12c>
   13f08:	683a      	ldr	r2, [r7, #0]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13f0a:	2a04      	cmp	r2, #4
   13f0c:	d170      	bne.n	13ff0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x130>
    TFLITE_DCHECK_LT(i, size_);
   13f0e:	680a      	ldr	r2, [r1, #0]
   13f10:	2a00      	cmp	r2, #0
   13f12:	dd6f      	ble.n	13ff4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f14:	2a05      	cmp	r2, #5
   13f16:	dd6f      	ble.n	13ff8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x138>
   13f18:	684a      	ldr	r2, [r1, #4]
   13f1a:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13f1c:	6839      	ldr	r1, [r7, #0]
   13f1e:	2900      	cmp	r1, #0
   13f20:	dd6c      	ble.n	13ffc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x13c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f22:	2905      	cmp	r1, #5
   13f24:	dd6c      	ble.n	14000 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x140>
   13f26:	6879      	ldr	r1, [r7, #4]
   13f28:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13f2a:	4291      	cmp	r1, r2
   13f2c:	d16a      	bne.n	14004 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13f2e:	9221      	str	r2, [sp, #132]	; 0x84
    TFLITE_DCHECK_LT(i, size_);
   13f30:	6839      	ldr	r1, [r7, #0]
   13f32:	2900      	cmp	r1, #0
   13f34:	dd68      	ble.n	14008 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x148>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f36:	2905      	cmp	r1, #5
   13f38:	dd68      	ble.n	1400c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x14c>
   13f3a:	6879      	ldr	r1, [r7, #4]
   13f3c:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13f3e:	9120      	str	r1, [sp, #128]	; 0x80
      if (__b < __a)
   13f40:	428a      	cmp	r2, r1
   13f42:	dc65      	bgt.n	14010 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x150>
      return __a;
   13f44:	aa21      	add	r2, sp, #132	; 0x84
   13f46:	6812      	ldr	r2, [r2, #0]
   13f48:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   13f4a:	f8db 2000 	ldr.w	r2, [fp]
   13f4e:	2a03      	cmp	r2, #3
   13f50:	dd60      	ble.n	14014 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f52:	2a05      	cmp	r2, #5
   13f54:	dd60      	ble.n	14018 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x158>
   13f56:	f8db 2004 	ldr.w	r2, [fp, #4]
   13f5a:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   13f5c:	6831      	ldr	r1, [r6, #0]
   13f5e:	2903      	cmp	r1, #3
   13f60:	dd5d      	ble.n	1401e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x15e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f62:	2905      	cmp	r1, #5
   13f64:	dd5d      	ble.n	14022 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x162>
   13f66:	6871      	ldr	r1, [r6, #4]
   13f68:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13f6a:	4291      	cmp	r1, r2
   13f6c:	d15b      	bne.n	14026 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13f6e:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   13f70:	6831      	ldr	r1, [r6, #0]
   13f72:	2903      	cmp	r1, #3
   13f74:	dd59      	ble.n	1402a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f76:	2905      	cmp	r1, #5
   13f78:	dd59      	ble.n	1402e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x16e>
   13f7a:	6871      	ldr	r1, [r6, #4]
   13f7c:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13f7e:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   13f80:	428a      	cmp	r2, r1
   13f82:	dc56      	bgt.n	14032 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x172>
      return __a;
   13f84:	aa1f      	add	r2, sp, #124	; 0x7c
   13f86:	6812      	ldr	r2, [r2, #0]
   13f88:	9215      	str	r2, [sp, #84]	; 0x54
    TFLITE_DCHECK_LT(i, size_);
   13f8a:	6832      	ldr	r2, [r6, #0]
   13f8c:	2a00      	cmp	r2, #0
   13f8e:	dd52      	ble.n	14036 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f90:	2a05      	cmp	r2, #5
   13f92:	dd52      	ble.n	1403a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17a>
   13f94:	6872      	ldr	r2, [r6, #4]
   13f96:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   13f98:	6839      	ldr	r1, [r7, #0]
   13f9a:	2903      	cmp	r1, #3
   13f9c:	dd4f      	ble.n	1403e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13f9e:	2905      	cmp	r1, #5
   13fa0:	dd4f      	ble.n	14042 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x182>
   13fa2:	6879      	ldr	r1, [r7, #4]
   13fa4:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   13fa6:	4291      	cmp	r1, r2
   13fa8:	d14d      	bne.n	14046 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13faa:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   13fac:	6839      	ldr	r1, [r7, #0]
   13fae:	2903      	cmp	r1, #3
   13fb0:	dd4b      	ble.n	1404a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13fb2:	2905      	cmp	r1, #5
   13fb4:	dd4b      	ble.n	1404e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18e>
   13fb6:	6879      	ldr	r1, [r7, #4]
   13fb8:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   13fba:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   13fbc:	428a      	cmp	r2, r1
   13fbe:	dc48      	bgt.n	14052 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x192>
      return __a;
   13fc0:	aa1d      	add	r2, sp, #116	; 0x74
   13fc2:	6812      	ldr	r2, [r2, #0]
   13fc4:	9205      	str	r2, [sp, #20]
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
   13fc6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   13fc8:	2a00      	cmp	r2, #0
   13fca:	d049      	beq.n	14060 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   13fcc:	681c      	ldr	r4, [r3, #0]
   13fce:	2c05      	cmp	r4, #5
   13fd0:	dd41      	ble.n	14056 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
   13fd2:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   13fd4:	2200      	movs	r2, #0
    int buffer_size = 1;
   13fd6:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   13fd8:	42a2      	cmp	r2, r4
   13fda:	da3e      	bge.n	1405a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19a>
      buffer_size *= dims_data[i];
   13fdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13fe0:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   13fe4:	3201      	adds	r2, #1
   13fe6:	e7f7      	b.n	13fd8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x118>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   13fe8:	f002 f8d7 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   13fec:	f002 f8d5 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   13ff0:	f002 f8d3 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   13ff4:	f002 f8d1 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   13ff8:	684a      	ldr	r2, [r1, #4]
   13ffa:	e78f      	b.n	13f1c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5c>
    TFLITE_DCHECK_LT(i, size_);
   13ffc:	f002 f8cd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14000:	6879      	ldr	r1, [r7, #4]
   14002:	e792      	b.n	13f2a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14004:	f002 f8c9 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   14008:	f002 f8c7 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1400c:	6879      	ldr	r1, [r7, #4]
   1400e:	e796      	b.n	13f3e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x7e>
	return __b;
   14010:	aa20      	add	r2, sp, #128	; 0x80
   14012:	e798      	b.n	13f46 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x86>
    TFLITE_DCHECK_LT(i, size_);
   14014:	f002 f8c1 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14018:	f8db 2010 	ldr.w	r2, [fp, #16]
   1401c:	e79e      	b.n	13f5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x9c>
    TFLITE_DCHECK_LT(i, size_);
   1401e:	f002 f8bc 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14022:	6931      	ldr	r1, [r6, #16]
   14024:	e7a1      	b.n	13f6a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xaa>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14026:	f002 f8b8 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   1402a:	f002 f8b6 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1402e:	6931      	ldr	r1, [r6, #16]
   14030:	e7a5      	b.n	13f7e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xbe>
   14032:	aa1e      	add	r2, sp, #120	; 0x78
   14034:	e7a7      	b.n	13f86 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xc6>
    TFLITE_DCHECK_LT(i, size_);
   14036:	f002 f8b0 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1403a:	6872      	ldr	r2, [r6, #4]
   1403c:	e7ac      	b.n	13f98 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd8>
    TFLITE_DCHECK_LT(i, size_);
   1403e:	f002 f8ac 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14042:	6939      	ldr	r1, [r7, #16]
   14044:	e7af      	b.n	13fa6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14046:	f002 f8a8 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   1404a:	f002 f8a6 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1404e:	6939      	ldr	r1, [r7, #16]
   14050:	e7b3      	b.n	13fba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xfa>
   14052:	aa1c      	add	r2, sp, #112	; 0x70
   14054:	e7b5      	b.n	13fc2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14056:	3304      	adds	r3, #4
   14058:	e7bc      	b.n	13fd4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1405a:	9b05      	ldr	r3, [sp, #20]
   1405c:	4299      	cmp	r1, r3
   1405e:	d161      	bne.n	14124 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x264>
    TFLITE_DCHECK_LT(i, size_);
   14060:	f8db 3000 	ldr.w	r3, [fp]
   14064:	2b01      	cmp	r3, #1
   14066:	dd5f      	ble.n	14128 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x268>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14068:	2b05      	cmp	r3, #5
   1406a:	dd5f      	ble.n	1412c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x26c>
   1406c:	f8db 3004 	ldr.w	r3, [fp, #4]
   14070:	685b      	ldr	r3, [r3, #4]
   14072:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   14074:	f8db 3000 	ldr.w	r3, [fp]
   14078:	2b02      	cmp	r3, #2
   1407a:	dd5b      	ble.n	14134 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x274>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1407c:	2b05      	cmp	r3, #5
   1407e:	dd5b      	ble.n	14138 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x278>
   14080:	f8db 3004 	ldr.w	r3, [fp, #4]
   14084:	689b      	ldr	r3, [r3, #8]
   14086:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   14088:	6833      	ldr	r3, [r6, #0]
   1408a:	2b01      	cmp	r3, #1
   1408c:	dd58      	ble.n	14140 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x280>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1408e:	2b05      	cmp	r3, #5
   14090:	dd58      	ble.n	14144 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
   14092:	6873      	ldr	r3, [r6, #4]
   14094:	685b      	ldr	r3, [r3, #4]
   14096:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   14098:	6833      	ldr	r3, [r6, #0]
   1409a:	2b02      	cmp	r3, #2
   1409c:	dd55      	ble.n	1414a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1409e:	2b05      	cmp	r3, #5
   140a0:	dd55      	ble.n	1414e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x28e>
   140a2:	6873      	ldr	r3, [r6, #4]
   140a4:	689b      	ldr	r3, [r3, #8]
   140a6:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   140a8:	683b      	ldr	r3, [r7, #0]
   140aa:	2b01      	cmp	r3, #1
   140ac:	dd52      	ble.n	14154 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   140ae:	2b05      	cmp	r3, #5
   140b0:	dd52      	ble.n	14158 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x298>
   140b2:	687b      	ldr	r3, [r7, #4]
   140b4:	685b      	ldr	r3, [r3, #4]
   140b6:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   140b8:	683b      	ldr	r3, [r7, #0]
   140ba:	2b02      	cmp	r3, #2
   140bc:	dd4f      	ble.n	1415e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x29e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   140be:	2b05      	cmp	r3, #5
   140c0:	dd4f      	ble.n	14162 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a2>
   140c2:	687b      	ldr	r3, [r7, #4]
   140c4:	689b      	ldr	r3, [r3, #8]
   140c6:	9306      	str	r3, [sp, #24]
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
   140c8:	f04f 0a00 	mov.w	sl, #0
   140cc:	46d1      	mov	r9, sl
   140ce:	46da      	mov	sl, fp
   140d0:	46b3      	mov	fp, r6
   140d2:	463e      	mov	r6, r7
   140d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   140d6:	4599      	cmp	r9, r3
   140d8:	f280 8143 	bge.w	14362 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x4a2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   140dc:	2300      	movs	r3, #0
   140de:	9300      	str	r3, [sp, #0]
   140e0:	46c8      	mov	r8, r9
   140e2:	46d9      	mov	r9, fp
   140e4:	46d3      	mov	fp, sl
   140e6:	46b2      	mov	sl, r6
   140e8:	9b00      	ldr	r3, [sp, #0]
   140ea:	9907      	ldr	r1, [sp, #28]
   140ec:	428b      	cmp	r3, r1
   140ee:	f280 8132 	bge.w	14356 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x496>
      const int in_y_origin = (out_y * stride_height) - pad_height;
   140f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   140f4:	fb02 f303 	mul.w	r3, r2, r3
   140f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   140fa:	1a9b      	subs	r3, r3, r2
   140fc:	9313      	str	r3, [sp, #76]	; 0x4c
      for (int out_x = 0; out_x < output_width; ++out_x) {
   140fe:	2300      	movs	r3, #0
   14100:	9301      	str	r3, [sp, #4]
   14102:	4647      	mov	r7, r8
   14104:	46d8      	mov	r8, fp
   14106:	9b01      	ldr	r3, [sp, #4]
   14108:	9906      	ldr	r1, [sp, #24]
   1410a:	428b      	cmp	r3, r1
   1410c:	f280 811d 	bge.w	1434a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48a>
        const int in_x_origin = (out_x * stride_width) - pad_width;
   14110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14112:	fb02 f303 	mul.w	r3, r2, r3
   14116:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14118:	1a9b      	subs	r3, r3, r2
   1411a:	9314      	str	r3, [sp, #80]	; 0x50
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   1411c:	f04f 0b00 	mov.w	fp, #0
   14120:	463e      	mov	r6, r7
   14122:	e0f3      	b.n	1430c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   14124:	f002 f839 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   14128:	f002 f837 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1412c:	f8db 3008 	ldr.w	r3, [fp, #8]
   14130:	930b      	str	r3, [sp, #44]	; 0x2c
   14132:	e79f      	b.n	14074 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1b4>
    TFLITE_DCHECK_LT(i, size_);
   14134:	f002 f831 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14138:	f8db 300c 	ldr.w	r3, [fp, #12]
   1413c:	930a      	str	r3, [sp, #40]	; 0x28
   1413e:	e7a3      	b.n	14088 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
   14140:	f002 f82b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14144:	68b3      	ldr	r3, [r6, #8]
   14146:	9309      	str	r3, [sp, #36]	; 0x24
   14148:	e7a6      	b.n	14098 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d8>
    TFLITE_DCHECK_LT(i, size_);
   1414a:	f002 f826 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1414e:	68f3      	ldr	r3, [r6, #12]
   14150:	9308      	str	r3, [sp, #32]
   14152:	e7a9      	b.n	140a8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
    TFLITE_DCHECK_LT(i, size_);
   14154:	f002 f821 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14158:	68bb      	ldr	r3, [r7, #8]
   1415a:	9307      	str	r3, [sp, #28]
   1415c:	e7ac      	b.n	140b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f8>
    TFLITE_DCHECK_LT(i, size_);
   1415e:	f002 f81c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14162:	68fb      	ldr	r3, [r7, #12]
   14164:	9306      	str	r3, [sp, #24]
   14166:	e7af      	b.n	140c8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x208>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14168:	f002 f817 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1416c:	f002 f815 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14170:	f002 f813 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14174:	f002 f811 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14178:	f002 f80f 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1417c:	f002 f80d 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14180:	f002 f80b 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14184:	f002 f809 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14188:	f002 f807 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1418c:	f002 f805 	bl	1619a <abort>
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   14190:	3501      	adds	r5, #1
   14192:	9b08      	ldr	r3, [sp, #32]
   14194:	429d      	cmp	r5, r3
   14196:	da69      	bge.n	1426c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ac>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
   14198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1419a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1419c:	fb03 2a05 	mla	sl, r3, r5, r2

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   141a0:	f1ba 0f00 	cmp.w	sl, #0
   141a4:	dbf4      	blt.n	14190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   141a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141a8:	459a      	cmp	sl, r3
   141aa:	daf1      	bge.n	14190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   141ac:	2e00      	cmp	r6, #0
   141ae:	dbef      	blt.n	14190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   141b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   141b2:	429e      	cmp	r6, r3
   141b4:	daec      	bge.n	14190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
   141b6:	2400      	movs	r4, #0

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   141b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   141ba:	429c      	cmp	r4, r3
   141bc:	dae8      	bge.n	14190 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d0>
  inline int32_t DimensionsCount() const { return size_; }
   141be:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   141c2:	2b04      	cmp	r3, #4
   141c4:	d1d0      	bne.n	14168 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2a8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   141c6:	9a03      	ldr	r2, [sp, #12]
   141c8:	2a00      	cmp	r2, #0
   141ca:	dbcf      	blt.n	1416c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
   141cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   141d0:	429a      	cmp	r2, r3
   141d2:	dacb      	bge.n	1416c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2ac>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   141d4:	2e00      	cmp	r6, #0
   141d6:	dbcb      	blt.n	14170 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
   141d8:	f8d8 1008 	ldr.w	r1, [r8, #8]
   141dc:	428e      	cmp	r6, r1
   141de:	dac7      	bge.n	14170 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   141e0:	f1ba 0f00 	cmp.w	sl, #0
   141e4:	dbc6      	blt.n	14174 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
   141e6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   141ea:	4592      	cmp	sl, r2
   141ec:	dac2      	bge.n	14174 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   141ee:	2c00      	cmp	r4, #0
   141f0:	dbc2      	blt.n	14178 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
   141f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   141f6:	429c      	cmp	r4, r3
   141f8:	dabe      	bge.n	14178 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   141fa:	9803      	ldr	r0, [sp, #12]
   141fc:	fb01 6100 	mla	r1, r1, r0, r6
   14200:	fb01 a202 	mla	r2, r1, r2, sl
   14204:	fb02 4303 	mla	r3, r2, r3, r4
                float input_value = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
   14208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1420a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   1420e:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14212:	2b04      	cmp	r3, #4
   14214:	d1b2      	bne.n	1417c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2bc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14216:	f1bb 0f00 	cmp.w	fp, #0
   1421a:	dbb1      	blt.n	14180 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
   1421c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14220:	459b      	cmp	fp, r3
   14222:	daad      	bge.n	14180 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14224:	2f00      	cmp	r7, #0
   14226:	dbad      	blt.n	14184 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
   14228:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1422c:	428f      	cmp	r7, r1
   1422e:	daa9      	bge.n	14184 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14230:	2d00      	cmp	r5, #0
   14232:	dba9      	blt.n	14188 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
   14234:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14238:	4295      	cmp	r5, r2
   1423a:	daa5      	bge.n	14188 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1423c:	2c00      	cmp	r4, #0
   1423e:	dba5      	blt.n	1418c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
   14240:	f8d9 3010 	ldr.w	r3, [r9, #16]
   14244:	429c      	cmp	r4, r3
   14246:	daa1      	bge.n	1418c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14248:	fb01 710b 	mla	r1, r1, fp, r7
   1424c:	fb01 5202 	mla	r2, r1, r2, r5
   14250:	fb02 4303 	mla	r3, r2, r3, r4
                float filter_value = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
   14254:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   14256:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1425a:	f7ec fd59 	bl	d10 <__aeabi_fmul>
   1425e:	4601      	mov	r1, r0
   14260:	9802      	ldr	r0, [sp, #8]
   14262:	f7ec fc4d 	bl	b00 <__addsf3>
   14266:	9002      	str	r0, [sp, #8]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   14268:	3401      	adds	r4, #1
   1426a:	e7a5      	b.n	141b8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f8>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1426c:	3701      	adds	r7, #1
   1426e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14270:	429f      	cmp	r7, r3
   14272:	da05      	bge.n	14280 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3c0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
   14274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14278:	fb03 2607 	mla	r6, r3, r7, r2
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1427c:	2500      	movs	r5, #0
   1427e:	e788      	b.n	14192 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d2>
   14280:	9e03      	ldr	r6, [sp, #12]
   14282:	f8dd a0bc 	ldr.w	sl, [sp, #188]	; 0xbc
              }
            }
          }
          float bias_value = 0.0f;
          if (bias_data) {
   14286:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   14288:	2b00      	cmp	r3, #0
   1428a:	d049      	beq.n	14320 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x460>
            bias_value = bias_data[out_channel];
   1428c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
   14290:	9802      	ldr	r0, [sp, #8]
   14292:	f7ec fc35 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   14296:	f8da 3000 	ldr.w	r3, [sl]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1429a:	2b04      	cmp	r3, #4
   1429c:	d142      	bne.n	14324 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x464>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1429e:	2e00      	cmp	r6, #0
   142a0:	db42      	blt.n	14328 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
   142a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   142a6:	429e      	cmp	r6, r3
   142a8:	da3e      	bge.n	14328 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x468>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   142aa:	9b00      	ldr	r3, [sp, #0]
   142ac:	2b00      	cmp	r3, #0
   142ae:	db3d      	blt.n	1432c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
   142b0:	f8da 2008 	ldr.w	r2, [sl, #8]
   142b4:	4293      	cmp	r3, r2
   142b6:	da39      	bge.n	1432c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x46c>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   142b8:	9901      	ldr	r1, [sp, #4]
   142ba:	2900      	cmp	r1, #0
   142bc:	db38      	blt.n	14330 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
   142be:	f8da 300c 	ldr.w	r3, [sl, #12]
   142c2:	4299      	cmp	r1, r3
   142c4:	da34      	bge.n	14330 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x470>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   142c6:	f1bb 0f00 	cmp.w	fp, #0
   142ca:	db33      	blt.n	14334 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
   142cc:	f8da 4010 	ldr.w	r4, [sl, #16]
   142d0:	45a3      	cmp	fp, r4
   142d2:	da2f      	bge.n	14334 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   142d4:	9900      	ldr	r1, [sp, #0]
   142d6:	fb02 1206 	mla	r2, r2, r6, r1
   142da:	9901      	ldr	r1, [sp, #4]
   142dc:	fb02 1303 	mla	r3, r2, r3, r1
   142e0:	fb03 b404 	mla	r4, r3, r4, fp
   142e4:	9019      	str	r0, [sp, #100]	; 0x64
   142e6:	9912      	ldr	r1, [sp, #72]	; 0x48
   142e8:	911a      	str	r1, [sp, #104]	; 0x68
   142ea:	9b04      	ldr	r3, [sp, #16]
   142ec:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   142ee:	f7ec fead 	bl	104c <__aeabi_fcmplt>
   142f2:	bb08      	cbnz	r0, 14338 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x478>
      return __a;
   142f4:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   142f6:	6829      	ldr	r1, [r5, #0]
   142f8:	9804      	ldr	r0, [sp, #16]
   142fa:	f7ec fea7 	bl	104c <__aeabi_fcmplt>
   142fe:	b9e8      	cbnz	r0, 1433c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x47c>
  return min(max(x, output_activation_min), output_activation_max);
   14300:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   14302:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   14304:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   14308:	f10b 0b01 	add.w	fp, fp, #1
   1430c:	9b05      	ldr	r3, [sp, #20]
   1430e:	459b      	cmp	fp, r3
   14310:	da16      	bge.n	14340 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x480>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   14312:	2700      	movs	r7, #0
          float total = 0.f;
   14314:	2300      	movs	r3, #0
   14316:	9302      	str	r3, [sp, #8]
   14318:	9603      	str	r6, [sp, #12]
   1431a:	f8cd a0bc 	str.w	sl, [sp, #188]	; 0xbc
   1431e:	e7a6      	b.n	1426e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3ae>
          float bias_value = 0.0f;
   14320:	2100      	movs	r1, #0
   14322:	e7b5      	b.n	14290 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x3d0>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14324:	f001 ff39 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14328:	f001 ff37 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1432c:	f001 ff35 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14330:	f001 ff33 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14334:	f001 ff31 	bl	1619a <abort>
	return __b;
   14338:	ad1a      	add	r5, sp, #104	; 0x68
   1433a:	e7dc      	b.n	142f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x436>
	return __b;
   1433c:	ad1b      	add	r5, sp, #108	; 0x6c
   1433e:	e7df      	b.n	14300 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x440>
   14340:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14342:	9b01      	ldr	r3, [sp, #4]
   14344:	3301      	adds	r3, #1
   14346:	9301      	str	r3, [sp, #4]
   14348:	e6dd      	b.n	14106 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x246>
   1434a:	46c3      	mov	fp, r8
   1434c:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1434e:	9b00      	ldr	r3, [sp, #0]
   14350:	3301      	adds	r3, #1
   14352:	9300      	str	r3, [sp, #0]
   14354:	e6c8      	b.n	140e8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x228>
   14356:	4656      	mov	r6, sl
   14358:	46da      	mov	sl, fp
   1435a:	46cb      	mov	fp, r9
  for (int batch = 0; batch < batches; ++batch) {
   1435c:	f108 0901 	add.w	r9, r8, #1
   14360:	e6b8      	b.n	140d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x214>
                                           output_activation_max);
        }
      }
    }
  }
}
   14362:	b023      	add	sp, #140	; 0x8c
   14364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014368 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                               const OpDataConv& data) {
   14368:	b570      	push	{r4, r5, r6, lr}
   1436a:	4604      	mov	r4, r0
   1436c:	460e      	mov	r6, r1
   1436e:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   14370:	6913      	ldr	r3, [r2, #16]
   14372:	425b      	negs	r3, r3
   14374:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   14376:	6953      	ldr	r3, [r2, #20]
   14378:	425b      	negs	r3, r3
   1437a:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   1437c:	6993      	ldr	r3, [r2, #24]
   1437e:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   14380:	69d3      	ldr	r3, [r2, #28]
   14382:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   14384:	6a13      	ldr	r3, [r2, #32]
   14386:	425b      	negs	r3, r3
   14388:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   1438a:	7808      	ldrb	r0, [r1, #0]
   1438c:	f000 fb54 	bl	14a38 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   14390:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   14392:	686b      	ldr	r3, [r5, #4]
   14394:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   14396:	682b      	ldr	r3, [r5, #0]
   14398:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   1439a:	68b3      	ldr	r3, [r6, #8]
   1439c:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   1439e:	6873      	ldr	r3, [r6, #4]
   143a0:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   143a2:	6973      	ldr	r3, [r6, #20]
   143a4:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   143a6:	6933      	ldr	r3, [r6, #16]
   143a8:	81e3      	strh	r3, [r4, #14]
  op_params.quantized_activation_min = data.output_activation_min;
   143aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   143ac:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   143ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   143b0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   143b2:	4620      	mov	r0, r4
   143b4:	bd70      	pop	{r4, r5, r6, pc}

000143b6 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
                           const OpDataConv& data) {
   143b6:	b570      	push	{r4, r5, r6, lr}
   143b8:	4604      	mov	r4, r0
   143ba:	460d      	mov	r5, r1
   143bc:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   143be:	f100 0234 	add.w	r2, r0, #52	; 0x34
   143c2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   143c6:	7b28      	ldrb	r0, [r5, #12]
   143c8:	f7f6 f906 	bl	a5d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   143cc:	7828      	ldrb	r0, [r5, #0]
   143ce:	f000 fb33 	bl	14a38 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   143d2:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   143d4:	6833      	ldr	r3, [r6, #0]
   143d6:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   143d8:	6873      	ldr	r3, [r6, #4]
   143da:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   143dc:	686b      	ldr	r3, [r5, #4]
   143de:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   143e0:	68ab      	ldr	r3, [r5, #8]
   143e2:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   143e4:	692b      	ldr	r3, [r5, #16]
   143e6:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   143e8:	696b      	ldr	r3, [r5, #20]
   143ea:	8223      	strh	r3, [r4, #16]
}
   143ec:	4620      	mov	r0, r4
   143ee:	bd70      	pop	{r4, r5, r6, pc}

000143f0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   143f0:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   143f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   143f4:	b113      	cbz	r3, 143fc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
   143f6:	2134      	movs	r1, #52	; 0x34
   143f8:	4798      	blx	r3
}
   143fa:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   143fc:	f001 fecd 	bl	1619a <abort>

00014400 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   14400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14404:	b0a1      	sub	sp, #132	; 0x84
   14406:	9217      	str	r2, [sp, #92]	; 0x5c
   14408:	461e      	mov	r6, r3
   1440a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1440c:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
  const int stride_width = params.stride_width;
   14410:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   14414:	920d      	str	r2, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   14416:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
   1441a:	920e      	str	r2, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   1441c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   14420:	920f      	str	r2, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   14422:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   14426:	9210      	str	r2, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   14428:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   1442c:	9211      	str	r2, [sp, #68]	; 0x44
  const int pad_height = params.padding_values.height;
   1442e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   14432:	9212      	str	r2, [sp, #72]	; 0x48
  const int depth_multiplier = params.depth_multiplier;
   14434:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   14438:	9205      	str	r2, [sp, #20]
  const float output_activation_min = params.float_activation_min;
   1443a:	6b02      	ldr	r2, [r0, #48]	; 0x30
   1443c:	9213      	str	r2, [sp, #76]	; 0x4c
  const float output_activation_max = params.float_activation_max;
   1443e:	6b42      	ldr	r2, [r0, #52]	; 0x34
   14440:	9206      	str	r2, [sp, #24]
  inline int32_t DimensionsCount() const { return size_; }
   14442:	680a      	ldr	r2, [r1, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14444:	2a04      	cmp	r2, #4
   14446:	f040 80b2 	bne.w	145ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ae>
   1444a:	468b      	mov	fp, r1
   1444c:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1444e:	2a04      	cmp	r2, #4
   14450:	f040 80af 	bne.w	145b2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b2>
   14454:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14458:	2a04      	cmp	r2, #4
   1445a:	f040 80ac 	bne.w	145b6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b6>
    TFLITE_DCHECK_LT(i, size_);
   1445e:	680a      	ldr	r2, [r1, #0]
   14460:	2a00      	cmp	r2, #0
   14462:	f340 80aa 	ble.w	145ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ba>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14466:	2a05      	cmp	r2, #5
   14468:	f340 80a9 	ble.w	145be <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1be>
   1446c:	684a      	ldr	r2, [r1, #4]
   1446e:	6812      	ldr	r2, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   14470:	f8d9 1000 	ldr.w	r1, [r9]
   14474:	2900      	cmp	r1, #0
   14476:	f340 80a4 	ble.w	145c2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1447a:	2905      	cmp	r1, #5
   1447c:	f340 80a3 	ble.w	145c6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1c6>
   14480:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14484:	6809      	ldr	r1, [r1, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14486:	4291      	cmp	r1, r2
   14488:	f040 80a0 	bne.w	145cc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1cc>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1448c:	921f      	str	r2, [sp, #124]	; 0x7c
    TFLITE_DCHECK_LT(i, size_);
   1448e:	f8d9 1000 	ldr.w	r1, [r9]
   14492:	2900      	cmp	r1, #0
   14494:	f340 809c 	ble.w	145d0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14498:	2905      	cmp	r1, #5
   1449a:	f340 809b 	ble.w	145d4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1d4>
   1449e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   144a2:	6809      	ldr	r1, [r1, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   144a4:	911e      	str	r1, [sp, #120]	; 0x78
      if (__b < __a)
   144a6:	428a      	cmp	r2, r1
   144a8:	f300 8097 	bgt.w	145da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1da>
      return __a;
   144ac:	aa1f      	add	r2, sp, #124	; 0x7c
   144ae:	6812      	ldr	r2, [r2, #0]
   144b0:	9216      	str	r2, [sp, #88]	; 0x58
    TFLITE_DCHECK_LT(i, size_);
   144b2:	6832      	ldr	r2, [r6, #0]
   144b4:	2a03      	cmp	r2, #3
   144b6:	f340 8092 	ble.w	145de <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144ba:	2a05      	cmp	r2, #5
   144bc:	f340 8091 	ble.w	145e2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e2>
   144c0:	6872      	ldr	r2, [r6, #4]
   144c2:	68d2      	ldr	r2, [r2, #12]
    TFLITE_DCHECK_LT(i, size_);
   144c4:	f8d9 1000 	ldr.w	r1, [r9]
   144c8:	2903      	cmp	r1, #3
   144ca:	f340 808c 	ble.w	145e6 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1e6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144ce:	2905      	cmp	r1, #5
   144d0:	f340 808b 	ble.w	145ea <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1ea>
   144d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   144d8:	68c9      	ldr	r1, [r1, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   144da:	4291      	cmp	r1, r2
   144dc:	f040 8088 	bne.w	145f0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f0>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   144e0:	921d      	str	r2, [sp, #116]	; 0x74
    TFLITE_DCHECK_LT(i, size_);
   144e2:	f8d9 1000 	ldr.w	r1, [r9]
   144e6:	2903      	cmp	r1, #3
   144e8:	f340 8084 	ble.w	145f4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   144ec:	2905      	cmp	r1, #5
   144ee:	f340 8083 	ble.w	145f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
   144f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   144f6:	68c9      	ldr	r1, [r1, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   144f8:	911c      	str	r1, [sp, #112]	; 0x70
      if (__b < __a)
   144fa:	428a      	cmp	r2, r1
   144fc:	dc7f      	bgt.n	145fe <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
      return __a;
   144fe:	aa1d      	add	r2, sp, #116	; 0x74
   14500:	6811      	ldr	r1, [r2, #0]
    TFLITE_DCHECK_LT(i, size_);
   14502:	f8db 2000 	ldr.w	r2, [fp]
   14506:	2a01      	cmp	r2, #1
   14508:	dd7b      	ble.n	14602 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x202>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1450a:	2a05      	cmp	r2, #5
   1450c:	dd7b      	ble.n	14606 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x206>
   1450e:	f8db 2004 	ldr.w	r2, [fp, #4]
   14512:	6852      	ldr	r2, [r2, #4]
   14514:	920c      	str	r2, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   14516:	f8db 2000 	ldr.w	r2, [fp]
   1451a:	2a02      	cmp	r2, #2
   1451c:	dd77      	ble.n	1460e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1451e:	2a05      	cmp	r2, #5
   14520:	dd77      	ble.n	14612 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x212>
   14522:	f8db 2004 	ldr.w	r2, [fp, #4]
   14526:	6892      	ldr	r2, [r2, #8]
   14528:	920b      	str	r2, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   1452a:	f8db 2000 	ldr.w	r2, [fp]
   1452e:	2a03      	cmp	r2, #3
   14530:	dd73      	ble.n	1461a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14532:	2a05      	cmp	r2, #5
   14534:	dd73      	ble.n	1461e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21e>
   14536:	f8db 2004 	ldr.w	r2, [fp, #4]
   1453a:	68d2      	ldr	r2, [r2, #12]
   1453c:	9204      	str	r2, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   1453e:	6832      	ldr	r2, [r6, #0]
   14540:	2a01      	cmp	r2, #1
   14542:	dd70      	ble.n	14626 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x226>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14544:	2a05      	cmp	r2, #5
   14546:	dd70      	ble.n	1462a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   14548:	6872      	ldr	r2, [r6, #4]
   1454a:	6852      	ldr	r2, [r2, #4]
   1454c:	920a      	str	r2, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   1454e:	6832      	ldr	r2, [r6, #0]
   14550:	2a02      	cmp	r2, #2
   14552:	dd6d      	ble.n	14630 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14554:	2a05      	cmp	r2, #5
   14556:	dd6d      	ble.n	14634 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x234>
   14558:	6872      	ldr	r2, [r6, #4]
   1455a:	6892      	ldr	r2, [r2, #8]
   1455c:	9209      	str	r2, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   1455e:	f8d9 2000 	ldr.w	r2, [r9]
   14562:	2a01      	cmp	r2, #1
   14564:	dd69      	ble.n	1463a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14566:	2a05      	cmp	r2, #5
   14568:	dd69      	ble.n	1463e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23e>
   1456a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1456e:	6852      	ldr	r2, [r2, #4]
   14570:	9208      	str	r2, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   14572:	f8d9 2000 	ldr.w	r2, [r9]
   14576:	2a02      	cmp	r2, #2
   14578:	dd65      	ble.n	14646 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1457a:	2a05      	cmp	r2, #5
   1457c:	dd65      	ble.n	1464a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x24a>
   1457e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   14582:	6892      	ldr	r2, [r2, #8]
   14584:	9207      	str	r2, [sp, #28]
  const int input_depth = input_shape.Dims(3);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   14586:	9a04      	ldr	r2, [sp, #16]
   14588:	9805      	ldr	r0, [sp, #20]
   1458a:	fb02 f200 	mul.w	r2, r2, r0
   1458e:	428a      	cmp	r2, r1
   14590:	d15f      	bne.n	14652 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14592:	681c      	ldr	r4, [r3, #0]
   14594:	2c05      	cmp	r4, #5
   14596:	dd5e      	ble.n	14656 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x256>
   14598:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
   1459a:	2200      	movs	r2, #0
    int buffer_size = 1;
   1459c:	2501      	movs	r5, #1
    for (int i = 0; i < size_; i++) {
   1459e:	42a2      	cmp	r2, r4
   145a0:	da5b      	bge.n	1465a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
      buffer_size *= dims_data[i];
   145a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   145a6:	fb00 f505 	mul.w	r5, r0, r5
    for (int i = 0; i < size_; i++) {
   145aa:	3201      	adds	r2, #1
   145ac:	e7f7      	b.n	1459e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19e>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   145ae:	f001 fdf4 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   145b2:	f001 fdf2 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   145b6:	f001 fdf0 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   145ba:	f001 fdee 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145be:	684a      	ldr	r2, [r1, #4]
   145c0:	e756      	b.n	14470 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
    TFLITE_DCHECK_LT(i, size_);
   145c2:	f001 fdea 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   145ca:	e75c      	b.n	14486 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   145cc:	f001 fde5 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   145d0:	f001 fde3 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   145d8:	e764      	b.n	144a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xa4>
	return __b;
   145da:	aa1e      	add	r2, sp, #120	; 0x78
   145dc:	e767      	b.n	144ae <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xae>
    TFLITE_DCHECK_LT(i, size_);
   145de:	f001 fddc 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145e2:	6932      	ldr	r2, [r6, #16]
   145e4:	e76e      	b.n	144c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc4>
    TFLITE_DCHECK_LT(i, size_);
   145e6:	f001 fdd8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
   145ee:	e774      	b.n	144da <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xda>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   145f0:	f001 fdd3 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   145f4:	f001 fdd1 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   145f8:	f8d9 1010 	ldr.w	r1, [r9, #16]
   145fc:	e77c      	b.n	144f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xf8>
   145fe:	aa1c      	add	r2, sp, #112	; 0x70
   14600:	e77e      	b.n	14500 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x100>
    TFLITE_DCHECK_LT(i, size_);
   14602:	f001 fdca 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14606:	f8db 2008 	ldr.w	r2, [fp, #8]
   1460a:	920c      	str	r2, [sp, #48]	; 0x30
   1460c:	e783      	b.n	14516 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x116>
    TFLITE_DCHECK_LT(i, size_);
   1460e:	f001 fdc4 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14612:	f8db 200c 	ldr.w	r2, [fp, #12]
   14616:	920b      	str	r2, [sp, #44]	; 0x2c
   14618:	e787      	b.n	1452a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12a>
    TFLITE_DCHECK_LT(i, size_);
   1461a:	f001 fdbe 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1461e:	f8db 2010 	ldr.w	r2, [fp, #16]
   14622:	9204      	str	r2, [sp, #16]
   14624:	e78b      	b.n	1453e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
    TFLITE_DCHECK_LT(i, size_);
   14626:	f001 fdb8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1462a:	68b2      	ldr	r2, [r6, #8]
   1462c:	920a      	str	r2, [sp, #40]	; 0x28
   1462e:	e78e      	b.n	1454e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x14e>
    TFLITE_DCHECK_LT(i, size_);
   14630:	f001 fdb3 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14634:	68f2      	ldr	r2, [r6, #12]
   14636:	9209      	str	r2, [sp, #36]	; 0x24
   14638:	e791      	b.n	1455e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   1463a:	f001 fdae 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1463e:	f8d9 2008 	ldr.w	r2, [r9, #8]
   14642:	9208      	str	r2, [sp, #32]
   14644:	e795      	b.n	14572 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
    TFLITE_DCHECK_LT(i, size_);
   14646:	f001 fda8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1464a:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1464e:	9207      	str	r2, [sp, #28]
   14650:	e799      	b.n	14586 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x186>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   14652:	f001 fda2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14656:	3304      	adds	r3, #4
   14658:	e79f      	b.n	1459a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x19a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1465a:	428d      	cmp	r5, r1
   1465c:	d11e      	bne.n	1469c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x29c>

  for (int b = 0; b < batches; ++b) {
   1465e:	f04f 0a00 	mov.w	sl, #0
   14662:	464c      	mov	r4, r9
   14664:	46d1      	mov	r9, sl
   14666:	46b2      	mov	sl, r6
   14668:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1466a:	4599      	cmp	r9, r3
   1466c:	f280 811a 	bge.w	148a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a4>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14670:	2300      	movs	r3, #0
   14672:	9300      	str	r3, [sp, #0]
   14674:	46c8      	mov	r8, r9
   14676:	46d1      	mov	r9, sl
   14678:	46a2      	mov	sl, r4
   1467a:	9b00      	ldr	r3, [sp, #0]
   1467c:	9a08      	ldr	r2, [sp, #32]
   1467e:	4293      	cmp	r3, r2
   14680:	f280 810b 	bge.w	1489a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x49a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14684:	2300      	movs	r3, #0
   14686:	9301      	str	r3, [sp, #4]
   14688:	4647      	mov	r7, r8
   1468a:	46d0      	mov	r8, sl
   1468c:	9b01      	ldr	r3, [sp, #4]
   1468e:	9a07      	ldr	r2, [sp, #28]
   14690:	4293      	cmp	r3, r2
   14692:	f280 80fc 	bge.w	1488e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x48e>
        for (int ic = 0; ic < input_depth; ++ic) {
   14696:	f04f 0a00 	mov.w	sl, #0
   1469a:	e0ee      	b.n	1487a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x47a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1469c:	f001 fd7d 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   146a0:	f001 fd7b 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   146a4:	f001 fd79 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   146a8:	f001 fd77 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   146ac:	f001 fd75 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   146b0:	f001 fd73 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   146b4:	f001 fd71 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   146b8:	f001 fd6f 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   146bc:	f001 fd6d 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   146c0:	f001 fd6b 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   146c4:	f001 fd69 	bl	1619a <abort>
            const int oc = m + ic * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   146c8:	3601      	adds	r6, #1
   146ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   146cc:	429e      	cmp	r6, r3
   146ce:	da60      	bge.n	14792 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x392>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
   146d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   146d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   146d4:	fb03 2306 	mla	r3, r3, r6, r2
                const int in_y =
   146d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   146da:	9915      	ldr	r1, [sp, #84]	; 0x54
   146dc:	fb02 1205 	mla	r2, r2, r5, r1
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   146e0:	2b00      	cmp	r3, #0
   146e2:	dbf1      	blt.n	146c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   146e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   146e6:	428b      	cmp	r3, r1
   146e8:	daee      	bge.n	146c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   146ea:	2a00      	cmp	r2, #0
   146ec:	dbec      	blt.n	146c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
   146ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   146f0:	428a      	cmp	r2, r1
   146f2:	dae9      	bge.n	146c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
  inline int32_t DimensionsCount() const { return size_; }
   146f4:	f8db 1000 	ldr.w	r1, [fp]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   146f8:	2904      	cmp	r1, #4
   146fa:	d1d1      	bne.n	146a0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   146fc:	2f00      	cmp	r7, #0
   146fe:	dbd1      	blt.n	146a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
   14700:	f8db 1004 	ldr.w	r1, [fp, #4]
   14704:	428f      	cmp	r7, r1
   14706:	dacd      	bge.n	146a4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14708:	2a00      	cmp	r2, #0
   1470a:	dbcd      	blt.n	146a8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
   1470c:	f8db c008 	ldr.w	ip, [fp, #8]
   14710:	4562      	cmp	r2, ip
   14712:	dac9      	bge.n	146a8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2a8>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14714:	2b00      	cmp	r3, #0
   14716:	dbc9      	blt.n	146ac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
   14718:	f8db 000c 	ldr.w	r0, [fp, #12]
   1471c:	4283      	cmp	r3, r0
   1471e:	dac5      	bge.n	146ac <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ac>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14720:	f1ba 0f00 	cmp.w	sl, #0
   14724:	dbc4      	blt.n	146b0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
   14726:	f8db 1010 	ldr.w	r1, [fp, #16]
   1472a:	458a      	cmp	sl, r1
   1472c:	dac0      	bge.n	146b0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   1472e:	fb0c 2207 	mla	r2, ip, r7, r2
   14732:	fb02 3300 	mla	r3, r2, r0, r3
   14736:	fb03 a101 	mla	r1, r3, r1, sl
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   1473a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1473c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  inline int32_t DimensionsCount() const { return size_; }
   14740:	f8d9 3000 	ldr.w	r3, [r9]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14744:	2b04      	cmp	r3, #4
   14746:	d1b5      	bne.n	146b4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14748:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1474c:	2b00      	cmp	r3, #0
   1474e:	ddb3      	ble.n	146b8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2b8>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14750:	2d00      	cmp	r5, #0
   14752:	dbb3      	blt.n	146bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
   14754:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14758:	429d      	cmp	r5, r3
   1475a:	daaf      	bge.n	146bc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2bc>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1475c:	2e00      	cmp	r6, #0
   1475e:	dbaf      	blt.n	146c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
   14760:	f8d9 200c 	ldr.w	r2, [r9, #12]
   14764:	4296      	cmp	r6, r2
   14766:	daab      	bge.n	146c0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14768:	2c00      	cmp	r4, #0
   1476a:	dbab      	blt.n	146c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
   1476c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   14770:	429c      	cmp	r4, r3
   14772:	daa7      	bge.n	146c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14774:	fb02 6205 	mla	r2, r2, r5, r6
   14778:	fb02 4303 	mla	r3, r2, r3, r4
                  float filter_value = filter_data[Offset(
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
   1477c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1477e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14782:	f7ec fac5 	bl	d10 <__aeabi_fmul>
   14786:	4601      	mov	r1, r0
   14788:	9803      	ldr	r0, [sp, #12]
   1478a:	f7ec f9b9 	bl	b00 <__addsf3>
   1478e:	9003      	str	r0, [sp, #12]
   14790:	e79a      	b.n	146c8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2c8>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   14792:	3501      	adds	r5, #1
   14794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14796:	429d      	cmp	r5, r3
   14798:	da01      	bge.n	1479e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x39e>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1479a:	2600      	movs	r6, #0
   1479c:	e795      	b.n	146ca <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2ca>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
   1479e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   147a0:	2b00      	cmp	r3, #0
   147a2:	d058      	beq.n	14856 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x456>
              bias_value = bias_data[oc];
   147a4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
   147a8:	9803      	ldr	r0, [sp, #12]
   147aa:	f7ec f9a9 	bl	b00 <__addsf3>
  inline int32_t DimensionsCount() const { return size_; }
   147ae:	f8d8 3000 	ldr.w	r3, [r8]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   147b2:	2b04      	cmp	r3, #4
   147b4:	d151      	bne.n	1485a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   147b6:	2f00      	cmp	r7, #0
   147b8:	db51      	blt.n	1485e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
   147ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
   147be:	429f      	cmp	r7, r3
   147c0:	da4d      	bge.n	1485e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x45e>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   147c2:	9b00      	ldr	r3, [sp, #0]
   147c4:	2b00      	cmp	r3, #0
   147c6:	db4c      	blt.n	14862 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
   147c8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   147cc:	4293      	cmp	r3, r2
   147ce:	da48      	bge.n	14862 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x462>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   147d0:	9901      	ldr	r1, [sp, #4]
   147d2:	2900      	cmp	r1, #0
   147d4:	db47      	blt.n	14866 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
   147d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   147da:	4299      	cmp	r1, r3
   147dc:	da43      	bge.n	14866 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x466>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   147de:	2c00      	cmp	r4, #0
   147e0:	db43      	blt.n	1486a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
   147e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
   147e6:	428c      	cmp	r4, r1
   147e8:	da3f      	bge.n	1486a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46a>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   147ea:	9d00      	ldr	r5, [sp, #0]
   147ec:	fb02 5207 	mla	r2, r2, r7, r5
   147f0:	9d01      	ldr	r5, [sp, #4]
   147f2:	fb02 5303 	mla	r3, r2, r3, r5
   147f6:	fb03 4401 	mla	r4, r3, r1, r4
   147fa:	9019      	str	r0, [sp, #100]	; 0x64
   147fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   147fe:	911a      	str	r1, [sp, #104]	; 0x68
   14800:	9b06      	ldr	r3, [sp, #24]
   14802:	931b      	str	r3, [sp, #108]	; 0x6c
      if (__a < __b)
   14804:	f7ec fc22 	bl	104c <__aeabi_fcmplt>
   14808:	2800      	cmp	r0, #0
   1480a:	d130      	bne.n	1486e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x46e>
      return __a;
   1480c:	ad19      	add	r5, sp, #100	; 0x64
      if (__b < __a)
   1480e:	6829      	ldr	r1, [r5, #0]
   14810:	9806      	ldr	r0, [sp, #24]
   14812:	f7ec fc1b 	bl	104c <__aeabi_fcmplt>
   14816:	bb60      	cbnz	r0, 14872 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x472>
   14818:	682b      	ldr	r3, [r5, #0]
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   1481a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   1481c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
          for (int m = 0; m < depth_multiplier; m++) {
   14820:	9b02      	ldr	r3, [sp, #8]
   14822:	3301      	adds	r3, #1
   14824:	9302      	str	r3, [sp, #8]
   14826:	9902      	ldr	r1, [sp, #8]
   14828:	9b05      	ldr	r3, [sp, #20]
   1482a:	4299      	cmp	r1, r3
   1482c:	da23      	bge.n	14876 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x476>
            const int oc = m + ic * depth_multiplier;
   1482e:	fb03 140a 	mla	r4, r3, sl, r1
            const int in_x_origin = (out_x * stride_width) - pad_width;
   14832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14834:	9a01      	ldr	r2, [sp, #4]
   14836:	fb03 f302 	mul.w	r3, r3, r2
   1483a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1483c:	1a9b      	subs	r3, r3, r2
   1483e:	9314      	str	r3, [sp, #80]	; 0x50
            const int in_y_origin = (out_y * stride_height) - pad_height;
   14840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14842:	9a00      	ldr	r2, [sp, #0]
   14844:	fb03 f302 	mul.w	r3, r3, r2
   14848:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1484a:	1a9b      	subs	r3, r3, r2
   1484c:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1484e:	2500      	movs	r5, #0
            float total = 0.f;
   14850:	2300      	movs	r3, #0
   14852:	9303      	str	r3, [sp, #12]
   14854:	e79e      	b.n	14794 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x394>
            float bias_value = 0.0f;
   14856:	2100      	movs	r1, #0
   14858:	e7a6      	b.n	147a8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a8>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   1485a:	f001 fc9e 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1485e:	f001 fc9c 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14862:	f001 fc9a 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14866:	f001 fc98 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1486a:	f001 fc96 	bl	1619a <abort>
	return __b;
   1486e:	ad1a      	add	r5, sp, #104	; 0x68
   14870:	e7cd      	b.n	1480e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x40e>
	return __b;
   14872:	ad1b      	add	r5, sp, #108	; 0x6c
   14874:	e7d0      	b.n	14818 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x418>
        for (int ic = 0; ic < input_depth; ++ic) {
   14876:	f10a 0a01 	add.w	sl, sl, #1
   1487a:	9b04      	ldr	r3, [sp, #16]
   1487c:	459a      	cmp	sl, r3
   1487e:	da02      	bge.n	14886 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x486>
          for (int m = 0; m < depth_multiplier; m++) {
   14880:	2300      	movs	r3, #0
   14882:	9302      	str	r3, [sp, #8]
   14884:	e7cf      	b.n	14826 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x426>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14886:	9b01      	ldr	r3, [sp, #4]
   14888:	3301      	adds	r3, #1
   1488a:	9301      	str	r3, [sp, #4]
   1488c:	e6fe      	b.n	1468c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x28c>
   1488e:	46c2      	mov	sl, r8
   14890:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14892:	9b00      	ldr	r3, [sp, #0]
   14894:	3301      	adds	r3, #1
   14896:	9300      	str	r3, [sp, #0]
   14898:	e6ef      	b.n	1467a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27a>
   1489a:	4654      	mov	r4, sl
   1489c:	46ca      	mov	sl, r9
  for (int b = 0; b < batches; ++b) {
   1489e:	f108 0901 	add.w	r9, r8, #1
   148a2:	e6e1      	b.n	14668 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x268>
          }
        }
      }
    }
  }
}
   148a4:	b021      	add	sp, #132	; 0x84
   148a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000148aa <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   148aa:	b570      	push	{r4, r5, r6, lr}
   148ac:	4604      	mov	r4, r0
   148ae:	460e      	mov	r6, r1
   148b0:	4615      	mov	r5, r2
  op_params.input_offset = -data.input_zero_point;
   148b2:	6913      	ldr	r3, [r2, #16]
   148b4:	425b      	negs	r3, r3
   148b6:	6143      	str	r3, [r0, #20]
  op_params.weights_offset = -data.filter_zero_point;
   148b8:	6953      	ldr	r3, [r2, #20]
   148ba:	425b      	negs	r3, r3
   148bc:	6183      	str	r3, [r0, #24]
  op_params.output_offset = data.output_zero_point;
   148be:	6993      	ldr	r3, [r2, #24]
   148c0:	61c3      	str	r3, [r0, #28]
  op_params.output_multiplier = data.output_multiplier;
   148c2:	69d3      	ldr	r3, [r2, #28]
   148c4:	6203      	str	r3, [r0, #32]
  op_params.output_shift = -data.output_shift;
   148c6:	6a13      	ldr	r3, [r2, #32]
   148c8:	425b      	negs	r3, r3
   148ca:	6243      	str	r3, [r0, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   148cc:	7808      	ldrb	r0, [r1, #0]
   148ce:	f000 f8b3 	bl	14a38 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   148d2:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.height = data.padding.height;
   148d4:	686b      	ldr	r3, [r5, #4]
   148d6:	80a3      	strh	r3, [r4, #4]
  op_params.padding_values.width = data.padding.width;
   148d8:	682b      	ldr	r3, [r5, #0]
   148da:	8063      	strh	r3, [r4, #2]
  op_params.stride_height = params.stride_height;
   148dc:	68b3      	ldr	r3, [r6, #8]
   148de:	81a3      	strh	r3, [r4, #12]
  op_params.stride_width = params.stride_width;
   148e0:	6873      	ldr	r3, [r6, #4]
   148e2:	8163      	strh	r3, [r4, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
   148e4:	69b3      	ldr	r3, [r6, #24]
   148e6:	8223      	strh	r3, [r4, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
   148e8:	6973      	ldr	r3, [r6, #20]
   148ea:	81e3      	strh	r3, [r4, #14]
  op_params.depth_multiplier = params.depth_multiplier;
   148ec:	68f3      	ldr	r3, [r6, #12]
   148ee:	8263      	strh	r3, [r4, #18]
  op_params.quantized_activation_min = data.output_activation_min;
   148f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   148f2:	62a3      	str	r3, [r4, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
   148f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   148f6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   148f8:	4620      	mov	r0, r4
   148fa:	bd70      	pop	{r4, r5, r6, pc}

000148fc <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
   148fc:	b570      	push	{r4, r5, r6, lr}
   148fe:	4604      	mov	r4, r0
   14900:	460d      	mov	r5, r1
   14902:	4616      	mov	r6, r2
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
   14904:	f100 0234 	add.w	r2, r0, #52	; 0x34
   14908:	f100 0130 	add.w	r1, r0, #48	; 0x30
   1490c:	7c28      	ldrb	r0, [r5, #16]
   1490e:	f7f5 fe63 	bl	a5d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
   14912:	7828      	ldrb	r0, [r5, #0]
   14914:	f000 f890 	bl	14a38 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
   14918:	7020      	strb	r0, [r4, #0]
  op_params.padding_values.width = data.padding.width;
   1491a:	6833      	ldr	r3, [r6, #0]
   1491c:	8063      	strh	r3, [r4, #2]
  op_params.padding_values.height = data.padding.height;
   1491e:	6873      	ldr	r3, [r6, #4]
   14920:	80a3      	strh	r3, [r4, #4]
  op_params.stride_width = params.stride_width;
   14922:	686b      	ldr	r3, [r5, #4]
   14924:	8163      	strh	r3, [r4, #10]
  op_params.stride_height = params.stride_height;
   14926:	68ab      	ldr	r3, [r5, #8]
   14928:	81a3      	strh	r3, [r4, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
   1492a:	696b      	ldr	r3, [r5, #20]
   1492c:	81e3      	strh	r3, [r4, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
   1492e:	69ab      	ldr	r3, [r5, #24]
   14930:	8223      	strh	r3, [r4, #16]
  op_params.depth_multiplier = params.depth_multiplier;
   14932:	68eb      	ldr	r3, [r5, #12]
   14934:	8263      	strh	r3, [r4, #18]
}
   14936:	4620      	mov	r0, r4
   14938:	bd70      	pop	{r4, r5, r6, pc}

0001493a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   1493a:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   1493c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1493e:	b113      	cbz	r3, 14946 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context,
   14940:	2120      	movs	r1, #32
   14942:	4798      	blx	r3
}
   14944:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14946:	f001 fc28 	bl	1619a <abort>

0001494a <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
   1494a:	694a      	ldr	r2, [r1, #20]
   1494c:	4252      	negs	r2, r2
   1494e:	6002      	str	r2, [r0, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
   14950:	698a      	ldr	r2, [r1, #24]
   14952:	4252      	negs	r2, r2
   14954:	6042      	str	r2, [r0, #4]
  op_params.output_offset = op_data.output_zero_point;
   14956:	69ca      	ldr	r2, [r1, #28]
   14958:	6082      	str	r2, [r0, #8]
  op_params.output_multiplier = op_data.output_multiplier;
   1495a:	680a      	ldr	r2, [r1, #0]
   1495c:	60c2      	str	r2, [r0, #12]
  op_params.output_shift = op_data.output_shift;
   1495e:	684a      	ldr	r2, [r1, #4]
   14960:	6102      	str	r2, [r0, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
   14962:	688a      	ldr	r2, [r1, #8]
   14964:	6142      	str	r2, [r0, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
   14966:	68ca      	ldr	r2, [r1, #12]
   14968:	6182      	str	r2, [r0, #24]
  return op_params;
}
   1496a:	4770      	bx	lr

0001496c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
   1496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14970:	b084      	sub	sp, #16
   14972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14974:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  if (data_type != kTfLiteFloat32) {
   14976:	2a01      	cmp	r2, #1
   14978:	d103      	bne.n	14982 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x16>

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
   1497a:	2000      	movs	r0, #0
}
   1497c:	b004      	add	sp, #16
   1497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14982:	4604      	mov	r4, r0
   14984:	4688      	mov	r8, r1
   14986:	461f      	mov	r7, r3
    double real_multiplier = 0.0;
   14988:	2200      	movs	r2, #0
   1498a:	2300      	movs	r3, #0
   1498c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   14990:	ab02      	add	r3, sp, #8
   14992:	9301      	str	r3, [sp, #4]
   14994:	9600      	str	r6, [sp, #0]
   14996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1499a:	4639      	mov	r1, r7
   1499c:	f7ec fdd0 	bl	1540 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   149a0:	2800      	cmp	r0, #0
   149a2:	d1eb      	bne.n	1497c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   149a4:	1d2b      	adds	r3, r5, #4
   149a6:	462a      	mov	r2, r5
   149a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   149ac:	f7f4 fcec 	bl	9388 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
   149b0:	693b      	ldr	r3, [r7, #16]
   149b2:	616b      	str	r3, [r5, #20]
    TFLITE_DCHECK(filter->params.zero_point == 0);
   149b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149b6:	691b      	ldr	r3, [r3, #16]
   149b8:	b96b      	cbnz	r3, 149d6 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
    data->filter_zero_point = filter->params.zero_point;
   149ba:	61ab      	str	r3, [r5, #24]
    data->output_zero_point = output->params.zero_point;
   149bc:	6933      	ldr	r3, [r6, #16]
   149be:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
   149c0:	f105 030c 	add.w	r3, r5, #12
   149c4:	9300      	str	r3, [sp, #0]
   149c6:	f105 0308 	add.w	r3, r5, #8
   149ca:	4632      	mov	r2, r6
   149cc:	4641      	mov	r1, r8
   149ce:	4620      	mov	r0, r4
   149d0:	f7f4 fea2 	bl	9718 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                             &data->output_activation_max);
   149d4:	e7d2      	b.n	1497c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x10>
    TFLITE_DCHECK(filter->params.zero_point == 0);
   149d6:	f001 fbe0 	bl	1619a <abort>

000149da <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
    TfLiteFusedActivation activation) {
   149da:	b510      	push	{r4, lr}
   149dc:	4604      	mov	r4, r0
   149de:	4608      	mov	r0, r1
  CalculateActivationRange(activation, &op_params.float_activation_min,
   149e0:	f104 0220 	add.w	r2, r4, #32
   149e4:	f104 011c 	add.w	r1, r4, #28
   149e8:	f7f5 fdf6 	bl	a5d8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
}
   149ec:	4620      	mov	r0, r4
   149ee:	bd10      	pop	{r4, pc}

000149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   149f0:	b570      	push	{r4, r5, r6, lr}
   149f2:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   149f4:	b1b9      	cbz	r1, 14a26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
   149f6:	684d      	ldr	r5, [r1, #4]
   149f8:	b1ad      	cbz	r5, 14a26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x36>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   149fa:	f855 6b04 	ldr.w	r6, [r5], #4
    size_ = dimensions_count;
   149fe:	6006      	str	r6, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   14a00:	2e05      	cmp	r6, #5
   14a02:	dd07      	ble.n	14a14 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x24>
      dims_pointer_ = new int32_t[dimensions_count];
   14a04:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   14a08:	429e      	cmp	r6, r3
   14a0a:	d210      	bcs.n	14a2e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3e>
   14a0c:	00b0      	lsls	r0, r6, #2
   14a0e:	f001 fbc2 	bl	16196 <_Znaj>
   14a12:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14a14:	6823      	ldr	r3, [r4, #0]
   14a16:	2b05      	cmp	r3, #5
   14a18:	dd0c      	ble.n	14a34 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x44>
   14a1a:	6860      	ldr	r0, [r4, #4]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   14a1c:	00b2      	lsls	r2, r6, #2
   14a1e:	4629      	mov	r1, r5
   14a20:	f001 fbd4 	bl	161cc <memcpy>
  }
   14a24:	e001      	b.n	14a2a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3a>
  RuntimeShape() : size_(0) {}
   14a26:	2300      	movs	r3, #0
   14a28:	6023      	str	r3, [r4, #0]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   14a2a:	4620      	mov	r0, r4
   14a2c:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
   14a2e:	f04f 30ff 	mov.w	r0, #4294967295
   14a32:	e7ec      	b.n	14a0e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   14a34:	1d20      	adds	r0, r4, #4
   14a36:	e7f1      	b.n	14a1c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2c>

00014a38 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
   14a38:	2801      	cmp	r0, #1
   14a3a:	d002      	beq.n	14a42 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
   14a3c:	2802      	cmp	r0, #2
   14a3e:	d000      	beq.n	14a42 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xa>
      return PaddingType::kSame;
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
   14a40:	2000      	movs	r0, #0
  }
}
   14a42:	4770      	bx	lr

00014a44 <_ZN6tflite17CountLeadingZerosIjEEiT_>:
  return integer_input ? __builtin_clz(integer_input)
   14a44:	b110      	cbz	r0, 14a4c <_ZN6tflite17CountLeadingZerosIjEEiT_+0x8>
   14a46:	fab0 f080 	clz	r0, r0
   14a4a:	4770      	bx	lr
   14a4c:	2020      	movs	r0, #32
}
   14a4e:	4770      	bx	lr

00014a50 <_ZN8gemmlowp3SubIiEET_S1_S1_>:
}
   14a50:	1a40      	subs	r0, r0, r1
   14a52:	4770      	bx	lr

00014a54 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a58:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14a5a:	2001      	movs	r0, #1
   14a5c:	f7ff f9f3 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a60:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14a62:	2000      	movs	r0, #0
   14a64:	f7ff f9ef 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a68:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14a6a:	2001      	movs	r0, #1
   14a6c:	f7ff f9eb 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14a70:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14a72:	4631      	mov	r1, r6
   14a74:	4620      	mov	r0, r4
   14a76:	f7ff f9e7 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a7a:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14a7c:	2101      	movs	r1, #1
   14a7e:	4630      	mov	r0, r6
   14a80:	f7ff f9e4 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14a84:	4606      	mov	r6, r0
   14a86:	4641      	mov	r1, r8
   14a88:	4620      	mov	r0, r4
   14a8a:	f7ff f9eb 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14a8e:	4629      	mov	r1, r5
   14a90:	f7ff f9da 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14a94:	4601      	mov	r1, r0
   14a96:	4630      	mov	r0, r6
   14a98:	f7ff f9da 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14a9c:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14a9e:	2101      	movs	r1, #1
   14aa0:	4620      	mov	r0, r4
   14aa2:	f7ff f9d3 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14aa6:	4604      	mov	r4, r0
   14aa8:	4631      	mov	r1, r6
   14aaa:	4638      	mov	r0, r7
   14aac:	f7ff f9e2 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14ab0:	4629      	mov	r1, r5
   14ab2:	f7ff f9c9 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14ab6:	4601      	mov	r1, r0
   14ab8:	4620      	mov	r0, r4
   14aba:	f7ff f9c9 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ac2 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
   14ac2:	b4f0      	push	{r4, r5, r6, r7}
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
   14ac4:	17c7      	asrs	r7, r0, #31
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   14ac6:	2301      	movs	r3, #1
   14ac8:	fa03 f101 	lsl.w	r1, r3, r1
   14acc:	17cd      	asrs	r5, r1, #31
   14ace:	fb01 f307 	mul.w	r3, r1, r7
   14ad2:	fb00 3305 	mla	r3, r0, r5, r3
   14ad6:	fba1 0100 	umull	r0, r1, r1, r0
   14ada:	4419      	add	r1, r3
             ? min
   14adc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   14ae0:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   14ae4:	db06      	blt.n	14af4 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x32>
             : wide_shifted > max ? max
   14ae6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   14aea:	f171 0300 	sbcs.w	r3, r1, #0
   14aee:	da04      	bge.n	14afa <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x38>
}
   14af0:	bcf0      	pop	{r4, r5, r6, r7}
   14af2:	4770      	bx	lr
             ? min
   14af4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   14af8:	e7fa      	b.n	14af0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>
             : wide_shifted > max ? max
   14afa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
   14afe:	e7f7      	b.n	14af0 <_ZN8gemmlowp9ShiftLeftIiEET_S1_i+0x2e>

00014b00 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>:
}
   14b00:	4048      	eors	r0, r1
   14b02:	4770      	bx	lr

00014b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
   14b04:	b570      	push	{r4, r5, r6, lr}
   14b06:	4606      	mov	r6, r0
   14b08:	4615      	mov	r5, r2
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
   14b0a:	f7ff f99d 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b0e:	4604      	mov	r4, r0
   14b10:	4630      	mov	r0, r6
   14b12:	f7ff f99f 	bl	13e54 <_ZN8gemmlowp6BitNotIiEET_S1_>
   14b16:	4629      	mov	r1, r5
   14b18:	f7ff f996 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14b1c:	4601      	mov	r1, r0
   14b1e:	4620      	mov	r0, r4
   14b20:	f7ff ffee 	bl	14b00 <_ZN8gemmlowp6BitXorIiEET_S1_S1_>
}
   14b24:	bd70      	pop	{r4, r5, r6, pc}

00014b26 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   14b26:	b430      	push	{r4, r5}
  std::int64_t b64 = b;
   14b28:	17cb      	asrs	r3, r1, #31
  std::int64_t sum = a64 + b64;
   14b2a:	180a      	adds	r2, r1, r0
   14b2c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   14b30:	2a00      	cmp	r2, #0
   14b32:	f173 0100 	sbcs.w	r1, r3, #0
   14b36:	db0d      	blt.n	14b54 <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x2e>
   14b38:	2101      	movs	r1, #1
   14b3a:	2000      	movs	r0, #0
  return static_cast<std::int32_t>((sum + sign) / 2);
   14b3c:	1854      	adds	r4, r2, r1
   14b3e:	eb43 0500 	adc.w	r5, r3, r0
   14b42:	0feb      	lsrs	r3, r5, #31
   14b44:	18e4      	adds	r4, r4, r3
   14b46:	f145 0500 	adc.w	r5, r5, #0
   14b4a:	0860      	lsrs	r0, r4, #1
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
   14b4c:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
   14b50:	bc30      	pop	{r4, r5}
   14b52:	4770      	bx	lr
  std::int64_t sign = sum >= 0 ? 1 : -1;
   14b54:	f04f 31ff 	mov.w	r1, #4294967295
   14b58:	4608      	mov	r0, r1
   14b5a:	e7ef      	b.n	14b3c <_ZN8gemmlowp15RoundingHalfSumIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_+0x16>

00014b5c <_ZN8gemmlowpplIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14b5c:	b508      	push	{r3, lr}
   14b5e:	f7ff f977 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14b62:	bd08      	pop	{r3, pc}

00014b64 <_ZN8gemmlowp13ExactMulByPotILin1EiLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
}
   14b64:	4770      	bx	lr

00014b66 <_ZN8gemmlowpmiIiLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14b66:	b508      	push	{r3, lr}
   14b68:	f7ff ff72 	bl	14a50 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   14b6c:	bd08      	pop	{r3, pc}

00014b6e <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
   14b6e:	b508      	push	{r3, lr}
  return MaskIfNonZero<tIntegerType>(!a);
   14b70:	fab0 f080 	clz	r0, r0
   14b74:	0940      	lsrs	r0, r0, #5
   14b76:	f7ff f96f 	bl	13e58 <_ZN8gemmlowp13MaskIfNonZeroIiEET_S1_>
}
   14b7a:	bd08      	pop	{r3, pc}

00014b7c <_ZN8gemmlowp7RescaleILi2EiLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14b7c:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14b7e:	f7f8 f933 	bl	cde8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2EiEET0_S1_>
}
   14b82:	bd08      	pop	{r3, pc}

00014b84 <_ZN8gemmlowp7RescaleILi0EiLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14b84:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14b86:	f7f8 f95f 	bl	ce48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1EiEET0_S1_>
}
   14b8a:	bd08      	pop	{r3, pc}

00014b8c <_ZN8gemmlowp15SelectUsingMaskIiLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
   14b8c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14b8e:	f7ff ffb9 	bl	14b04 <_ZN8gemmlowp15SelectUsingMaskIiEET_S1_S1_S1_>
}
   14b92:	bd08      	pop	{r3, pc}

00014b94 <_ZN8gemmlowpplIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14b94:	b508      	push	{r3, lr}
   14b96:	f7ff f95b 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14b9a:	bd08      	pop	{r3, pc}

00014b9c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   14b9c:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14b9e:	f7ff ff59 	bl	14a54 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1EiEET0_S1_>
}
   14ba2:	bd08      	pop	{r3, pc}

00014ba4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ba8:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14baa:	2003      	movs	r0, #3
   14bac:	f7ff f94b 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14bb0:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14bb2:	2000      	movs	r0, #0
   14bb4:	f7ff f947 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14bb8:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14bba:	2001      	movs	r0, #1
   14bbc:	f7ff f943 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14bc0:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14bc2:	4631      	mov	r1, r6
   14bc4:	4620      	mov	r0, r4
   14bc6:	f7ff f93f 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14bca:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14bcc:	2101      	movs	r1, #1
   14bce:	4630      	mov	r0, r6
   14bd0:	f7ff f93c 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14bd4:	4606      	mov	r6, r0
   14bd6:	4641      	mov	r1, r8
   14bd8:	4620      	mov	r0, r4
   14bda:	f7ff f943 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14bde:	4629      	mov	r1, r5
   14be0:	f7ff f932 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14be4:	4601      	mov	r1, r0
   14be6:	4630      	mov	r0, r6
   14be8:	f7ff f932 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14bec:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14bee:	2102      	movs	r1, #2
   14bf0:	4620      	mov	r0, r4
   14bf2:	f7ff f92b 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14bf6:	4604      	mov	r4, r0
   14bf8:	4631      	mov	r1, r6
   14bfa:	4638      	mov	r0, r7
   14bfc:	f7ff f93a 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14c00:	4629      	mov	r1, r5
   14c02:	f7ff f921 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14c06:	4601      	mov	r1, r0
   14c08:	4620      	mov	r0, r4
   14c0a:	f7ff f921 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014c12 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
   14c12:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14c14:	f7ff ffc6 	bl	14ba4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2EiEET0_S1_>
}
   14c18:	bd08      	pop	{r3, pc}

00014c1a <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
   14c1a:	b508      	push	{r3, lr}
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
   14c1c:	f7ff f918 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14c20:	bd08      	pop	{r3, pc}

00014c22 <_ZN8gemmlowp20AddSaturatingIf16BitIiLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
   14c22:	b508      	push	{r3, lr}
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
   14c24:	f7ff fff9 	bl	14c1a <_ZN8gemmlowp20AddSaturatingIf16BitIiEET_S1_S1_>
}
   14c28:	bd08      	pop	{r3, pc}

00014c2a <_ZN8gemmlowpplIiLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
   14c2a:	b508      	push	{r3, lr}
   14c2c:	f7ff f910 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14c30:	bd08      	pop	{r3, pc}

00014c32 <_ZN8gemmlowpmiIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
   14c32:	b508      	push	{r3, lr}
   14c34:	f7ff ff0c 	bl	14a50 <_ZN8gemmlowp3SubIiEET_S1_S1_>
   14c38:	bd08      	pop	{r3, pc}

00014c3a <_ZN8gemmlowpanIiLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
   14c3a:	b508      	push	{r3, lr}
   14c3c:	f7ff f904 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14c40:	bd08      	pop	{r3, pc}

00014c42 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
   14c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c46:	4604      	mov	r4, r0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   14c48:	f640 70ff 	movw	r0, #4095	; 0xfff
   14c4c:	f7ff f8fb 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14c50:	4606      	mov	r6, r0
  const IntegerType zero = Dup<IntegerType>(0);
   14c52:	2000      	movs	r0, #0
   14c54:	f7ff f8f7 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14c58:	4680      	mov	r8, r0
  const IntegerType one = Dup<IntegerType>(1);
   14c5a:	2001      	movs	r0, #1
   14c5c:	f7ff f8f3 	bl	13e46 <_ZN8gemmlowp3DupIiEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
   14c60:	4605      	mov	r5, r0
  const IntegerType remainder = BitAnd(x, mask);
   14c62:	4631      	mov	r1, r6
   14c64:	4620      	mov	r0, r4
   14c66:	f7ff f8ef 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14c6a:	4607      	mov	r7, r0
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
   14c6c:	2101      	movs	r1, #1
   14c6e:	4630      	mov	r0, r6
   14c70:	f7ff f8ec 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14c74:	4606      	mov	r6, r0
   14c76:	4641      	mov	r1, r8
   14c78:	4620      	mov	r0, r4
   14c7a:	f7ff f8f3 	bl	13e64 <_ZN8gemmlowp14MaskIfLessThanIiEET_S1_S1_>
   14c7e:	4629      	mov	r1, r5
   14c80:	f7ff f8e2 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14c84:	4601      	mov	r1, r0
   14c86:	4630      	mov	r0, r6
   14c88:	f7ff f8e2 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
   14c8c:	4606      	mov	r6, r0
  return Add(ShiftRight(x, exponent),
   14c8e:	210c      	movs	r1, #12
   14c90:	4620      	mov	r0, r4
   14c92:	f7ff f8db 	bl	13e4c <_ZN8gemmlowp10ShiftRightIiEET_S1_i>
   14c96:	4604      	mov	r4, r0
   14c98:	4631      	mov	r1, r6
   14c9a:	4638      	mov	r0, r7
   14c9c:	f7ff f8ea 	bl	13e74 <_ZN8gemmlowp17MaskIfGreaterThanIiEET_S1_S1_>
   14ca0:	4629      	mov	r1, r5
   14ca2:	f7ff f8d1 	bl	13e48 <_ZN8gemmlowp6BitAndIiEET_S1_S1_>
   14ca6:	4601      	mov	r1, r0
   14ca8:	4620      	mov	r0, r4
   14caa:	f7ff f8d1 	bl	13e50 <_ZN8gemmlowp3AddIiEET_S1_S1_>
}
   14cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014cb2 <_ZN8gemmlowp7RescaleILi12EiLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14cb2:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14cb4:	f7ff ffc5 	bl	14c42 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12EiEET0_S1_>
}
   14cb8:	bd08      	pop	{r3, pc}

00014cba <_ZN8gemmlowp10MaskIfZeroIiLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
   14cba:	b508      	push	{r3, lr}
   14cbc:	f7ff ff57 	bl	14b6e <_ZN8gemmlowp10MaskIfZeroIiEET_S1_>
   14cc0:	bd08      	pop	{r3, pc}

00014cc2 <_ZN8gemmlowp7RescaleILi0EiLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
   14cc2:	b508      	push	{r3, lr}
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
   14cc4:	f7f8 fa76 	bl	d1b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5EiEET0_S1_>
}
   14cc8:	bd08      	pop	{r3, pc}

00014cca <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   14cca:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14ccc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14cce:	b113      	cbz	r3, 14cd6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
   14cd0:	2120      	movs	r1, #32
   14cd2:	4798      	blx	r3
}
   14cd4:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   14cd6:	f001 fa60 	bl	1619a <abort>

00014cda <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:
                                    OpDataPooling* data) {
   14cda:	b4f0      	push	{r4, r5, r6, r7}
   14cdc:	b084      	sub	sp, #16
  return t->dims->data[dim];
   14cde:	6893      	ldr	r3, [r2, #8]
   14ce0:	689e      	ldr	r6, [r3, #8]
   14ce2:	68dc      	ldr	r4, [r3, #12]
      params->stride_height, params->stride_width,
   14ce4:	688a      	ldr	r2, [r1, #8]
   14ce6:	684b      	ldr	r3, [r1, #4]
      /*dilation_rate_width=*/1, height, width, params->filter_height,
   14ce8:	690f      	ldr	r7, [r1, #16]
      params->filter_width, params->padding, &out_height, &out_width);
   14cea:	68cd      	ldr	r5, [r1, #12]
   14cec:	7808      	ldrb	r0, [r1, #0]
  if (stride == 0) return 0;
   14cee:	b17b      	cbz	r3, 14d10 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x36>
  switch (padding) {
   14cf0:	2801      	cmp	r0, #1
   14cf2:	d003      	beq.n	14cfc <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x22>
   14cf4:	2802      	cmp	r0, #2
   14cf6:	d006      	beq.n	14d06 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x2c>
   14cf8:	2100      	movs	r1, #0
   14cfa:	e00a      	b.n	14d12 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - 1) / stride;
   14cfc:	1919      	adds	r1, r3, r4
   14cfe:	3901      	subs	r1, #1
   14d00:	fb91 f1f3 	sdiv	r1, r1, r3
   14d04:	e005      	b.n	14d12 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
      return (image_size + stride - effective_filter_size) / stride;
   14d06:	1919      	adds	r1, r3, r4
   14d08:	1b49      	subs	r1, r1, r5
   14d0a:	fb91 f1f3 	sdiv	r1, r1, r3
   14d0e:	e000      	b.n	14d12 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x38>
  if (stride == 0) return 0;
   14d10:	4619      	mov	r1, r3
   14d12:	b17a      	cbz	r2, 14d34 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5a>
  switch (padding) {
   14d14:	2801      	cmp	r0, #1
   14d16:	d003      	beq.n	14d20 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x46>
   14d18:	2802      	cmp	r0, #2
   14d1a:	d006      	beq.n	14d2a <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x50>
   14d1c:	2000      	movs	r0, #0
   14d1e:	e00a      	b.n	14d36 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - 1) / stride;
   14d20:	1990      	adds	r0, r2, r6
   14d22:	3801      	subs	r0, #1
   14d24:	fb90 f0f2 	sdiv	r0, r0, r2
   14d28:	e005      	b.n	14d36 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
      return (image_size + stride - effective_filter_size) / stride;
   14d2a:	1990      	adds	r0, r2, r6
   14d2c:	1bc0      	subs	r0, r0, r7
   14d2e:	fb90 f0f2 	sdiv	r0, r0, r2
   14d32:	e000      	b.n	14d36 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE+0x5c>
  if (stride == 0) return 0;
   14d34:	4610      	mov	r0, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14d36:	3801      	subs	r0, #1
   14d38:	fb00 7202 	mla	r2, r0, r2, r7
  int total_padding =
   14d3c:	1b92      	subs	r2, r2, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   14d3e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  *offset = total_padding % 2;
   14d42:	f002 0001 	and.w	r0, r2, #1
  return total_padding / 2;
   14d46:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   14d4a:	1052      	asrs	r2, r2, #1
  padding_values.height =
   14d4c:	9201      	str	r2, [sp, #4]
  padding_values.height_offset = offset;
   14d4e:	9003      	str	r0, [sp, #12]
      ((out_size - 1) * stride + effective_filter_size - in_size);
   14d50:	3901      	subs	r1, #1
   14d52:	fb01 5303 	mla	r3, r1, r3, r5
  int total_padding =
   14d56:	1b1b      	subs	r3, r3, r4
  total_padding = total_padding > 0 ? total_padding : 0;
   14d58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  *offset = total_padding % 2;
   14d5c:	f003 0201 	and.w	r2, r3, #1
  return total_padding / 2;
   14d60:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   14d64:	105b      	asrs	r3, r3, #1
  padding_values.width =
   14d66:	9300      	str	r3, [sp, #0]
  padding_values.width_offset = offset;
   14d68:	9202      	str	r2, [sp, #8]
   14d6a:	ab04      	add	r3, sp, #16
   14d6c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   14d70:	9c08      	ldr	r4, [sp, #32]
   14d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14d76:	2000      	movs	r0, #0
   14d78:	b004      	add	sp, #16
   14d7a:	bcf0      	pop	{r4, r5, r6, r7}
   14d7c:	4770      	bx	lr

00014d7e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   14d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d82:	b0b5      	sub	sp, #212	; 0xd4
   14d84:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   14d86:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
   14d88:	6891      	ldr	r1, [r2, #8]
   14d8a:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   14d8c:	6851      	ldr	r1, [r2, #4]
   14d8e:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   14d90:	6911      	ldr	r1, [r2, #16]
   14d92:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   14d94:	68d2      	ldr	r2, [r2, #12]
   14d96:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   14d98:	685a      	ldr	r2, [r3, #4]
   14d9a:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   14d9e:	681a      	ldr	r2, [r3, #0]
   14da0:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   14da4:	699a      	ldr	r2, [r3, #24]
   14da6:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   14da8:	69db      	ldr	r3, [r3, #28]
   14daa:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14dac:	4629      	mov	r1, r5
   14dae:	a81e      	add	r0, sp, #120	; 0x78
   14db0:	f7ff fe1e 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   14db4:	4628      	mov	r0, r5
   14db6:	f7ff f832 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   14dba:	9002      	str	r0, [sp, #8]
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
   14dbc:	4621      	mov	r1, r4
   14dbe:	a824      	add	r0, sp, #144	; 0x90
   14dc0:	f7ff fe16 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
   14dc4:	4620      	mov	r0, r4
   14dc6:	f7ff f830 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   14dca:	9003      	str	r0, [sp, #12]
  inline int32_t DimensionsCount() const { return size_; }
   14dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14dce:	2b04      	cmp	r3, #4
   14dd0:	d17b      	bne.n	14eca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x14c>
   14dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14dd4:	2b04      	cmp	r3, #4
   14dd6:	d17a      	bne.n	14ece <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x150>
    TFLITE_DCHECK_LT(i, size_);
   14dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14dda:	2b00      	cmp	r3, #0
   14ddc:	dd79      	ble.n	14ed2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x154>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dde:	2b05      	cmp	r3, #5
   14de0:	dd79      	ble.n	14ed6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x158>
   14de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14de4:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   14de6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14de8:	2a00      	cmp	r2, #0
   14dea:	dd76      	ble.n	14eda <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x15c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14dec:	2a05      	cmp	r2, #5
   14dee:	dd76      	ble.n	14ede <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
   14df0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14df2:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14df4:	429a      	cmp	r2, r3
   14df6:	d174      	bne.n	14ee2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x164>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14df8:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   14dfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14dfc:	2a00      	cmp	r2, #0
   14dfe:	dd72      	ble.n	14ee6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e00:	2a05      	cmp	r2, #5
   14e02:	dd72      	ble.n	14eea <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x16c>
   14e04:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14e06:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14e08:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   14e0a:	4293      	cmp	r3, r2
   14e0c:	dc6f      	bgt.n	14eee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x170>
      return __a;
   14e0e:	ab33      	add	r3, sp, #204	; 0xcc
   14e10:	681b      	ldr	r3, [r3, #0]
   14e12:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   14e14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14e16:	2b03      	cmp	r3, #3
   14e18:	dd6b      	ble.n	14ef2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e1a:	2b05      	cmp	r3, #5
   14e1c:	dd6b      	ble.n	14ef6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x178>
   14e1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14e20:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   14e22:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14e24:	2a03      	cmp	r2, #3
   14e26:	dd68      	ble.n	14efa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e28:	2a05      	cmp	r2, #5
   14e2a:	dd68      	ble.n	14efe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x180>
   14e2c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14e2e:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14e30:	429a      	cmp	r2, r3
   14e32:	d166      	bne.n	14f02 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x184>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14e34:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   14e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14e38:	2a03      	cmp	r2, #3
   14e3a:	dd64      	ble.n	14f06 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e3c:	2a05      	cmp	r2, #5
   14e3e:	dd64      	ble.n	14f0a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x18c>
   14e40:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14e42:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   14e44:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   14e46:	4293      	cmp	r3, r2
   14e48:	dc61      	bgt.n	14f0e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x190>
      return __a;
   14e4a:	ab31      	add	r3, sp, #196	; 0xc4
   14e4c:	681b      	ldr	r3, [r3, #0]
   14e4e:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   14e50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14e52:	2b01      	cmp	r3, #1
   14e54:	dd5d      	ble.n	14f12 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e56:	2b05      	cmp	r3, #5
   14e58:	dd5d      	ble.n	14f16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x198>
   14e5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14e5c:	685b      	ldr	r3, [r3, #4]
   14e5e:	930f      	str	r3, [sp, #60]	; 0x3c
    TFLITE_DCHECK_LT(i, size_);
   14e60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   14e62:	2b02      	cmp	r3, #2
   14e64:	dd5a      	ble.n	14f1c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x19e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e66:	2b05      	cmp	r3, #5
   14e68:	dd5a      	ble.n	14f20 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a2>
   14e6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14e6c:	689b      	ldr	r3, [r3, #8]
   14e6e:	930e      	str	r3, [sp, #56]	; 0x38
    TFLITE_DCHECK_LT(i, size_);
   14e70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14e72:	2b01      	cmp	r3, #1
   14e74:	dd57      	ble.n	14f26 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e76:	2b05      	cmp	r3, #5
   14e78:	dd57      	ble.n	14f2a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1ac>
   14e7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e7c:	685b      	ldr	r3, [r3, #4]
   14e7e:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   14e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14e82:	2b02      	cmp	r3, #2
   14e84:	dd54      	ble.n	14f30 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14e86:	2b05      	cmp	r3, #5
   14e88:	dd54      	ble.n	14f34 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1b6>
   14e8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e8c:	689b      	ldr	r3, [r3, #8]
   14e8e:	930c      	str	r3, [sp, #48]	; 0x30
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   14e90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14e92:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_width = params.stride_width;
   14e94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14e96:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int batch = 0; batch < batches; ++batch) {
   14e98:	f04f 0b00 	mov.w	fp, #0
   14e9c:	9b08      	ldr	r3, [sp, #32]
   14e9e:	459b      	cmp	fp, r3
   14ea0:	f280 812d 	bge.w	150fe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   14ea4:	f04f 0a00 	mov.w	sl, #0
   14ea8:	46d1      	mov	r9, sl
   14eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14eac:	4599      	cmp	r9, r3
   14eae:	f280 8123 	bge.w	150f8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x37a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   14eb2:	f04f 0a00 	mov.w	sl, #0
   14eb6:	46d8      	mov	r8, fp
   14eb8:	46cb      	mov	fp, r9
   14eba:	46d1      	mov	r9, sl
   14ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ebe:	4599      	cmp	r9, r3
   14ec0:	f280 8115 	bge.w	150ee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   14ec4:	f04f 0a00 	mov.w	sl, #0
   14ec8:	e0c6      	b.n	15058 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2da>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   14eca:	f001 f966 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   14ece:	f001 f964 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   14ed2:	f001 f962 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ed6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14ed8:	e785      	b.n	14de6 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x68>
    TFLITE_DCHECK_LT(i, size_);
   14eda:	f001 f95e 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ede:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14ee0:	e788      	b.n	14df4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x76>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14ee2:	f001 f95a 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   14ee6:	f001 f958 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14eea:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14eec:	e78c      	b.n	14e08 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x8a>
	return __b;
   14eee:	ab32      	add	r3, sp, #200	; 0xc8
   14ef0:	e78e      	b.n	14e10 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x92>
    TFLITE_DCHECK_LT(i, size_);
   14ef2:	f001 f952 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14ef6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14ef8:	e793      	b.n	14e22 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xa4>
    TFLITE_DCHECK_LT(i, size_);
   14efa:	f001 f94e 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14efe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14f00:	e796      	b.n	14e30 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xb2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   14f02:	f001 f94a 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   14f06:	f001 f948 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14f0a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   14f0c:	e79a      	b.n	14e44 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xc6>
   14f0e:	ab30      	add	r3, sp, #192	; 0xc0
   14f10:	e79c      	b.n	14e4c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xce>
    TFLITE_DCHECK_LT(i, size_);
   14f12:	f001 f942 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14f16:	9b20      	ldr	r3, [sp, #128]	; 0x80
   14f18:	930f      	str	r3, [sp, #60]	; 0x3c
   14f1a:	e7a1      	b.n	14e60 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   14f1c:	f001 f93d 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14f22:	930e      	str	r3, [sp, #56]	; 0x38
   14f24:	e7a4      	b.n	14e70 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   14f26:	f001 f938 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   14f2c:	930d      	str	r3, [sp, #52]	; 0x34
   14f2e:	e7a7      	b.n	14e80 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   14f30:	f001 f933 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   14f34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   14f36:	930c      	str	r3, [sp, #48]	; 0x30
   14f38:	e7aa      	b.n	14e90 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x112>
	return __b;
   14f3a:	a92e      	add	r1, sp, #184	; 0xb8
   14f3c:	e0a5      	b.n	1508a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x30c>
	return __b;
   14f3e:	aa2d      	add	r2, sp, #180	; 0xb4
   14f40:	e0ad      	b.n	1509e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x320>
	return __b;
   14f42:	aa2b      	add	r2, sp, #172	; 0xac
   14f44:	e0b5      	b.n	150b2 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x334>
	return __b;
   14f46:	ab2a      	add	r3, sp, #168	; 0xa8
   14f48:	e0bc      	b.n	150c4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x346>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14f4a:	f001 f926 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14f4e:	f001 f924 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14f52:	f001 f922 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14f56:	f001 f920 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14f5a:	f001 f91e 	bl	1619a <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float total = 0.f;
          float filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   14f5e:	3601      	adds	r6, #1
   14f60:	42b5      	cmp	r5, r6
   14f62:	dd37      	ble.n	14fd4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14f64:	9f06      	ldr	r7, [sp, #24]
   14f66:	9b07      	ldr	r3, [sp, #28]
   14f68:	42bb      	cmp	r3, r7
   14f6a:	ddf8      	ble.n	14f5e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e0>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   14f6c:	9b04      	ldr	r3, [sp, #16]
   14f6e:	19d8      	adds	r0, r3, r7
              const int in_y = in_y_origin + filter_y;
   14f70:	9b05      	ldr	r3, [sp, #20]
   14f72:	eb03 0c06 	add.w	ip, r3, r6
  inline int32_t DimensionsCount() const { return size_; }
   14f76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14f78:	2b04      	cmp	r3, #4
   14f7a:	d1e6      	bne.n	14f4a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1cc>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14f7c:	f1b8 0f00 	cmp.w	r8, #0
   14f80:	dbe5      	blt.n	14f4e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
   14f82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14f84:	4598      	cmp	r8, r3
   14f86:	dae2      	bge.n	14f4e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   14f88:	f1bc 0f00 	cmp.w	ip, #0
   14f8c:	dbe1      	blt.n	14f52 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
   14f8e:	9920      	ldr	r1, [sp, #128]	; 0x80
   14f90:	458c      	cmp	ip, r1
   14f92:	dade      	bge.n	14f52 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   14f94:	2800      	cmp	r0, #0
   14f96:	dbde      	blt.n	14f56 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
   14f98:	9a21      	ldr	r2, [sp, #132]	; 0x84
   14f9a:	4290      	cmp	r0, r2
   14f9c:	dadb      	bge.n	14f56 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1d8>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   14f9e:	f1ba 0f00 	cmp.w	sl, #0
   14fa2:	dbda      	blt.n	14f5a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
   14fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14fa6:	459a      	cmp	sl, r3
   14fa8:	dad7      	bge.n	14f5a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1dc>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   14faa:	fb01 c108 	mla	r1, r1, r8, ip
   14fae:	fb01 0202 	mla	r2, r1, r2, r0
   14fb2:	fb02 a303 	mla	r3, r2, r3, sl
              total +=
   14fb6:	9a02      	ldr	r2, [sp, #8]
   14fb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   14fbc:	9801      	ldr	r0, [sp, #4]
   14fbe:	f7eb fd9f 	bl	b00 <__addsf3>
   14fc2:	9001      	str	r0, [sp, #4]
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   14fc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14fc8:	4620      	mov	r0, r4
   14fca:	f7eb fd99 	bl	b00 <__addsf3>
   14fce:	4604      	mov	r4, r0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   14fd0:	3701      	adds	r7, #1
   14fd2:	e7c8      	b.n	14f66 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e8>
            }
          }
          if (filter_count == 0) return false;
   14fd4:	2100      	movs	r1, #0
   14fd6:	4620      	mov	r0, r4
   14fd8:	f7ec f82e 	bl	1038 <__aeabi_fcmpeq>
   14fdc:	2800      	cmp	r0, #0
   14fde:	f040 808e 	bne.w	150fe <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x380>
          const float average = total / filter_count;
   14fe2:	4621      	mov	r1, r4
   14fe4:	9801      	ldr	r0, [sp, #4]
   14fe6:	f7eb ff47 	bl	e78 <__aeabi_fdiv>
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   14fea:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   14fec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   14fee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   14ff0:	2b04      	cmp	r3, #4
   14ff2:	d16b      	bne.n	150cc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   14ff4:	f1b8 0f00 	cmp.w	r8, #0
   14ff8:	db6a      	blt.n	150d0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
   14ffa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14ffc:	4598      	cmp	r8, r3
   14ffe:	da67      	bge.n	150d0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x352>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15000:	f1bb 0f00 	cmp.w	fp, #0
   15004:	db66      	blt.n	150d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
   15006:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15008:	4593      	cmp	fp, r2
   1500a:	da63      	bge.n	150d4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x356>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1500c:	f1b9 0f00 	cmp.w	r9, #0
   15010:	db62      	blt.n	150d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
   15012:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   15014:	4599      	cmp	r9, r3
   15016:	da5f      	bge.n	150d8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15018:	f1ba 0f00 	cmp.w	sl, #0
   1501c:	db5e      	blt.n	150dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
   1501e:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   15020:	45a2      	cmp	sl, r4
   15022:	da5b      	bge.n	150dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15024:	fb02 b208 	mla	r2, r2, r8, fp
   15028:	fb02 9303 	mla	r3, r2, r3, r9
   1502c:	fb03 a404 	mla	r4, r3, r4, sl
   15030:	9012      	str	r0, [sp, #72]	; 0x48
   15032:	9111      	str	r1, [sp, #68]	; 0x44
   15034:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   15036:	f7ec f809 	bl	104c <__aeabi_fcmplt>
   1503a:	2800      	cmp	r0, #0
   1503c:	d150      	bne.n	150e0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x362>
      return __a;
   1503e:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   15040:	6829      	ldr	r1, [r5, #0]
   15042:	4630      	mov	r0, r6
   15044:	f7ec f802 	bl	104c <__aeabi_fcmplt>
   15048:	2800      	cmp	r0, #0
   1504a:	d14b      	bne.n	150e4 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x366>
  return min(max(x, output_activation_min), output_activation_max);
   1504c:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1504e:	9a03      	ldr	r2, [sp, #12]
   15050:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   15054:	f10a 0a01 	add.w	sl, sl, #1
   15058:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1505a:	459a      	cmp	sl, r3
   1505c:	da44      	bge.n	150e8 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x36a>
              (out_x * stride_width) - params.padding_values.width;
   1505e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15060:	fb09 f203 	mul.w	r2, r9, r3
   15064:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   15068:	1a53      	subs	r3, r2, r1
   1506a:	9304      	str	r3, [sp, #16]
              (out_y * stride_height) - params.padding_values.height;
   1506c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1506e:	fb0b f003 	mul.w	r0, fp, r3
   15072:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   15076:	1ac4      	subs	r4, r0, r3
   15078:	9405      	str	r4, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1507a:	2400      	movs	r4, #0
   1507c:	942f      	str	r4, [sp, #188]	; 0xbc
   1507e:	1a8a      	subs	r2, r1, r2
   15080:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   15082:	42a2      	cmp	r2, r4
   15084:	f73f af59 	bgt.w	14f3a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1bc>
      return __a;
   15088:	a92f      	add	r1, sp, #188	; 0xbc
   1508a:	6809      	ldr	r1, [r1, #0]
   1508c:	9106      	str	r1, [sp, #24]
              std::min(params.filter_width, input_width - in_x_origin);
   1508e:	990e      	ldr	r1, [sp, #56]	; 0x38
   15090:	440a      	add	r2, r1
   15092:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   15094:	9919      	ldr	r1, [sp, #100]	; 0x64
   15096:	428a      	cmp	r2, r1
   15098:	f6ff af51 	blt.w	14f3e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c0>
      return __a;
   1509c:	aa19      	add	r2, sp, #100	; 0x64
   1509e:	6812      	ldr	r2, [r2, #0]
   150a0:	9207      	str	r2, [sp, #28]
          const int filter_y_start = std::max(0, -in_y_origin);
   150a2:	2200      	movs	r2, #0
   150a4:	922c      	str	r2, [sp, #176]	; 0xb0
   150a6:	1a1b      	subs	r3, r3, r0
   150a8:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   150aa:	4293      	cmp	r3, r2
   150ac:	f73f af49 	bgt.w	14f42 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c4>
      return __a;
   150b0:	aa2c      	add	r2, sp, #176	; 0xb0
   150b2:	6816      	ldr	r6, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   150b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   150b6:	4413      	add	r3, r2
   150b8:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   150ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   150bc:	4293      	cmp	r3, r2
   150be:	f6ff af42 	blt.w	14f46 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1c8>
      return __a;
   150c2:	ab18      	add	r3, sp, #96	; 0x60
   150c4:	681d      	ldr	r5, [r3, #0]
          float filter_count = 0;
   150c6:	2400      	movs	r4, #0
          float total = 0.f;
   150c8:	9401      	str	r4, [sp, #4]
   150ca:	e749      	b.n	14f60 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1e2>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   150cc:	f001 f865 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   150d0:	f001 f863 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   150d4:	f001 f861 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   150d8:	f001 f85f 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   150dc:	f001 f85d 	bl	1619a <abort>
	return __b;
   150e0:	ad11      	add	r5, sp, #68	; 0x44
   150e2:	e7ad      	b.n	15040 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
	return __b;
   150e4:	ad10      	add	r5, sp, #64	; 0x40
   150e6:	e7b1      	b.n	1504c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ce>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   150e8:	f109 0901 	add.w	r9, r9, #1
   150ec:	e6e6      	b.n	14ebc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13e>
   150ee:	46d9      	mov	r9, fp
   150f0:	46c3      	mov	fp, r8
    for (int out_y = 0; out_y < output_height; ++out_y) {
   150f2:	f109 0901 	add.w	r9, r9, #1
   150f6:	e6d8      	b.n	14eaa <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x12c>
  for (int batch = 0; batch < batches; ++batch) {
   150f8:	f10b 0b01 	add.w	fp, fp, #1
   150fc:	e6ce      	b.n	14e9c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x11e>
    if (size_ > kMaxSmallSize) {
   150fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15100:	2b05      	cmp	r3, #5
   15102:	dd03      	ble.n	1510c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
      delete[] dims_pointer_;
   15104:	9825      	ldr	r0, [sp, #148]	; 0x94
   15106:	b108      	cbz	r0, 1510c <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x38e>
   15108:	f001 f832 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   1510c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1510e:	2b05      	cmp	r3, #5
   15110:	dd03      	ble.n	1511a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
      delete[] dims_pointer_;
   15112:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15114:	b108      	cbz	r0, 1511a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x39c>
   15116:	f001 f82b 	bl	16170 <_ZdaPv>
                             tflite::micro::GetTensorData<float>(output));
}
   1511a:	b035      	add	sp, #212	; 0xd4
   1511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015120 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:
}

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
   15120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15124:	b0b5      	sub	sp, #212	; 0xd4
   15126:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
   15128:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   1512a:	6891      	ldr	r1, [r2, #8]
   1512c:	9116      	str	r1, [sp, #88]	; 0x58
  op_params.stride_width = params->stride_width;
   1512e:	6851      	ldr	r1, [r2, #4]
   15130:	9117      	str	r1, [sp, #92]	; 0x5c
  op_params.filter_height = params->filter_height;
   15132:	6911      	ldr	r1, [r2, #16]
   15134:	9118      	str	r1, [sp, #96]	; 0x60
  op_params.filter_width = params->filter_width;
   15136:	68d2      	ldr	r2, [r2, #12]
   15138:	9219      	str	r2, [sp, #100]	; 0x64
  op_params.padding_values.height = data->padding.height;
   1513a:	685a      	ldr	r2, [r3, #4]
   1513c:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
  op_params.padding_values.width = data->padding.width;
   15140:	681a      	ldr	r2, [r3, #0]
   15142:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
  op_params.float_activation_min = data->activation_min_f32;
   15146:	699a      	ldr	r2, [r3, #24]
   15148:	921c      	str	r2, [sp, #112]	; 0x70
  op_params.float_activation_max = data->activation_max_f32;
   1514a:	69db      	ldr	r3, [r3, #28]
   1514c:	931d      	str	r3, [sp, #116]	; 0x74
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   1514e:	4629      	mov	r1, r5
   15150:	a81e      	add	r0, sp, #120	; 0x78
   15152:	f7ff fc4d 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   15156:	4628      	mov	r0, r5
   15158:	f7fe fe61 	bl	13e1e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
   1515c:	4682      	mov	sl, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
   1515e:	4621      	mov	r1, r4
   15160:	a824      	add	r0, sp, #144	; 0x90
   15162:	f7ff fc45 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
   15166:	4620      	mov	r0, r4
   15168:	f7fe fe5f 	bl	13e2a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
   1516c:	9000      	str	r0, [sp, #0]
  inline int32_t DimensionsCount() const { return size_; }
   1516e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15170:	2b04      	cmp	r3, #4
   15172:	f040 8081 	bne.w	15278 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x158>
   15176:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15178:	2b04      	cmp	r3, #4
   1517a:	d17f      	bne.n	1527c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15c>
    TFLITE_DCHECK_LT(i, size_);
   1517c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1517e:	2b00      	cmp	r3, #0
   15180:	dd7e      	ble.n	15280 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15182:	2b05      	cmp	r3, #5
   15184:	dd7e      	ble.n	15284 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x164>
   15186:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15188:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   1518a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1518c:	2a00      	cmp	r2, #0
   1518e:	dd7b      	ble.n	15288 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x168>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15190:	2a05      	cmp	r2, #5
   15192:	dd7b      	ble.n	1528c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16c>
   15194:	9a25      	ldr	r2, [sp, #148]	; 0x94
   15196:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15198:	429a      	cmp	r2, r3
   1519a:	d179      	bne.n	15290 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x170>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   1519c:	9333      	str	r3, [sp, #204]	; 0xcc
    TFLITE_DCHECK_LT(i, size_);
   1519e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   151a0:	2a00      	cmp	r2, #0
   151a2:	dd77      	ble.n	15294 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x174>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151a4:	2a05      	cmp	r2, #5
   151a6:	dd77      	ble.n	15298 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x178>
   151a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   151aa:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   151ac:	9232      	str	r2, [sp, #200]	; 0xc8
      if (__b < __a)
   151ae:	4293      	cmp	r3, r2
   151b0:	dc74      	bgt.n	1529c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17c>
      return __a;
   151b2:	ab33      	add	r3, sp, #204	; 0xcc
   151b4:	681b      	ldr	r3, [r3, #0]
   151b6:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   151b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   151ba:	2b03      	cmp	r3, #3
   151bc:	dd70      	ble.n	152a0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x180>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151be:	2b05      	cmp	r3, #5
   151c0:	dd70      	ble.n	152a4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x184>
   151c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   151c4:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   151c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   151c8:	2a03      	cmp	r2, #3
   151ca:	dd6d      	ble.n	152a8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x188>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151cc:	2a05      	cmp	r2, #5
   151ce:	dd6d      	ble.n	152ac <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18c>
   151d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   151d2:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   151d4:	429a      	cmp	r2, r3
   151d6:	d16b      	bne.n	152b0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x190>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   151d8:	9331      	str	r3, [sp, #196]	; 0xc4
    TFLITE_DCHECK_LT(i, size_);
   151da:	9a24      	ldr	r2, [sp, #144]	; 0x90
   151dc:	2a03      	cmp	r2, #3
   151de:	dd69      	ble.n	152b4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x194>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151e0:	2a05      	cmp	r2, #5
   151e2:	dd69      	ble.n	152b8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x198>
   151e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   151e6:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   151e8:	9230      	str	r2, [sp, #192]	; 0xc0
      if (__b < __a)
   151ea:	4293      	cmp	r3, r2
   151ec:	dc66      	bgt.n	152bc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19c>
      return __a;
   151ee:	ab31      	add	r3, sp, #196	; 0xc4
   151f0:	681b      	ldr	r3, [r3, #0]
   151f2:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   151f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   151f6:	2b01      	cmp	r3, #1
   151f8:	dd62      	ble.n	152c0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   151fa:	2b05      	cmp	r3, #5
   151fc:	dd62      	ble.n	152c4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a4>
   151fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15200:	685b      	ldr	r3, [r3, #4]
   15202:	930d      	str	r3, [sp, #52]	; 0x34
    TFLITE_DCHECK_LT(i, size_);
   15204:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15206:	2b02      	cmp	r3, #2
   15208:	dd5f      	ble.n	152ca <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1520a:	2b05      	cmp	r3, #5
   1520c:	dd5f      	ble.n	152ce <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
   1520e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15210:	689b      	ldr	r3, [r3, #8]
   15212:	930c      	str	r3, [sp, #48]	; 0x30
    TFLITE_DCHECK_LT(i, size_);
   15214:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15216:	2b01      	cmp	r3, #1
   15218:	dd5c      	ble.n	152d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1521a:	2b05      	cmp	r3, #5
   1521c:	dd5c      	ble.n	152d8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
   1521e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15220:	685b      	ldr	r3, [r3, #4]
   15222:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   15224:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15226:	2b02      	cmp	r3, #2
   15228:	dd59      	ble.n	152de <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1be>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1522a:	2b05      	cmp	r3, #5
   1522c:	dd59      	ble.n	152e2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
   1522e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15230:	689b      	ldr	r3, [r3, #8]
   15232:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   15234:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15236:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   15238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1523a:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   1523c:	f04f 0b00 	mov.w	fp, #0
   15240:	46d9      	mov	r9, fp
   15242:	46d3      	mov	fp, sl
   15244:	9b06      	ldr	r3, [sp, #24]
   15246:	4599      	cmp	r9, r3
   15248:	f280 8127 	bge.w	1549a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1524c:	f04f 0a00 	mov.w	sl, #0
   15250:	46d8      	mov	r8, fp
   15252:	46cb      	mov	fp, r9
   15254:	46d1      	mov	r9, sl
   15256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15258:	4599      	cmp	r9, r3
   1525a:	f280 8119 	bge.w	15490 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1525e:	f04f 0a00 	mov.w	sl, #0
   15262:	464f      	mov	r7, r9
   15264:	4653      	mov	r3, sl
   15266:	46c2      	mov	sl, r8
   15268:	4698      	mov	r8, r3
   1526a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1526c:	4598      	cmp	r8, r3
   1526e:	f280 810b 	bge.w	15488 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
        for (int channel = 0; channel < depth; ++channel) {
   15272:	f04f 0900 	mov.w	r9, #0
   15276:	e0ba      	b.n	153ee <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ce>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15278:	f000 ff8f 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1527c:	f000 ff8d 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   15280:	f000 ff8b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15284:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15286:	e780      	b.n	1518a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x6a>
    TFLITE_DCHECK_LT(i, size_);
   15288:	f000 ff87 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1528c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1528e:	e783      	b.n	15198 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x78>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15290:	f000 ff83 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   15294:	f000 ff81 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15298:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1529a:	e787      	b.n	151ac <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8c>
	return __b;
   1529c:	ab32      	add	r3, sp, #200	; 0xc8
   1529e:	e789      	b.n	151b4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x94>
    TFLITE_DCHECK_LT(i, size_);
   152a0:	f000 ff7b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   152a6:	e78e      	b.n	151c6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   152a8:	f000 ff77 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   152ae:	e791      	b.n	151d4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb4>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   152b0:	f000 ff73 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   152b4:	f000 ff71 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   152ba:	e795      	b.n	151e8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc8>
   152bc:	ab30      	add	r3, sp, #192	; 0xc0
   152be:	e797      	b.n	151f0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xd0>
    TFLITE_DCHECK_LT(i, size_);
   152c0:	f000 ff6b 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   152c6:	930d      	str	r3, [sp, #52]	; 0x34
   152c8:	e79c      	b.n	15204 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe4>
    TFLITE_DCHECK_LT(i, size_);
   152ca:	f000 ff66 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
   152d0:	930c      	str	r3, [sp, #48]	; 0x30
   152d2:	e79f      	b.n	15214 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf4>
    TFLITE_DCHECK_LT(i, size_);
   152d4:	f000 ff61 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   152da:	930b      	str	r3, [sp, #44]	; 0x2c
   152dc:	e7a2      	b.n	15224 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x104>
    TFLITE_DCHECK_LT(i, size_);
   152de:	f000 ff5c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   152e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   152e4:	930a      	str	r3, [sp, #40]	; 0x28
   152e6:	e7a5      	b.n	15234 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x114>
	return __b;
   152e8:	a92e      	add	r1, sp, #184	; 0xb8
   152ea:	e099      	b.n	15420 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x300>
	return __b;
   152ec:	aa2d      	add	r2, sp, #180	; 0xb4
   152ee:	e0a1      	b.n	15434 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x314>
	return __b;
   152f0:	aa2b      	add	r2, sp, #172	; 0xac
   152f2:	e0a9      	b.n	15448 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x328>
	return __b;
   152f4:	ab2a      	add	r3, sp, #168	; 0xa8
   152f6:	e0b0      	b.n	1545a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x33a>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   152f8:	f000 ff4f 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   152fc:	f000 ff4d 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15300:	f000 ff4b 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15304:	f000 ff49 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15308:	f000 ff47 	bl	1619a <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   1530c:	6833      	ldr	r3, [r6, #0]
   1530e:	930f      	str	r3, [sp, #60]	; 0x3c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15310:	3501      	adds	r5, #1
   15312:	9b04      	ldr	r3, [sp, #16]
   15314:	42ab      	cmp	r3, r5
   15316:	dd2d      	ble.n	15374 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x254>
              const int in_x = in_x_origin + filter_x;
   15318:	9b01      	ldr	r3, [sp, #4]
   1531a:	1958      	adds	r0, r3, r5
              const int in_y = in_y_origin + filter_y;
   1531c:	9b02      	ldr	r3, [sp, #8]
   1531e:	191e      	adds	r6, r3, r4
  inline int32_t DimensionsCount() const { return size_; }
   15320:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15322:	2b04      	cmp	r3, #4
   15324:	d1e8      	bne.n	152f8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d8>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15326:	f1bb 0f00 	cmp.w	fp, #0
   1532a:	dbe7      	blt.n	152fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
   1532c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1532e:	459b      	cmp	fp, r3
   15330:	dae4      	bge.n	152fc <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1dc>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15332:	2e00      	cmp	r6, #0
   15334:	dbe4      	blt.n	15300 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
   15336:	9920      	ldr	r1, [sp, #128]	; 0x80
   15338:	428e      	cmp	r6, r1
   1533a:	dae1      	bge.n	15300 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   1533c:	2800      	cmp	r0, #0
   1533e:	dbe1      	blt.n	15304 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
   15340:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15342:	4290      	cmp	r0, r2
   15344:	dade      	bge.n	15304 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15346:	f1b9 0f00 	cmp.w	r9, #0
   1534a:	dbdd      	blt.n	15308 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
   1534c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1534e:	4599      	cmp	r9, r3
   15350:	dada      	bge.n	15308 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e8>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15352:	fb01 610b 	mla	r1, r1, fp, r6
   15356:	fb01 0202 	mla	r2, r1, r2, r0
   1535a:	fb02 9303 	mla	r3, r2, r3, r9
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   1535e:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
      if (__a < __b)
   15362:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   15366:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15368:	f7eb fe70 	bl	104c <__aeabi_fcmplt>
   1536c:	2800      	cmp	r0, #0
   1536e:	d1cd      	bne.n	1530c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
      return __a;
   15370:	ae0f      	add	r6, sp, #60	; 0x3c
   15372:	e7cb      	b.n	1530c <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ec>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15374:	3401      	adds	r4, #1
   15376:	9b05      	ldr	r3, [sp, #20]
   15378:	42a3      	cmp	r3, r4
   1537a:	dd01      	ble.n	15380 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x260>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1537c:	9d03      	ldr	r5, [sp, #12]
   1537e:	e7c8      	b.n	15312 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   15380:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15382:	991c      	ldr	r1, [sp, #112]	; 0x70
                                           params.float_activation_max);
   15384:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  inline int32_t DimensionsCount() const { return size_; }
   15386:	9b24      	ldr	r3, [sp, #144]	; 0x90
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15388:	2b04      	cmp	r3, #4
   1538a:	d16c      	bne.n	15466 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x346>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1538c:	f1bb 0f00 	cmp.w	fp, #0
   15390:	db6b      	blt.n	1546a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
   15392:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15394:	459b      	cmp	fp, r3
   15396:	da68      	bge.n	1546a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15398:	2f00      	cmp	r7, #0
   1539a:	db68      	blt.n	1546e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
   1539c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1539e:	4297      	cmp	r7, r2
   153a0:	da65      	bge.n	1546e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x34e>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   153a2:	f1b8 0f00 	cmp.w	r8, #0
   153a6:	db64      	blt.n	15472 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
   153a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   153aa:	4598      	cmp	r8, r3
   153ac:	da61      	bge.n	15472 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x352>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   153ae:	f1b9 0f00 	cmp.w	r9, #0
   153b2:	db60      	blt.n	15476 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
   153b4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   153b6:	45a1      	cmp	r9, r4
   153b8:	da5d      	bge.n	15476 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   153ba:	fb02 720b 	mla	r2, r2, fp, r7
   153be:	fb02 8303 	mla	r3, r2, r3, r8
   153c2:	fb03 9404 	mla	r4, r3, r4, r9
   153c6:	9012      	str	r0, [sp, #72]	; 0x48
   153c8:	9111      	str	r1, [sp, #68]	; 0x44
   153ca:	9610      	str	r6, [sp, #64]	; 0x40
      if (__a < __b)
   153cc:	f7eb fe3e 	bl	104c <__aeabi_fcmplt>
   153d0:	2800      	cmp	r0, #0
   153d2:	d152      	bne.n	1547a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35a>
      return __a;
   153d4:	ad12      	add	r5, sp, #72	; 0x48
      if (__b < __a)
   153d6:	6829      	ldr	r1, [r5, #0]
   153d8:	4630      	mov	r0, r6
   153da:	f7eb fe37 	bl	104c <__aeabi_fcmplt>
   153de:	2800      	cmp	r0, #0
   153e0:	d14d      	bne.n	1547e <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x35e>
   153e2:	682b      	ldr	r3, [r5, #0]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   153e4:	9a00      	ldr	r2, [sp, #0]
   153e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (int channel = 0; channel < depth; ++channel) {
   153ea:	f109 0901 	add.w	r9, r9, #1
   153ee:	9b07      	ldr	r3, [sp, #28]
   153f0:	4599      	cmp	r9, r3
   153f2:	da46      	bge.n	15482 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
              (out_x * stride_width) - params.padding_values.width;
   153f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   153f6:	fb08 f203 	mul.w	r2, r8, r3
   153fa:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
          const int in_x_origin =
   153fe:	1a53      	subs	r3, r2, r1
   15400:	9301      	str	r3, [sp, #4]
              (out_y * stride_height) - params.padding_values.height;
   15402:	9b08      	ldr	r3, [sp, #32]
   15404:	fb07 f003 	mul.w	r0, r7, r3
   15408:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
          const int in_y_origin =
   1540c:	1ac4      	subs	r4, r0, r3
   1540e:	9402      	str	r4, [sp, #8]
          const int filter_x_start = std::max(0, -in_x_origin);
   15410:	2400      	movs	r4, #0
   15412:	942f      	str	r4, [sp, #188]	; 0xbc
   15414:	1a8a      	subs	r2, r1, r2
   15416:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__a < __b)
   15418:	42a2      	cmp	r2, r4
   1541a:	f73f af65 	bgt.w	152e8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c8>
      return __a;
   1541e:	a92f      	add	r1, sp, #188	; 0xbc
   15420:	6809      	ldr	r1, [r1, #0]
   15422:	9103      	str	r1, [sp, #12]
              std::min(params.filter_width, input_width - in_x_origin);
   15424:	990c      	ldr	r1, [sp, #48]	; 0x30
   15426:	440a      	add	r2, r1
   15428:	922d      	str	r2, [sp, #180]	; 0xb4
      if (__b < __a)
   1542a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1542c:	428a      	cmp	r2, r1
   1542e:	f6ff af5d 	blt.w	152ec <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
      return __a;
   15432:	aa19      	add	r2, sp, #100	; 0x64
   15434:	6812      	ldr	r2, [r2, #0]
   15436:	9204      	str	r2, [sp, #16]
          const int filter_y_start = std::max(0, -in_y_origin);
   15438:	2200      	movs	r2, #0
   1543a:	922c      	str	r2, [sp, #176]	; 0xb0
   1543c:	1a1b      	subs	r3, r3, r0
   1543e:	932b      	str	r3, [sp, #172]	; 0xac
      if (__a < __b)
   15440:	4293      	cmp	r3, r2
   15442:	f73f af55 	bgt.w	152f0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
      return __a;
   15446:	aa2c      	add	r2, sp, #176	; 0xb0
   15448:	6814      	ldr	r4, [r2, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   1544a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1544c:	4413      	add	r3, r2
   1544e:	932a      	str	r3, [sp, #168]	; 0xa8
      if (__b < __a)
   15450:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15452:	4293      	cmp	r3, r2
   15454:	f6ff af4e 	blt.w	152f4 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d4>
      return __a;
   15458:	ab18      	add	r3, sp, #96	; 0x60
   1545a:	681b      	ldr	r3, [r3, #0]
   1545c:	9305      	str	r3, [sp, #20]
          float max = std::numeric_limits<float>::lowest();
   1545e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   15462:	930f      	str	r3, [sp, #60]	; 0x3c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15464:	e787      	b.n	15376 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x256>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15466:	f000 fe98 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1546a:	f000 fe96 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1546e:	f000 fe94 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15472:	f000 fe92 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15476:	f000 fe90 	bl	1619a <abort>
	return __b;
   1547a:	ad11      	add	r5, sp, #68	; 0x44
   1547c:	e7ab      	b.n	153d6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2b6>
	return __b;
   1547e:	ad10      	add	r5, sp, #64	; 0x40
   15480:	e7af      	b.n	153e2 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2c2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15482:	f108 0801 	add.w	r8, r8, #1
   15486:	e6f0      	b.n	1526a <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14a>
   15488:	46d0      	mov	r8, sl
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1548a:	f107 0901 	add.w	r9, r7, #1
   1548e:	e6e2      	b.n	15256 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
   15490:	46d9      	mov	r9, fp
   15492:	46c3      	mov	fp, r8
  for (int batch = 0; batch < batches; ++batch) {
   15494:	f109 0901 	add.w	r9, r9, #1
   15498:	e6d4      	b.n	15244 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x124>
    if (size_ > kMaxSmallSize) {
   1549a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1549c:	2b05      	cmp	r3, #5
   1549e:	dd03      	ble.n	154a8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
      delete[] dims_pointer_;
   154a0:	9825      	ldr	r0, [sp, #148]	; 0x94
   154a2:	b108      	cbz	r0, 154a8 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x388>
   154a4:	f000 fe64 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   154a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   154aa:	2b05      	cmp	r3, #5
   154ac:	dd03      	ble.n	154b6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
      delete[] dims_pointer_;
   154ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   154b0:	b108      	cbz	r0, 154b6 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x396>
   154b2:	f000 fe5d 	bl	16170 <_ZdaPv>
                         tflite::micro::GetTensorData<float>(output));
}
   154b6:	b035      	add	sp, #212	; 0xd4
   154b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000154bc <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:
                                 TfLiteEvalTensor* output) {
   154bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154c0:	b0b1      	sub	sp, #196	; 0xc4
   154c2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
   154c4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   154c6:	7a21      	ldrb	r1, [r4, #8]
   154c8:	2909      	cmp	r1, #9
   154ca:	f040 80a0 	bne.w	1560e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x152>
  op_params.stride_height = params->stride_height;
   154ce:	6891      	ldr	r1, [r2, #8]
   154d0:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.stride_width = params->stride_width;
   154d2:	6851      	ldr	r1, [r2, #4]
   154d4:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_height = params->filter_height;
   154d6:	6911      	ldr	r1, [r2, #16]
   154d8:	9114      	str	r1, [sp, #80]	; 0x50
  op_params.filter_width = params->filter_width;
   154da:	68d2      	ldr	r2, [r2, #12]
   154dc:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.padding_values.height = data->padding.height;
   154de:	685a      	ldr	r2, [r3, #4]
   154e0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
  op_params.padding_values.width = data->padding.width;
   154e4:	681a      	ldr	r2, [r3, #0]
   154e6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
  op_params.quantized_activation_min = data->activation_min;
   154ea:	691a      	ldr	r2, [r3, #16]
   154ec:	9216      	str	r2, [sp, #88]	; 0x58
  op_params.quantized_activation_max = data->activation_max;
   154ee:	695b      	ldr	r3, [r3, #20]
   154f0:	9317      	str	r3, [sp, #92]	; 0x5c
      op_params, tflite::micro::GetTensorShape(input),
   154f2:	4621      	mov	r1, r4
   154f4:	a81a      	add	r0, sp, #104	; 0x68
   154f6:	f7ff fa7b 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   154fa:	4620      	mov	r0, r4
   154fc:	f7fe fc99 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   15500:	9004      	str	r0, [sp, #16]
      tflite::micro::GetTensorShape(output),
   15502:	4629      	mov	r1, r5
   15504:	a820      	add	r0, sp, #128	; 0x80
   15506:	f7ff fa73 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::AveragePool(
   1550a:	4628      	mov	r0, r5
   1550c:	f7fe fc97 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   15510:	9005      	str	r0, [sp, #20]

inline bool AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const int8_t* input_data,
                        const RuntimeShape& output_shape, int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15512:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15516:	429a      	cmp	r2, r3
   15518:	dc7b      	bgt.n	15612 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x156>
  inline int32_t DimensionsCount() const { return size_; }
   1551a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1551c:	2b04      	cmp	r3, #4
   1551e:	d17a      	bne.n	15616 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15a>
   15520:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   15522:	2b04      	cmp	r3, #4
   15524:	d179      	bne.n	1561a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x15e>
    TFLITE_DCHECK_LT(i, size_);
   15526:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15528:	2b00      	cmp	r3, #0
   1552a:	dd78      	ble.n	1561e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x162>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1552c:	2b05      	cmp	r3, #5
   1552e:	dd78      	ble.n	15622 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x166>
   15530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15532:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   15534:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15536:	2a00      	cmp	r2, #0
   15538:	dd75      	ble.n	15626 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1553a:	2a05      	cmp	r2, #5
   1553c:	dd75      	ble.n	1562a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x16e>
   1553e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15540:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15542:	429a      	cmp	r2, r3
   15544:	d173      	bne.n	1562e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x172>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15546:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   15548:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1554a:	2a00      	cmp	r2, #0
   1554c:	dd71      	ble.n	15632 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1554e:	2a05      	cmp	r2, #5
   15550:	dd71      	ble.n	15636 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17a>
   15552:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15554:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15556:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   15558:	4293      	cmp	r3, r2
   1555a:	dc6e      	bgt.n	1563a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17e>
      return __a;
   1555c:	ab2f      	add	r3, sp, #188	; 0xbc
   1555e:	681b      	ldr	r3, [r3, #0]
   15560:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   15562:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15564:	2b03      	cmp	r3, #3
   15566:	dd6a      	ble.n	1563e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15568:	2b05      	cmp	r3, #5
   1556a:	dd6a      	ble.n	15642 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x186>
   1556c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1556e:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   15570:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15572:	2a03      	cmp	r2, #3
   15574:	dd67      	ble.n	15646 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15576:	2a05      	cmp	r2, #5
   15578:	dd67      	ble.n	1564a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x18e>
   1557a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1557c:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1557e:	429a      	cmp	r2, r3
   15580:	d165      	bne.n	1564e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x192>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15582:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   15584:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15586:	2a03      	cmp	r2, #3
   15588:	dd63      	ble.n	15652 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1558a:	2a05      	cmp	r2, #5
   1558c:	dd63      	ble.n	15656 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19a>
   1558e:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15590:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15592:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   15594:	4293      	cmp	r3, r2
   15596:	dc60      	bgt.n	1565a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x19e>
      return __a;
   15598:	ab2d      	add	r3, sp, #180	; 0xb4
   1559a:	681b      	ldr	r3, [r3, #0]
   1559c:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   1559e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   155a0:	2b01      	cmp	r3, #1
   155a2:	dd5c      	ble.n	1565e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   155a4:	2b05      	cmp	r3, #5
   155a6:	dd5c      	ble.n	15662 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1a6>
   155a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   155aa:	685b      	ldr	r3, [r3, #4]
   155ac:	930a      	str	r3, [sp, #40]	; 0x28
    TFLITE_DCHECK_LT(i, size_);
   155ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   155b0:	2b02      	cmp	r3, #2
   155b2:	dd59      	ble.n	15668 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   155b4:	2b05      	cmp	r3, #5
   155b6:	dd59      	ble.n	1566c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b0>
   155b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   155ba:	689b      	ldr	r3, [r3, #8]
   155bc:	9309      	str	r3, [sp, #36]	; 0x24
    TFLITE_DCHECK_LT(i, size_);
   155be:	9b20      	ldr	r3, [sp, #128]	; 0x80
   155c0:	2b01      	cmp	r3, #1
   155c2:	dd56      	ble.n	15672 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   155c4:	2b05      	cmp	r3, #5
   155c6:	dd56      	ble.n	15676 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ba>
   155c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   155ca:	685b      	ldr	r3, [r3, #4]
   155cc:	9308      	str	r3, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
   155ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
   155d0:	2b02      	cmp	r3, #2
   155d2:	dd53      	ble.n	1567c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   155d4:	2b05      	cmp	r3, #5
   155d6:	dd53      	ble.n	15680 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1c4>
   155d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   155da:	689b      	ldr	r3, [r3, #8]
   155dc:	930d      	str	r3, [sp, #52]	; 0x34
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   155de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   155e0:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_width = params.stride_width;
   155e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   155e4:	930c      	str	r3, [sp, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
   155e6:	f04f 0800 	mov.w	r8, #0
   155ea:	9b06      	ldr	r3, [sp, #24]
   155ec:	4598      	cmp	r8, r3
   155ee:	f280 8123 	bge.w	15838 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   155f2:	2700      	movs	r7, #0
   155f4:	46c6      	mov	lr, r8
   155f6:	46b8      	mov	r8, r7
   155f8:	9b08      	ldr	r3, [sp, #32]
   155fa:	4598      	cmp	r8, r3
   155fc:	f280 8119 	bge.w	15832 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x376>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15600:	2600      	movs	r6, #0
   15602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15604:	429e      	cmp	r6, r3
   15606:	f280 8111 	bge.w	1582c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x370>
        for (int channel = 0; channel < depth; ++channel) {
   1560a:	2200      	movs	r2, #0
   1560c:	e0bc      	b.n	15788 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
  TFLITE_DCHECK(input->type == kTfLiteInt8);
   1560e:	f000 fdc4 	bl	1619a <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   15612:	f000 fdc2 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   15616:	f000 fdc0 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1561a:	f000 fdbe 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   1561e:	f000 fdbc 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15624:	e786      	b.n	15534 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x78>
    TFLITE_DCHECK_LT(i, size_);
   15626:	f000 fdb8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1562a:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1562c:	e789      	b.n	15542 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x86>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1562e:	f000 fdb4 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   15632:	f000 fdb2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15636:	9a21      	ldr	r2, [sp, #132]	; 0x84
   15638:	e78d      	b.n	15556 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x9a>
	return __b;
   1563a:	ab2e      	add	r3, sp, #184	; 0xb8
   1563c:	e78f      	b.n	1555e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xa2>
    TFLITE_DCHECK_LT(i, size_);
   1563e:	f000 fdac 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   15644:	e794      	b.n	15570 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xb4>
    TFLITE_DCHECK_LT(i, size_);
   15646:	f000 fda8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1564a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1564c:	e797      	b.n	1557e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xc2>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   1564e:	f000 fda4 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   15652:	f000 fda2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15656:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15658:	e79b      	b.n	15592 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xd6>
   1565a:	ab2c      	add	r3, sp, #176	; 0xb0
   1565c:	e79d      	b.n	1559a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xde>
    TFLITE_DCHECK_LT(i, size_);
   1565e:	f000 fd9c 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15662:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15664:	930a      	str	r3, [sp, #40]	; 0x28
   15666:	e7a2      	b.n	155ae <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0xf2>
    TFLITE_DCHECK_LT(i, size_);
   15668:	f000 fd97 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1566c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1566e:	9309      	str	r3, [sp, #36]	; 0x24
   15670:	e7a5      	b.n	155be <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x102>
    TFLITE_DCHECK_LT(i, size_);
   15672:	f000 fd92 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15676:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15678:	9308      	str	r3, [sp, #32]
   1567a:	e7a8      	b.n	155ce <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x112>
    TFLITE_DCHECK_LT(i, size_);
   1567c:	f000 fd8d 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   15682:	930d      	str	r3, [sp, #52]	; 0x34
   15684:	e7ab      	b.n	155de <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x122>
	return __b;
   15686:	a82a      	add	r0, sp, #168	; 0xa8
   15688:	e097      	b.n	157ba <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2fe>
	return __b;
   1568a:	a929      	add	r1, sp, #164	; 0xa4
   1568c:	e09f      	b.n	157ce <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x312>
	return __b;
   1568e:	a927      	add	r1, sp, #156	; 0x9c
   15690:	e0a7      	b.n	157e2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x326>
	return __b;
   15692:	ab26      	add	r3, sp, #152	; 0x98
   15694:	e0ae      	b.n	157f4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x338>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15696:	f000 fd80 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1569a:	f000 fd7e 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1569e:	f000 fd7c 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   156a2:	f000 fd7a 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   156a6:	f000 fd78 	bl	1619a <abort>
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32_t acc = 0;
          int filter_count = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   156aa:	3101      	adds	r1, #1
   156ac:	9803      	ldr	r0, [sp, #12]
   156ae:	4288      	cmp	r0, r1
   156b0:	dd2f      	ble.n	15712 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x256>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   156b2:	9801      	ldr	r0, [sp, #4]
   156b4:	9c02      	ldr	r4, [sp, #8]
   156b6:	4284      	cmp	r4, r0
   156b8:	ddf7      	ble.n	156aa <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ee>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
   156ba:	eb0c 0700 	add.w	r7, ip, r0
              const int in_y = in_y_origin + filter_y;
   156be:	eb09 0a01 	add.w	sl, r9, r1
  inline int32_t DimensionsCount() const { return size_; }
   156c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   156c4:	2d04      	cmp	r5, #4
   156c6:	d1e6      	bne.n	15696 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1da>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   156c8:	f1be 0f00 	cmp.w	lr, #0
   156cc:	dbe5      	blt.n	1569a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
   156ce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   156d0:	45ae      	cmp	lr, r5
   156d2:	dae2      	bge.n	1569a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1de>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   156d4:	f1ba 0f00 	cmp.w	sl, #0
   156d8:	dbe1      	blt.n	1569e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
   156da:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
   156de:	45da      	cmp	sl, fp
   156e0:	dadd      	bge.n	1569e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e2>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   156e2:	2f00      	cmp	r7, #0
   156e4:	dbdd      	blt.n	156a2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
   156e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   156e8:	42af      	cmp	r7, r5
   156ea:	dada      	bge.n	156a2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e6>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   156ec:	2a00      	cmp	r2, #0
   156ee:	dbda      	blt.n	156a6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
   156f0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   156f2:	42a2      	cmp	r2, r4
   156f4:	dad7      	bge.n	156a6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ea>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   156f6:	fb0b aa0e 	mla	sl, fp, lr, sl
   156fa:	fb0a 7705 	mla	r7, sl, r5, r7
   156fe:	fb07 2404 	mla	r4, r7, r4, r2
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   15702:	9d04      	ldr	r5, [sp, #16]
   15704:	572d      	ldrsb	r5, [r5, r4]
              acc +=
   15706:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   15708:	442c      	add	r4, r5
   1570a:	940e      	str	r4, [sp, #56]	; 0x38
              filter_count++;
   1570c:	3301      	adds	r3, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1570e:	3001      	adds	r0, #1
   15710:	e7d0      	b.n	156b4 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f8>
            }
          }
          if (filter_count == 0) return false;
   15712:	2b00      	cmp	r3, #0
   15714:	f000 8090 	beq.w	15838 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37c>
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   15718:	990e      	ldr	r1, [sp, #56]	; 0x38
   1571a:	2900      	cmp	r1, #0
   1571c:	dd6f      	ble.n	157fe <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x342>
   1571e:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   15722:	eb01 0160 	add.w	r1, r1, r0, asr #1
   15726:	fb91 f3f3 	sdiv	r3, r1, r3
   1572a:	930e      	str	r3, [sp, #56]	; 0x38
      if (__a < __b)
   1572c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1572e:	428b      	cmp	r3, r1
   15730:	db6c      	blt.n	1580c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x350>
      return __a;
   15732:	ab0e      	add	r3, sp, #56	; 0x38
                        : (acc - filter_count / 2) / filter_count;
          acc = std::max(acc, params.quantized_activation_min);
   15734:	681b      	ldr	r3, [r3, #0]
   15736:	930e      	str	r3, [sp, #56]	; 0x38
      if (__b < __a)
   15738:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1573a:	428b      	cmp	r3, r1
   1573c:	dc68      	bgt.n	15810 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x354>
      return __a;
   1573e:	ab0e      	add	r3, sp, #56	; 0x38
          acc = std::min(acc, params.quantized_activation_max);
   15740:	681c      	ldr	r4, [r3, #0]
   15742:	940e      	str	r4, [sp, #56]	; 0x38
  inline int32_t DimensionsCount() const { return size_; }
   15744:	9b20      	ldr	r3, [sp, #128]	; 0x80
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15746:	2b04      	cmp	r3, #4
   15748:	d164      	bne.n	15814 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x358>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   1574a:	f1be 0f00 	cmp.w	lr, #0
   1574e:	db63      	blt.n	15818 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
   15750:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15752:	459e      	cmp	lr, r3
   15754:	da60      	bge.n	15818 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x35c>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15756:	f1b8 0f00 	cmp.w	r8, #0
   1575a:	db5f      	blt.n	1581c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
   1575c:	9822      	ldr	r0, [sp, #136]	; 0x88
   1575e:	4580      	cmp	r8, r0
   15760:	da5c      	bge.n	1581c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x360>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15762:	2e00      	cmp	r6, #0
   15764:	db5c      	blt.n	15820 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
   15766:	9923      	ldr	r1, [sp, #140]	; 0x8c
   15768:	428e      	cmp	r6, r1
   1576a:	da59      	bge.n	15820 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x364>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   1576c:	2a00      	cmp	r2, #0
   1576e:	db59      	blt.n	15824 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
   15770:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15772:	429a      	cmp	r2, r3
   15774:	da56      	bge.n	15824 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x368>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15776:	fb00 800e 	mla	r0, r0, lr, r8
   1577a:	fb00 6101 	mla	r1, r0, r1, r6
   1577e:	fb01 2303 	mla	r3, r1, r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   15782:	9905      	ldr	r1, [sp, #20]
   15784:	54cc      	strb	r4, [r1, r3]
        for (int channel = 0; channel < depth; ++channel) {
   15786:	3201      	adds	r2, #1
   15788:	9b07      	ldr	r3, [sp, #28]
   1578a:	429a      	cmp	r2, r3
   1578c:	da4c      	bge.n	15828 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x36c>
              (out_x * stride_width) - params.padding_values.width;
   1578e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15790:	fb06 f103 	mul.w	r1, r6, r3
   15794:	f9bd 003e 	ldrsh.w	r0, [sp, #62]	; 0x3e
          const int in_x_origin =
   15798:	eba1 0c00 	sub.w	ip, r1, r0
              (out_y * stride_height) - params.padding_values.height;
   1579c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1579e:	fb08 f403 	mul.w	r4, r8, r3
   157a2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
          const int in_y_origin =
   157a6:	eba4 0903 	sub.w	r9, r4, r3
          const int filter_x_start = std::max(0, -in_x_origin);
   157aa:	2500      	movs	r5, #0
   157ac:	952b      	str	r5, [sp, #172]	; 0xac
   157ae:	1a41      	subs	r1, r0, r1
   157b0:	912a      	str	r1, [sp, #168]	; 0xa8
      if (__a < __b)
   157b2:	42a9      	cmp	r1, r5
   157b4:	f73f af67 	bgt.w	15686 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ca>
      return __a;
   157b8:	a82b      	add	r0, sp, #172	; 0xac
   157ba:	6800      	ldr	r0, [r0, #0]
   157bc:	9001      	str	r0, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   157be:	9809      	ldr	r0, [sp, #36]	; 0x24
   157c0:	4401      	add	r1, r0
   157c2:	9129      	str	r1, [sp, #164]	; 0xa4
      if (__b < __a)
   157c4:	9815      	ldr	r0, [sp, #84]	; 0x54
   157c6:	4281      	cmp	r1, r0
   157c8:	f6ff af5f 	blt.w	1568a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1ce>
      return __a;
   157cc:	a915      	add	r1, sp, #84	; 0x54
   157ce:	6809      	ldr	r1, [r1, #0]
   157d0:	9102      	str	r1, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   157d2:	2100      	movs	r1, #0
   157d4:	9128      	str	r1, [sp, #160]	; 0xa0
   157d6:	1b1b      	subs	r3, r3, r4
   157d8:	9327      	str	r3, [sp, #156]	; 0x9c
      if (__a < __b)
   157da:	428b      	cmp	r3, r1
   157dc:	f73f af57 	bgt.w	1568e <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d2>
      return __a;
   157e0:	a928      	add	r1, sp, #160	; 0xa0
   157e2:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   157e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   157e6:	4403      	add	r3, r0
   157e8:	9326      	str	r3, [sp, #152]	; 0x98
      if (__b < __a)
   157ea:	9814      	ldr	r0, [sp, #80]	; 0x50
   157ec:	4283      	cmp	r3, r0
   157ee:	f6ff af50 	blt.w	15692 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1d6>
      return __a;
   157f2:	ab14      	add	r3, sp, #80	; 0x50
   157f4:	681b      	ldr	r3, [r3, #0]
   157f6:	9303      	str	r3, [sp, #12]
          int32_t acc = 0;
   157f8:	2300      	movs	r3, #0
   157fa:	930e      	str	r3, [sp, #56]	; 0x38
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   157fc:	e756      	b.n	156ac <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1f0>
                        : (acc - filter_count / 2) / filter_count;
   157fe:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
   15802:	eba1 0160 	sub.w	r1, r1, r0, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   15806:	fb91 f3f3 	sdiv	r3, r1, r3
   1580a:	e78e      	b.n	1572a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x26e>
	return __b;
   1580c:	ab16      	add	r3, sp, #88	; 0x58
   1580e:	e791      	b.n	15734 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x278>
	return __b;
   15810:	ab17      	add	r3, sp, #92	; 0x5c
   15812:	e795      	b.n	15740 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x284>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15814:	f000 fcc1 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15818:	f000 fcbf 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   1581c:	f000 fcbd 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15820:	f000 fcbb 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15824:	f000 fcb9 	bl	1619a <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15828:	3601      	adds	r6, #1
   1582a:	e6ea      	b.n	15602 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x146>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1582c:	f108 0801 	add.w	r8, r8, #1
   15830:	e6e2      	b.n	155f8 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x13c>
  for (int batch = 0; batch < batches; ++batch) {
   15832:	f10e 0801 	add.w	r8, lr, #1
   15836:	e6d8      	b.n	155ea <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x12e>
    if (size_ > kMaxSmallSize) {
   15838:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1583a:	2b05      	cmp	r3, #5
   1583c:	dd03      	ble.n	15846 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
      delete[] dims_pointer_;
   1583e:	9821      	ldr	r0, [sp, #132]	; 0x84
   15840:	b108      	cbz	r0, 15846 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x38a>
   15842:	f000 fc95 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15846:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15848:	2b05      	cmp	r3, #5
   1584a:	dd03      	ble.n	15854 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
      delete[] dims_pointer_;
   1584c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1584e:	b108      	cbz	r0, 15854 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x398>
   15850:	f000 fc8e 	bl	16170 <_ZdaPv>
}
   15854:	b031      	add	sp, #196	; 0xc4
   15856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001585a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
   1585a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1585e:	b0b1      	sub	sp, #196	; 0xc4
   15860:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   15862:	9c3b      	ldr	r4, [sp, #236]	; 0xec
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
   15864:	6891      	ldr	r1, [r2, #8]
   15866:	9111      	str	r1, [sp, #68]	; 0x44
  op_params.stride_width = params->stride_width;
   15868:	6851      	ldr	r1, [r2, #4]
   1586a:	9112      	str	r1, [sp, #72]	; 0x48
  op_params.filter_height = params->filter_height;
   1586c:	6911      	ldr	r1, [r2, #16]
   1586e:	9113      	str	r1, [sp, #76]	; 0x4c
  op_params.filter_width = params->filter_width;
   15870:	68d2      	ldr	r2, [r2, #12]
   15872:	9214      	str	r2, [sp, #80]	; 0x50
  op_params.padding_values.height = data->padding.height;
   15874:	685a      	ldr	r2, [r3, #4]
   15876:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
  op_params.padding_values.width = data->padding.width;
   1587a:	681a      	ldr	r2, [r3, #0]
   1587c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  op_params.quantized_activation_min = data->activation_min;
   15880:	691a      	ldr	r2, [r3, #16]
   15882:	9215      	str	r2, [sp, #84]	; 0x54
  op_params.quantized_activation_max = data->activation_max;
   15884:	695b      	ldr	r3, [r3, #20]
   15886:	9316      	str	r3, [sp, #88]	; 0x58

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
   15888:	4629      	mov	r1, r5
   1588a:	a819      	add	r0, sp, #100	; 0x64
   1588c:	f7ff f8b0 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   15890:	4628      	mov	r0, r5
   15892:	f7fe face 	bl	13e32 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
   15896:	4681      	mov	r9, r0
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
   15898:	4621      	mov	r1, r4
   1589a:	a81f      	add	r0, sp, #124	; 0x7c
   1589c:	f7ff f8a8 	bl	149f0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
   158a0:	4620      	mov	r0, r4
   158a2:	f7fe facc 	bl	13e3e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
   158a6:	9000      	str	r0, [sp, #0]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   158a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   158aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   158ac:	429a      	cmp	r2, r3
   158ae:	f300 8081 	bgt.w	159b4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15a>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   158b2:	f112 0f80 	cmn.w	r2, #128	; 0x80
   158b6:	db7f      	blt.n	159b8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x15e>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   158b8:	2b7f      	cmp	r3, #127	; 0x7f
   158ba:	dc7f      	bgt.n	159bc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x162>
  inline int32_t DimensionsCount() const { return size_; }
   158bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   158be:	2b04      	cmp	r3, #4
   158c0:	d17e      	bne.n	159c0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x166>
   158c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   158c4:	2b04      	cmp	r3, #4
   158c6:	d17d      	bne.n	159c4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16a>
    TFLITE_DCHECK_LT(i, size_);
   158c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   158ca:	2b00      	cmp	r3, #0
   158cc:	dd7c      	ble.n	159c8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x16e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158ce:	2b05      	cmp	r3, #5
   158d0:	dd7c      	ble.n	159cc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x172>
   158d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   158d4:	681b      	ldr	r3, [r3, #0]
    TFLITE_DCHECK_LT(i, size_);
   158d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   158d8:	2a00      	cmp	r2, #0
   158da:	dd79      	ble.n	159d0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x176>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158dc:	2a05      	cmp	r2, #5
   158de:	dd79      	ble.n	159d4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17a>
   158e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   158e2:	6812      	ldr	r2, [r2, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   158e4:	429a      	cmp	r2, r3
   158e6:	d177      	bne.n	159d8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x17e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   158e8:	932f      	str	r3, [sp, #188]	; 0xbc
    TFLITE_DCHECK_LT(i, size_);
   158ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   158ec:	2a00      	cmp	r2, #0
   158ee:	dd75      	ble.n	159dc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x182>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   158f0:	2a05      	cmp	r2, #5
   158f2:	dd75      	ble.n	159e0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x186>
   158f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   158f6:	6812      	ldr	r2, [r2, #0]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   158f8:	922e      	str	r2, [sp, #184]	; 0xb8
      if (__b < __a)
   158fa:	4293      	cmp	r3, r2
   158fc:	dc72      	bgt.n	159e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18a>
      return __a;
   158fe:	ab2f      	add	r3, sp, #188	; 0xbc
   15900:	681b      	ldr	r3, [r3, #0]
   15902:	9304      	str	r3, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
   15904:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15906:	2b03      	cmp	r3, #3
   15908:	dd6e      	ble.n	159e8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x18e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1590a:	2b05      	cmp	r3, #5
   1590c:	dd6e      	ble.n	159ec <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x192>
   1590e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15910:	68db      	ldr	r3, [r3, #12]
    TFLITE_DCHECK_LT(i, size_);
   15912:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15914:	2a03      	cmp	r2, #3
   15916:	dd6b      	ble.n	159f0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x196>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15918:	2a05      	cmp	r2, #5
   1591a:	dd6b      	ble.n	159f4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19a>
   1591c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1591e:	68d2      	ldr	r2, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   15920:	429a      	cmp	r2, r3
   15922:	d169      	bne.n	159f8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x19e>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15924:	932d      	str	r3, [sp, #180]	; 0xb4
    TFLITE_DCHECK_LT(i, size_);
   15926:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15928:	2a03      	cmp	r2, #3
   1592a:	dd67      	ble.n	159fc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   1592c:	2a05      	cmp	r2, #5
   1592e:	dd67      	ble.n	15a00 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1a6>
   15930:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15932:	68d2      	ldr	r2, [r2, #12]
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
   15934:	922c      	str	r2, [sp, #176]	; 0xb0
      if (__b < __a)
   15936:	4293      	cmp	r3, r2
   15938:	dc64      	bgt.n	15a04 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1aa>
      return __a;
   1593a:	ab2d      	add	r3, sp, #180	; 0xb4
   1593c:	681b      	ldr	r3, [r3, #0]
   1593e:	9307      	str	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
   15940:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15942:	2b01      	cmp	r3, #1
   15944:	dd60      	ble.n	15a08 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ae>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15946:	2b05      	cmp	r3, #5
   15948:	dd60      	ble.n	15a0c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b2>
   1594a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1594c:	685b      	ldr	r3, [r3, #4]
   1594e:	9306      	str	r3, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
   15950:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15952:	2b02      	cmp	r3, #2
   15954:	dd5d      	ble.n	15a12 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1b8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15956:	2b05      	cmp	r3, #5
   15958:	dd5d      	ble.n	15a16 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1bc>
   1595a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1595c:	689b      	ldr	r3, [r3, #8]
   1595e:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
   15960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15962:	2b01      	cmp	r3, #1
   15964:	dd5a      	ble.n	15a1c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15966:	2b05      	cmp	r3, #5
   15968:	dd5a      	ble.n	15a20 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1c6>
   1596a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1596c:	685b      	ldr	r3, [r3, #4]
   1596e:	930b      	str	r3, [sp, #44]	; 0x2c
    TFLITE_DCHECK_LT(i, size_);
   15970:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15972:	2b02      	cmp	r3, #2
   15974:	dd57      	ble.n	15a26 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15976:	2b05      	cmp	r3, #5
   15978:	dd57      	ble.n	15a2a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d0>
   1597a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1597c:	689b      	ldr	r3, [r3, #8]
   1597e:	930a      	str	r3, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
   15980:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15982:	9308      	str	r3, [sp, #32]
  const int stride_width = params.stride_width;
   15984:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15986:	9309      	str	r3, [sp, #36]	; 0x24
  for (int batch = 0; batch < batches; ++batch) {
   15988:	f04f 0c00 	mov.w	ip, #0
   1598c:	46c8      	mov	r8, r9
   1598e:	46e1      	mov	r9, ip
   15990:	9b04      	ldr	r3, [sp, #16]
   15992:	4599      	cmp	r9, r3
   15994:	f280 812b 	bge.w	15bee <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x394>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15998:	2700      	movs	r7, #0
   1599a:	46c6      	mov	lr, r8
   1599c:	46b8      	mov	r8, r7
   1599e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   159a0:	4598      	cmp	r8, r3
   159a2:	f280 8120 	bge.w	15be6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x38c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   159a6:	2600      	movs	r6, #0
   159a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   159aa:	429e      	cmp	r6, r3
   159ac:	f280 8118 	bge.w	15be0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x386>
        for (int channel = 0; channel < depth; ++channel) {
   159b0:	2300      	movs	r3, #0
   159b2:	e0c7      	b.n	15b44 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x2ea>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   159b4:	f000 fbf1 	bl	1619a <abort>
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   159b8:	f000 fbef 	bl	1619a <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   159bc:	f000 fbed 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   159c0:	f000 fbeb 	bl	1619a <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   159c4:	f000 fbe9 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   159c8:	f000 fbe7 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   159cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   159ce:	e782      	b.n	158d6 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x7c>
    TFLITE_DCHECK_LT(i, size_);
   159d0:	f000 fbe3 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   159d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   159d6:	e785      	b.n	158e4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x8a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   159d8:	f000 fbdf 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   159dc:	f000 fbdd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   159e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
   159e2:	e789      	b.n	158f8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x9e>
	return __b;
   159e4:	ab2e      	add	r3, sp, #184	; 0xb8
   159e6:	e78b      	b.n	15900 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xa6>
    TFLITE_DCHECK_LT(i, size_);
   159e8:	f000 fbd7 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   159ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   159ee:	e790      	b.n	15912 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xb8>
    TFLITE_DCHECK_LT(i, size_);
   159f0:	f000 fbd3 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   159f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   159f6:	e793      	b.n	15920 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xc6>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   159f8:	f000 fbcf 	bl	1619a <abort>
    TFLITE_DCHECK_LT(i, size_);
   159fc:	f000 fbcd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15a00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   15a02:	e797      	b.n	15934 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xda>
   15a04:	ab2c      	add	r3, sp, #176	; 0xb0
   15a06:	e799      	b.n	1593c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xe2>
    TFLITE_DCHECK_LT(i, size_);
   15a08:	f000 fbc7 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15a0e:	9306      	str	r3, [sp, #24]
   15a10:	e79e      	b.n	15950 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0xf6>
    TFLITE_DCHECK_LT(i, size_);
   15a12:	f000 fbc2 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15a16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   15a18:	9305      	str	r3, [sp, #20]
   15a1a:	e7a1      	b.n	15960 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x106>
    TFLITE_DCHECK_LT(i, size_);
   15a1c:	f000 fbbd 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
   15a22:	930b      	str	r3, [sp, #44]	; 0x2c
   15a24:	e7a4      	b.n	15970 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x116>
    TFLITE_DCHECK_LT(i, size_);
   15a26:	f000 fbb8 	bl	1619a <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   15a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15a2c:	930a      	str	r3, [sp, #40]	; 0x28
   15a2e:	e7a7      	b.n	15980 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x126>
	return __b;
   15a30:	aa2a      	add	r2, sp, #168	; 0xa8
   15a32:	e0a0      	b.n	15b76 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x31c>
	return __b;
   15a34:	aa29      	add	r2, sp, #164	; 0xa4
   15a36:	e0a8      	b.n	15b8a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x330>
	return __b;
   15a38:	a927      	add	r1, sp, #156	; 0x9c
   15a3a:	e0b0      	b.n	15b9e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x344>
	return __b;
   15a3c:	aa26      	add	r2, sp, #152	; 0x98
   15a3e:	e0b7      	b.n	15bb0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x356>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a40:	f000 fbab 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15a44:	f000 fba9 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15a48:	f000 fba7 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15a4c:	f000 fba5 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15a50:	f000 fba3 	bl	1619a <abort>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
   15a54:	f994 2000 	ldrsb.w	r2, [r4]
   15a58:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15a5c:	3001      	adds	r0, #1
   15a5e:	9a02      	ldr	r2, [sp, #8]
   15a60:	4282      	cmp	r2, r0
   15a62:	dd2d      	ble.n	15ac0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x266>
              const int in_x = in_x_origin + filter_x;
   15a64:	eb0c 0400 	add.w	r4, ip, r0
              const int in_y = in_y_origin + filter_y;
   15a68:	eb0a 0701 	add.w	r7, sl, r1
  inline int32_t DimensionsCount() const { return size_; }
   15a6c:	9d19      	ldr	r5, [sp, #100]	; 0x64
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15a6e:	2d04      	cmp	r5, #4
   15a70:	d1e6      	bne.n	15a40 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e6>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15a72:	f1b9 0f00 	cmp.w	r9, #0
   15a76:	dbe5      	blt.n	15a44 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
   15a78:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   15a7a:	45a9      	cmp	r9, r5
   15a7c:	dae2      	bge.n	15a44 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ea>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15a7e:	2f00      	cmp	r7, #0
   15a80:	dbe2      	blt.n	15a48 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
   15a82:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   15a86:	455f      	cmp	r7, fp
   15a88:	dade      	bge.n	15a48 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15a8a:	2c00      	cmp	r4, #0
   15a8c:	dbde      	blt.n	15a4c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
   15a8e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   15a90:	42ac      	cmp	r4, r5
   15a92:	dadb      	bge.n	15a4c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f2>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15a94:	2b00      	cmp	r3, #0
   15a96:	dbdb      	blt.n	15a50 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
   15a98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15a9a:	4293      	cmp	r3, r2
   15a9c:	dad8      	bge.n	15a50 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1f6>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15a9e:	fb0b 7709 	mla	r7, fp, r9, r7
   15aa2:	fb07 4405 	mla	r4, r7, r5, r4
   15aa6:	fb04 3202 	mla	r2, r4, r2, r3
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   15aaa:	eb0e 0402 	add.w	r4, lr, r2
      if (__a < __b)
   15aae:	f99d 5037 	ldrsb.w	r5, [sp, #55]	; 0x37
   15ab2:	f91e 2002 	ldrsb.w	r2, [lr, r2]
   15ab6:	4295      	cmp	r5, r2
   15ab8:	dbcc      	blt.n	15a54 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
      return __a;
   15aba:	f10d 0437 	add.w	r4, sp, #55	; 0x37
   15abe:	e7c9      	b.n	15a54 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1fa>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15ac0:	3101      	adds	r1, #1
   15ac2:	9a03      	ldr	r2, [sp, #12]
   15ac4:	428a      	cmp	r2, r1
   15ac6:	dd01      	ble.n	15acc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x272>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   15ac8:	9801      	ldr	r0, [sp, #4]
   15aca:	e7c8      	b.n	15a5e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x204>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
   15acc:	f99d 2054 	ldrsb.w	r2, [sp, #84]	; 0x54
   15ad0:	f88d 2097 	strb.w	r2, [sp, #151]	; 0x97
      if (__a < __b)
   15ad4:	f99d 1037 	ldrsb.w	r1, [sp, #55]	; 0x37
   15ad8:	428a      	cmp	r2, r1
   15ada:	dc6f      	bgt.n	15bbc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x362>
      return __a;
   15adc:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   15ae0:	f992 1000 	ldrsb.w	r1, [r2]
   15ae4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
          max = std::min<int8_t>(max, params.quantized_activation_max);
   15ae8:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   15aec:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
      if (__b < __a)
   15af0:	4291      	cmp	r1, r2
   15af2:	dc66      	bgt.n	15bc2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x368>
      return __a;
   15af4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   15af8:	f992 4000 	ldrsb.w	r4, [r2]
   15afc:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  inline int32_t DimensionsCount() const { return size_; }
   15b00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15b02:	2a04      	cmp	r2, #4
   15b04:	d160      	bne.n	15bc8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x36e>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15b06:	f1b9 0f00 	cmp.w	r9, #0
   15b0a:	db5f      	blt.n	15bcc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
   15b0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15b0e:	4591      	cmp	r9, r2
   15b10:	da5c      	bge.n	15bcc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x372>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15b12:	f1b8 0f00 	cmp.w	r8, #0
   15b16:	db5b      	blt.n	15bd0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
   15b18:	9821      	ldr	r0, [sp, #132]	; 0x84
   15b1a:	4580      	cmp	r8, r0
   15b1c:	da58      	bge.n	15bd0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x376>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15b1e:	2e00      	cmp	r6, #0
   15b20:	db58      	blt.n	15bd4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
   15b22:	9922      	ldr	r1, [sp, #136]	; 0x88
   15b24:	428e      	cmp	r6, r1
   15b26:	da55      	bge.n	15bd4 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15b28:	2b00      	cmp	r3, #0
   15b2a:	db55      	blt.n	15bd8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
   15b2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   15b2e:	4293      	cmp	r3, r2
   15b30:	da52      	bge.n	15bd8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x37e>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   15b32:	fb00 8009 	mla	r0, r0, r9, r8
   15b36:	fb00 6101 	mla	r1, r0, r1, r6
   15b3a:	fb01 3202 	mla	r2, r1, r2, r3
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   15b3e:	9900      	ldr	r1, [sp, #0]
   15b40:	548c      	strb	r4, [r1, r2]
        for (int channel = 0; channel < depth; ++channel) {
   15b42:	3301      	adds	r3, #1
   15b44:	9a07      	ldr	r2, [sp, #28]
   15b46:	4293      	cmp	r3, r2
   15b48:	da48      	bge.n	15bdc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x382>
              (out_x * stride_width) - params.padding_values.width;
   15b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b4c:	fb06 f002 	mul.w	r0, r6, r2
   15b50:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
          const int in_x_origin =
   15b54:	eba0 0c02 	sub.w	ip, r0, r2
              (out_y * stride_height) - params.padding_values.height;
   15b58:	9908      	ldr	r1, [sp, #32]
   15b5a:	fb08 f401 	mul.w	r4, r8, r1
   15b5e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
          const int in_y_origin =
   15b62:	eba4 0a01 	sub.w	sl, r4, r1
          const int filter_x_start = std::max(0, -in_x_origin);
   15b66:	2500      	movs	r5, #0
   15b68:	952b      	str	r5, [sp, #172]	; 0xac
   15b6a:	1a10      	subs	r0, r2, r0
   15b6c:	902a      	str	r0, [sp, #168]	; 0xa8
      if (__a < __b)
   15b6e:	42a8      	cmp	r0, r5
   15b70:	f73f af5e 	bgt.w	15a30 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1d6>
      return __a;
   15b74:	aa2b      	add	r2, sp, #172	; 0xac
   15b76:	6812      	ldr	r2, [r2, #0]
   15b78:	9201      	str	r2, [sp, #4]
              std::min(params.filter_width, input_width - in_x_origin);
   15b7a:	9a05      	ldr	r2, [sp, #20]
   15b7c:	4410      	add	r0, r2
   15b7e:	9029      	str	r0, [sp, #164]	; 0xa4
      if (__b < __a)
   15b80:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15b82:	4290      	cmp	r0, r2
   15b84:	f6ff af56 	blt.w	15a34 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1da>
      return __a;
   15b88:	aa14      	add	r2, sp, #80	; 0x50
   15b8a:	6812      	ldr	r2, [r2, #0]
   15b8c:	9202      	str	r2, [sp, #8]
          const int filter_y_start = std::max(0, -in_y_origin);
   15b8e:	2200      	movs	r2, #0
   15b90:	9228      	str	r2, [sp, #160]	; 0xa0
   15b92:	1b0a      	subs	r2, r1, r4
   15b94:	9227      	str	r2, [sp, #156]	; 0x9c
      if (__a < __b)
   15b96:	2a00      	cmp	r2, #0
   15b98:	f73f af4e 	bgt.w	15a38 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1de>
      return __a;
   15b9c:	a928      	add	r1, sp, #160	; 0xa0
   15b9e:	6809      	ldr	r1, [r1, #0]
              std::min(params.filter_height, input_height - in_y_origin);
   15ba0:	9806      	ldr	r0, [sp, #24]
   15ba2:	4402      	add	r2, r0
   15ba4:	9226      	str	r2, [sp, #152]	; 0x98
      if (__b < __a)
   15ba6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15ba8:	4282      	cmp	r2, r0
   15baa:	f6ff af47 	blt.w	15a3c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x1e2>
      return __a;
   15bae:	aa13      	add	r2, sp, #76	; 0x4c
   15bb0:	6812      	ldr	r2, [r2, #0]
   15bb2:	9203      	str	r2, [sp, #12]
          int8_t max = std::numeric_limits<int8_t>::lowest();
   15bb4:	2280      	movs	r2, #128	; 0x80
   15bb6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   15bba:	e782      	b.n	15ac2 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x268>
	return __b;
   15bbc:	f10d 0297 	add.w	r2, sp, #151	; 0x97
   15bc0:	e78e      	b.n	15ae0 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x286>
	return __b;
   15bc2:	f10d 0296 	add.w	r2, sp, #150	; 0x96
   15bc6:	e797      	b.n	15af8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x29e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   15bc8:	f000 fae7 	bl	1619a <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   15bcc:	f000 fae5 	bl	1619a <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   15bd0:	f000 fae3 	bl	1619a <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   15bd4:	f000 fae1 	bl	1619a <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   15bd8:	f000 fadf 	bl	1619a <abort>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   15bdc:	3601      	adds	r6, #1
   15bde:	e6e3      	b.n	159a8 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x14e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   15be0:	f108 0801 	add.w	r8, r8, #1
   15be4:	e6db      	b.n	1599e <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x144>
   15be6:	46f0      	mov	r8, lr
  for (int batch = 0; batch < batches; ++batch) {
   15be8:	f109 0901 	add.w	r9, r9, #1
   15bec:	e6d0      	b.n	15990 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x136>
    if (size_ > kMaxSmallSize) {
   15bee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15bf0:	2b05      	cmp	r3, #5
   15bf2:	dd03      	ble.n	15bfc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
      delete[] dims_pointer_;
   15bf4:	9820      	ldr	r0, [sp, #128]	; 0x80
   15bf6:	b108      	cbz	r0, 15bfc <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3a2>
   15bf8:	f000 faba 	bl	16170 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
   15bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15bfe:	2b05      	cmp	r3, #5
   15c00:	dd03      	ble.n	15c0a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
      delete[] dims_pointer_;
   15c02:	981a      	ldr	r0, [sp, #104]	; 0x68
   15c04:	b108      	cbz	r0, 15c0a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x3b0>
   15c06:	f000 fab3 	bl	16170 <_ZdaPv>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
   15c0a:	b031      	add	sp, #196	; 0xc4
   15c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015c10 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   15c10:	b570      	push	{r4, r5, r6, lr}
   15c12:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
   15c14:	b1c0      	cbz	r0, 15c48 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   15c16:	460d      	mov	r5, r1
   15c18:	4606      	mov	r6, r0
  TFLITE_DCHECK(node != nullptr);
   15c1a:	b1b9      	cbz	r1, 15c4c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   15c1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   15c1e:	680a      	ldr	r2, [r1, #0]
   15c20:	6851      	ldr	r1, [r2, #4]
   15c22:	4798      	blx	r3
   15c24:	4604      	mov	r4, r0
  TFLITE_DCHECK(context != nullptr);
   15c26:	b19e      	cbz	r6, 15c50 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  TFLITE_DCHECK(node != nullptr);
   15c28:	b1a5      	cbz	r5, 15c54 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x44>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   15c2a:	6d73      	ldr	r3, [r6, #84]	; 0x54
   15c2c:	686a      	ldr	r2, [r5, #4]
   15c2e:	6851      	ldr	r1, [r2, #4]
   15c30:	4630      	mov	r0, r6
   15c32:	4798      	blx	r3
   15c34:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
   15c36:	a901      	add	r1, sp, #4
   15c38:	7a20      	ldrb	r0, [r4, #8]
   15c3a:	f7fd fae7 	bl	1320c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   15c3e:	4606      	mov	r6, r0
   15c40:	b150      	cbz	r0, 15c58 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x48>
}
   15c42:	4630      	mov	r0, r6
   15c44:	b002      	add	sp, #8
   15c46:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
   15c48:	f000 faa7 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
   15c4c:	f000 faa5 	bl	1619a <abort>
  TFLITE_DCHECK(context != nullptr);
   15c50:	f000 faa3 	bl	1619a <abort>
  TFLITE_DCHECK(node != nullptr);
   15c54:	f000 faa1 	bl	1619a <abort>
  input_bytes *= ElementCount(*input->dims);
   15c58:	6860      	ldr	r0, [r4, #4]
   15c5a:	f7fd fbe3 	bl	13424 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
   15c5e:	9b01      	ldr	r3, [sp, #4]
   15c60:	fb00 f003 	mul.w	r0, r0, r3
   15c64:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
   15c66:	6822      	ldr	r2, [r4, #0]
   15c68:	682b      	ldr	r3, [r5, #0]
   15c6a:	429a      	cmp	r2, r3
   15c6c:	d0e9      	beq.n	15c42 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
   15c6e:	2300      	movs	r3, #0
   15c70:	e004      	b.n	15c7c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
      output->data.raw[i] = input->data.raw[i];
   15c72:	6821      	ldr	r1, [r4, #0]
   15c74:	682a      	ldr	r2, [r5, #0]
   15c76:	5cc9      	ldrb	r1, [r1, r3]
   15c78:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
   15c7a:	3301      	adds	r3, #1
   15c7c:	9a01      	ldr	r2, [sp, #4]
   15c7e:	429a      	cmp	r2, r3
   15c80:	d8f7      	bhi.n	15c72 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   15c82:	e7de      	b.n	15c42 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>

00015c84 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
   15c84:	b508      	push	{r3, lr}
   15c86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15c8a:	f7ea ff39 	bl	b00 <__addsf3>
   15c8e:	4601      	mov	r1, r0
   15c90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   15c94:	f7eb f8f0 	bl	e78 <__aeabi_fdiv>
   15c98:	bd08      	pop	{r3, pc}

00015c9a <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
   15c9a:	b508      	push	{r3, lr}
   15c9c:	f7fa fcf8 	bl	10690 <expf>
   15ca0:	bd08      	pop	{r3, pc}

00015ca2 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
   15ca2:	b508      	push	{r3, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15ca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15ca6:	b113      	cbz	r3, 15cae <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0xc>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
   15ca8:	2138      	movs	r1, #56	; 0x38
   15caa:	4798      	blx	r3
}
   15cac:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   15cae:	f000 fa74 	bl	1619a <abort>

00015cb2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   15cb2:	b148      	cbz	r0, 15cc8 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15cb4:	68c3      	ldr	r3, [r0, #12]
   15cb6:	8818      	ldrh	r0, [r3, #0]
   15cb8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15cbc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   15cc0:	bf14      	ite	ne
   15cc2:	2000      	movne	r0, #0
   15cc4:	2001      	moveq	r0, #1
   15cc6:	4770      	bx	lr
		return false;
   15cc8:	2000      	movs	r0, #0
}
   15cca:	4770      	bx	lr

00015ccc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cce:	4605      	mov	r5, r0
   15cd0:	460e      	mov	r6, r1
	__asm__ volatile(
   15cd2:	f04f 0320 	mov.w	r3, #32
   15cd6:	f3ef 8711 	mrs	r7, BASEPRI
   15cda:	f383 8812 	msr	BASEPRI_MAX, r3
   15cde:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   15ce2:	f7fa f903 	bl	feec <z_impl_z_current_get>
   15ce6:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15ce8:	4631      	mov	r1, r6
   15cea:	4628      	mov	r0, r5
   15cec:	f7fd fa0d 	bl	1310a <k_sys_fatal_error_handler>
	__asm__ volatile(
   15cf0:	f387 8811 	msr	BASEPRI, r7
   15cf4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15cf8:	4620      	mov	r0, r4
   15cfa:	f7ee fcf1 	bl	46e0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   15cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015d00 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15d00:	6902      	ldr	r2, [r0, #16]
   15d02:	6943      	ldr	r3, [r0, #20]
   15d04:	431a      	orrs	r2, r3
   15d06:	f012 0203 	ands.w	r2, r2, #3
   15d0a:	d10d      	bne.n	15d28 <create_free_list+0x28>
	slab->free_list = NULL;
   15d0c:	2100      	movs	r1, #0
   15d0e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15d10:	e005      	b.n	15d1e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   15d12:	6981      	ldr	r1, [r0, #24]
   15d14:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   15d16:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   15d18:	6901      	ldr	r1, [r0, #16]
   15d1a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   15d1c:	3201      	adds	r2, #1
   15d1e:	68c1      	ldr	r1, [r0, #12]
   15d20:	4291      	cmp	r1, r2
   15d22:	d8f6      	bhi.n	15d12 <create_free_list+0x12>
	return 0;
   15d24:	2000      	movs	r0, #0
   15d26:	4770      	bx	lr
		return -EINVAL;
   15d28:	f06f 0015 	mvn.w	r0, #21
}
   15d2c:	4770      	bx	lr

00015d2e <k_mem_slab_init>:
{
   15d2e:	b510      	push	{r4, lr}
   15d30:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   15d32:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   15d34:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   15d36:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   15d38:	2300      	movs	r3, #0
   15d3a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   15d3c:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
   15d3e:	f7ff ffdf 	bl	15d00 <create_free_list>
	if (rc < 0) {
   15d42:	2800      	cmp	r0, #0
   15d44:	db01      	blt.n	15d4a <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   15d46:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   15d48:	6064      	str	r4, [r4, #4]
}
   15d4a:	bd10      	pop	{r4, pc}

00015d4c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d4e:	4604      	mov	r4, r0
   15d50:	460d      	mov	r5, r1
	__asm__ volatile(
   15d52:	f04f 0320 	mov.w	r3, #32
   15d56:	f3ef 8611 	mrs	r6, BASEPRI
   15d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   15d5e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15d62:	6983      	ldr	r3, [r0, #24]
   15d64:	b163      	cbz	r3, 15d80 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   15d66:	682b      	ldr	r3, [r5, #0]
   15d68:	69a2      	ldr	r2, [r4, #24]
   15d6a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15d6c:	682b      	ldr	r3, [r5, #0]
   15d6e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   15d70:	69e3      	ldr	r3, [r4, #28]
   15d72:	3b01      	subs	r3, #1
   15d74:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15d76:	f386 8811 	msr	BASEPRI, r6
   15d7a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d80:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15d84:	f000 f93a 	bl	15ffc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15d88:	2800      	cmp	r0, #0
   15d8a:	d0ec      	beq.n	15d66 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15d8c:	682a      	ldr	r2, [r5, #0]
   15d8e:	2100      	movs	r1, #0
   15d90:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15d94:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   15d96:	f000 f896 	bl	15ec6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15d9a:	4631      	mov	r1, r6
   15d9c:	4638      	mov	r0, r7
   15d9e:	f7f9 fd49 	bl	f834 <z_reschedule>
			return;
   15da2:	e7ec      	b.n	15d7e <k_mem_slab_free+0x32>

00015da4 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15da4:	3207      	adds	r2, #7
   15da6:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   15daa:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   15dae:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   15db2:	2300      	movs	r3, #0
   15db4:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   15db8:	1888      	adds	r0, r1, r2
   15dba:	4770      	bx	lr

00015dbc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15dbc:	f3ef 8005 	mrs	r0, IPSR
}
   15dc0:	3800      	subs	r0, #0
   15dc2:	bf18      	it	ne
   15dc4:	2001      	movne	r0, #1
   15dc6:	4770      	bx	lr

00015dc8 <z_impl_k_thread_start>:
{
   15dc8:	b508      	push	{r3, lr}
	z_sched_start(thread);
   15dca:	f7f9 fe5d 	bl	fa88 <z_sched_start>
}
   15dce:	bd08      	pop	{r3, pc}

00015dd0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   15dd0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   15dd2:	2400      	movs	r4, #0
   15dd4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   15dd6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15dd8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   15dda:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   15ddc:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   15dde:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   15de0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   15de2:	bc10      	pop	{r4}
   15de4:	4770      	bx	lr

00015de6 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   15de6:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   15de8:	f7ee f810 	bl	3e0c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   15dec:	f7fd f916 	bl	1301c <sys_clock_idle_exit>
}
   15df0:	bd08      	pop	{r3, pc}

00015df2 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   15df2:	b508      	push	{r3, lr}
	__asm__ volatile(
   15df4:	f04f 0220 	mov.w	r2, #32
   15df8:	f3ef 8311 	mrs	r3, BASEPRI
   15dfc:	f382 8812 	msr	BASEPRI_MAX, r2
   15e00:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   15e04:	f7f9 fb8a 	bl	f51c <pm_save_idle>
   15e08:	e7f4      	b.n	15df4 <idle+0x2>

00015e0a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   15e0a:	4288      	cmp	r0, r1
   15e0c:	da00      	bge.n	15e10 <new_prio_for_inheritance+0x6>
   15e0e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15e10:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   15e14:	db01      	blt.n	15e1a <new_prio_for_inheritance+0x10>
   15e16:	4608      	mov	r0, r1
   15e18:	4770      	bx	lr
   15e1a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   15e1e:	4770      	bx	lr

00015e20 <adjust_owner_prio>:
{
   15e20:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   15e22:	6880      	ldr	r0, [r0, #8]
   15e24:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15e28:	428b      	cmp	r3, r1
   15e2a:	d101      	bne.n	15e30 <adjust_owner_prio+0x10>
	return false;
   15e2c:	2000      	movs	r0, #0
}
   15e2e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   15e30:	f7f9 fe78 	bl	fb24 <z_set_prio>
   15e34:	e7fb      	b.n	15e2e <adjust_owner_prio+0xe>

00015e36 <z_impl_k_mutex_init>:
{
   15e36:	4603      	mov	r3, r0
	mutex->owner = NULL;
   15e38:	2000      	movs	r0, #0
   15e3a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   15e3c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   15e3e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15e40:	605b      	str	r3, [r3, #4]
}
   15e42:	4770      	bx	lr

00015e44 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   15e44:	b13a      	cbz	r2, 15e56 <z_impl_k_sem_init+0x12>
   15e46:	428a      	cmp	r2, r1
   15e48:	d308      	bcc.n	15e5c <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   15e4a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   15e4c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15e4e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15e50:	6040      	str	r0, [r0, #4]
	return 0;
   15e52:	2000      	movs	r0, #0
   15e54:	4770      	bx	lr
		return -EINVAL;
   15e56:	f06f 0015 	mvn.w	r0, #21
   15e5a:	4770      	bx	lr
   15e5c:	f06f 0015 	mvn.w	r0, #21
}
   15e60:	4770      	bx	lr

00015e62 <thread_active_elsewhere>:
}
   15e62:	2000      	movs	r0, #0
   15e64:	4770      	bx	lr

00015e66 <pended_on_thread>:
}
   15e66:	6880      	ldr	r0, [r0, #8]
   15e68:	4770      	bx	lr

00015e6a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   15e6a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15e6e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15e72:	4283      	cmp	r3, r0
   15e74:	d001      	beq.n	15e7a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15e76:	1ac0      	subs	r0, r0, r3
   15e78:	4770      	bx	lr
	return 0;
   15e7a:	2000      	movs	r0, #0
}
   15e7c:	4770      	bx	lr

00015e7e <z_reschedule_irqlock>:
{
   15e7e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15e80:	4603      	mov	r3, r0
   15e82:	b920      	cbnz	r0, 15e8e <z_reschedule_irqlock+0x10>
   15e84:	f3ef 8205 	mrs	r2, IPSR
   15e88:	b942      	cbnz	r2, 15e9c <z_reschedule_irqlock+0x1e>
   15e8a:	2201      	movs	r2, #1
   15e8c:	e000      	b.n	15e90 <z_reschedule_irqlock+0x12>
   15e8e:	2200      	movs	r2, #0
	if (resched(key)) {
   15e90:	b932      	cbnz	r2, 15ea0 <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   15e92:	f383 8811 	msr	BASEPRI, r3
   15e96:	f3bf 8f6f 	isb	sy
}
   15e9a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15e9c:	2200      	movs	r2, #0
   15e9e:	e7f7      	b.n	15e90 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   15ea0:	4618      	mov	r0, r3
   15ea2:	f7ee f9b3 	bl	420c <arch_swap>
	return ret;
   15ea6:	e7f8      	b.n	15e9a <z_reschedule_irqlock+0x1c>

00015ea8 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   15ea8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   15eaa:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   15eac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15eae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15eb0:	2300      	movs	r3, #0
   15eb2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   15eb4:	604b      	str	r3, [r1, #4]
}
   15eb6:	4770      	bx	lr

00015eb8 <z_priq_dumb_best>:
{
   15eb8:	4603      	mov	r3, r0
	return list->head == list;
   15eba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15ebc:	4283      	cmp	r3, r0
   15ebe:	d000      	beq.n	15ec2 <z_priq_dumb_best+0xa>
}
   15ec0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15ec2:	2000      	movs	r0, #0
	return thread;
   15ec4:	e7fc      	b.n	15ec0 <z_priq_dumb_best+0x8>

00015ec6 <z_ready_thread>:
{
   15ec6:	b538      	push	{r3, r4, r5, lr}
   15ec8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15eca:	2300      	movs	r3, #0
	__asm__ volatile(
   15ecc:	f04f 0220 	mov.w	r2, #32
   15ed0:	f3ef 8511 	mrs	r5, BASEPRI
   15ed4:	f382 8812 	msr	BASEPRI_MAX, r2
   15ed8:	f3bf 8f6f 	isb	sy
   15edc:	e007      	b.n	15eee <z_ready_thread+0x28>
			ready_thread(thread);
   15ede:	4620      	mov	r0, r4
   15ee0:	f7f9 fd92 	bl	fa08 <ready_thread>
	__asm__ volatile(
   15ee4:	f385 8811 	msr	BASEPRI, r5
   15ee8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15eec:	2301      	movs	r3, #1
   15eee:	b92b      	cbnz	r3, 15efc <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15ef0:	4620      	mov	r0, r4
   15ef2:	f7ff ffb6 	bl	15e62 <thread_active_elsewhere>
   15ef6:	2800      	cmp	r0, #0
   15ef8:	d1f4      	bne.n	15ee4 <z_ready_thread+0x1e>
   15efa:	e7f0      	b.n	15ede <z_ready_thread+0x18>
}
   15efc:	bd38      	pop	{r3, r4, r5, pc}

00015efe <z_thread_timeout>:
{
   15efe:	b570      	push	{r4, r5, r6, lr}
   15f00:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15f02:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   15f06:	2300      	movs	r3, #0
	__asm__ volatile(
   15f08:	f04f 0220 	mov.w	r2, #32
   15f0c:	f3ef 8611 	mrs	r6, BASEPRI
   15f10:	f382 8812 	msr	BASEPRI_MAX, r2
   15f14:	f3bf 8f6f 	isb	sy
   15f18:	e019      	b.n	15f4e <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15f1a:	4628      	mov	r0, r5
   15f1c:	f7ff ffa3 	bl	15e66 <pended_on_thread>
   15f20:	4629      	mov	r1, r5
   15f22:	f7ff ffc1 	bl	15ea8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15f26:	7b6b      	ldrb	r3, [r5, #13]
   15f28:	f023 0302 	bic.w	r3, r3, #2
   15f2c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   15f2e:	2300      	movs	r3, #0
   15f30:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15f32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15f36:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   15f3a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   15f3e:	4628      	mov	r0, r5
   15f40:	f7f9 fd62 	bl	fa08 <ready_thread>
	__asm__ volatile(
   15f44:	f386 8811 	msr	BASEPRI, r6
   15f48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15f4c:	2301      	movs	r3, #1
   15f4e:	b94b      	cbnz	r3, 15f64 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15f50:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   15f54:	f013 0f28 	tst.w	r3, #40	; 0x28
   15f58:	d1f4      	bne.n	15f44 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   15f5a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15f5e:	2b00      	cmp	r3, #0
   15f60:	d1db      	bne.n	15f1a <z_thread_timeout+0x1c>
   15f62:	e7e6      	b.n	15f32 <z_thread_timeout+0x34>
}
   15f64:	bd70      	pop	{r4, r5, r6, pc}

00015f66 <add_to_waitq_locked>:
{
   15f66:	b570      	push	{r4, r5, r6, lr}
   15f68:	4605      	mov	r5, r0
   15f6a:	460e      	mov	r6, r1
	unready_thread(thread);
   15f6c:	f7f9 fdaa 	bl	fac4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15f70:	7b6b      	ldrb	r3, [r5, #13]
   15f72:	f043 0302 	orr.w	r3, r3, #2
   15f76:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15f78:	b1b6      	cbz	r6, 15fa8 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   15f7a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15f7c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f7e:	42a6      	cmp	r6, r4
   15f80:	d019      	beq.n	15fb6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f82:	b164      	cbz	r4, 15f9e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f84:	4621      	mov	r1, r4
   15f86:	4628      	mov	r0, r5
   15f88:	f7ff ff6f 	bl	15e6a <z_sched_prio_cmp>
   15f8c:	2800      	cmp	r0, #0
   15f8e:	dc0c      	bgt.n	15faa <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15f90:	b12c      	cbz	r4, 15f9e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   15f92:	6873      	ldr	r3, [r6, #4]
   15f94:	429c      	cmp	r4, r3
   15f96:	d002      	beq.n	15f9e <add_to_waitq_locked+0x38>
   15f98:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f9a:	2c00      	cmp	r4, #0
   15f9c:	d1f1      	bne.n	15f82 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   15f9e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   15fa0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15fa2:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15fa4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15fa6:	6075      	str	r5, [r6, #4]
}
   15fa8:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   15faa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15fac:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15fae:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15fb0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15fb2:	6065      	str	r5, [r4, #4]
}
   15fb4:	e7f8      	b.n	15fa8 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15fb6:	2400      	movs	r4, #0
   15fb8:	e7e3      	b.n	15f82 <add_to_waitq_locked+0x1c>

00015fba <pend>:
{
   15fba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15fbe:	4605      	mov	r5, r0
   15fc0:	460f      	mov	r7, r1
   15fc2:	4691      	mov	r9, r2
   15fc4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   15fc6:	2400      	movs	r4, #0
	__asm__ volatile(
   15fc8:	f04f 0320 	mov.w	r3, #32
   15fcc:	f3ef 8611 	mrs	r6, BASEPRI
   15fd0:	f383 8812 	msr	BASEPRI_MAX, r3
   15fd4:	f3bf 8f6f 	isb	sy
   15fd8:	b94c      	cbnz	r4, 15fee <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   15fda:	4639      	mov	r1, r7
   15fdc:	4628      	mov	r0, r5
   15fde:	f7ff ffc2 	bl	15f66 <add_to_waitq_locked>
	__asm__ volatile(
   15fe2:	f386 8811 	msr	BASEPRI, r6
   15fe6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15fea:	2401      	movs	r4, #1
   15fec:	e7f4      	b.n	15fd8 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   15fee:	464a      	mov	r2, r9
   15ff0:	4643      	mov	r3, r8
   15ff2:	4628      	mov	r0, r5
   15ff4:	f7f9 fbbc 	bl	f770 <add_thread_timeout>
}
   15ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015ffc <z_unpend_first_thread>:
{
   15ffc:	b570      	push	{r4, r5, r6, lr}
   15ffe:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   16000:	2300      	movs	r3, #0
	__asm__ volatile(
   16002:	f04f 0220 	mov.w	r2, #32
   16006:	f3ef 8511 	mrs	r5, BASEPRI
   1600a:	f382 8812 	msr	BASEPRI_MAX, r2
   1600e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   16012:	461c      	mov	r4, r3
   16014:	e013      	b.n	1603e <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16016:	f7ff ff26 	bl	15e66 <pended_on_thread>
   1601a:	4621      	mov	r1, r4
   1601c:	f7ff ff44 	bl	15ea8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16020:	7b63      	ldrb	r3, [r4, #13]
   16022:	f023 0302 	bic.w	r3, r3, #2
   16026:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   16028:	2300      	movs	r3, #0
   1602a:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   1602c:	f104 0018 	add.w	r0, r4, #24
   16030:	f000 f826 	bl	16080 <z_abort_timeout>
	__asm__ volatile(
   16034:	f385 8811 	msr	BASEPRI, r5
   16038:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1603c:	2301      	movs	r3, #1
   1603e:	b933      	cbnz	r3, 1604e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   16040:	4630      	mov	r0, r6
   16042:	f7ff ff39 	bl	15eb8 <z_priq_dumb_best>
		if (thread != NULL) {
   16046:	4604      	mov	r4, r0
   16048:	2800      	cmp	r0, #0
   1604a:	d1e4      	bne.n	16016 <z_unpend_first_thread+0x1a>
   1604c:	e7f2      	b.n	16034 <z_unpend_first_thread+0x38>
}
   1604e:	4620      	mov	r0, r4
   16050:	bd70      	pop	{r4, r5, r6, pc}

00016052 <remove_timeout>:
{
   16052:	b538      	push	{r3, r4, r5, lr}
   16054:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   16056:	f7f9 ff9b 	bl	ff90 <next>
   1605a:	b148      	cbz	r0, 16070 <remove_timeout+0x1e>
   1605c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1605e:	6920      	ldr	r0, [r4, #16]
   16060:	6965      	ldr	r5, [r4, #20]
   16062:	6913      	ldr	r3, [r2, #16]
   16064:	6951      	ldr	r1, [r2, #20]
   16066:	181b      	adds	r3, r3, r0
   16068:	eb45 0101 	adc.w	r1, r5, r1
   1606c:	6113      	str	r3, [r2, #16]
   1606e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   16070:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   16072:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   16074:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16076:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16078:	2300      	movs	r3, #0
   1607a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1607c:	6063      	str	r3, [r4, #4]
}
   1607e:	bd38      	pop	{r3, r4, r5, pc}

00016080 <z_abort_timeout>:
{
   16080:	b570      	push	{r4, r5, r6, lr}
   16082:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   16084:	2300      	movs	r3, #0
	__asm__ volatile(
   16086:	f04f 0220 	mov.w	r2, #32
   1608a:	f3ef 8611 	mrs	r6, BASEPRI
   1608e:	f382 8812 	msr	BASEPRI_MAX, r2
   16092:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   16096:	f06f 0015 	mvn.w	r0, #21
   1609a:	e008      	b.n	160ae <z_abort_timeout+0x2e>
			remove_timeout(to);
   1609c:	4620      	mov	r0, r4
   1609e:	f7ff ffd8 	bl	16052 <remove_timeout>
			ret = 0;
   160a2:	4628      	mov	r0, r5
	__asm__ volatile(
   160a4:	f386 8811 	msr	BASEPRI, r6
   160a8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   160ac:	2301      	movs	r3, #1
   160ae:	461d      	mov	r5, r3
   160b0:	b91b      	cbnz	r3, 160ba <z_abort_timeout+0x3a>
	return node->next != NULL;
   160b2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   160b4:	2b00      	cmp	r3, #0
   160b6:	d1f1      	bne.n	1609c <z_abort_timeout+0x1c>
   160b8:	e7f4      	b.n	160a4 <z_abort_timeout+0x24>
}
   160ba:	bd70      	pop	{r4, r5, r6, pc}

000160bc <z_get_next_timeout_expiry>:
{
   160bc:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   160be:	2300      	movs	r3, #0
	__asm__ volatile(
   160c0:	f04f 0220 	mov.w	r2, #32
   160c4:	f3ef 8411 	mrs	r4, BASEPRI
   160c8:	f382 8812 	msr	BASEPRI_MAX, r2
   160cc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   160d0:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   160d4:	b93b      	cbnz	r3, 160e6 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   160d6:	f7f9 ff73 	bl	ffc0 <next_timeout>
	__asm__ volatile(
   160da:	f384 8811 	msr	BASEPRI, r4
   160de:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   160e2:	2301      	movs	r3, #1
   160e4:	e7f6      	b.n	160d4 <z_get_next_timeout_expiry+0x18>
}
   160e6:	bd10      	pop	{r4, pc}

000160e8 <z_set_timeout_expiry>:
{
   160e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160ea:	4606      	mov	r6, r0
   160ec:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   160ee:	2300      	movs	r3, #0
	__asm__ volatile(
   160f0:	f04f 0220 	mov.w	r2, #32
   160f4:	f3ef 8511 	mrs	r5, BASEPRI
   160f8:	f382 8812 	msr	BASEPRI_MAX, r2
   160fc:	f3bf 8f6f 	isb	sy
   16100:	e00a      	b.n	16118 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   16102:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   16104:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   16108:	2801      	cmp	r0, #1
   1610a:	dd00      	ble.n	1610e <z_set_timeout_expiry+0x26>
   1610c:	b97c      	cbnz	r4, 1612e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1610e:	f385 8811 	msr	BASEPRI, r5
   16112:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16116:	2301      	movs	r3, #1
   16118:	461c      	mov	r4, r3
   1611a:	b97b      	cbnz	r3, 1613c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1611c:	f7f9 ff50 	bl	ffc0 <next_timeout>
			      || (ticks <= next_to);
   16120:	f1b0 3fff 	cmp.w	r0, #4294967295
   16124:	d0ed      	beq.n	16102 <z_set_timeout_expiry+0x1a>
   16126:	42b0      	cmp	r0, r6
   16128:	dbec      	blt.n	16104 <z_set_timeout_expiry+0x1c>
   1612a:	2401      	movs	r4, #1
   1612c:	e7ea      	b.n	16104 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1612e:	4639      	mov	r1, r7
   16130:	42b0      	cmp	r0, r6
   16132:	bfa8      	it	ge
   16134:	4630      	movge	r0, r6
   16136:	f7ef fd59 	bl	5bec <sys_clock_set_timeout>
   1613a:	e7e8      	b.n	1610e <z_set_timeout_expiry+0x26>
}
   1613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001613e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1613e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   16140:	f7fa f870 	bl	10224 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   16144:	bd08      	pop	{r3, pc}

00016146 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   16146:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   16148:	f7fa f86c 	bl	10224 <sys_clock_tick_get>
}
   1614c:	bd08      	pop	{r3, pc}

0001614e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1614e:	b900      	cbnz	r0, 16152 <z_impl_k_busy_wait+0x4>
   16150:	4770      	bx	lr
{
   16152:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   16154:	f7ed fdb0 	bl	3cb8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   16158:	bd08      	pop	{r3, pc}

0001615a <k_heap_init>:
{
   1615a:	b510      	push	{r4, lr}
   1615c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   16160:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   16162:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   16164:	f7fc f8cc 	bl	12300 <sys_heap_init>
}
   16168:	bd10      	pop	{r4, pc}

0001616a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1616a:	4770      	bx	lr

0001616c <_ZdlPv>:
   1616c:	f7fa bc60 	b.w	10a30 <free>

00016170 <_ZdaPv>:
   16170:	f7ff bffc 	b.w	1616c <_ZdlPv>

00016174 <_Znwj>:
   16174:	2801      	cmp	r0, #1
   16176:	bf38      	it	cc
   16178:	2001      	movcc	r0, #1
   1617a:	b510      	push	{r4, lr}
   1617c:	4604      	mov	r4, r0
   1617e:	4620      	mov	r0, r4
   16180:	f7fa fc4e 	bl	10a20 <malloc>
   16184:	b930      	cbnz	r0, 16194 <_Znwj+0x20>
   16186:	f7fa f9fd 	bl	10584 <_ZSt15get_new_handlerv>
   1618a:	b908      	cbnz	r0, 16190 <_Znwj+0x1c>
   1618c:	f000 f805 	bl	1619a <abort>
   16190:	4780      	blx	r0
   16192:	e7f4      	b.n	1617e <_Znwj+0xa>
   16194:	bd10      	pop	{r4, pc}

00016196 <_Znaj>:
   16196:	f7ff bfed 	b.w	16174 <_Znwj>

0001619a <abort>:
   1619a:	2006      	movs	r0, #6
   1619c:	b508      	push	{r3, lr}
   1619e:	f7fb f987 	bl	114b0 <raise>
   161a2:	2001      	movs	r0, #1
   161a4:	f7ee fc80 	bl	4aa8 <_exit>

000161a8 <atoi>:
   161a8:	220a      	movs	r2, #10
   161aa:	2100      	movs	r1, #0
   161ac:	f7fb ba3c 	b.w	11628 <strtol>

000161b0 <memchr>:
   161b0:	b2c9      	uxtb	r1, r1
   161b2:	4603      	mov	r3, r0
   161b4:	4402      	add	r2, r0
   161b6:	b510      	push	{r4, lr}
   161b8:	4293      	cmp	r3, r2
   161ba:	4618      	mov	r0, r3
   161bc:	d101      	bne.n	161c2 <memchr+0x12>
   161be:	2000      	movs	r0, #0
   161c0:	e003      	b.n	161ca <memchr+0x1a>
   161c2:	7804      	ldrb	r4, [r0, #0]
   161c4:	3301      	adds	r3, #1
   161c6:	428c      	cmp	r4, r1
   161c8:	d1f6      	bne.n	161b8 <memchr+0x8>
   161ca:	bd10      	pop	{r4, pc}

000161cc <memcpy>:
   161cc:	440a      	add	r2, r1
   161ce:	1e43      	subs	r3, r0, #1
   161d0:	4291      	cmp	r1, r2
   161d2:	d100      	bne.n	161d6 <memcpy+0xa>
   161d4:	4770      	bx	lr
   161d6:	b510      	push	{r4, lr}
   161d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   161dc:	4291      	cmp	r1, r2
   161de:	f803 4f01 	strb.w	r4, [r3, #1]!
   161e2:	d1f9      	bne.n	161d8 <memcpy+0xc>
   161e4:	bd10      	pop	{r4, pc}

000161e6 <memset>:
   161e6:	4402      	add	r2, r0
   161e8:	4603      	mov	r3, r0
   161ea:	4293      	cmp	r3, r2
   161ec:	d100      	bne.n	161f0 <memset+0xa>
   161ee:	4770      	bx	lr
   161f0:	f803 1b01 	strb.w	r1, [r3], #1
   161f4:	e7f9      	b.n	161ea <memset+0x4>

000161f6 <__sfputc_r>:
   161f6:	6893      	ldr	r3, [r2, #8]
   161f8:	3b01      	subs	r3, #1
   161fa:	2b00      	cmp	r3, #0
   161fc:	6093      	str	r3, [r2, #8]
   161fe:	b410      	push	{r4}
   16200:	da07      	bge.n	16212 <__sfputc_r+0x1c>
   16202:	6994      	ldr	r4, [r2, #24]
   16204:	42a3      	cmp	r3, r4
   16206:	db01      	blt.n	1620c <__sfputc_r+0x16>
   16208:	290a      	cmp	r1, #10
   1620a:	d102      	bne.n	16212 <__sfputc_r+0x1c>
   1620c:	bc10      	pop	{r4}
   1620e:	f7fb ba2b 	b.w	11668 <__swbuf_r>
   16212:	6813      	ldr	r3, [r2, #0]
   16214:	1c58      	adds	r0, r3, #1
   16216:	6010      	str	r0, [r2, #0]
   16218:	4608      	mov	r0, r1
   1621a:	7019      	strb	r1, [r3, #0]
   1621c:	bc10      	pop	{r4}
   1621e:	4770      	bx	lr

00016220 <__sfputs_r>:
   16220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16222:	4606      	mov	r6, r0
   16224:	460f      	mov	r7, r1
   16226:	4614      	mov	r4, r2
   16228:	18d5      	adds	r5, r2, r3
   1622a:	42ac      	cmp	r4, r5
   1622c:	d101      	bne.n	16232 <__sfputs_r+0x12>
   1622e:	2000      	movs	r0, #0
   16230:	e007      	b.n	16242 <__sfputs_r+0x22>
   16232:	463a      	mov	r2, r7
   16234:	f814 1b01 	ldrb.w	r1, [r4], #1
   16238:	4630      	mov	r0, r6
   1623a:	f7ff ffdc 	bl	161f6 <__sfputc_r>
   1623e:	1c43      	adds	r3, r0, #1
   16240:	d1f3      	bne.n	1622a <__sfputs_r+0xa>
   16242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016244 <__cvt>:
   16244:	2b00      	cmp	r3, #0
   16246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1624a:	461f      	mov	r7, r3
   1624c:	b088      	sub	sp, #32
   1624e:	bfb4      	ite	lt
   16250:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   16254:	2300      	movge	r3, #0
   16256:	4614      	mov	r4, r2
   16258:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1625a:	bfbc      	itt	lt
   1625c:	461f      	movlt	r7, r3
   1625e:	232d      	movlt	r3, #45	; 0x2d
   16260:	9d10      	ldr	r5, [sp, #64]	; 0x40
   16262:	7013      	strb	r3, [r2, #0]
   16264:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16266:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1626a:	f023 0820 	bic.w	r8, r3, #32
   1626e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   16272:	d005      	beq.n	16280 <__cvt+0x3c>
   16274:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   16278:	d100      	bne.n	1627c <__cvt+0x38>
   1627a:	3501      	adds	r5, #1
   1627c:	2302      	movs	r3, #2
   1627e:	e000      	b.n	16282 <__cvt+0x3e>
   16280:	2303      	movs	r3, #3
   16282:	aa07      	add	r2, sp, #28
   16284:	9204      	str	r2, [sp, #16]
   16286:	aa06      	add	r2, sp, #24
   16288:	e9cd 3500 	strd	r3, r5, [sp]
   1628c:	e9cd a202 	strd	sl, r2, [sp, #8]
   16290:	463b      	mov	r3, r7
   16292:	4622      	mov	r2, r4
   16294:	f7eb fbc4 	bl	1a20 <_dtoa_r>
   16298:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   1629c:	4606      	mov	r6, r0
   1629e:	d102      	bne.n	162a6 <__cvt+0x62>
   162a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   162a2:	07db      	lsls	r3, r3, #31
   162a4:	d522      	bpl.n	162ec <__cvt+0xa8>
   162a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   162aa:	eb06 0905 	add.w	r9, r6, r5
   162ae:	d110      	bne.n	162d2 <__cvt+0x8e>
   162b0:	7833      	ldrb	r3, [r6, #0]
   162b2:	2b30      	cmp	r3, #48	; 0x30
   162b4:	d10a      	bne.n	162cc <__cvt+0x88>
   162b6:	2200      	movs	r2, #0
   162b8:	2300      	movs	r3, #0
   162ba:	4620      	mov	r0, r4
   162bc:	4639      	mov	r1, r7
   162be:	f7ea fb6f 	bl	9a0 <__aeabi_dcmpeq>
   162c2:	b918      	cbnz	r0, 162cc <__cvt+0x88>
   162c4:	f1c5 0501 	rsb	r5, r5, #1
   162c8:	f8ca 5000 	str.w	r5, [sl]
   162cc:	f8da 3000 	ldr.w	r3, [sl]
   162d0:	4499      	add	r9, r3
   162d2:	2200      	movs	r2, #0
   162d4:	2300      	movs	r3, #0
   162d6:	4620      	mov	r0, r4
   162d8:	4639      	mov	r1, r7
   162da:	f7ea fb61 	bl	9a0 <__aeabi_dcmpeq>
   162de:	b108      	cbz	r0, 162e4 <__cvt+0xa0>
   162e0:	f8cd 901c 	str.w	r9, [sp, #28]
   162e4:	2230      	movs	r2, #48	; 0x30
   162e6:	9b07      	ldr	r3, [sp, #28]
   162e8:	454b      	cmp	r3, r9
   162ea:	d307      	bcc.n	162fc <__cvt+0xb8>
   162ec:	9b07      	ldr	r3, [sp, #28]
   162ee:	4630      	mov	r0, r6
   162f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   162f2:	1b9b      	subs	r3, r3, r6
   162f4:	6013      	str	r3, [r2, #0]
   162f6:	b008      	add	sp, #32
   162f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162fc:	1c59      	adds	r1, r3, #1
   162fe:	9107      	str	r1, [sp, #28]
   16300:	701a      	strb	r2, [r3, #0]
   16302:	e7f0      	b.n	162e6 <__cvt+0xa2>

00016304 <__exponent>:
   16304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16306:	2900      	cmp	r1, #0
   16308:	4603      	mov	r3, r0
   1630a:	bfb8      	it	lt
   1630c:	4249      	neglt	r1, r1
   1630e:	f803 2b02 	strb.w	r2, [r3], #2
   16312:	bfb4      	ite	lt
   16314:	222d      	movlt	r2, #45	; 0x2d
   16316:	222b      	movge	r2, #43	; 0x2b
   16318:	2909      	cmp	r1, #9
   1631a:	7042      	strb	r2, [r0, #1]
   1631c:	dd2a      	ble.n	16374 <__exponent+0x70>
   1631e:	f10d 0407 	add.w	r4, sp, #7
   16322:	270a      	movs	r7, #10
   16324:	46a4      	mov	ip, r4
   16326:	460a      	mov	r2, r1
   16328:	46a6      	mov	lr, r4
   1632a:	3c01      	subs	r4, #1
   1632c:	2a63      	cmp	r2, #99	; 0x63
   1632e:	fb91 f6f7 	sdiv	r6, r1, r7
   16332:	fb07 1516 	mls	r5, r7, r6, r1
   16336:	4631      	mov	r1, r6
   16338:	f105 0530 	add.w	r5, r5, #48	; 0x30
   1633c:	f80e 5c01 	strb.w	r5, [lr, #-1]
   16340:	dcf1      	bgt.n	16326 <__exponent+0x22>
   16342:	3130      	adds	r1, #48	; 0x30
   16344:	f1ae 0502 	sub.w	r5, lr, #2
   16348:	f804 1c01 	strb.w	r1, [r4, #-1]
   1634c:	1c44      	adds	r4, r0, #1
   1634e:	4629      	mov	r1, r5
   16350:	4561      	cmp	r1, ip
   16352:	d30a      	bcc.n	1636a <__exponent+0x66>
   16354:	f10d 0209 	add.w	r2, sp, #9
   16358:	eba2 020e 	sub.w	r2, r2, lr
   1635c:	4565      	cmp	r5, ip
   1635e:	bf88      	it	hi
   16360:	2200      	movhi	r2, #0
   16362:	4413      	add	r3, r2
   16364:	1a18      	subs	r0, r3, r0
   16366:	b003      	add	sp, #12
   16368:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1636a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1636e:	f804 2f01 	strb.w	r2, [r4, #1]!
   16372:	e7ed      	b.n	16350 <__exponent+0x4c>
   16374:	2330      	movs	r3, #48	; 0x30
   16376:	3130      	adds	r1, #48	; 0x30
   16378:	7083      	strb	r3, [r0, #2]
   1637a:	1d03      	adds	r3, r0, #4
   1637c:	70c1      	strb	r1, [r0, #3]
   1637e:	e7f1      	b.n	16364 <__exponent+0x60>

00016380 <_printf_common>:
   16380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16384:	4616      	mov	r6, r2
   16386:	4699      	mov	r9, r3
   16388:	688a      	ldr	r2, [r1, #8]
   1638a:	4607      	mov	r7, r0
   1638c:	690b      	ldr	r3, [r1, #16]
   1638e:	460c      	mov	r4, r1
   16390:	f8dd 8020 	ldr.w	r8, [sp, #32]
   16394:	4293      	cmp	r3, r2
   16396:	bfb8      	it	lt
   16398:	4613      	movlt	r3, r2
   1639a:	6033      	str	r3, [r6, #0]
   1639c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   163a0:	b10a      	cbz	r2, 163a6 <_printf_common+0x26>
   163a2:	3301      	adds	r3, #1
   163a4:	6033      	str	r3, [r6, #0]
   163a6:	6823      	ldr	r3, [r4, #0]
   163a8:	0699      	lsls	r1, r3, #26
   163aa:	bf42      	ittt	mi
   163ac:	6833      	ldrmi	r3, [r6, #0]
   163ae:	3302      	addmi	r3, #2
   163b0:	6033      	strmi	r3, [r6, #0]
   163b2:	6825      	ldr	r5, [r4, #0]
   163b4:	f015 0506 	ands.w	r5, r5, #6
   163b8:	d106      	bne.n	163c8 <_printf_common+0x48>
   163ba:	f104 0a19 	add.w	sl, r4, #25
   163be:	68e3      	ldr	r3, [r4, #12]
   163c0:	6832      	ldr	r2, [r6, #0]
   163c2:	1a9b      	subs	r3, r3, r2
   163c4:	42ab      	cmp	r3, r5
   163c6:	dc29      	bgt.n	1641c <_printf_common+0x9c>
   163c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   163cc:	1e13      	subs	r3, r2, #0
   163ce:	6822      	ldr	r2, [r4, #0]
   163d0:	bf18      	it	ne
   163d2:	2301      	movne	r3, #1
   163d4:	0692      	lsls	r2, r2, #26
   163d6:	d42e      	bmi.n	16436 <_printf_common+0xb6>
   163d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   163dc:	4649      	mov	r1, r9
   163de:	4638      	mov	r0, r7
   163e0:	47c0      	blx	r8
   163e2:	3001      	adds	r0, #1
   163e4:	d021      	beq.n	1642a <_printf_common+0xaa>
   163e6:	6823      	ldr	r3, [r4, #0]
   163e8:	341a      	adds	r4, #26
   163ea:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   163ee:	f003 0306 	and.w	r3, r3, #6
   163f2:	6832      	ldr	r2, [r6, #0]
   163f4:	2600      	movs	r6, #0
   163f6:	2b04      	cmp	r3, #4
   163f8:	f854 3c12 	ldr.w	r3, [r4, #-18]
   163fc:	bf08      	it	eq
   163fe:	1aad      	subeq	r5, r5, r2
   16400:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   16404:	bf14      	ite	ne
   16406:	2500      	movne	r5, #0
   16408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1640c:	4293      	cmp	r3, r2
   1640e:	bfc4      	itt	gt
   16410:	1a9b      	subgt	r3, r3, r2
   16412:	18ed      	addgt	r5, r5, r3
   16414:	42b5      	cmp	r5, r6
   16416:	d11a      	bne.n	1644e <_printf_common+0xce>
   16418:	2000      	movs	r0, #0
   1641a:	e008      	b.n	1642e <_printf_common+0xae>
   1641c:	2301      	movs	r3, #1
   1641e:	4652      	mov	r2, sl
   16420:	4649      	mov	r1, r9
   16422:	4638      	mov	r0, r7
   16424:	47c0      	blx	r8
   16426:	3001      	adds	r0, #1
   16428:	d103      	bne.n	16432 <_printf_common+0xb2>
   1642a:	f04f 30ff 	mov.w	r0, #4294967295
   1642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16432:	3501      	adds	r5, #1
   16434:	e7c3      	b.n	163be <_printf_common+0x3e>
   16436:	18e1      	adds	r1, r4, r3
   16438:	1c5a      	adds	r2, r3, #1
   1643a:	2030      	movs	r0, #48	; 0x30
   1643c:	3302      	adds	r3, #2
   1643e:	4422      	add	r2, r4
   16440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   16444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   16448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1644c:	e7c4      	b.n	163d8 <_printf_common+0x58>
   1644e:	2301      	movs	r3, #1
   16450:	4622      	mov	r2, r4
   16452:	4649      	mov	r1, r9
   16454:	4638      	mov	r0, r7
   16456:	47c0      	blx	r8
   16458:	3001      	adds	r0, #1
   1645a:	d0e6      	beq.n	1642a <_printf_common+0xaa>
   1645c:	3601      	adds	r6, #1
   1645e:	e7d9      	b.n	16414 <_printf_common+0x94>

00016460 <_raise_r>:
   16460:	291f      	cmp	r1, #31
   16462:	b538      	push	{r3, r4, r5, lr}
   16464:	4604      	mov	r4, r0
   16466:	460d      	mov	r5, r1
   16468:	d904      	bls.n	16474 <_raise_r+0x14>
   1646a:	2316      	movs	r3, #22
   1646c:	6003      	str	r3, [r0, #0]
   1646e:	f04f 30ff 	mov.w	r0, #4294967295
   16472:	bd38      	pop	{r3, r4, r5, pc}
   16474:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16476:	b112      	cbz	r2, 1647e <_raise_r+0x1e>
   16478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1647c:	b94b      	cbnz	r3, 16492 <_raise_r+0x32>
   1647e:	4620      	mov	r0, r4
   16480:	f000 f816 	bl	164b0 <_getpid_r>
   16484:	462a      	mov	r2, r5
   16486:	4601      	mov	r1, r0
   16488:	4620      	mov	r0, r4
   1648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1648e:	f7fb b817 	b.w	114c0 <_kill_r>
   16492:	2b01      	cmp	r3, #1
   16494:	d00a      	beq.n	164ac <_raise_r+0x4c>
   16496:	1c59      	adds	r1, r3, #1
   16498:	d103      	bne.n	164a2 <_raise_r+0x42>
   1649a:	2316      	movs	r3, #22
   1649c:	6003      	str	r3, [r0, #0]
   1649e:	2001      	movs	r0, #1
   164a0:	e7e7      	b.n	16472 <_raise_r+0x12>
   164a2:	2400      	movs	r4, #0
   164a4:	4628      	mov	r0, r5
   164a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   164aa:	4798      	blx	r3
   164ac:	2000      	movs	r0, #0
   164ae:	e7e0      	b.n	16472 <_raise_r+0x12>

000164b0 <_getpid_r>:
   164b0:	f7fc ba1e 	b.w	128f0 <_getpid>

000164b4 <strncmp>:
   164b4:	b510      	push	{r4, lr}
   164b6:	b16a      	cbz	r2, 164d4 <strncmp+0x20>
   164b8:	3901      	subs	r1, #1
   164ba:	1884      	adds	r4, r0, r2
   164bc:	f810 3b01 	ldrb.w	r3, [r0], #1
   164c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   164c4:	4293      	cmp	r3, r2
   164c6:	d103      	bne.n	164d0 <strncmp+0x1c>
   164c8:	42a0      	cmp	r0, r4
   164ca:	d001      	beq.n	164d0 <strncmp+0x1c>
   164cc:	2b00      	cmp	r3, #0
   164ce:	d1f5      	bne.n	164bc <strncmp+0x8>
   164d0:	1a98      	subs	r0, r3, r2
   164d2:	bd10      	pop	{r4, pc}
   164d4:	4610      	mov	r0, r2
   164d6:	e7fc      	b.n	164d2 <strncmp+0x1e>

000164d8 <strncpy>:
   164d8:	3901      	subs	r1, #1
   164da:	4603      	mov	r3, r0
   164dc:	b510      	push	{r4, lr}
   164de:	b132      	cbz	r2, 164ee <strncpy+0x16>
   164e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   164e4:	3a01      	subs	r2, #1
   164e6:	f803 4b01 	strb.w	r4, [r3], #1
   164ea:	2c00      	cmp	r4, #0
   164ec:	d1f7      	bne.n	164de <strncpy+0x6>
   164ee:	441a      	add	r2, r3
   164f0:	2100      	movs	r1, #0
   164f2:	4293      	cmp	r3, r2
   164f4:	d100      	bne.n	164f8 <strncpy+0x20>
   164f6:	bd10      	pop	{r4, pc}
   164f8:	f803 1b01 	strb.w	r1, [r3], #1
   164fc:	e7f9      	b.n	164f2 <strncpy+0x1a>

000164fe <strnlen>:
   164fe:	4602      	mov	r2, r0
   16500:	4401      	add	r1, r0
   16502:	b510      	push	{r4, lr}
   16504:	428a      	cmp	r2, r1
   16506:	4613      	mov	r3, r2
   16508:	d101      	bne.n	1650e <strnlen+0x10>
   1650a:	1a18      	subs	r0, r3, r0
   1650c:	bd10      	pop	{r4, pc}
   1650e:	781c      	ldrb	r4, [r3, #0]
   16510:	3201      	adds	r2, #1
   16512:	2c00      	cmp	r4, #0
   16514:	d1f6      	bne.n	16504 <strnlen+0x6>
   16516:	e7f8      	b.n	1650a <strnlen+0xc>

00016518 <__strtok_r>:
   16518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1651a:	b908      	cbnz	r0, 16520 <__strtok_r+0x8>
   1651c:	6810      	ldr	r0, [r2, #0]
   1651e:	b188      	cbz	r0, 16544 <__strtok_r+0x2c>
   16520:	4604      	mov	r4, r0
   16522:	4620      	mov	r0, r4
   16524:	460f      	mov	r7, r1
   16526:	f814 5b01 	ldrb.w	r5, [r4], #1
   1652a:	f817 6b01 	ldrb.w	r6, [r7], #1
   1652e:	b91e      	cbnz	r6, 16538 <__strtok_r+0x20>
   16530:	b965      	cbnz	r5, 1654c <__strtok_r+0x34>
   16532:	4628      	mov	r0, r5
   16534:	6015      	str	r5, [r2, #0]
   16536:	e005      	b.n	16544 <__strtok_r+0x2c>
   16538:	42b5      	cmp	r5, r6
   1653a:	d1f6      	bne.n	1652a <__strtok_r+0x12>
   1653c:	2b00      	cmp	r3, #0
   1653e:	d1f0      	bne.n	16522 <__strtok_r+0xa>
   16540:	6014      	str	r4, [r2, #0]
   16542:	7003      	strb	r3, [r0, #0]
   16544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16546:	461c      	mov	r4, r3
   16548:	e00c      	b.n	16564 <__strtok_r+0x4c>
   1654a:	b915      	cbnz	r5, 16552 <__strtok_r+0x3a>
   1654c:	f814 3b01 	ldrb.w	r3, [r4], #1
   16550:	460e      	mov	r6, r1
   16552:	f816 5b01 	ldrb.w	r5, [r6], #1
   16556:	42ab      	cmp	r3, r5
   16558:	d1f7      	bne.n	1654a <__strtok_r+0x32>
   1655a:	2b00      	cmp	r3, #0
   1655c:	d0f3      	beq.n	16546 <__strtok_r+0x2e>
   1655e:	2300      	movs	r3, #0
   16560:	f804 3c01 	strb.w	r3, [r4, #-1]
   16564:	6014      	str	r4, [r2, #0]
   16566:	e7ed      	b.n	16544 <__strtok_r+0x2c>

00016568 <quorem>:
   16568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	6903      	ldr	r3, [r0, #16]
   1656e:	4607      	mov	r7, r0
   16570:	690c      	ldr	r4, [r1, #16]
   16572:	42a3      	cmp	r3, r4
   16574:	f2c0 8085 	blt.w	16682 <quorem+0x11a>
   16578:	3c01      	subs	r4, #1
   1657a:	f100 0514 	add.w	r5, r0, #20
   1657e:	f101 0814 	add.w	r8, r1, #20
   16582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   1658a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   1658e:	9301      	str	r3, [sp, #4]
   16590:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   16594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   16598:	3301      	adds	r3, #1
   1659a:	429a      	cmp	r2, r3
   1659c:	fbb2 f6f3 	udiv	r6, r2, r3
   165a0:	d333      	bcc.n	1660a <quorem+0xa2>
   165a2:	f04f 0e00 	mov.w	lr, #0
   165a6:	4640      	mov	r0, r8
   165a8:	46ac      	mov	ip, r5
   165aa:	46f2      	mov	sl, lr
   165ac:	f850 2b04 	ldr.w	r2, [r0], #4
   165b0:	b293      	uxth	r3, r2
   165b2:	4581      	cmp	r9, r0
   165b4:	ea4f 4212 	mov.w	r2, r2, lsr #16
   165b8:	fb06 e303 	mla	r3, r6, r3, lr
   165bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   165c0:	b29b      	uxth	r3, r3
   165c2:	fb06 e202 	mla	r2, r6, r2, lr
   165c6:	ebaa 0303 	sub.w	r3, sl, r3
   165ca:	f8dc a000 	ldr.w	sl, [ip]
   165ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   165d2:	fa1f fa8a 	uxth.w	sl, sl
   165d6:	4453      	add	r3, sl
   165d8:	fa1f fa82 	uxth.w	sl, r2
   165dc:	f8dc 2000 	ldr.w	r2, [ip]
   165e0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   165e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   165e8:	b29b      	uxth	r3, r3
   165ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
   165ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   165f2:	f84c 3b04 	str.w	r3, [ip], #4
   165f6:	d2d9      	bcs.n	165ac <quorem+0x44>
   165f8:	f855 300b 	ldr.w	r3, [r5, fp]
   165fc:	b92b      	cbnz	r3, 1660a <quorem+0xa2>
   165fe:	9b01      	ldr	r3, [sp, #4]
   16600:	3b04      	subs	r3, #4
   16602:	429d      	cmp	r5, r3
   16604:	461a      	mov	r2, r3
   16606:	d330      	bcc.n	1666a <quorem+0x102>
   16608:	613c      	str	r4, [r7, #16]
   1660a:	4638      	mov	r0, r7
   1660c:	f000 fa6f 	bl	16aee <__mcmp>
   16610:	2800      	cmp	r0, #0
   16612:	db26      	blt.n	16662 <quorem+0xfa>
   16614:	3601      	adds	r6, #1
   16616:	4628      	mov	r0, r5
   16618:	f04f 0c00 	mov.w	ip, #0
   1661c:	f858 1b04 	ldr.w	r1, [r8], #4
   16620:	f8d0 e000 	ldr.w	lr, [r0]
   16624:	b28b      	uxth	r3, r1
   16626:	45c1      	cmp	r9, r8
   16628:	fa1f f28e 	uxth.w	r2, lr
   1662c:	ebac 0303 	sub.w	r3, ip, r3
   16630:	4413      	add	r3, r2
   16632:	ea4f 4211 	mov.w	r2, r1, lsr #16
   16636:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   1663a:	eb02 4223 	add.w	r2, r2, r3, asr #16
   1663e:	b29b      	uxth	r3, r3
   16640:	ea4f 4c22 	mov.w	ip, r2, asr #16
   16644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   16648:	f840 3b04 	str.w	r3, [r0], #4
   1664c:	d2e6      	bcs.n	1661c <quorem+0xb4>
   1664e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   16652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16656:	b922      	cbnz	r2, 16662 <quorem+0xfa>
   16658:	3b04      	subs	r3, #4
   1665a:	429d      	cmp	r5, r3
   1665c:	461a      	mov	r2, r3
   1665e:	d30a      	bcc.n	16676 <quorem+0x10e>
   16660:	613c      	str	r4, [r7, #16]
   16662:	4630      	mov	r0, r6
   16664:	b003      	add	sp, #12
   16666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1666a:	6812      	ldr	r2, [r2, #0]
   1666c:	3b04      	subs	r3, #4
   1666e:	2a00      	cmp	r2, #0
   16670:	d1ca      	bne.n	16608 <quorem+0xa0>
   16672:	3c01      	subs	r4, #1
   16674:	e7c5      	b.n	16602 <quorem+0x9a>
   16676:	6812      	ldr	r2, [r2, #0]
   16678:	3b04      	subs	r3, #4
   1667a:	2a00      	cmp	r2, #0
   1667c:	d1f0      	bne.n	16660 <quorem+0xf8>
   1667e:	3c01      	subs	r4, #1
   16680:	e7eb      	b.n	1665a <quorem+0xf2>
   16682:	2000      	movs	r0, #0
   16684:	e7ee      	b.n	16664 <quorem+0xfc>

00016686 <__sfmoreglue>:
   16686:	b570      	push	{r4, r5, r6, lr}
   16688:	1e4a      	subs	r2, r1, #1
   1668a:	2568      	movs	r5, #104	; 0x68
   1668c:	460e      	mov	r6, r1
   1668e:	4355      	muls	r5, r2
   16690:	f105 0174 	add.w	r1, r5, #116	; 0x74
   16694:	f7fa fa22 	bl	10adc <_malloc_r>
   16698:	4604      	mov	r4, r0
   1669a:	b140      	cbz	r0, 166ae <__sfmoreglue+0x28>
   1669c:	2100      	movs	r1, #0
   1669e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   166a2:	e9c0 1600 	strd	r1, r6, [r0]
   166a6:	300c      	adds	r0, #12
   166a8:	60a0      	str	r0, [r4, #8]
   166aa:	f7ff fd9c 	bl	161e6 <memset>
   166ae:	4620      	mov	r0, r4
   166b0:	bd70      	pop	{r4, r5, r6, pc}

000166b2 <_fwalk_reent>:
   166b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   166b6:	4606      	mov	r6, r0
   166b8:	4688      	mov	r8, r1
   166ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
   166be:	2700      	movs	r7, #0
   166c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   166c4:	f1b9 0901 	subs.w	r9, r9, #1
   166c8:	d505      	bpl.n	166d6 <_fwalk_reent+0x24>
   166ca:	6824      	ldr	r4, [r4, #0]
   166cc:	2c00      	cmp	r4, #0
   166ce:	d1f7      	bne.n	166c0 <_fwalk_reent+0xe>
   166d0:	4638      	mov	r0, r7
   166d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   166d6:	89ab      	ldrh	r3, [r5, #12]
   166d8:	2b01      	cmp	r3, #1
   166da:	d907      	bls.n	166ec <_fwalk_reent+0x3a>
   166dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   166e0:	3301      	adds	r3, #1
   166e2:	d003      	beq.n	166ec <_fwalk_reent+0x3a>
   166e4:	4629      	mov	r1, r5
   166e6:	4630      	mov	r0, r6
   166e8:	47c0      	blx	r8
   166ea:	4307      	orrs	r7, r0
   166ec:	3568      	adds	r5, #104	; 0x68
   166ee:	e7e9      	b.n	166c4 <_fwalk_reent+0x12>

000166f0 <__swhatbuf_r>:
   166f0:	b570      	push	{r4, r5, r6, lr}
   166f2:	460e      	mov	r6, r1
   166f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   166f8:	b096      	sub	sp, #88	; 0x58
   166fa:	4614      	mov	r4, r2
   166fc:	2900      	cmp	r1, #0
   166fe:	461d      	mov	r5, r3
   16700:	da07      	bge.n	16712 <__swhatbuf_r+0x22>
   16702:	2300      	movs	r3, #0
   16704:	602b      	str	r3, [r5, #0]
   16706:	89b3      	ldrh	r3, [r6, #12]
   16708:	061a      	lsls	r2, r3, #24
   1670a:	d410      	bmi.n	1672e <__swhatbuf_r+0x3e>
   1670c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16710:	e00e      	b.n	16730 <__swhatbuf_r+0x40>
   16712:	466a      	mov	r2, sp
   16714:	f7fb faa8 	bl	11c68 <_fstat_r>
   16718:	2800      	cmp	r0, #0
   1671a:	dbf2      	blt.n	16702 <__swhatbuf_r+0x12>
   1671c:	9a01      	ldr	r2, [sp, #4]
   1671e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   16722:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   16726:	425a      	negs	r2, r3
   16728:	415a      	adcs	r2, r3
   1672a:	602a      	str	r2, [r5, #0]
   1672c:	e7ee      	b.n	1670c <__swhatbuf_r+0x1c>
   1672e:	2340      	movs	r3, #64	; 0x40
   16730:	2000      	movs	r0, #0
   16732:	6023      	str	r3, [r4, #0]
   16734:	b016      	add	sp, #88	; 0x58
   16736:	bd70      	pop	{r4, r5, r6, pc}

00016738 <_Balloc>:
   16738:	b570      	push	{r4, r5, r6, lr}
   1673a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1673c:	4604      	mov	r4, r0
   1673e:	460d      	mov	r5, r1
   16740:	b93e      	cbnz	r6, 16752 <_Balloc+0x1a>
   16742:	2010      	movs	r0, #16
   16744:	f7fa f96c 	bl	10a20 <malloc>
   16748:	6260      	str	r0, [r4, #36]	; 0x24
   1674a:	6006      	str	r6, [r0, #0]
   1674c:	60c6      	str	r6, [r0, #12]
   1674e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   16752:	6a66      	ldr	r6, [r4, #36]	; 0x24
   16754:	68f3      	ldr	r3, [r6, #12]
   16756:	b183      	cbz	r3, 1677a <_Balloc+0x42>
   16758:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1675a:	68db      	ldr	r3, [r3, #12]
   1675c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   16760:	b9b8      	cbnz	r0, 16792 <_Balloc+0x5a>
   16762:	2101      	movs	r1, #1
   16764:	4620      	mov	r0, r4
   16766:	fa01 f605 	lsl.w	r6, r1, r5
   1676a:	1d72      	adds	r2, r6, #5
   1676c:	0092      	lsls	r2, r2, #2
   1676e:	f000 faa5 	bl	16cbc <_calloc_r>
   16772:	b160      	cbz	r0, 1678e <_Balloc+0x56>
   16774:	e9c0 5601 	strd	r5, r6, [r0, #4]
   16778:	e00e      	b.n	16798 <_Balloc+0x60>
   1677a:	2221      	movs	r2, #33	; 0x21
   1677c:	2104      	movs	r1, #4
   1677e:	4620      	mov	r0, r4
   16780:	f000 fa9c 	bl	16cbc <_calloc_r>
   16784:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16786:	60f0      	str	r0, [r6, #12]
   16788:	68db      	ldr	r3, [r3, #12]
   1678a:	2b00      	cmp	r3, #0
   1678c:	d1e4      	bne.n	16758 <_Balloc+0x20>
   1678e:	2000      	movs	r0, #0
   16790:	bd70      	pop	{r4, r5, r6, pc}
   16792:	6802      	ldr	r2, [r0, #0]
   16794:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   16798:	2300      	movs	r3, #0
   1679a:	e9c0 3303 	strd	r3, r3, [r0, #12]
   1679e:	e7f7      	b.n	16790 <_Balloc+0x58>

000167a0 <_Bfree>:
   167a0:	b570      	push	{r4, r5, r6, lr}
   167a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   167a4:	4605      	mov	r5, r0
   167a6:	460c      	mov	r4, r1
   167a8:	b93e      	cbnz	r6, 167ba <_Bfree+0x1a>
   167aa:	2010      	movs	r0, #16
   167ac:	f7fa f938 	bl	10a20 <malloc>
   167b0:	6268      	str	r0, [r5, #36]	; 0x24
   167b2:	6006      	str	r6, [r0, #0]
   167b4:	60c6      	str	r6, [r0, #12]
   167b6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   167ba:	b13c      	cbz	r4, 167cc <_Bfree+0x2c>
   167bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   167be:	6862      	ldr	r2, [r4, #4]
   167c0:	68db      	ldr	r3, [r3, #12]
   167c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   167c6:	6021      	str	r1, [r4, #0]
   167c8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   167cc:	bd70      	pop	{r4, r5, r6, pc}

000167ce <__multadd>:
   167ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167d2:	4607      	mov	r7, r0
   167d4:	4698      	mov	r8, r3
   167d6:	460c      	mov	r4, r1
   167d8:	690e      	ldr	r6, [r1, #16]
   167da:	f101 0014 	add.w	r0, r1, #20
   167de:	2300      	movs	r3, #0
   167e0:	6805      	ldr	r5, [r0, #0]
   167e2:	3301      	adds	r3, #1
   167e4:	b2a9      	uxth	r1, r5
   167e6:	429e      	cmp	r6, r3
   167e8:	ea4f 4515 	mov.w	r5, r5, lsr #16
   167ec:	fb02 8101 	mla	r1, r2, r1, r8
   167f0:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   167f4:	b289      	uxth	r1, r1
   167f6:	fb02 c505 	mla	r5, r2, r5, ip
   167fa:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   167fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
   16802:	f840 1b04 	str.w	r1, [r0], #4
   16806:	dceb      	bgt.n	167e0 <__multadd+0x12>
   16808:	f1b8 0f00 	cmp.w	r8, #0
   1680c:	d01b      	beq.n	16846 <__multadd+0x78>
   1680e:	68a3      	ldr	r3, [r4, #8]
   16810:	42b3      	cmp	r3, r6
   16812:	dc12      	bgt.n	1683a <__multadd+0x6c>
   16814:	6861      	ldr	r1, [r4, #4]
   16816:	4638      	mov	r0, r7
   16818:	3101      	adds	r1, #1
   1681a:	f7ff ff8d 	bl	16738 <_Balloc>
   1681e:	6922      	ldr	r2, [r4, #16]
   16820:	4605      	mov	r5, r0
   16822:	f104 010c 	add.w	r1, r4, #12
   16826:	3202      	adds	r2, #2
   16828:	300c      	adds	r0, #12
   1682a:	0092      	lsls	r2, r2, #2
   1682c:	f7ff fcce 	bl	161cc <memcpy>
   16830:	4621      	mov	r1, r4
   16832:	462c      	mov	r4, r5
   16834:	4638      	mov	r0, r7
   16836:	f7ff ffb3 	bl	167a0 <_Bfree>
   1683a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   1683e:	3601      	adds	r6, #1
   16840:	f8c3 8014 	str.w	r8, [r3, #20]
   16844:	6126      	str	r6, [r4, #16]
   16846:	4620      	mov	r0, r4
   16848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001684c <__hi0bits>:
   1684c:	0c02      	lsrs	r2, r0, #16
   1684e:	4603      	mov	r3, r0
   16850:	0412      	lsls	r2, r2, #16
   16852:	b9ca      	cbnz	r2, 16888 <__hi0bits+0x3c>
   16854:	0403      	lsls	r3, r0, #16
   16856:	2010      	movs	r0, #16
   16858:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1685c:	bf04      	itt	eq
   1685e:	021b      	lsleq	r3, r3, #8
   16860:	3008      	addeq	r0, #8
   16862:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   16866:	bf04      	itt	eq
   16868:	011b      	lsleq	r3, r3, #4
   1686a:	3004      	addeq	r0, #4
   1686c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   16870:	bf04      	itt	eq
   16872:	009b      	lsleq	r3, r3, #2
   16874:	3002      	addeq	r0, #2
   16876:	2b00      	cmp	r3, #0
   16878:	db05      	blt.n	16886 <__hi0bits+0x3a>
   1687a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1687e:	f100 0001 	add.w	r0, r0, #1
   16882:	bf08      	it	eq
   16884:	2020      	moveq	r0, #32
   16886:	4770      	bx	lr
   16888:	2000      	movs	r0, #0
   1688a:	e7e5      	b.n	16858 <__hi0bits+0xc>

0001688c <__lo0bits>:
   1688c:	6803      	ldr	r3, [r0, #0]
   1688e:	4602      	mov	r2, r0
   16890:	f013 0007 	ands.w	r0, r3, #7
   16894:	d00b      	beq.n	168ae <__lo0bits+0x22>
   16896:	07d9      	lsls	r1, r3, #31
   16898:	d422      	bmi.n	168e0 <__lo0bits+0x54>
   1689a:	0798      	lsls	r0, r3, #30
   1689c:	bf47      	ittee	mi
   1689e:	085b      	lsrmi	r3, r3, #1
   168a0:	2001      	movmi	r0, #1
   168a2:	089b      	lsrpl	r3, r3, #2
   168a4:	2002      	movpl	r0, #2
   168a6:	bf4c      	ite	mi
   168a8:	6013      	strmi	r3, [r2, #0]
   168aa:	6013      	strpl	r3, [r2, #0]
   168ac:	4770      	bx	lr
   168ae:	b299      	uxth	r1, r3
   168b0:	b909      	cbnz	r1, 168b6 <__lo0bits+0x2a>
   168b2:	0c1b      	lsrs	r3, r3, #16
   168b4:	2010      	movs	r0, #16
   168b6:	f013 0fff 	tst.w	r3, #255	; 0xff
   168ba:	bf04      	itt	eq
   168bc:	0a1b      	lsreq	r3, r3, #8
   168be:	3008      	addeq	r0, #8
   168c0:	0719      	lsls	r1, r3, #28
   168c2:	bf04      	itt	eq
   168c4:	091b      	lsreq	r3, r3, #4
   168c6:	3004      	addeq	r0, #4
   168c8:	0799      	lsls	r1, r3, #30
   168ca:	bf04      	itt	eq
   168cc:	089b      	lsreq	r3, r3, #2
   168ce:	3002      	addeq	r0, #2
   168d0:	07d9      	lsls	r1, r3, #31
   168d2:	d403      	bmi.n	168dc <__lo0bits+0x50>
   168d4:	085b      	lsrs	r3, r3, #1
   168d6:	f100 0001 	add.w	r0, r0, #1
   168da:	d003      	beq.n	168e4 <__lo0bits+0x58>
   168dc:	6013      	str	r3, [r2, #0]
   168de:	4770      	bx	lr
   168e0:	2000      	movs	r0, #0
   168e2:	4770      	bx	lr
   168e4:	2020      	movs	r0, #32
   168e6:	4770      	bx	lr

000168e8 <__i2b>:
   168e8:	b510      	push	{r4, lr}
   168ea:	460c      	mov	r4, r1
   168ec:	2101      	movs	r1, #1
   168ee:	f7ff ff23 	bl	16738 <_Balloc>
   168f2:	2201      	movs	r2, #1
   168f4:	6144      	str	r4, [r0, #20]
   168f6:	6102      	str	r2, [r0, #16]
   168f8:	bd10      	pop	{r4, pc}

000168fa <__multiply>:
   168fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168fe:	4615      	mov	r5, r2
   16900:	690a      	ldr	r2, [r1, #16]
   16902:	460c      	mov	r4, r1
   16904:	b085      	sub	sp, #20
   16906:	692b      	ldr	r3, [r5, #16]
   16908:	429a      	cmp	r2, r3
   1690a:	bfbe      	ittt	lt
   1690c:	460b      	movlt	r3, r1
   1690e:	462c      	movlt	r4, r5
   16910:	461d      	movlt	r5, r3
   16912:	6927      	ldr	r7, [r4, #16]
   16914:	68a3      	ldr	r3, [r4, #8]
   16916:	f8d5 9010 	ldr.w	r9, [r5, #16]
   1691a:	6861      	ldr	r1, [r4, #4]
   1691c:	eb07 0609 	add.w	r6, r7, r9
   16920:	42b3      	cmp	r3, r6
   16922:	bfb8      	it	lt
   16924:	3101      	addlt	r1, #1
   16926:	f7ff ff07 	bl	16738 <_Balloc>
   1692a:	f100 0114 	add.w	r1, r0, #20
   1692e:	2200      	movs	r2, #0
   16930:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   16934:	460b      	mov	r3, r1
   16936:	4543      	cmp	r3, r8
   16938:	d31d      	bcc.n	16976 <__multiply+0x7c>
   1693a:	f104 0314 	add.w	r3, r4, #20
   1693e:	f105 0214 	add.w	r2, r5, #20
   16942:	f104 0515 	add.w	r5, r4, #21
   16946:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   1694a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   1694e:	9302      	str	r3, [sp, #8]
   16950:	1b3b      	subs	r3, r7, r4
   16952:	3b15      	subs	r3, #21
   16954:	f023 0303 	bic.w	r3, r3, #3
   16958:	3304      	adds	r3, #4
   1695a:	42af      	cmp	r7, r5
   1695c:	bf38      	it	cc
   1695e:	2304      	movcc	r3, #4
   16960:	9301      	str	r3, [sp, #4]
   16962:	9b02      	ldr	r3, [sp, #8]
   16964:	9203      	str	r2, [sp, #12]
   16966:	4293      	cmp	r3, r2
   16968:	d808      	bhi.n	1697c <__multiply+0x82>
   1696a:	2e00      	cmp	r6, #0
   1696c:	dc5a      	bgt.n	16a24 <__multiply+0x12a>
   1696e:	6106      	str	r6, [r0, #16]
   16970:	b005      	add	sp, #20
   16972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16976:	f843 2b04 	str.w	r2, [r3], #4
   1697a:	e7dc      	b.n	16936 <__multiply+0x3c>
   1697c:	f8b2 a000 	ldrh.w	sl, [r2]
   16980:	f1ba 0f00 	cmp.w	sl, #0
   16984:	d024      	beq.n	169d0 <__multiply+0xd6>
   16986:	f104 0e14 	add.w	lr, r4, #20
   1698a:	4689      	mov	r9, r1
   1698c:	f04f 0c00 	mov.w	ip, #0
   16990:	f85e 5b04 	ldr.w	r5, [lr], #4
   16994:	f8d9 b000 	ldr.w	fp, [r9]
   16998:	b2ab      	uxth	r3, r5
   1699a:	4577      	cmp	r7, lr
   1699c:	fa1f fb8b 	uxth.w	fp, fp
   169a0:	fb0a b303 	mla	r3, sl, r3, fp
   169a4:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   169a8:	f8d9 5000 	ldr.w	r5, [r9]
   169ac:	4463      	add	r3, ip
   169ae:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   169b2:	fb0a c50b 	mla	r5, sl, fp, ip
   169b6:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   169ba:	b29b      	uxth	r3, r3
   169bc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   169c0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   169c4:	f849 3b04 	str.w	r3, [r9], #4
   169c8:	d8e2      	bhi.n	16990 <__multiply+0x96>
   169ca:	9b01      	ldr	r3, [sp, #4]
   169cc:	f841 c003 	str.w	ip, [r1, r3]
   169d0:	9b03      	ldr	r3, [sp, #12]
   169d2:	3204      	adds	r2, #4
   169d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   169d8:	f1b9 0f00 	cmp.w	r9, #0
   169dc:	d020      	beq.n	16a20 <__multiply+0x126>
   169de:	680b      	ldr	r3, [r1, #0]
   169e0:	f104 0c14 	add.w	ip, r4, #20
   169e4:	468e      	mov	lr, r1
   169e6:	f04f 0a00 	mov.w	sl, #0
   169ea:	f8bc 5000 	ldrh.w	r5, [ip]
   169ee:	b29b      	uxth	r3, r3
   169f0:	f8be b002 	ldrh.w	fp, [lr, #2]
   169f4:	fb09 b505 	mla	r5, r9, r5, fp
   169f8:	44aa      	add	sl, r5
   169fa:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   169fe:	f84e 3b04 	str.w	r3, [lr], #4
   16a02:	f85c 3b04 	ldr.w	r3, [ip], #4
   16a06:	f8be 5000 	ldrh.w	r5, [lr]
   16a0a:	0c1b      	lsrs	r3, r3, #16
   16a0c:	4567      	cmp	r7, ip
   16a0e:	fb09 5303 	mla	r3, r9, r3, r5
   16a12:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   16a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   16a1a:	d8e6      	bhi.n	169ea <__multiply+0xf0>
   16a1c:	9d01      	ldr	r5, [sp, #4]
   16a1e:	514b      	str	r3, [r1, r5]
   16a20:	3104      	adds	r1, #4
   16a22:	e79e      	b.n	16962 <__multiply+0x68>
   16a24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   16a28:	2b00      	cmp	r3, #0
   16a2a:	d1a0      	bne.n	1696e <__multiply+0x74>
   16a2c:	3e01      	subs	r6, #1
   16a2e:	e79c      	b.n	1696a <__multiply+0x70>

00016a30 <__lshift>:
   16a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a34:	460c      	mov	r4, r1
   16a36:	4607      	mov	r7, r0
   16a38:	4691      	mov	r9, r2
   16a3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   16a3e:	6923      	ldr	r3, [r4, #16]
   16a40:	6849      	ldr	r1, [r1, #4]
   16a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
   16a46:	68a3      	ldr	r3, [r4, #8]
   16a48:	f108 0601 	add.w	r6, r8, #1
   16a4c:	42b3      	cmp	r3, r6
   16a4e:	db3f      	blt.n	16ad0 <__lshift+0xa0>
   16a50:	4638      	mov	r0, r7
   16a52:	f7ff fe71 	bl	16738 <_Balloc>
   16a56:	2300      	movs	r3, #0
   16a58:	4605      	mov	r5, r0
   16a5a:	f100 0114 	add.w	r1, r0, #20
   16a5e:	f100 0210 	add.w	r2, r0, #16
   16a62:	4618      	mov	r0, r3
   16a64:	4553      	cmp	r3, sl
   16a66:	db36      	blt.n	16ad6 <__lshift+0xa6>
   16a68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   16a6c:	f104 0314 	add.w	r3, r4, #20
   16a70:	6920      	ldr	r0, [r4, #16]
   16a72:	f019 091f 	ands.w	r9, r9, #31
   16a76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   16a7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   16a7e:	d02e      	beq.n	16ade <__lshift+0xae>
   16a80:	f1c9 0e20 	rsb	lr, r9, #32
   16a84:	468a      	mov	sl, r1
   16a86:	2200      	movs	r2, #0
   16a88:	6818      	ldr	r0, [r3, #0]
   16a8a:	fa00 f009 	lsl.w	r0, r0, r9
   16a8e:	4302      	orrs	r2, r0
   16a90:	f84a 2b04 	str.w	r2, [sl], #4
   16a94:	f853 2b04 	ldr.w	r2, [r3], #4
   16a98:	459c      	cmp	ip, r3
   16a9a:	fa22 f20e 	lsr.w	r2, r2, lr
   16a9e:	d8f3      	bhi.n	16a88 <__lshift+0x58>
   16aa0:	ebac 0304 	sub.w	r3, ip, r4
   16aa4:	f104 0015 	add.w	r0, r4, #21
   16aa8:	3b15      	subs	r3, #21
   16aaa:	f023 0303 	bic.w	r3, r3, #3
   16aae:	3304      	adds	r3, #4
   16ab0:	4560      	cmp	r0, ip
   16ab2:	bf88      	it	hi
   16ab4:	2304      	movhi	r3, #4
   16ab6:	50ca      	str	r2, [r1, r3]
   16ab8:	b10a      	cbz	r2, 16abe <__lshift+0x8e>
   16aba:	f108 0602 	add.w	r6, r8, #2
   16abe:	3e01      	subs	r6, #1
   16ac0:	4638      	mov	r0, r7
   16ac2:	4621      	mov	r1, r4
   16ac4:	612e      	str	r6, [r5, #16]
   16ac6:	f7ff fe6b 	bl	167a0 <_Bfree>
   16aca:	4628      	mov	r0, r5
   16acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16ad0:	3101      	adds	r1, #1
   16ad2:	005b      	lsls	r3, r3, #1
   16ad4:	e7ba      	b.n	16a4c <__lshift+0x1c>
   16ad6:	3301      	adds	r3, #1
   16ad8:	f842 0f04 	str.w	r0, [r2, #4]!
   16adc:	e7c2      	b.n	16a64 <__lshift+0x34>
   16ade:	3904      	subs	r1, #4
   16ae0:	f853 2b04 	ldr.w	r2, [r3], #4
   16ae4:	459c      	cmp	ip, r3
   16ae6:	f841 2f04 	str.w	r2, [r1, #4]!
   16aea:	d8f9      	bhi.n	16ae0 <__lshift+0xb0>
   16aec:	e7e7      	b.n	16abe <__lshift+0x8e>

00016aee <__mcmp>:
   16aee:	4603      	mov	r3, r0
   16af0:	690a      	ldr	r2, [r1, #16]
   16af2:	6900      	ldr	r0, [r0, #16]
   16af4:	1a80      	subs	r0, r0, r2
   16af6:	b530      	push	{r4, r5, lr}
   16af8:	d10d      	bne.n	16b16 <__mcmp+0x28>
   16afa:	3314      	adds	r3, #20
   16afc:	3114      	adds	r1, #20
   16afe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   16b02:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   16b06:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   16b0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   16b0e:	4295      	cmp	r5, r2
   16b10:	d002      	beq.n	16b18 <__mcmp+0x2a>
   16b12:	d304      	bcc.n	16b1e <__mcmp+0x30>
   16b14:	2001      	movs	r0, #1
   16b16:	bd30      	pop	{r4, r5, pc}
   16b18:	42a3      	cmp	r3, r4
   16b1a:	d3f4      	bcc.n	16b06 <__mcmp+0x18>
   16b1c:	e7fb      	b.n	16b16 <__mcmp+0x28>
   16b1e:	f04f 30ff 	mov.w	r0, #4294967295
   16b22:	e7f8      	b.n	16b16 <__mcmp+0x28>

00016b24 <__mdiff>:
   16b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b28:	460c      	mov	r4, r1
   16b2a:	4606      	mov	r6, r0
   16b2c:	4611      	mov	r1, r2
   16b2e:	4692      	mov	sl, r2
   16b30:	4620      	mov	r0, r4
   16b32:	f7ff ffdc 	bl	16aee <__mcmp>
   16b36:	1e05      	subs	r5, r0, #0
   16b38:	d108      	bne.n	16b4c <__mdiff+0x28>
   16b3a:	4629      	mov	r1, r5
   16b3c:	4630      	mov	r0, r6
   16b3e:	f7ff fdfb 	bl	16738 <_Balloc>
   16b42:	2301      	movs	r3, #1
   16b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
   16b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b4c:	bfa3      	ittte	ge
   16b4e:	4653      	movge	r3, sl
   16b50:	46a2      	movge	sl, r4
   16b52:	2500      	movge	r5, #0
   16b54:	2501      	movlt	r5, #1
   16b56:	bfa8      	it	ge
   16b58:	461c      	movge	r4, r3
   16b5a:	f8da 1004 	ldr.w	r1, [sl, #4]
   16b5e:	4630      	mov	r0, r6
   16b60:	f7ff fdea 	bl	16738 <_Balloc>
   16b64:	f104 0914 	add.w	r9, r4, #20
   16b68:	f8da 7010 	ldr.w	r7, [sl, #16]
   16b6c:	f100 0814 	add.w	r8, r0, #20
   16b70:	6926      	ldr	r6, [r4, #16]
   16b72:	f10a 0210 	add.w	r2, sl, #16
   16b76:	60c5      	str	r5, [r0, #12]
   16b78:	f10a 0514 	add.w	r5, sl, #20
   16b7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   16b80:	46c2      	mov	sl, r8
   16b82:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   16b86:	f04f 0c00 	mov.w	ip, #0
   16b8a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   16b8e:	f859 3b04 	ldr.w	r3, [r9], #4
   16b92:	fa1f f18b 	uxth.w	r1, fp
   16b96:	454e      	cmp	r6, r9
   16b98:	4461      	add	r1, ip
   16b9a:	fa1f fc83 	uxth.w	ip, r3
   16b9e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   16ba2:	eba1 010c 	sub.w	r1, r1, ip
   16ba6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   16baa:	eb03 4321 	add.w	r3, r3, r1, asr #16
   16bae:	b289      	uxth	r1, r1
   16bb0:	ea4f 4c23 	mov.w	ip, r3, asr #16
   16bb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   16bb8:	f84a 3b04 	str.w	r3, [sl], #4
   16bbc:	d8e5      	bhi.n	16b8a <__mdiff+0x66>
   16bbe:	1b33      	subs	r3, r6, r4
   16bc0:	3415      	adds	r4, #21
   16bc2:	3b15      	subs	r3, #21
   16bc4:	f023 0303 	bic.w	r3, r3, #3
   16bc8:	3304      	adds	r3, #4
   16bca:	42a6      	cmp	r6, r4
   16bcc:	bf38      	it	cc
   16bce:	2304      	movcc	r3, #4
   16bd0:	441d      	add	r5, r3
   16bd2:	4443      	add	r3, r8
   16bd4:	462c      	mov	r4, r5
   16bd6:	461e      	mov	r6, r3
   16bd8:	4574      	cmp	r4, lr
   16bda:	d30e      	bcc.n	16bfa <__mdiff+0xd6>
   16bdc:	f10e 0203 	add.w	r2, lr, #3
   16be0:	1b52      	subs	r2, r2, r5
   16be2:	3d03      	subs	r5, #3
   16be4:	f022 0203 	bic.w	r2, r2, #3
   16be8:	45ae      	cmp	lr, r5
   16bea:	bf38      	it	cc
   16bec:	2200      	movcc	r2, #0
   16bee:	441a      	add	r2, r3
   16bf0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   16bf4:	b18b      	cbz	r3, 16c1a <__mdiff+0xf6>
   16bf6:	6107      	str	r7, [r0, #16]
   16bf8:	e7a6      	b.n	16b48 <__mdiff+0x24>
   16bfa:	f854 8b04 	ldr.w	r8, [r4], #4
   16bfe:	fa1f f288 	uxth.w	r2, r8
   16c02:	4462      	add	r2, ip
   16c04:	1411      	asrs	r1, r2, #16
   16c06:	b292      	uxth	r2, r2
   16c08:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   16c0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   16c10:	ea4f 4c21 	mov.w	ip, r1, asr #16
   16c14:	f846 2b04 	str.w	r2, [r6], #4
   16c18:	e7de      	b.n	16bd8 <__mdiff+0xb4>
   16c1a:	3f01      	subs	r7, #1
   16c1c:	e7e8      	b.n	16bf0 <__mdiff+0xcc>

00016c1e <__d2b>:
   16c1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16c22:	461c      	mov	r4, r3
   16c24:	2101      	movs	r1, #1
   16c26:	4690      	mov	r8, r2
   16c28:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   16c2c:	f7ff fd84 	bl	16738 <_Balloc>
   16c30:	f3c4 0313 	ubfx	r3, r4, #0, #20
   16c34:	f3c4 540a 	ubfx	r4, r4, #20, #11
   16c38:	4607      	mov	r7, r0
   16c3a:	bb2c      	cbnz	r4, 16c88 <__d2b+0x6a>
   16c3c:	9301      	str	r3, [sp, #4]
   16c3e:	f1b8 0300 	subs.w	r3, r8, #0
   16c42:	d026      	beq.n	16c92 <__d2b+0x74>
   16c44:	4668      	mov	r0, sp
   16c46:	9300      	str	r3, [sp, #0]
   16c48:	f7ff fe20 	bl	1688c <__lo0bits>
   16c4c:	9900      	ldr	r1, [sp, #0]
   16c4e:	b1f0      	cbz	r0, 16c8e <__d2b+0x70>
   16c50:	9a01      	ldr	r2, [sp, #4]
   16c52:	f1c0 0320 	rsb	r3, r0, #32
   16c56:	fa02 f303 	lsl.w	r3, r2, r3
   16c5a:	40c2      	lsrs	r2, r0
   16c5c:	430b      	orrs	r3, r1
   16c5e:	9201      	str	r2, [sp, #4]
   16c60:	617b      	str	r3, [r7, #20]
   16c62:	9b01      	ldr	r3, [sp, #4]
   16c64:	2b00      	cmp	r3, #0
   16c66:	61bb      	str	r3, [r7, #24]
   16c68:	bf14      	ite	ne
   16c6a:	2102      	movne	r1, #2
   16c6c:	2101      	moveq	r1, #1
   16c6e:	6139      	str	r1, [r7, #16]
   16c70:	b1c4      	cbz	r4, 16ca4 <__d2b+0x86>
   16c72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   16c76:	4404      	add	r4, r0
   16c78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   16c7c:	6034      	str	r4, [r6, #0]
   16c7e:	6028      	str	r0, [r5, #0]
   16c80:	4638      	mov	r0, r7
   16c82:	b002      	add	sp, #8
   16c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16c8c:	e7d6      	b.n	16c3c <__d2b+0x1e>
   16c8e:	6179      	str	r1, [r7, #20]
   16c90:	e7e7      	b.n	16c62 <__d2b+0x44>
   16c92:	a801      	add	r0, sp, #4
   16c94:	f7ff fdfa 	bl	1688c <__lo0bits>
   16c98:	9b01      	ldr	r3, [sp, #4]
   16c9a:	2101      	movs	r1, #1
   16c9c:	3020      	adds	r0, #32
   16c9e:	617b      	str	r3, [r7, #20]
   16ca0:	6139      	str	r1, [r7, #16]
   16ca2:	e7e5      	b.n	16c70 <__d2b+0x52>
   16ca4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   16ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   16cac:	6030      	str	r0, [r6, #0]
   16cae:	6918      	ldr	r0, [r3, #16]
   16cb0:	f7ff fdcc 	bl	1684c <__hi0bits>
   16cb4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   16cb8:	6029      	str	r1, [r5, #0]
   16cba:	e7e1      	b.n	16c80 <__d2b+0x62>

00016cbc <_calloc_r>:
   16cbc:	b538      	push	{r3, r4, r5, lr}
   16cbe:	fb02 f501 	mul.w	r5, r2, r1
   16cc2:	4629      	mov	r1, r5
   16cc4:	f7f9 ff0a 	bl	10adc <_malloc_r>
   16cc8:	4604      	mov	r4, r0
   16cca:	b118      	cbz	r0, 16cd4 <_calloc_r+0x18>
   16ccc:	462a      	mov	r2, r5
   16cce:	2100      	movs	r1, #0
   16cd0:	f7ff fa89 	bl	161e6 <memset>
   16cd4:	4620      	mov	r0, r4
   16cd6:	bd38      	pop	{r3, r4, r5, pc}

00016cd8 <__sread>:
   16cd8:	b510      	push	{r4, lr}
   16cda:	460c      	mov	r4, r1
   16cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16ce0:	f7fa fff6 	bl	11cd0 <_read_r>
   16ce4:	2800      	cmp	r0, #0
   16ce6:	bfab      	itete	ge
   16ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   16cea:	89a3      	ldrhlt	r3, [r4, #12]
   16cec:	181b      	addge	r3, r3, r0
   16cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   16cf2:	bfac      	ite	ge
   16cf4:	6563      	strge	r3, [r4, #84]	; 0x54
   16cf6:	81a3      	strhlt	r3, [r4, #12]
   16cf8:	bd10      	pop	{r4, pc}

00016cfa <__swrite>:
   16cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cfe:	461f      	mov	r7, r3
   16d00:	898b      	ldrh	r3, [r1, #12]
   16d02:	4605      	mov	r5, r0
   16d04:	460c      	mov	r4, r1
   16d06:	05db      	lsls	r3, r3, #23
   16d08:	4616      	mov	r6, r2
   16d0a:	d505      	bpl.n	16d18 <__swrite+0x1e>
   16d0c:	2302      	movs	r3, #2
   16d0e:	2200      	movs	r2, #0
   16d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d14:	f7fa ffca 	bl	11cac <_lseek_r>
   16d18:	89a3      	ldrh	r3, [r4, #12]
   16d1a:	4632      	mov	r2, r6
   16d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16d20:	4628      	mov	r0, r5
   16d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   16d26:	81a3      	strh	r3, [r4, #12]
   16d28:	463b      	mov	r3, r7
   16d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16d2e:	f7fa bf79 	b.w	11c24 <_write_r>

00016d32 <__sseek>:
   16d32:	b510      	push	{r4, lr}
   16d34:	460c      	mov	r4, r1
   16d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d3a:	f7fa ffb7 	bl	11cac <_lseek_r>
   16d3e:	1c43      	adds	r3, r0, #1
   16d40:	89a3      	ldrh	r3, [r4, #12]
   16d42:	bf15      	itete	ne
   16d44:	6560      	strne	r0, [r4, #84]	; 0x54
   16d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   16d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   16d4e:	81a3      	strheq	r3, [r4, #12]
   16d50:	bf18      	it	ne
   16d52:	81a3      	strhne	r3, [r4, #12]
   16d54:	bd10      	pop	{r4, pc}

00016d56 <__sclose>:
   16d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   16d5a:	f7fa bf75 	b.w	11c48 <_close_r>

00016d5e <__ascii_mbtowc>:
   16d5e:	b082      	sub	sp, #8
   16d60:	b901      	cbnz	r1, 16d64 <__ascii_mbtowc+0x6>
   16d62:	a901      	add	r1, sp, #4
   16d64:	b142      	cbz	r2, 16d78 <__ascii_mbtowc+0x1a>
   16d66:	b14b      	cbz	r3, 16d7c <__ascii_mbtowc+0x1e>
   16d68:	7813      	ldrb	r3, [r2, #0]
   16d6a:	600b      	str	r3, [r1, #0]
   16d6c:	7812      	ldrb	r2, [r2, #0]
   16d6e:	1e10      	subs	r0, r2, #0
   16d70:	bf18      	it	ne
   16d72:	2001      	movne	r0, #1
   16d74:	b002      	add	sp, #8
   16d76:	4770      	bx	lr
   16d78:	4610      	mov	r0, r2
   16d7a:	e7fb      	b.n	16d74 <__ascii_mbtowc+0x16>
   16d7c:	f06f 0001 	mvn.w	r0, #1
   16d80:	e7f8      	b.n	16d74 <__ascii_mbtowc+0x16>

00016d82 <__ascii_wctomb>:
   16d82:	4603      	mov	r3, r0
   16d84:	4608      	mov	r0, r1
   16d86:	b141      	cbz	r1, 16d9a <__ascii_wctomb+0x18>
   16d88:	2aff      	cmp	r2, #255	; 0xff
   16d8a:	d904      	bls.n	16d96 <__ascii_wctomb+0x14>
   16d8c:	228a      	movs	r2, #138	; 0x8a
   16d8e:	f04f 30ff 	mov.w	r0, #4294967295
   16d92:	601a      	str	r2, [r3, #0]
   16d94:	4770      	bx	lr
   16d96:	2001      	movs	r0, #1
   16d98:	700a      	strb	r2, [r1, #0]
   16d9a:	4770      	bx	lr

00016d9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16d9c:	f7ee bffa 	b.w	5d94 <SystemInit>
